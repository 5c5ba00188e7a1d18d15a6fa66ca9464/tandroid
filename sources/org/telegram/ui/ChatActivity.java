package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.Parcelable;
import android.os.SystemClock;
import android.os.Vibrator;
import android.telephony.TelephonyManager;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.ImageSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewParent;
import android.view.ViewPropertyAnimator;
import android.view.ViewTreeObserver;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.Space;
import android.widget.TextView;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.graphics.drawable.DrawableCompat;
import androidx.core.math.MathUtils;
import androidx.core.util.Consumer;
import androidx.dynamicanimation.animation.DynamicAnimation;
import androidx.dynamicanimation.animation.FloatValueHolder;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import androidx.recyclerview.widget.ChatListItemAnimator;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerCustom;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import j$.util.Collection$-EL;
import j$.util.Comparator$-CC;
import j$.util.function.Predicate;
import j$.util.function.ToIntFunction;
import j$.util.stream.Collectors;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLDecoder;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BotWebViewVibrationEffect;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChannelBoostsController;
import org.telegram.messenger.ChatMessageSharedResources;
import org.telegram.messenger.ChatMessagesMetadataController;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ChatThemeController;
import org.telegram.messenger.CodeHighlighting;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DispatchQueue;
import org.telegram.messenger.DocumentObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiData;
import org.telegram.messenger.FactCheckController;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FlagSecureReason;
import org.telegram.messenger.HashtagSearchController;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LanguageDetector;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagePreviewParams;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.R;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.SvgHelper;
import org.telegram.messenger.Timer;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.TranslateController;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.utils.PhotoUtilities;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.ResultCallback;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.tgnet.tl.TL_account;
import org.telegram.tgnet.tl.TL_bots;
import org.telegram.tgnet.tl.TL_stories;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AdjustPanLayoutHelper;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.EmojiThemes;
import org.telegram.ui.ActionBar.INavigationLayout;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.Adapters.FiltersView;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MessagesSearchAdapter;
import org.telegram.ui.AvatarPreviewer;
import org.telegram.ui.Business.BusinessBotButton;
import org.telegram.ui.Business.BusinessLinksActivity;
import org.telegram.ui.Business.BusinessLinksController;
import org.telegram.ui.Business.BusinessLinksEmptyView;
import org.telegram.ui.Business.QuickRepliesActivity;
import org.telegram.ui.Business.QuickRepliesController;
import org.telegram.ui.Business.QuickRepliesEmptyView;
import org.telegram.ui.Cells.BaseCell;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.ProfileChannelCell;
import org.telegram.ui.Cells.ShareDialogCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedTextView;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AttachBotIntroTopView;
import org.telegram.ui.Components.AudioPlayerAlert;
import org.telegram.ui.Components.AutoDeletePopupWrapper;
import org.telegram.ui.Components.BackButtonMenu;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BluredView;
import org.telegram.ui.Components.BlurredFrameLayout;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ChatActivityEnterTopView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatActivityInterface;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlertDocumentLayout;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.ChatGreetingsView;
import org.telegram.ui.Components.ChatNotificationsPopupWrapper;
import org.telegram.ui.Components.ChatScrimPopupContainerLayout;
import org.telegram.ui.Components.ChatSearchTabs;
import org.telegram.ui.Components.ChatThemeBottomSheet;
import org.telegram.ui.Components.ChecksHintView;
import org.telegram.ui.Components.CircularProgressDrawable;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CounterView;
import org.telegram.ui.Components.CrossfadeDrawable;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EditTextCaption;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiPacksAlert;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FireworksOverlay;
import org.telegram.ui.Components.FlickerLoadingView;
import org.telegram.ui.Components.FloatingDebug.FloatingDebugController;
import org.telegram.ui.Components.FloatingDebug.FloatingDebugProvider;
import org.telegram.ui.Components.Forum.ForumUtilities;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.GigagroupConvertAlert;
import org.telegram.ui.Components.HashtagHistoryView;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.ImportingAlert;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.InviteMembersBottomSheet;
import org.telegram.ui.Components.ItemOptions;
import org.telegram.ui.Components.JoinGroupAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.MediaActivity;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MessageContainsEmojiButton;
import org.telegram.ui.Components.MessagePreviewView;
import org.telegram.ui.Components.MessagePrivateSeenView;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PhonebookShareAlert;
import org.telegram.ui.Components.PinnedLineView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.PollVotesAlert;
import org.telegram.ui.Components.PopupSwipeBackLayout;
import org.telegram.ui.Components.Premium.GiftPremiumBottomSheet$GiftTier;
import org.telegram.ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.Premium.PremiumPreviewBottomSheet;
import org.telegram.ui.Components.Premium.boosts.BoostDialogs;
import org.telegram.ui.Components.Premium.boosts.GiftInfoBottomSheet;
import org.telegram.ui.Components.Premium.boosts.PremiumPreviewGiftLinkBottomSheet;
import org.telegram.ui.Components.QuoteSpan;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RLottieImageView;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.ReactedHeaderView;
import org.telegram.ui.Components.ReactedUsersListView;
import org.telegram.ui.Components.ReactionTabHolderView;
import org.telegram.ui.Components.Reactions.ChatSelectionReactionMenuOverlay;
import org.telegram.ui.Components.Reactions.ReactionsEffectOverlay;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.ReactionsContainerLayout;
import org.telegram.ui.Components.RecyclerAnimationScrollHelper;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ScaleStateListAnimator;
import org.telegram.ui.Components.ScrimOptions;
import org.telegram.ui.Components.SearchTagsList;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickerEmptyView;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.SuggestEmojiView;
import org.telegram.ui.Components.TextSelectionHint;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.ThanosEffect;
import org.telegram.ui.Components.ThemeEditorView;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TranslateAlert2;
import org.telegram.ui.Components.TranslateButton;
import org.telegram.ui.Components.TrendingStickersAlert;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.UnreadCounterTextView;
import org.telegram.ui.Components.ViewHelper;
import org.telegram.ui.Components.ViewPagerFixed;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.Components.voip.CellFlickerDrawable;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.ContactAddActivity;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.CountrySelectActivity;
import org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.GroupCreateActivity;
import org.telegram.ui.LocationActivity;
import org.telegram.ui.PhotoAlbumPickerActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.PollCreateActivity;
import org.telegram.ui.ProfileActivity;
import org.telegram.ui.ProfileBirthdayEffect;
import org.telegram.ui.Stars.StarReactionsOverlay;
import org.telegram.ui.Stars.StarsController;
import org.telegram.ui.Stars.StarsIntroActivity;
import org.telegram.ui.Stars.StarsReactionsSheet;
import org.telegram.ui.Stories.StoriesListPlaceProvider;
import org.telegram.ui.Stories.StoriesUtilities;
import org.telegram.ui.Stories.StoryViewer;
import org.telegram.ui.Stories.recorder.HintView2;
import org.telegram.ui.Stories.recorder.PreviewView;
import org.telegram.ui.Stories.recorder.StoryEntry;
import org.telegram.ui.Stories.recorder.StoryRecorder;
import org.telegram.ui.bots.BotCommandsMenuContainer;
import org.telegram.ui.bots.BotCommandsMenuView;
import org.telegram.ui.bots.BotWebViewAttachedSheet;
import org.telegram.ui.bots.BotWebViewSheet;
import org.telegram.ui.bots.WebViewRequestProps;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes4.dex */
public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate, ChatActivityInterface, FloatingDebugProvider, InstantCameraView.Delegate {
    private static int SKELETON_LIGHT_OVERLAY_ALPHA = 22;
    private static float SKELETON_SATURATION = 1.4f;
    public static Pattern privateMsgUrlPattern;
    public static Pattern publicMsgUrlPattern;
    public static boolean scrolling;
    private static ArrayList textSelectionHelpersCache;
    public static Pattern voiceChatUrlPattern;
    private Paint actionBarBackgroundPaint;
    public SearchTagsList actionBarSearchTags;
    private ArrayList actionModeViews;
    private long activityResumeTime;
    private ActionBarMenuItem.Item addContactItem;
    private TextView addToContactsButton;
    private boolean addToContactsButtonArchive;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private float alertViewEnterProgress;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond;
    public boolean allowExpandPreviewByClick;
    private boolean allowStickersPanel;
    private HashMap alreadyPlayedStickers;
    boolean animateProgressViewTo;
    private ArrayList animateSendingViews;
    private HashMap animatingDocuments;
    private ClippingImageView animatingImageView;
    public ArrayList animatingMessageObjects;
    private int appliedDraftDate;
    private boolean approved;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenu.LazyItem attachItem;
    private String attachMenuBotStartCommand;
    private String attachMenuBotToOpen;
    private ActionBarMenu.LazyItem audioCallIconItem;
    private ChatAvatarContainer avatarContainer;
    private ChatActivity backToPreviousFragment;
    private ChatBigEmptyView bigEmptyView;
    public ProfileBirthdayEffect.BirthdayEffectFetcher birthdayAssetsFetcher;
    private BusinessBotButton bizBotButton;
    private boolean bizbothint;
    private BluredView blurredView;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private TL_stories.TL_premium_boostsStatus boostsStatus;
    private MessageObject botButtons;
    private PhotoViewer.PhotoViewerProvider botContextProvider;
    private ArrayList botContextResults;
    private LongSparseArray botInfo;
    private HintView2 botMessageHint;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private BlurredFrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private BlurredFrameLayout bottomOverlayChat;
    private UnreadCounterTextView bottomOverlayChatText;
    private boolean bottomOverlayChatWaitsReply;
    private ImageView bottomOverlayImage;
    private boolean bottomOverlayLinks;
    private LinkSpanDrawable.LinksTextView bottomOverlayLinksText;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayStartButton;
    private TextView bottomOverlayText;
    private float bottomPanelTranslationY;
    private float bottomPanelTranslationYReverse;
    Bulletin.Delegate bulletinDelegate;
    public TLRPC.TL_businessChatLink businessLink;
    private BusinessLinksEmptyView businessLinksEmptyView;
    private boolean[] cacheEndReached;
    private ChannelBoostsController.CanApplyBoost canApplyBoosts;
    private int canEditMessagesCount;
    private int canForwardMessagesCount;
    private int canSaveDocumentsCount;
    private int canSaveMusicCount;
    private boolean canShowPagedownButton;
    private Runnable cancelFixedPositionRunnable;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    private int cantSaveMessagesCount;
    private ValueAnimator changeBoundAnimator;
    private ChatActivityDelegate chatActivityDelegate;
    private ChatActivityEnterTopView chatActivityEnterTopView;
    protected ChatActivityEnterView chatActivityEnterView;
    private boolean chatActivityEnterViewAnimateBeforeSending;
    private int chatActivityEnterViewAnimateFromTop;
    private ChatActivityAdapter chatAdapter;
    public ChatAttachAlert chatAttachAlert;
    private int chatEmojiViewPadding;
    private long chatEnterTime;
    protected TLRPC.ChatFull chatInfo;
    private TLRPC.ChatInvite chatInvite;
    private Runnable chatInviteRunnable;
    private long chatInviterId;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private ChatListItemAnimator chatListItemAnimator;
    private ThanosEffect chatListThanosEffect;
    private RecyclerListView chatListView;
    private boolean chatListViewAttached;
    public float chatListViewPaddingTop;
    public int chatListViewPaddingVisibleOffset;
    private final ChatMessagesMetadataController chatMessagesMetadataController;
    private int chatMode;
    private ChatNotificationsPopupWrapper chatNotificationsPopupWrapper;
    private RecyclerAnimationScrollHelper chatScrollHelper;
    private final ChatScrollCallback chatScrollHelperCallback;
    private ChatThemeBottomSheet chatThemeBottomSheet;
    private boolean chatWasReset;
    private TextView chatWithAdminTextView;
    private Runnable checkPaddingsRunnable;
    private boolean checkTextureViewPosition;
    private Runnable checkTranslationRunnable;
    private boolean checkedSavedMessagesHint;
    private ChecksHintView checksHintView;
    private ActionBarMenuItem.Item clearHistoryItem;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private Runnable closeInstantCameraAnimation;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private ActionBarMenuItem.Item closeTopicItem;
    private int commentLoadingGuid;
    private int commentLoadingMessageId;
    private long commentLoadingStartedAt;
    private int commentMessagesLoadingGuid;
    private int commentMessagesRequestId;
    private int commentRequestId;
    private int contentPaddingTop;
    private float contentPanTranslation;
    private float contentPanTranslationT;
    ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate;
    public ChatActivityFragmentView contentView;
    private boolean createGroupCall;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC.Chat currentChat;
    protected TLRPC.EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    private int currentPinnedMessageId;
    private int[] currentPinnedMessageIndex;
    protected TLRPC.User currentUser;
    SparseIntArray dateObjectsStableIds;
    private int defaultSearchPage;
    private Runnable delayedReadRunnable;
    private Runnable destroyTextureViewRunnable;
    int dialogFilterId;
    int dialogFolderId;
    private long dialog_id;
    private Long dialog_id_Long;
    private ChatMessageCell drawLaterRoundProgressCell;
    public float drawingChatListViewYoffset;
    private ChatMessageCell dummyMessageCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenu.LazyItem editTextItem;
    private int editTextStart;
    public MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    public EmojiAnimationsOverlay emojiAnimationsOverlay;
    private View emojiButtonRed;
    private HintView emojiHintTextView;
    private LinkSpanDrawable.LinksTextView emojiStatusSpamHint;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private LinearLayout emptyViewContent;
    private boolean[] endReached;
    private HintView2 factCheckHint;
    private boolean fakePostponedScroll;
    private int fieldPanelShown;
    private boolean filledEditTextItemMenu;
    private LongSparseArray filteredMessagesByDays;
    private LongSparseArray filteredMessagesDict;
    private FireworksOverlay fireworksOverlay;
    private boolean first;
    private boolean firstLoading;
    private boolean firstMessagesLoaded;
    boolean firstOpen;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private int fixedKeyboardHeight;
    private FlagSecureReason flagSecure;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private float floatingDateViewOffset;
    private boolean forbidForwardingWithDismiss;
    public boolean forceDisallowApplyWallpeper;
    public boolean forceDisallowRedrawThemeDescriptions;
    private boolean forceHistoryEmpty;
    private int forceNextPinnedMessageId;
    private boolean forceScrollToFirst;
    private boolean forceScrollToTop;
    private CharSequence formwardingNameText;
    private TLRPC.TL_forumTopic forumTopic;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private boolean[] forwardEndReached;
    private HintView forwardHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    MessagePreviewView forwardingPreviewView;
    private ArrayList foundUrls;
    public TLRPC.WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    public boolean fragmentOpened;
    private AnimatorSet fragmentTransition;
    private Runnable fragmentTransitionRunnable;
    private boolean fromPullingDownTransition;
    private HintView fwdRestrictedBottomHint;
    private HintView fwdRestrictedTopHint;
    private HintView gifHintTextView;
    private boolean globalIgnoreLayout;
    private ChatActionCell greetingsInfo;
    private ChatGreetingsView greetingsViewContainer;
    private ChatObject.Call groupCall;
    private HintView2 groupEmojiPackHint;
    private LongSparseArray groupedMessagesMap;
    private boolean hasAllMentionsLocal;
    private boolean hasBotWebView;
    private boolean hasBotsCommands;
    private boolean hasQuickReplies;
    private boolean hasUnfavedSelected;
    private HashtagHistoryView hashtagHistoryView;
    private FlickerLoadingView hashtagLoadingView;
    private StickerEmptyView hashtagSearchEmptyView;
    private int hashtagSearchSelectedIndex;
    public ChatSearchTabs hashtagSearchTabs;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private boolean hideCommentLoading;
    private int hideDateDelay;
    private boolean hideForwardEndReached;
    public int highlightMessageId;
    public String highlightMessageQuote;
    public boolean highlightMessageQuoteFirst;
    private long highlightMessageQuoteFirstTime;
    public int highlightMessageQuoteOffset;
    private MessageObject hint2MessageObject;
    private MessageObject hintMessageObject;
    private int hintMessageType;
    private boolean historyPreloaded;
    private boolean ignoreAttachOnPause;
    private boolean ignoreDraft;
    private ChatActionCell infoTopView;
    private Animator infoTopViewAnimator;
    private int initialMessagesSize;
    private long inlineReturn;
    public InstantCameraView instantCameraView;
    private boolean invalidateChatListViewTopPadding;
    private boolean invalidateMessagesVisiblePart;
    public boolean isComments;
    public boolean isFullyVisible;
    public boolean isInsideContainer;
    private boolean isPauseOnThemePreview;
    public boolean isTopic;
    public boolean justCreatedChat;
    public boolean justCreatedTopic;
    private boolean keyboardWasVisible;
    private boolean lastCallCheckFromServer;
    private HashMap lastLinkPreviewResults;
    private int lastLoadIndex;
    private long lastScrollTime;
    private int lastSkeletonCount;
    private int lastSkeletonMessageCount;
    private float lastTouchY;
    private long lastTranslationCheck;
    private int last_message_id;
    private int linkSearchRequestId;
    private Boolean liteModeChat;
    private boolean livestream;
    private boolean loadInfo;
    private int loadedPinnedMessagesCount;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private SparseArray loadingPinnedMessages;
    private boolean loadingPinnedMessagesList;
    private int loadsCount;
    private boolean locationAlertShown;
    private int[] maxDate;
    private int[] maxMessageId;
    private int maxPinnedMessageId;
    private boolean maybeStartTrackingSlidingView;
    private HintView mediaBanTooltip;
    public MentionsContainerView mentionContainer;
    private AnimatorSet mentionListAnimation;
    private FrameLayout mentiondownButton;
    private ValueAnimator mentiondownButtonAnimation;
    private SimpleTextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private float mentionsButtonEnterProgress;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private ActionBarMenuSubItem menuDeleteItem;
    private long mergeDialogId;
    private Animator messageEditTextAnimator;
    public MessageEnterTransitionContainer messageEnterTransitionContainer;
    public MessagePreviewParams messagePreviewParams;
    private Bulletin messageSeenPrivacyBulletin;
    private List messageSkeletons;
    public ArrayList messages;
    private HashMap messagesByDays;
    private SparseArray messagesByDaysSorted;
    private SparseArray[] messagesDict;
    private MessagesSearchAdapter messagesSearchAdapter;
    private FrameLayout messagesSearchListContainer;
    private RecyclerListView messagesSearchListView;
    private AnimatorSet messagesSearchListViewAnimation;
    private int migrated_to;
    private int[] minDate;
    private int[] minMessageId;
    private ActionBarMenuItem.Item muteItem;
    private ActionBarMenuItem.Item muteItemGap;
    private MessageObject needAnimateToMessage;
    private boolean needRemovePreviousSameChatActivity;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private ArrayList nextChannels;
    private boolean nextScrollForce;
    private int nextScrollForcePinnedMessageId;
    private int nextScrollFromMessageId;
    private int nextScrollLoadIndex;
    private boolean nextScrollSelect;
    private int nextScrollToMessageId;
    private HintView noSoundHintView;
    private ArrayList notPushedSponsoredMessages;
    private Runnable onChatMessagesLoaded;
    RecyclerListView.OnItemClickListenerExtended onItemClickListener;
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener;
    public Runnable onThemeChange;
    public boolean openAnimationEnded;
    private long openAnimationStartTime;
    private ActionBarMenuItem.Item openForumItem;
    private boolean openImport;
    protected boolean openKeyboardOnAttachMenuClose;
    private boolean openSearchKeyboard;
    private boolean openVideoChat;
    private View overlayView;
    public float paddingTopHeight;
    private ValueAnimator pagedownAnimator;
    private FrameLayout pagedownButton;
    private ValueAnimator pagedownButtonAnimation;
    private ImageView pagedownButtonArrow;
    private CounterView pagedownButtonCounter;
    private float pagedownButtonEnterProgress;
    private ImageView pagedownButtonImage;
    private ImageView pagedownButtonLoading;
    private CircularProgressDrawable pagedownButtonLoadingDrawable;
    private boolean pagedownButtonShowedByScroll;
    private float pagedownLoadingT;
    private ChatActivity parentChatActivity;
    private ThemeDelegate parentThemeDelegate;
    private boolean paused;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private ChatActivityMemberRequestsDelegate pendingRequestsDelegate;
    private ArrayList pendingSendMessages;
    private SparseArray pendingSendMessagesDict;
    private PhotoViewer.PhotoViewerProvider photoViewerPaidMediaProvider;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider;
    private int pinBullerinTag;
    private Bulletin pinBulletin;
    private PinchToZoomHelper pinchToZoomHelper;
    private NumberTextView pinnedCounterTextView;
    private int pinnedCounterTextViewX;
    private boolean pinnedEndReached;
    private int pinnedImageCacheType;
    private boolean pinnedImageHasBlur;
    private TLRPC.PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC.PhotoSize pinnedImageThumbLocation;
    private PinnedLineView pinnedLineView;
    private AnimatorSet pinnedListAnimator;
    private ImageView pinnedListButton;
    private PinnedMessageButton[] pinnedMessageButton;
    private boolean pinnedMessageButtonShown;
    private float pinnedMessageEnterOffset;
    private ArrayList pinnedMessageIds;
    private BackupImageView[] pinnedMessageImageView;
    private HashMap pinnedMessageObjects;
    private SimpleTextView[] pinnedMessageTextView;
    private BlurredFrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private TrackingWidthSimpleTextView[] pinnedNameTextView;
    private AnimatorSet[] pinnedNextAnimation;
    private RadialProgressView pinnedProgress;
    private boolean pinnedProgressIsShowing;
    private ChatMessageCell pollHintCell;
    private HintView pollHintView;
    private int pollHintX;
    private int pollHintY;
    private LongSparseArray polls;
    private ArrayList pollsToCheck;
    private int popupAnimationIndex;
    private NotificationCenter.PostponeNotificationCallback postponeNotificationsWhileLoadingCallback;
    private final DialogInterface.OnCancelListener postponedScrollCancelListener;
    private boolean postponedScrollIsCanceled;
    private int postponedScrollMessageId;
    private int postponedScrollMinMessageId;
    private int postponedScrollToLastMessageQueryIndex;
    private TLRPC.Document preloadedGreetingsSticker;
    private boolean premiumInvoiceBot;
    private int prevSetUnreadCount;
    boolean preventReopenSearchWithText;
    public ProfileChannelCell.ChannelMessageFetcher profileChannelMessageFetcher;
    private RadialProgressView progressBar;
    private AlertDialog progressDialog;
    private int progressDialogAtMessageId;
    private int progressDialogAtMessageType;
    private String progressDialogBotButtonUrl;
    private Browser.Progress progressDialogCurrent;
    private CharacterStyle progressDialogLinkSpan;
    private FrameLayout progressView;
    private View progressView2;
    boolean pulled;
    private float pullingBottomOffset;
    private float pullingDownAnimateProgress;
    private ChatActivity pullingDownAnimateToActivity;
    private Animator pullingDownBackAnimator;
    private ChatPullingDownDrawable pullingDownDrawable;
    private float pullingDownOffset;
    private QuickRepliesEmptyView quickRepliesEmptyView;
    private MessageObject quickReplyMessage;
    public String quickReplyShortcut;
    private AlertDialog quoteMessageUpdateAlert;
    private ValueAnimator reactionsMentionButtonAnimation;
    private float reactionsMentionButtonEnterProgress;
    private int reactionsMentionCount;
    private FrameLayout reactionsMentiondownButton;
    private CounterView reactionsMentiondownButtonCounter;
    private ImageView reactionsMentiondownButtonImage;
    private boolean removingFromParent;
    private SparseArray repliesMessagesDict;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private boolean replyImageHasMediaSpoiler;
    private TLRPC.PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC.PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private int replyMaxReadId;
    private MessageObject replyMessageHeaderObject;
    private SparseArray replyMessageOwners;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectHintTextView;
    private SimpleTextView replyObjectTextView;
    private TLRPC.Chat replyOriginalChat;
    private int replyOriginalMessageId;
    private MessageObject replyingMessageObject;
    private ReplyQuote replyingQuote;
    private MessageObject.GroupedMessages replyingQuoteGroup;
    public MessageObject replyingTopMessage;
    private byte[] reportOption;
    private TextView reportSpamButton;
    private AnimatorSet reportSpamViewAnimator;
    private String reportTitle;
    private boolean requestClearSearchPages;
    private TLRPC.TL_account_resolvedBusinessChatLinks resolvedChatLink;
    private TextView restartTopicButton;
    private int returnToLoadIndex;
    private int returnToMessageId;
    public boolean reversed;
    private int runningAnimationIndex;
    private ActionBarMenuItem.Item savedChatsGap;
    private ActionBarMenuItem.Item savedChatsItem;
    private TLRPC.TL_messages_discussionMessage savedDiscussionMessage;
    private TLRPC.messages_Messages savedHistory;
    private HintView2 savedMessagesHint;
    private boolean savedMessagesHintShown;
    private HintView2 savedMessagesSearchHint;
    private HintView2 savedMessagesTagHint;
    private boolean savedMessagesTagHintShown;
    private boolean savedNoDiscussion;
    private boolean savedNoHistory;
    private HintView scheduledHint;
    private boolean scheduledHintShown;
    private int scheduledMessagesCount;
    private HintView scheduledOrNoSoundHint;
    private boolean scheduledOrNoSoundHintShown;
    private AnimatorSet scrimAnimatorSet;
    private Bitmap scrimBlurBitmap;
    private Paint scrimBlurBitmapPaint;
    private BitmapShader scrimBlurBitmapShader;
    private Matrix scrimBlurMatrix;
    private Paint scrimPaint;
    private float scrimPaintAlpha;
    public ActionBarPopupWindow scrimPopupWindow;
    private boolean scrimPopupWindowHideDimOnDismiss;
    private ActionBarMenuSubItem[] scrimPopupWindowItems;
    private int scrimPopupX;
    private int scrimPopupY;
    private View scrimView;
    private float scrimViewAlpha;
    private ValueAnimator scrimViewAlphaAnimator;
    private float scrimViewProgress;
    private Integer scrimViewReaction;
    private boolean scrimViewReactionAnimated;
    private int scrimViewReactionOffset;
    private int scrollAnimationIndex;
    private boolean scrollByTouch;
    private int scrollCallbackAnimationIndex;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition;
    private int scrollToOffsetOnRecreate;
    private int scrollToPositionOnRecreate;
    private boolean scrollToThreadMessage;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private ImageView searchCalendarButton;
    private BlurredFrameLayout searchContainer;
    private final int searchContainerHeight;
    private AnimatedTextView searchCountText;
    private FrameLayout searchDownButton;
    private ImageView searchDownButtonArrow;
    private ValueAnimator searchExpandAnimator;
    private AnimatedTextView searchExpandList;
    private float searchExpandProgress;
    private ActionBarMenuItem searchIconItem;
    protected ActionBarMenuItem searchItem;
    private SearchItemListener searchItemListener;
    private boolean searchItemVisible;
    private int searchLastCount;
    private int searchLastIndex;
    private AnimatedTextView searchOtherButton;
    private int searchType;
    private FrameLayout searchUpButton;
    private ValueAnimator searchUpButtonAnimation;
    private ImageView searchUpButtonArrow;
    private float searchUpDownEnterProgress;
    private ImageView searchUserButton;
    private ViewPagerFixed searchViewPager;
    boolean searchWas;
    private boolean searching;
    private TLRPC.Chat searchingChatMessages;
    private boolean searchingFiltered;
    private boolean searchingForUser;
    private String searchingHashtag;
    private String searchingQuery;
    public ReactionsLayoutInBubble.VisibleReaction searchingReaction;
    private TLRPC.User searchingUserMessages;
    private SecretVoicePlayer secretVoicePlayer;
    private SparseArray[] selectedMessagesCanCopyIds;
    private SparseArray[] selectedMessagesCanStarIds;
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray[] selectedMessagesIds;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private MessageObject selectedObjectToEditCaption;
    private ChatSelectionReactionMenuOverlay selectionReactionsOverlay;
    private TLRPC.TL_channels_sendAsPeers sendAsPeersObj;
    private boolean sentBotStart;
    private boolean setPinnedTextTranslationX;
    public int shareAlertDebugMode;
    public boolean shareAlertDebugTopicsSlowMotion;
    public ChatMessageSharedResources sharedResources;
    private boolean showAudioCallAsIcon;
    private boolean showCloseChatDialogLater;
    public boolean showNoQuoteAlert;
    private boolean showPinBulletin;
    private final Runnable showScheduledHintRunnable;
    private final Runnable showScheduledOrNoSoundRunnable;
    private boolean showScrollToMessageError;
    private boolean showSearchAsIcon;
    private boolean showTapForForwardingOptionsHit;
    private boolean shownRestartTopic;
    private boolean shownTranslateTopic;
    private Theme.MessageDrawable.PathDrawParams skeletonBackgroundCacheParams;
    private Theme.MessageDrawable skeletonBackgroundDrawable;
    private int skeletonColor0;
    private int skeletonColor1;
    private ColorMatrix skeletonColorMatrix;
    private LinearGradient skeletonGradient;
    private int skeletonGradientWidth;
    private long skeletonLastUpdateTime;
    private Matrix skeletonMatrix;
    private LinearGradient skeletonOutlineGradient;
    private Matrix skeletonOutlineMatrix;
    private Paint skeletonOutlinePaint;
    private Paint skeletonPaint;
    private Paint skeletonServicePaint;
    private int skeletonTotalTranslation;
    private ChatMessageCell slidingView;
    private HintView slowModeHint;
    private boolean sponsoredMessagesAdded;
    private int sponsoredMessagesPostsBetween;
    private Pattern sponsoredUrlPattern;
    private StarReactionsOverlay starReactionsOverlay;
    private int startFromVideoMessageId;
    private int startFromVideoTimestamp;
    private int startLoadFromDate;
    private int startLoadFromMessageId;
    private int startLoadFromMessageIdSaved;
    private int startLoadFromMessageOffset;
    private long startMessageAppearTransitionMs;
    long startMs;
    private int startReplyTo;
    private String startVideoEdit;
    private boolean startedTrackingSlidingView;
    private SuggestEmojiView suggestEmojiPanel;
    private boolean swipeBackEnabled;
    private boolean switchFromTopics;
    private boolean switchingFromTopics;
    private float switchingFromTopicsProgress;
    private ReactionsContainerLayout tagSelector;
    private Runnable tapForForwardingOptionsHitRunnable;
    private ChatActivityTextSelectionHelper textSelectionHelper;
    private TextSelectionHint textSelectionHint;
    private boolean textSelectionHintWasShowed;
    private String textToSet;
    public ThemeDelegate themeDelegate;
    private int threadMaxInboxReadId;
    private int threadMaxOutboxReadId;
    private boolean threadMessageAdded;
    private long threadMessageId;
    private MessageObject threadMessageObject;
    private ArrayList threadMessageObjects;
    private boolean threadMessageVisible;
    private int threadUnreadMessagesCount;
    private ActionBarMenuItem.Item timeItem2;
    private HintView timerHintView;
    private boolean toPullingDownTransition;
    private BlurredFrameLayout topChatPanelView;
    private float topChatPanelViewOffset;
    private UndoView topUndoView;
    private float topViewOffset;
    private View topViewSeparator1;
    private View topViewSeparator2;
    private View topViewSeparator3;
    private int topViewWasVisible;
    private MessageObject topicStarterMessageObject;
    private int totalPinnedMessagesCount;
    private int transitionAnimationGlobalIndex;
    private int transitionAnimationIndex;
    private TranslateButton translateButton;
    private ActionBarMenuItem.Item translateItem;
    private UndoView undoView;
    private MessageObject unreadMessageObject;
    private Runnable unselectRunnable;
    private Runnable updateDeleteItemRunnable;
    Runnable updatePinnedProgressRunnable;
    Runnable updateReactionRunnable;
    private boolean userBlocked;
    protected TLRPC.UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private ActionBarMenuItem.Item viewAsTopics;
    private String voiceChatHash;
    private HintView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private boolean waitingForGetDifference;
    private ArrayList waitingForLoad;
    private SparseArray waitingForReplies;
    private boolean waitingForReplyMessageLoad;
    private boolean waitingForSendingMessageLoad;
    int waitingForWebpageId;
    private boolean wasManualScroll;
    private boolean wasPaused;
    TextView webBotTitle;
    private static final LongSparseArray chatMessageCellsCache = new LongSparseArray();
    public static int lastStableId = 10;
    private static final int[] allowedNotificationsDuringChatListAnimations = {NotificationCenter.messagesRead, NotificationCenter.threadMessagesRead, NotificationCenter.commentsRead, NotificationCenter.messagesReadEncrypted, NotificationCenter.messagesReadContent, NotificationCenter.didLoadPinnedMessages, NotificationCenter.newDraftReceived, NotificationCenter.updateMentionsCount, NotificationCenter.didUpdateConnectionState, NotificationCenter.updateDefaultSendAsPeer, NotificationCenter.closeChats, NotificationCenter.chatInfoCantLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.pinnedInfoDidLoad, NotificationCenter.didSetNewWallpapper, NotificationCenter.savedMessagesDialogsUpdate, NotificationCenter.didApplyNewTheme};
    private static boolean replacingChatActivity = false;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 106 extends GigagroupConvertAlert {
        106(Context context, BaseFragment baseFragment) {
            super(context, baseFragment);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCovert$0(boolean z) {
            if (z) {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                ChatActivity.this.undoView.showWithAction(0L, 76, (Runnable) null);
            }
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCancel() {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(0L, 75, (Runnable) null);
            ChatActivity.this.getMessagesController().removeSuggestion(ChatActivity.this.dialog_id, "CONVERT_GIGAGROUP");
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCovert() {
            MessagesController messagesController = ChatActivity.this.getMessagesController();
            Activity parentActivity = ChatActivity.this.getParentActivity();
            ChatActivity chatActivity = ChatActivity.this;
            messagesController.convertToGigaGroup(parentActivity, chatActivity.currentChat, chatActivity, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$106$$ExternalSyntheticLambda0
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z) {
                    ChatActivity.106.this.lambda$onCovert$0(z);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 111 implements Runnable {
        111() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(ValueAnimator valueAnimator) {
            ChatActivity.this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                ChatActivity.this.alertView.setTag(1);
                if (ChatActivity.this.alertViewAnimator != null) {
                    ChatActivity.this.alertViewAnimator.cancel();
                    ChatActivity.this.alertViewAnimator = null;
                }
                ChatActivity.this.alertViewAnimator = new AnimatorSet();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.alertViewEnterProgress, 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$111$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.111.this.lambda$run$0(valueAnimator);
                    }
                });
                ChatActivity.this.alertViewAnimator.playTogether(ofFloat);
                ChatActivity.this.alertViewAnimator.setDuration(200L);
                ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.111.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertViewAnimator = null;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertView.setVisibility(8);
                        ChatActivity.this.alertViewEnterProgress = 0.0f;
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        ChatActivity.this.alertViewAnimator = null;
                    }
                });
                ChatActivity.this.alertViewAnimator.start();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 12 implements RecyclerListView.OnItemClickListenerExtended {
        12() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public boolean hasDoubleTap(View view, int i) {
            TLRPC.ChatFull chatFull;
            if (ChatActivity.this.chatMode == 5) {
                return false;
            }
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            TLRPC.TL_availableReaction tL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
            if (tL_availableReaction != null || (doubleTapReaction != null && doubleTapReaction.startsWith("animated_"))) {
                boolean z = ChatActivity.this.dialog_id >= 0;
                if (!z && (chatFull = ChatActivity.this.chatInfo) != null) {
                    if (tL_availableReaction != null) {
                        doubleTapReaction = tL_availableReaction.reaction;
                    }
                    z = ChatObject.reactionIsAvailable(chatFull, doubleTapReaction);
                }
                if (z && (view instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                    return (chatMessageCell.getMessageObject().isSending() || chatMessageCell.getMessageObject().isEditing() || chatMessageCell.getMessageObject().type == 16 || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || chatMessageCell.getMessageObject().isSponsored()) ? false : true;
                }
                return false;
            }
            return false;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onDoubleTap(View view, int i, float f, float f2) {
            boolean z;
            ChatActivity chatActivity;
            ReactionsLayoutInBubble.VisibleReaction fromEmojicon;
            TLRPC.ChatFull chatFull;
            TLRPC.ChatFull chatFull2;
            if (!(view instanceof ChatMessageCell) || ChatActivity.this.getParentActivity() == null || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || ChatActivity.this.isInPreviewMode() || ChatActivity.this.chatMode == 5) {
                return;
            }
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
            if (primaryMessageObject.isSecretMedia() || primaryMessageObject.isExpiredStory() || primaryMessageObject.type == 27) {
                return;
            }
            ReactionsEffectOverlay.removeCurrent(false);
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            if (doubleTapReaction.startsWith("animated_")) {
                z = ChatActivity.this.dialog_id >= 0;
                if (!z && (chatFull2 = ChatActivity.this.chatInfo) != null) {
                    z = ChatObject.reactionIsAvailable(chatFull2, doubleTapReaction);
                }
                if (!z) {
                    return;
                }
                chatActivity = ChatActivity.this;
                fromEmojicon = ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(doubleTapReaction);
            } else {
                TLRPC.TL_availableReaction tL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
                if (tL_availableReaction == null || chatMessageCell.getMessageObject().isSponsored()) {
                    return;
                }
                z = ChatActivity.this.dialog_id >= 0;
                if (!z && (chatFull = ChatActivity.this.chatInfo) != null) {
                    z = ChatObject.reactionIsAvailable(chatFull, tL_availableReaction.reaction);
                }
                if (!z) {
                    return;
                }
                chatActivity = ChatActivity.this;
                fromEmojicon = ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(tL_availableReaction);
            }
            chatActivity.selectReaction(chatMessageCell, primaryMessageObject, null, null, f, f2, fromEmojicon, true, false, false, false);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onItemClick(View view, int i, float f, float f2) {
            ChatMessageCell chatMessageCell;
            MessageObject messageObject;
            boolean z = false;
            if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                return;
            }
            ChatActivity.this.wasManualScroll = true;
            boolean z2 = view instanceof ChatActionCell;
            if (z2) {
                ChatActionCell chatActionCell = (ChatActionCell) view;
                if (chatActionCell.getMessageObject().isDateObject) {
                    if (ChatActivity.this.isInsideContainer) {
                        return;
                    }
                    Bundle bundle = new Bundle();
                    int i2 = chatActionCell.getMessageObject().messageOwner.date;
                    bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                    bundle.putLong("topic_id", ChatActivity.this.getTopicId());
                    bundle.putInt("type", 0);
                    CalendarActivity calendarActivity = new CalendarActivity(bundle, 0, i2);
                    calendarActivity.setChatActivity(ChatActivity.this);
                    ChatActivity.this.presentFragment(calendarActivity);
                    return;
                }
            }
            if (z2) {
                ChatActionCell chatActionCell2 = (ChatActionCell) view;
                if (chatActionCell2.getMessageObject() != null && (chatActionCell2.getMessageObject().messageOwner.action instanceof TLRPC.TL_messageActionBoostApply)) {
                    ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openBoostForUsersDialog, Long.valueOf(ChatActivity.this.dialog_id));
                    return;
                }
            }
            if (z2) {
                ChatActionCell chatActionCell3 = (ChatActionCell) view;
                if (chatActionCell3.getMessageObject() != null && (chatActionCell3.getMessageObject().messageOwner.action instanceof TLRPC.TL_messageActionSetSameChatWallPaper)) {
                    final int replyMsgId = chatActionCell3.getMessageObject().getReplyMsgId();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$12$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.12.this.lambda$onItemClick$0(replyMsgId);
                        }
                    }, 16L);
                    return;
                }
            }
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) view;
                    if (ChatActivity.this.textSelectionHelper.isSelected(chatMessageCell2.getMessageObject())) {
                        return;
                    }
                    z = !chatMessageCell2.isInsideBackground(f, f2);
                }
                ChatActivity.this.processRowSelect(view, z, f, f2);
            } else if (!(view instanceof ChatMessageCell) || (messageObject = (chatMessageCell = (ChatMessageCell) view).getMessageObject()) == null || messageObject.type != 27) {
                ChatActivity.this.createMenu(view, true, false, f, f2, false);
            } else {
                messageObject.toggleChannelRecommendations();
                messageObject.forceUpdate = true;
                chatMessageCell.forceResetMessageObject();
                view.requestLayout();
                if (i >= 0) {
                    ChatActivity.this.chatAdapter.notifyItemChanged(i);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 125 extends PagerAdapter {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ SparseArray val$cachedViews;
        final /* synthetic */ List val$counters;
        final /* synthetic */ int val$finalCount;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ int val$head;
        final /* synthetic */ MessageObject val$message;
        final /* synthetic */ ViewPager val$pager;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ ReactedHeaderView val$reactedView;
        final /* synthetic */ boolean val$showAllReactionsTab;
        final /* synthetic */ int val$size;

        125(int i, SparseArray sparseArray, boolean z, List list, MessageObject messageObject, ReactedHeaderView reactedHeaderView, MessageObject messageObject2, SparseIntArray sparseIntArray, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, int i3) {
            this.val$size = i;
            this.val$cachedViews = sparseArray;
            this.val$showAllReactionsTab = z;
            this.val$counters = list;
            this.val$message = messageObject;
            this.val$reactedView = reactedHeaderView;
            this.val$primaryMessage = messageObject2;
            this.val$cachedHeights = sparseIntArray;
            this.val$head = i2;
            this.val$pager = viewPager;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
            this.val$finalCount = i3;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$0(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.125.1
                @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$1(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC.MessagePeerReaction messagePeerReaction) {
            String str;
            Bundle bundle = new Bundle();
            if (j > 0) {
                str = "user_id";
            } else {
                j = -j;
                str = "chat_id";
            }
            bundle.putLong(str, j);
            bundle.putInt("report_reaction_message_id", messageObject.getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$instantiateItem$2(SparseIntArray sparseIntArray, int i, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i3) {
            int i4 = i2 + i3;
            sparseIntArray.put(i, i4);
            if (viewPager.getCurrentItem() == i) {
                actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], i4, true);
            }
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public void destroyItem(ViewGroup viewGroup, int i, Object obj) {
            viewGroup.removeView((View) obj);
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public int getCount() {
            return this.val$size;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public Object instantiateItem(ViewGroup viewGroup, final int i) {
            View view = (View) this.val$cachedViews.get(i);
            if (view != null) {
                viewGroup.addView(view);
                return view;
            }
            int i2 = this.val$showAllReactionsTab ? i - 1 : i;
            TLRPC.ReactionCount reactionCount = i2 >= 0 ? (TLRPC.ReactionCount) this.val$counters.get(i2) : null;
            Context context = viewGroup.getContext();
            ChatActivity chatActivity = ChatActivity.this;
            ReactedUsersListView onCustomEmojiSelectedListener = new ReactedUsersListView(context, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, this.val$message, reactionCount, false, true).setSeenUsers(this.val$reactedView.getSeenUsers()).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$125$$ExternalSyntheticLambda0
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
                    ChatActivity.125.this.lambda$instantiateItem$0(reactedUsersListView, arrayList);
                }
            });
            final MessageObject messageObject = this.val$primaryMessage;
            ReactedUsersListView onProfileSelectedListener = onCustomEmojiSelectedListener.setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$125$$ExternalSyntheticLambda1
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j, TLRPC.MessagePeerReaction messagePeerReaction) {
                    ChatActivity.125.this.lambda$instantiateItem$1(messageObject, reactedUsersListView, j, messagePeerReaction);
                }
            });
            final SparseIntArray sparseIntArray = this.val$cachedHeights;
            final int i3 = this.val$head;
            final ViewPager viewPager = this.val$pager;
            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = this.val$popupLayout;
            final int[] iArr = this.val$foregroundIndex;
            ReactedUsersListView onHeightChangedListener = onProfileSelectedListener.setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$125$$ExternalSyntheticLambda2
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnHeightChangedListener
                public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i4) {
                    ChatActivity.125.lambda$instantiateItem$2(sparseIntArray, i, i3, viewPager, actionBarPopupWindowLayout, iArr, reactedUsersListView, i4);
                }
            });
            if (i2 < 0) {
                onHeightChangedListener.setPredictiveCount(this.val$finalCount);
                this.val$reactedView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda160(onHeightChangedListener));
            }
            viewGroup.addView(onHeightChangedListener);
            this.val$cachedViews.put(i, onHeightChangedListener);
            return onHeightChangedListener;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 13 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Context val$context;

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 1 implements MessagesStorage.BooleanCallback {
            final /* synthetic */ boolean val$canDeleteHistory;

            1(boolean z) {
                this.val$canDeleteHistory = z;
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(boolean z, boolean z2) {
                ChatActivity.this.performHistoryClear(true, z);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$1(final boolean z, int i) {
                if (i < 50) {
                    ChatActivity.this.performHistoryClear(true, z);
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                AlertsCreator.createClearOrDeleteDialogAlert(chatActivity, true, false, true, chatActivity.currentChat, chatActivity.currentUser, false, false, z, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$13$1$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                    public final void run(boolean z2) {
                        ChatActivity.13.1.this.lambda$run$0(z, z2);
                    }
                }, ChatActivity.this.themeDelegate);
            }

            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
            public void run(boolean z) {
                if (z) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.currentUser != null || this.val$canDeleteHistory) {
                        MessagesStorage messagesStorage = chatActivity.getMessagesStorage();
                        long j = ChatActivity.this.dialog_id;
                        final boolean z2 = this.val$canDeleteHistory;
                        messagesStorage.getMessagesCount(j, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$13$1$$ExternalSyntheticLambda0
                            @Override // org.telegram.messenger.MessagesStorage.IntCallback
                            public final void run(int i) {
                                ChatActivity.13.1.this.lambda$run$1(z2, i);
                            }
                        });
                        return;
                    }
                }
                ChatActivity.this.performHistoryClear(z, this.val$canDeleteHistory);
            }
        }

        13(Context context) {
            this.val$context = context;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0() {
            ChatActivity.this.lambda$onBackPressed$300();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$1(boolean z, int i) {
            if (i <= 0 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            BulletinFactory.of(ChatActivity.this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, ChatActivity.this.themeDelegate).show();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$2(int i, boolean z, boolean z2) {
            if (i == 15 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                TLRPC.Chat chat = ChatActivity.this.currentChat;
                if (!chat.megagroup || ChatObject.isPublic(chat)) {
                    ChatActivity.this.getMessagesController().deleteDialog(ChatActivity.this.dialog_id, 2, z2);
                    return;
                }
            }
            if (i == 15) {
                ChatActivity.this.performHistoryClear(z2, z);
                return;
            }
            NotificationCenter notificationCenter = ChatActivity.this.getNotificationCenter();
            ChatActivity chatActivity = ChatActivity.this;
            int i2 = NotificationCenter.closeChats;
            notificationCenter.removeObserver(chatActivity, i2);
            ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i2, new Object[0]);
            ChatActivity.this.lambda$onBackPressed$300();
            NotificationCenter notificationCenter2 = ChatActivity.this.getNotificationCenter();
            int i3 = NotificationCenter.needDeleteDialog;
            Long valueOf = Long.valueOf(ChatActivity.this.dialog_id);
            ChatActivity chatActivity2 = ChatActivity.this;
            notificationCenter2.lambda$postNotificationNameOnUIThread$1(i3, valueOf, chatActivity2.currentUser, chatActivity2.currentChat, Boolean.valueOf(z2));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$3(QuickRepliesController.QuickReply quickReply, String str) {
            if (quickReply != null) {
                QuickRepliesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).renameReply(quickReply.id, str);
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.quickReplyShortcut = str;
            chatActivity.avatarContainer.setTitle(str);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$4(View view) {
            ChatActivity.this.headerItem.closeSubMenu();
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$5() {
            Intent intent = new Intent(ChatActivity.this.getContext(), LaunchActivity.class);
            intent.setAction("android.intent.action.SEND");
            intent.setType("text/plain");
            intent.putExtra("android.intent.extra.TEXT", ChatActivity.this.businessLink.link);
            ChatActivity.this.startActivityForResult(intent, 500);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$6(DialogInterface dialogInterface, int i) {
            ChatActivity.this.lambda$onBackPressed$300();
            ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needDeleteBusinessLink, ChatActivity.this.businessLink);
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public void onItemClick(final int i) {
            TLRPC.User user;
            TLRPC.ChatFull chatFull;
            SendMessagesHelper sendMessagesHelper;
            long j;
            MessageObject.SendAnimationData sendAnimationData;
            boolean z;
            String str;
            TLRPC.User user2;
            if (i != -1) {
                if (i != 59) {
                    MessageObject messageObject = null;
                    if (i == 10) {
                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                        long j2 = 0;
                        for (int i2 = 1; i2 >= 0; i2--) {
                            ArrayList arrayList = new ArrayList();
                            for (int i3 = 0; i3 < ChatActivity.this.selectedMessagesCanCopyIds[i2].size(); i3++) {
                                arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[i2].keyAt(i3)));
                            }
                            if (ChatActivity.this.currentEncryptedChat == null) {
                                Collections.sort(arrayList);
                            } else {
                                Collections.sort(arrayList, Collections.reverseOrder());
                            }
                            for (int i4 = 0; i4 < arrayList.size(); i4++) {
                                MessageObject messageObject2 = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[i2].get(((Integer) arrayList.get(i4)).intValue());
                                if (spannableStringBuilder.length() != 0) {
                                    spannableStringBuilder.append((CharSequence) "\n\n");
                                }
                                spannableStringBuilder.append(ChatActivity.this.getMessageContent(messageObject2, j2, arrayList.size() != 1 && ((user2 = ChatActivity.this.currentUser) == null || !user2.self)));
                                j2 = messageObject2.getFromChatId();
                            }
                        }
                        if (spannableStringBuilder.length() != 0) {
                            AndroidUtilities.addToClipboard(spannableStringBuilder);
                            ChatActivity.this.createUndoView();
                            ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                        }
                    } else if (i == 12) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        ChatActivity.this.createDeleteMessagesAlert(null, null);
                        return;
                    } else if (i == 11) {
                        ChatActivity.this.openForward(true);
                        return;
                    } else if (i == 69) {
                        ChatActivity.this.share();
                        return;
                    } else if (i == 28) {
                        if (ChatActivity.this.tagSelector == null) {
                            ChatActivity.this.showTagSelector();
                            return;
                        } else {
                            ChatActivity.this.hideTagSelector();
                            return;
                        }
                    } else if (i == 25) {
                        ArrayList arrayList2 = new ArrayList();
                        for (int i5 = 1; i5 >= 0; i5--) {
                            for (int i6 = 0; i6 < ChatActivity.this.selectedMessagesIds[i5].size(); i6++) {
                                arrayList2.add((MessageObject) ChatActivity.this.selectedMessagesIds[i5].valueAt(i6));
                            }
                            ChatActivity.this.selectedMessagesIds[i5].clear();
                            ChatActivity.this.selectedMessagesCanCopyIds[i5].clear();
                            ChatActivity.this.selectedMessagesCanStarIds[i5].clear();
                        }
                        final boolean z2 = ChatActivity.this.canSaveMusicCount > 0;
                        ChatActivity.this.hideActionMode();
                        ChatActivity.this.updatePinnedMessageView(true);
                        ChatActivity.this.updateVisibleRows();
                        MediaController.saveFilesFromMessages(ChatActivity.this.getParentActivity(), ChatActivity.this.getAccountInstance(), arrayList2, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda1
                            @Override // org.telegram.messenger.MessagesStorage.IntCallback
                            public final void run(int i7) {
                                ChatActivity.13.this.lambda$onItemClick$1(z2, i7);
                            }
                        });
                        return;
                    } else if (i == 13) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        ChatActivity chatActivity = ChatActivity.this;
                        Activity parentActivity = chatActivity.getParentActivity();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        chatActivity.showDialog(AlertsCreator.createTTLAlert(parentActivity, chatActivity2.currentEncryptedChat, chatActivity2.themeDelegate).create());
                        return;
                    } else if (i == 15 || i == 16 || i == 26) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        ChatActivity chatActivity3 = ChatActivity.this;
                        TLRPC.ChatFull chatFull2 = chatActivity3.chatInfo;
                        final boolean z3 = chatFull2 != null && chatFull2.can_delete_channel;
                        if (i == 26 || (i == 15 && chatActivity3.currentEncryptedChat == null && (!((user = chatActivity3.currentUser) == null || UserObject.isUserSelf(user) || UserObject.isDeleted(ChatActivity.this.currentUser)) || ((chatFull = ChatActivity.this.chatInfo) != null && chatFull.can_delete_channel)))) {
                            ChatActivity chatActivity4 = ChatActivity.this;
                            AlertsCreator.createClearDaysDialogAlert(chatActivity4, -1, chatActivity4.currentUser, chatActivity4.currentChat, z3, new 1(z3), ChatActivity.this.getResourceProvider());
                            return;
                        }
                        ChatActivity chatActivity5 = ChatActivity.this;
                        AlertsCreator.createClearOrDeleteDialogAlert(chatActivity5, i == 15, chatActivity5.currentChat, chatActivity5.currentUser, chatActivity5.currentEncryptedChat != null, true, z3, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda6
                            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                            public final void run(boolean z4) {
                                ChatActivity.13.this.lambda$onItemClick$2(i, z3, z4);
                            }
                        }, ChatActivity.this.themeDelegate);
                        return;
                    } else if (i == 17) {
                        ChatActivity chatActivity6 = ChatActivity.this;
                        if (chatActivity6.currentUser == null || chatActivity6.getParentActivity() == null) {
                            return;
                        }
                        if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getTag() != null) {
                            ChatActivity chatActivity7 = ChatActivity.this;
                            chatActivity7.shareMyContact(((Integer) chatActivity7.addToContactsButton.getTag()).intValue(), null);
                            return;
                        }
                        Bundle bundle = new Bundle();
                        bundle.putLong("user_id", ChatActivity.this.currentUser.id);
                        bundle.putBoolean("addContact", true);
                        ChatActivity.this.presentFragment(new ContactAddActivity(bundle));
                        return;
                    } else if (i == 18) {
                        ChatActivity.this.toggleMute(false);
                        return;
                    } else if (i == 24) {
                        try {
                            ChatActivity.this.getMediaDataController().installShortcut(ChatActivity.this.currentUser.id, MediaDataController.SHORTCUT_TYPE_USER_OR_CHAT);
                            return;
                        } catch (Exception e) {
                            FileLog.e(e);
                            return;
                        }
                    } else if (i == 29) {
                        if (!ChatObject.hasAdminRights(ChatActivity.this.currentChat)) {
                            ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openBoostForUsersDialog, Long.valueOf(ChatActivity.this.dialog_id));
                            return;
                        }
                        BoostsActivity boostsActivity = new BoostsActivity(ChatActivity.this.dialog_id);
                        boostsActivity.setBoostsStatus(ChatActivity.this.boostsStatus);
                        ChatActivity.this.presentFragment(boostsActivity);
                        return;
                    } else if (i == 21) {
                        ReportBottomSheet.openChat(ChatActivity.this);
                        return;
                    } else if (i != 22) {
                        if (i == 23) {
                            for (int i7 = 1; i7 >= 0; i7--) {
                                if (messageObject == null && ChatActivity.this.selectedMessagesIds[i7].size() == 1) {
                                    ArrayList arrayList3 = new ArrayList();
                                    for (int i8 = 0; i8 < ChatActivity.this.selectedMessagesIds[i7].size(); i8++) {
                                        arrayList3.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[i7].keyAt(i8)));
                                    }
                                    messageObject = (MessageObject) ChatActivity.this.messagesDict[i7].get(((Integer) arrayList3.get(0)).intValue());
                                }
                                ChatActivity.this.selectedMessagesIds[i7].clear();
                                ChatActivity.this.selectedMessagesCanCopyIds[i7].clear();
                                ChatActivity.this.selectedMessagesCanStarIds[i7].clear();
                            }
                            ChatActivity.this.startEditingMessageObject(messageObject);
                            ChatActivity.this.hideActionMode();
                            ChatActivity.this.updatePinnedMessageView(true);
                            ChatActivity.this.updateVisibleRows();
                            return;
                        } else if (i == 64) {
                            final QuickRepliesController.QuickReply findReply = QuickRepliesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).findReply(ChatActivity.this.getQuickReplyId());
                            Context context = ChatActivity.this.getContext();
                            int i9 = ((BaseFragment) ChatActivity.this).currentAccount;
                            ChatActivity chatActivity8 = ChatActivity.this;
                            QuickRepliesActivity.openRenameReplyAlert(context, i9, chatActivity8.quickReplyShortcut, findReply, chatActivity8.getResourceProvider(), false, new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda2
                                @Override // org.telegram.messenger.Utilities.Callback
                                public final void run(Object obj) {
                                    ChatActivity.13.this.lambda$onItemClick$3(findReply, (String) obj);
                                }
                            });
                            return;
                        } else if (i == 14) {
                            ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.val$context, false, true, true, ChatActivity.this.getResourceProvider());
                            actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.AttachMenu), R.drawable.input_attach);
                            actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda3
                                @Override // android.view.View.OnClickListener
                                public final void onClick(View view) {
                                    ChatActivity.13.this.lambda$onItemClick$4(view);
                                }
                            });
                            ChatActivity.this.headerItem.toggleSubMenu(actionBarMenuSubItem, ChatActivity.this.attachItem.createView());
                            return;
                        } else {
                            if (i == 30) {
                                sendMessagesHelper = ChatActivity.this.getSendMessagesHelper();
                                j = ChatActivity.this.dialog_id;
                                sendAnimationData = null;
                                z = false;
                                str = "/help";
                            } else if (i != 31) {
                                if (i == 40) {
                                    ChatActivity chatActivity9 = ChatActivity.this;
                                    chatActivity9.lambda$openSearchWithText$303(chatActivity9.isSupportedTags() ? "" : null);
                                    return;
                                }
                                if (i == 62) {
                                    ChatActivity.this.getMessagesController().getTranslateController().setHideTranslateDialog(ChatActivity.this.getDialogId(), false, true);
                                    if (ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId(), true)) {
                                        return;
                                    }
                                } else if (i == 32 || i == 33) {
                                    ChatActivity chatActivity10 = ChatActivity.this;
                                    if (chatActivity10.currentUser == null || chatActivity10.getParentActivity() == null) {
                                        return;
                                    }
                                    ChatActivity chatActivity11 = ChatActivity.this;
                                    TLRPC.User user3 = chatActivity11.currentUser;
                                    boolean z4 = i == 33;
                                    TLRPC.UserFull userFull = chatActivity11.userInfo;
                                    VoIPHelper.startCall(user3, z4, userFull != null && userFull.video_calls_available, chatActivity11.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
                                    return;
                                } else if (i == 50) {
                                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                                    return;
                                } else if (i == 51) {
                                    ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                                    return;
                                } else if (i == 57) {
                                    ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView3 == null || chatActivityEnterView3.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedSpoiler();
                                    return;
                                } else if (i == 58) {
                                    ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView4 == null || chatActivityEnterView4.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedQuote();
                                    return;
                                } else if (i == 52) {
                                    ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView5 == null || chatActivityEnterView5.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                                    return;
                                } else if (i == 55) {
                                    ChatActivityEnterView chatActivityEnterView6 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView6 == null || chatActivityEnterView6.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedStrike();
                                    return;
                                } else if (i == 56) {
                                    ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUnderline();
                                    return;
                                } else if (i == 53) {
                                    ChatActivityEnterView chatActivityEnterView8 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView8 == null || chatActivityEnterView8.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                                    return;
                                } else if (i == 54) {
                                    ChatActivityEnterView chatActivityEnterView9 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView9 == null || chatActivityEnterView9.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                                    return;
                                } else if (i == 27) {
                                    ChatActivity.this.showChatThemeBottomSheet();
                                    return;
                                } else if (i == 60) {
                                    TopicsController topicsController = ChatActivity.this.getMessagesController().getTopicsController();
                                    ChatActivity chatActivity12 = ChatActivity.this;
                                    long j3 = chatActivity12.currentChat.id;
                                    int i10 = chatActivity12.forumTopic.id;
                                    ChatActivity.this.forumTopic.closed = true;
                                    topicsController.toggleCloseTopic(j3, i10, true);
                                    ChatActivity.this.updateTopicButtons();
                                    ChatActivity.this.updateBottomOverlay();
                                } else if (i != 61) {
                                    if (i == 65) {
                                        AndroidUtilities.addToClipboard(ChatActivity.this.businessLink.link);
                                        BulletinFactory.of(LaunchActivity.getLastFragment()).createCopyLinkBulletin().show();
                                        return;
                                    } else if (i == 66) {
                                        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda4
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                ChatActivity.13.this.lambda$onItemClick$5();
                                            }
                                        };
                                        if (ChatActivity.this.chatActivityEnterView.businessLinkHasChanges()) {
                                            ChatActivity.this.showBusinessLinksDiscardAlert(runnable);
                                            return;
                                        } else {
                                            runnable.run();
                                            return;
                                        }
                                    } else if (i == 67) {
                                        Context context2 = ChatActivity.this.getContext();
                                        int i11 = ((BaseFragment) ChatActivity.this).currentAccount;
                                        ChatActivity chatActivity13 = ChatActivity.this;
                                        BusinessLinksActivity.openRenameAlert(context2, i11, chatActivity13.businessLink, ((BaseFragment) chatActivity13).resourceProvider, false);
                                        return;
                                    } else if (i == 68) {
                                        AlertDialog create = new AlertDialog.Builder(ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider()).setTitle(LocaleController.getString(R.string.BusinessLinksDeleteTitle)).setMessage(LocaleController.getString(R.string.BusinessLinksDeleteMessage)).setPositiveButton(LocaleController.getString(R.string.Remove), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda5
                                            @Override // android.content.DialogInterface.OnClickListener
                                            public final void onClick(DialogInterface dialogInterface, int i12) {
                                                ChatActivity.13.this.lambda$onItemClick$6(dialogInterface, i12);
                                            }
                                        }).setNegativeButton(LocaleController.getString(R.string.Cancel), null).create();
                                        ChatActivity.this.showDialog(create);
                                        TextView textView = (TextView) create.getButton(-1);
                                        if (textView != null) {
                                            textView.setTextColor(ChatActivity.this.getThemedColor(Theme.key_text_RedBold));
                                            return;
                                        }
                                        return;
                                    } else {
                                        return;
                                    }
                                }
                                ChatActivity.this.updateTopPanel(true);
                                return;
                            } else {
                                sendMessagesHelper = ChatActivity.this.getSendMessagesHelper();
                                j = ChatActivity.this.dialog_id;
                                sendAnimationData = null;
                                z = false;
                                str = "/settings";
                            }
                            sendMessagesHelper.sendMessage(SendMessagesHelper.SendMessageParams.of(str, j, null, null, null, false, null, null, null, true, 0, sendAnimationData, z));
                            return;
                        }
                    } else {
                        for (int i12 = 0; i12 < 2; i12++) {
                            for (int i13 = 0; i13 < ChatActivity.this.selectedMessagesCanStarIds[i12].size(); i13++) {
                                MessageObject messageObject3 = (MessageObject) ChatActivity.this.selectedMessagesCanStarIds[i12].valueAt(i13);
                                ChatActivity.this.getMediaDataController().addRecentSticker(2, messageObject3, messageObject3.getDocument(), (int) (System.currentTimeMillis() / 1000), !ChatActivity.this.hasUnfavedSelected);
                            }
                        }
                    }
                } else if (ChatActivity.this.getUserConfig().getClientUserId() == ChatActivity.this.dialog_id) {
                    ChatActivity.this.getMessagesController().setSavedViewAs(true);
                    ChatActivity.this.avatarContainer.openProfile(false, true, true);
                    return;
                } else {
                    ChatActivity.this.getMessagesController().getTopicsController().toggleViewForumAsMessages(-ChatActivity.this.dialog_id, false);
                }
                TopicsFragment.prepareToSwitchAnimation(ChatActivity.this);
                return;
            } else if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                if (ChatActivity.this.chatMode == 5 && (ChatActivity.this.messages.isEmpty() || ChatActivity.this.threadMessageId == 0)) {
                    ChatActivity.this.showQuickRepliesRemoveAlert();
                    return;
                } else if (ChatActivity.this.chatMode == 6 && ChatActivity.this.chatActivityEnterView.businessLinkHasChanges()) {
                    ChatActivity.this.showBusinessLinksDiscardAlert(new Runnable() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.13.this.lambda$onItemClick$0();
                        }
                    });
                    return;
                } else if (ChatActivity.this.checkRecordLocked(true)) {
                    return;
                } else {
                    ChatActivity.this.lambda$onBackPressed$300();
                    return;
                }
            }
            ChatActivity.this.clearSelectionMode();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 14 extends LongPressListenerWithMovingGesture {
        final /* synthetic */ View val$backButton;

        14(View view) {
            this.val$backButton = view;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLongPress$0() {
            setSubmenu(null);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = null;
            chatActivity.menuDeleteItem = null;
            ChatActivity.this.scrimPopupWindowItems = null;
            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                ChatActivity.this.dimBehindView(false);
            } else {
                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                return;
            }
            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }

        @Override // org.telegram.ui.LongPressListenerWithMovingGesture
        public void onLongPress() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = BackButtonMenu.show(chatActivity, this.val$backButton, chatActivity.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.themeDelegate);
            ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
            if (actionBarPopupWindow != null) {
                setSubmenu(actionBarPopupWindow);
                ChatActivity.this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda0
                    @Override // android.widget.PopupWindow.OnDismissListener
                    public final void onDismiss() {
                        ChatActivity.14.this.lambda$onLongPress$0();
                    }
                });
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.dimBehindView(this.val$backButton, 0.3f);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.hide(true, 1);
                }
                if (ChatActivity.this.undoView != null) {
                    ChatActivity.this.undoView.hide(true, 1);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 142 implements Runnable {
        final /* synthetic */ boolean val$added;
        final /* synthetic */ int val$finalMessageIdForCell;
        final /* synthetic */ boolean val$fromDoubleTap;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ ReactionsContainerLayout val$reactionsLayout;
        final /* synthetic */ ReactionsLayoutInBubble.VisibleReaction val$visibleReaction;
        final /* synthetic */ boolean val$withoutAnimation;
        final /* synthetic */ float val$x;
        final /* synthetic */ float val$y;

        142(boolean z, boolean z2, int i, boolean z3, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction, MessageObject messageObject) {
            this.val$withoutAnimation = z;
            this.val$fromDoubleTap = z2;
            this.val$finalMessageIdForCell = i;
            this.val$added = z3;
            this.val$reactionsLayout = reactionsContainerLayout;
            this.val$x = f;
            this.val$y = f2;
            this.val$visibleReaction = visibleReaction;
            this.val$primaryMessage = messageObject;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(int i, boolean z, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            ChatMessageCell findMessageCell = ChatActivity.this.findMessageCell(i, true);
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                ReactionsEffectOverlay.show(chatActivity, reactionsContainerLayout, findMessageCell, null, f, f2, visibleReaction, ((BaseFragment) chatActivity).currentAccount, 1);
                ReactionsEffectOverlay.startAnimation();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$1(final int i, final boolean z, final ReactionsContainerLayout reactionsContainerLayout, final float f, final float f2, final ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$142$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.142.this.lambda$run$0(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                }
            }, 50L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$2(MessageObject messageObject) {
            MessageObject messageObject2 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
            if (messageObject2 != null && messageObject2 != messageObject) {
                MessageObject messageObject3 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
                messageObject3.messageOwner.reactions = messageObject.messageOwner.reactions;
                messageObject = messageObject3;
            }
            ChatActivity.this.updateMessageAnimated(messageObject, true);
            ReactionsEffectOverlay.startAnimation();
        }

        @Override // java.lang.Runnable
        public void run() {
            if (this.val$withoutAnimation) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.updateReactionRunnable != null) {
                chatActivity.updateReactionRunnable = null;
                if (this.val$fromDoubleTap) {
                    final int i = this.val$finalMessageIdForCell;
                    final boolean z = this.val$added;
                    final ReactionsContainerLayout reactionsContainerLayout = this.val$reactionsLayout;
                    final float f = this.val$x;
                    final float f2 = this.val$y;
                    final ReactionsLayoutInBubble.VisibleReaction visibleReaction = this.val$visibleReaction;
                    chatActivity.lambda$openDiscussionMessageChat$316(new Runnable() { // from class: org.telegram.ui.ChatActivity$142$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.142.this.lambda$run$1(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                        }
                    });
                } else {
                    final MessageObject messageObject = this.val$primaryMessage;
                    chatActivity.lambda$openDiscussionMessageChat$316(new Runnable() { // from class: org.telegram.ui.ChatActivity$142$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.142.this.lambda$run$2(messageObject);
                        }
                    });
                }
                ChatActivity.this.closeMenu();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 144 implements NotificationCenter.NotificationCenterDelegate {
        final /* synthetic */ ChatActivity val$chatActivity;
        final /* synthetic */ int val$commentsClassGuid;
        final /* synthetic */ Runnable val$openCommentsChat;

        144(int i, Runnable runnable, ChatActivity chatActivity) {
            this.val$commentsClassGuid = i;
            this.val$openCommentsChat = runnable;
            this.val$chatActivity = chatActivity;
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(final int i, final int i2, final Object... objArr) {
            int i3 = NotificationCenter.messagesDidLoad;
            if (i == i3 && ((Integer) objArr[10]).intValue() == this.val$commentsClassGuid) {
                this.val$openCommentsChat.run();
                final ChatActivity chatActivity = this.val$chatActivity;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$144$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.didReceivedNotification(i, i2, objArr);
                    }
                }, 50L);
                NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).removeObserver(this, i3);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 145 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ CharacterStyle val$span;

        145(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
            this.val$cell = chatMessageCell;
            this.val$span = characterStyle;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$145$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.145.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 1;
            ChatActivity.this.progressDialogLinkSpan = this.val$span;
            this.val$cell.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 146 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;

        146(ChatMessageCell chatMessageCell) {
            this.val$cell = chatMessageCell;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$146$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.146.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 6;
            this.val$cell.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 147 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ String val$url;

        147(ChatMessageCell chatMessageCell, String str) {
            this.val$cell = chatMessageCell;
            this.val$url = str;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$147$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.147.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 3;
            ChatActivity.this.progressDialogBotButtonUrl = this.val$url;
            this.val$cell.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 148 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;

        148(ChatMessageCell chatMessageCell) {
            this.val$cell = chatMessageCell;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$148$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.148.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 5;
            ChatActivity.this.progressDialogBotButtonUrl = null;
            this.val$cell.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 149 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ ChatActivity val$previousChat;

        149(ChatActivity chatActivity, Runnable runnable) {
            this.val$previousChat = chatActivity;
            this.val$callback = runnable;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$149$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.149.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            super.onAnimationEnd(animator);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.contentView.setSkipBackgroundDrawing(false);
            ChatActivity.this.toPullingDownTransition = false;
            this.val$previousChat.setTransitionToChatProgress(0.0f);
            this.val$previousChat.setTransitionToChatActivity(null);
            ChatActivity.this.fragmentView.setAlpha(1.0f);
            this.val$callback.run();
            ChatActivity.this.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setTranslationY(0.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            if (this.val$previousChat.pinnedMessageView != null) {
                this.val$previousChat.pinnedMessageView.setAlpha(1.0f);
            }
            if (this.val$previousChat.topChatPanelView != null) {
                this.val$previousChat.topChatPanelView.setAlpha(1.0f);
            }
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 151 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ boolean val$isOpen;

        151(boolean z, Runnable runnable) {
            this.val$isOpen = z;
            this.val$callback = runnable;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            if (this.val$isOpen) {
                ChatActivity.this.switchingFromTopics = false;
            }
            ((BaseFragment) ChatActivity.this).actionBar.invalidate();
            ChatActivity.this.contentView.invalidate();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$151$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.151.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            this.val$callback.run();
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public static /* synthetic */ class 152 {
        static final /* synthetic */ int[] $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem;

        static {
            int[] iArr = new int[AvatarPreviewer.MenuItem.values().length];
            $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem = iArr;
            try {
                iArr[AvatarPreviewer.MenuItem.OPEN_PROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_GROUP.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_CHANNEL.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEND_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError unused4) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.MENTION.ordinal()] = 5;
            } catch (NoSuchFieldError unused5) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEARCH_MESSAGES.ordinal()] = 6;
            } catch (NoSuchFieldError unused6) {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 17 extends RecyclerListViewInternal {
        private final ArrayList drawCaptionAfter;
        private final ArrayList drawNamesAfter;
        private final ArrayList drawReactionsAfter;
        private final ArrayList drawTimeAfter;
        private final ArrayList drawingGroups;
        private float endTrackingX;
        private boolean ignoreLayout;
        private boolean invalidated;
        int lastH;
        private long lastTrackingAnimationTime;
        private int lastWidth;
        private Paint outlineActionBackgroundDarkenPaint;
        private Paint outlineActionBackgroundPaint;
        private Path path;
        private boolean slidingBeyondMax;
        private FloatValueHolder slidingDrawableVisibilityProgress;
        private SpringAnimation slidingDrawableVisibilitySpring;
        private FloatValueHolder slidingFillProgress;
        private SpringAnimation slidingFillProgressSpring;
        private FloatValueHolder slidingOuterRingProgress;
        private SpringAnimation slidingOuterRingSpring;
        private float springMultiplier;
        private int startedTrackingPointerId;
        private int startedTrackingX;
        private int startedTrackingY;
        private float trackAnimationProgress;
        private boolean wasTrackingVibrate;

        17(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
            this.drawTimeAfter = new ArrayList();
            this.drawNamesAfter = new ArrayList();
            this.drawCaptionAfter = new ArrayList();
            this.drawReactionsAfter = new ArrayList();
            this.drawingGroups = new ArrayList(10);
            this.springMultiplier = 2000.0f;
            this.outlineActionBackgroundPaint = new Paint(1);
            this.outlineActionBackgroundDarkenPaint = new Paint(1);
            this.slidingDrawableVisibilityProgress = new FloatValueHolder(0.0f);
            this.slidingDrawableVisibilitySpring = (SpringAnimation) ((SpringAnimation) ((SpringAnimation) new SpringAnimation(this.slidingDrawableVisibilityProgress).setMinValue(0.0f)).setMaxValue(this.springMultiplier)).setSpring(new SpringForce(0.0f).setStiffness(1500.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda5
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.17.this.lambda$$0(dynamicAnimation, f, f2);
                }
            });
            this.slidingFillProgress = new FloatValueHolder(0.0f);
            this.slidingFillProgressSpring = (SpringAnimation) ((SpringAnimation) new SpringAnimation(this.slidingFillProgress).setMinValue(0.0f)).setSpring(new SpringForce(0.0f).setStiffness(400.0f).setDampingRatio(0.5f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda6
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.17.this.lambda$$1(dynamicAnimation, f, f2);
                }
            });
            this.slidingOuterRingProgress = new FloatValueHolder(0.0f);
            this.slidingOuterRingSpring = (SpringAnimation) ((SpringAnimation) new SpringAnimation(this.slidingOuterRingProgress).setMinValue(0.0f)).setSpring(new SpringForce(0.0f).setStiffness(200.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda7
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.17.this.lambda$$2(dynamicAnimation, f, f2);
                }
            });
            this.path = new Path();
            this.lastH = 0;
            Paint paint = this.outlineActionBackgroundPaint;
            Paint.Style style = Paint.Style.STROKE;
            paint.setStyle(style);
            Paint paint2 = this.outlineActionBackgroundPaint;
            Paint.Cap cap = Paint.Cap.ROUND;
            paint2.setStrokeCap(cap);
            this.outlineActionBackgroundPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
            this.outlineActionBackgroundDarkenPaint.setStyle(style);
            this.outlineActionBackgroundDarkenPaint.setStrokeCap(cap);
            this.outlineActionBackgroundDarkenPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r13v25, types: [int, boolean] */
        /* JADX WARN: Type inference failed for: r13v26 */
        /* JADX WARN: Type inference failed for: r13v27 */
        private void drawChatBackgroundElements(Canvas canvas) {
            int i;
            int i2;
            float f;
            int i3;
            ChatActivity chatActivity;
            boolean z;
            int i4;
            int i5;
            ChatActivity chatActivity2;
            MessageObject.GroupedMessages currentMessagesGroup;
            boolean z2;
            int i6;
            ?? r13;
            ChatActivity chatActivity3;
            int childCount = getChildCount();
            MessageObject.GroupedMessages groupedMessages = null;
            int i7 = 0;
            while (true) {
                i = 4;
                i2 = 8;
                f = 0.0f;
                i3 = 2;
                if (i7 >= childCount) {
                    break;
                }
                View childAt = getChildAt(i7);
                if (childAt.getVisibility() != 4 && childAt.getVisibility() != 8) {
                    if (ChatActivity.this.chatAdapter.isBot && (childAt instanceof BotHelpCell)) {
                        float measuredHeight = ((((getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - chatActivity3.blurredViewBottomOffset) / 2.0f) - (childAt.getMeasuredHeight() / 2)) + ChatActivity.this.chatListViewPaddingTop;
                        if (!((BotHelpCell) childAt).animating() && !ChatActivity.this.chatListView.fastScrollAnimationRunning) {
                            if (childAt.getTop() > measuredHeight) {
                                childAt.setTranslationY(measuredHeight - childAt.getTop());
                            } else {
                                childAt.setTranslationY(0.0f);
                            }
                        }
                    } else if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell.getCurrentMessagesGroup();
                        if (currentMessagesGroup2 == null || currentMessagesGroup2 != groupedMessages) {
                            MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                            MessageBackgroundDrawable backgroundDrawable = chatMessageCell.getBackgroundDrawable();
                            if ((backgroundDrawable.isAnimationInProgress() || chatMessageCell.isDrawingSelectionBackground()) && (currentPosition == null || (currentPosition.flags & 2) != 0)) {
                                if (!chatMessageCell.isHighlighted() && !chatMessageCell.isHighlightedAnimated()) {
                                    int y = (int) chatMessageCell.getY();
                                    canvas.save();
                                    if (currentPosition == null) {
                                        i6 = chatMessageCell.getMeasuredHeight();
                                    } else {
                                        int measuredHeight2 = chatMessageCell.getMeasuredHeight() + y;
                                        long j = 0;
                                        float f2 = 0.0f;
                                        for (int i8 = 0; i8 < childCount; i8++) {
                                            View childAt2 = getChildAt(i8);
                                            if (childAt2 instanceof ChatMessageCell) {
                                                ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                                                if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup2) {
                                                    MessageBackgroundDrawable backgroundDrawable2 = chatMessageCell2.getBackgroundDrawable();
                                                    y = Math.min(y, (int) chatMessageCell2.getY());
                                                    measuredHeight2 = Math.max(measuredHeight2, ((int) chatMessageCell2.getY()) + chatMessageCell2.getMeasuredHeight());
                                                    long lastTouchTime = backgroundDrawable2.getLastTouchTime();
                                                    if (lastTouchTime > j) {
                                                        j = lastTouchTime;
                                                        f = backgroundDrawable2.getTouchX() + chatMessageCell2.getX();
                                                        f2 = backgroundDrawable2.getTouchY() + chatMessageCell2.getY();
                                                    }
                                                }
                                            }
                                        }
                                        backgroundDrawable.setTouchCoordsOverride(f, f2 - y);
                                        i6 = measuredHeight2 - y;
                                    }
                                    int i9 = i6 + y;
                                    canvas.clipRect(0, y, getMeasuredWidth(), i9);
                                    Paint themedPaint = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                                    if (themeDelegate == null || themeDelegate.isDark || themedPaint == null) {
                                        backgroundDrawable.setCustomPaint(null);
                                        backgroundDrawable.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                    } else {
                                        backgroundDrawable.setCustomPaint(themedPaint);
                                        float top = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate2 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate2 != null) {
                                            themeDelegate2.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell.getX(), top);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell.getX(), top);
                                        }
                                    }
                                    backgroundDrawable.setBounds(0, y, getMeasuredWidth(), i9);
                                    backgroundDrawable.draw(canvas);
                                    canvas.restore();
                                } else if (currentPosition == null) {
                                    Paint themedPaint2 = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate3 = ChatActivity.this.themeDelegate;
                                    if ((themeDelegate3 == null || !themeDelegate3.isDark) && themedPaint2 != null) {
                                        float top2 = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY2 = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate4 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate4 != null) {
                                            themeDelegate4.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell.getX(), top2);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell.getX(), top2);
                                        }
                                    } else {
                                        themedPaint2 = Theme.chat_replyLinePaint;
                                        themedPaint2.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                    }
                                    Paint paint = themedPaint2;
                                    canvas.save();
                                    canvas.translate(0.0f, chatMessageCell.getTranslationY());
                                    int alpha = paint.getAlpha();
                                    paint.setAlpha((int) (alpha * chatMessageCell.getHighlightAlpha() * chatMessageCell.getAlpha()));
                                    z2 = true;
                                    canvas.drawRect(0.0f, chatMessageCell.getTop(), getMeasuredWidth(), chatMessageCell.getBottom(), paint);
                                    paint.setAlpha(alpha);
                                    canvas.restore();
                                    groupedMessages = currentMessagesGroup2;
                                    r13 = z2;
                                }
                            }
                            z2 = true;
                            groupedMessages = currentMessagesGroup2;
                            r13 = z2;
                        } else {
                            r13 = 1;
                        }
                        if (ChatActivity.this.scrimView != chatMessageCell && currentMessagesGroup2 == null && chatMessageCell.drawBackgroundInParent()) {
                            canvas.save();
                            canvas.translate(chatMessageCell.getX(), chatMessageCell.getY());
                            if (chatMessageCell.getScaleX() != 1.0f) {
                                canvas.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getPivotX(), chatMessageCell.getHeight() >> r13);
                            }
                            chatMessageCell.drawBackgroundInternal(canvas, r13);
                            canvas.restore();
                        }
                    } else if (childAt instanceof ChatActionCell) {
                        ChatActionCell chatActionCell = (ChatActionCell) childAt;
                        if (chatActionCell.hasGradientService()) {
                            canvas.save();
                            canvas.translate(chatActionCell.getX(), chatActionCell.getY());
                            canvas.scale(chatActionCell.getScaleX(), chatActionCell.getScaleY(), chatActionCell.getMeasuredWidth() / 2.0f, chatActionCell.getMeasuredHeight() / 2.0f);
                            chatActionCell.drawBackground(canvas, true);
                            canvas.restore();
                        }
                    }
                }
                i7++;
            }
            boolean z3 = true;
            MessageObject.GroupedMessages currentMessagesGroup3 = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
            int i10 = 0;
            while (i10 < 3) {
                this.drawingGroups.clear();
                if (i10 != i3 || ChatActivity.this.chatListView.isFastScrollAnimationRunning()) {
                    int i11 = 0;
                    while (i11 < childCount) {
                        View childAt3 = ChatActivity.this.chatListView.getChildAt(i11);
                        if (childAt3 instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell3 = (ChatMessageCell) childAt3;
                            if (childAt3.getY() <= ChatActivity.this.chatListView.getHeight() && childAt3.getY() + childAt3.getHeight() >= f && chatMessageCell3.getVisibility() != i2 && (currentMessagesGroup = chatMessageCell3.getCurrentMessagesGroup()) != null && ((i10 != 0 || currentMessagesGroup.messages.size() != z3) && ((i10 != z3 || currentMessagesGroup.transitionParams.drawBackgroundForDeletedItems) && ((i10 != 0 || !chatMessageCell3.getMessageObject().deleted) && ((i10 != z3 || chatMessageCell3.getMessageObject().deleted) && ((i10 != i3 || chatMessageCell3.willRemovedAfterAnimation()) && (i10 == i3 || !chatMessageCell3.willRemovedAfterAnimation()))))))) {
                                if (!this.drawingGroups.contains(currentMessagesGroup)) {
                                    MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                    transitionParams.left = 0;
                                    transitionParams.top = 0;
                                    transitionParams.right = 0;
                                    transitionParams.bottom = 0;
                                    transitionParams.pinnedBotton = false;
                                    transitionParams.pinnedTop = false;
                                    transitionParams.cell = chatMessageCell3;
                                    this.drawingGroups.add(currentMessagesGroup);
                                }
                                currentMessagesGroup.transitionParams.pinnedTop = chatMessageCell3.isPinnedTop();
                                currentMessagesGroup.transitionParams.pinnedBotton = chatMessageCell3.isPinnedBottom();
                                int left = chatMessageCell3.getLeft() + chatMessageCell3.getBackgroundDrawableLeft();
                                int left2 = chatMessageCell3.getLeft() + chatMessageCell3.getBackgroundDrawableRight();
                                int top3 = chatMessageCell3.getTop() + chatMessageCell3.getBackgroundDrawableTop();
                                int top4 = chatMessageCell3.getTop() + chatMessageCell3.getBackgroundDrawableBottom();
                                if ((chatMessageCell3.getCurrentPosition().flags & i) == 0) {
                                    top3 -= AndroidUtilities.dp(10.0f);
                                }
                                int i12 = top3;
                                if ((chatMessageCell3.getCurrentPosition().flags & i2) == 0) {
                                    top4 += AndroidUtilities.dp(10.0f);
                                }
                                int i13 = top4;
                                if (chatMessageCell3.willRemovedAfterAnimation()) {
                                    currentMessagesGroup.transitionParams.cell = chatMessageCell3;
                                }
                                MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                int i14 = transitionParams2.top;
                                if (i14 == 0 || i12 < i14) {
                                    transitionParams2.top = i12;
                                }
                                int i15 = transitionParams2.bottom;
                                if (i15 == 0 || i13 > i15) {
                                    transitionParams2.bottom = i13;
                                }
                                int i16 = transitionParams2.left;
                                if (i16 == 0 || left < i16) {
                                    transitionParams2.left = left;
                                }
                                int i17 = transitionParams2.right;
                                if (i17 == 0 || left2 > i17) {
                                    transitionParams2.right = left2;
                                }
                            }
                        }
                        i11++;
                        i3 = 2;
                        f = 0.0f;
                    }
                    int i18 = 0;
                    while (i18 < this.drawingGroups.size()) {
                        MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) this.drawingGroups.get(i18);
                        if (groupedMessages2 == currentMessagesGroup3) {
                            i4 = i10;
                            i5 = i18;
                        } else {
                            float nonAnimationTranslationX = groupedMessages2.transitionParams.cell.getNonAnimationTranslationX(z3);
                            MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages2.transitionParams;
                            float f3 = transitionParams3.left + nonAnimationTranslationX + transitionParams3.offsetLeft;
                            float f4 = transitionParams3.top + transitionParams3.offsetTop;
                            float f5 = transitionParams3.right + nonAnimationTranslationX + transitionParams3.offsetRight;
                            float f6 = transitionParams3.bottom + transitionParams3.offsetBottom;
                            if (!transitionParams3.backgroundChangeBounds) {
                                f4 += transitionParams3.cell.getTranslationY();
                                f6 += groupedMessages2.transitionParams.cell.getTranslationY();
                            }
                            if (f4 < (ChatActivity.this.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                f4 = (ChatActivity.this.chatListViewPaddingTop - chatActivity2.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                            }
                            float f7 = f4;
                            if (f6 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                f6 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                            }
                            float f8 = f6;
                            boolean z4 = (groupedMessages2.transitionParams.cell.getScaleX() == 1.0f && groupedMessages2.transitionParams.cell.getScaleY() == 1.0f) ? false : true;
                            if (z4) {
                                canvas.save();
                                canvas.scale(groupedMessages2.transitionParams.cell.getScaleX(), groupedMessages2.transitionParams.cell.getScaleY(), ((f5 - f3) / 2.0f) + f3, f7 + ((f8 - f7) / 2.0f));
                            }
                            int size = groupedMessages2.messages.size();
                            int i19 = 0;
                            while (true) {
                                if (i19 >= size) {
                                    z = true;
                                    break;
                                }
                                MessageObject messageObject = groupedMessages2.messages.get(i19);
                                if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                    z = false;
                                    break;
                                }
                                i19++;
                            }
                            MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages2.transitionParams;
                            i4 = i10;
                            i5 = i18;
                            transitionParams4.cell.drawBackground(canvas, (int) f3, (int) f7, (int) f5, (int) f8, transitionParams4.pinnedTop, transitionParams4.pinnedBotton, z, ChatActivity.this.contentView.getKeyboardHeight());
                            MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages2.transitionParams;
                            transitionParams5.cell = null;
                            transitionParams5.drawCaptionLayout = groupedMessages2.hasCaption;
                            if (z4) {
                                canvas.restore();
                                for (int i20 = 0; i20 < childCount; i20++) {
                                    View childAt4 = ChatActivity.this.chatListView.getChildAt(i20);
                                    if (childAt4 instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell4 = (ChatMessageCell) childAt4;
                                        if (chatMessageCell4.getCurrentMessagesGroup() == groupedMessages2) {
                                            int left3 = chatMessageCell4.getLeft();
                                            int top5 = chatMessageCell4.getTop();
                                            childAt4.setPivotX((f3 - left3) + ((f5 - f3) / 2.0f));
                                            childAt4.setPivotY((f7 - top5) + ((f8 - f7) / 2.0f));
                                        }
                                    }
                                }
                            }
                        }
                        i18 = i5 + 1;
                        i10 = i4;
                        z3 = true;
                    }
                }
                i10++;
                i3 = 2;
                f = 0.0f;
                i2 = 8;
                z3 = true;
                i = 4;
            }
        }

        /* JADX WARN: Multi-variable type inference failed */
        private void drawChatForegroundElements(Canvas canvas) {
            int size = this.drawTimeAfter.size();
            boolean z = 1;
            boolean z2 = false;
            if (size > 0) {
                for (int i = 0; i < size; i++) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) this.drawTimeAfter.get(i);
                    canvas.save();
                    canvas.translate(chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(false), chatMessageCell.getY());
                    chatMessageCell.drawTime(canvas, chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f, true);
                    canvas.restore();
                }
                this.drawTimeAfter.clear();
            }
            int size2 = this.drawNamesAfter.size();
            if (size2 > 0) {
                for (int i2 = 0; i2 < size2; i2++) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) this.drawNamesAfter.get(i2);
                    float left = chatMessageCell2.getLeft() + chatMessageCell2.getNonAnimationTranslationX(false);
                    float y = chatMessageCell2.getY();
                    float alpha = chatMessageCell2.shouldDrawAlphaLayer() ? chatMessageCell2.getAlpha() : 1.0f;
                    canvas.save();
                    canvas.translate(left, y);
                    chatMessageCell2.setInvalidatesParent(true);
                    chatMessageCell2.drawNamesLayout(canvas, alpha);
                    chatMessageCell2.setInvalidatesParent(false);
                    canvas.restore();
                }
                this.drawNamesAfter.clear();
            }
            int size3 = this.drawCaptionAfter.size();
            if (size3 > 0) {
                int i3 = 0;
                while (i3 < size3) {
                    ChatMessageCell chatMessageCell3 = (ChatMessageCell) this.drawCaptionAfter.get(i3);
                    boolean z3 = chatMessageCell3.getCurrentPosition() != null && (chatMessageCell3.getCurrentPosition().flags & z) == 0;
                    float alpha2 = chatMessageCell3.shouldDrawAlphaLayer() ? chatMessageCell3.getAlpha() : 1.0f;
                    float left2 = chatMessageCell3.getLeft() + chatMessageCell3.getNonAnimationTranslationX(z2);
                    float y2 = chatMessageCell3.getY();
                    canvas.save();
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell3.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null && currentMessagesGroup.transitionParams.backgroundChangeBounds) {
                        float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(z);
                        MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                        float f = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                        float f2 = transitionParams.top + transitionParams.offsetTop;
                        float f3 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                        float f4 = transitionParams.bottom + transitionParams.offsetBottom;
                        if (!transitionParams.backgroundChangeBounds) {
                            f2 += chatMessageCell3.getTranslationY();
                            f4 += chatMessageCell3.getTranslationY();
                        }
                        canvas.clipRect(f + AndroidUtilities.dp(8.0f), f2 + AndroidUtilities.dp(8.0f), f3 - AndroidUtilities.dp(8.0f), f4 - AndroidUtilities.dp(8.0f));
                    }
                    if (chatMessageCell3.getTransitionParams().wasDraw) {
                        canvas.translate(left2, y2);
                        chatMessageCell3.setInvalidatesParent(true);
                        chatMessageCell3.drawCaptionLayout(canvas, z3, alpha2);
                        chatMessageCell3.setInvalidatesParent(false);
                    }
                    canvas.restore();
                    i3++;
                    z = 1;
                    z2 = false;
                }
                this.drawCaptionAfter.clear();
            }
            int size4 = this.drawReactionsAfter.size();
            if (size4 > 0) {
                for (int i4 = 0; i4 < size4; i4++) {
                    ChatMessageCell chatMessageCell4 = (ChatMessageCell) this.drawReactionsAfter.get(i4);
                    boolean z4 = chatMessageCell4.getCurrentPosition() != null && (chatMessageCell4.getCurrentPosition().flags & 1) == 0;
                    float alpha3 = chatMessageCell4.shouldDrawAlphaLayer() ? chatMessageCell4.getAlpha() : 1.0f;
                    float left3 = chatMessageCell4.getLeft() + chatMessageCell4.getNonAnimationTranslationX(false);
                    float y3 = chatMessageCell4.getY();
                    canvas.save();
                    MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell4.getCurrentMessagesGroup();
                    if (currentMessagesGroup2 != null && currentMessagesGroup2.transitionParams.backgroundChangeBounds) {
                        float nonAnimationTranslationX2 = chatMessageCell4.getNonAnimationTranslationX(true);
                        MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup2.transitionParams;
                        float f5 = transitionParams2.left + nonAnimationTranslationX2 + transitionParams2.offsetLeft;
                        float f6 = transitionParams2.top + transitionParams2.offsetTop;
                        float f7 = transitionParams2.right + nonAnimationTranslationX2 + transitionParams2.offsetRight;
                        float f8 = transitionParams2.bottom + transitionParams2.offsetBottom;
                        if (!transitionParams2.backgroundChangeBounds) {
                            f6 += chatMessageCell4.getTranslationY();
                            f8 += chatMessageCell4.getTranslationY();
                        }
                        canvas.clipRect(f5 + AndroidUtilities.dp(8.0f), f6 + AndroidUtilities.dp(8.0f), f7 - AndroidUtilities.dp(8.0f), f8 - AndroidUtilities.dp(8.0f));
                    }
                    if (!z4 && chatMessageCell4.getTransitionParams().wasDraw) {
                        canvas.translate(left3, y3);
                        chatMessageCell4.setInvalidatesParent(true);
                        chatMessageCell4.drawReactionsLayout(canvas, alpha3, null);
                        chatMessageCell4.drawCommentLayout(canvas, alpha3);
                        chatMessageCell4.setInvalidatesParent(false);
                    }
                    canvas.restore();
                }
                this.drawReactionsAfter.clear();
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:74:0x0319  */
        /* JADX WARN: Removed duplicated region for block: B:80:0x0340  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x0407  */
        /* JADX WARN: Removed duplicated region for block: B:89:0x042e  */
        /* JADX WARN: Removed duplicated region for block: B:96:0x0454  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        private void drawReplyButton(Canvas canvas) {
            int i;
            float value;
            float f;
            if (ChatActivity.this.slidingView == null || Thread.currentThread() != Looper.getMainLooper().getThread()) {
                return;
            }
            Paint themedPaint = getThemedPaint("paintChatActionBackground");
            Paint paint = Theme.chat_actionBackgroundGradientDarkenPaint;
            if (this.outlineActionBackgroundPaint.getColor() != themedPaint.getColor()) {
                this.outlineActionBackgroundPaint.setColor(themedPaint.getColor());
            }
            if (this.outlineActionBackgroundDarkenPaint.getColor() != paint.getColor()) {
                this.outlineActionBackgroundDarkenPaint.setColor(paint.getColor());
            }
            if (this.outlineActionBackgroundPaint.getShader() != themedPaint.getShader()) {
                this.outlineActionBackgroundPaint.setShader(themedPaint.getShader());
            }
            if (this.outlineActionBackgroundDarkenPaint.getShader() != paint.getShader()) {
                this.outlineActionBackgroundDarkenPaint.setShader(paint.getShader());
            }
            float value2 = this.slidingFillProgress.getValue() / this.springMultiplier;
            int color = this.outlineActionBackgroundDarkenPaint.getColor();
            if (value2 > 1.0f) {
                this.slidingBeyondMax = true;
            }
            float nonAnimationTranslationX = ChatActivity.this.slidingView.getNonAnimationTranslationX(false);
            if (this.slidingDrawableVisibilityProgress.getValue() == 0.0f) {
                this.slidingFillProgressSpring.cancel();
                this.slidingFillProgressSpring.getSpring().setFinalPosition(0.0f);
                this.slidingFillProgress.setValue(0.0f);
                this.slidingOuterRingSpring.cancel();
                this.slidingOuterRingSpring.getSpring().setFinalPosition(0.0f);
                this.slidingOuterRingProgress.setValue(0.0f);
                this.slidingBeyondMax = false;
            }
            float clamp = this.slidingFillProgressSpring.getSpring().getFinalPosition() != this.springMultiplier ? MathUtils.clamp(((-nonAnimationTranslationX) - AndroidUtilities.dp(20.0f)) / AndroidUtilities.dp(30.0f), 0.0f, 1.0f) : 1.0f;
            if (clamp == 1.0f && this.slidingFillProgressSpring.getSpring().getFinalPosition() != this.springMultiplier) {
                this.slidingFillProgressSpring.getSpring().setFinalPosition(this.springMultiplier);
                this.slidingFillProgressSpring.start();
                this.slidingOuterRingSpring.getSpring().setFinalPosition(this.springMultiplier);
                this.slidingOuterRingSpring.start();
            }
            float f2 = nonAnimationTranslationX <= ((float) (-AndroidUtilities.dp(20.0f))) ? this.springMultiplier : 0.0f;
            if (f2 != this.slidingDrawableVisibilitySpring.getSpring().getFinalPosition()) {
                this.slidingDrawableVisibilitySpring.getSpring().setFinalPosition(f2);
                if (!this.slidingDrawableVisibilitySpring.isRunning()) {
                    this.slidingDrawableVisibilitySpring.start();
                }
            }
            float value3 = this.slidingDrawableVisibilityProgress.getValue() / this.springMultiplier;
            float measuredWidth = getMeasuredWidth() + (nonAnimationTranslationX * ((ChatActivity.this.slidingView.getMessageObject() == null || !ChatActivity.this.slidingView.getMessageObject().isOut()) ? 1.0f : 0.5f));
            float top = ChatActivity.this.slidingView.getTop() + (ChatActivity.this.slidingView.getMeasuredHeight() / 2.0f);
            boolean z = this.slidingBeyondMax;
            float f3 = z ? value2 : value3;
            float f4 = z ? 0.0f : 1.0f - value2;
            boolean z2 = ColorUtils.calculateLuminance(getThemedColor(Theme.key_windowBackgroundWhite)) <= 0.5d;
            if (value3 != 0.0f) {
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set((int) ((measuredWidth - (AndroidUtilities.dp(16.0f) * f3)) + (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) ((top - (AndroidUtilities.dp(16.0f) * f3)) + (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) (((AndroidUtilities.dp(16.0f) * f3) + measuredWidth) - (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) ((top + (AndroidUtilities.dp(16.0f) * f3)) - (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)));
                Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF.top);
                if (value2 == 0.0f) {
                    int alpha = this.outlineActionBackgroundPaint.getAlpha();
                    this.outlineActionBackgroundPaint.setAlpha((int) (alpha * value3));
                    float f5 = clamp * 360.0f;
                    canvas.drawArc(rectF, -90.0f, f5, false, this.outlineActionBackgroundPaint);
                    this.outlineActionBackgroundPaint.setAlpha(alpha);
                    if (ChatActivity.this.themeDelegate.hasGradientService()) {
                        int alpha2 = this.outlineActionBackgroundDarkenPaint.getAlpha();
                        if (z2) {
                            i = -1;
                            this.outlineActionBackgroundDarkenPaint.setColor(-1);
                        } else {
                            i = -1;
                        }
                        this.outlineActionBackgroundDarkenPaint.setAlpha((int) (alpha2 * value3));
                        canvas.drawArc(rectF, -90.0f, f5, false, this.outlineActionBackgroundDarkenPaint);
                        RectF rectF2 = AndroidUtilities.rectTmp;
                        rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
                        Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                        this.path.rewind();
                        Path.Direction direction = Path.Direction.CW;
                        this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, direction);
                        int alpha3 = themedPaint.getAlpha();
                        float f6 = 0.6f * value3 * clamp;
                        themedPaint.setAlpha((int) (alpha3 * f6));
                        canvas.drawPath(this.path, themedPaint);
                        themedPaint.setAlpha(alpha3);
                        if (ChatActivity.this.themeDelegate.hasGradientService()) {
                            int alpha4 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            if (z2) {
                                Theme.chat_actionBackgroundGradientDarkenPaint.setColor(i);
                            }
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f6 * alpha4));
                            canvas.drawPath(this.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha4);
                        }
                        if (f4 != 0.0f) {
                            rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f4)), (int) (top - (AndroidUtilities.dp(16.0f) * f4)), (int) ((AndroidUtilities.dp(16.0f) * f4) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f4)));
                            this.path.rewind();
                            this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), direction);
                            canvas.save();
                            canvas.clipPath(this.path, Region.Op.DIFFERENCE);
                        }
                        rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
                        Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                        this.path.rewind();
                        this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, direction);
                        int alpha5 = themedPaint.getAlpha();
                        float f7 = 0.4f * value3;
                        themedPaint.setAlpha((int) (alpha5 * f7));
                        canvas.drawPath(this.path, themedPaint);
                        themedPaint.setAlpha(alpha5);
                        if (ChatActivity.this.themeDelegate.hasGradientService()) {
                            int alpha6 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            if (z2) {
                                Theme.chat_actionBackgroundGradientDarkenPaint.setColor(i);
                            }
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f7 * alpha6));
                            canvas.drawPath(this.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha6);
                        }
                        if (f4 != 0.0f) {
                            canvas.restore();
                        }
                        value = this.slidingOuterRingProgress.getValue() / this.springMultiplier;
                        if (value != 0.0f && value != 1.0f) {
                            float f8 = value + 1.0f;
                            float strokeWidth = this.outlineActionBackgroundPaint.getStrokeWidth();
                            f = (1.0f - value) * strokeWidth;
                            if (f != 0.0f) {
                                rectF2.set((int) ((measuredWidth - (AndroidUtilities.dp(16.0f) * f8)) + f), (int) ((top - (AndroidUtilities.dp(16.0f) * f8)) + f), (int) (((AndroidUtilities.dp(16.0f) * f8) + measuredWidth) - f), (int) ((top + (AndroidUtilities.dp(16.0f) * f8)) - f));
                                Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                                int alpha7 = this.outlineActionBackgroundPaint.getAlpha();
                                this.outlineActionBackgroundPaint.setAlpha((int) (alpha7 * value3));
                                this.outlineActionBackgroundPaint.setStrokeWidth(f);
                                canvas.drawRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f8, AndroidUtilities.dp(16.0f) * f8, this.outlineActionBackgroundPaint);
                                this.outlineActionBackgroundPaint.setStrokeWidth(strokeWidth);
                                this.outlineActionBackgroundPaint.setAlpha(alpha7);
                                if (ChatActivity.this.themeDelegate.hasGradientService()) {
                                    int alpha8 = this.outlineActionBackgroundDarkenPaint.getAlpha();
                                    if (z2) {
                                        this.outlineActionBackgroundDarkenPaint.setColor(i);
                                    }
                                    this.outlineActionBackgroundDarkenPaint.setAlpha((int) (alpha8 * value3));
                                    this.outlineActionBackgroundDarkenPaint.setStrokeWidth(f);
                                    canvas.drawRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f8, AndroidUtilities.dp(16.0f) * f8, this.outlineActionBackgroundDarkenPaint);
                                    this.outlineActionBackgroundDarkenPaint.setStrokeWidth(strokeWidth);
                                }
                            }
                        }
                        Drawable themedDrawable = getThemedDrawable("drawableReplyIcon");
                        themedDrawable.setAlpha((int) (value3 * 255.0f));
                        themedDrawable.setBounds((int) (measuredWidth - ((themedDrawable.getIntrinsicWidth() / 2) * f3)), (int) (top - ((themedDrawable.getIntrinsicHeight() / 2) * f3)), (int) (measuredWidth + ((themedDrawable.getIntrinsicWidth() / 2) * f3)), (int) (top + ((themedDrawable.getIntrinsicHeight() / 2) * f3)));
                        themedDrawable.draw(canvas);
                        themedDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
                        this.outlineActionBackgroundDarkenPaint.setColor(color);
                        paint.setColor(color);
                    }
                }
            }
            i = -1;
            RectF rectF22 = AndroidUtilities.rectTmp;
            rectF22.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF22.top);
            this.path.rewind();
            Path.Direction direction2 = Path.Direction.CW;
            this.path.addRoundRect(rectF22, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, direction2);
            int alpha32 = themedPaint.getAlpha();
            float f62 = 0.6f * value3 * clamp;
            themedPaint.setAlpha((int) (alpha32 * f62));
            canvas.drawPath(this.path, themedPaint);
            themedPaint.setAlpha(alpha32);
            if (ChatActivity.this.themeDelegate.hasGradientService()) {
            }
            if (f4 != 0.0f) {
            }
            rectF22.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF22.top);
            this.path.rewind();
            this.path.addRoundRect(rectF22, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, direction2);
            int alpha52 = themedPaint.getAlpha();
            float f72 = 0.4f * value3;
            themedPaint.setAlpha((int) (alpha52 * f72));
            canvas.drawPath(this.path, themedPaint);
            themedPaint.setAlpha(alpha52);
            if (ChatActivity.this.themeDelegate.hasGradientService()) {
            }
            if (f4 != 0.0f) {
            }
            value = this.slidingOuterRingProgress.getValue() / this.springMultiplier;
            if (value != 0.0f) {
                float f82 = value + 1.0f;
                float strokeWidth2 = this.outlineActionBackgroundPaint.getStrokeWidth();
                f = (1.0f - value) * strokeWidth2;
                if (f != 0.0f) {
                }
            }
            Drawable themedDrawable2 = getThemedDrawable("drawableReplyIcon");
            themedDrawable2.setAlpha((int) (value3 * 255.0f));
            themedDrawable2.setBounds((int) (measuredWidth - ((themedDrawable2.getIntrinsicWidth() / 2) * f3)), (int) (top - ((themedDrawable2.getIntrinsicHeight() / 2) * f3)), (int) (measuredWidth + ((themedDrawable2.getIntrinsicWidth() / 2) * f3)), (int) (top + ((themedDrawable2.getIntrinsicHeight() / 2) * f3)));
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(NotificationCenter.closeSearchByActiveAction);
            this.outlineActionBackgroundDarkenPaint.setColor(color);
            paint.setColor(color);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$1(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$2(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$3(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$4() {
            ChatActivity.this.animateToNextChat();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$5(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$6(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$7(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        private void processTouchEvent(MotionEvent motionEvent) {
            TLRPC.Chat chat;
            if (motionEvent != null) {
                ChatActivity.this.wasManualScroll = true;
            }
            if (motionEvent != null && motionEvent.getAction() == 0 && !ChatActivity.this.startedTrackingSlidingView && !ChatActivity.this.maybeStartTrackingSlidingView && ChatActivity.this.slidingView == null && !((BaseFragment) ChatActivity.this).inPreviewMode) {
                View pressedChildView = getPressedChildView();
                if (pressedChildView instanceof ChatMessageCell) {
                    if (ChatActivity.this.slidingView != null) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                    }
                    ChatActivity.this.slidingView = (ChatMessageCell) pressedChildView;
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    boolean canSendMessageToTopic = ChatActivity.this.canSendMessageToTopic(messageObject);
                    if ((ChatActivity.this.chatMode != 0 && ChatActivity.this.chatMode != 5 && (ChatActivity.this.chatMode != 3 || ChatActivity.this.threadMessageId != ChatActivity.this.getUserConfig().getClientUserId())) || ((ChatActivity.this.threadMessageObjects != null && ChatActivity.this.threadMessageObjects.contains(messageObject)) || ((ChatActivity.this.getMessageType(messageObject) == 1 && (messageObject.getDialogId() == ChatActivity.this.mergeDialogId || messageObject.needDrawBluredPreview())) || ((ChatActivity.this.currentEncryptedChat == null && messageObject.getId() < 0) || ((ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && ((!ChatActivity.this.bottomOverlayChatWaitsReply || !canSendMessageToTopic) && !messageObject.wasJustSent)) || (((chat = ChatActivity.this.currentChat) != null && ((ChatObject.isNotInChat(chat) && !ChatActivity.this.isThreadChat()) || ((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || !ChatObject.canSendMessages(ChatActivity.this.currentChat) || (ChatObject.isForum(ChatActivity.this.currentChat) && !canSendMessageToTopic)))) || ChatActivity.this.textSelectionHelper.isInSelectionMode())))))) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                        return;
                    }
                    this.startedTrackingPointerId = motionEvent.getPointerId(0);
                    ChatActivity.this.maybeStartTrackingSlidingView = true;
                    this.startedTrackingX = (int) motionEvent.getX();
                    this.startedTrackingY = (int) motionEvent.getY();
                }
            } else if (ChatActivity.this.slidingView == null || motionEvent == null || motionEvent.getAction() != 2 || motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                if (ChatActivity.this.slidingView != null) {
                    if (motionEvent != null) {
                        if (motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                            return;
                        }
                        if (motionEvent.getAction() != 3 && motionEvent.getAction() != 1 && motionEvent.getAction() != 6) {
                            return;
                        }
                    }
                    if (motionEvent != null && motionEvent.getAction() != 3 && Math.abs(ChatActivity.this.slidingView.getNonAnimationTranslationX(false)) >= AndroidUtilities.dp(50.0f)) {
                        ChatActivity chatActivity = ChatActivity.this;
                        chatActivity.showFieldPanelForReply(chatActivity.slidingView.getMessageObject());
                    }
                    float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                    this.endTrackingX = slidingOffsetX;
                    if (slidingOffsetX == 0.0f) {
                        ChatActivity.this.slidingView = null;
                    }
                    this.lastTrackingAnimationTime = System.currentTimeMillis();
                    this.trackAnimationProgress = 0.0f;
                    invalidate();
                    ChatActivity.this.maybeStartTrackingSlidingView = false;
                    ChatActivity.this.startedTrackingSlidingView = false;
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                }
            } else {
                int max = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (motionEvent.getX() - this.startedTrackingX)));
                int abs = Math.abs(((int) motionEvent.getY()) - this.startedTrackingY);
                if (getScrollState() == 0 && ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && max <= (-AndroidUtilities.getPixelsInCM(0.4f, true)) && Math.abs(max) / 3 > abs) {
                    MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                    ChatActivity.this.slidingView.onTouchEvent(obtain);
                    super.onInterceptTouchEvent(obtain);
                    obtain.recycle();
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                    ChatActivity.this.maybeStartTrackingSlidingView = false;
                    ChatActivity.this.startedTrackingSlidingView = true;
                    this.startedTrackingX = (int) motionEvent.getX();
                    if (getParent() != null) {
                        getParent().requestDisallowInterceptTouchEvent(true);
                    }
                } else if (ChatActivity.this.startedTrackingSlidingView) {
                    if (Math.abs(max) < AndroidUtilities.dp(50.0f)) {
                        this.wasTrackingVibrate = false;
                    } else if (!this.wasTrackingVibrate) {
                        try {
                            performHapticFeedback(3, 2);
                        } catch (Exception unused) {
                        }
                        this.wasTrackingVibrate = true;
                    }
                    float f = max;
                    ChatActivity.this.slidingView.setSlidingOffset(f);
                    MessageObject messageObject2 = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject2.isRoundVideo() || messageObject2.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false, false);
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, f);
                    invalidate();
                }
            }
        }

        private void setGroupTranslationX(ChatMessageCell chatMessageCell, float f) {
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup == null) {
                return;
            }
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = getChildAt(i);
                if (childAt != chatMessageCell && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                        chatMessageCell2.setSlidingOffset(f);
                        chatMessageCell2.invalidate();
                    }
                }
            }
            invalidate();
        }

        private void updateSkeletonColors() {
            boolean z = ColorUtils.calculateLuminance(getThemedColor(Theme.key_windowBackgroundWhite)) <= 0.699999988079071d;
            int i = Theme.key_listSelector;
            int blendARGB = ColorUtils.blendARGB(getThemedColor(i), Color.argb(z ? 33 : 3, (int) NotificationCenter.closeSearchByActiveAction, (int) NotificationCenter.closeSearchByActiveAction, (int) NotificationCenter.closeSearchByActiveAction), z ? 0.9f : 0.5f);
            int alphaComponent = ColorUtils.setAlphaComponent(getThemedColor(i), z ? 24 : ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
            if (ChatActivity.this.skeletonColor1 == alphaComponent && ChatActivity.this.skeletonColor0 == blendARGB) {
                return;
            }
            ChatActivity.this.skeletonColor0 = blendARGB;
            ChatActivity.this.skeletonColor1 = alphaComponent;
            ChatActivity chatActivity = ChatActivity.this;
            ChatActivity chatActivity2 = ChatActivity.this;
            Shader.TileMode tileMode = Shader.TileMode.CLAMP;
            chatActivity.skeletonGradient = new LinearGradient(0.0f, 0.0f, chatActivity2.skeletonGradientWidth = AndroidUtilities.dp(200.0f), 0.0f, new int[]{alphaComponent, blendARGB, blendARGB, alphaComponent}, new float[]{0.0f, 0.4f, 0.6f, 1.0f}, tileMode);
            ChatActivity chatActivity3 = ChatActivity.this;
            chatActivity3.skeletonTotalTranslation = (-chatActivity3.skeletonGradientWidth) * 2;
            ChatActivity.this.skeletonPaint.setShader(ChatActivity.this.skeletonGradient);
            int argb = Color.argb(z ? 43 : 96, (int) NotificationCenter.closeSearchByActiveAction, (int) NotificationCenter.closeSearchByActiveAction, (int) NotificationCenter.closeSearchByActiveAction);
            ChatActivity.this.skeletonOutlineGradient = new LinearGradient(0.0f, 0.0f, ChatActivity.this.skeletonGradientWidth, 0.0f, new int[]{0, argb, argb, 0}, new float[]{0.0f, 0.4f, 0.6f, 1.0f}, tileMode);
            ChatActivity.this.skeletonOutlinePaint.setShader(ChatActivity.this.skeletonOutlineGradient);
        }

        private void updateSkeletonGradient() {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long abs = Math.abs(ChatActivity.this.skeletonLastUpdateTime - elapsedRealtime);
            if (abs > 17) {
                abs = 16;
            }
            if (abs < 4) {
                abs = 0;
            }
            int width = getWidth();
            ChatActivity.this.skeletonLastUpdateTime = elapsedRealtime;
            ChatActivity.access$17716(ChatActivity.this, ((float) (abs * width)) / 400.0f);
            if (ChatActivity.this.skeletonTotalTranslation >= width * 2) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.skeletonTotalTranslation = (-chatActivity.skeletonGradientWidth) * 2;
            }
            ChatActivity.this.skeletonMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, 0.0f);
            if (ChatActivity.this.skeletonGradient != null) {
                ChatActivity.this.skeletonGradient.setLocalMatrix(ChatActivity.this.skeletonMatrix);
            }
            ChatActivity.this.skeletonOutlineMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, 0.0f);
            if (ChatActivity.this.skeletonOutlineGradient != null) {
                ChatActivity.this.skeletonOutlineGradient.setLocalMatrix(ChatActivity.this.skeletonOutlineMatrix);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView
        public boolean allowSelectChildAtPosition(View view) {
            if (view == null || !(view.getVisibility() == 4 || view.getVisibility() == 8)) {
                return super.allowSelectChildAtPosition(view);
            }
            return false;
        }

        @Override // android.view.View
        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return null;
            }
            return super.createAccessibilityNodeInfo();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            this.invalidated = false;
            canvas.save();
            if (ChatActivity.this.fragmentTransition == null || (ChatActivity.this.fromPullingDownTransition && !ChatActivity.this.toPullingDownTransition)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.isInsideContainer) {
                    canvas.clipRect(0.0f, (chatActivity.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), getMeasuredWidth(), getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset);
                }
            }
            this.selectorRect.setEmpty();
            if (ChatActivity.this.pullingDownOffset != 0.0f) {
                int save = canvas.save();
                float measuredHeight = ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f;
                ChatActivity chatActivity2 = ChatActivity.this;
                float f = (-chatActivity2.pullingDownOffset) - measuredHeight;
                chatActivity2.drawingChatListViewYoffset = f;
                canvas.translate(0.0f, f);
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
                canvas.restoreToCount(save);
            } else {
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
            }
            canvas.restore();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void draw(Canvas canvas) {
            ChatActivity chatActivity;
            float f;
            MessageSkeleton messageSkeleton;
            int lerp;
            MessageObject.GroupedMessages.TransitionParams transitionParams;
            if ((ChatActivity.this.startMessageAppearTransitionMs == 0 || System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs <= 200) && !AndroidUtilities.isTablet()) {
                ChatActivity chatActivity2 = ChatActivity.this;
                if (!chatActivity2.isComments && chatActivity2.currentUser == null) {
                    TLRPC.Chat chat = chatActivity2.currentChat;
                    boolean z = true;
                    boolean z2 = (chat == null || ChatObject.isChannelAndNotMegaGroup(chat)) && ChatActivity.this.chatMode != 7;
                    if (ChatActivity.this.pullingDownOffset != 0.0f) {
                        canvas.save();
                        canvas.translate(0.0f, -ChatActivity.this.pullingDownOffset);
                    }
                    updateSkeletonColors();
                    updateSkeletonGradient();
                    int height = getHeight() - ChatActivity.this.blurredViewBottomOffset;
                    int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    for (int i2 = 0; i2 < getChildCount(); i2++) {
                        int top = getChildAt(i2).getTop();
                        if (top < i) {
                            i = top;
                        }
                    }
                    if (ChatActivity.this.startMessageAppearTransitionMs == 0 && i <= 0) {
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity3.checkDispatchHideSkeletons(((BaseFragment) chatActivity3).fragmentBeginToShow);
                    }
                    Paint themedPaint = getThemedPaint("paintChatActionBackground");
                    if (ChatActivity.this.skeletonServicePaint.getColor() != themedPaint.getColor()) {
                        ChatActivity.this.skeletonServicePaint.setColor(themedPaint.getColor());
                    }
                    if (ChatActivity.this.skeletonServicePaint.getShader() != themedPaint.getShader()) {
                        ChatActivity.this.skeletonServicePaint.setShader(themedPaint.getShader());
                        ChatActivity.this.skeletonColorMatrix.setSaturation(ChatActivity.SKELETON_SATURATION);
                        ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                    }
                    int i3 = 0;
                    while (i3 < getChildCount()) {
                        View childAt = getChildAt(i3);
                        if (childAt instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                            lerp = (int) (childAt.getTop() + chatMessageCell.getCurrentBackgroundDrawable(z).getBounds().top + (currentMessagesGroup != null ? transitionParams.top + currentMessagesGroup.transitionParams.offsetTop : 0.0f));
                            if (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) {
                                lerp = AndroidUtilities.lerp(height, lerp, childAt.getAlpha());
                            } else if (childAt.getAlpha() != 1.0f) {
                                lerp = height;
                            }
                            if (lerp >= height) {
                                i3++;
                                z = true;
                            }
                            height = lerp;
                            i3++;
                            z = true;
                        } else {
                            if (childAt instanceof ChatActionCell) {
                                lerp = (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) ? AndroidUtilities.lerp(height, childAt.getTop(), childAt.getAlpha()) : childAt.getAlpha() == 1.0f ? childAt.getTop() : height;
                                if (lerp >= height) {
                                }
                                height = lerp;
                            }
                            i3++;
                            z = true;
                        }
                    }
                    if (ChatActivity.this.isSkeletonVisible()) {
                        boolean z3 = SharedConfig.getDevicePerformanceClass() != 0 && Theme.hasGradientService();
                        int i4 = Theme.key_windowBackgroundWhite;
                        boolean z4 = ColorUtils.calculateLuminance(getThemedColor(i4)) <= 0.699999988079071d && Theme.hasGradientService();
                        boolean z5 = ColorUtils.calculateLuminance(getThemedColor(i4)) <= 0.009999999776482582d && Theme.hasGradientService();
                        if (z3) {
                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() - ChatActivity.this.contentPanTranslation);
                        }
                        int alpha = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        if (z5) {
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha * 4.0f));
                        }
                        float currentTimeMillis = ChatActivity.this.startMessageAppearTransitionMs != 0 ? 1.0f - (((float) (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs)) / 200.0f) : 1.0f;
                        int alpha2 = ChatActivity.this.skeletonPaint.getAlpha();
                        int alpha3 = ChatActivity.this.skeletonServicePaint.getAlpha();
                        int alpha4 = ChatActivity.this.skeletonOutlinePaint.getAlpha();
                        ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                        float f2 = (themeDelegate == null || !themeDelegate.isDark || ChatActivity.this.skeletonServicePaint.getShader() == null) ? 1.0f : 0.3f;
                        ChatActivity.this.skeletonServicePaint.setAlpha((int) (255.0f * currentTimeMillis * f2));
                        float f3 = alpha2;
                        ChatActivity.this.skeletonPaint.setAlpha((int) (f2 * currentTimeMillis * f3));
                        ChatActivity.this.skeletonOutlinePaint.setAlpha((int) (currentTimeMillis * f3));
                        int i5 = 0;
                        while (true) {
                            chatActivity = ChatActivity.this;
                            f = 3.0f;
                            if (height <= chatActivity.blurredViewTopOffset) {
                                break;
                            }
                            int dp = height - AndroidUtilities.dp(3.0f);
                            if (i5 >= ChatActivity.this.messageSkeletons.size()) {
                                messageSkeleton = ChatActivity.this.getNewSkeleton(z2);
                                ChatActivity.this.messageSkeletons.add(messageSkeleton);
                            } else {
                                messageSkeleton = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i5);
                            }
                            messageSkeleton.lastBottom = ChatActivity.this.startMessageAppearTransitionMs != 0 ? ChatActivity.this.messages.size() <= 2 ? Math.min(messageSkeleton.lastBottom, dp) : messageSkeleton.lastBottom : dp;
                            height = dp - messageSkeleton.height;
                            i5++;
                        }
                        int height2 = chatActivity.messageSkeletons.isEmpty() ? getHeight() - ChatActivity.this.blurredViewBottomOffset : ((MessageSkeleton) ChatActivity.this.messageSkeletons.get(0)).lastBottom + AndroidUtilities.dp(3.0f);
                        int i6 = 0;
                        while (i6 < ChatActivity.this.messageSkeletons.size() && height2 > ChatActivity.this.blurredViewTopOffset) {
                            int dp2 = height2 - AndroidUtilities.dp(f);
                            MessageSkeleton messageSkeleton2 = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i6);
                            int i7 = messageSkeleton2.lastBottom;
                            int i8 = alpha;
                            ChatActivity.this.skeletonBackgroundDrawable.setBounds(z2 ? AndroidUtilities.dp(f) : AndroidUtilities.dp(51.0f), i7 - messageSkeleton2.height, messageSkeleton2.width, i7);
                            if (z3) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonServicePaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonPaint);
                            if (z4) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, Theme.chat_actionBackgroundGradientDarkenPaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonOutlinePaint);
                            if (!z2) {
                                float f4 = 27.0f;
                                if (z3) {
                                    canvas.drawCircle(AndroidUtilities.dp(27.0f), i7 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonServicePaint);
                                    f4 = 27.0f;
                                }
                                canvas.drawCircle(AndroidUtilities.dp(f4), i7 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonPaint);
                                float f5 = 27.0f;
                                if (z4) {
                                    canvas.drawCircle(AndroidUtilities.dp(27.0f), i7 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    f5 = 27.0f;
                                }
                                canvas.drawCircle(AndroidUtilities.dp(f5), i7 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonOutlinePaint);
                            }
                            height2 = dp2 - messageSkeleton2.height;
                            i6++;
                            alpha = i8;
                            f = 3.0f;
                        }
                        ChatActivity.this.skeletonServicePaint.setAlpha(alpha3);
                        ChatActivity.this.skeletonPaint.setAlpha(alpha2);
                        ChatActivity.this.skeletonOutlinePaint.setAlpha(alpha4);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha);
                        this.invalidated = false;
                        invalidate();
                    } else if (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs > 200) {
                        ChatActivity.this.messageSkeletons.clear();
                    }
                    ChatActivity chatActivity4 = ChatActivity.this;
                    chatActivity4.lastSkeletonCount = chatActivity4.messageSkeletons.size();
                    ChatActivity chatActivity5 = ChatActivity.this;
                    chatActivity5.lastSkeletonMessageCount = chatActivity5.messages.size();
                    if (ChatActivity.this.pullingDownOffset != 0.0f) {
                        canvas.restore();
                    }
                }
            }
            super.draw(canvas);
        }

        /* JADX WARN: Code restructure failed: missing block: B:143:0x0252, code lost:
            if ((r3 & 1) != 0) goto L123;
         */
        /* JADX WARN: Removed duplicated region for block: B:304:0x0582  */
        /* JADX WARN: Removed duplicated region for block: B:307:0x058e  */
        /* JADX WARN: Removed duplicated region for block: B:314:0x05b2  */
        /* JADX WARN: Removed duplicated region for block: B:317:0x05bb  */
        /* JADX WARN: Removed duplicated region for block: B:321:0x05ce  */
        /* JADX WARN: Removed duplicated region for block: B:324:0x05df  */
        /* JADX WARN: Removed duplicated region for block: B:325:0x0607  */
        /* JADX WARN: Removed duplicated region for block: B:327:0x060f  */
        /* JADX WARN: Removed duplicated region for block: B:330:0x061b  */
        /* JADX WARN: Removed duplicated region for block: B:336:0x0631  */
        /* JADX WARN: Removed duplicated region for block: B:48:0x00c1  */
        /* JADX WARN: Removed duplicated region for block: B:50:0x00c8  */
        /* JADX WARN: Removed duplicated region for block: B:58:0x00e9  */
        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean drawChild(Canvas canvas, View view, long j) {
            ChatActivity chatActivity;
            ChatMessageCell chatMessageCell;
            ChatActionCell chatActionCell;
            int i;
            int i2;
            boolean z;
            float f;
            float f2;
            boolean z2;
            int adapterPosition;
            MessageObject.GroupedMessages groupedMessages;
            int i3;
            int adapterPosition2;
            int i4;
            boolean drawChild;
            int i5;
            ChatMessageCell chatMessageCell2;
            if (ChatActivity.this.isSkeletonVisible()) {
                this.invalidated = false;
                invalidate();
            }
            boolean z3 = view == ChatActivity.this.scrimView;
            float dp = (ChatActivity.this.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            boolean z4 = view instanceof ChatMessageCell;
            boolean z5 = z4 ? ((ChatMessageCell) view).transitionParams.animateBackgroundBoundsInner : false;
            if ((!SizeNotifierFrameLayout.drawingBlur && ((view.getY() > getMeasuredHeight() || view.getY() + view.getMeasuredHeight() < dp) && !z5)) || view.getVisibility() == 4 || view.getVisibility() == 8) {
                z3 = true;
            }
            MessageObject.GroupedMessages groupedMessages2 = null;
            if (z4) {
                chatMessageCell = (ChatMessageCell) view;
                if (ChatActivity.this.animateSendingViews.contains(chatMessageCell)) {
                    z3 = true;
                }
                MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentPosition != null) {
                    int i6 = currentPosition.pw;
                    int i7 = currentPosition.spanSize;
                    if (i6 != i7 && i7 == 1000 && currentPosition.siblingHeights == null && currentMessagesGroup.hasSibling) {
                        i5 = chatMessageCell.getBackgroundDrawableLeft();
                        i2 = 0;
                        if (chatMessageCell.needDelayRoundProgressDraw()) {
                        }
                        if (!z3) {
                            chatMessageCell2 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell2.getCurrentMessagesGroup() != null) {
                                z3 = true;
                            }
                        }
                        if (z3) {
                        }
                        int i8 = i5;
                        chatActionCell = null;
                        groupedMessages2 = currentMessagesGroup;
                        i = i8;
                    } else if (currentPosition.siblingHeights != null) {
                        i2 = view.getBottom() - AndroidUtilities.dp((chatMessageCell.isPinnedBottom() ? 1 : 0) + 1);
                        i5 = 0;
                        if (chatMessageCell.needDelayRoundProgressDraw()) {
                            ChatActivity.this.drawLaterRoundProgressCell = chatMessageCell;
                        }
                        if (!z3 && (ChatActivity.this.scrimView instanceof ChatMessageCell)) {
                            chatMessageCell2 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell2.getCurrentMessagesGroup() != null && chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                                z3 = true;
                            }
                        }
                        if (z3) {
                            chatMessageCell.getPhotoImage().skipDraw();
                        }
                        int i82 = i5;
                        chatActionCell = null;
                        groupedMessages2 = currentMessagesGroup;
                        i = i82;
                    }
                }
                i5 = 0;
                i2 = 0;
                if (chatMessageCell.needDelayRoundProgressDraw()) {
                }
                if (!z3) {
                }
                if (z3) {
                }
                int i822 = i5;
                chatActionCell = null;
                groupedMessages2 = currentMessagesGroup;
                i = i822;
            } else if (view instanceof ChatActionCell) {
                chatActionCell = (ChatActionCell) view;
                i = 0;
                i2 = 0;
                chatMessageCell = null;
            } else {
                chatMessageCell = null;
                chatActionCell = null;
                i = 0;
                i2 = 0;
            }
            if (i != 0 || i2 != 0) {
                canvas.save();
            }
            if (z3) {
                z = false;
            } else {
                boolean z6 = groupedMessages2 != null && groupedMessages2.transitionParams.backgroundChangeBounds;
                if (z6) {
                    canvas.save();
                    float nonAnimationTranslationX = chatMessageCell.getNonAnimationTranslationX(true);
                    MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages2.transitionParams;
                    canvas.clipRect(transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft + AndroidUtilities.dp(4.0f), transitionParams.top + transitionParams.offsetTop + AndroidUtilities.dp(4.0f), ((transitionParams.right + nonAnimationTranslationX) + transitionParams.offsetRight) - AndroidUtilities.dp(4.0f), (transitionParams.bottom + transitionParams.offsetBottom) - AndroidUtilities.dp(4.0f));
                }
                if (chatMessageCell == null || !z6) {
                    drawChild = super.drawChild(canvas, view, j);
                } else {
                    chatMessageCell.clipToGroupBounds = true;
                    drawChild = super.drawChild(canvas, view, j);
                    chatMessageCell.clipToGroupBounds = false;
                }
                if (z6) {
                    canvas.restore();
                }
                if (chatMessageCell == null || !chatMessageCell.hasOutboundsContent()) {
                    if (chatActionCell != null) {
                        canvas.save();
                        canvas.translate(chatActionCell.getX(), chatActionCell.getY());
                        chatActionCell.drawOutboundsContent(canvas);
                    }
                    z = drawChild;
                } else {
                    canvas.save();
                    canvas.translate(chatMessageCell.getX(), chatMessageCell.getY());
                    chatMessageCell.drawOutboundsContent(canvas);
                }
                canvas.restore();
                z = drawChild;
            }
            if (i != 0 || i2 != 0) {
                canvas.restore();
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, view.getTranslationY());
            }
            if (chatMessageCell != null) {
                chatMessageCell.drawCheckBox(canvas);
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.restore();
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, view.getTranslationY());
            }
            if (chatMessageCell != null) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                MessageObject.GroupedMessagePosition currentPosition2 = chatMessageCell.getCurrentPosition();
                if (!z3) {
                    if (currentPosition2 != null || chatMessageCell.getTransitionParams().animateBackgroundBoundsInner) {
                        if (currentPosition2 == null || currentPosition2.last || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) {
                            if (currentPosition2 == null || currentPosition2.last) {
                                this.drawTimeAfter.add(chatMessageCell);
                            }
                            if ((currentPosition2 == null || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) && chatMessageCell.hasNameLayout()) {
                                this.drawNamesAfter.add(chatMessageCell);
                            }
                        }
                        if (currentPosition2 != null || chatMessageCell.getTransitionParams().transformGroupToSingleMessage || chatMessageCell.getTransitionParams().animateBackgroundBoundsInner) {
                            if (currentPosition2 == null || (currentPosition2.flags & chatMessageCell.captionFlag()) != 0) {
                                this.drawCaptionAfter.add(chatMessageCell);
                            }
                            if (currentPosition2 != null) {
                                int i9 = currentPosition2.flags;
                                if ((i9 & 8) != 0) {
                                }
                            }
                            this.drawReactionsAfter.add(chatMessageCell);
                        }
                    }
                    if (ChatActivity.this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && !messageObject.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject))) {
                        ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                        float imageX = photoImage.getImageX() + chatMessageCell.getX();
                        float y = ((chatMessageCell.getY() + photoImage.getImageY()) + ChatActivity.this.chatListView.getY()) - ChatActivity.this.videoPlayerContainer.getTop();
                        if (ChatActivity.this.videoPlayerContainer.getTranslationX() != imageX || ChatActivity.this.videoPlayerContainer.getTranslationY() != y) {
                            ChatActivity.this.videoPlayerContainer.setTranslationX(imageX);
                            ChatActivity.this.videoPlayerContainer.setTranslationY(y);
                            ChatActivity.this.fragmentView.invalidate();
                            ChatActivity.this.videoPlayerContainer.invalidate();
                        }
                    }
                }
                ImageReceiver avatarImage = chatMessageCell.getAvatarImage();
                if (avatarImage != null) {
                    MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                    boolean z7 = (chatMessageCell.getMessageObject().deleted || ChatActivity.this.chatListView.getChildAdapterPosition(chatMessageCell) == -1) ? false : true;
                    boolean z8 = ChatActivity.this.chatListView.isFastScrollAnimationRunning() || (validGroupedMessage != null && validGroupedMessage.transitionParams.backgroundChangeBounds);
                    int top = z8 ? view.getTop() : (int) view.getY();
                    if (chatMessageCell.drawPinnedBottom()) {
                        if (chatMessageCell.willRemovedAfterAnimation()) {
                            adapterPosition2 = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                            if (adapterPosition2 >= 0) {
                                adapterPosition2 = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(adapterPosition2);
                            }
                        } else {
                            adapterPosition2 = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                        }
                        if (adapterPosition2 >= 0) {
                            if (validGroupedMessage == null || currentPosition2 == null) {
                                i4 = adapterPosition2 - 1;
                            } else {
                                int indexOf = validGroupedMessage.posArray.indexOf(currentPosition2);
                                int size = validGroupedMessage.posArray.size();
                                if ((currentPosition2.flags & 8) != 0) {
                                    i4 = (adapterPosition2 - size) + indexOf;
                                } else {
                                    i4 = adapterPosition2 - 1;
                                    for (int i10 = indexOf + 1; i10 < size && validGroupedMessage.posArray.get(i10).minY <= currentPosition2.maxY; i10++) {
                                        i4--;
                                    }
                                }
                            }
                            if (chatMessageCell.willRemovedAfterAnimation()) {
                                if (((View) ChatActivity.this.chatScrollHelper.positionToOldView.get(i4)) != null) {
                                    if (view.getTranslationY() != 0.0f) {
                                        canvas.restore();
                                    }
                                    avatarImage.setVisible(false, false);
                                    return z;
                                }
                            } else if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i4) != null) {
                                if (view.getTranslationY() != 0.0f) {
                                    canvas.restore();
                                }
                                avatarImage.setVisible(false, false);
                                return z;
                            }
                        }
                    }
                    float slidingOffsetX = chatMessageCell.getSlidingOffsetX() + chatMessageCell.getCheckBoxTranslation();
                    int top2 = (int) ((z8 ? view.getTop() : view.getY()) + chatMessageCell.getLayoutHeight() + chatMessageCell.getTransitionParams().deltaBottom);
                    int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                    boolean z9 = chatMessageCell.isCheckBoxVisible() && slidingOffsetX == 0.0f;
                    if (chatMessageCell.isPlayingRound() || chatMessageCell.getTransitionParams().animatePlayingRound) {
                        if (chatMessageCell.getTransitionParams().animatePlayingRound) {
                            float f3 = chatMessageCell.getTransitionParams().animateChangeProgress;
                            if (!chatMessageCell.isPlayingRound()) {
                                f3 = 1.0f - f3;
                            }
                            top2 = (int) ((top2 * f3) + (Math.min(top2, measuredHeight) * (1.0f - f3)));
                        }
                    } else if (top2 > measuredHeight) {
                        top2 = measuredHeight;
                    }
                    if (!z8 && view.getTranslationY() != 0.0f) {
                        canvas.restore();
                    }
                    if (chatMessageCell.drawPinnedTop()) {
                        if (chatMessageCell.willRemovedAfterAnimation()) {
                            adapterPosition = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                            if (adapterPosition >= 0) {
                                adapterPosition = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(adapterPosition);
                            }
                        } else {
                            adapterPosition = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                        }
                        if (adapterPosition >= 0) {
                            int i11 = top;
                            int i12 = adapterPosition;
                            int i13 = 0;
                            ChatMessageCell chatMessageCell3 = chatMessageCell;
                            float f4 = slidingOffsetX;
                            while (i13 < 20) {
                                i13++;
                                if (validGroupedMessage == null || currentPosition2 == null) {
                                    groupedMessages = validGroupedMessage;
                                    i3 = i12 + 1;
                                } else {
                                    int indexOf2 = validGroupedMessage.posArray.indexOf(currentPosition2);
                                    if (indexOf2 < 0) {
                                        break;
                                    }
                                    validGroupedMessage.posArray.size();
                                    if ((currentPosition2.flags & 4) != 0) {
                                        i3 = i12 + indexOf2 + 1;
                                    } else {
                                        i3 = i12 + 1;
                                        int i14 = indexOf2 - 1;
                                        while (i14 >= 0) {
                                            groupedMessages = validGroupedMessage;
                                            if (validGroupedMessage.posArray.get(i14).maxY < currentPosition2.minY) {
                                                break;
                                            }
                                            i3++;
                                            i14--;
                                            validGroupedMessage = groupedMessages;
                                        }
                                    }
                                    groupedMessages = validGroupedMessage;
                                }
                                int i15 = i3;
                                if (!chatMessageCell3.willRemovedAfterAnimation()) {
                                    RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i15);
                                    if (findViewHolderForAdapterPosition == null) {
                                        break;
                                    }
                                    i11 = findViewHolderForAdapterPosition.itemView.getTop();
                                    View view2 = findViewHolderForAdapterPosition.itemView;
                                    if (!(view2 instanceof ChatMessageCell)) {
                                        break;
                                    }
                                    chatMessageCell3 = (ChatMessageCell) view2;
                                    float slidingOffsetX2 = chatMessageCell3.getSlidingOffsetX() + chatMessageCell3.getCheckBoxTranslation();
                                    if (z9 && slidingOffsetX2 > 0.0f) {
                                        f4 = slidingOffsetX2;
                                    }
                                    if (!chatMessageCell3.drawPinnedTop()) {
                                        break;
                                    }
                                    i12 = i15;
                                    validGroupedMessage = groupedMessages;
                                } else {
                                    View view3 = (View) ChatActivity.this.chatScrollHelper.positionToOldView.get(i15);
                                    if (view3 == null) {
                                        break;
                                    }
                                    i11 = view3.getTop();
                                    if (!(view3 instanceof ChatMessageCell)) {
                                        break;
                                    }
                                    chatMessageCell3 = (ChatMessageCell) view3;
                                    float slidingOffsetX3 = chatMessageCell3.getSlidingOffsetX() + chatMessageCell3.getCheckBoxTranslation();
                                    if (z9 && slidingOffsetX3 > 0.0f) {
                                        f4 = slidingOffsetX3;
                                    }
                                    if (!chatMessageCell3.drawPinnedTop()) {
                                        break;
                                    }
                                    i12 = i15;
                                    validGroupedMessage = groupedMessages;
                                }
                                if (top2 - AndroidUtilities.dp(48.0f) < top) {
                                    top2 = top + AndroidUtilities.dp(48.0f);
                                }
                                if (!chatMessageCell.drawPinnedBottom()) {
                                    int bottom = z8 ? chatMessageCell.getBottom() : (int) (chatMessageCell.getY() + chatMessageCell.getMeasuredHeight() + chatMessageCell.getTransitionParams().deltaBottom);
                                    if (top2 > bottom) {
                                        top2 = bottom;
                                    }
                                }
                                canvas.save();
                                if (f2 != 0.0f) {
                                    canvas.translate(f2, 0.0f);
                                }
                                if (chatMessageCell.getCurrentMessagesGroup() != null && chatMessageCell.getCurrentMessagesGroup().transitionParams.backgroundChangeBounds) {
                                    top2 = (int) (top2 - chatMessageCell.getTranslationY());
                                }
                                if (z7) {
                                    avatarImage.setImageY(top2 - AndroidUtilities.dp(44.0f));
                                }
                                if (chatMessageCell.shouldDrawAlphaLayer()) {
                                    avatarImage.setAlpha(chatMessageCell.getAlpha());
                                    z2 = true;
                                    canvas.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getX() + chatMessageCell.getPivotX(), chatMessageCell.getY() + (chatMessageCell.getHeight() >> 1));
                                } else {
                                    z2 = true;
                                    avatarImage.setAlpha(1.0f);
                                }
                                if (z7) {
                                    avatarImage.setVisible(z2, false);
                                }
                                avatarImage.draw(canvas);
                                canvas.restore();
                                if (!z8) {
                                    f = 0.0f;
                                    if (view.getTranslationY() != 0.0f) {
                                        canvas.save();
                                    }
                                    if (view.getTranslationY() != f) {
                                        canvas.restore();
                                    }
                                    return z;
                                }
                            }
                            f2 = f4;
                            chatMessageCell = chatMessageCell3;
                            top = i11;
                            if (top2 - AndroidUtilities.dp(48.0f) < top) {
                            }
                            if (!chatMessageCell.drawPinnedBottom()) {
                            }
                            canvas.save();
                            if (f2 != 0.0f) {
                            }
                            if (chatMessageCell.getCurrentMessagesGroup() != null) {
                                top2 = (int) (top2 - chatMessageCell.getTranslationY());
                            }
                            if (z7) {
                            }
                            if (chatMessageCell.shouldDrawAlphaLayer()) {
                            }
                            if (z7) {
                            }
                            avatarImage.draw(canvas);
                            canvas.restore();
                            if (!z8) {
                            }
                        }
                    }
                    f2 = slidingOffsetX;
                    if (top2 - AndroidUtilities.dp(48.0f) < top) {
                    }
                    if (!chatMessageCell.drawPinnedBottom()) {
                    }
                    canvas.save();
                    if (f2 != 0.0f) {
                    }
                    if (chatMessageCell.getCurrentMessagesGroup() != null) {
                    }
                    if (z7) {
                    }
                    if (chatMessageCell.shouldDrawAlphaLayer()) {
                    }
                    if (z7) {
                    }
                    avatarImage.draw(canvas);
                    canvas.restore();
                    if (!z8) {
                    }
                }
            }
            f = 0.0f;
            if (view.getTranslationY() != f) {
            }
            return z;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            ChatActivity.this.chatListViewAttached = true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView
        public void onChildPressed(View view, float f, float f2, boolean z) {
            MessageObject.GroupedMessages currentMessagesGroup;
            super.onChildPressed(view, f, f2, z);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.isMusic() || messageObject.isDocument() || (currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup()) == null) {
                    return;
                }
                int childCount = getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = getChildAt(i);
                    if (childAt != view && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                            chatMessageCell2.setPressed(z);
                        }
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            ChatActivity.this.chatListViewAttached = false;
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            float f;
            super.onDraw(canvas);
            if (ChatActivity.this.slidingView != null) {
                float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                if (!ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && this.endTrackingX != 0.0f && slidingOffsetX != 0.0f) {
                    long currentTimeMillis = System.currentTimeMillis();
                    float f2 = this.trackAnimationProgress + (((float) (currentTimeMillis - this.lastTrackingAnimationTime)) / 180.0f);
                    this.trackAnimationProgress = f2;
                    if (f2 > 1.0f) {
                        this.trackAnimationProgress = 1.0f;
                    }
                    this.lastTrackingAnimationTime = currentTimeMillis;
                    float interpolation = this.endTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                    if (interpolation == 0.0f) {
                        this.endTrackingX = 0.0f;
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, interpolation);
                    ChatActivity.this.slidingView.setSlidingOffset(interpolation);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false, false);
                    }
                    float f3 = this.trackAnimationProgress;
                    if (f3 == 1.0f || f3 == 0.0f) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    invalidate();
                }
                drawReplyButton(canvas);
            }
            if (ChatActivity.this.pullingDownOffset != 0.0f && !ChatActivity.this.isInPreviewMode()) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.isInsideContainer && chatActivity.chatMode != 3) {
                    canvas.save();
                    if (ChatActivity.this.pullingDownAnimateProgress != 0.0f) {
                        f = ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) + (ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset)) * ChatActivity.this.pullingDownAnimateProgress;
                    } else {
                        f = 0.0f;
                    }
                    canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset) - f);
                    if (ChatActivity.this.pullingDownDrawable == null) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        int i = ((BaseFragment) chatActivity2).currentAccount;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        View view = chatActivity3.fragmentView;
                        long j = chatActivity3.dialog_id;
                        ChatActivity chatActivity4 = ChatActivity.this;
                        chatActivity2.pullingDownDrawable = new ChatPullingDownDrawable(i, view, j, chatActivity4.dialogFolderId, chatActivity4.dialogFilterId, chatActivity4.getTopicId(), ChatActivity.this.themeDelegate);
                        if (ChatActivity.this.nextChannels == null || ChatActivity.this.nextChannels.isEmpty()) {
                            ChatActivity chatActivity5 = ChatActivity.this;
                            boolean z = chatActivity5.isTopic;
                            ChatPullingDownDrawable chatPullingDownDrawable = chatActivity5.pullingDownDrawable;
                            if (z) {
                                chatPullingDownDrawable.updateTopic();
                            } else {
                                chatPullingDownDrawable.updateDialog();
                            }
                        } else {
                            ChatActivity.this.pullingDownDrawable.updateDialog((TLRPC.Chat) ChatActivity.this.nextChannels.get(0));
                        }
                        ChatActivity.this.pullingDownDrawable.onAttach();
                    }
                    ChatActivity.this.pullingDownDrawable.setWidth(getMeasuredWidth());
                    ChatActivity.this.pullingDownDrawable.draw(canvas, ChatActivity.this.chatListView, Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f)), 1.0f - ChatActivity.this.pullingDownAnimateProgress);
                    canvas.restore();
                    if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                        canvas.saveLayerAlpha(0.0f, 0.0f, ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredWidth(), ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                        canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.pullingDownOffset) - f);
                        ChatActivity.this.pullingDownAnimateToActivity.chatListView.draw(canvas);
                        canvas.restore();
                        return;
                    }
                    return;
                }
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.reset();
            }
        }

        @Override // android.view.View
        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return;
            }
            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
            AccessibilityNodeInfo.CollectionInfo collectionInfo = accessibilityNodeInfo.getCollectionInfo();
            if (collectionInfo != null) {
                accessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo.obtain(collectionInfo.getRowCount(), 1, false));
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onInterceptTouchEvent = super.onInterceptTouchEvent(motionEvent);
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && !ChatActivity.this.isReport()) {
                processTouchEvent(motionEvent);
            }
            return onInterceptTouchEvent;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            int i5 = i3 - i;
            if (this.lastWidth != i5) {
                this.lastWidth = i5;
                ChatActivity.this.hideHints(false);
            }
            int measuredHeight = getMeasuredHeight();
            if (this.lastH != measuredHeight) {
                this.ignoreLayout = true;
                if (ChatActivity.this.chatListItemAnimator != null) {
                    ChatActivity.this.chatListItemAnimator.endAnimations();
                }
                ChatActivity.this.chatScrollHelper.cancel();
                this.ignoreLayout = false;
                this.lastH = measuredHeight;
            }
            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.textSelectionHelper != null && ChatActivity.this.textSelectionHelper.isInSelectionMode()) {
                ChatActivity.this.textSelectionHelper.invalidate();
            }
            ChatActivity.this.isSkeletonVisible();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (motionEvent.getAction() == 0) {
                ChatActivity.this.scrollByTouch = true;
            }
            if (ChatActivity.this.pullingDownOffset != 0.0f && (motionEvent.getAction() == 1 || motionEvent.getAction() == 3)) {
                float min = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f));
                if (motionEvent.getAction() != 1 || min != 1.0f || ChatActivity.this.pullingDownDrawable == null || ChatActivity.this.pullingDownDrawable.emptyStub) {
                    if (ChatActivity.this.pullingDownDrawable == null || !ChatActivity.this.pullingDownDrawable.emptyStub || System.currentTimeMillis() - ChatActivity.this.pullingDownDrawable.lastShowingReleaseTime >= 500 || !ChatActivity.this.pullingDownDrawable.animateSwipeToRelease) {
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, 0.0f);
                        ChatActivity.this.pullingDownBackAnimator = ofFloat;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda4
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.17.this.lambda$onTouchEvent$7(valueAnimator);
                            }
                        });
                        ofFloat.setDuration(250L);
                        ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        ofFloat.start();
                    } else {
                        AnimatorSet animatorSet = new AnimatorSet();
                        ChatActivity.this.pullingDownBackAnimator = animatorSet;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, AndroidUtilities.dp(111.0f));
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda2
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.17.this.lambda$onTouchEvent$5(valueAnimator);
                            }
                        });
                        ofFloat2.setDuration(400L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(AndroidUtilities.dp(111.0f), 0.0f);
                        ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda3
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.17.this.lambda$onTouchEvent$6(valueAnimator);
                            }
                        });
                        ofFloat3.setStartDelay(600L);
                        ofFloat3.setDuration(250L);
                        ofFloat3.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animatorSet.playSequentially(ofFloat2, ofFloat3);
                        animatorSet.start();
                    }
                } else if (ChatActivity.this.pullingDownDrawable.animationIsRunning()) {
                    ValueAnimator ofFloat4 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, ChatActivity.this.pullingDownOffset + AndroidUtilities.dp(8.0f));
                    ChatActivity.this.pullingDownBackAnimator = ofFloat4;
                    ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.17.this.lambda$onTouchEvent$3(valueAnimator);
                        }
                    });
                    ofFloat4.setDuration(200L);
                    ofFloat4.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    ofFloat4.start();
                    ChatActivity.this.pullingDownDrawable.runOnAnimationFinish(new Runnable() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.17.this.lambda$onTouchEvent$4();
                        }
                    });
                } else {
                    ChatActivity.this.animateToNextChat();
                }
            }
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onTouchEvent = super.onTouchEvent(motionEvent);
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                return onTouchEvent;
            }
            processTouchEvent(motionEvent);
            return ChatActivity.this.startedTrackingSlidingView || onTouchEvent;
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean z) {
            if (ChatActivity.this.scrimPopupWindow != null) {
                return false;
            }
            return super.requestChildRectangleOnScreen(view, rect, z);
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public void requestDisallowInterceptTouchEvent(boolean z) {
            super.requestDisallowInterceptTouchEvent(z);
            if (ChatActivity.this.slidingView != null) {
                processTouchEvent(null);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // androidx.recyclerview.widget.RecyclerView
        public void setItemAnimator(RecyclerView.ItemAnimator itemAnimator) {
            if (isFastScrollAnimationRunning()) {
                return;
            }
            super.setItemAnimator(itemAnimator);
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.View
        public void setTranslationY(float f) {
            BotCommandsMenuContainer botCommandsMenuContainer;
            FrameLayout frameLayout;
            float f2;
            if (f != getTranslationY()) {
                super.setTranslationY(f);
                if (ChatActivity.this.emptyViewContainer != null) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null || !chatActivityEnterView.panelAnimationInProgress()) {
                        frameLayout = ChatActivity.this.emptyViewContainer;
                        f2 = 1.7f;
                    } else {
                        frameLayout = ChatActivity.this.emptyViewContainer;
                        f2 = 2.0f;
                    }
                    frameLayout.setTranslationY(f / f2);
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && (botCommandsMenuContainer = chatActivityEnterView2.botCommandsMenuContainer) != null) {
                    botCommandsMenuContainer.setTranslationY(f);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 18 extends ChatListItemAnimator {
        Runnable finishRunnable;

        18(ChatActivity chatActivity, RecyclerListView recyclerListView, Theme.ResourcesProvider resourcesProvider) {
            super(chatActivity, recyclerListView, resourcesProvider);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$endAnimations$1() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAllAnimationsDone$0() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }

        @Override // androidx.recyclerview.widget.DefaultItemAnimator
        public void checkIsRunning() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator, androidx.recyclerview.widget.RecyclerView.ItemAnimator
        public void endAnimations() {
            super.endAnimations();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.18.this.lambda$endAnimations$1();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator
        protected void onAllAnimationsDone() {
            super.onAllAnimationsDone();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.18.this.lambda$onAllAnimationsDone$0();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator
        public void onAnimationStart() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator disable notifications");
            }
            ChatActivity.this.chatActivityEnterView.getAdjustPanLayoutHelper().runDelayedAnimation();
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 19 extends GridLayoutManagerFixed {
        boolean computingScroll;

        19(Context context, int i, int i2, boolean z) {
            super(context, i, i2, z);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLayoutChildren$0() {
            ChatActivity.this.chatAdapter.notifyDataSetChanged(false);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollExtent(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollExtent = super.computeVerticalScrollExtent(state);
            this.computingScroll = false;
            return computeVerticalScrollExtent;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollOffset(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollOffset = super.computeVerticalScrollOffset(state);
            this.computingScroll = false;
            return computeVerticalScrollOffset;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollRange(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollRange = super.computeVerticalScrollRange(state);
            this.computingScroll = false;
            return computeVerticalScrollRange;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        protected int getParentStart() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return 0;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getStartAfterPadding() {
            return this.computingScroll ? (int) ChatActivity.this.chatListViewPaddingTop : super.getStartAfterPadding();
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public int getStartForFixGap() {
            return (int) ChatActivity.this.chatListViewPaddingTop;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getTotalSpace() {
            return this.computingScroll ? (int) ((getHeight() - ChatActivity.this.chatListViewPaddingTop) - getPaddingBottom()) : super.getTotalSpace();
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        protected boolean hasSiblingChild(int i) {
            int i2;
            MessageObject messageObject;
            MessageObject.GroupedMessages validGroupedMessage;
            byte b;
            if (i >= ChatActivity.this.chatAdapter.messagesStartRow && i < ChatActivity.this.chatAdapter.messagesEndRow && (i2 = i - ChatActivity.this.chatAdapter.messagesStartRow) >= 0 && i2 < ChatActivity.this.chatAdapter.getMessages().size() && (validGroupedMessage = ChatActivity.this.getValidGroupedMessage((messageObject = (MessageObject) ChatActivity.this.chatAdapter.getMessages().get(i2)))) != null) {
                MessageObject.GroupedMessagePosition position = validGroupedMessage.getPosition(messageObject);
                if (position.minX != position.maxX && (b = position.minY) == position.maxY && b != 0) {
                    int size = validGroupedMessage.posArray.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.posArray.get(i3);
                        if (groupedMessagePosition != position) {
                            byte b2 = groupedMessagePosition.minY;
                            byte b3 = position.minY;
                            if (b2 <= b3 && groupedMessagePosition.maxY >= b3) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                super.onLayoutChildren(recycler, state);
                return;
            }
            try {
                super.onLayoutChildren(recycler, state);
            } catch (Exception e) {
                FileLog.e(e);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$19$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.19.this.lambda$onLayoutChildren$0();
                    }
                });
            }
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollHorizontallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                FileLog.e("scrollHorizontallyBy " + i, new Exception());
            }
            return super.scrollHorizontallyBy(i, recycler, state);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void scrollToPosition(int i) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                FileLog.e("scrollToPosition " + i, new Exception());
            }
            super.scrollToPosition(i);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int i, int i2) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                FileLog.e("scrollToPositionWithOffset " + i + " " + i2, new Exception());
            }
            super.scrollToPositionWithOffset(i, i2);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int i, int i2, boolean z) {
            if (!z) {
                i2 = (int) ((i2 - getPaddingTop()) + ChatActivity.this.chatListViewPaddingTop);
            }
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                FileLog.e("scrollToPositionWithOffset " + i + " " + i2 + " " + z, new Exception());
            }
            super.scrollToPositionWithOffset(i, i2, z);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollVerticallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
            int i2;
            boolean z;
            float f;
            float f2;
            float f3;
            boolean z2 = false;
            if (i < 0 && ChatActivity.this.pullingDownOffset != 0.0f) {
                ChatActivity.access$15016(ChatActivity.this, i);
                if (ChatActivity.this.pullingDownOffset < 0.0f) {
                    i = (int) ChatActivity.this.pullingDownOffset;
                    ChatActivity.this.pullingDownOffset = 0.0f;
                    ChatActivity.this.chatListView.invalidate();
                } else {
                    i = 0;
                }
            }
            int childCount = ChatActivity.this.chatListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    i2 = 0;
                    z = false;
                    break;
                }
                View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                ChatActivity chatActivity = ChatActivity.this;
                float f4 = chatActivity.chatListViewPaddingTop;
                int childAdapterPosition = chatActivity.chatListView.getChildAdapterPosition(childAt);
                ChatActivity chatActivity2 = ChatActivity.this;
                if (childAdapterPosition == (chatActivity2.reversed ? 0 : chatActivity2.chatAdapter.getItemCount() - 1)) {
                    i2 = super.scrollVerticallyBy(((float) (childAt.getTop() - i)) > f4 ? (int) (childAt.getTop() - f4) : i, recycler, state);
                    z = true;
                } else {
                    i3++;
                }
            }
            if (!z) {
                i2 = super.scrollVerticallyBy(i, recycler, state);
            }
            if (i > 0 && i2 == 0 && (((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || ChatActivity.this.isTopic) && ChatActivity.this.chatMode != 3 && ChatActivity.this.chatListView.getScrollState() == 1 && !ChatActivity.this.chatListView.isFastScrollAnimationRunning() && !ChatActivity.this.chatListView.isMultiselect() && !ChatActivity.this.isReport())) {
                if (ChatActivity.this.pullingDownOffset == 0.0f && ChatActivity.this.pullingDownDrawable != null) {
                    if (ChatActivity.this.nextChannels == null || ChatActivity.this.nextChannels.isEmpty()) {
                        ChatActivity chatActivity3 = ChatActivity.this;
                        boolean z3 = chatActivity3.isTopic;
                        ChatPullingDownDrawable chatPullingDownDrawable = chatActivity3.pullingDownDrawable;
                        if (z3) {
                            chatPullingDownDrawable.updateTopic();
                        } else {
                            chatPullingDownDrawable.updateDialog();
                        }
                    } else {
                        ChatActivity.this.pullingDownDrawable.updateDialog((TLRPC.Chat) ChatActivity.this.nextChannels.get(0));
                    }
                }
                if (ChatActivity.this.pullingDownBackAnimator != null) {
                    ChatActivity.this.pullingDownBackAnimator.removeAllListeners();
                    ChatActivity.this.pullingDownBackAnimator.cancel();
                }
                if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(110.0f)) {
                    float dp = ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f);
                    f2 = (1.0f - dp) * 0.65f;
                    f3 = dp * 0.45f;
                } else if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(160.0f)) {
                    float dp2 = (ChatActivity.this.pullingDownOffset - AndroidUtilities.dp(110.0f)) / AndroidUtilities.dp(50.0f);
                    f2 = (1.0f - dp2) * 0.45f;
                    f3 = dp2 * 0.05f;
                } else {
                    f = 0.05f;
                    float f5 = i * f;
                    ChatActivity.access$15016(ChatActivity.this, f5);
                    ReactionsEffectOverlay.onScrolled((int) f5);
                    ChatActivity.this.chatListView.invalidate();
                }
                f = f2 + f3;
                float f52 = i * f;
                ChatActivity.access$15016(ChatActivity.this, f52);
                ReactionsEffectOverlay.onScrolled((int) f52);
                ChatActivity.this.chatListView.invalidate();
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f) {
                ChatActivity.this.chatListView.setOverScrollMode(0);
            } else {
                ChatActivity.this.chatListView.setOverScrollMode(2);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatPullingDownDrawable chatPullingDownDrawable2 = ChatActivity.this.pullingDownDrawable;
                if (ChatActivity.this.pullingDownOffset > 0.0f && ChatActivity.this.chatListView.getScrollState() == 1) {
                    z2 = true;
                }
                chatPullingDownDrawable2.showBottomPanel(z2);
            }
            return i2;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        public boolean shouldLayoutChildFromOpositeSide(View view) {
            if (view instanceof ChatMessageCell) {
                return !((ChatMessageCell) view).getMessageObject().isOutOwner();
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i) {
            ChatActivity.this.scrollByTouch = false;
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                FileLog.e("smoothScrollToPosition " + i, new Exception());
            }
            LinearSmoothScrollerCustom linearSmoothScrollerCustom = new LinearSmoothScrollerCustom(recyclerView.getContext(), 0);
            linearSmoothScrollerCustom.setTargetPosition(i);
            startSmoothScroll(linearSmoothScrollerCustom);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public boolean supportsPredictiveItemAnimations() {
            return true;
        }
    }

    /* loaded from: classes4.dex */
    class 22 extends RecyclerView.OnScrollListener {
        private boolean scrollUp;
        private float totalDy = 0.0f;
        private final int scrollValue = AndroidUtilities.dp(100.0f);

        22() {
        }

        /* JADX WARN: Removed duplicated region for block: B:31:0x00fc  */
        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onScrollStateChanged(RecyclerView recyclerView, int i) {
            if (i == 0) {
                if (ChatActivity.this.pollHintCell != null) {
                    ChatActivity.this.pollHintView.showForMessageCell(ChatActivity.this.pollHintCell, -1, ChatActivity.this.pollHintX, ChatActivity.this.pollHintY, true);
                    ChatActivity.this.pollHintCell = null;
                }
                ChatActivity.this.scrollingFloatingDate = false;
                ChatActivity.this.scrollingChatListView = false;
                ChatActivity.this.checkTextureViewPosition = false;
                ChatActivity.this.hideFloatingDateView(true);
                if (SharedConfig.getDevicePerformanceClass() == 0) {
                    ChatActivity.scrolling = true;
                    NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startAllHeavyOperations, 512);
                }
                NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startSpoilers, new Object[0]);
                ChatActivity.this.chatListView.setOverScrollMode(0);
                ChatActivity.this.textSelectionHelper.stopScrolling();
                ChatActivity.this.updateVisibleRows();
                ChatActivity.this.scrollByTouch = false;
                return;
            }
            if (ChatActivity.this.groupEmojiPackHint != null && ChatActivity.this.groupEmojiPackHint.shown()) {
                ChatActivity.this.groupEmojiPackHint.hide();
            }
            if (ChatActivity.this.searchOtherButton != null && ChatActivity.this.searchOtherButton.getVisibility() == 0 && ChatActivity.this.isKeyboardVisible()) {
                AndroidUtilities.hideKeyboard(ChatActivity.this.getParentActivity().getCurrentFocus());
            }
            if (i != 2) {
                if (i == 1) {
                    ChatActivity.this.pollHintCell = null;
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivity.this.scrollingFloatingDate = true;
                    ChatActivity.this.checkTextureViewPosition = true;
                }
                if (SharedConfig.getDevicePerformanceClass() == 0) {
                    ChatActivity.scrolling = false;
                    NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopAllHeavyOperations, 512);
                }
                NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopSpoilers, new Object[0]);
                if (ChatActivity.this.selectionReactionsOverlay == null && ChatActivity.this.selectionReactionsOverlay.isVisible()) {
                    ChatActivity.this.selectionReactionsOverlay.setHiddenByScroll(true);
                    return;
                }
            }
            ChatActivity.this.wasManualScroll = true;
            ChatActivity.this.scrollingChatListView = true;
            if (SharedConfig.getDevicePerformanceClass() == 0) {
            }
            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopSpoilers, new Object[0]);
            if (ChatActivity.this.selectionReactionsOverlay == null) {
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:47:0x00bf, code lost:
            if (r4.getId() < r7.this$0.forceNextPinnedMessageId) goto L47;
         */
        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onScrolled(RecyclerView recyclerView, int i, int i2) {
            boolean z;
            ChatActivity.this.chatListView.invalidate();
            ChatActivityFragmentView chatActivityFragmentView = ChatActivity.this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.updateBlurContent();
            }
            if (ChatActivity.this.chatListThanosEffect != null) {
                ChatActivity.this.chatListThanosEffect.scroll(i, i2);
            }
            this.scrollUp = i2 < 0;
            int findFirstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
            if (((i2 != 0 && ChatActivity.this.scrollByTouch && recyclerView.getScrollState() == 2) || recyclerView.getScrollState() == 1) && ChatActivity.this.forceNextPinnedMessageId != 0) {
                if (this.scrollUp && !ChatActivity.this.forceScrollToFirst) {
                    if (!ChatActivity.this.chatListView.isFastScrollAnimationRunning() && findFirstVisibleItemPosition != -1) {
                        int findLastVisibleItemPosition = ChatActivity.this.chatLayoutManager.findLastVisibleItemPosition();
                        MessageObject messageObject = null;
                        while (true) {
                            if (findLastVisibleItemPosition < findFirstVisibleItemPosition) {
                                z = false;
                                break;
                            }
                            View findViewByPosition = ChatActivity.this.chatLayoutManager.findViewByPosition(findLastVisibleItemPosition);
                            if (findViewByPosition instanceof ChatMessageCell) {
                                messageObject = ((ChatMessageCell) findViewByPosition).getMessageObject();
                            } else if (findViewByPosition instanceof ChatActionCell) {
                                messageObject = ((ChatActionCell) findViewByPosition).getMessageObject();
                            }
                            if (messageObject != null && ChatActivity.this.forceNextPinnedMessageId == messageObject.getId()) {
                                z = true;
                                break;
                            }
                            findLastVisibleItemPosition--;
                        }
                        if (!z) {
                            if (messageObject != null) {
                            }
                        }
                    }
                }
                ChatActivity.this.forceNextPinnedMessageId = 0;
            }
            if (recyclerView.getScrollState() == 1) {
                ChatActivity.this.forceScrollToFirst = false;
                if (!ChatActivity.this.wasManualScroll && i2 != 0) {
                    ChatActivity.this.wasManualScroll = true;
                }
            }
            if (i2 != 0) {
                ChatActivity.this.contentView.invalidateBlur();
                ChatActivity.this.hideHints(true);
            }
            if (i2 != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                    chatActivity.removeSelectedMessageHighlight();
                    ChatActivity.this.updateVisibleRows();
                }
                ChatActivity.this.showFloatingDateView(true);
            }
            ChatActivity.this.checkScrollForLoad(true);
            if (findFirstVisibleItemPosition != -1) {
                ChatActivity.this.chatAdapter.getItemCount();
                if (findFirstVisibleItemPosition != 0 || !ChatActivity.this.forwardEndReached[0]) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    if (i2 > 0) {
                        if (chatActivity2.pagedownButton.getTag() == null) {
                            float f = this.totalDy + i2;
                            this.totalDy = f;
                            if (f > this.scrollValue) {
                                this.totalDy = 0.0f;
                                ChatActivity.this.canShowPagedownButton = true;
                                ChatActivity.this.updatePagedownButtonVisibility(true);
                                ChatActivity.this.pagedownButtonShowedByScroll = true;
                            }
                        }
                    } else if (chatActivity2.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                        float f2 = this.totalDy + i2;
                        this.totalDy = f2;
                        if (f2 < (-this.scrollValue)) {
                            ChatActivity.this.canShowPagedownButton = false;
                            ChatActivity.this.updatePagedownButtonVisibility(true);
                            this.totalDy = 0.0f;
                        }
                    }
                } else if (i2 >= 0) {
                    ChatActivity.this.canShowPagedownButton = false;
                    ChatActivity.this.updatePagedownButtonVisibility(true);
                }
            }
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.textSelectionHelper.onParentScrolled();
            ChatActivity.this.emojiAnimationsOverlay.onScrolled(i2);
            ReactionsEffectOverlay.onScrolled(i2);
            ChatActivity.this.checkTranslation(false);
            if (ChatActivity.this.savedMessagesTagHint != null) {
                if (ChatActivity.this.savedMessagesTagHint.shown()) {
                    ChatActivity.this.savedMessagesTagHint.hide();
                } else if (!ChatActivity.this.savedMessagesTagHintShown) {
                    ChatActivity.this.lastScrollTime = System.currentTimeMillis();
                    final ChatActivity chatActivity3 = ChatActivity.this;
                    AndroidUtilities.cancelRunOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.access$22500(ChatActivity.this);
                        }
                    });
                    final ChatActivity chatActivity4 = ChatActivity.this;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.access$22500(ChatActivity.this);
                        }
                    }, 2000L);
                }
            }
            if (ChatActivity.this.botMessageHint == null || !ChatActivity.this.botMessageHint.shown()) {
                final ChatActivity chatActivity5 = ChatActivity.this;
                AndroidUtilities.cancelRunOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$22400(ChatActivity.this);
                    }
                });
                final ChatActivity chatActivity6 = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$22400(ChatActivity.this);
                    }
                }, 2000L);
            } else {
                ChatActivity.this.botMessageHint.hide();
            }
            if (ChatActivity.this.factCheckHint != null) {
                ChatActivity.this.factCheckHint.hide();
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.hideHints();
            }
            if (ChatActivity.this.starReactionsOverlay != null) {
                ChatActivity.this.starReactionsOverlay.invalidate();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 27 implements View.OnClickListener {
        27() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$0(int i) {
            if (i != 0) {
                ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
                return;
            }
            ChatActivity.this.hasAllMentionsLocal = false;
            loadLastUnreadMention();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$1(TLObject tLObject, TLRPC.TL_error tL_error, MessagesStorage messagesStorage) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
            if (tL_error == null && !messages_messages.messages.isEmpty()) {
                int i = messages_messages.messages.get(0).id;
                MessageObject messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(i);
                messagesStorage.markMessageAsMention(ChatActivity.this.dialog_id, i);
                if (messageObject != null) {
                    TLRPC.Message message = messageObject.messageOwner;
                    message.media_unread = true;
                    message.mentioned = true;
                }
                ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
                return;
            }
            if (messages_messages != null) {
                ChatActivity.this.newMentionsCount = messages_messages.count;
            } else {
                ChatActivity.this.newMentionsCount = 0;
            }
            messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.newMentionsCount);
            if (ChatActivity.this.newMentionsCount == 0) {
                ChatActivity.this.hasAllMentionsLocal = true;
                ChatActivity.this.showMentionDownButton(false, true);
                return;
            }
            ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
            loadLastUnreadMention();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$2(final MessagesStorage messagesStorage, final TLObject tLObject, final TLRPC.TL_error tL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$27$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.27.this.lambda$loadLastUnreadMention$1(tLObject, tL_error, messagesStorage);
                }
            });
        }

        private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
                ChatActivity.this.getMessagesStorage().getUnreadMention(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$27$$ExternalSyntheticLambda0
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i) {
                        ChatActivity.27.this.lambda$loadLastUnreadMention$0(i);
                    }
                });
                return;
            }
            final MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
            TLRPC.TL_messages_getUnreadMentions tL_messages_getUnreadMentions = new TLRPC.TL_messages_getUnreadMentions();
            tL_messages_getUnreadMentions.peer = ChatActivity.this.getMessagesController().getInputPeer(ChatActivity.this.dialog_id);
            tL_messages_getUnreadMentions.limit = 1;
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.isTopic) {
                tL_messages_getUnreadMentions.top_msg_id = (int) chatActivity.threadMessageId;
                tL_messages_getUnreadMentions.flags |= 1;
            }
            tL_messages_getUnreadMentions.add_offset = ChatActivity.this.newMentionsCount - 1;
            ChatActivity.this.getConnectionsManager().sendRequest(tL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$27$$ExternalSyntheticLambda1
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.27.this.lambda$loadLastUnreadMention$2(messagesStorage, tLObject, tL_error);
                }
            });
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            loadLastUnreadMention();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 40 extends ChatActivityEnterView {
        int lastContentViewHeight;
        int messageEditTextPredrawHeigth;
        int messageEditTextPredrawScrollY;

        40(Activity activity, SizeNotifierFrameLayout sizeNotifierFrameLayout, ChatActivity chatActivity, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(activity, sizeNotifierFrameLayout, chatActivity, z, resourcesProvider);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$0(ValueAnimator valueAnimator) {
            float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            this.animatedTop = (int) floatValue;
            View view = this.topView;
            if (view == null || view.getVisibility() != 0) {
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(floatValue);
                }
                ChatActivity.this.chatListView.setTranslationY(floatValue);
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            } else {
                View view2 = this.topView;
                view2.setTranslationY(((1.0f - this.topViewEnterProgress) * view2.getLayoutParams().height) + floatValue);
                View view3 = this.topLineView;
                if (view3 != null) {
                    view3.setTranslationY(floatValue);
                }
            }
            this.messageEditTextContainer.invalidate();
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$1(ValueAnimator valueAnimator) {
            this.messageEditText.setOffsetY(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX WARN: Code restructure failed: missing block: B:32:0x010f, code lost:
            if (r11.lastContentViewHeight != r11.this$0.contentView.getMeasuredHeight()) goto L28;
         */
        @Override // org.telegram.ui.Components.ChatActivityEnterView
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void checkAnimation() {
            View view;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                this.shouldAnimateEditTextWithBounds = false;
                return;
            }
            int backgroundTop = getBackgroundTop();
            if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0 && backgroundTop != ChatActivity.this.chatActivityEnterViewAnimateFromTop && this.lastContentViewHeight == ChatActivity.this.contentView.getMeasuredHeight()) {
                int i = (this.animatedTop + ChatActivity.this.chatActivityEnterViewAnimateFromTop) - backgroundTop;
                this.animatedTop = i;
                this.messageEditTextContainer.invalidate();
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.removeAllListeners();
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                float f = i;
                ChatActivity.this.chatListView.setTranslationY(f);
                View view2 = this.topView;
                if (view2 != null && view2.getVisibility() == 0) {
                    this.topView.setTranslationY(this.animatedTop + ((1.0f - this.topViewEnterProgress) * view.getLayoutParams().height));
                    View view3 = this.topLineView;
                    if (view3 != null) {
                        view3.setTranslationY(this.animatedTop);
                    }
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(f);
                }
                ChatActivity.this.changeBoundAnimator = ValueAnimator.ofFloat(f, 0.0f);
                ChatActivity.this.changeBoundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$40$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.40.this.lambda$checkAnimation$0(valueAnimator);
                    }
                });
                ChatActivity.this.changeBoundAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.40.1
                    /* JADX WARN: Code restructure failed: missing block: B:11:0x006e, code lost:
                        if (r4 != null) goto L8;
                     */
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    /*
                        Code decompiled incorrectly, please refer to instructions dump.
                    */
                    public void onAnimationEnd(Animator animator) {
                        float f2;
                        View view4;
                        ((ChatActivityEnterView) 40.this).animatedTop = 0;
                        if (((ChatActivityEnterView) 40.this).topView == null || ((ChatActivityEnterView) 40.this).topView.getVisibility() != 0) {
                            f2 = 0.0f;
                            ChatActivity.this.chatListView.setTranslationY(0.0f);
                            view4 = ChatActivity.this.mentionContainer;
                        } else {
                            ((ChatActivityEnterView) 40.this).topView.setTranslationY(((ChatActivityEnterView) 40.this).animatedTop + ((1.0f - ((ChatActivityEnterView) 40.this).topViewEnterProgress) * ((ChatActivityEnterView) 40.this).topView.getLayoutParams().height));
                            if (((ChatActivityEnterView) 40.this).topLineView != null) {
                                view4 = ((ChatActivityEnterView) 40.this).topLineView;
                                f2 = ((ChatActivityEnterView) 40.this).animatedTop;
                                view4.setTranslationY(f2);
                            }
                        }
                        ChatActivity.this.changeBoundAnimator = null;
                    }
                });
                ChatActivity.this.changeBoundAnimator.setDuration(250L);
                ChatActivity.this.changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                if (!ChatActivity.this.waitingForSendingMessageLoad) {
                    ChatActivity.this.changeBoundAnimator.start();
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            if (this.shouldAnimateEditTextWithBounds) {
                EditTextCaption editTextCaption = this.messageEditText;
                editTextCaption.setOffsetY(editTextCaption.getOffsetY() - ((this.messageEditTextPredrawHeigth - this.messageEditText.getMeasuredHeight()) + (this.messageEditTextPredrawScrollY - this.messageEditText.getScrollY())));
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.messageEditText.getOffsetY(), 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$40$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.40.this.lambda$checkAnimation$1(valueAnimator);
                    }
                });
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                ChatActivity.this.messageEditTextAnimator = ofFloat;
                ofFloat.setDuration(250L);
                ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                ofFloat.start();
                this.shouldAnimateEditTextWithBounds = false;
            }
            this.lastContentViewHeight = ChatActivity.this.contentView.getMeasuredHeight();
            ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onInterceptTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected void onLineCountChanged(int i, int i2) {
            if (ChatActivity.this.chatActivityEnterView != null) {
                this.shouldAnimateEditTextWithBounds = true;
                this.messageEditTextPredrawHeigth = this.messageEditText.getMeasuredHeight();
                this.messageEditTextPredrawScrollY = this.messageEditText.getScrollY();
                ChatActivity.this.contentView.invalidate();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
            }
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        public void openKeyboard() {
            if (ChatActivity.this.forwardingPreviewView != null) {
                return;
            }
            super.openKeyboard();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected boolean pannelAnimationEnabled() {
            return ChatActivity.this.openAnimationEnded;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 60 extends ReactionsContainerLayout {
        private boolean firstLayout;
        private int[] loc;
        private ValueAnimator va;

        60(int i, BaseFragment baseFragment, Context context, int i2, Theme.ResourcesProvider resourcesProvider) {
            super(i, baseFragment, context, i2, resourcesProvider);
            this.loc = new int[2];
            this.firstLayout = true;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$updateBubbleOffset$0(ValueAnimator valueAnimator) {
            setBubbleOffset(((Float) valueAnimator.getAnimatedValue()).floatValue());
            invalidate();
        }

        private void updateBubbleOffset(float f, boolean z) {
            ValueAnimator valueAnimator = this.va;
            if (valueAnimator != null) {
                valueAnimator.cancel();
                this.va = null;
            }
            if (!z) {
                setBubbleOffset(f);
                return;
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.bubblesOffset, f);
            this.va = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$60$$ExternalSyntheticLambda0
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.60.this.lambda$updateBubbleOffset$0(valueAnimator2);
                }
            });
            this.va.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            this.va.setDuration(420L);
            this.va.start();
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            ActionBarMenuItem item = ((BaseFragment) ChatActivity.this).actionBar.createActionMode().getItem(28);
            if (item != null) {
                getLocationInWindow(this.loc);
                float x = getX();
                float width = getWidth() + x;
                item.getLocationInWindow(this.loc);
                float width2 = this.loc[0] + (item.getWidth() / 2.0f);
                int dp = AndroidUtilities.dp(20.0f);
                boolean z2 = LocaleController.isRTL;
                float f = width2 + (dp * (z2 ? -1 : 1));
                updateBubbleOffset(z2 ? f - x : f - width, !this.firstLayout);
                this.firstLayout = false;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 68 extends MessagePreviewView {
        68(Context context, ChatActivity chatActivity, MessagePreviewParams messagePreviewParams, TLRPC.User user, TLRPC.Chat chat, int i, MessagePreviewView.ResourcesDelegate resourcesDelegate, int i2, boolean z) {
            super(context, chatActivity, messagePreviewParams, user, chat, i, resourcesDelegate, i2, z);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onDismiss$1() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboard();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onFullDismiss$0() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.freezeEmojiView(false);
            }
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void onDismiss(boolean z) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.forwardingPreviewView = null;
            chatActivity.checkShowBlur(true);
            ChatActivity chatActivity2 = ChatActivity.this;
            if (chatActivity2.messagePreviewParams != null) {
                if (chatActivity2.replyingQuote == null) {
                    ChatActivity chatActivity3 = ChatActivity.this;
                    chatActivity3.replyingQuote = chatActivity3.messagePreviewParams.quote;
                }
                ChatActivity chatActivity4 = ChatActivity.this;
                if (chatActivity4.messagePreviewParams.quote == null) {
                    chatActivity4.replyingQuote = null;
                }
                if (ChatActivity.this.replyingQuote != null) {
                    ChatActivity.this.replyingQuote.outdated = false;
                    ReplyQuote replyQuote = ChatActivity.this.replyingQuote;
                    ChatActivity chatActivity5 = ChatActivity.this;
                    replyQuote.start = chatActivity5.messagePreviewParams.quoteStart;
                    ReplyQuote replyQuote2 = chatActivity5.replyingQuote;
                    ChatActivity chatActivity6 = ChatActivity.this;
                    replyQuote2.end = chatActivity6.messagePreviewParams.quoteEnd;
                    chatActivity6.replyingQuote.update();
                    if (ChatActivity.this.fieldPanelShown == 2) {
                        ChatActivity chatActivity7 = ChatActivity.this;
                        chatActivity7.showFieldPanelForReplyQuote(chatActivity7.replyingMessageObject, ChatActivity.this.replyingQuote);
                    }
                } else {
                    ArrayList<MessageObject> arrayList = new ArrayList<>();
                    MessagePreviewParams.Messages messages = ChatActivity.this.messagePreviewParams.forwardMessages;
                    if (messages != null) {
                        messages.getSelectedMessages(arrayList);
                    }
                    ChatActivity.this.fallbackFieldPanel();
                }
            }
            ChatActivity.this.forbidForwardingWithDismiss = false;
            if (ChatActivity.this.keyboardWasVisible && z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$68$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.68.this.lambda$onDismiss$1();
                    }
                }, 50L);
                ChatActivity.this.keyboardWasVisible = false;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void onFullDismiss(boolean z) {
            MessagePreviewParams messagePreviewParams = ChatActivity.this.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.attach(null);
            }
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$68$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.68.this.lambda$onFullDismiss$0();
                    }
                }, 15L);
            }
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void onQuoteSelectedPart() {
            if (ChatActivity.this.replyingQuote != null && ChatActivity.this.replyingQuote.message != null) {
                ChatActivity chatActivity = ChatActivity.this;
                ReplyQuote replyQuote = chatActivity.messagePreviewParams.quote;
                if (replyQuote == null || replyQuote.message == null || chatActivity.replyingQuote.message.getId() == ChatActivity.this.messagePreviewParams.quote.message.getId()) {
                    return;
                }
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.replyingQuote = chatActivity2.messagePreviewParams.quote;
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void removeForward() {
            super.removeForward();
            dismiss(true);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.messagePreviewParams.updateForward(null, chatActivity.dialog_id);
            ChatActivity.this.fallbackFieldPanel();
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void removeLink() {
            dismiss(true);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.foundWebPage = null;
            ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setWebPage(null, false);
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            MessagePreviewParams messagePreviewParams = chatActivity2.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.updateLink(((BaseFragment) chatActivity2).currentAccount, null, null, ChatActivity.this.replyingMessageObject != ChatActivity.this.threadMessageObject ? ChatActivity.this.replyingMessageObject : null, ChatActivity.this.replyingQuote, ChatActivity.this.editingMessageObject);
            }
            ChatActivity.this.fallbackFieldPanel();
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void removeQuote() {
            dismiss(true);
            ChatActivity.this.replyingQuote = null;
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.showFieldPanelForReply(chatActivity.replyingMessageObject);
        }

        @Override // org.telegram.ui.Components.MessagePreviewView
        protected void removeReply() {
            dismiss(true);
            ChatActivity.this.replyingMessageObject = null;
            ChatActivity.this.replyingQuote = null;
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.messagePreviewParams.updateReply(null, null, chatActivity.dialog_id, null);
            ChatActivity.this.fallbackFieldPanel();
        }

        /* JADX WARN: Removed duplicated region for block: B:35:0x009f  */
        @Override // org.telegram.ui.Components.MessagePreviewView
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void selectAnotherChat(boolean z) {
            int i;
            boolean z2;
            boolean z3;
            dismiss(false);
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.messagePreviewParams != null) {
                if (!z) {
                    chatActivity.ignoreDraft = true;
                }
                MessagePreviewParams.Messages messages = ChatActivity.this.messagePreviewParams.forwardMessages;
                if (messages != null) {
                    int size = messages.messages.size();
                    i = 0;
                    z2 = false;
                    for (int i2 = 0; i2 < size; i2++) {
                        MessageObject messageObject = ChatActivity.this.messagePreviewParams.forwardMessages.messages.get(i2);
                        if (messageObject.isPoll()) {
                            if (i != 2) {
                                i = messageObject.isPublicPoll() ? 2 : 1;
                            }
                        } else if (messageObject.isInvoice()) {
                            z2 = true;
                        }
                        ChatActivity.this.selectedMessagesIds[0].put(messageObject.getId(), messageObject);
                    }
                } else {
                    i = 0;
                    z2 = false;
                }
                Bundle bundle = new Bundle();
                bundle.putBoolean("onlySelect", true);
                bundle.putInt("dialogsType", 3);
                bundle.putBoolean("quote", !z);
                if (!z) {
                    MessagePreviewParams messagePreviewParams = ChatActivity.this.messagePreviewParams;
                    if (messagePreviewParams.replyMessage != null && messagePreviewParams.quote == null) {
                        z3 = true;
                        bundle.putBoolean("reply_to", z3);
                        bundle.putInt("hasPoll", i);
                        bundle.putBoolean("hasInvoice", z2);
                        MessagePreviewParams.Messages messages2 = ChatActivity.this.messagePreviewParams.forwardMessages;
                        bundle.putInt("messagesCount", messages2 != null ? messages2.messages.size() : 0);
                        bundle.putBoolean("canSelectTopics", true);
                        DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                        dialogsActivity.setDelegate(ChatActivity.this);
                        ChatActivity.this.presentFragment(dialogsActivity);
                    }
                }
                z3 = false;
                bundle.putBoolean("reply_to", z3);
                bundle.putInt("hasPoll", i);
                bundle.putBoolean("hasInvoice", z2);
                MessagePreviewParams.Messages messages22 = ChatActivity.this.messagePreviewParams.forwardMessages;
                bundle.putInt("messagesCount", messages22 != null ? messages22.messages.size() : 0);
                bundle.putBoolean("canSelectTopics", true);
                DialogsActivity dialogsActivity2 = new DialogsActivity(bundle);
                dialogsActivity2.setDelegate(ChatActivity.this);
                ChatActivity.this.presentFragment(dialogsActivity2);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 71 extends BlurredFrameLayout {
        float lastY;
        float startY;

        71(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$71$$ExternalSyntheticLambda0
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    boolean lambda$new$0;
                    lambda$new$0 = ChatActivity.71.this.lambda$new$0(view);
                    return lambda$new$0;
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$new$0(View view) {
            if (AndroidUtilities.isTablet() || ChatActivity.this.isThreadChat()) {
                return false;
            }
            this.startY = this.lastY;
            ChatActivity.this.openPinnedMessagesList(true);
            return true;
        }

        /* JADX WARN: Code restructure failed: missing block: B:11:0x0039, code lost:
            if (r5 == r3.this$0.pinnedLineView) goto L12;
         */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected boolean drawChild(Canvas canvas, View view, long j) {
            boolean drawChild;
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), AndroidUtilities.dp(48.0f));
            }
            if (view == ChatActivity.this.pinnedMessageTextView[0] || view == ChatActivity.this.pinnedMessageTextView[1]) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth() - AndroidUtilities.dp(38.0f), getMeasuredHeight());
                drawChild = super.drawChild(canvas, view, j);
            } else {
                drawChild = super.drawChild(canvas, view, j);
            }
            canvas.restore();
            return drawChild;
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            if (ChatActivity.this.setPinnedTextTranslationX) {
                for (int i3 = 0; i3 < ChatActivity.this.pinnedNextAnimation.length; i3++) {
                    if (ChatActivity.this.pinnedNextAnimation[i3] != null) {
                        ChatActivity.this.pinnedNextAnimation[i3].start();
                    }
                }
                ChatActivity.this.setPinnedTextTranslationX = false;
            }
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            this.lastY = motionEvent.getY();
            if (motionEvent.getAction() == 1) {
                ChatActivity.this.finishPreviewFragment();
            } else if (motionEvent.getAction() == 2) {
                float f = this.startY - this.lastY;
                ChatActivity.this.movePreviewFragment(f);
                if (f < 0.0f) {
                    this.startY = this.lastY;
                }
            }
            return super.onTouchEvent(motionEvent);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 74 implements ChatActivityDelegate {
        74() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$0(boolean z, ArrayList arrayList, ArrayList arrayList2, int i, int i2) {
            if (z) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.remove("pin_" + ChatActivity.this.dialog_id).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.TRUE, arrayList2, null, 0, Integer.valueOf(i), Boolean.valueOf(ChatActivity.this.pinnedEndReached));
            }
            if (i2 == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$1(boolean z, int i) {
            if (!z) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.isTopic) {
                    for (int i2 = 0; i2 < ChatActivity.this.pinnedMessageIds.size(); i2++) {
                        MessagesController messagesController = ChatActivity.this.getMessagesController();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        messagesController.pinMessage(chatActivity2.currentChat, chatActivity2.currentUser, ((Integer) chatActivity2.pinnedMessageIds.get(i2)).intValue(), true, false, false);
                    }
                } else {
                    MessagesController messagesController2 = chatActivity.getMessagesController();
                    ChatActivity chatActivity3 = ChatActivity.this;
                    messagesController2.unpinAllMessages(chatActivity3.currentChat, chatActivity3.currentUser);
                }
            }
            if (i == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void onUnpin(boolean z, final boolean z2) {
            SharedPreferences.Editor putInt;
            if (!z) {
                MessageObject messageObject = (MessageObject) ChatActivity.this.pinnedMessageObjects.get(Integer.valueOf(ChatActivity.this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(ChatActivity.this.currentPinnedMessageId);
                }
                ChatActivity.this.unpinMessage(messageObject);
                return;
            }
            final ArrayList arrayList = new ArrayList(ChatActivity.this.pinnedMessageIds);
            final ArrayList arrayList2 = new ArrayList(ChatActivity.this.pinnedMessageObjects.values());
            ChatActivity chatActivity = ChatActivity.this;
            if (z2) {
                SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(((BaseFragment) chatActivity).currentAccount);
                boolean isEmpty = ChatActivity.this.pinnedMessageIds.isEmpty();
                SharedPreferences.Editor edit = notificationsSettings.edit();
                if (isEmpty) {
                    putInt = edit.remove("pin_" + ChatActivity.this.dialog_id);
                } else {
                    putInt = edit.putInt("pin_" + ChatActivity.this.dialog_id, ((Integer) ChatActivity.this.pinnedMessageIds.get(0)).intValue());
                }
                putInt.commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                chatActivity.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.FALSE, null, null, 0, 0, Boolean.TRUE);
            }
            if (ChatActivity.this.pinBulletin != null) {
                ChatActivity.this.pinBulletin.hide();
            }
            ChatActivity.this.showPinBulletin = true;
            final int access$32804 = ChatActivity.access$32804(ChatActivity.this);
            final int pinnedMessagesCount = ChatActivity.this.getPinnedMessagesCount();
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.pinBulletin = BulletinFactory.createUnpinAllMessagesBulletin(chatActivity2, pinnedMessagesCount, z2, new Runnable() { // from class: org.telegram.ui.ChatActivity$74$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.74.this.lambda$onUnpin$0(z2, arrayList, arrayList2, pinnedMessagesCount, access$32804);
                }
            }, new Runnable() { // from class: org.telegram.ui.ChatActivity$74$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.74.this.lambda$onUnpin$1(z2, access$32804);
                }
            }, ChatActivity.this.themeDelegate);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openHashtagSearch(String str) {
            ChatActivity.this.lambda$openHashtagSearch$304(str);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class 90 extends AnimatorListenerAdapter {
        90() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (ChatActivity.this.gifHintTextView == null) {
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, 0.0f));
            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.90.1
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.gifHintTextView != null) {
                        ChatActivity.this.gifHintTextView.setVisibility(8);
                    }
                }
            });
            animatorSet.setDuration(300L);
            animatorSet.start();
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$90$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.90.this.lambda$onAnimationEnd$0();
                }
            }, 2000L);
        }
    }

    /* loaded from: classes4.dex */
    public class ChatActivityAdapter extends RecyclerAnimationScrollHelper.AnimatableAdapter {
        public boolean filteredEndReached;
        private boolean isBot;
        public boolean isFiltered;
        public boolean isFrozen;
        private Context mContext;
        private int messagesEndRow;
        public int messagesStartRow;
        private int rowCount;
        private int hintRow = -5;
        private int botInfoRow = -5;
        private int botInfoEmptyRow = -5;
        private int loadingUpRow = -5;
        private int loadingDownRow = -5;
        public ArrayList frozenMessages = new ArrayList();
        public ArrayList filteredMessages = new ArrayList();

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 2 implements ChatActionCell.ChatActionCellDelegate {

            /* JADX INFO: Access modifiers changed from: package-private */
            /* loaded from: classes4.dex */
            public class 1 extends Browser.Progress {
                final /* synthetic */ ChatActionCell val$cell;

                1(ChatActionCell chatActionCell) {
                    this.val$cell = chatActionCell;
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$end$0(ChatActionCell chatActionCell) {
                    ChatActivity.this.resetProgressDialogLoading();
                    chatActionCell.getMessageObject().flickerLoading = false;
                    chatActionCell.invalidate();
                }

                @Override // org.telegram.messenger.browser.Browser.Progress
                public void end(boolean z) {
                    if (z) {
                        return;
                    }
                    final ChatActionCell chatActionCell = this.val$cell;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatActivityAdapter.2.1.this.lambda$end$0(chatActionCell);
                        }
                    }, 250L);
                }

                @Override // org.telegram.messenger.browser.Browser.Progress
                public void init() {
                    ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                    ChatActivity.this.progressDialogAtMessageType = 4;
                    ChatActivity.this.progressDialogLinkSpan = null;
                    this.val$cell.getMessageObject().flickerLoading = true;
                    this.val$cell.invalidate();
                }
            }

            /* JADX INFO: Access modifiers changed from: package-private */
            /* loaded from: classes4.dex */
            public class 2 extends PhotoViewer.EmptyPhotoViewerProvider {
                final /* synthetic */ MediaController.PhotoEntry val$entry;
                final /* synthetic */ MessageObject val$message;

                2(MessageObject messageObject, MediaController.PhotoEntry photoEntry) {
                    this.val$message = messageObject;
                    this.val$entry = photoEntry;
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$1() {
                    Bundle bundle = new Bundle();
                    bundle.putLong("user_id", UserConfig.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clientUserId);
                    ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$2(TLObject tLObject, MessageObject messageObject) {
                    if (tLObject instanceof TLRPC.TL_photos_photo) {
                        TLRPC.TL_photos_photo tL_photos_photo = (TLRPC.TL_photos_photo) tLObject;
                        ChatActivity.this.getMessagesController().putUsers(tL_photos_photo.users, false);
                        TLRPC.User user = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.getUserConfig().clientUserId));
                        if ((tL_photos_photo.photo instanceof TLRPC.TL_photo) && user != null) {
                            PhotoUtilities.applyPhotoToUser(messageObject.messageOwner.action.photo, user, false);
                            ChatActivity.this.getUserConfig().setCurrentUser(user);
                            ChatActivity.this.getUserConfig().saveConfig(true);
                            BulletinFactory.of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user), AndroidUtilities.replaceTags(LocaleController.getString(R.string.ApplyAvatarHintTitle)), AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.ApplyAvatarHint), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda3
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatActivityAdapter.2.2.this.lambda$sendButtonPressed$1();
                                }
                            }), null).show();
                        }
                    }
                    messageObject.settingAvatar = false;
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$3(final MessageObject messageObject, final TLObject tLObject, TLRPC.TL_error tL_error) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatActivityAdapter.2.2.this.lambda$sendButtonPressed$2(tLObject, messageObject);
                        }
                    });
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z) {
                    return ChatActivity.this.photoViewerProvider.getPlaceForPhoto(this.val$message, fileLocation, i, z);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                    final MessageObject messageObject = this.val$message;
                    messageObject.settingAvatar = true;
                    MediaController.PhotoEntry photoEntry = this.val$entry;
                    if (photoEntry.imagePath != null || photoEntry.isVideo) {
                        PhotoUtilities.setImageAsAvatar(photoEntry, ChatActivity.this, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda1
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessageObject.this.settingAvatar = false;
                            }
                        });
                        return;
                    }
                    TLRPC.TL_photos_updateProfilePhoto tL_photos_updateProfilePhoto = new TLRPC.TL_photos_updateProfilePhoto();
                    TLRPC.TL_inputPhoto tL_inputPhoto = new TLRPC.TL_inputPhoto();
                    tL_photos_updateProfilePhoto.id = tL_inputPhoto;
                    TLRPC.Photo photo = this.val$message.messageOwner.action.photo;
                    tL_inputPhoto.id = photo.id;
                    tL_inputPhoto.access_hash = photo.access_hash;
                    tL_inputPhoto.file_reference = photo.file_reference;
                    ConnectionsManager connectionsManager = ChatActivity.this.getConnectionsManager();
                    final MessageObject messageObject2 = this.val$message;
                    connectionsManager.sendRequest(tL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda0
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            ChatActivity.ChatActivityAdapter.2.2.this.lambda$sendButtonPressed$3(messageObject2, tLObject, tL_error);
                        }
                    });
                }
            }

            2() {
            }

            private void initGiftProgressDialog(ChatActionCell chatActionCell) {
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = (chatActionCell == null || chatActionCell.getMessageObject() == null) ? null : new 1(chatActionCell);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$didClickButton$0(DialogInterface dialogInterface, int i) {
                ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearWallpaper(ChatActivity.this.dialog_id, true, true);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$didPressReplyMessage$1(ChatActionCell chatActionCell, int i) {
                MessageObject messageObject = chatActionCell.getMessageObject();
                ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean canDrawOutboundsContent() {
                return false;
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didClickButton(ChatActionCell chatActionCell) {
                MessageObject messageObject;
                if (chatActionCell != null && (messageObject = chatActionCell.getMessageObject()) != null && messageObject.type == 22 && !chatActionCell.getMessageObject().isOutOwner() && chatActionCell.getMessageObject().isWallpaperForBoth() && chatActionCell.getMessageObject().isCurrentWallpaper()) {
                    AlertDialog create = new AlertDialog.Builder(ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider()).setTitle(LocaleController.getString(R.string.RemoveWallpaperTitle)).setMessage(LocaleController.getString(R.string.RemoveWallpaperMessage)).setPositiveButton(LocaleController.getString(R.string.Remove), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$$ExternalSyntheticLambda1
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            ChatActivity.ChatActivityAdapter.2.this.lambda$didClickButton$0(dialogInterface, i);
                        }
                    }).setNegativeButton(LocaleController.getString(R.string.Cancel), null).create();
                    ChatActivity.this.showDialog(create);
                    TextView textView = (TextView) create.getButton(-1);
                    if (textView != null) {
                        textView.setTextColor(ChatActivity.this.getThemedColor(Theme.key_text_RedBold));
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didClickImage(ChatActionCell chatActionCell) {
                TLRPC.VideoSize videoSize;
                TLRPC.VideoSize videoSize2;
                PhotoViewer photoViewer;
                int i;
                PhotoViewer photoViewer2;
                int i2;
                String str;
                MessageObject messageObject = chatActionCell.getMessageObject();
                PhotoViewer photoViewer3 = PhotoViewer.getInstance();
                ChatActivity chatActivity = ChatActivity.this;
                photoViewer3.setParentActivity(chatActivity, chatActivity.themeDelegate);
                TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 640);
                if (chatActionCell.getMessageObject().type == 24) {
                    StoryViewer orCreateStoryViewer = ChatActivity.this.getOrCreateStoryViewer();
                    ChatActivity chatActivity2 = ChatActivity.this;
                    orCreateStoryViewer.openFor(chatActivity2, chatActivity2.chatListView, chatActionCell);
                } else if (chatActionCell.getMessageObject().type == 22) {
                    MessagesController messagesController = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount);
                    if (chatActionCell.showingCancelButton() && messageObject.getId() < 0 && (str = messagesController.uploadingWallpaper) != null && TextUtils.equals(messageObject.messageOwner.action.wallpaper.uploadingImage, str)) {
                        messagesController.cancelUploadWallpaper();
                        ChatActivity.this.removeMessageObject(messageObject);
                    } else if (chatActionCell.hasButton()) {
                        ThemePreviewActivity.showFor(ChatActivity.this, messageObject);
                    } else {
                        ChatActivity.this.showChatThemeBottomSheet();
                    }
                } else {
                    ArrayList<TLRPC.VideoSize> arrayList = messageObject.messageOwner.action.photo.video_sizes;
                    if (arrayList == null || arrayList.isEmpty()) {
                        videoSize = null;
                        videoSize2 = null;
                    } else {
                        videoSize = FileLoader.getClosestVideoSizeWithSize(messageObject.messageOwner.action.photo.video_sizes, 1000);
                        videoSize2 = FileLoader.getEmojiMarkup(messageObject.messageOwner.action.photo.video_sizes);
                    }
                    if (chatActionCell.getMessageObject().type != 21 || messageObject.isOutOwner()) {
                        if (videoSize != null) {
                            PhotoViewer.getInstance().openPhoto(videoSize.location, ImageLocation.getForPhoto(videoSize, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                            if (chatActionCell.getMessageObject().type != 21) {
                                return;
                            }
                            photoViewer = PhotoViewer.getInstance();
                            i = R.string.SuggestedVideo;
                        } else if (closestPhotoSizeWithSize == null) {
                            PhotoViewer.getInstance().openPhoto(messageObject, (ChatActivity) null, 0L, 0L, 0L, ChatActivity.this.photoViewerProvider);
                            return;
                        } else {
                            PhotoViewer.getInstance().openPhoto(closestPhotoSizeWithSize.location, ImageLocation.getForPhoto(closestPhotoSizeWithSize, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                            if (chatActionCell.getMessageObject().type != 21) {
                                return;
                            }
                            photoViewer = PhotoViewer.getInstance();
                            i = R.string.SuggestedPhoto;
                        }
                        photoViewer.setTitle(LocaleController.getString(i));
                    } else if (messageObject.settingAvatar) {
                    } else {
                        if (videoSize2 != null) {
                            PhotoUtilities.showAvatartConstructorForUpdateUserPhoto(ChatActivity.this, videoSize2);
                            return;
                        }
                        ArrayList arrayList2 = new ArrayList();
                        ImageLocation.getForPhoto(videoSize, messageObject.messageOwner.action.photo);
                        FileLoader fileLoader = ChatActivity.this.getFileLoader();
                        File pathToAttach = videoSize == null ? fileLoader.getPathToAttach(messageObject.messageOwner.action.photo) : fileLoader.getPathToAttach(videoSize);
                        File file = new File(FileLoader.getDirectory(4), pathToAttach.getName());
                        if (!pathToAttach.exists()) {
                            if (!file.exists()) {
                                return;
                            }
                            pathToAttach = file;
                        }
                        MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, pathToAttach.getAbsolutePath(), 0, false, 0, 0, 0L);
                        photoEntry.caption = ChatActivity.this.chatActivityEnterView.getFieldText();
                        photoEntry.isVideo = videoSize != null;
                        arrayList2.add(photoEntry);
                        PhotoViewer.getInstance().openPhotoForSelect(arrayList2, 0, 1, false, new 2(messageObject, photoEntry), null);
                        if (photoEntry.isVideo) {
                            photoViewer2 = PhotoViewer.getInstance();
                            i2 = R.string.SuggestedVideo;
                        } else {
                            photoViewer2 = PhotoViewer.getInstance();
                            i2 = R.string.SuggestedPhoto;
                        }
                        photoViewer2.setTitle(LocaleController.getString(i2));
                        ImageUpdater.AvatarFor avatarFor = new ImageUpdater.AvatarFor(ChatActivity.this.getUserConfig().getCurrentUser(), 1);
                        avatarFor.isVideo = videoSize != null;
                        avatarFor.fromObject = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.dialog_id));
                        PhotoViewer.getInstance().setAvatarFor(avatarFor);
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean didLongPress(ChatActionCell chatActionCell, float f, float f2) {
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    return false;
                }
                return ChatActivity.this.createMenu(chatActionCell, false, false, f, f2, true);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didOpenPremiumGift(ChatActionCell chatActionCell, TLRPC.TL_premiumGiftOption tL_premiumGiftOption, String str, boolean z) {
                if (str != null) {
                    initGiftProgressDialog(chatActionCell);
                    PremiumPreviewGiftLinkBottomSheet.show(str, tL_premiumGiftOption, ChatActivity.this.getCurrentUser(), ChatActivity.this.progressDialogCurrent);
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new PremiumPreviewBottomSheet(chatActivity2, ((BaseFragment) chatActivity2).currentAccount, ChatActivity.this.getCurrentUser(), new GiftPremiumBottomSheet$GiftTier(tL_premiumGiftOption), ChatActivity.this.themeDelegate).setAnimateConfetti(z).setOutboundGift(chatActionCell.getMessageObject().isOut()));
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didOpenPremiumGiftChannel(ChatActionCell chatActionCell, String str, boolean z) {
                initGiftProgressDialog(chatActionCell);
                GiftInfoBottomSheet.show(getBaseFragment(), str, ChatActivity.this.progressDialogCurrent);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didPressReplyMessage(final ChatActionCell chatActionCell, final int i) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityAdapter.2.this.lambda$didPressReplyMessage$1(chatActionCell, i);
                    }
                };
                if (!ChatActivity.this.chatAdapter.isFiltered) {
                    runnable.run();
                    return;
                }
                ChatActivity.this.setFilterMessages(false, true, true);
                AndroidUtilities.runOnUIThread(runnable, 80L);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void forceUpdate(ChatActionCell chatActionCell, boolean z) {
                MessageObject messageObject;
                int i;
                int i2;
                if (chatActionCell == null || (messageObject = chatActionCell.getMessageObject()) == null) {
                    return;
                }
                messageObject.forceUpdate = true;
                if (ChatActivity.this.chatListView != null && ChatActivity.this.chatLayoutManager != null && !ChatActivity.this.chatLayoutManager.hasPendingScrollPosition()) {
                    for (int childCount = ChatActivity.this.chatListView.getChildCount() - 1; childCount >= 0; childCount--) {
                        View childAt = ChatActivity.this.chatListView.getChildAt(childCount);
                        i = ChatActivity.this.chatListView.getChildAdapterPosition(childAt);
                        if (i >= 0) {
                            if (childAt instanceof ChatMessageCell) {
                                if (((ChatMessageCell) childAt).getCurrentMessagesGroup() == null) {
                                    i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                                    break;
                                }
                            } else if (childAt instanceof ChatActionCell) {
                                i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                                break;
                            }
                        }
                    }
                }
                i = -1;
                i2 = 0;
                ChatActivity.this.lambda$updateMessageAnimated$265(messageObject, false);
                if (!z || i < 0) {
                    return;
                }
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public BaseFragment getBaseFragment() {
                return ChatActivity.this;
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public /* synthetic */ long getDialogId() {
                return ChatActionCell.ChatActionCellDelegate.-CC.$default$getDialogId(this);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public long getTopicId() {
                return ChatActivity.this.getTopicId();
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public /* synthetic */ void needOpenInviteLink(TLRPC.TL_chatInviteExported tL_chatInviteExported) {
                ChatActionCell.ChatActionCellDelegate.-CC.$default$needOpenInviteLink(this, tL_chatInviteExported);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needOpenUserProfile(long j) {
                ChatActivity.this.openUserProfile(j);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needShowEffectOverlay(ChatActionCell chatActionCell, TLRPC.Document document, TLRPC.VideoSize videoSize) {
                ChatActivity.this.emojiAnimationsOverlay.showAnimationForActionCell(chatActionCell, document, videoSize);
            }
        }

        /* loaded from: classes4.dex */
        class 3 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            3(ChatMessageCell chatMessageCell) {
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                if (pipRoundVideoView != null) {
                    pipRoundVideoView.showTemporary(true);
                }
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                ImageReceiver photoImage = this.val$messageCell.getPhotoImage();
                float imageWidth = photoImage.getImageWidth();
                org.telegram.ui.Components.Rect cameraRect = ChatActivity.this.instantCameraView.getCameraRect();
                float f = imageWidth / cameraRect.width;
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.setAlpha(0.0f);
                this.val$messageCell.setTimeAlpha(0.0f);
                this.val$messageCell.getLocationOnScreen(r7);
                int[] iArr = {(int) (iArr[0] + (photoImage.getImageX() - this.val$messageCell.getAnimationOffsetX())), (int) (iArr[1] + (photoImage.getImageY() - this.val$messageCell.getTranslationY()))};
                final InstantCameraView.InstantViewCameraContainer cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                cameraContainer.setPivotX(0.0f);
                cameraContainer.setPivotY(0.0f);
                AnimatorSet animatorSet = new AnimatorSet();
                cameraContainer.setImageReceiver(photoImage);
                ChatActivity.this.instantCameraView.cancelBlur();
                AnimatorSet animatorSet2 = new AnimatorSet();
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, f);
                ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, f);
                ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_Y, iArr[1] - cameraRect.y);
                View switchButtonView = ChatActivity.this.instantCameraView.getSwitchButtonView();
                Property property = View.ALPHA;
                animatorSet.playTogether(ofFloat, ofFloat2, ofFloat3, ObjectAnimator.ofFloat(switchButtonView, property, 0.0f), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getFlashButtonView(), property, 0.0f), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), property, 0.0f));
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ObjectAnimator ofFloat4 = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_X, iArr[0] - cameraRect.x);
                ofFloat4.setInterpolator(CubicBezierInterpolator.DEFAULT);
                animatorSet2.playTogether(ofFloat4, animatorSet);
                animatorSet2.setDuration(300L);
                InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
                if (instantCameraView != null) {
                    instantCameraView.setIsMessageTransition(true);
                }
                animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        3.this.val$messageCell.setAlpha(1.0f);
                        3.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                        AnimationProperties.FloatProperty floatProperty = new AnimationProperties.FloatProperty("alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.1
                            @Override // android.util.Property
                            public Float get(ChatMessageCell chatMessageCell) {
                                return Float.valueOf(chatMessageCell.getTimeAlpha());
                            }

                            @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                            public void setValue(ChatMessageCell chatMessageCell, float f2) {
                                chatMessageCell.setTimeAlpha(f2);
                            }
                        };
                        AnimatorSet animatorSet3 = new AnimatorSet();
                        animatorSet3.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(3.this.val$messageCell, floatProperty, 1.0f));
                        animatorSet3.setDuration(100L);
                        animatorSet3.setInterpolator(new DecelerateInterpolator());
                        animatorSet3.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator2) {
                                InstantCameraView instantCameraView2 = ChatActivity.this.instantCameraView;
                                if (instantCameraView2 != null) {
                                    instantCameraView2.setIsMessageTransition(false);
                                    ChatActivity.this.instantCameraView.hideCamera(true);
                                    ChatActivity.this.instantCameraView.setVisibility(4);
                                }
                            }
                        });
                        animatorSet3.start();
                    }
                });
                animatorSet2.start();
                return true;
            }
        }

        public ChatActivityAdapter(Context context) {
            this.mContext = context;
            TLRPC.User user = ChatActivity.this.currentUser;
            this.isBot = user != null && user.bot;
            setHasStableIds(true);
        }

        static /* synthetic */ int access$19400(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.messagesEndRow;
        }

        static /* synthetic */ int access$27500(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.botInfoRow;
        }

        static /* synthetic */ int access$35500(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingUpRow;
        }

        static /* synthetic */ int access$47100(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingDownRow;
        }

        static /* synthetic */ void access$47200(ChatActivityAdapter chatActivityAdapter) {
            chatActivityAdapter.updateRowsInternal();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateViewHolder$0(String str) {
            if (str.startsWith("@")) {
                ChatActivity.this.getMessagesController().openByUserName(str.substring(1), ChatActivity.this, 0);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                DialogsActivity dialogsActivity = new DialogsActivity(null);
                dialogsActivity.setSearchString(str);
                ChatActivity.this.presentFragment(dialogsActivity);
            } else if (!str.startsWith("/")) {
                ChatActivity.this.processExternalUrl(0, str, null, null, false, false);
            } else {
                ChatActivity.this.chatActivityEnterView.setCommand(null, str, false, false);
                if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                    ChatActivity.this.hideFieldPanel(false);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Code restructure failed: missing block: B:51:0x00d3, code lost:
            if (r9.filteredEndReached == false) goto L45;
         */
        /* JADX WARN: Code restructure failed: missing block: B:64:0x0102, code lost:
            if (r0.currentUser == null) goto L42;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void updateRowsInternal() {
            TLRPC.User user;
            TLRPC.User user2;
            this.rowCount = 0;
            ArrayList arrayList = this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages;
            if (ChatActivity.this.chatMode == 3 && ChatActivity.this.isInsideContainer) {
                int i = this.rowCount;
                this.rowCount = i + 1;
                this.hintRow = i;
            } else {
                this.hintRow = -5;
            }
            if (arrayList.isEmpty()) {
                this.loadingUpRow = -5;
                this.loadingDownRow = -5;
                this.messagesStartRow = -5;
                this.messagesEndRow = -5;
                if (!UserObject.isReplyUser(ChatActivity.this.currentUser) && ((user = ChatActivity.this.currentUser) == null || !user.bot || MessagesController.isSupportUser(user) || ChatActivity.this.chatMode != 0)) {
                    this.botInfoRow = -5;
                    return;
                }
                int i2 = this.rowCount;
                this.rowCount = i2 + 1;
                this.botInfoRow = i2;
                return;
            }
            if (this.isFiltered || ((ChatActivity.this.forwardEndReached[0] && (ChatActivity.this.mergeDialogId == 0 || ChatActivity.this.forwardEndReached[1])) || ChatActivity.this.hideForwardEndReached)) {
                this.loadingDownRow = -5;
            } else {
                int i3 = this.rowCount;
                this.rowCount = i3 + 1;
                this.loadingDownRow = i3;
            }
            int i4 = this.rowCount;
            this.messagesStartRow = i4;
            int size = i4 + arrayList.size();
            this.rowCount = size;
            this.messagesEndRow = size;
            if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || ((user2 = ChatActivity.this.currentUser) != null && user2.bot && !MessagesController.isSupportUser(user2) && ChatActivity.this.chatMode == 0)) && ChatActivity.this.endReached[0]) {
                int i5 = this.rowCount;
                this.rowCount = i5 + 1;
                this.botInfoRow = i5;
            } else {
                this.botInfoRow = -5;
            }
            if (ChatActivity.this.chatMode == 5 && !QuickRepliesController.isSpecial(ChatActivity.this.quickReplyShortcut)) {
                int i6 = this.rowCount;
                this.rowCount = i6 + 1;
                this.hintRow = i6;
            }
            if (!this.isFiltered) {
                if (!ChatActivity.this.endReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.endReached[1])) {
                    if (!AndroidUtilities.isTablet()) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (!chatActivity.isComments) {
                        }
                    }
                    int i7 = this.rowCount;
                    this.rowCount = i7 + 1;
                    this.loadingUpRow = i7;
                    return;
                }
                this.loadingUpRow = -5;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            this.botInfoEmptyRow = -5;
            if (ChatActivity.this.clearingHistory) {
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC.User user = chatActivity.currentUser;
                if (user == null || !user.bot || chatActivity.chatMode != 0 || ((ChatActivity.this.botInfo.size() <= 0 || (((TL_bots.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description == null && ((TL_bots.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_photo == null && ((TL_bots.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_document == null)) && !UserObject.isReplyUser(ChatActivity.this.currentUser))) {
                    return 0;
                }
                this.botInfoEmptyRow = 0;
                return 1;
            }
            return this.rowCount;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public long getItemId(int i) {
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 1L;
            }
            ArrayList arrayList = this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages;
            int i2 = this.messagesStartRow;
            if (i < i2 || i >= this.messagesEndRow) {
                if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                    return 1L;
                }
                if (i == this.loadingUpRow) {
                    return 2L;
                }
                if (i == this.loadingDownRow) {
                    return 3L;
                }
                return i == this.hintRow ? 4L : 5L;
            }
            return ((MessageObject) arrayList.get(i - i2)).stableId;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 3;
            }
            if (i == this.hintRow) {
                return 1;
            }
            int i2 = this.messagesStartRow;
            if (i < i2 || i >= this.messagesEndRow) {
                return i == this.botInfoRow ? 3 : 4;
            }
            return ((MessageObject) (this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages).get(i - i2)).contentType;
        }

        public ArrayList getMessages() {
            return this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages;
        }

        public void invalidateRowWithMessageObject(MessageObject messageObject) {
            int childCount = ChatActivity.this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getMessageObject() == messageObject) {
                        chatMessageCell.invalidate();
                        return;
                    }
                }
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyDataSetChanged() {
            notifyDataSetChanged(false);
        }

        /* JADX WARN: Can't wrap try/catch for region: R(14:1|(1:3)|(2:5|(10:7|(2:9|10)|11|12|13|14|(2:15|(2:17|(1:19)(3:20|21|(2:23|(1:27)(0))(0)))(1:40))|39|28|(1:38)(2:34|35)))|44|10|11|12|13|14|(3:15|(0)(0)|19)|39|28|(2:30|32)|38) */
        /* JADX WARN: Code restructure failed: missing block: B:16:0x0053, code lost:
            r7 = move-exception;
         */
        /* JADX WARN: Code restructure failed: missing block: B:17:0x0054, code lost:
            org.telegram.messenger.FileLog.e(r7);
         */
        /* JADX WARN: Removed duplicated region for block: B:21:0x0064  */
        /* JADX WARN: Removed duplicated region for block: B:44:0x0085 A[EDGE_INSN: B:44:0x0085->B:31:0x0085 ?: BREAK  , SYNTHETIC] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void notifyDataSetChanged(boolean z) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            int size;
            boolean z2;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify data set changed fragmentOpened=" + ChatActivity.this.fragmentOpened);
            }
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.fragmentOpened) {
                    if (chatActivity.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                        recyclerListView.setItemAnimator(chatListItemAnimator);
                    }
                    updateRowsInternal();
                    super.notifyDataSetChanged();
                    size = ChatActivity.this.messages.size() - 1;
                    while (true) {
                        if (size >= 0) {
                            break;
                        }
                        MessageObject messageObject = (MessageObject) ChatActivity.this.messages.get(size);
                        if (messageObject.isDateObject) {
                            size--;
                        } else {
                            TLRPC.Message message = messageObject.messageOwner;
                            if (message != null) {
                                TLRPC.MessageAction messageAction = message.action;
                                if ((messageAction instanceof TLRPC.TL_messageActionTopicCreate) || (messageAction instanceof TLRPC.TL_messageActionChannelCreate)) {
                                    z2 = true;
                                }
                            }
                        }
                    }
                    z2 = false;
                    if ((ChatActivity.this.endReached[0] || !(ChatActivity.this.mergeDialogId == 0 || ChatActivity.this.endReached[1])) && !z2) {
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.checkDispatchHideSkeletons(((BaseFragment) chatActivity2).fragmentBeginToShow);
                    return;
                }
            }
            recyclerListView = ChatActivity.this.chatListView;
            chatListItemAnimator = null;
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
            super.notifyDataSetChanged();
            size = ChatActivity.this.messages.size() - 1;
            while (true) {
                if (size >= 0) {
                }
                size--;
            }
            z2 = false;
            if (ChatActivity.this.endReached[0]) {
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemChanged(int i) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item changed " + i);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemChanged(i);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemChanged(i);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemInserted(int i) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item inserted " + i);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemInserted(i);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemInserted(i);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemMoved(int i, int i2) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item moved" + i + ":" + i2);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemMoved(i, i2);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemMoved(i, i2);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeChanged(int i, int i2) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range changed " + i + ":" + i2);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemRangeChanged(i, i2);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemRangeChanged(i, i2);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeInserted(int i, int i2) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            int i3;
            int i4;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range inserted " + i + ":" + i2);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    if (i == 1 && i2 > 0 && (i3 = i + i2) >= (i4 = this.messagesStartRow) && i3 < this.messagesEndRow) {
                        MessageObject messageObject = (MessageObject) ChatActivity.this.messages.get(i3 - i4);
                        MessageObject messageObject2 = (MessageObject) ChatActivity.this.messages.get((i3 - this.messagesStartRow) - 1);
                        if ((ChatActivity.this.currentChat != null && messageObject.getFromChatId() == messageObject2.getFromChatId()) || (ChatActivity.this.currentUser != null && messageObject.isOutOwner() == messageObject2.isOutOwner())) {
                            notifyItemChanged(i);
                        }
                    }
                    super.notifyItemRangeInserted(i, i2);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemRangeInserted(i, i2);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
            if (i == 1) {
                MessageObject messageObject3 = (MessageObject) ChatActivity.this.messages.get(i3 - i4);
                MessageObject messageObject22 = (MessageObject) ChatActivity.this.messages.get((i3 - this.messagesStartRow) - 1);
                if (ChatActivity.this.currentChat != null) {
                    notifyItemChanged(i);
                }
                notifyItemChanged(i);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeRemoved(int i, int i2) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range removed" + i + ":" + i2);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemRangeRemoved(i, i2);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemRangeRemoved(i, i2);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRemoved(int i) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item removed " + i);
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    updateRowsInternal();
                    super.notifyItemRemoved(i);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemRemoved(i);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            updateRowsInternal();
        }

        public void notifyItemRemoved(int i, boolean z) {
            RecyclerListView recyclerListView;
            ChatListItemAnimator chatListItemAnimator;
            if (BuildVars.LOGS_ENABLED) {
                StringBuilder sb = new StringBuilder();
                sb.append("notify item removed ");
                sb.append(i);
                sb.append(z ? " with thanos effect" : "");
                FileLog.d(sb.toString());
            }
            try {
                if (((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                    if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        recyclerListView = ChatActivity.this.chatListView;
                        chatListItemAnimator = ChatActivity.this.chatListItemAnimator;
                    }
                    if (z && ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListView.getItemAnimator() == ChatActivity.this.chatListItemAnimator) {
                        ChatActivity.this.chatListItemAnimator.prepareThanos(ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i));
                    }
                    updateRowsInternal();
                    super.notifyItemRemoved(i);
                    return;
                }
                recyclerListView = ChatActivity.this.chatListView;
                chatListItemAnimator = null;
                super.notifyItemRemoved(i);
                return;
            } catch (Exception e) {
                FileLog.e(e);
                return;
            }
            recyclerListView.setItemAnimator(chatListItemAnimator);
            if (z) {
                ChatActivity.this.chatListItemAnimator.prepareThanos(ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i));
            }
            updateRowsInternal();
        }

        /* JADX WARN: Code restructure failed: missing block: B:189:0x0332, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.peer_id) == org.telegram.messenger.MessageObject.getPeerId(r5.messageOwner.peer_id)) goto L151;
         */
        /* JADX WARN: Code restructure failed: missing block: B:197:0x034d, code lost:
            if (r5.getSenderId() == r3.getSenderId()) goto L151;
         */
        /* JADX WARN: Code restructure failed: missing block: B:215:0x03a0, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r5) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L151;
         */
        /* JADX WARN: Code restructure failed: missing block: B:216:0x03a2, code lost:
            r9 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:22:0x0061, code lost:
            if (r21.this$0.chatListView.getScrollState() == 0) goto L17;
         */
        /* JADX WARN: Code restructure failed: missing block: B:263:0x0450, code lost:
            if (r5 != (r2.replyToForumTopic == null ? org.telegram.messenger.MessageObject.getTopicId(((org.telegram.ui.ActionBar.BaseFragment) r21.this$0).currentAccount, r2.messageOwner, r10) : r12.id)) goto L217;
         */
        /* JADX WARN: Code restructure failed: missing block: B:274:0x0485, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.peer_id) == org.telegram.messenger.MessageObject.getPeerId(r2.messageOwner.peer_id)) goto L230;
         */
        /* JADX WARN: Code restructure failed: missing block: B:282:0x04a0, code lost:
            if (r2.getSenderId() == r3.getSenderId()) goto L230;
         */
        /* JADX WARN: Code restructure failed: missing block: B:300:0x04f3, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r2) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L230;
         */
        /* JADX WARN: Code restructure failed: missing block: B:301:0x04f5, code lost:
            r2 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:418:0x06d6, code lost:
            if (r21.this$0.chatListItemAnimator == null) goto L319;
         */
        /* JADX WARN: Code restructure failed: missing block: B:435:0x0758, code lost:
            if (r21.this$0.chatListView.getScrollState() != 0) goto L21;
         */
        /* JADX WARN: Code restructure failed: missing block: B:436:0x075a, code lost:
            r5 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:437:0x075c, code lost:
            r5 = false;
         */
        /* JADX WARN: Removed duplicated region for block: B:110:0x01b7  */
        /* JADX WARN: Removed duplicated region for block: B:116:0x01cb  */
        /* JADX WARN: Removed duplicated region for block: B:123:0x01f0  */
        /* JADX WARN: Removed duplicated region for block: B:124:0x01f2  */
        /* JADX WARN: Removed duplicated region for block: B:127:0x01f7  */
        /* JADX WARN: Removed duplicated region for block: B:150:0x0285  */
        /* JADX WARN: Removed duplicated region for block: B:153:0x029f  */
        /* JADX WARN: Removed duplicated region for block: B:162:0x02cc  */
        /* JADX WARN: Removed duplicated region for block: B:220:0x03ab  */
        /* JADX WARN: Removed duplicated region for block: B:306:0x0504  */
        /* JADX WARN: Removed duplicated region for block: B:315:0x0522  */
        /* JADX WARN: Removed duplicated region for block: B:317:0x0525  */
        /* JADX WARN: Removed duplicated region for block: B:321:0x0530  */
        /* JADX WARN: Removed duplicated region for block: B:327:0x054e  */
        /* JADX WARN: Removed duplicated region for block: B:329:0x0553  */
        /* JADX WARN: Removed duplicated region for block: B:332:0x0567  */
        /* JADX WARN: Removed duplicated region for block: B:333:0x0569  */
        /* JADX WARN: Removed duplicated region for block: B:336:0x0576  */
        /* JADX WARN: Removed duplicated region for block: B:342:0x058c  */
        /* JADX WARN: Removed duplicated region for block: B:358:0x05cd  */
        /* JADX WARN: Removed duplicated region for block: B:365:0x05ec  */
        /* JADX WARN: Removed duplicated region for block: B:368:0x05fa  */
        /* JADX WARN: Removed duplicated region for block: B:422:0x06fa  */
        /* JADX WARN: Removed duplicated region for block: B:426:0x071f  */
        /* JADX WARN: Removed duplicated region for block: B:429:0x0732  */
        /* JADX WARN: Removed duplicated region for block: B:430:0x0739  */
        /* JADX WARN: Removed duplicated region for block: B:99:0x0170  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
            boolean z;
            TLObject tLObject;
            String string;
            ChatActionCell chatActionCell;
            boolean z2;
            boolean z3;
            int i2;
            int i3;
            boolean z4;
            boolean z5;
            boolean z6;
            boolean z7;
            int itemViewType;
            boolean z8;
            boolean z9;
            ChatActivity chatActivity;
            int indexOf;
            boolean z10;
            MessageObject.SendAnimationData sendAnimationData;
            ViewTreeObserver viewTreeObserver;
            ViewTreeObserver.OnPreDrawListener onPreDrawListener;
            ChatActivity chatActivity2;
            ChatActivityEnterView chatActivityEnterView;
            int i4;
            View view;
            InstantCameraView instantCameraView;
            TLRPC.MessageFwdHeader messageFwdHeader;
            String str;
            boolean z11;
            long j;
            String str2;
            boolean z12;
            TLRPC.ChatFull chatFull;
            TLRPC.Chat chat;
            boolean z13;
            int i5;
            if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                BotHelpCell botHelpCell = (BotHelpCell) viewHolder.itemView;
                if (UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                    string = LocaleController.getString(R.string.RepliesChatInfo);
                    z = false;
                } else {
                    z = false;
                    ChatActivity chatActivity3 = ChatActivity.this;
                    TLRPC.User user = chatActivity3.currentUser;
                    if (user == null || user.id != UserObject.VERIFY) {
                        TL_bots.BotInfo botInfo = chatActivity3.botInfo.size() != 0 ? (TL_bots.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id) : null;
                        String str3 = botInfo != null ? botInfo.description : null;
                        if (botInfo != null) {
                            tLObject = botInfo.description_document;
                            if (tLObject == null) {
                                tLObject = botInfo.description_photo;
                            }
                        } else {
                            tLObject = null;
                        }
                        botHelpCell.setText(true, str3, tLObject, botInfo);
                        ChatActivity.this.updateBotHelpCellClick(botHelpCell);
                    }
                    string = LocaleController.getString(R.string.VerifyChatInfo);
                }
                botHelpCell.setText(z, string);
                ChatActivity.this.updateBotHelpCellClick(botHelpCell);
            } else if (i == this.loadingDownRow || i == this.loadingUpRow) {
                ((ChatLoadingCell) viewHolder.itemView).setProgressVisible(ChatActivity.this.loadsCount > 1);
            } else {
                if (i == this.hintRow) {
                    chatActionCell = (ChatActionCell) viewHolder.itemView;
                    ChatActivity.this.createHint2MessageObject();
                    chatActionCell.setMessageObject(ChatActivity.this.hint2MessageObject);
                    if (ChatActivity.this.chatMode == 3) {
                        i5 = R.string.SavedMessagesProfileHint;
                    } else {
                        if (ChatActivity.this.chatMode == 5) {
                            i5 = R.string.BusinessRepliesHint;
                        }
                        chatActionCell.setAlpha(1.0f);
                    }
                    chatActionCell.setCustomText(LocaleController.getString(i5));
                    chatActionCell.setAlpha(1.0f);
                } else {
                    int i6 = this.messagesStartRow;
                    if (i < i6 || i >= this.messagesEndRow) {
                        return;
                    }
                    ArrayList arrayList = this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages;
                    MessageObject messageObject = (MessageObject) arrayList.get(i - i6);
                    View view2 = viewHolder.itemView;
                    if (view2 instanceof ChatMessageCell) {
                        final ChatMessageCell chatMessageCell = (ChatMessageCell) view2;
                        MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                        ChatActivity chatActivity4 = ChatActivity.this;
                        chatMessageCell.isChat = chatActivity4.currentChat != null || UserObject.isUserSelf(chatActivity4.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser) || ChatActivity.this.chatMode == 7;
                        chatMessageCell.isSavedChat = ChatActivity.this.chatMode == 3;
                        chatMessageCell.isSavedPreviewChat = ChatActivity.this.chatMode == 3 && ChatActivity.this.isInsideContainer;
                        ChatActivity chatActivity5 = ChatActivity.this;
                        TLRPC.User user2 = chatActivity5.currentUser;
                        chatMessageCell.isBot = user2 != null && user2.bot;
                        chatMessageCell.isMegagroup = ChatObject.isChannel(chatActivity5.currentChat) && ChatActivity.this.currentChat.megagroup;
                        chatMessageCell.isForum = ChatObject.isForum(ChatActivity.this.currentChat);
                        if (ChatObject.isForum(ChatActivity.this.currentChat)) {
                            ChatActivity chatActivity6 = ChatActivity.this;
                            if (chatActivity6.isTopic && chatActivity6.getTopicId() == 1) {
                                z2 = true;
                                chatMessageCell.isForumGeneral = z2;
                                chatMessageCell.isThreadChat = ChatActivity.this.threadMessageId == 0 || (chatMessageCell.isForum && ChatActivity.this.isTopic);
                                if (ChatActivity.this.chatMode != 1 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                    chat = ChatActivity.this.currentChat;
                                    if (chat.has_link && !chat.megagroup) {
                                        z3 = true;
                                        chatMessageCell.hasDiscussion = z3;
                                        chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                                        chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (chatFull = ChatActivity.this.chatInfo) == null) ? 0L : chatFull.linked_chat_id;
                                        chatMessageCell.isRepliesChat = (ChatActivity.this.chatMode == 7 || ChatActivity.this.searchType != 1) ? UserObject.isReplyUser(ChatActivity.this.currentUser) : UserObject.isReplyUser(messageObject.getDialogId());
                                        chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                                        if (validGroupedMessage == null) {
                                            MessageObject.GroupedMessagePosition position = validGroupedMessage.getPosition(messageObject);
                                            if (position != null) {
                                                if (validGroupedMessage.isDocuments) {
                                                    int size = (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(position);
                                                    i3 = validGroupedMessage.posArray.indexOf(position) + i + 1;
                                                    z5 = false;
                                                    z6 = false;
                                                    z7 = false;
                                                    i2 = size;
                                                    z4 = false;
                                                } else {
                                                    if ((position.flags & 4) != 0) {
                                                        i3 = validGroupedMessage.reversed ? (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(position) : validGroupedMessage.posArray.indexOf(position) + i + 1;
                                                        z12 = false;
                                                        z7 = false;
                                                    } else {
                                                        z12 = true;
                                                        i3 = -100;
                                                        z7 = true;
                                                    }
                                                    if ((position.flags & 8) != 0) {
                                                        int indexOf2 = validGroupedMessage.reversed ? i + validGroupedMessage.posArray.indexOf(position) + 1 : (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(position);
                                                        z5 = false;
                                                        z6 = false;
                                                        boolean z14 = z12;
                                                        i2 = indexOf2;
                                                        z4 = z14;
                                                    } else {
                                                        z4 = z12;
                                                        z5 = true;
                                                        z6 = true;
                                                        i2 = -100;
                                                    }
                                                }
                                                int itemViewType2 = getItemViewType(i2);
                                                itemViewType = getItemViewType(i3);
                                                if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup) && itemViewType2 == viewHolder.getItemViewType()) {
                                                    MessageObject messageObject2 = (MessageObject) arrayList.get(i2 - this.messagesStartRow);
                                                    z6 = messageObject2.isOutOwner() != messageObject.isOutOwner() && Math.abs(messageObject2.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                                    if (z6) {
                                                        if (messageObject.isImportedForward() || messageObject2.isImportedForward()) {
                                                            if (messageObject.isImportedForward() && messageObject2.isImportedForward() && Math.abs(messageObject2.messageOwner.fwd_from.date - messageObject.messageOwner.fwd_from.date) <= 300) {
                                                                TLRPC.MessageFwdHeader messageFwdHeader2 = messageObject2.messageOwner.fwd_from;
                                                                String str4 = messageFwdHeader2.from_name;
                                                                if (str4 == null || (str2 = messageObject.messageOwner.fwd_from.from_name) == null) {
                                                                    TLRPC.Peer peer = messageFwdHeader2.from_id;
                                                                    if (peer != null) {
                                                                        if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                                        }
                                                                    }
                                                                } else {
                                                                    z6 = str4.equals(str2);
                                                                }
                                                            }
                                                            z6 = false;
                                                        } else {
                                                            ChatActivity chatActivity7 = ChatActivity.this;
                                                            if (chatActivity7.currentChat != null) {
                                                                long fromChatId = messageObject2.getFromChatId();
                                                                boolean z15 = fromChatId == messageObject.getFromChatId();
                                                                if (z5 || !z15 || fromChatId >= 0 || !ChatActivity.this.currentChat.megagroup) {
                                                                    z6 = z15;
                                                                }
                                                                z6 = false;
                                                            } else if (UserObject.isUserSelf(chatActivity7.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                                                if (!messageObject.isPrivateForward()) {
                                                                    if (!messageObject2.isPrivateForward()) {
                                                                    }
                                                                }
                                                                z6 = false;
                                                            } else if (ChatActivity.this.chatMode == 7) {
                                                            }
                                                        }
                                                    }
                                                }
                                                if (itemViewType == viewHolder.getItemViewType()) {
                                                    MessageObject messageObject3 = (MessageObject) arrayList.get(i3 - this.messagesStartRow);
                                                    boolean z16 = !(messageObject3.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup) && messageObject3.isOutOwner() == messageObject.isOutOwner() && Math.abs(messageObject3.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                                    if (z16) {
                                                        if (messageObject.isImportedForward() || messageObject3.isImportedForward()) {
                                                            if (messageObject.isImportedForward() && messageObject3.isImportedForward() && Math.abs(messageObject.messageOwner.fwd_from.date - messageObject3.messageOwner.fwd_from.date) <= 300) {
                                                                TLRPC.MessageFwdHeader messageFwdHeader3 = messageObject3.messageOwner.fwd_from;
                                                                String str5 = messageFwdHeader3.from_name;
                                                                if (str5 == null || (str = messageObject.messageOwner.fwd_from.from_name) == null) {
                                                                    TLRPC.Peer peer2 = messageFwdHeader3.from_id;
                                                                    if (peer2 != null) {
                                                                        if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                                        }
                                                                    }
                                                                } else {
                                                                    z4 = str5.equals(str);
                                                                }
                                                            }
                                                            z4 = false;
                                                        } else {
                                                            ChatActivity chatActivity8 = ChatActivity.this;
                                                            if (chatActivity8.currentChat != null) {
                                                                long fromChatId2 = messageObject3.getFromChatId();
                                                                boolean z17 = (fromChatId2 != messageObject.getFromChatId() || messageObject.isImportedForward() || messageObject3.isImportedForward()) ? false : true;
                                                                if (!z7 && z17 && fromChatId2 < 0 && ChatActivity.this.currentChat.megagroup) {
                                                                    z17 = false;
                                                                }
                                                                if (z17 && ChatActivity.this.isForumInViewAsMessagesMode()) {
                                                                    TLRPC.TL_forumTopic tL_forumTopic = messageObject.replyToForumTopic;
                                                                    if (tL_forumTopic == null) {
                                                                        z11 = true;
                                                                        j = MessageObject.getTopicId(((BaseFragment) ChatActivity.this).currentAccount, messageObject.messageOwner, true);
                                                                    } else {
                                                                        z11 = true;
                                                                        j = tL_forumTopic.id;
                                                                    }
                                                                }
                                                                z4 = z17;
                                                            } else if (UserObject.isUserSelf(chatActivity8.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                                                if (!messageObject.isPrivateForward()) {
                                                                    if (!messageObject3.isPrivateForward()) {
                                                                    }
                                                                }
                                                            } else if (ChatActivity.this.chatMode == 7) {
                                                            }
                                                            z4 = false;
                                                        }
                                                    }
                                                    z4 = z16;
                                                }
                                                if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup && messageObject.getFromChatId() <= 0 && (messageFwdHeader = messageObject.messageOwner.fwd_from) != null && (messageFwdHeader.saved_from_peer instanceof TLRPC.TL_peerChannel)) {
                                                    if (!z7) {
                                                        z4 = false;
                                                    }
                                                    if (!z5) {
                                                        z8 = z4;
                                                        z9 = false;
                                                        z6 = false;
                                                        messageObject.updateTranslation(z9);
                                                        if (validGroupedMessage != null) {
                                                            int i7 = 0;
                                                            while (i7 < validGroupedMessage.messages.size()) {
                                                                validGroupedMessage.messages.get(i7).updateTranslation(z9);
                                                                i7++;
                                                                z9 = false;
                                                            }
                                                        }
                                                        if (ChatActivity.this.reversed) {
                                                            boolean z18 = z6;
                                                            z6 = z8;
                                                            z8 = z18;
                                                        } else if (validGroupedMessage != null) {
                                                            z8 = false;
                                                            z6 = false;
                                                        }
                                                        chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                                                        chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                                                        chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                                        if (!chatMessageCell.isHighlighted() && ChatActivity.this.highlightMessageQuote != null) {
                                                            long currentTimeMillis = System.currentTimeMillis();
                                                            ChatActivity chatActivity9 = ChatActivity.this;
                                                            chatMessageCell.setHighlightedText(chatActivity9.highlightMessageQuote, true, chatActivity9.highlightMessageQuoteOffset, chatActivity9.highlightMessageQuoteFirst || currentTimeMillis - chatActivity9.highlightMessageQuoteFirstTime < 200);
                                                            ChatActivity chatActivity10 = ChatActivity.this;
                                                            if (chatActivity10.highlightMessageQuoteFirst) {
                                                                chatActivity10.highlightMessageQuoteFirstTime = currentTimeMillis;
                                                            }
                                                            ChatActivity.this.highlightMessageQuoteFirst = false;
                                                        } else if (ChatActivity.this.chatMode == 7 && ChatActivity.this.searchingHashtag != null && ChatActivity.this.searchingQuery != null) {
                                                            chatMessageCell.setHighlightedText(ChatActivity.this.searchingQuery);
                                                        }
                                                        chatActivity = ChatActivity.this;
                                                        if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                                            chatActivity.startMessageUnselect();
                                                        }
                                                        indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                                        if (indexOf != -1) {
                                                            if (messageObject.type != 5 || (instantCameraView = ChatActivity.this.instantCameraView) == null || instantCameraView.getTextureView() == null) {
                                                                if ((messageObject.isAnyKindOfSticker() && !messageObject.isAnimatedEmojiStickers()) || ((sendAnimationData = messageObject.sendAnimationData) != null && sendAnimationData.fromPreview)) {
                                                                    if (!messageObject.sendAnimationData.fromPreview || (chatActivityEnterView = (chatActivity2 = ChatActivity.this).chatActivityEnterView) == null || chatActivityEnterView.messageSendPreview == null) {
                                                                        viewTreeObserver = chatMessageCell.getViewTreeObserver();
                                                                        onPreDrawListener = new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4
                                                                            @Override // android.view.ViewTreeObserver.OnPreDrawListener
                                                                            public boolean onPreDraw() {
                                                                                chatMessageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                                                                                MessageObject.SendAnimationData sendAnimationData2 = chatMessageCell.getMessageObject().sendAnimationData;
                                                                                if (sendAnimationData2 == null) {
                                                                                    return true;
                                                                                }
                                                                                ChatActivity.this.animateSendingViews.add(chatMessageCell);
                                                                                ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                                                                float imageWidth = sendAnimationData2.fromPreview ? 1.0f : sendAnimationData2.width / photoImage.getImageWidth();
                                                                                chatMessageCell.getTransitionParams().ignoreAlpha = true;
                                                                                chatMessageCell.getLocationInWindow(r5);
                                                                                int[] iArr = {0, (int) (iArr[1] - chatMessageCell.getTranslationY())};
                                                                                if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                                                    iArr[1] = iArr[1] + AndroidUtilities.dp(48.0f);
                                                                                }
                                                                                AnimatorSet animatorSet = new AnimatorSet();
                                                                                AnimationProperties.FloatProperty floatProperty = new AnimationProperties.FloatProperty("p1") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.1
                                                                                    @Override // android.util.Property
                                                                                    public Float get(MessageObject.SendAnimationData sendAnimationData3) {
                                                                                        return Float.valueOf(sendAnimationData3.currentScale);
                                                                                    }

                                                                                    @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                                    public void setValue(MessageObject.SendAnimationData sendAnimationData3, float f) {
                                                                                        sendAnimationData3.currentScale = f;
                                                                                    }
                                                                                };
                                                                                AnimationProperties.FloatProperty floatProperty2 = new AnimationProperties.FloatProperty("p2") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.2
                                                                                    @Override // android.util.Property
                                                                                    public Float get(MessageObject.SendAnimationData sendAnimationData3) {
                                                                                        return Float.valueOf(sendAnimationData3.currentX);
                                                                                    }

                                                                                    @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                                    public void setValue(MessageObject.SendAnimationData sendAnimationData3, float f) {
                                                                                        sendAnimationData3.currentX = f;
                                                                                        View view3 = ChatActivity.this.fragmentView;
                                                                                        if (view3 != null) {
                                                                                            view3.invalidate();
                                                                                        }
                                                                                    }
                                                                                };
                                                                                AnimatorSet animatorSet2 = new AnimatorSet();
                                                                                animatorSet2.playTogether(ObjectAnimator.ofFloat(sendAnimationData2, floatProperty, imageWidth, 1.0f), ObjectAnimator.ofFloat(sendAnimationData2, new AnimationProperties.FloatProperty("progress") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.3
                                                                                    @Override // android.util.Property
                                                                                    public Float get(MessageObject.SendAnimationData sendAnimationData3) {
                                                                                        return Float.valueOf(sendAnimationData3.progress);
                                                                                    }

                                                                                    @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                                    public void setValue(MessageObject.SendAnimationData sendAnimationData3, float f) {
                                                                                        sendAnimationData3.progress = f;
                                                                                        View view3 = ChatActivity.this.fragmentView;
                                                                                        if (view3 != null) {
                                                                                            view3.invalidate();
                                                                                        }
                                                                                    }
                                                                                }, 0.0f, 1.0f));
                                                                                animatorSet.playTogether(ObjectAnimator.ofFloat(sendAnimationData2, floatProperty2, sendAnimationData2.x, iArr[0] + (sendAnimationData2.fromPreview ? 0.0f : photoImage.getCenterX())), animatorSet2);
                                                                                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                                                                animatorSet.setDuration(460L);
                                                                                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.4
                                                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                                                    public void onAnimationEnd(Animator animator) {
                                                                                        ChatActivity.this.animateSendingViews.remove(chatMessageCell);
                                                                                        View view3 = ChatActivity.this.fragmentView;
                                                                                        if (view3 != null) {
                                                                                            view3.invalidate();
                                                                                            ChatActivity.this.chatListView.invalidate();
                                                                                        }
                                                                                        chatMessageCell.setAlpha(1.0f);
                                                                                        chatMessageCell.getTransitionParams().ignoreAlpha = false;
                                                                                    }
                                                                                });
                                                                                animatorSet.start();
                                                                                AnimationProperties.FloatProperty floatProperty3 = new AnimationProperties.FloatProperty("alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.5
                                                                                    @Override // android.util.Property
                                                                                    public Float get(MessageObject.SendAnimationData sendAnimationData3) {
                                                                                        return Float.valueOf(sendAnimationData3.timeAlpha);
                                                                                    }

                                                                                    @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                                    public void setValue(MessageObject.SendAnimationData sendAnimationData3, float f) {
                                                                                        sendAnimationData3.timeAlpha = f;
                                                                                        View view3 = ChatActivity.this.fragmentView;
                                                                                        if (view3 != null) {
                                                                                            view3.invalidate();
                                                                                        }
                                                                                    }
                                                                                };
                                                                                AnimatorSet animatorSet3 = new AnimatorSet();
                                                                                animatorSet3.playTogether(ObjectAnimator.ofFloat(sendAnimationData2, floatProperty3, 0.0f, 1.0f));
                                                                                animatorSet3.setDuration(100L);
                                                                                animatorSet3.setStartDelay(150L);
                                                                                animatorSet3.setInterpolator(new DecelerateInterpolator());
                                                                                animatorSet3.start();
                                                                                return true;
                                                                            }
                                                                        };
                                                                    } else {
                                                                        if (((BaseFragment) chatActivity2).actionBar.getVisibility() == 0) {
                                                                            int translationY = ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) + ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                                                                            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                                                                            int currentHeight = translationY + (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0);
                                                                            ChatSearchTabs chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
                                                                            i4 = currentHeight + (chatSearchTabs != null ? chatSearchTabs.getCurrentHeight() : 0) + ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight);
                                                                        } else {
                                                                            i4 = 0;
                                                                        }
                                                                        ChatActivity chatActivity11 = ChatActivity.this;
                                                                        ChatActivity.this.chatActivityEnterView.messageSendPreview.dismissInto(chatMessageCell, i4 + chatActivity11.paddingTopHeight, chatActivity11.fragmentView == null ? 0.0f : view.getHeight());
                                                                        ChatActivity.this.chatActivityEnterView.messageSendPreview = null;
                                                                    }
                                                                }
                                                                ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                                                ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                                                ChatActivity.this.chatActivityEnterView.hideTopView(true);
                                                            } else {
                                                                if (ChatActivity.this.closeInstantCameraAnimation != null) {
                                                                    AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.closeInstantCameraAnimation);
                                                                    ChatActivity.this.closeInstantCameraAnimation = null;
                                                                }
                                                                viewTreeObserver = chatMessageCell.getViewTreeObserver();
                                                                onPreDrawListener = new 3(chatMessageCell);
                                                            }
                                                            viewTreeObserver.addOnPreDrawListener(onPreDrawListener);
                                                            ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                                            ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                                            ChatActivity.this.chatActivityEnterView.hideTopView(true);
                                                        }
                                                        if (!ChatActivity.this.animatingDocuments.isEmpty() && ChatActivity.this.animatingDocuments.containsKey(messageObject.getDocument())) {
                                                            ChatActivity.this.animatingDocuments.remove(messageObject.getDocument());
                                                            if (ChatActivity.this.chatListItemAnimator != null) {
                                                                ChatActivity.this.chatListItemAnimator.onGreetingStickerTransition(viewHolder, ChatActivity.this.greetingsViewContainer);
                                                            }
                                                        }
                                                        if (chatMessageCell.makeVisibleAfterChange) {
                                                            z10 = false;
                                                        } else {
                                                            z10 = false;
                                                            chatMessageCell.makeVisibleAfterChange = false;
                                                            chatMessageCell.setVisibility(0);
                                                        }
                                                        ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                                                        return;
                                                    }
                                                }
                                                z8 = z4;
                                                z9 = false;
                                                messageObject.updateTranslation(z9);
                                                if (validGroupedMessage != null) {
                                                }
                                                if (ChatActivity.this.reversed) {
                                                }
                                                chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                                                chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                                                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                                if (!chatMessageCell.isHighlighted()) {
                                                }
                                                if (ChatActivity.this.chatMode == 7) {
                                                    chatMessageCell.setHighlightedText(ChatActivity.this.searchingQuery);
                                                }
                                                chatActivity = ChatActivity.this;
                                                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                                }
                                                indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                                if (indexOf != -1) {
                                                }
                                                if (!ChatActivity.this.animatingDocuments.isEmpty()) {
                                                    ChatActivity.this.animatingDocuments.remove(messageObject.getDocument());
                                                    if (ChatActivity.this.chatListItemAnimator != null) {
                                                    }
                                                }
                                                if (chatMessageCell.makeVisibleAfterChange) {
                                                }
                                                ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                                                return;
                                            }
                                            z4 = false;
                                            z5 = false;
                                            z6 = false;
                                            i2 = -100;
                                            i3 = -100;
                                        } else {
                                            i2 = i - 1;
                                            i3 = i + 1;
                                            z4 = false;
                                            z5 = false;
                                            z6 = false;
                                        }
                                        z7 = false;
                                        int itemViewType22 = getItemViewType(i2);
                                        itemViewType = getItemViewType(i3);
                                        if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                                            MessageObject messageObject22 = (MessageObject) arrayList.get(i2 - this.messagesStartRow);
                                            if (messageObject22.isOutOwner() != messageObject.isOutOwner()) {
                                            }
                                            if (z6) {
                                            }
                                        }
                                        if (itemViewType == viewHolder.getItemViewType()) {
                                        }
                                        if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                            if (!z7) {
                                            }
                                            if (!z5) {
                                            }
                                        }
                                        z8 = z4;
                                        z9 = false;
                                        messageObject.updateTranslation(z9);
                                        if (validGroupedMessage != null) {
                                        }
                                        if (ChatActivity.this.reversed) {
                                        }
                                        chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                                        chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                                        chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                        if (!chatMessageCell.isHighlighted()) {
                                        }
                                        if (ChatActivity.this.chatMode == 7) {
                                        }
                                        chatActivity = ChatActivity.this;
                                        if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                        }
                                        indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                        if (indexOf != -1) {
                                        }
                                        if (!ChatActivity.this.animatingDocuments.isEmpty()) {
                                        }
                                        if (chatMessageCell.makeVisibleAfterChange) {
                                        }
                                        ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                                        return;
                                    }
                                }
                                z3 = false;
                                chatMessageCell.hasDiscussion = z3;
                                chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                                chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (chatFull = ChatActivity.this.chatInfo) == null) ? 0L : chatFull.linked_chat_id;
                                chatMessageCell.isRepliesChat = (ChatActivity.this.chatMode == 7 || ChatActivity.this.searchType != 1) ? UserObject.isReplyUser(ChatActivity.this.currentUser) : UserObject.isReplyUser(messageObject.getDialogId());
                                chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                                if (validGroupedMessage == null) {
                                }
                                z7 = false;
                                int itemViewType222 = getItemViewType(i2);
                                itemViewType = getItemViewType(i3);
                                if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                                }
                                if (itemViewType == viewHolder.getItemViewType()) {
                                }
                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                }
                                z8 = z4;
                                z9 = false;
                                messageObject.updateTranslation(z9);
                                if (validGroupedMessage != null) {
                                }
                                if (ChatActivity.this.reversed) {
                                }
                                chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                                chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                if (!chatMessageCell.isHighlighted()) {
                                }
                                if (ChatActivity.this.chatMode == 7) {
                                }
                                chatActivity = ChatActivity.this;
                                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                }
                                indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                if (indexOf != -1) {
                                }
                                if (!ChatActivity.this.animatingDocuments.isEmpty()) {
                                }
                                if (chatMessageCell.makeVisibleAfterChange) {
                                }
                                ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                                return;
                            }
                        }
                        z2 = false;
                        chatMessageCell.isForumGeneral = z2;
                        chatMessageCell.isThreadChat = ChatActivity.this.threadMessageId == 0 || (chatMessageCell.isForum && ChatActivity.this.isTopic);
                        if (ChatActivity.this.chatMode != 1) {
                            chat = ChatActivity.this.currentChat;
                            if (chat.has_link) {
                                z3 = true;
                                chatMessageCell.hasDiscussion = z3;
                                chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                                chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (chatFull = ChatActivity.this.chatInfo) == null) ? 0L : chatFull.linked_chat_id;
                                chatMessageCell.isRepliesChat = (ChatActivity.this.chatMode == 7 || ChatActivity.this.searchType != 1) ? UserObject.isReplyUser(ChatActivity.this.currentUser) : UserObject.isReplyUser(messageObject.getDialogId());
                                chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                                if (validGroupedMessage == null) {
                                }
                                z7 = false;
                                int itemViewType2222 = getItemViewType(i2);
                                itemViewType = getItemViewType(i3);
                                if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                                }
                                if (itemViewType == viewHolder.getItemViewType()) {
                                }
                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                }
                                z8 = z4;
                                z9 = false;
                                messageObject.updateTranslation(z9);
                                if (validGroupedMessage != null) {
                                }
                                if (ChatActivity.this.reversed) {
                                }
                                chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                                chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                if (!chatMessageCell.isHighlighted()) {
                                }
                                if (ChatActivity.this.chatMode == 7) {
                                }
                                chatActivity = ChatActivity.this;
                                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                }
                                indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                if (indexOf != -1) {
                                }
                                if (!ChatActivity.this.animatingDocuments.isEmpty()) {
                                }
                                if (chatMessageCell.makeVisibleAfterChange) {
                                }
                                ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                                return;
                            }
                        }
                        z3 = false;
                        chatMessageCell.hasDiscussion = z3;
                        chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                        chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (chatFull = ChatActivity.this.chatInfo) == null) ? 0L : chatFull.linked_chat_id;
                        chatMessageCell.isRepliesChat = (ChatActivity.this.chatMode == 7 || ChatActivity.this.searchType != 1) ? UserObject.isReplyUser(ChatActivity.this.currentUser) : UserObject.isReplyUser(messageObject.getDialogId());
                        chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                        if (validGroupedMessage == null) {
                        }
                        z7 = false;
                        int itemViewType22222 = getItemViewType(i2);
                        itemViewType = getItemViewType(i3);
                        if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                        }
                        if (itemViewType == viewHolder.getItemViewType()) {
                        }
                        if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                        }
                        z8 = z4;
                        z9 = false;
                        messageObject.updateTranslation(z9);
                        if (validGroupedMessage != null) {
                        }
                        if (ChatActivity.this.reversed) {
                        }
                        chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z8, z6);
                        chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() == 0);
                        chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                        if (!chatMessageCell.isHighlighted()) {
                        }
                        if (ChatActivity.this.chatMode == 7) {
                        }
                        chatActivity = ChatActivity.this;
                        if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                        }
                        indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                        if (indexOf != -1) {
                        }
                        if (!ChatActivity.this.animatingDocuments.isEmpty()) {
                        }
                        if (chatMessageCell.makeVisibleAfterChange) {
                        }
                        ChatActivity.this.showBotMessageHint(chatMessageCell, z10);
                        return;
                    } else if (!(view2 instanceof ChatActionCell)) {
                        if (view2 instanceof ChatUnreadCell) {
                            ((ChatUnreadCell) view2).setText(LocaleController.getString(R.string.UnreadMessages));
                            if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                                ChatActivity.this.createUnreadMessageAfterId = 0;
                                return;
                            }
                            return;
                        }
                        return;
                    } else {
                        chatActionCell = (ChatActionCell) view2;
                        chatActionCell.setMessageObject(messageObject);
                        chatActionCell.setAlpha(1.0f);
                    }
                }
                chatActionCell.setSpoilersSuppressed(z13);
            }
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            ChatMessageCell chatMessageCell;
            ChatActionCell chatActionCell = null;
            if (i == 0) {
                ArrayList arrayList = (ArrayList) ChatActivity.chatMessageCellsCache.get(((BaseFragment) ChatActivity.this).currentAccount);
                if (arrayList == null || arrayList.isEmpty()) {
                    Context context = this.mContext;
                    int i2 = ((BaseFragment) ChatActivity.this).currentAccount;
                    ChatActivity chatActivity = ChatActivity.this;
                    chatMessageCell = new ChatMessageCell(context, i2, true, chatActivity.sharedResources, chatActivity.themeDelegate);
                } else {
                    arrayList.remove(0);
                    chatMessageCell = (View) arrayList.get(0);
                }
                ChatMessageCell chatMessageCell2 = (ChatMessageCell) chatMessageCell;
                chatMessageCell2.setResourcesProvider(ChatActivity.this.themeDelegate);
                chatMessageCell2.shouldCheckVisibleOnScreen = false;
                chatMessageCell2.setDelegate(new ChatMessageCellDelegate());
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell2.setAllowAssistant(true);
                }
                chatActionCell = chatMessageCell;
            } else if (i == 1) {
                ChatActionCell chatActionCell2 = new ChatActionCell(this.mContext, true, ChatActivity.this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1
                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
                        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
                        accessibilityNodeInfo.setVisibleToUser(true);
                    }
                };
                chatActionCell2.setInvalidateColors(true);
                chatActionCell2.setDelegate(new 2());
                chatActionCell = chatActionCell2;
            } else if (i == 2) {
                chatActionCell = new ChatUnreadCell(this.mContext, ChatActivity.this.themeDelegate);
            } else if (i == 3) {
                BotHelpCell botHelpCell = new BotHelpCell(this.mContext, ChatActivity.this.themeDelegate);
                botHelpCell.setDelegate(new BotHelpCell.BotHelpCellDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda0
                    @Override // org.telegram.ui.Cells.BotHelpCell.BotHelpCellDelegate
                    public final void didPressUrl(String str) {
                        ChatActivity.ChatActivityAdapter.this.lambda$onCreateViewHolder$0(str);
                    }
                });
                chatActionCell = botHelpCell;
            } else if (i == 4) {
                Context context2 = this.mContext;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActionCell = new ChatLoadingCell(context2, chatActivity2.contentView, chatActivity2.themeDelegate);
            }
            chatActionCell.setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder(chatActionCell);
        }

        /* JADX WARN: Removed duplicated region for block: B:106:0x020e  */
        /* JADX WARN: Removed duplicated region for block: B:111:0x021f  */
        /* JADX WARN: Removed duplicated region for block: B:115:0x022c  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onViewAttachedToWindow(RecyclerView.ViewHolder viewHolder) {
            TLRPC.Message message;
            boolean z;
            boolean z2;
            String lastSearchQuery;
            ChatActivity chatActivity;
            long currentTimeMillis;
            ChatActivity chatActivity2;
            ChatActivity chatActivity3;
            String stickerEmoji;
            MessagesController.EmojiSound emojiSound;
            View view = viewHolder.itemView;
            if ((view instanceof ChatMessageCell) || (view instanceof ChatActionCell)) {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            View view2 = viewHolder.itemView;
            if (view2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view2;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                chatMessageCell.showHintButton(true, false, -1);
                if (ChatActivity.this.hintMessageObject != null && ChatActivity.this.hintMessageObject.equals(messageObject)) {
                    chatMessageCell.showHintButton(false, false, ChatActivity.this.hintMessageType);
                }
                if (messageObject.isAnimatedEmoji() && (stickerEmoji = messageObject.getStickerEmoji()) != null && (emojiSound = ChatActivity.this.getMessagesController().emojiSounds.get(stickerEmoji.replace("️", ""))) != null) {
                    ChatActivity.this.getMediaController().playEmojiSound(ChatActivity.this.getAccountInstance(), stickerEmoji, emojiSound, true);
                }
                if (messageObject.updateTranslation(false)) {
                    chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                } else {
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null) {
                        for (int i = 0; i < currentMessagesGroup.messages.size(); i++) {
                            currentMessagesGroup.messages.get(i).updateTranslation();
                        }
                    }
                }
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                    ChatActivity chatActivity4 = ChatActivity.this;
                    chatActivity4.highlightMessageQuoteFirst = false;
                    chatActivity4.highlightMessageQuoteFirstTime = 0L;
                    ChatActivity chatActivity5 = ChatActivity.this;
                    chatActivity5.highlightMessageQuote = null;
                    chatMessageCell.setCheckBoxVisible(chatActivity5.threadMessageObjects == null || !ChatActivity.this.threadMessageObjects.contains(messageObject), false);
                    int i2 = messageObject.getDialogId() == ChatActivity.this.dialog_id ? 0 : 1;
                    if (ChatActivity.this.selectedMessagesIds[i2].indexOfKey(messageObject.getId()) >= 0) {
                        ChatActivity.this.setCellSelectionBackground(messageObject, chatMessageCell, i2, false);
                        z = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, false);
                        z = false;
                    }
                    z2 = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setChecked(false, false, false);
                    chatMessageCell.setCheckBoxVisible(false, false);
                    z = false;
                    z2 = false;
                }
                chatMessageCell.setCheckPressed(!z2, z2 && z);
                if (ChatActivity.this.chatMode != 7 || ChatActivity.this.searchingHashtag == null || ChatActivity.this.searchingQuery == null) {
                    if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                        if (ChatActivity.this.getMediaDataController().isMessageFound(messageObject.getId(), messageObject.getDialogId() == ChatActivity.this.mergeDialogId) && ChatActivity.this.getMediaDataController().getLastSearchQuery() != null) {
                            lastSearchQuery = ChatActivity.this.getMediaDataController().getLastSearchQuery();
                        }
                    }
                    chatMessageCell.setHighlightedText(null);
                    if (((BaseFragment) ChatActivity.this).inPreviewMode || !chatMessageCell.isHighlighted()) {
                        chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && (chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId || (chatMessageCell.getCurrentMessagesGroup() != null && chatMessageCell.getCurrentMessagesGroup().contains(ChatActivity.this.highlightMessageId))));
                        if (chatMessageCell.isHighlighted() && ChatActivity.this.highlightMessageQuote != null) {
                            currentTimeMillis = System.currentTimeMillis();
                            chatActivity2 = ChatActivity.this;
                            if (!chatMessageCell.setHighlightedText(chatActivity2.highlightMessageQuote, true, chatActivity2.highlightMessageQuoteOffset, !chatActivity2.highlightMessageQuoteFirst || currentTimeMillis - chatActivity2.highlightMessageQuoteFirstTime < 200)) {
                                ChatActivity chatActivity6 = ChatActivity.this;
                                if (chatActivity6.showNoQuoteAlert) {
                                    chatActivity6.showNoQuoteFound();
                                }
                            }
                            chatActivity3 = ChatActivity.this;
                            chatActivity3.showNoQuoteAlert = false;
                            if (chatActivity3.highlightMessageQuoteFirst) {
                                chatActivity3.highlightMessageQuoteFirstTime = currentTimeMillis;
                            }
                            ChatActivity.this.highlightMessageQuoteFirst = false;
                        }
                        chatActivity = ChatActivity.this;
                        if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                            chatActivity.startMessageUnselect();
                        }
                    }
                } else {
                    lastSearchQuery = ChatActivity.this.searchingQuery;
                }
                chatMessageCell.setHighlightedText(lastSearchQuery);
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                }
                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && (chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId || (chatMessageCell.getCurrentMessagesGroup() != null && chatMessageCell.getCurrentMessagesGroup().contains(ChatActivity.this.highlightMessageId))));
                if (chatMessageCell.isHighlighted()) {
                    currentTimeMillis = System.currentTimeMillis();
                    chatActivity2 = ChatActivity.this;
                    if (!chatMessageCell.setHighlightedText(chatActivity2.highlightMessageQuote, true, chatActivity2.highlightMessageQuoteOffset, !chatActivity2.highlightMessageQuoteFirst || currentTimeMillis - chatActivity2.highlightMessageQuoteFirstTime < 200)) {
                    }
                    chatActivity3 = ChatActivity.this;
                    chatActivity3.showNoQuoteAlert = false;
                    if (chatActivity3.highlightMessageQuoteFirst) {
                    }
                    ChatActivity.this.highlightMessageQuoteFirst = false;
                }
                chatActivity = ChatActivity.this;
                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                }
            }
            int adapterPosition = viewHolder.getAdapterPosition();
            int i3 = this.messagesStartRow;
            if (adapterPosition < i3 || adapterPosition >= this.messagesEndRow) {
                return;
            }
            MessageObject messageObject2 = (MessageObject) (this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages).get(adapterPosition - i3);
            View view3 = viewHolder.itemView;
            if (messageObject2 == null || (message = messageObject2.messageOwner) == null || !message.media_unread || !message.mentioned) {
                return;
            }
            if (!((BaseFragment) ChatActivity.this).inPreviewMode && ChatActivity.this.chatMode == 0 && !messageObject2.isVoice() && !messageObject2.isRoundVideo()) {
                ChatActivity.access$23110(ChatActivity.this);
                if (ChatActivity.this.newMentionsCount <= 0) {
                    ChatActivity.this.newMentionsCount = 0;
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                } else {
                    ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                }
                ChatActivity.this.getMessagesController().markMentionMessageAsRead(messageObject2.getId(), ChatObject.isChannel(ChatActivity.this.currentChat) ? ChatActivity.this.currentChat.id : 0L, ChatActivity.this.dialog_id);
                messageObject2.setContentIsRead();
            }
            if (view3 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell2 = (ChatMessageCell) view3;
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    chatMessageCell2.setHighlighted(true);
                } else {
                    chatMessageCell2.setHighlightedAnimated();
                }
            }
        }

        public void updateRowAtPosition(int i) {
            int i2;
            if (ChatActivity.this.chatLayoutManager == null || this.isFrozen || this.isFiltered) {
                return;
            }
            int i3 = 0;
            if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                int i4 = 0;
                while (true) {
                    if (i4 >= childCount) {
                        break;
                    }
                    View childAt = ChatActivity.this.chatListView.getChildAt(i4);
                    if ((childAt instanceof ChatMessageCell) && ((ChatMessageCell) childAt).getMessageObject() == ChatActivity.this.unreadMessageObject) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.messages.indexOf(chatActivity.unreadMessageObject) >= 0) {
                            int i5 = this.messagesStartRow;
                            ChatActivity chatActivity2 = ChatActivity.this;
                            i2 = i5 + chatActivity2.messages.indexOf(chatActivity2.unreadMessageObject);
                            i3 = ChatActivity.this.getScrollingOffsetForView(childAt);
                        }
                    } else {
                        i4++;
                    }
                }
            }
            i2 = -1;
            notifyItemChanged(i);
            if (i2 != -1) {
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i2, i3);
            }
        }

        public View updateRowWithMessageObject(MessageObject messageObject, boolean z, boolean z2) {
            if (z) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.getMessageObject() == messageObject && !chatMessageCell.isAdminLayoutChanged()) {
                            chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            return chatMessageCell;
                        }
                    }
                }
            }
            int indexOf = (this.isFrozen ? this.frozenMessages : this.isFiltered ? this.filteredMessages : ChatActivity.this.messages).indexOf(messageObject);
            if (indexOf == -1) {
                return null;
            }
            if (z2) {
                int i2 = ChatActivity.lastStableId;
                ChatActivity.lastStableId = i2 + 1;
                messageObject.stableId = i2;
                notifyDataSetChanged(true);
            } else {
                updateRowAtPosition(indexOf + this.messagesStartRow);
            }
            return null;
        }

        public void updateRowsSafe() {
            int i = this.rowCount;
            int i2 = this.botInfoRow;
            int i3 = this.hintRow;
            int i4 = this.loadingUpRow;
            int i5 = this.loadingDownRow;
            int i6 = this.messagesStartRow;
            int i7 = this.messagesEndRow;
            updateRowsInternal();
            if (i == this.rowCount && i2 == this.botInfoRow && i4 == this.loadingUpRow && i5 == this.loadingDownRow && i6 == this.messagesStartRow && i7 == this.messagesEndRow && i3 == this.hintRow) {
                return;
            }
            notifyDataSetChanged(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public interface ChatActivityDelegate {

        /* loaded from: classes4.dex */
        public abstract /* synthetic */ class -CC {
            public static void $default$onUnpin(ChatActivityDelegate chatActivityDelegate, boolean z, boolean z2) {
            }

            public static void $default$openReplyMessage(ChatActivityDelegate chatActivityDelegate, int i) {
            }
        }

        void onUnpin(boolean z, boolean z2);

        void openHashtagSearch(String str);

        void openReplyMessage(int i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class ChatActivityEnterViewDelegate implements ChatActivityEnterView.ChatActivityEnterViewDelegate {
        boolean isEditTextItemVisibilitySuppressed;
        int lastSize;

        private ChatActivityEnterViewDelegate() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMessageEditEnd$2() {
            ChatActivity.this.hideFieldPanel(true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onStickersExpandedChange$3() {
            if (ChatActivity.this.suggestEmojiPanel == null || !ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                return;
            }
            ChatActivity.this.suggestEmojiPanel.setVisibility(8);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$0(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$1(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void bottomPanelTranslationYChanged(float f) {
            if (f != 0.0f) {
                ChatActivity.this.wasManualScroll = true;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.bottomPanelTranslationY = chatActivity.chatActivityEnterView.panelAnimationInProgress() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() - f : 0.0f;
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.bottomPanelTranslationYReverse = chatActivity2.chatActivityEnterView.panelAnimationInProgress() ? f : 0.0f;
            ChatActivity.this.chatActivityEnterView.setTranslationY(f);
            ChatActivity.this.mentionContainer.setTranslationY(f);
            ChatActivity chatActivity3 = ChatActivity.this;
            chatActivity3.contentView.setEmojiOffset(chatActivity3.chatActivityEnterView.panelAnimationInProgress(), ChatActivity.this.bottomPanelTranslationY);
            float topViewTranslation = f + ChatActivity.this.chatActivityEnterView.getTopViewTranslation();
            ChatActivity.this.mentionContainer.setTranslationY(topViewTranslation);
            ChatActivity.this.chatListView.setTranslationY(topViewTranslation);
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.updateBulletinLayout();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean checkCanRemoveRestrictionsByBoosts() {
            return ChatActivity.this.checkCanRemoveRestrictionsByBoosts();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void didPressAttachButton() {
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int getContentViewHeight() {
            return ChatActivity.this.contentView.getHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public ReplyQuote getReplyQuote() {
            return ChatActivity.this.replyingQuote;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public /* synthetic */ TL_stories.StoryItem getReplyToStory() {
            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getReplyToStory(this);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public TLRPC.TL_channels_sendAsPeers getSendAsPeers() {
            return ChatActivity.this.sendAsPeersObj;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasForwardingMessages() {
            MessagePreviewParams.Messages messages;
            MessagePreviewParams messagePreviewParams = ChatActivity.this.messagePreviewParams;
            return (messagePreviewParams == null || (messages = messagePreviewParams.forwardMessages) == null || messages.messages.isEmpty()) ? false : true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasScheduledMessages() {
            if ((!ChatActivity.this.getMessagesController().isForum(ChatActivity.this.getDialogId()) || ChatActivity.this.isTopic) && ChatActivity.this.scheduledMessagesCount > 0) {
                return ChatActivity.this.chatMode == 0 || (ChatActivity.this.chatMode == 3 && ChatActivity.this.getSavedDialogId() == ChatActivity.this.getUserConfig().getClientUserId());
            }
            return false;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int measureKeyboardHeight() {
            return ChatActivity.this.contentView.measureKeyboardHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needChangeVideoPreviewState(int i, float f) {
            InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
            if (instantCameraView != null) {
                instantCameraView.changeVideoPreviewState(i, f);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needSendTyping() {
            if (ChatActivity.this.chatMode == 5 || ChatActivity.this.chatMode == 6) {
                return;
            }
            ChatActivity.this.getMessagesController().sendTyping(ChatActivity.this.dialog_id, ChatActivity.this.threadMessageId, 0, ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordAudio(int i) {
            int i2 = i == 0 ? 8 : 0;
            if (ChatActivity.this.overlayView.getVisibility() != i2) {
                ChatActivity.this.overlayView.setVisibility(i2);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordVideo(int i, boolean z, int i2, int i3, long j) {
            ChatActivity.this.checkInstantCameraView();
            InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
            if (instantCameraView != null) {
                if (i == 0) {
                    instantCameraView.showCamera(false);
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatAdapter.updateRowsSafe();
                } else if (i == 1 || i == 3 || i == 4) {
                    instantCameraView.send(i, z, i2, i3, j);
                } else if (i == 2 || i == 5) {
                    instantCameraView.cancel(i == 2);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonHidden() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonShow() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.headerItem != null) {
                ChatActivity.this.headerItem.setVisibility(0);
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAudioVideoInterfaceUpdated() {
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuClose() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.fireUpdate();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuOpen() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onEditTextScroll() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onKeyboardRequested() {
            ChatActivity.this.checkAdjustResize();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageEditEnd(boolean z) {
            boolean z2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (z) {
                return;
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null) {
                mentionsContainerView.getAdapter().setNeedBotContext(true);
            }
            if (ChatActivity.this.editingMessageObject != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onMessageEditEnd$2();
                    }
                }, 30L);
            }
            if (ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                ChatActivity.this.chatActivityEnterView.setFieldFocused();
                z2 = true;
            } else {
                z2 = false;
            }
            ChatActivity.this.chatActivityEnterView.setAllowStickersAndGifs(true, true, true, z2);
            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                ChatActivity.this.getConnectionsManager().cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                ChatActivity.this.editingMessageObjectReqId = 0;
            }
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updateVisibleRows();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageSend(CharSequence charSequence, boolean z, int i) {
            MessagePreviewParams messagePreviewParams;
            MessagePreviewParams.Messages messages;
            TLRPC.Message message;
            MessagePreviewParams.Messages messages2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().addHashtagsFromMessage(charSequence);
            }
            boolean z2 = false;
            if (i != 0) {
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                if (charSequence != null) {
                    ChatActivity.access$3508(ChatActivity.this);
                }
                MessagePreviewParams messagePreviewParams2 = ChatActivity.this.messagePreviewParams;
                if (messagePreviewParams2 != null && (messages2 = messagePreviewParams2.forwardMessages) != null && !messages2.messages.isEmpty()) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivity.access$3512(chatActivity2, chatActivity2.messagePreviewParams.forwardMessages.messages.size());
                }
                ChatActivity.this.updateScheduledInterface(false);
            }
            if (!TextUtils.isEmpty(charSequence) && (messagePreviewParams = ChatActivity.this.messagePreviewParams) != null && (messages = messagePreviewParams.forwardMessages) != null && !messages.messages.isEmpty() && ChatActivity.this.messagePreviewParams.quote == null) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                ChatActivity.this.messagePreviewParams.forwardMessages.getSelectedMessages(arrayList);
                boolean z3 = arrayList.size() > 0;
                TLRPC.Peer peer = ChatActivity.this.getMessagesController().getPeer(ChatActivity.this.dialog_id);
                int i2 = 0;
                while (true) {
                    if (i2 >= arrayList.size()) {
                        z2 = z3;
                        break;
                    }
                    MessageObject messageObject = arrayList.get(i2);
                    if (messageObject != null && (message = messageObject.messageOwner) != null && !MessageObject.peersEqual(message.peer_id, peer)) {
                        break;
                    }
                    i2++;
                }
                if (z2) {
                    Bulletin createSimpleBulletin = BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.hint_swipe_reply, LocaleController.getString(R.string.SwipeToReplyHint), LocaleController.getString(R.string.SwipeToReplyHintMessage));
                    RLottieImageView rLottieImageView = ((Bulletin.TwoLineLottieLayout) createSimpleBulletin.getLayout()).imageView;
                    rLottieImageView.setScaleX(1.8f);
                    rLottieImageView.setScaleY(1.8f);
                    createSimpleBulletin.show(true);
                }
            }
            if (ChatObject.isForum(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity3 = ChatActivity.this;
                if (!chatActivity3.isTopic && chatActivity3.replyingMessageObject != null) {
                    long topicId = ChatActivity.this.replyingMessageObject.replyToForumTopic != null ? ChatActivity.this.replyingMessageObject.replyToForumTopic.id : MessageObject.getTopicId(((BaseFragment) ChatActivity.this).currentAccount, ChatActivity.this.replyingMessageObject.messageOwner, true);
                    if (topicId != 0) {
                        ChatActivity.this.getMediaDataController().cleanDraft(ChatActivity.this.dialog_id, topicId, false);
                    }
                }
            }
            ChatActivity.this.hideFieldPanel(z, i, true);
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.getEmojiView() != null) {
                ChatActivity.this.chatActivityEnterView.getEmojiView().onMessageSend();
            }
            if (ChatActivity.this.getMessagesController().premiumFeaturesBlocked() || ChatActivity.this.getMessagesController().transcribeAudioTrialWeeklyNumber > 0 || ChatActivity.this.getMessagesController().didPressTranscribeButtonEnough() || ChatActivity.this.getUserConfig().isPremium() || TextUtils.isEmpty(charSequence) || ChatActivity.this.messages == null) {
                return;
            }
            for (int i3 = 1; i3 < Math.min(5, ChatActivity.this.messages.size()); i3++) {
                MessageObject messageObject2 = (MessageObject) ChatActivity.this.messages.get(i3);
                if (messageObject2 != null && !messageObject2.isOutOwner() && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && messageObject2.isContentUnread())) {
                    TranscribeButton.showOffTranscribe(messageObject2);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSendLongClick() {
            if (ChatActivity.this.scheduledOrNoSoundHint != null) {
                ChatActivity.this.scheduledOrNoSoundHint.hide();
            }
            if (ChatActivity.this.scheduledHint != null) {
                ChatActivity.this.scheduledHint.hide();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
            if (ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                if (Bulletin.getVisibleBulletin() != null && Bulletin.getVisibleBulletin().isShowing()) {
                    Bulletin.getVisibleBulletin().hide();
                }
            } else {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            float f = 0.0f;
            if (mentionsContainerView != null) {
                mentionsContainerView.animate().alpha((ChatActivity.this.chatActivityEnterView.isStickersExpanded() || ChatActivity.this.isInPreviewMode()) ? 0.0f : 1.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
            }
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                ViewPropertyAnimator animate = ChatActivity.this.suggestEmojiPanel.animate();
                if (!ChatActivity.this.chatActivityEnterView.isStickersExpanded() && !ChatActivity.this.isInPreviewMode()) {
                    f = 1.0f;
                }
                animate.alpha(f).setInterpolator(CubicBezierInterpolator.DEFAULT).withEndAction(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onStickersExpandedChange$3();
                    }
                }).start();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersTab(boolean z) {
            if (ChatActivity.this.emojiButtonRed != null) {
                ChatActivity.this.emojiButtonRed.setVisibility(8);
            }
            ChatActivity.this.allowContextBotPanelSecond = !z;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSwitchRecordMode(boolean z) {
            ChatActivity.this.showVoiceHint(false, z);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextChanged(final CharSequence charSequence, boolean z, boolean z2) {
            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(charSequence) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(charSequence, ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false, false);
            }
            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }
            TLRPC.Chat chat = ChatActivity.this.currentChat;
            if ((chat == null || ChatObject.canSendEmbed(chat)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled() && (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption())) {
                if (z) {
                    ChatActivity.this.searchLinks(charSequence, true);
                } else {
                    ChatActivity.this.checkEditLinkRemoved(charSequence);
                    ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.3
                        @Override // java.lang.Runnable
                        public void run() {
                            if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                ChatActivity.this.searchLinks(charSequence, false);
                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                            }
                        }
                    };
                    AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000L : 1000L);
                }
            }
            EmojiAnimationsOverlay emojiAnimationsOverlay = ChatActivity.this.emojiAnimationsOverlay;
            if (emojiAnimationsOverlay != null) {
                emojiAnimationsOverlay.cancelAllAnimations();
            }
            ReactionsEffectOverlay.dismissAll();
            if (z2) {
                return;
            }
            if ((ChatActivity.this.scheduledOrNoSoundHint == null || ChatActivity.this.scheduledOrNoSoundHint.getVisibility() != 0) && (ChatActivity.this.scheduledHint == null || ChatActivity.this.scheduledHint.getVisibility() != 0)) {
                ChatActivity.this.showScheduledHint();
            } else {
                ChatActivity.this.hideSendButtonHints();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSelectionChanged(int i, int i2) {
            if (ChatActivity.this.editTextItem == null) {
                return;
            }
            final ActionBarMenu createMenu = ((BaseFragment) ChatActivity.this).actionBar.createMenu();
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.onTextSelectionChanged(i, i2);
            }
            if (i2 - i > 0) {
                if (ChatActivity.this.editTextItem.getTag() == null) {
                    ChatActivity.this.editTextItem.setTag(1);
                    if (ChatActivity.this.editTextItem.getVisibility() != 0) {
                        if (!(ChatActivity.this.chatMode == 3 && ChatActivity.this.getSavedDialogId() == ChatActivity.this.getUserConfig().getClientUserId()) && (ChatActivity.this.chatMode != 0 || (!(ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) || UserObject.isReplyUser(ChatActivity.this.currentUser) || ChatActivity.this.isReport()))) {
                            ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.dp(48.0f), 0.0f);
                            ofFloat.setDuration(220L);
                            ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                            ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.1
                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationStart(Animator animator) {
                                    ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                                    ChatActivity.this.checkEditTextItemMenu();
                                    ChatActivity.this.editTextItem.setVisibility(0);
                                    createMenu.translateXItems(AndroidUtilities.dp(48.0f));
                                }
                            });
                            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda0
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$0(ActionBarMenu.this, valueAnimator);
                                }
                            });
                            ofFloat.start();
                        } else {
                            ChatActivity.this.editTextItem.setVisibility(0);
                            ChatActivity.this.checkEditTextItemMenu();
                            if (ChatActivity.this.headerItem != null) {
                                ChatActivity.this.headerItem.setVisibility(8);
                            }
                            if (ChatActivity.this.attachItem != null) {
                                ChatActivity.this.attachItem.setVisibility(8);
                            }
                        }
                    }
                }
                ChatActivity.this.editTextStart = i;
                ChatActivity.this.editTextEnd = i2;
            } else if (ChatActivity.this.editTextItem.getTag() != null) {
                ChatActivity.this.editTextItem.setTag(null);
                if (ChatActivity.this.editTextItem.getVisibility() != 8) {
                    if (!(ChatActivity.this.chatMode == 3 && ChatActivity.this.getSavedDialogId() == ChatActivity.this.getUserConfig().getClientUserId()) && (ChatActivity.this.chatMode != 0 || (!(ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) || UserObject.isReplyUser(ChatActivity.this.currentUser) || ChatActivity.this.isReport()))) {
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, AndroidUtilities.dp(48.0f));
                        ofFloat2.setDuration(220L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ofFloat2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                ChatActivity.this.editTextItem.setVisibility(8);
                                createMenu.translateXItems(0.0f);
                                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                                ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = false;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationStart(Animator animator) {
                                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                                ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = true;
                            }
                        });
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda1
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$1(ActionBarMenu.this, valueAnimator);
                            }
                        });
                        ofFloat2.start();
                        return;
                    }
                    ChatActivity.this.editTextItem.setVisibility(8);
                    if (ChatActivity.this.chatActivityEnterView.hasText() && TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                        if (ChatActivity.this.headerItem != null) {
                            ChatActivity.this.headerItem.setVisibility(8);
                        }
                        if (ChatActivity.this.attachItem != null) {
                            ChatActivity.this.attachItem.setVisibility(0);
                            return;
                        }
                        return;
                    }
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.setVisibility(0);
                    }
                    if (ChatActivity.this.attachItem != null) {
                        ChatActivity.this.attachItem.setVisibility(8);
                    }
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSpansChanged(CharSequence charSequence) {
            ChatActivity.this.searchLinks(charSequence, true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTrendingStickersShowed(boolean z) {
            if (!z) {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                return;
            }
            AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            ChatActivity.this.fragmentView.requestLayout();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onUpdateSlowModeButton(View view, boolean z, CharSequence charSequence) {
            ChatActivity.this.showSlowModeHint(view, z, charSequence);
            if (ChatActivity.this.headerItem == null || ChatActivity.this.headerItem.getVisibility() == 0) {
                return;
            }
            ChatActivity.this.headerItem.setVisibility(0);
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onWindowSizeChanged(int i) {
            if (i < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                ChatActivity.this.allowStickersPanel = false;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 0) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(4);
                }
            } else {
                ChatActivity.this.allowStickersPanel = true;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 4 && !ChatActivity.this.isInPreviewMode()) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                }
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.allowContextBotPanel = true ^ chatActivity.chatActivityEnterView.isPopupShowing();
            int i2 = i + (ChatActivity.this.chatActivityEnterView.isPopupShowing() ? 65536 : 0);
            if (this.lastSize != i2) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
            }
            this.lastSize = i2;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean onceVoiceAvailable() {
            TLRPC.User user = ChatActivity.this.currentUser;
            if (user != null && !UserObject.isUserSelf(user)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.currentUser.bot && chatActivity.currentEncryptedChat == null && chatActivity.chatMode == 0) {
                    return true;
                }
            }
            return false;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openScheduledMessages() {
            ChatActivity.this.openScheduledMessages();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void prepareMessageSending() {
            ChatActivity.this.waitingForSendingMessageLoad = true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void scrollToSendingMessage() {
            int sendingMessageId = ChatActivity.this.getSendMessagesHelper().getSendingMessageId(ChatActivity.this.dialog_id);
            if (sendingMessageId != 0) {
                ChatActivity.this.scrollToMessageId(sendingMessageId, 0, true, 0, true, 0);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void toggleVideoRecordingPause() {
            InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
            if (instantCameraView != null) {
                instantCameraView.togglePause();
            }
        }
    }

    /* loaded from: classes4.dex */
    public class ChatActivityFragmentView extends SizeNotifierFrameLayout {
        int backgroundColor;
        Paint backgroundPaint;
        ArrayList drawCaptionAfter;
        ArrayList drawNamesAfter;
        ArrayList drawReactionsAfter;
        ArrayList drawTimeAfter;
        int inputFieldHeight;
        int lastHeight;
        int lastWidth;
        private boolean pressActionBar;
        private long pressTime;
        private float x;
        private float y;

        public ChatActivityFragmentView(Context context, INavigationLayout iNavigationLayout) {
            super(context, iNavigationLayout);
            this.inputFieldHeight = 0;
            this.drawTimeAfter = new ArrayList();
            this.drawNamesAfter = new ArrayList();
            this.drawCaptionAfter = new ArrayList();
            this.drawReactionsAfter = new ArrayList();
            this.adjustPanLayoutHelper = new AdjustPanLayoutHelper(this) { // from class: org.telegram.ui.ChatActivity.ChatActivityFragmentView.1
                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected boolean heightAnimationEnabled() {
                    ChatAttachAlert chatAttachAlert;
                    INavigationLayout parentLayout = ChatActivity.this.getParentLayout();
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.isInsideContainer || ((BaseFragment) chatActivity).inPreviewMode || ((BaseFragment) ChatActivity.this).inBubbleMode || AndroidUtilities.isInMultiwindow || parentLayout == null || ChatActivity.this.fixedKeyboardHeight > 0 || System.currentTimeMillis() - ChatActivity.this.activityResumeTime < 250) {
                        return false;
                    }
                    if ((ChatActivity.this != parentLayout.getLastFragment() || !parentLayout.isTransitionAnimationInProgress()) && !parentLayout.isPreviewOpenAnimationInProgress() && !((BaseFragment) ChatActivity.this).isPaused) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        if (chatActivity2.openAnimationEnded && ((chatAttachAlert = chatActivity2.chatAttachAlert) == null || !chatAttachAlert.isShowing())) {
                            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            return chatActivityEnterView == null || chatActivityEnterView.getTrendingStickersAlert() == null || !ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert().isShowing();
                        }
                    }
                    return false;
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onPanTranslationUpdate(float f, float f2, boolean z) {
                    if (ChatActivity.this.getParentLayout() == null || !ChatActivity.this.getParentLayout().isPreviewOpenAnimationInProgress()) {
                        ChatActivity.this.contentPanTranslation = f;
                        ChatActivity.this.contentPanTranslationT = f2;
                        ChatActivityFragmentView chatActivityFragmentView = ChatActivity.this.contentView;
                        if (chatActivityFragmentView != null) {
                            chatActivityFragmentView.updateBlurContent();
                        }
                        ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
                        if (chatAttachAlert == null || !chatAttachAlert.isShowing()) {
                            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(f);
                            if (ChatActivity.this.tagSelector != null) {
                                ReactionsContainerLayout reactionsContainerLayout = ChatActivity.this.tagSelector;
                                float f3 = ChatActivity.this.contentPanTranslation;
                                SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                                reactionsContainerLayout.setTranslationY(f3 + (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0));
                            }
                            if (ChatActivity.this.savedMessagesSearchHint != null) {
                                ChatActivity.this.savedMessagesSearchHint.setTranslationY(f);
                            }
                            if (ChatActivity.this.savedMessagesHint != null) {
                                ChatActivity.this.savedMessagesHint.setTranslationY(f);
                            }
                            SearchTagsList searchTagsList2 = ChatActivity.this.actionBarSearchTags;
                            if (searchTagsList2 != null) {
                                searchTagsList2.setTranslationY(f);
                            }
                            ChatSearchTabs chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
                            if (chatSearchTabs != null) {
                                chatSearchTabs.setTranslationY(f);
                            }
                            if (ChatActivity.this.emptyViewContainer != null) {
                                ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                            }
                            if (ChatActivity.this.hashtagHistoryView != null) {
                                ChatActivity.this.hashtagHistoryView.setTranslationY(f);
                                ChatActivity.this.hashtagHistoryView.emptyView.setTranslationY((-f) / 2.0f);
                            }
                            if (ChatActivity.this.messagesSearchListContainer != null) {
                                ChatActivity.this.messagesSearchListContainer.setTranslationY(f);
                            }
                            if (ChatActivity.this.hashtagSearchEmptyView != null) {
                                ChatActivity.this.hashtagSearchEmptyView.setTranslationY((-f) / 2.0f);
                            }
                            if (ChatActivity.this.searchViewPager != null) {
                                View currentView = ChatActivity.this.searchViewPager.getCurrentView();
                                if (currentView instanceof ChatActivityContainer) {
                                    ChatActivity chatActivity = ((ChatActivityContainer) currentView).chatActivity;
                                    if (chatActivity.messagesSearchListContainer != null) {
                                        chatActivity.messagesSearchListContainer.setTranslationY(f);
                                    }
                                    if (chatActivity.hashtagSearchEmptyView != null) {
                                        chatActivity.hashtagSearchEmptyView.setTranslationY((-f) / 2.0f);
                                    }
                                }
                            }
                            ChatActivity.this.progressView.setTranslationY(f / 2.0f);
                            int i = (int) f;
                            ChatActivity.this.contentView.setBackgroundTranslation(i);
                            InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
                            if (instantCameraView != null) {
                                instantCameraView.onPanTranslationUpdate(f);
                            }
                            if (ChatActivity.this.blurredView != null) {
                                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(f);
                            }
                            ChatActivity.this.setFragmentPanTranslationOffset(i);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                        } else {
                            ChatActivityFragmentView.this.setNonNoveTranslation(f);
                        }
                        ChatActivity.this.chatListView.invalidate();
                        ChatActivity.this.updateBulletinLayout();
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.onAdjustPanTransitionUpdate(f, f2, z);
                        }
                        MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                        if (mentionsContainerView != null) {
                            mentionsContainerView.onPanTransitionUpdate(f);
                        }
                        if (AndroidUtilities.isTablet() && (ChatActivity.this.getParentActivity() instanceof LaunchActivity)) {
                            BaseFragment lastFragment = ((LaunchActivity) ChatActivity.this.getParentActivity()).getActionBarLayout().getLastFragment();
                            if (lastFragment instanceof DialogsActivity) {
                                ((DialogsActivity) lastFragment).setPanTranslationOffset(f);
                            }
                        }
                        if (ChatActivity.this.voiceHintTextView != null && ChatActivity.this.voiceHintTextView.getVisibility() == 0) {
                            ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                        }
                        if (ChatActivity.this.fragmentContextView != null) {
                            ChatActivity.this.fragmentContextView.onPanTranslationUpdate(f);
                        }
                    }
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionEnd() {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionEnd();
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionEnd();
                    }
                    if (ChatActivity.this.voiceHintTextView == null || ChatActivity.this.voiceHintTextView.getVisibility() != 0) {
                        return;
                    }
                    ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionStart(boolean z, int i) {
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionStart(z, i);
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionStart();
                    }
                    if (ChatActivity.this.mediaBanTooltip != null) {
                        ChatActivity.this.mediaBanTooltip.hide(false);
                    }
                    if (ChatActivity.this.factCheckHint != null) {
                        ChatActivity.this.factCheckHint.hide();
                    }
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected int startOffset() {
                    if (ChatActivityFragmentView.this.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || !ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                        return 0;
                    }
                    return ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                }
            };
        }

        private void drawChildElement(Canvas canvas, float f, ChatMessageCell chatMessageCell, int i) {
            int save = canvas.save();
            float left = ChatActivity.this.chatListView.getLeft() + chatMessageCell.getLeft();
            float y = ChatActivity.this.chatListView.getY() + chatMessageCell.getY();
            float alpha = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
            canvas.clipRect(ChatActivity.this.chatListView.getLeft(), f, ChatActivity.this.chatListView.getRight(), (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset);
            canvas.translate(left, y);
            boolean z = true;
            chatMessageCell.setInvalidatesParent(true);
            if (i == 0) {
                chatMessageCell.drawTime(canvas, alpha, true);
            } else if (i == 1) {
                chatMessageCell.drawNamesLayout(canvas, alpha);
            } else if (i == 2) {
                chatMessageCell.drawCaptionLayout(canvas, (chatMessageCell.getCurrentPosition() == null || (chatMessageCell.getCurrentPosition().flags & 1) != 0) ? false : false, alpha);
            } else if (i == 3) {
                z = (chatMessageCell.getCurrentPosition() == null || (chatMessageCell.getCurrentPosition().flags & 1) != 0) ? false : false;
                chatMessageCell.drawCommentLayout(canvas, alpha);
                if (!z) {
                    chatMessageCell.drawReactionsLayout(canvas, alpha, null);
                }
            } else if (i == 4 && ((chatMessageCell.getCurrentPosition() == null || (1 & chatMessageCell.getCurrentPosition().flags) != 0) && ChatActivity.this.scrimViewReaction != null)) {
                float f2 = (ChatActivity.this.scrimPaintAlpha * ChatActivity.this.scrimViewAlpha) / 0.2f;
                canvas.save();
                chatMessageCell.drawScrimReaction(canvas, ChatActivity.this.scrimViewReaction, f2);
                canvas.restore();
                canvas.restore();
                canvas.save();
                canvas.translate(left, y);
                chatMessageCell.drawScrimReactionPreview(this, canvas, ChatActivity.this.scrimViewReactionOffset, ChatActivity.this.scrimViewReaction, f2);
                canvas.restore();
            }
            chatMessageCell.setInvalidatesParent(false);
            canvas.restoreToCount(save);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMeasure$1(int i) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, ChatActivity.this.scrollToOffsetOnRecreate);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void setNonNoveTranslation(float f) {
            ChatActivity.this.contentView.setTranslationY(f);
            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(0.0f);
            if (ChatActivity.this.tagSelector != null) {
                ReactionsContainerLayout reactionsContainerLayout = ChatActivity.this.tagSelector;
                SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                reactionsContainerLayout.setTranslationY(searchTagsList != null ? searchTagsList.getCurrentHeight() : 0);
            }
            if (ChatActivity.this.savedMessagesSearchHint != null) {
                ChatActivity.this.savedMessagesSearchHint.setTranslationY(0.0f);
            }
            if (ChatActivity.this.savedMessagesHint != null) {
                ChatActivity.this.savedMessagesHint.setTranslationY(0.0f);
            }
            SearchTagsList searchTagsList2 = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList2 != null) {
                searchTagsList2.setTranslationY(0.0f);
            }
            ChatSearchTabs chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
            if (chatSearchTabs != null) {
                chatSearchTabs.setTranslationY(0.0f);
            }
            ChatActivity.this.emptyViewContainer.setTranslationY(0.0f);
            ChatActivity.this.progressView.setTranslationY(0.0f);
            ChatActivity.this.contentPanTranslation = 0.0f;
            ChatActivity.this.contentPanTranslationT = 0.0f;
            ChatActivity.this.contentView.setBackgroundTranslation(0);
            ChatActivityFragmentView chatActivityFragmentView = ChatActivity.this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.updateBlurContent();
            }
            InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
            if (instantCameraView != null) {
                instantCameraView.onPanTranslationUpdate(0.0f);
            }
            if (ChatActivity.this.blurredView != null) {
                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(0.0f);
            }
            ChatActivity.this.setFragmentPanTranslationOffset(0);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Code restructure failed: missing block: B:122:0x04c9, code lost:
            if (r37.this$0.scrimViewAlpha < 1.0f) goto L221;
         */
        /* JADX WARN: Code restructure failed: missing block: B:259:0x0896, code lost:
            if ((r8 & 1) != 0) goto L353;
         */
        /* JADX WARN: Code restructure failed: missing block: B:339:0x0bb4, code lost:
            if (r37.this$0.scrimViewAlpha < 1.0f) goto L221;
         */
        /* JADX WARN: Code restructure failed: missing block: B:340:0x0bb6, code lost:
            r37.this$0.scrimPaint.setAlpha((int) ((r37.this$0.scrimPaintAlpha * 255.0f) * (1.0f - r37.this$0.scrimViewAlpha)));
            r38.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), r37.this$0.scrimPaint);
         */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void dispatchDraw(Canvas canvas) {
            int i;
            float f;
            boolean z;
            float measuredWidth;
            float measuredHeight;
            Paint paint;
            int top;
            View view;
            float measuredWidth2;
            float measuredHeight2;
            Paint paint2;
            ChatActivity chatActivity;
            float f2;
            float measuredWidth3;
            float measuredHeight3;
            Paint paint3;
            MessageObject.GroupedMessages groupedMessages;
            ChatActionCell chatActionCell;
            ChatMessageCell chatMessageCell;
            MessageObject.GroupedMessagePosition groupedMessagePosition;
            int i2;
            MessageObject.GroupedMessages groupedMessages2;
            ChatActionCell chatActionCell2;
            ChatMessageCell chatMessageCell2;
            View view2;
            int i3;
            boolean z2;
            boolean z3;
            ChatActivity chatActivity2;
            float f3;
            float f4;
            float f5;
            float f6;
            View view3;
            Object obj;
            Canvas canvas2;
            float f7;
            int i4;
            float f8;
            ChatMessageCell chatMessageCell3;
            float f9;
            float measuredWidth4;
            float measuredHeight4;
            Paint paint4;
            float f10;
            float f11;
            Canvas canvas3;
            float f12;
            View view4;
            float f13;
            Canvas canvas4;
            float f14;
            BotCommandsMenuContainer botCommandsMenuContainer;
            ChatMessageCell chatMessageCell4;
            ChatActivity chatActivity3;
            boolean z4;
            ChatActivity chatActivity4;
            ChatActivity chatActivity5;
            int i5;
            int[] iArr;
            float f15;
            float f16;
            float f17;
            Canvas canvas5 = canvas;
            ChatActivity.this.chatActivityEnterView.checkAnimation();
            ChatActivity.this.updateChatListViewTopPadding();
            if (ChatActivity.this.invalidateMessagesVisiblePart || (ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListItemAnimator.isRunning())) {
                ChatActivity.this.invalidateMessagesVisiblePart = false;
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.updatePagedownButtonsPosition();
            if (ChatActivity.this.scheduledOrNoSoundHint != null && ChatActivity.this.scheduledOrNoSoundHint.isShowing()) {
                ChatActivity.this.scheduledOrNoSoundHint.updatePosition();
            }
            if (ChatActivity.this.scheduledHint != null && ChatActivity.this.scheduledHint.isShowing()) {
                ChatActivity.this.scheduledHint.updatePosition();
            }
            if (ChatActivity.this.switchingFromTopics) {
                int saveLayerAlpha = canvas.saveLayerAlpha(0.0f, ((BaseFragment) ChatActivity.this).actionBar.getBottom(), getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                float f18 = (ChatActivity.this.switchingFromTopicsProgress * 0.2f) + 0.8f;
                canvas5.scale(f18, f18, getMeasuredWidth() / 2.0f, getMeasuredHeight() / 2.0f);
                i = saveLayerAlpha;
            } else {
                i = -1;
            }
            super.dispatchDraw(canvas);
            if (ChatActivity.this.fragmentContextView != null && ChatActivity.this.fragmentContextView.isCallStyle()) {
                float alpha = (ChatActivity.this.blurredView == null || ChatActivity.this.blurredView.getVisibility() != 0) ? 1.0f : 1.0f - ChatActivity.this.blurredView.getAlpha();
                if (alpha > 0.0f) {
                    if (alpha == 1.0f) {
                        canvas.save();
                    } else {
                        canvas.saveLayerAlpha(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY() - AndroidUtilities.dp(30.0f), ChatActivity.this.fragmentContextView.getX() + ChatActivity.this.fragmentContextView.getMeasuredWidth(), ChatActivity.this.fragmentContextView.getY() + ChatActivity.this.fragmentContextView.getMeasuredHeight(), (int) (alpha * 255.0f), 31);
                    }
                    canvas5.translate(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY());
                    ChatActivity.this.fragmentContextView.setDrawOverlay(true);
                    ChatActivity.this.fragmentContextView.draw(canvas5);
                    ChatActivity.this.fragmentContextView.setDrawOverlay(false);
                    canvas.restore();
                }
                ChatActivity.this.fragmentView.invalidate();
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null || !chatActivityEnterView.panelAnimationInProgress() || ChatActivity.this.chatActivityEnterView.getEmojiPadding() >= ChatActivity.this.bottomPanelTranslationY) {
                f = 0.0f;
                z = true;
            } else {
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_chat_emojiPanelBackground);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor) {
                    Paint paint5 = this.backgroundPaint;
                    this.backgroundColor = themedColor;
                    paint5.setColor(themedColor);
                }
                z = true;
                f = 0.0f;
                canvas.drawRect(0.0f, getMeasuredHeight() - (((int) (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding())) + 3), getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
                ChatActivity chatActivity6 = ChatActivity.this;
                chatActivity6.setFragmentPanTranslationOffset(chatActivity6.chatActivityEnterView.getEmojiPadding());
            }
            int size = ChatActivity.this.animateSendingViews.size();
            for (int i6 = 0; i6 < size; i6++) {
                ChatMessageCell chatMessageCell5 = (ChatMessageCell) ChatActivity.this.animateSendingViews.get(i6);
                MessageObject.SendAnimationData sendAnimationData = chatMessageCell5.getMessageObject().sendAnimationData;
                if (sendAnimationData != null) {
                    canvas.save();
                    if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                        int translationY = ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) + ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                        SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                        int currentHeight = translationY + (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0);
                        ChatSearchTabs chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
                        i5 = currentHeight + (chatSearchTabs != null ? chatSearchTabs.getCurrentHeight() : 0) + ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight);
                    } else {
                        i5 = 0;
                    }
                    canvas5.clipRect(f, i5 + ChatActivity.this.paddingTopHeight, getWidth(), getHeight());
                    ImageReceiver photoImage = chatMessageCell5.getPhotoImage();
                    chatMessageCell5.getLocationInWindow(AndroidUtilities.pointTmp2);
                    int translationY2 = (int) (((int) (iArr[z ? 1 : 0] - (chatMessageCell5.getTranslationY() * (1.0f - sendAnimationData.progress)))) + (ChatActivity.this.chatActivityEnterView.topViewVisible() * AndroidUtilities.dp(48.0f)));
                    if (sendAnimationData.fromPreview) {
                        f15 = sendAnimationData.currentX;
                        f16 = sendAnimationData.y;
                        f17 = translationY2;
                    } else {
                        f15 = sendAnimationData.currentX;
                        f16 = sendAnimationData.y;
                        f17 = translationY2 + photoImage.getCenterY();
                    }
                    canvas5.translate(f15, AndroidUtilities.lerp(f16, f17, sendAnimationData.progress));
                    float f19 = sendAnimationData.currentScale;
                    canvas5.scale(f19, f19);
                    if (!sendAnimationData.fromPreview) {
                        canvas5.translate(-photoImage.getCenterX(), -photoImage.getCenterY());
                    }
                    chatMessageCell5.setTimeAlpha(sendAnimationData.timeAlpha);
                    chatMessageCell5.draw(canvas5);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.scrimViewReaction == null || ChatActivity.this.scrimView == null) {
                if (ChatActivity.this.scrimBlurBitmapPaint != null) {
                    ChatActivity.this.scrimBlurMatrix.reset();
                    float measuredWidth5 = getMeasuredWidth() / ChatActivity.this.scrimBlurBitmap.getWidth();
                    ChatActivity.this.scrimBlurMatrix.postScale(measuredWidth5, measuredWidth5);
                    ChatActivity.this.scrimBlurBitmapShader.setLocalMatrix(ChatActivity.this.scrimBlurMatrix);
                    ChatActivity.this.scrimBlurBitmapPaint.setAlpha((int) (ChatActivity.this.scrimViewProgress * 255.0f));
                    measuredWidth = getMeasuredWidth();
                    measuredHeight = getMeasuredHeight();
                    paint = ChatActivity.this.scrimBlurBitmapPaint;
                } else {
                    ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (ChatActivity.this.scrimView != null ? ChatActivity.this.scrimViewAlpha : 1.0f)));
                    measuredWidth = getMeasuredWidth();
                    measuredHeight = getMeasuredHeight();
                    paint = ChatActivity.this.scrimPaint;
                }
                canvas.drawRect(0.0f, 0.0f, measuredWidth, measuredHeight, paint);
            }
            if (ChatActivity.this.scrimViewReaction != null && ChatActivity.this.scrimViewReactionAnimated) {
                invalidate();
            }
            if (ChatActivity.this.scrimView != null) {
                if (ChatActivity.this.scrimView != ChatActivity.this.reactionsMentiondownButton && ChatActivity.this.scrimView != ChatActivity.this.mentiondownButton) {
                    if (ChatActivity.this.scrimView instanceof ImageView) {
                        int save = canvas.save();
                        if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                            canvas.saveLayerAlpha(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop(), ChatActivity.this.scrimView.getRight(), ChatActivity.this.scrimView.getBottom(), (int) (ChatActivity.this.scrimViewAlpha * 255.0f), 31);
                        }
                        canvas5.translate(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop());
                        if (ChatActivity.this.scrimView == ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) {
                            float max = Math.max(ChatActivity.this.scrimView.getMeasuredWidth(), ChatActivity.this.scrimView.getMeasuredHeight()) / 2;
                            canvas5.drawCircle(max, max, 0.7f * max, ChatActivity.this.actionBarBackgroundPaint);
                        }
                        ChatActivity.this.scrimView.draw(canvas5);
                        canvas5.restoreToCount(save);
                    } else {
                        float f20 = 0.0f;
                        float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
                        MessageObject.GroupedMessages currentMessagesGroup = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
                        int childCount = ChatActivity.this.chatListView.getChildCount();
                        boolean z5 = false;
                        int i7 = 0;
                        while (i7 < childCount) {
                            View childAt = ChatActivity.this.chatListView.getChildAt(i7);
                            if (childAt instanceof ChatMessageCell) {
                                ChatMessageCell chatMessageCell6 = (ChatMessageCell) childAt;
                                groupedMessages = chatMessageCell6.getCurrentMessagesGroup();
                                groupedMessagePosition = chatMessageCell6.getCurrentPosition();
                                chatMessageCell = chatMessageCell6;
                                chatActionCell = null;
                            } else {
                                if (childAt instanceof ChatActionCell) {
                                    chatActionCell = (ChatActionCell) childAt;
                                    groupedMessages = null;
                                } else {
                                    groupedMessages = null;
                                    chatActionCell = null;
                                }
                                chatMessageCell = null;
                                groupedMessagePosition = null;
                            }
                            if ((childAt == ChatActivity.this.scrimView || (currentMessagesGroup != null && currentMessagesGroup == groupedMessages)) && childAt.getAlpha() != f20) {
                                if (z5 || chatMessageCell == null || currentMessagesGroup == null || (chatMessageCell4 = currentMessagesGroup.transitionParams.cell) == null) {
                                    i2 = childCount;
                                    groupedMessages2 = currentMessagesGroup;
                                    chatActionCell2 = chatActionCell;
                                    chatMessageCell2 = chatMessageCell;
                                    view2 = childAt;
                                    i3 = i7;
                                    z2 = true;
                                    z3 = z5;
                                } else {
                                    float nonAnimationTranslationX = chatMessageCell4.getNonAnimationTranslationX(z);
                                    MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                    float f21 = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                                    float f22 = transitionParams.top + transitionParams.offsetTop;
                                    float f23 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                                    float f24 = transitionParams.bottom + transitionParams.offsetBottom;
                                    if (!transitionParams.backgroundChangeBounds) {
                                        f22 += transitionParams.cell.getTranslationY();
                                        f24 += currentMessagesGroup.transitionParams.cell.getTranslationY();
                                    }
                                    if (f22 < (ChatActivity.this.chatListViewPaddingTop - chatActivity3.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                        f22 = (ChatActivity.this.chatListViewPaddingTop - chatActivity5.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                                    }
                                    if (f24 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                        f24 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                                    }
                                    int size2 = currentMessagesGroup.messages.size();
                                    int i8 = 0;
                                    while (true) {
                                        if (i8 >= size2) {
                                            i2 = childCount;
                                            z4 = true;
                                            break;
                                        }
                                        MessageObject messageObject = currentMessagesGroup.messages.get(i8);
                                        i2 = childCount;
                                        int i9 = size2;
                                        if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                            z4 = false;
                                            break;
                                        }
                                        i8++;
                                        size2 = i9;
                                        childCount = i2;
                                    }
                                    canvas.save();
                                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                                    float clipTop = (mentionsContainerView != null ? mentionsContainerView.clipTop() : 0.0f) + y;
                                    float measuredWidth6 = getMeasuredWidth();
                                    ChatActionCell chatActionCell3 = chatActionCell;
                                    float y2 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                                    ChatMessageCell chatMessageCell7 = chatMessageCell;
                                    float f25 = y2 - chatActivity4.blurredViewBottomOffset;
                                    MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                                    canvas5.clipRect(0.0f, clipTop, measuredWidth6, f25 - (mentionsContainerView2 != null ? mentionsContainerView2.clipBottom() : 0.0f));
                                    canvas5.translate(0.0f, ChatActivity.this.chatListView.getY());
                                    MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                    chatActionCell2 = chatActionCell3;
                                    groupedMessages2 = currentMessagesGroup;
                                    chatMessageCell2 = chatMessageCell7;
                                    view2 = childAt;
                                    i3 = i7;
                                    z2 = true;
                                    transitionParams2.cell.drawBackground(canvas, (int) f21, (int) f22, (int) f23, (int) f24, transitionParams2.pinnedTop, transitionParams2.pinnedBotton, z4, ChatActivity.this.contentView.getKeyboardHeight());
                                    canvas.restore();
                                    z3 = true;
                                }
                                if (chatMessageCell2 != null && chatMessageCell2.getPhotoImage().isAnimationRunning()) {
                                    invalidate();
                                }
                                float left = ChatActivity.this.chatListView.getLeft();
                                float right = ChatActivity.this.chatListView.getRight();
                                float y3 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                                float f26 = y3 - chatActivity2.blurredViewBottomOffset;
                                MentionsContainerView mentionsContainerView3 = ChatActivity.this.mentionContainer;
                                if (mentionsContainerView3 != null) {
                                    f3 = Math.max(0.0f, mentionsContainerView3.clipTop());
                                    f4 = Math.max(0.0f, ChatActivity.this.mentionContainer.clipBottom());
                                } else {
                                    f3 = 0.0f;
                                    f4 = 0.0f;
                                }
                                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                if (chatActivityEnterView2 != null && (botCommandsMenuContainer = chatActivityEnterView2.botCommandsMenuContainer) != null) {
                                    f4 = Math.max(f4, botCommandsMenuContainer.clipBottom());
                                }
                                float f27 = f3 + y;
                                float f28 = f26 - f4;
                                if (chatMessageCell2 == null || !chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner) {
                                    left = Math.max(left, ChatActivity.this.chatListView.getLeft() + view2.getX());
                                    f27 = Math.max(f27, ChatActivity.this.chatListView.getY() + view2.getY());
                                    right = Math.min(right, ChatActivity.this.chatListView.getLeft() + view2.getX() + view2.getMeasuredWidth());
                                    f28 = Math.min(f28, ChatActivity.this.chatListView.getY() + view2.getY() + view2.getMeasuredHeight());
                                }
                                float f29 = f28;
                                float f30 = f27;
                                float f31 = right;
                                float f32 = left;
                                if (f30 < f29) {
                                    if (view2.getAlpha() != 1.0f) {
                                        f5 = f30;
                                        f14 = f29;
                                        canvas.saveLayerAlpha(f32, f30, f31, f29, (int) (view2.getAlpha() * 255.0f), 31);
                                    } else {
                                        f5 = f30;
                                        f14 = f29;
                                        canvas.save();
                                    }
                                    if (chatMessageCell2 != null) {
                                        chatMessageCell2.setInvalidatesParent(z2);
                                        chatMessageCell2.setScrimReaction(ChatActivity.this.scrimViewReaction);
                                    }
                                    canvas2 = canvas;
                                    f6 = f14;
                                    canvas2.clipRect(f32, f5, f31, f6);
                                    canvas2.translate(ChatActivity.this.chatListView.getLeft() + view2.getX(), ChatActivity.this.chatListView.getY() + view2.getY());
                                    if (chatMessageCell2 != null && groupedMessages2 == null && chatMessageCell2.drawBackgroundInParent()) {
                                        chatMessageCell2.drawBackgroundInternal(canvas2, z2);
                                    }
                                    view3 = view2;
                                    view3.draw(canvas2);
                                    if (chatMessageCell2 != null && chatMessageCell2.hasOutboundsContent()) {
                                        chatMessageCell2.drawOutboundsContent(canvas2);
                                    }
                                    ChatActionCell chatActionCell4 = chatActionCell2;
                                    if (chatActionCell4 != null) {
                                        chatActionCell4.drawOutboundsContent(canvas2);
                                    }
                                    canvas.restore();
                                    if (chatMessageCell2 != null) {
                                        chatMessageCell2.setInvalidatesParent(false);
                                        obj = null;
                                        chatMessageCell2.setScrimReaction(null);
                                    } else {
                                        obj = null;
                                    }
                                } else {
                                    f5 = f30;
                                    f6 = f29;
                                    view3 = view2;
                                    obj = null;
                                    canvas2 = canvas;
                                }
                                MessageObject.GroupedMessagePosition groupedMessagePosition2 = groupedMessagePosition;
                                if (groupedMessagePosition2 != null || (chatMessageCell2 != null && chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner)) {
                                    if (groupedMessagePosition2 == null || groupedMessagePosition2.last || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0)) {
                                        if (groupedMessagePosition2 == null || groupedMessagePosition2.last) {
                                            this.drawTimeAfter.add(chatMessageCell2);
                                        }
                                        if (groupedMessagePosition2 == null || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0 && chatMessageCell2.hasNameLayout())) {
                                            this.drawNamesAfter.add(chatMessageCell2);
                                        }
                                    }
                                    if (groupedMessagePosition2 == null || (groupedMessagePosition2.flags & chatMessageCell2.captionFlag()) != 0) {
                                        this.drawCaptionAfter.add(chatMessageCell2);
                                    }
                                    if (groupedMessagePosition2 != null) {
                                        int i10 = groupedMessagePosition2.flags;
                                        if ((i10 & 8) != 0) {
                                        }
                                    }
                                    this.drawReactionsAfter.add(chatMessageCell2);
                                }
                                if (ChatActivity.this.scrimViewReaction == null || chatMessageCell2 == null || groupedMessages2 != null) {
                                    f7 = y;
                                    canvas5 = canvas2;
                                    i4 = i2;
                                } else {
                                    if (ChatActivity.this.scrimBlurBitmapPaint != null) {
                                        ChatActivity.this.scrimBlurMatrix.reset();
                                        float measuredWidth7 = getMeasuredWidth() / ChatActivity.this.scrimBlurBitmap.getWidth();
                                        ChatActivity.this.scrimBlurMatrix.postScale(measuredWidth7, measuredWidth7);
                                        ChatActivity.this.scrimBlurBitmapShader.setLocalMatrix(ChatActivity.this.scrimBlurMatrix);
                                        ChatActivity.this.scrimBlurBitmapPaint.setAlpha((int) (ChatActivity.this.scrimViewProgress * 255.0f));
                                        Paint paint6 = ChatActivity.this.scrimBlurBitmapPaint;
                                        f8 = f31;
                                        i4 = i2;
                                        canvas3 = canvas;
                                        chatMessageCell3 = chatMessageCell2;
                                        f10 = 0.0f;
                                        f9 = f32;
                                        f11 = 0.0f;
                                        float f33 = y;
                                        measuredWidth4 = getMeasuredWidth();
                                        f7 = f33;
                                        measuredHeight4 = getMeasuredHeight();
                                        paint4 = paint6;
                                    } else {
                                        f8 = f31;
                                        chatMessageCell3 = chatMessageCell2;
                                        f7 = y;
                                        i4 = i2;
                                        f9 = f32;
                                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                        measuredWidth4 = getMeasuredWidth();
                                        measuredHeight4 = getMeasuredHeight();
                                        paint4 = ChatActivity.this.scrimPaint;
                                        f10 = 0.0f;
                                        f11 = 0.0f;
                                        canvas3 = canvas;
                                    }
                                    canvas3.drawRect(f10, f11, measuredWidth4, measuredHeight4, paint4);
                                    if (f5 < f6) {
                                        float f34 = (ChatActivity.this.scrimPaintAlpha * ChatActivity.this.scrimViewAlpha) / 0.2f;
                                        float alpha2 = view3.getAlpha() * ChatActivity.this.scrimViewAlpha;
                                        if (alpha2 < 1.0f) {
                                            int i11 = (int) (alpha2 * 255.0f);
                                            f12 = f9;
                                            view4 = view3;
                                            f13 = f6;
                                            canvas4 = canvas2;
                                            canvas.saveLayerAlpha(f12, f5, f8, f6, i11, 31);
                                        } else {
                                            f12 = f9;
                                            view4 = view3;
                                            f13 = f6;
                                            canvas4 = canvas2;
                                            canvas.save();
                                        }
                                        canvas4.clipRect(f12, f5, f8, f13);
                                        canvas4.translate(ChatActivity.this.chatListView.getLeft() + view4.getX(), ChatActivity.this.chatListView.getY() + view4.getY());
                                        ChatMessageCell chatMessageCell8 = chatMessageCell3;
                                        chatMessageCell8.drawScrimReaction(canvas4, ChatActivity.this.scrimViewReaction, f34);
                                        canvas.restore();
                                        canvas.save();
                                        canvas4.translate(ChatActivity.this.chatListView.getLeft() + view4.getX(), ChatActivity.this.chatListView.getY() + view4.getY());
                                        canvas5 = canvas4;
                                        chatMessageCell8.drawScrimReactionPreview(this, canvas, ChatActivity.this.scrimViewReactionOffset, ChatActivity.this.scrimViewReaction, f34);
                                        canvas.restore();
                                    } else {
                                        canvas5 = canvas2;
                                    }
                                }
                                z5 = z3;
                            } else {
                                i4 = childCount;
                                groupedMessages2 = currentMessagesGroup;
                                f7 = y;
                                i3 = i7;
                            }
                            i7 = i3 + 1;
                            childCount = i4;
                            currentMessagesGroup = groupedMessages2;
                            y = f7;
                            f20 = 0.0f;
                            z = true;
                        }
                        MessageObject.GroupedMessages groupedMessages3 = currentMessagesGroup;
                        float f35 = y;
                        int size3 = this.drawTimeAfter.size();
                        if (size3 > 0) {
                            for (int i12 = 0; i12 < size3; i12++) {
                                drawChildElement(canvas5, f35, (ChatMessageCell) this.drawTimeAfter.get(i12), 0);
                            }
                            f2 = f35;
                            this.drawTimeAfter.clear();
                        } else {
                            f2 = f35;
                        }
                        int size4 = this.drawNamesAfter.size();
                        if (size4 > 0) {
                            for (int i13 = 0; i13 < size4; i13++) {
                                drawChildElement(canvas5, f2, (ChatMessageCell) this.drawNamesAfter.get(i13), 1);
                            }
                            this.drawNamesAfter.clear();
                        }
                        int size5 = this.drawCaptionAfter.size();
                        if (size5 > 0) {
                            for (int i14 = 0; i14 < size5; i14++) {
                                ChatMessageCell chatMessageCell9 = (ChatMessageCell) this.drawCaptionAfter.get(i14);
                                if (chatMessageCell9.getCurrentPosition() != null || chatMessageCell9.getTransitionParams().animateBackgroundBoundsInner) {
                                    drawChildElement(canvas5, f2, chatMessageCell9, 2);
                                }
                            }
                            this.drawCaptionAfter.clear();
                        }
                        int size6 = this.drawReactionsAfter.size();
                        if (size6 > 0) {
                            for (int i15 = 0; i15 < size6; i15++) {
                                ChatMessageCell chatMessageCell10 = (ChatMessageCell) this.drawReactionsAfter.get(i15);
                                if (chatMessageCell10.getCurrentPosition() != null || chatMessageCell10.getTransitionParams().animateBackgroundBoundsInner) {
                                    drawChildElement(canvas5, f2, chatMessageCell10, 3);
                                }
                            }
                        }
                        if (ChatActivity.this.scrimViewReaction != null && groupedMessages3 != null) {
                            if (ChatActivity.this.scrimBlurBitmapPaint != null) {
                                ChatActivity.this.scrimBlurMatrix.reset();
                                float measuredWidth8 = getMeasuredWidth() / ChatActivity.this.scrimBlurBitmap.getWidth();
                                ChatActivity.this.scrimBlurMatrix.postScale(measuredWidth8, measuredWidth8);
                                ChatActivity.this.scrimBlurBitmapShader.setLocalMatrix(ChatActivity.this.scrimBlurMatrix);
                                ChatActivity.this.scrimBlurBitmapPaint.setAlpha((int) (ChatActivity.this.scrimViewProgress * 255.0f));
                                measuredWidth3 = getMeasuredWidth();
                                measuredHeight3 = getMeasuredHeight();
                                paint3 = ChatActivity.this.scrimBlurBitmapPaint;
                            } else {
                                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                measuredWidth3 = getMeasuredWidth();
                                measuredHeight3 = getMeasuredHeight();
                                paint3 = ChatActivity.this.scrimPaint;
                            }
                            canvas.drawRect(0.0f, 0.0f, measuredWidth3, measuredHeight3, paint3);
                        }
                        int size7 = this.drawReactionsAfter.size();
                        if (size7 > 0) {
                            for (int i16 = 0; i16 < size7; i16++) {
                                ChatMessageCell chatMessageCell11 = (ChatMessageCell) this.drawReactionsAfter.get(i16);
                                if (chatMessageCell11.getCurrentPosition() != null || chatMessageCell11.getTransitionParams().animateBackgroundBoundsInner) {
                                    drawChildElement(canvas5, f2, chatMessageCell11, 4);
                                }
                            }
                            this.drawReactionsAfter.clear();
                        }
                    }
                    if (ChatActivity.this.scrimViewReaction == null && ChatActivity.this.scrimViewAlpha < 1.0f) {
                        if (ChatActivity.this.scrimBlurBitmapPaint != null) {
                            ChatActivity.this.scrimBlurMatrix.reset();
                            float measuredWidth9 = getMeasuredWidth() / ChatActivity.this.scrimBlurBitmap.getWidth();
                            ChatActivity.this.scrimBlurMatrix.postScale(measuredWidth9, measuredWidth9);
                            ChatActivity.this.scrimBlurBitmapShader.setLocalMatrix(ChatActivity.this.scrimBlurMatrix);
                            ChatActivity.this.scrimBlurBitmapPaint.setAlpha((int) (ChatActivity.this.scrimViewProgress * 255.0f));
                            measuredWidth2 = getMeasuredWidth();
                            measuredHeight2 = getMeasuredHeight();
                            paint2 = ChatActivity.this.scrimBlurBitmapPaint;
                        } else {
                            ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                            measuredWidth2 = getMeasuredWidth();
                            measuredHeight2 = getMeasuredHeight();
                            paint2 = ChatActivity.this.scrimPaint;
                        }
                        canvas.drawRect(0.0f, 0.0f, measuredWidth2, measuredHeight2, paint2);
                    }
                }
            }
            if (ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) {
                MentionsContainerView mentionsContainerView4 = ChatActivity.this.mentionContainer;
                if (mentionsContainerView4 == null || mentionsContainerView4.getVisibility() != 0) {
                    if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                        super.drawChild(canvas5, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                        super.drawChild(canvas5, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.reactionsMentiondownButton != null && ChatActivity.this.reactionsMentiondownButton.getTag() != null) {
                        super.drawChild(canvas5, ChatActivity.this.reactionsMentiondownButton, SystemClock.uptimeMillis());
                    }
                }
                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                    super.drawChild(canvas5, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.fireworksOverlay != null) {
                    super.drawChild(canvas5, ChatActivity.this.fireworksOverlay, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.gifHintTextView != null) {
                    super.drawChild(canvas5, ChatActivity.this.gifHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.emojiHintTextView != null) {
                    super.drawChild(canvas5, ChatActivity.this.emojiHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.undoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas5, ChatActivity.this.undoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.topUndoView != null && ChatActivity.this.topUndoView.getVisibility() == 0) {
                    super.drawChild(canvas5, ChatActivity.this.topUndoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.savedMessagesTagHint != null && ChatActivity.this.savedMessagesTagHint.getVisibility() == 0) {
                    super.drawChild(canvas5, ChatActivity.this.savedMessagesTagHint, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.botMessageHint != null && ChatActivity.this.botMessageHint.getVisibility() == 0) {
                    super.drawChild(canvas5, ChatActivity.this.botMessageHint, SystemClock.uptimeMillis());
                }
                ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView3 != null && chatActivityEnterView3.birthdayHint != null) {
                    canvas.save();
                    canvas5.translate(ChatActivity.this.chatActivityEnterView.getX() + ChatActivity.this.chatActivityEnterView.birthdayHint.getX(), ChatActivity.this.chatActivityEnterView.getY() + ChatActivity.this.chatActivityEnterView.birthdayHint.getY());
                    ChatActivity.this.chatActivityEnterView.birthdayHint.draw(canvas5);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.fixedKeyboardHeight > 0 && this.keyboardHeight < AndroidUtilities.dp(20.0f)) {
                int themedColor2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhite);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor2) {
                    Paint paint7 = this.backgroundPaint;
                    this.backgroundColor = themedColor2;
                    paint7.setColor(themedColor2);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - ChatActivity.this.fixedKeyboardHeight, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
            }
            if (ChatActivity.this.pullingDownDrawable != null && ChatActivity.this.pullingDownDrawable.needDrawBottomPanel()) {
                ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView4 == null || chatActivityEnterView4.getVisibility() != 0) {
                    top = ChatActivity.this.bottomOverlayChat.getTop() + AndroidUtilities.dp2(2.0f);
                    view = ChatActivity.this.bottomOverlayChat;
                } else {
                    top = ChatActivity.this.chatActivityEnterView.getTop() + AndroidUtilities.dp2(2.0f);
                    view = ChatActivity.this.chatActivityEnterView;
                }
                ChatActivity.this.pullingDownDrawable.drawBottomPanel(canvas5, top - ((int) ((ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset) * ChatActivity.this.pullingDownAnimateProgress)), view.getBottom(), getMeasuredWidth());
            }
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                ChatActivity.this.pullingDownAnimateToActivity.fragmentView.draw(canvas5);
                canvas.restore();
            }
            ChatActivity.this.emojiAnimationsOverlay.draw(canvas5);
            if (i >= 0) {
                canvas.restore();
            }
            if (ChatActivity.this.switchingFromTopics) {
                canvas.save();
                canvas5.translate(((BaseFragment) ChatActivity.this).actionBar.getX(), ((BaseFragment) ChatActivity.this).actionBar.getY());
                canvas.saveLayerAlpha(0.0f, 0.0f, ((BaseFragment) ChatActivity.this).actionBar.getWidth(), ((BaseFragment) ChatActivity.this).actionBar.getHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                ((BaseFragment) ChatActivity.this).actionBar.draw(canvas5);
                canvas.restore();
                canvas.restore();
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            MessagePreviewView messagePreviewView;
            if (keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1 && (messagePreviewView = ChatActivity.this.forwardingPreviewView) != null && messagePreviewView.isShowing()) {
                ChatActivity.this.forwardingPreviewView.dismiss(true);
                return true;
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        /* JADX WARN: Code restructure failed: missing block: B:108:0x032c, code lost:
            if (r13.getAction() == 3) goto L84;
         */
        /* JADX WARN: Removed duplicated region for block: B:56:0x0169  */
        /* JADX WARN: Removed duplicated region for block: B:58:0x0174  */
        /* JADX WARN: Removed duplicated region for block: B:76:0x01f4  */
        /* JADX WARN: Removed duplicated region for block: B:81:0x023c  */
        /* JADX WARN: Removed duplicated region for block: B:85:0x0287  */
        /* JADX WARN: Removed duplicated region for block: B:87:0x028a  */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            ChatActivityEnterView chatActivityEnterView;
            boolean z;
            boolean z2;
            boolean z3;
            Rect rect;
            float y = (((AndroidUtilities.isInMultiwindow || ChatActivity.this.isInBubbleMode()) && ChatActivity.this.chatActivityEnterView.getEmojiView() != null) ? ChatActivity.this.chatActivityEnterView.getEmojiView() : ChatActivity.this.chatActivityEnterView).getY();
            if ((ChatActivity.this.scrimView != null && ChatActivity.this.scrimView != ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) || ((chatActivityEnterView = ChatActivity.this.chatActivityEnterView) != null && chatActivityEnterView.isStickersExpanded() && motionEvent.getY() < y)) {
                return false;
            }
            ChatActivity.this.lastTouchY = motionEvent.getY();
            TextSelectionHelper.TextSelectionOverlay overlayView = ChatActivity.this.textSelectionHelper.getOverlayView(getContext());
            motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
            if (ChatActivity.this.textSelectionHelper.isInSelectionMode() && ChatActivity.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent)) {
                return true;
            }
            motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
            if (overlayView.checkOnTap(motionEvent)) {
                motionEvent.setAction(3);
            }
            if (ChatActivity.this.searchViewPager != null) {
                if (ChatActivity.this.searchingHashtag != null && !ChatActivity.this.hashtagHistoryView.isShowing()) {
                    z = ChatActivity.this.searchViewPager.onTouchEventInternal(motionEvent);
                    if (ChatActivity.this.searchViewPager.isTouch()) {
                        motionEvent.setAction(3);
                    }
                    if (motionEvent.getAction() != 0 && ChatActivity.this.textSelectionHelper.isInSelectionMode() && (motionEvent.getY() < ChatActivity.this.chatListView.getTop() || motionEvent.getY() > ChatActivity.this.chatListView.getBottom())) {
                        motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
                        if (ChatActivity.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent)) {
                            motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
                            return super.dispatchTouchEvent(motionEvent);
                        }
                        return true;
                    } else if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                        if (AvatarPreviewer.hasVisibleInstance()) {
                            AvatarPreviewer.getInstance().onTouchEvent(motionEvent);
                            return true;
                        }
                        if (ChatActivity.this.isInPreviewMode() && ChatActivity.this.allowExpandPreviewByClick) {
                            if (motionEvent.getAction() == 0) {
                                int[] iArr = new int[2];
                                getLocationInWindow(iArr);
                                int[] iArr2 = new int[2];
                                if (ChatActivity.this.pagedownButton != null) {
                                    ChatActivity.this.pagedownButton.getLocationInWindow(iArr2);
                                    Rect rect2 = AndroidUtilities.rectTmp2;
                                    int i = iArr2[0] - iArr[0];
                                    rect2.set(i, iArr2[1] - iArr[1], ChatActivity.this.pagedownButton.getMeasuredWidth() + i, (iArr2[1] - iArr[1]) + ChatActivity.this.pagedownButton.getMeasuredHeight());
                                    if (rect2.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                        z2 = true;
                                        if (ChatActivity.this.avatarContainer != null) {
                                            ChatActivity.this.avatarContainer.getLocationInWindow(iArr2);
                                            Rect rect3 = AndroidUtilities.rectTmp2;
                                            int i2 = iArr2[0] - iArr[0];
                                            rect3.set(i2, iArr2[1] - iArr[1], ChatActivity.this.avatarContainer.getMeasuredWidth() + i2, (iArr2[1] - iArr[1]) + ChatActivity.this.avatarContainer.getMeasuredHeight());
                                            if (rect3.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                                z3 = true;
                                                if (!z2 && ChatActivity.this.mentiondownButton != null) {
                                                    ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                                    rect = AndroidUtilities.rectTmp2;
                                                    int i3 = iArr2[0] - iArr[0];
                                                    rect.set(i3, iArr2[1] - iArr[1], ChatActivity.this.mentiondownButton.getMeasuredWidth() + i3, (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                                    if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                                        z2 = true;
                                                    }
                                                }
                                                if (!z2) {
                                                    this.x = motionEvent.getX();
                                                    this.y = motionEvent.getY();
                                                    this.pressTime = SystemClock.elapsedRealtime();
                                                    this.pressActionBar = z3;
                                                    if (ChatActivity.this.avatarContainer != null) {
                                                        ChatActivity.this.avatarContainer.bounce.setPressed(this.pressActionBar);
                                                    }
                                                    z = true;
                                                }
                                                this.pressTime = -1L;
                                            }
                                        }
                                        z3 = false;
                                        if (!z2) {
                                            ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                            rect = AndroidUtilities.rectTmp2;
                                            int i32 = iArr2[0] - iArr[0];
                                            rect.set(i32, iArr2[1] - iArr[1], ChatActivity.this.mentiondownButton.getMeasuredWidth() + i32, (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                            if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                            }
                                        }
                                        if (!z2) {
                                        }
                                        this.pressTime = -1L;
                                    }
                                }
                                z2 = false;
                                if (ChatActivity.this.avatarContainer != null) {
                                }
                                z3 = false;
                                if (!z2) {
                                }
                                if (!z2) {
                                }
                                this.pressTime = -1L;
                            } else {
                                if (motionEvent.getAction() == 1) {
                                    if (ChatActivity.this.avatarContainer != null) {
                                        ChatActivity.this.avatarContainer.bounce.setPressed(false);
                                    }
                                    if (this.pressActionBar || (com.google.zxing.common.detector.MathUtils.distance(this.x, this.y, motionEvent.getX(), motionEvent.getY()) < AndroidUtilities.dp(6.0f) && SystemClock.elapsedRealtime() - this.pressTime <= ViewConfiguration.getTapTimeout())) {
                                        if (this.pressActionBar) {
                                            INavigationLayout iNavigationLayout = ((BaseFragment) ChatActivity.this).parentLayout;
                                            ChatActivity.this.removeSelfFromStack(false);
                                            iNavigationLayout.presentFragment(ProfileActivity.of(ChatActivity.this.dialog_id));
                                        } else {
                                            ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                                        }
                                        motionEvent.setAction(3);
                                    }
                                }
                                this.pressTime = -1L;
                            }
                        }
                        return super.dispatchTouchEvent(motionEvent) || z;
                    } else {
                        return ChatActivity.this.pinchToZoomHelper.onTouchEvent(motionEvent);
                    }
                }
                ChatActivity.this.searchViewPager.resetTouch();
            }
            z = false;
            if (motionEvent.getAction() != 0) {
            }
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:69:0x0104, code lost:
            return false;
         */
        /* JADX WARN: Removed duplicated region for block: B:103:0x0180  */
        /* JADX WARN: Removed duplicated region for block: B:122:0x0252  */
        /* JADX WARN: Removed duplicated region for block: B:153:0x034d  */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected boolean drawChild(Canvas canvas, View view, long j) {
            InstantCameraView instantCameraView;
            boolean z;
            boolean z2;
            boolean z3;
            int i = 0;
            if ((ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) && (view == ChatActivity.this.pagedownButton || view == ChatActivity.this.searchUpButton || view == ChatActivity.this.searchDownButton || view == ChatActivity.this.mentiondownButton || view == ChatActivity.this.floatingDateView || view == ChatActivity.this.fireworksOverlay || view == ChatActivity.this.reactionsMentiondownButton || view == ChatActivity.this.gifHintTextView || view == ChatActivity.this.emojiHintTextView || view == ChatActivity.this.undoView || view == ChatActivity.this.topUndoView)) {
                return false;
            }
            if (view == ChatActivity.this.fragmentContextView && ChatActivity.this.fragmentContextView.isCallStyle()) {
                return true;
            }
            if (view == ChatActivity.this.undoView && PhotoViewer.getInstance().isVisible()) {
                return true;
            }
            if (ChatActivity.this.toPullingDownTransition && view == ChatActivity.this.chatListView) {
                return true;
            }
            if (ChatActivity.this.switchingFromTopics && view == ((BaseFragment) ChatActivity.this).actionBar) {
                return true;
            }
            Object tag = getTag(67108867);
            Object tag2 = getTag(67108867);
            if (tag != null) {
                if (((Integer) tag2).intValue() == 0) {
                }
            } else if (tag2 == null && ((((instantCameraView = ChatActivity.this.instantCameraView) != null && instantCameraView.blurFullyDrawing()) || (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null)) && (view == ((BaseFragment) ChatActivity.this).actionBar || view == ChatActivity.this.chatListView || view == ChatActivity.this.pinnedMessageView || view == ChatActivity.this.fragmentContextView))) {
                return false;
            }
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject == null || playingMessageObject.eventId != 0) {
                z = false;
            } else {
                z = playingMessageObject.isRoundVideo();
                if (z || playingMessageObject.isVideo()) {
                    z2 = true;
                    if (view != ChatActivity.this.videoPlayerContainer) {
                        canvas.save();
                        canvas.translate(0.0f, (-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f));
                        if (playingMessageObject != null && playingMessageObject.type == 5) {
                            if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                int x = ((int) view.getX()) - AndroidUtilities.dp(3.0f);
                                int y = ((int) view.getY()) - AndroidUtilities.dp(2.0f);
                                canvas.save();
                                canvas.scale(ChatActivity.this.videoPlayerContainer.getScaleX(), ChatActivity.this.videoPlayerContainer.getScaleY(), view.getX(), view.getY());
                                Theme.chat_roundVideoShadow.setAlpha(NotificationCenter.closeSearchByActiveAction);
                                Theme.chat_roundVideoShadow.setBounds(x, y, AndroidUtilities.roundPlayingMessageSize + x + AndroidUtilities.dp(6.0f), AndroidUtilities.roundPlayingMessageSize + y + AndroidUtilities.dp(6.0f));
                                Theme.chat_roundVideoShadow.draw(canvas);
                                canvas.restore();
                            }
                            z3 = super.drawChild(canvas, view, j);
                        } else if (view.getTag() == null) {
                            float translationY = view.getTranslationY();
                            view.setTranslationY(-AndroidUtilities.dp(1000.0f));
                            z3 = super.drawChild(canvas, view, j);
                            view.setTranslationY(translationY);
                        } else {
                            z3 = false;
                        }
                        canvas.restore();
                    } else {
                        boolean drawChild = super.drawChild(canvas, view, j);
                        if (z2 && view == ChatActivity.this.chatListView && playingMessageObject.type != 5 && ChatActivity.this.videoPlayerContainer != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                            canvas.save();
                            canvas.translate(0.0f, ((-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f)) + ChatActivity.this.pullingBottomOffset);
                            super.drawChild(canvas, ChatActivity.this.videoPlayerContainer, j);
                            if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                canvas.save();
                                canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getY());
                                ChatMessageCell chatMessageCell = ChatActivity.this.drawLaterRoundProgressCell;
                                if (z) {
                                    chatMessageCell.drawRoundProgress(canvas);
                                    invalidate();
                                    ChatActivity.this.drawLaterRoundProgressCell.invalidate();
                                } else {
                                    chatMessageCell.drawOverlays(canvas);
                                    if (ChatActivity.this.drawLaterRoundProgressCell.needDrawTime()) {
                                        ChatActivity.this.drawLaterRoundProgressCell.drawTime(canvas, ChatActivity.this.drawLaterRoundProgressCell.getAlpha(), true);
                                    }
                                }
                                canvas.restore();
                            }
                            canvas.restore();
                        }
                        z3 = drawChild;
                    }
                    if (view == ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).parentLayout != null) {
                        INavigationLayout iNavigationLayout = ((BaseFragment) ChatActivity.this).parentLayout;
                        if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                            int translationY2 = ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) + ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                            int currentHeight = translationY2 + (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0);
                            ChatSearchTabs chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
                            int currentHeight2 = currentHeight + (chatSearchTabs != null ? chatSearchTabs.getCurrentHeight() : 0);
                            if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            i += currentHeight2;
                        }
                        iNavigationLayout.drawHeaderShadow(canvas, i);
                    }
                    return z3;
                }
            }
            z2 = false;
            if (view != ChatActivity.this.videoPlayerContainer) {
            }
            if (view == ((BaseFragment) ChatActivity.this).actionBar) {
                INavigationLayout iNavigationLayout2 = ((BaseFragment) ChatActivity.this).parentLayout;
                if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                }
                iNavigationLayout2.drawHeaderShadow(canvas, i);
            }
            return z3;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Code restructure failed: missing block: B:37:0x00dc, code lost:
            if (r10 != null) goto L42;
         */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void drawList(Canvas canvas, boolean z, ArrayList arrayList) {
            ChatActionCell chatActionCell;
            ChatActivity chatActivity = ChatActivity.this;
            float dp = (chatActivity.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if (childAt instanceof BaseCell) {
                    ((BaseCell) childAt).setCaching(z, false);
                }
            }
            for (int i2 = 0; i2 < ChatActivity.this.chatListView.getChildCount(); i2++) {
                View childAt2 = ChatActivity.this.chatListView.getChildAt(i2);
                if ((!z || childAt2.getY() <= AndroidUtilities.dp(40.0f) + dp) && (z || childAt2.getY() + childAt2.getMeasuredHeight() >= AndroidUtilities.dp(203.0f))) {
                    canvas.save();
                    float x = ChatActivity.this.chatListView.getX() + childAt2.getX();
                    RecyclerListView recyclerListView = ChatActivity.this.chatListView;
                    canvas.translate(x, z ? (recyclerListView.getY() + childAt2.getY()) - ChatActivity.this.contentPanTranslation : recyclerListView.getTop() + childAt2.getY());
                    if (childAt2 instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                        if (chatMessageCell.drawBackgroundInParent()) {
                            chatMessageCell.drawBackgroundInternal(canvas, true);
                        }
                        if (arrayList != null) {
                            arrayList.add(chatMessageCell);
                        }
                        chatMessageCell.setCaching(z, true);
                        chatMessageCell.drawCached(canvas);
                    } else if (childAt2 instanceof ChatActionCell) {
                        ChatActionCell chatActionCell2 = (ChatActionCell) childAt2;
                        chatActionCell2.setCaching(z, true);
                        chatActionCell2.drawCached(canvas);
                        chatActionCell2.drawOutboundsContent(canvas);
                        chatActionCell = chatActionCell2;
                    } else {
                        childAt2.draw(canvas);
                        if (arrayList != null && (childAt2 instanceof SizeNotifierFrameLayout.IViewWithInvalidateCallback)) {
                            chatActionCell = (SizeNotifierFrameLayout.IViewWithInvalidateCallback) childAt2;
                            arrayList.add(chatActionCell);
                        }
                    }
                    canvas.restore();
                }
            }
            if (ChatActivity.this.searchViewPager != null) {
                for (int i3 = 0; i3 < ChatActivity.this.searchViewPager.getChildCount(); i3++) {
                    View childAt3 = ChatActivity.this.searchViewPager.getChildAt(i3);
                    if (childAt3 instanceof ChatActivityContainer) {
                        ChatActivityFragmentView chatActivityFragmentView = ((ChatActivityContainer) childAt3).chatActivity.contentView;
                        canvas.save();
                        canvas.translate(childAt3.getTranslationX(), ChatActivity.this.searchViewPager.getTop());
                        chatActivityFragmentView.drawList(canvas, z, arrayList);
                        canvas.restore();
                    }
                }
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getBottomOffset() {
            return ChatActivity.this.chatListView.getBottom();
        }

        public ChatActivity getChatActivity() {
            return ChatActivity.this;
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public int getKeyboardHeight() {
            if (ChatActivity.this.isInsideContainer) {
                return 0;
            }
            return super.getKeyboardHeight();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getListTranslationY() {
            return ChatActivity.this.chatListView.getTranslationY();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public Drawable getNewDrawable() {
            Drawable wallpaperDrawable = ChatActivity.this.themeDelegate.getWallpaperDrawable();
            return wallpaperDrawable != null ? wallpaperDrawable : super.getNewDrawable();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public boolean getNewDrawableMotion() {
            return ChatActivity.this.themeDelegate.wallpaper == null ? super.getNewDrawableMotion() : ChatActivity.this.themeDelegate.wallpaper.settings != null && ChatActivity.this.themeDelegate.wallpaper.settings.motion;
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected int getScrollOffset() {
            return ChatActivity.this.chatListView.computeVerticalScrollOffset();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public void invalidateBlur() {
            super.invalidateBlur();
            if (ChatActivity.this.parentChatActivity != null) {
                ChatActivity.this.parentChatActivity.contentView.invalidateBlur();
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean invalidateOptimized() {
            return true;
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean isActionBarVisible() {
            return ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.isInsideContainer) {
                this.adjustPanLayoutHelper.setResizableView(chatActivity.contentView);
            } else if (((BaseFragment) chatActivity).parentLayout != null && ((BaseFragment) ChatActivity.this).parentLayout.isSheet()) {
                this.adjustPanLayoutHelper.setResizableView((FrameLayout) ((BaseFragment) ChatActivity.this).parentLayout.getView().getParent().getParent().getParent().getParent());
            }
            this.adjustPanLayoutHelper.onAttach();
            ChatActivity.this.chatActivityEnterView.setAdjustPanLayoutHelper(this.adjustPanLayoutHelper);
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject != null && ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && playingMessageObject.getDialogId() == ChatActivity.this.dialog_id)) {
                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.emojiAnimationsOverlay.onAttachedToWindow();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.adjustPanLayoutHelper.onDetach();
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onDetach();
                ChatActivity.this.pullingDownDrawable = null;
            }
            ChatActivity.this.emojiAnimationsOverlay.onDetachedFromWindow();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityFragmentView$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ReactionsEffectOverlay.removeCurrent(true);
                }
            });
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (getTag(67108867) != null) {
                return;
            }
            if (getTag(67108867) == null) {
                InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
                if (instantCameraView != null && instantCameraView.blurFullyDrawing()) {
                    return;
                }
                if (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null) {
                    return;
                }
            }
            super.onDraw(canvas);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Code restructure failed: missing block: B:130:0x023c, code lost:
            if (getLayoutParams().height < 0) goto L103;
         */
        /* JADX WARN: Code restructure failed: missing block: B:173:0x02d9, code lost:
            if (getLayoutParams().height < 0) goto L103;
         */
        /* JADX WARN: Code restructure failed: missing block: B:174:0x02db, code lost:
            r8 = r8 - r2;
         */
        /* JADX WARN: Removed duplicated region for block: B:35:0x0087  */
        /* JADX WARN: Removed duplicated region for block: B:51:0x00d2  */
        /* JADX WARN: Removed duplicated region for block: B:54:0x00e5  */
        /* JADX WARN: Removed duplicated region for block: B:64:0x00fb  */
        /* JADX WARN: Removed duplicated region for block: B:65:0x0119  */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            int i5;
            int i6;
            int i7;
            int i8;
            ChatActivity chatActivity;
            int measuredHeight;
            int i9;
            int childCount = getChildCount();
            int keyboardHeight = getKeyboardHeight();
            int emojiPadding = (ChatActivity.this.fixedKeyboardHeight <= 0 || keyboardHeight > AndroidUtilities.dp(20.0f)) ? (keyboardHeight > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) ? 0 : ChatActivity.this.chatActivityEnterView.getEmojiPadding() : ChatActivity.this.fixedKeyboardHeight;
            for (int i10 = 0; i10 < childCount; i10++) {
                View childAt = getChildAt(i10);
                if (childAt != null && childAt.getVisibility() != 8) {
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) childAt.getLayoutParams();
                    int measuredWidth = childAt.getMeasuredWidth();
                    int measuredHeight2 = childAt.getMeasuredHeight();
                    int i11 = layoutParams.gravity;
                    if (i11 == -1) {
                        i11 = 51;
                    }
                    int i12 = i11 & 112;
                    int i13 = i11 & 7;
                    if (i13 == 1) {
                        i5 = (((i3 - i) - measuredWidth) / 2) + layoutParams.leftMargin;
                    } else if (i13 != 5) {
                        i6 = layoutParams.leftMargin;
                        if (i12 == 16) {
                            if (i12 == 48) {
                                i8 = layoutParams.topMargin + getPaddingTop();
                                if (childAt != ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                                    i8 += ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                                    if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                        i8 += AndroidUtilities.statusBarHeight;
                                    }
                                }
                            } else if (i12 != 80) {
                                i8 = layoutParams.topMargin;
                            } else {
                                i7 = ((i4 - emojiPadding) - i2) - measuredHeight2;
                            }
                            if (childAt != ChatActivity.this.blurredView && childAt != this.backgroundView && !(childAt instanceof HintView) && !(childAt instanceof ChecksHintView)) {
                                chatActivity = ChatActivity.this;
                                if (childAt != chatActivity.mentionContainer) {
                                    i8 -= chatActivity.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2.0f);
                                    ChatActivity chatActivity2 = ChatActivity.this;
                                    chatActivity2.mentionContainer.setTranslationY(chatActivity2.chatActivityEnterView.getAnimatedTop());
                                } else if (childAt != chatActivity.pagedownButton && childAt != ChatActivity.this.searchUpButton && childAt != ChatActivity.this.searchDownButton && childAt != ChatActivity.this.mentiondownButton && childAt != ChatActivity.this.reactionsMentiondownButton) {
                                    if (childAt == ChatActivity.this.emptyViewContainer) {
                                        measuredHeight = (this.inputFieldHeight / 2) - (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0 ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() / 2 : 0);
                                    } else if (!ChatActivity.this.chatActivityEnterView.isPopupView(childAt)) {
                                        if (childAt != ChatActivity.this.gifHintTextView && childAt != ChatActivity.this.voiceHintTextView && childAt != ChatActivity.this.mediaBanTooltip && childAt != ChatActivity.this.emojiHintTextView) {
                                            if (childAt == ChatActivity.this.chatListView || childAt == ChatActivity.this.chatListThanosEffect || childAt == ChatActivity.this.floatingDateView || childAt == ChatActivity.this.infoTopView) {
                                                ChatActivity chatActivity3 = ChatActivity.this;
                                                int i14 = i8 - chatActivity3.blurredViewTopOffset;
                                                if (!((BaseFragment) chatActivity3).inPreviewMode && !ChatActivity.this.isInsideContainer) {
                                                    i14 -= this.inputFieldHeight - AndroidUtilities.dp(51.0f);
                                                }
                                                i8 = i14 - emojiPadding;
                                                if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                }
                                            } else if (childAt == ChatActivity.this.progressView) {
                                                if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                    measuredHeight = AndroidUtilities.dp(48.0f);
                                                }
                                            } else if (childAt == ((BaseFragment) ChatActivity.this).actionBar) {
                                                if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                                    i8 += AndroidUtilities.statusBarHeight;
                                                }
                                                measuredHeight = getPaddingTop();
                                            } else if (childAt == ChatActivity.this.videoPlayerContainer) {
                                                i8 = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() - emojiPadding;
                                                if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                }
                                            } else {
                                                ChatActivity chatActivity4 = ChatActivity.this;
                                                if (childAt != chatActivity4.instantCameraView && childAt != chatActivity4.overlayView && childAt != ChatActivity.this.animatingImageView) {
                                                    if (childAt == ChatActivity.this.textSelectionHelper.getOverlayView(getContext())) {
                                                        i8 -= emojiPadding;
                                                        if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                            i8 -= keyboardHeight;
                                                        }
                                                        measuredHeight = ChatActivity.this.blurredViewTopOffset;
                                                    } else {
                                                        ChatActivity chatActivity5 = ChatActivity.this;
                                                        ChatActivityEnterView chatActivityEnterView = chatActivity5.chatActivityEnterView;
                                                        if (chatActivityEnterView == null || childAt != chatActivityEnterView.botCommandsMenuContainer) {
                                                            if (childAt instanceof MessagePreviewView) {
                                                                i8 = AndroidUtilities.statusBarHeight;
                                                            } else if (childAt != chatActivity5.searchViewPager) {
                                                                if (childAt == ChatActivity.this.messagesSearchListContainer) {
                                                                    ChatActivity chatActivity6 = ChatActivity.this;
                                                                    if (chatActivity6.isInsideContainer && chatActivity6.parentChatActivity != null) {
                                                                        i9 = ChatActivity.this.contentPaddingTop;
                                                                        i8 += i9;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        measuredHeight = this.inputFieldHeight;
                                    } else if (AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) {
                                        i8 = ChatActivity.this.chatActivityEnterView.getTop() - childAt.getMeasuredHeight();
                                        i9 = AndroidUtilities.dp(1.0f);
                                        i8 += i9;
                                    } else {
                                        i8 = ChatActivity.this.chatActivityEnterView.getBottom();
                                    }
                                    i8 -= measuredHeight;
                                } else if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                    measuredHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                    i8 -= measuredHeight;
                                }
                                childAt.layout(i6, i8, measuredWidth + i6, measuredHeight2 + i8);
                            }
                            i8 = 0;
                            childAt.layout(i6, i8, measuredWidth + i6, measuredHeight2 + i8);
                        } else {
                            i7 = ((((i4 - emojiPadding) - i2) - measuredHeight2) / 2) + layoutParams.topMargin;
                        }
                        i8 = i7 - layoutParams.bottomMargin;
                        if (childAt != ChatActivity.this.blurredView) {
                            chatActivity = ChatActivity.this;
                            if (childAt != chatActivity.mentionContainer) {
                            }
                            childAt.layout(i6, i8, measuredWidth + i6, measuredHeight2 + i8);
                        }
                        i8 = 0;
                        childAt.layout(i6, i8, measuredWidth + i6, measuredHeight2 + i8);
                    } else {
                        i5 = i3 - measuredWidth;
                    }
                    i6 = i5 - layoutParams.rightMargin;
                    if (i12 == 16) {
                    }
                    i8 = i7 - layoutParams.bottomMargin;
                    if (childAt != ChatActivity.this.blurredView) {
                    }
                    i8 = 0;
                    childAt.layout(i6, i8, measuredWidth + i6, measuredHeight2 + i8);
                }
            }
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false, false);
            if ((ChatActivity.this.getParentActivity() instanceof LaunchActivity) && !((LaunchActivity) ChatActivity.this.getParentActivity()).drawerLayoutContainer.allowDrawContent) {
                ChatActivity.this.updateChatListViewTopPadding();
            }
            notifyHeightChanged();
        }

        /* JADX WARN: Code restructure failed: missing block: B:215:0x04a9, code lost:
            if (r4 < 0) goto L194;
         */
        /* JADX WARN: Code restructure failed: missing block: B:221:0x04bf, code lost:
            if (r4 < 0) goto L194;
         */
        /* JADX WARN: Code restructure failed: missing block: B:222:0x04c1, code lost:
            r4 = java.lang.Math.max(java.lang.Math.min(r0, org.telegram.messenger.AndroidUtilities.dp(350.0f)), r0 / 2);
         */
        /* JADX WARN: Removed duplicated region for block: B:105:0x026f  */
        /* JADX WARN: Removed duplicated region for block: B:106:0x0271  */
        /* JADX WARN: Removed duplicated region for block: B:115:0x029b  */
        /* JADX WARN: Removed duplicated region for block: B:132:0x033b  */
        /* JADX WARN: Removed duplicated region for block: B:139:0x0361  */
        /* JADX WARN: Removed duplicated region for block: B:145:0x0376  */
        /* JADX WARN: Removed duplicated region for block: B:329:0x0779  */
        /* JADX WARN: Removed duplicated region for block: B:32:0x00cf  */
        /* JADX WARN: Removed duplicated region for block: B:332:0x07c5  */
        /* JADX WARN: Removed duplicated region for block: B:341:0x0771 A[EDGE_INSN: B:341:0x0771->B:327:0x0771 ?: BREAK  , SYNTHETIC] */
        /* JADX WARN: Removed duplicated region for block: B:35:0x00dc  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x010b  */
        /* JADX WARN: Removed duplicated region for block: B:51:0x0139  */
        /* JADX WARN: Removed duplicated region for block: B:62:0x0166  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            ChatActivity chatActivity;
            int emojiPadding;
            int childCount;
            int i3;
            int i4;
            int i5;
            int i6;
            int i7;
            int makeMeasureSpec;
            int makeMeasureSpec2;
            int makeMeasureSpec3;
            int i8;
            int makeMeasureSpec4;
            int i9;
            int dp;
            int i10;
            ChatActivity chatActivity2;
            int popupViewHeight;
            int paddingTop;
            int makeMeasureSpec5;
            int i11;
            int makeMeasureSpec6;
            int i12;
            int childAdapterPosition;
            ChatActivity chatActivity3;
            float f;
            ViewGroup.MarginLayoutParams marginLayoutParams;
            ChatActivity chatActivity4;
            TLRPC.User user;
            ChatActivity chatActivity5;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            if (this.lastWidth != size) {
                ChatActivity.this.globalIgnoreLayout = false;
                this.lastWidth = i;
                if (!((BaseFragment) ChatActivity.this).inPreviewMode && (user = (chatActivity4 = ChatActivity.this).currentUser) != null && user.self) {
                    SimpleTextView titleTextView = chatActivity4.avatarContainer.getTitleTextView();
                    if (size - AndroidUtilities.dp(152.0f) > ((int) titleTextView.getPaint().measureText(titleTextView.getText(), 0, titleTextView.getText().length())) + AndroidUtilities.dp(10.0f)) {
                        ChatActivity.this.showSearchAsIcon = !chatActivity5.showAudioCallAsIcon;
                        f = 40.0f;
                        if (!ChatActivity.this.showSearchAsIcon || ChatActivity.this.showAudioCallAsIcon) {
                            if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                                marginLayoutParams = (ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams();
                                if (ChatActivity.this.chatMode != 3) {
                                    f = 96.0f;
                                }
                                marginLayoutParams.rightMargin = AndroidUtilities.dp(f);
                            }
                            if (ChatActivity.this.showSearchAsIcon) {
                                if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.searchIconItem != null) {
                                    ChatActivity.this.searchIconItem.setVisibility(0);
                                }
                                if (ChatActivity.this.headerItem != null) {
                                    ChatActivity.this.headerItem.hideSubItem(40);
                                }
                            } else {
                                if (ChatActivity.this.headerItem != null) {
                                    ChatActivity.this.headerItem.showSubItem(40);
                                }
                                if (ChatActivity.this.searchIconItem != null) {
                                    ChatActivity.this.searchIconItem.setVisibility(8);
                                }
                            }
                            if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.audioCallIconItem != null) {
                                ChatActivity.this.audioCallIconItem.setVisibility((ChatActivity.this.showAudioCallAsIcon || ChatActivity.this.showSearchAsIcon) ? 8 : 0);
                            }
                            if (ChatActivity.this.headerItem != null) {
                                TLRPC.UserFull currentUserInfo = ChatActivity.this.getCurrentUserInfo();
                                if (ChatActivity.this.showAudioCallAsIcon) {
                                    ChatActivity.this.headerItem.hideSubItem(32);
                                } else if (currentUserInfo != null && currentUserInfo.phone_calls_available) {
                                    ChatActivity.this.headerItem.showSubItem(32, true);
                                }
                            }
                            ChatActivity.this.globalIgnoreLayout = false;
                        } else {
                            if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                                marginLayoutParams = (ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams();
                                marginLayoutParams.rightMargin = AndroidUtilities.dp(f);
                            }
                            if (ChatActivity.this.showSearchAsIcon) {
                            }
                            if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                                ChatActivity.this.audioCallIconItem.setVisibility((ChatActivity.this.showAudioCallAsIcon || ChatActivity.this.showSearchAsIcon) ? 8 : 0);
                            }
                            if (ChatActivity.this.headerItem != null) {
                            }
                            ChatActivity.this.globalIgnoreLayout = false;
                        }
                    }
                }
                ChatActivity.this.showSearchAsIcon = false;
                f = 40.0f;
                if (ChatActivity.this.showSearchAsIcon) {
                }
                if (ChatActivity.this.avatarContainer != null) {
                    marginLayoutParams = (ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams();
                    if (ChatActivity.this.chatMode != 3) {
                    }
                    marginLayoutParams.rightMargin = AndroidUtilities.dp(f);
                }
                if (ChatActivity.this.showSearchAsIcon) {
                }
                if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                }
                if (ChatActivity.this.headerItem != null) {
                }
                ChatActivity.this.globalIgnoreLayout = false;
            }
            setMeasuredDimension(size, size2);
            int paddingTop2 = size2 - getPaddingTop();
            TextView textView = ChatActivity.this.webBotTitle;
            if (textView != null) {
                ((FrameLayout.LayoutParams) textView.getLayoutParams()).topMargin = AndroidUtilities.statusBarHeight;
                ChatActivity.this.webBotTitle.setTextSize((AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 20.0f : 18.0f);
            }
            measureChildWithMargins(((BaseFragment) ChatActivity.this).actionBar, i, 0, i2, 0);
            int measuredHeight = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
            if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                paddingTop2 -= measuredHeight;
            }
            int i13 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding;
            boolean z = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (this.lastHeight != size2) {
                measureKeyboardHeight();
            }
            int keyboardHeight = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardHeight <= AndroidUtilities.dp(20.0f)) {
                chatActivity = ChatActivity.this;
                emojiPadding = chatActivity.fixedKeyboardHeight;
            } else if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                ChatActivity.this.chatEmojiViewPadding = 0;
                setEmojiKeyboardHeight(ChatActivity.this.chatEmojiViewPadding);
                boolean z2 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding < AndroidUtilities.dp(20.0f);
                if (MediaController.getInstance().getPlayingMessageObject() != null && MediaController.getInstance().getPlayingMessageObject().isRoundVideo() && z != z2) {
                    for (i12 = 0; i12 < ChatActivity.this.chatListView.getChildCount(); i12++) {
                        View childAt = ChatActivity.this.chatListView.getChildAt(i12);
                        if (childAt instanceof ChatMessageCell) {
                            MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                            if (messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject) && (childAdapterPosition = ChatActivity.this.chatListView.getChildAdapterPosition(childAt)) >= 0) {
                                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(childAdapterPosition, (int) (((((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - chatActivity3.blurredViewBottomOffset) + ((this.keyboardHeight + chatActivity3.chatEmojiViewPadding) - i13)) - (z2 ? AndroidUtilities.roundMessageSize : AndroidUtilities.roundPlayingMessageSize)) / 2.0f), false);
                                ChatActivity.this.chatAdapter.notifyItemChanged(childAdapterPosition);
                                this.adjustPanLayoutHelper.delayAnimation();
                                childCount = getChildCount();
                                measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
                                if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                    ChatActivity chatActivity6 = ChatActivity.this;
                                    if (!chatActivity6.isInsideContainer) {
                                        this.inputFieldHeight = chatActivity6.chatActivityEnterView.getMeasuredHeight();
                                        i3 = AndroidUtilities.dp(49.0f);
                                        ChatActivity chatActivity7 = ChatActivity.this;
                                        chatActivity7.blurredViewTopOffset = 0;
                                        chatActivity7.blurredViewBottomOffset = 0;
                                        if (SharedConfig.chatBlurEnabled()) {
                                            ChatActivity chatActivity8 = ChatActivity.this;
                                            if (!chatActivity8.isInsideContainer) {
                                                chatActivity8.blurredViewTopOffset = measuredHeight;
                                                chatActivity8.blurredViewBottomOffset = AndroidUtilities.dp(203.0f);
                                            }
                                        }
                                        i4 = 0;
                                        while (true) {
                                            int i14 = 1073741824;
                                            if (i4 < childCount) {
                                                break;
                                            }
                                            View childAt2 = getChildAt(i4);
                                            if (childAt2 != null && childAt2.getVisibility() != 8) {
                                                ChatActivity chatActivity9 = ChatActivity.this;
                                                if (childAt2 != chatActivity9.chatActivityEnterView && childAt2 != ((BaseFragment) chatActivity9).actionBar) {
                                                    if (childAt2 == this.backgroundView) {
                                                        i7 = 1073741824;
                                                    } else {
                                                        if (childAt2 == ChatActivity.this.blurredView) {
                                                            popupViewHeight = (keyboardHeight <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0 || ChatActivity.this.isInsideContainer) ? size2 : size2 + keyboardHeight;
                                                        } else if (childAt2 == ChatActivity.this.chatListView || childAt2 == ChatActivity.this.chatListThanosEffect) {
                                                            i5 = i4;
                                                            int makeMeasureSpec7 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                            int i15 = (paddingTop2 - i3) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight);
                                                            ChatActivity chatActivity10 = ChatActivity.this;
                                                            int i16 = i15 + chatActivity10.blurredViewTopOffset + chatActivity10.blurredViewBottomOffset;
                                                            if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0 && !ChatActivity.this.isInsideContainer) {
                                                                i16 += keyboardHeight;
                                                            }
                                                            if (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0 && ChatActivity.this.bottomOverlayStartButton != null) {
                                                                if (ChatActivity.this.bottomOverlayStartButton.getVisibility() != 8) {
                                                                    i16 -= AndroidUtilities.dp(16.0f);
                                                                }
                                                            }
                                                            childAt2.measure(makeMeasureSpec7, View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), i16), 1073741824));
                                                            i4 = i5 + 1;
                                                        } else {
                                                            if (childAt2 == ChatActivity.this.progressView) {
                                                                makeMeasureSpec5 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                i11 = Math.max(AndroidUtilities.dp(10.0f), ((paddingTop2 - this.inputFieldHeight) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight)) + AndroidUtilities.dp((ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0) + 2));
                                                            } else {
                                                                ChatActivity chatActivity11 = ChatActivity.this;
                                                                if (childAt2 == chatActivity11.instantCameraView) {
                                                                    i5 = i4;
                                                                    i6 = 1073741824;
                                                                } else if (childAt2 == chatActivity11.overlayView) {
                                                                    i5 = i4;
                                                                    i6 = 1073741824;
                                                                } else if (childAt2 == ChatActivity.this.emptyViewContainer) {
                                                                    makeMeasureSpec5 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                    makeMeasureSpec6 = View.MeasureSpec.makeMeasureSpec(paddingTop2, 1073741824);
                                                                    childAt2.measure(makeMeasureSpec5, makeMeasureSpec6);
                                                                } else if (childAt2 == ChatActivity.this.messagesSearchListContainer) {
                                                                    makeMeasureSpec5 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                    int dp2 = (size2 - (ChatActivity.this.isInsideContainer ? 0 : measuredHeight)) - AndroidUtilities.dp(48.0f);
                                                                    ChatActivity chatActivity12 = ChatActivity.this;
                                                                    i11 = dp2 - ((!chatActivity12.isInsideContainer || chatActivity12.parentChatActivity == null) ? 0 : ChatActivity.this.contentPaddingTop);
                                                                } else {
                                                                    if (ChatActivity.this.chatActivityEnterView.isPopupView(childAt2)) {
                                                                        popupViewHeight = ChatActivity.this.chatActivityEnterView.getPopupViewHeight(childAt2);
                                                                        if (((BaseFragment) ChatActivity.this).inBubbleMode) {
                                                                            paddingTop = (paddingTop2 - this.inputFieldHeight) + measuredHeight + getPaddingTop();
                                                                        } else if (AndroidUtilities.isInMultiwindow) {
                                                                            paddingTop = (((paddingTop2 - this.inputFieldHeight) + measuredHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop();
                                                                        } else {
                                                                            makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                            makeMeasureSpec4 = View.MeasureSpec.makeMeasureSpec(childAt2.getLayoutParams().height, 1073741824);
                                                                        }
                                                                        i14 = 1073741824;
                                                                    } else {
                                                                        ChatActivity chatActivity13 = ChatActivity.this;
                                                                        MentionsContainerView mentionsContainerView = chatActivity13.mentionContainer;
                                                                        if (childAt2 == mentionsContainerView) {
                                                                            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mentionsContainerView.getLayoutParams();
                                                                            if (ChatActivity.this.mentionContainer.getAdapter().isBannedInline()) {
                                                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingTop2, Integer.MIN_VALUE));
                                                                            } else {
                                                                                ChatActivity.this.mentionContainer.setIgnoreLayout(true);
                                                                                LinearLayoutManager currentLayoutManager = ChatActivity.this.mentionContainer.getCurrentLayoutManager();
                                                                                if (currentLayoutManager instanceof ExtendedGridLayoutManager) {
                                                                                    int rowsCount = ((ExtendedGridLayoutManager) currentLayoutManager).getRowsCount(size) * 102;
                                                                                    if (ChatActivity.this.mentionContainer.getAdapter().isBotContext() && (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null || ChatActivity.this.mentionContainer.getAdapter().getBotWebViewSwitch() != null)) {
                                                                                        rowsCount += 34;
                                                                                    }
                                                                                    dp = (paddingTop2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (rowsCount != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                                                    Math.max(0, dp - AndroidUtilities.dp(Math.min(rowsCount, 122.399994f)));
                                                                                } else {
                                                                                    int lastItemCount = ChatActivity.this.mentionContainer.getAdapter().getLastItemCount();
                                                                                    if (ChatActivity.this.mentionContainer.getAdapter().isBotContext()) {
                                                                                        if (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() == null && ChatActivity.this.mentionContainer.getAdapter().getBotWebViewSwitch() == null) {
                                                                                            i10 = 0;
                                                                                        } else {
                                                                                            lastItemCount--;
                                                                                            i10 = 36;
                                                                                        }
                                                                                        i9 = i10 + (lastItemCount * 68);
                                                                                    } else {
                                                                                        i9 = lastItemCount * 36;
                                                                                    }
                                                                                    dp = (i9 != 0 ? AndroidUtilities.dp(2.0f) : 0) + (paddingTop2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                                                }
                                                                                layoutParams.height = dp;
                                                                                layoutParams.topMargin = 0;
                                                                                ChatActivity.this.mentionContainer.setIgnoreLayout(false);
                                                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(layoutParams.height, 1073741824));
                                                                            }
                                                                            ChatActivity.this.mentionContainer.setTranslationY(chatActivity2.chatActivityEnterView.getAnimatedTop());
                                                                            i5 = i4;
                                                                            i4 = i5 + 1;
                                                                        } else {
                                                                            if (childAt2 == chatActivity13.textSelectionHelper.getOverlayView(getContext())) {
                                                                                makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                                i8 = ChatActivity.this.blurredViewTopOffset + paddingTop2;
                                                                                if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                                    ChatActivity chatActivity14 = ChatActivity.this;
                                                                                    if (!chatActivity14.isInsideContainer) {
                                                                                        i8 += keyboardHeight;
                                                                                        chatActivity14.textSelectionHelper.setKeyboardSize(keyboardHeight);
                                                                                    }
                                                                                }
                                                                                ChatActivity.this.textSelectionHelper.setKeyboardSize(0);
                                                                            } else if (childAt2 instanceof MessagePreviewView) {
                                                                                makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                                i8 = size2 - AndroidUtilities.statusBarHeight;
                                                                                if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0 && !ChatActivity.this.isInsideContainer) {
                                                                                    i8 += keyboardHeight;
                                                                                }
                                                                            } else {
                                                                                i7 = 1073741824;
                                                                                if (childAt2 == ChatActivity.this.hashtagHistoryView) {
                                                                                    makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                                    ChatActivity chatActivity15 = ChatActivity.this;
                                                                                    makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec((size2 - (chatActivity15.isInsideContainer ? 0 : measuredHeight)) - chatActivity15.hashtagSearchTabs.getHeight(), 1073741824);
                                                                                    childAt2.measure(makeMeasureSpec, makeMeasureSpec2);
                                                                                    i5 = i4;
                                                                                    i4 = i5 + 1;
                                                                                } else if (childAt2 != ChatActivity.this.searchViewPager) {
                                                                                    i5 = i4;
                                                                                    measureChildWithMargins(childAt2, i, 0, i2, 0);
                                                                                    i4 = i5 + 1;
                                                                                }
                                                                            }
                                                                            makeMeasureSpec4 = View.MeasureSpec.makeMeasureSpec(i8, 1073741824);
                                                                        }
                                                                    }
                                                                    childAt2.measure(makeMeasureSpec3, makeMeasureSpec4);
                                                                    i5 = i4;
                                                                    i4 = i5 + 1;
                                                                }
                                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, i6), View.MeasureSpec.makeMeasureSpec(((size2 - this.inputFieldHeight) - ChatActivity.this.chatEmojiViewPadding) + AndroidUtilities.dp(3.0f), i6));
                                                                i4 = i5 + 1;
                                                            }
                                                            makeMeasureSpec6 = View.MeasureSpec.makeMeasureSpec(i11, 1073741824);
                                                            childAt2.measure(makeMeasureSpec5, makeMeasureSpec6);
                                                        }
                                                        makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, i14);
                                                        makeMeasureSpec4 = View.MeasureSpec.makeMeasureSpec(popupViewHeight, i14);
                                                        childAt2.measure(makeMeasureSpec3, makeMeasureSpec4);
                                                        i5 = i4;
                                                        i4 = i5 + 1;
                                                    }
                                                    makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(size, i7);
                                                    makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec(size2, i7);
                                                    childAt2.measure(makeMeasureSpec, makeMeasureSpec2);
                                                    i5 = i4;
                                                    i4 = i5 + 1;
                                                }
                                            }
                                            i5 = i4;
                                            i4 = i5 + 1;
                                        }
                                        if (ChatActivity.this.fixPaddingsInLayout) {
                                            ChatActivity.this.globalIgnoreLayout = true;
                                            ChatActivity.this.invalidateChatListViewTopPadding();
                                            ChatActivity.this.invalidateMessagesVisiblePart();
                                            ChatActivity.this.fixPaddingsInLayout = false;
                                            ChatActivity.this.chatListView.measure(View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), 1073741824));
                                            ChatActivity.this.globalIgnoreLayout = false;
                                        }
                                        if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                                            final int i17 = ChatActivity.this.scrollToPositionOnRecreate;
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityFragmentView$$ExternalSyntheticLambda1
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatActivity.ChatActivityFragmentView.this.lambda$onMeasure$1(i17);
                                                }
                                            });
                                            ChatActivity.this.scrollToPositionOnRecreate = -1;
                                        }
                                        ChatActivity.this.updateBulletinLayout();
                                        this.lastHeight = size2;
                                    }
                                }
                                this.inputFieldHeight = 0;
                                i3 = 0;
                                ChatActivity chatActivity72 = ChatActivity.this;
                                chatActivity72.blurredViewTopOffset = 0;
                                chatActivity72.blurredViewBottomOffset = 0;
                                if (SharedConfig.chatBlurEnabled()) {
                                }
                                i4 = 0;
                                while (true) {
                                    int i142 = 1073741824;
                                    if (i4 < childCount) {
                                    }
                                    i4 = i5 + 1;
                                }
                                if (ChatActivity.this.fixPaddingsInLayout) {
                                }
                                if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                                }
                                ChatActivity.this.updateBulletinLayout();
                                this.lastHeight = size2;
                            }
                        }
                    }
                }
                ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
                childCount = getChildCount();
                measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
                if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                }
                this.inputFieldHeight = 0;
                i3 = 0;
                ChatActivity chatActivity722 = ChatActivity.this;
                chatActivity722.blurredViewTopOffset = 0;
                chatActivity722.blurredViewBottomOffset = 0;
                if (SharedConfig.chatBlurEnabled()) {
                }
                i4 = 0;
                while (true) {
                    int i1422 = 1073741824;
                    if (i4 < childCount) {
                    }
                    i4 = i5 + 1;
                }
                if (ChatActivity.this.fixPaddingsInLayout) {
                }
                if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                }
                ChatActivity.this.updateBulletinLayout();
                this.lastHeight = size2;
            } else {
                chatActivity = ChatActivity.this;
                emojiPadding = chatActivity.chatActivityEnterView.isPopupShowing() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() : 0;
            }
            chatActivity.chatEmojiViewPadding = emojiPadding;
            setEmojiKeyboardHeight(ChatActivity.this.chatEmojiViewPadding);
            if (this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding < AndroidUtilities.dp(20.0f)) {
            }
            if (MediaController.getInstance().getPlayingMessageObject() != null) {
                while (i12 < ChatActivity.this.chatListView.getChildCount()) {
                }
            }
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
            childCount = getChildCount();
            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
            if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
            }
            this.inputFieldHeight = 0;
            i3 = 0;
            ChatActivity chatActivity7222 = ChatActivity.this;
            chatActivity7222.blurredViewTopOffset = 0;
            chatActivity7222.blurredViewBottomOffset = 0;
            if (SharedConfig.chatBlurEnabled()) {
            }
            i4 = 0;
            while (true) {
                int i14222 = 1073741824;
                if (i4 < childCount) {
                }
                i4 = i5 + 1;
            }
            if (ChatActivity.this.fixPaddingsInLayout) {
            }
            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
            }
            ChatActivity.this.updateBulletinLayout();
            this.lastHeight = size2;
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (ChatActivity.this.globalIgnoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // android.view.View
        public void setPadding(int i, int i2, int i3, int i4) {
            ChatActivity.this.contentPaddingTop = i2;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public void updateBlurContent() {
            super.updateBlurContent();
            if (ChatActivity.this.parentChatActivity != null) {
                ChatActivity.this.parentChatActivity.contentView.updateBlurContent();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public static class ChatActivityTextSelectionHelper extends TextSelectionHelper.ChatListTextSelectionHelper {
        ChatActivity chatActivity;

        private ChatActivityTextSelectionHelper() {
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected boolean canCopy() {
            ChatActivity chatActivity;
            TextSelectionHelper.SelectableView selectableView;
            ChatActivity chatActivity2 = this.chatActivity;
            if ((chatActivity2 == null || chatActivity2.getDialogId() != UserObject.VERIFY) && (chatActivity = this.chatActivity) != null) {
                return (chatActivity.getDialogId() >= 0 || !this.chatActivity.getMessagesController().isChatNoForwards(-this.chatActivity.getDialogId())) && ((selectableView = this.selectedView) == null || ((ChatMessageCell) selectableView).getMessageObject() == null || ((ChatMessageCell) this.selectedView).getMessageObject().messageOwner == null || !((ChatMessageCell) this.selectedView).getMessageObject().messageOwner.noforwards);
            }
            return true;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected boolean canShowQuote() {
            TextSelectionHelper.SelectableView selectableView;
            ChatActivity chatActivity;
            ChatActivity chatActivity2 = this.chatActivity;
            if (chatActivity2 == null || chatActivity2.getDialogId() != UserObject.VERIFY) {
                ChatActivity chatActivity3 = this.chatActivity;
                boolean z = (chatActivity3 != null && chatActivity3.getMessagesController().isChatNoForwards(this.chatActivity.getCurrentChat())) || !((selectableView = this.selectedView) == null || ((ChatMessageCell) selectableView).getMessageObject() == null || ((ChatMessageCell) this.selectedView).getMessageObject().messageOwner == null || !((ChatMessageCell) this.selectedView).getMessageObject().messageOwner.noforwards);
                if (this.isFactCheck || (chatActivity = this.chatActivity) == null || chatActivity.getCurrentEncryptedChat() != null) {
                    return false;
                }
                TextSelectionHelper.SelectableView selectableView2 = this.selectedView;
                if ((selectableView2 != null && (((ChatMessageCell) selectableView2).getMessageObject() == null || ((ChatMessageCell) this.selectedView).getMessageObject().type == 23 || ((ChatMessageCell) this.selectedView).getMessageObject().isVoiceTranscriptionOpen() || ((ChatMessageCell) this.selectedView).getMessageObject().isInvoice() || this.chatActivity.textSelectionHelper.isDescription)) || this.chatActivity.getMessagesController().getTranslateController().isTranslatingDialog(this.chatActivity.dialog_id) || UserObject.isService(this.chatActivity.dialog_id)) {
                    return false;
                }
                return !z || this.chatActivity.getCurrentChat() == null || ChatObject.canWriteToChat(this.chatActivity.getCurrentChat());
            }
            return false;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentBottomPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return chatActivity.blurredViewBottomOffset;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentTopPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return (int) chatActivity.chatListViewPaddingTop;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected Theme.ResourcesProvider getResourcesProvider() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity != null) {
                return chatActivity.themeDelegate;
            }
            return null;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected int getThemedColor(int i) {
            return Theme.getColor(i, this.chatActivity.themeDelegate);
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected void onQuoteClick(MessageObject messageObject, int i, int i2, CharSequence charSequence) {
            ChatActivity chatActivity;
            MessageObject.GroupedMessages group;
            if (messageObject == null || (chatActivity = this.chatActivity) == null) {
                return;
            }
            int min = Math.min(i2, chatActivity.getMessagesController().quoteLengthMax + i);
            if (messageObject.getGroupId() != 0 && (group = this.chatActivity.getGroup(messageObject.getGroupId())) != null && !group.isDocuments) {
                messageObject = group.captionMessage;
            }
            if (messageObject == null) {
                return;
            }
            ReplyQuote from = ReplyQuote.from(messageObject, i, min);
            if (from.getText() == null) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = this.chatActivity.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
                if (((BaseFragment) this.chatActivity).actionBar != null && ((BaseFragment) this.chatActivity).actionBar.isActionModeShowed()) {
                    this.chatActivity.clearSelectionMode();
                }
                this.chatActivity.showFieldPanelForReplyQuote(messageObject, from);
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivity.chatActivityEnterView;
                if (chatActivityEnterView2 != null) {
                    chatActivityEnterView2.openKeyboard();
                    return;
                }
                return;
            }
            this.chatActivity.replyingQuote = from;
            this.chatActivity.replyingMessageObject = messageObject;
            this.chatActivity.forbidForwardingWithDismiss = false;
            ChatActivity chatActivity2 = this.chatActivity;
            chatActivity2.messagePreviewParams = new MessagePreviewParams(chatActivity2.currentEncryptedChat != null, chatActivity2.getMessagesController().isChatNoForwards(this.chatActivity.currentChat));
            ChatActivity chatActivity3 = this.chatActivity;
            chatActivity3.messagePreviewParams.updateReply(chatActivity3.replyingMessageObject, this.chatActivity.getGroup(messageObject.getGroupId()), this.chatActivity.getDialogId(), this.chatActivity.replyingQuote);
            Bundle bundle = new Bundle();
            bundle.putBoolean("onlySelect", true);
            bundle.putInt("dialogsType", 3);
            bundle.putBoolean("quote", true);
            bundle.putInt("messagesCount", 1);
            bundle.putBoolean("canSelectTopics", true);
            DialogsActivity dialogsActivity = new DialogsActivity(bundle);
            dialogsActivity.setDelegate(this.chatActivity);
            this.chatActivity.presentFragment(dialogsActivity);
        }

        public void setChatActivity(ChatActivity chatActivity) {
            cancelAllAnimators();
            clear();
            this.textSelectionOverlay = null;
            this.chatActivity = chatActivity;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class ChatMessageCellDelegate implements ChatMessageCell.ChatMessageCellDelegate {

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 1 extends ShareAlert {
            final /* synthetic */ boolean val$includeStory;
            final /* synthetic */ MessageObject val$messageObject;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            1(Context context, ChatActivity chatActivity, ArrayList arrayList, String str, String str2, boolean z, String str3, String str4, boolean z2, boolean z3, boolean z4, Theme.ResourcesProvider resourcesProvider, boolean z5, MessageObject messageObject) {
                super(context, chatActivity, arrayList, str, str2, z, str3, str4, z2, z3, z4, resourcesProvider);
                this.val$includeStory = z5;
                this.val$messageObject = messageObject;
                this.includeStoryFromMessage = z5;
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onShareStory$0(Long l) {
                TLRPC.Chat chat;
                String str = (l.longValue() >= 0 || (chat = ChatActivity.this.getMessagesController().getChat(Long.valueOf(-l.longValue()))) == null) ? "" : chat.title;
                BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.contact_check, AndroidUtilities.replaceTags(TextUtils.isEmpty(str) ? LocaleController.getString(R.string.RepostedToProfile) : LocaleController.formatString(R.string.RepostedToChannelProfile, str))).show();
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onShareStory$1(StoryRecorder storyRecorder, View view, Long l, Runnable runnable, Boolean bool, final Long l2) {
                boolean booleanValue = bool.booleanValue();
                StoryRecorder.SourceView sourceView = null;
                if (booleanValue) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$1$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.1.this.lambda$onShareStory$0(l2);
                        }
                    });
                    dismiss();
                } else if ((view instanceof ShareDialogCell) && view.isAttachedToWindow()) {
                    sourceView = StoryRecorder.SourceView.fromShareCell((ShareDialogCell) view);
                }
                storyRecorder.replaceSourceView(sourceView);
                AndroidUtilities.runOnUIThread(runnable);
            }

            @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
            public void dismissInternal() {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                super.dismissInternal();
                if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                    ChatActivity.this.fragmentView.requestLayout();
                }
            }

            @Override // org.telegram.ui.Components.ShareAlert
            protected void onSend(LongSparseArray longSparseArray, int i, TLRPC.TL_forumTopic tL_forumTopic) {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                if (longSparseArray.size() != 1) {
                    ChatActivity.this.undoView.showWithAction(0L, 53, Integer.valueOf(i), Integer.valueOf(longSparseArray.size()), (Runnable) null, (Runnable) null);
                } else if (((TLRPC.Dialog) longSparseArray.valueAt(0)).id == ChatActivity.this.getUserConfig().getClientUserId() && BulletinFactory.of(ChatActivity.this).showForwardedBulletinWithTag(((TLRPC.Dialog) longSparseArray.valueAt(0)).id, i)) {
                } else {
                    ChatActivity.this.undoView.showWithAction(((TLRPC.Dialog) longSparseArray.valueAt(0)).id, 53, Integer.valueOf(i), tL_forumTopic, (Runnable) null, (Runnable) null);
                }
            }

            @Override // org.telegram.ui.Components.ShareAlert
            protected void onShareStory(final View view) {
                StoryRecorder.SourceView fromShareCell = view instanceof ShareDialogCell ? StoryRecorder.SourceView.fromShareCell((ShareDialogCell) view) : null;
                ArrayList arrayList = new ArrayList();
                MessageObject.GroupedMessages groupedMessages = this.val$messageObject.getGroupId() != 0 ? (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(this.val$messageObject.getGroupId()) : null;
                if (groupedMessages != null) {
                    arrayList.addAll(groupedMessages.messages);
                } else {
                    arrayList.add(this.val$messageObject);
                }
                final StoryRecorder storyRecorder = StoryRecorder.getInstance(ChatActivity.this.getParentActivity(), this.currentAccount);
                storyRecorder.setOnPrepareCloseListener(new Utilities.Callback4() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$1$$ExternalSyntheticLambda0
                    @Override // org.telegram.messenger.Utilities.Callback4
                    public final void run(Object obj, Object obj2, Object obj3, Object obj4) {
                        ChatActivity.ChatMessageCellDelegate.1.this.lambda$onShareStory$1(storyRecorder, view, (Long) obj, (Runnable) obj2, (Boolean) obj3, (Long) obj4);
                    }
                });
                storyRecorder.openRepost(fromShareCell, StoryEntry.repostMessage(arrayList));
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 10 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            10(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$10$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 11 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            11(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$11$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 12 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            12(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$12$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 13 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            13(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$13$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes4.dex */
        public class 14 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            14(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$14$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* loaded from: classes4.dex */
        class 7 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            7(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$7$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* loaded from: classes4.dex */
        class 8 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            8(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$8$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 0;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        /* loaded from: classes4.dex */
        class 9 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            9(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$9$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$50800(ChatActivity.this);
                    }
                }, 250L);
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }
        }

        private ChatMessageCellDelegate() {
        }

        private void appendMention(TLRPC.User user) {
            SpannableStringBuilder spannableStringBuilder;
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                CharSequence fieldText = chatActivityEnterView.getFieldText();
                if (fieldText != null) {
                    spannableStringBuilder = new SpannableStringBuilder(fieldText);
                    if (fieldText.charAt(fieldText.length() - 1) != ' ') {
                        spannableStringBuilder.append((CharSequence) " ");
                    }
                } else {
                    spannableStringBuilder = new SpannableStringBuilder();
                }
                if (spannableStringBuilder.length() > 0 && spannableStringBuilder.charAt(spannableStringBuilder.length() - 1) != ' ') {
                    spannableStringBuilder.append(' ');
                }
                String publicUsername = UserObject.getPublicUsername(user);
                if (publicUsername != null) {
                    spannableStringBuilder.append((CharSequence) "@").append((CharSequence) publicUsername).append((CharSequence) " ");
                } else {
                    String firstName = UserObject.getFirstName(user, false);
                    SpannableString spannableString = new SpannableString(firstName + " ");
                    spannableString.setSpan(new URLSpanUserMention("" + user.id, 3), 0, spannableString.length(), 33);
                    spannableStringBuilder.append((CharSequence) spannableString);
                }
                ChatActivity.this.chatActivityEnterView.setFieldText(spannableStringBuilder);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda30
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$appendMention$3();
                    }
                }, 200L);
            }
        }

        private boolean isAvatarPreviewerEnabled() {
            TLRPC.Chat chat;
            return UserObject.isUserSelf(ChatActivity.this.currentUser) || ((chat = ChatActivity.this.currentChat) != null && (!ChatObject.isChannel(chat) || ChatActivity.this.currentChat.megagroup));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$appendMention$3() {
            ChatActivity.this.chatActivityEnterView.openKeyboard();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressChannelAvatar$4(TLRPC.Chat chat, ChatMessageCell chatMessageCell, AvatarPreviewer.MenuItem menuItem) {
            int i = 152.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(chat);
            } else if (i == 2 || i == 3) {
                openChat(chatMessageCell, chat, 0, false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$2(ChatMessageCell chatMessageCell, TLRPC.User user, AvatarPreviewer.MenuItem menuItem) {
            int i = 152.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(user);
            } else if (i == 4) {
                openDialog(chatMessageCell, user);
            } else if (i == 5) {
                appendMention(user);
            } else if (i != 6) {
            } else {
                ChatActivity.this.lambda$openSearchWithUser$305(user);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressAnimatedEmoji$19(TLRPC.InputStickerSet inputStickerSet) {
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(inputStickerSet);
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$16(View view) {
            if (((BaseFragment) ChatActivity.this).parentLayout != null) {
                ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$17(TLRPC.Chat chat) {
            BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.contact_check, LocaleController.formatString(R.string.YouJoinedChannel, chat == null ? "" : chat.title)).show(true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$18(final TLRPC.Chat chat, ChatMessageCell chatMessageCell, View view) {
            ChatActivity.this.finishPreviewFragment();
            chat.left = false;
            if (chatMessageCell != null && chatMessageCell.channelRecommendationsCell != null) {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRecommendationsLoaded, Long.valueOf(chatMessageCell.channelRecommendationsCell.chatId));
            }
            ChatActivity.this.getMessagesController().addUserToChat(chat.id, ChatActivity.this.getUserConfig().getCurrentUser(), 0, null, ChatActivity.this, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda28
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$17(chat);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressFactCheckWhat$0(HintView2 hintView2) {
            ChatActivity.this.contentView.removeView(hintView2);
            if (hintView2 == ChatActivity.this.factCheckHint) {
                ChatActivity.this.factCheckHint = null;
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressFactCheckWhat$1(ChatMessageCell chatMessageCell, int i, int i2) {
            if (ChatActivity.this.factCheckHint == null) {
                return;
            }
            int[] iArr = new int[2];
            chatMessageCell.getLocationInWindow(iArr);
            ChatActivity.this.factCheckHint.setTranslationY(((iArr[1] - ChatActivity.this.factCheckHint.getTop()) - AndroidUtilities.dp(520.0f)) + i);
            ChatActivity.this.factCheckHint.setJointPx(0.0f, (-AndroidUtilities.dp(16.0f)) + iArr[0] + i2);
            ChatActivity.this.factCheckHint.show();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressImage$22(MessageObject messageObject) {
            if (ChatActivity.this.checkSlowModeAlert()) {
                SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(messageObject.getDiceEmoji(), ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, false, null, null, null, true, 0, null, false);
                of.quick_reply_shortcut_id = ChatActivity.this.getQuickReplyId();
                ChatActivity chatActivity = ChatActivity.this;
                of.quick_reply_shortcut = chatActivity.quickReplyShortcut;
                chatActivity.getSendMessagesHelper().sendMessage(of);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$23(TLObject tLObject, boolean z) {
            ChatActivity.this.progressDialogCurrent.end();
            if (!(tLObject instanceof TLRPC.TL_messages_stickerSet)) {
                BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.error, LocaleController.getString(z ? R.string.AddEmojiNotFound : R.string.AddStickersNotFound)).show(true);
                return;
            }
            TLRPC.TL_messages_stickerSet tL_messages_stickerSet = (TLRPC.TL_messages_stickerSet) tLObject;
            MediaDataController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).putStickerSet(tL_messages_stickerSet, false);
            TLRPC.TL_inputStickerSetID tL_inputStickerSetID = new TLRPC.TL_inputStickerSetID();
            TLRPC.StickerSet stickerSet = tL_messages_stickerSet.set;
            tL_inputStickerSetID.access_hash = stickerSet.access_hash;
            tL_inputStickerSetID.id = stickerSet.id;
            if (!z) {
                Activity parentActivity = ChatActivity.this.getParentActivity();
                ChatActivity chatActivity = ChatActivity.this;
                StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
                stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                ChatActivity.this.showDialog(stickersAlert);
                return;
            }
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(tL_inputStickerSetID);
            ChatActivity chatActivity2 = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity2, chatActivity2.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$24(final boolean z, final TLObject tLObject, TLRPC.TL_error tL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda27
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$23(tLObject, z);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$25(int i) {
            ConnectionsManager.getInstance(((BaseFragment) ChatActivity.this).currentAccount).cancelRequest(i, true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressMoreChannelRecommendations$15() {
            ChatActivity.this.presentFragment(new PremiumPreviewFragment("similar_channels"));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$10(TLRPC.ReactionCount reactionCount, View view) {
            ChatActivity.this.closeMenu();
            ChatActivity.this.lambda$openSearchWithText$303("");
            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.setChosen(ReactionsLayoutInBubble.VisibleReaction.fromTL(reactionCount.reaction), true);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$11(ChatMessageCell chatMessageCell, TLRPC.ReactionCount reactionCount, View view) {
            pressedReaction(chatMessageCell, reactionCount, 0.0f, 0.0f);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$12(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.4
                @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$13(ChatMessageCell chatMessageCell, ReactedUsersListView reactedUsersListView, long j, TLRPC.MessagePeerReaction messagePeerReaction) {
            String str;
            Bundle bundle = new Bundle();
            if (j > 0) {
                str = "user_id";
            } else {
                j = -j;
                str = "chat_id";
            }
            bundle.putLong(str, j);
            bundle.putInt("report_reaction_message_id", chatMessageCell.getMessageObject().getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$14(ArrayList arrayList, View view) {
            new EmojiPacksAlert(new BaseFragment() { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.5
                @Override // org.telegram.ui.ActionBar.BaseFragment
                public Context getContext() {
                    return ChatActivity.this.getContext();
                }

                @Override // org.telegram.ui.ActionBar.BaseFragment
                public int getCurrentAccount() {
                    return this.currentAccount;
                }

                @Override // org.telegram.ui.ActionBar.BaseFragment
                public Theme.ResourcesProvider getResourceProvider() {
                    return ChatActivity.this.themeDelegate;
                }
            }, ChatActivity.this.getContext(), ChatActivity.this.themeDelegate, arrayList).show();
            ChatActivity.this.closeMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$9(TLRPC.ReactionCount reactionCount, View view) {
            ChatActivity.this.closeMenu();
            SearchTagsList.openRenameTagAlert(ChatActivity.this.getContext(), ((BaseFragment) ChatActivity.this).currentAccount, reactionCount.reaction, ChatActivity.this.themeDelegate, false);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReplyMessage$20(MessageObject messageObject) {
            ChatActivity.this.progressDialogAtMessageId = messageObject.getId();
            ChatActivity.this.progressDialogAtMessageType = 0;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReplyMessage$21(int i, final MessageObject messageObject) {
            ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda26
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReplyMessage$20(messageObject);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$didPressRevealSensitiveContent$26(boolean[] zArr, View view) {
            boolean z = !zArr[0];
            zArr[0] = z;
            ((CheckBoxCell) view).setChecked(z, true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressRevealSensitiveContent$27() {
            ChatActivity.this.presentFragment(new ThemeActivity(0).highlightSensitiveRow());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressRevealSensitiveContent$28(boolean[] zArr, TL_account.contentSettings contentsettings, ChatMessageCell chatMessageCell, DialogInterface dialogInterface, int i) {
            if (!zArr[0]) {
                if (chatMessageCell.getMessageObject() != null) {
                    chatMessageCell.getMessageObject().isSensitiveCached = Boolean.FALSE;
                }
                chatMessageCell.startRevealMedia();
                return;
            }
            if (contentsettings != null && contentsettings.sensitive_can_change) {
                ChatActivity.this.getMessagesController().setContentSettings(true);
                BulletinFactory.of(ChatActivity.this).createSimpleBulletinDetail(R.raw.chats_infotip, AndroidUtilities.replaceArrows(AndroidUtilities.premiumText(LocaleController.getString(R.string.SensitiveContentSettingsToast), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda29
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressRevealSensitiveContent$27();
                    }
                }), true)).show(true);
            }
            for (int i2 = 0; i2 < ChatActivity.this.chatListView.getChildCount(); i2++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getMessageObject() != null && chatMessageCell2.getMessageObject().isSensitive()) {
                        chatMessageCell2.startRevealMedia();
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressRevealSensitiveContent$29(AlertDialog alertDialog, final ChatMessageCell chatMessageCell, final TL_account.contentSettings contentsettings) {
            alertDialog.dismissUnless(200L);
            final boolean[] zArr = new boolean[1];
            FrameLayout frameLayout = new FrameLayout(ChatActivity.this.getContext());
            if (contentsettings != null && contentsettings.sensitive_can_change) {
                CheckBoxCell checkBoxCell = new CheckBoxCell(ChatActivity.this.getContext(), 1, ChatActivity.this.getResourceProvider());
                checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
                checkBoxCell.setText(LocaleController.getString(R.string.MessageShowSensitiveContentAlways), "", zArr[0], false);
                checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda24
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.ChatMessageCellDelegate.lambda$didPressRevealSensitiveContent$26(zArr, view);
                    }
                });
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.showDialog(new AlertDialog.Builder(chatActivity.getContext(), ChatActivity.this.getResourceProvider()).setTitle(LocaleController.getString(R.string.MessageShowSensitiveContentMediaTitle)).setMessage(LocaleController.getString(R.string.MessageShowSensitiveContentMediaText)).setView(frameLayout).setCustomViewOffset(9).setNegativeButton(LocaleController.getString(R.string.Cancel), null).setPositiveButton(LocaleController.getString(R.string.MessageShowSensitiveContentButton), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda25
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressRevealSensitiveContent$28(zArr, contentsettings, chatMessageCell, dialogInterface, i);
                }
            }).create());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$6() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$7() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$8() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$openChat$5(final Browser.Progress progress, TLRPC.Chat chat, int i, final ChatActivity chatActivity) {
            progress.onCancel(ChatActivity.this.getMessagesController().ensureMessagesLoaded(-chat.id, i, new MessagesController.MessagesLoadedCallback() { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.2
                @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                public void onError() {
                    progress.end();
                    ChatActivity.this.presentFragment(chatActivity);
                }

                @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                public void onMessagesLoaded(boolean z) {
                    progress.end();
                    ChatActivity.this.presentFragment(chatActivity);
                }
            }));
        }

        private void openChat(ChatMessageCell chatMessageCell, final TLRPC.Chat chat, final int i, boolean z) {
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC.Chat chat2 = chatActivity.currentChat;
            if (chat2 != null && chat.id == chat2.id) {
                if (chatActivity.avatarContainer == null || i != 0) {
                    ChatActivity.this.scrollToMessageId(i, chatMessageCell.getMessageObject().getId(), true, 0, false, 0);
                } else {
                    ChatActivity.this.avatarContainer.openProfile(false);
                }
            } else if (chat2 == null || chat.id != chat2.id || chatActivity.isThreadChat()) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", chat.id);
                if (i != 0) {
                    bundle.putInt("message_id", i);
                }
                Browser.Progress makeProgressForForward = z ? ChatActivity.this.makeProgressForForward(chatMessageCell) : null;
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject(), makeProgressForForward)) {
                    final ChatActivity chatActivity2 = new ChatActivity(bundle);
                    if (makeProgressForForward == null || i == 0) {
                        ChatActivity.this.presentFragment(chatActivity2);
                        return;
                    }
                    final Browser.Progress progress = makeProgressForForward;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda20
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$openChat$5(progress, chat, i, chatActivity2);
                        }
                    }, 5000L);
                    makeProgressForForward.init();
                }
            }
        }

        private void openDialog(ChatMessageCell chatMessageCell, TLRPC.User user) {
            if (user != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", user.id);
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        private void openProfile(TLRPC.Chat chat) {
            openProfile(chat, false);
        }

        private void openProfile(TLRPC.Chat chat, boolean z) {
            if (chat != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", chat.id);
                bundle.putBoolean("expandPhoto", z);
                ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            }
        }

        private void openProfile(TLRPC.User user) {
            openProfile(user, false);
        }

        private void openProfile(TLRPC.User user, boolean z) {
            if (user == null || user.id == UserObject.VERIFY) {
                return;
            }
            TLRPC.UserProfilePhoto userProfilePhoto = user.photo;
            int i = 0;
            z = (userProfilePhoto == null || (userProfilePhoto instanceof TLRPC.TL_userProfilePhotoEmpty)) ? false : false;
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", user.id);
            bundle.putBoolean("expandPhoto", z);
            ProfileActivity profileActivity = new ProfileActivity(bundle);
            TLRPC.User user2 = ChatActivity.this.currentUser;
            if (user2 != null && user2.id == user.id) {
                i = 1;
            }
            profileActivity.setPlayProfileAnimation(i);
            AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            ChatActivity.this.presentFragment(profileActivity);
        }

        private void pressedReaction(ChatMessageCell chatMessageCell, TLRPC.ReactionCount reactionCount, float f, float f2) {
            TLRPC.Message message;
            ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(reactionCount.reaction);
            MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
            ChatActivity.this.selectReaction(chatMessageCell, chatMessageCell.getPrimaryMessageObject(), null, null, f, f2, fromTL, false, false, false, false);
            if ((primaryMessageObject != null) & (primaryMessageObject.messageOwner != null)) {
                if (ChatActivity.this.chatAdapter.isFiltered) {
                    MessageObject messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(primaryMessageObject.getId());
                    if (messageObject != null && (message = messageObject.messageOwner) != null) {
                        message.reactions = primaryMessageObject.messageOwner.reactions;
                    }
                } else if (!ChatActivity.this.chatAdapter.isFiltered) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.searchingReaction != null) {
                        chatActivity.updateFilteredMessages(false);
                    }
                }
            }
            if (!ChatActivity.this.chatAdapter.isFiltered || chatMessageCell.getPrimaryMessageObject().hasReaction(ChatActivity.this.searchingReaction)) {
                return;
            }
            MessageObject primaryMessageObject2 = chatMessageCell.getPrimaryMessageObject();
            MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(primaryMessageObject2);
            if (validGroupedMessage != null) {
                for (int i = 0; i < validGroupedMessage.messages.size(); i++) {
                    ChatActivity.this.getMediaDataController().removeMessageFromResults(validGroupedMessage.messages.get(i).getId());
                }
            } else {
                ChatActivity.this.getMediaDataController().removeMessageFromResults(primaryMessageObject2.getId());
            }
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.updateFilteredMessages(true);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canDrawOutboundsContent() {
            return false;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canPerformActions() {
            return (((BaseFragment) ChatActivity.this).actionBar == null || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport() || ((BaseFragment) ChatActivity.this).inPreviewMode) ? false : true;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPress(ChatMessageCell chatMessageCell, float f, float f2) {
            ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2, false);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.startMultiselect(chatActivity.chatListView.getChildAdapterPosition(chatMessageCell));
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            if (ChatActivity.this.chatMode == 5 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCallback) || (keyboardButton instanceof TLRPC.TL_keyboardButtonGame) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl) || (keyboardButton instanceof TLRPC.TL_keyboardButtonBuy) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUserProfile) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCopy)) {
                if (keyboardButton instanceof TLRPC.TL_keyboardButtonCopy) {
                    ChatActivity.this.didLongPressCopyButton(((TLRPC.TL_keyboardButtonCopy) keyboardButton).copy_text);
                } else if (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl) {
                    ChatActivity.this.openClickableLink(null, keyboardButton.url, true, chatMessageCell, chatMessageCell.getMessageObject(), false);
                    try {
                        chatMessageCell.performHapticFeedback(0, 1);
                    } catch (Exception unused) {
                    }
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didLongPressChannelAvatar(final ChatMessageCell chatMessageCell, final TLRPC.Chat chat, int i, float f, float f2) {
            if (isAvatarPreviewerEnabled()) {
                AvatarPreviewer.MenuItem[] menuItemArr = {AvatarPreviewer.MenuItem.OPEN_PROFILE};
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC.Chat chat2 = chatActivity.currentChat;
                if (chat2 == null || chat2.id != chat.id || chatActivity.isThreadChat()) {
                    menuItemArr = (AvatarPreviewer.MenuItem[]) Arrays.copyOf(menuItemArr, 2);
                    menuItemArr[1] = chat.broadcast ? AvatarPreviewer.MenuItem.OPEN_CHANNEL : AvatarPreviewer.MenuItem.OPEN_GROUP;
                }
                TLRPC.ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(chat.id);
                AvatarPreviewer.Data of = chatFull != null ? AvatarPreviewer.Data.of(chat, chatFull, menuItemArr) : AvatarPreviewer.Data.of(chat, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                if (AvatarPreviewer.canPreview(of)) {
                    AvatarPreviewer avatarPreviewer = AvatarPreviewer.getInstance();
                    ChatActivity chatActivity2 = ChatActivity.this;
                    avatarPreviewer.show((ViewGroup) chatActivity2.fragmentView, chatActivity2.themeDelegate, of, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda16
                        @Override // org.telegram.ui.AvatarPreviewer.Callback
                        public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressChannelAvatar$4(chat, chatMessageCell, menuItem);
                        }
                    });
                    return true;
                }
            }
            return false;
        }

        /* JADX WARN: Removed duplicated region for block: B:42:0x00ad  */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean didLongPressUserAvatar(final ChatMessageCell chatMessageCell, final TLRPC.User user, float f, float f2) {
            int i;
            AvatarPreviewer.Data data;
            if (isAvatarPreviewerEnabled()) {
                ChatActivity chatActivity = ChatActivity.this;
                int i2 = (chatActivity.currentChat == null || (chatActivity.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0)) ? 0 : 1;
                ChatActivity chatActivity2 = ChatActivity.this;
                int i3 = (chatActivity2.currentChat == null || !(chatActivity2.threadMessageId == 0 || ChatActivity.this.isTopic) || (ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup)) ? 0 : 1;
                AvatarPreviewer.MenuItem[] menuItemArr = new AvatarPreviewer.MenuItem[i2 + 2 + i3];
                menuItemArr[0] = AvatarPreviewer.MenuItem.OPEN_PROFILE;
                menuItemArr[1] = AvatarPreviewer.MenuItem.SEND_MESSAGE;
                char c = 2;
                if (i2 != 0) {
                    menuItemArr[2] = AvatarPreviewer.MenuItem.MENTION;
                    c = 3;
                }
                if (i3 != 0) {
                    menuItemArr[c] = AvatarPreviewer.MenuItem.SEARCH_MESSAGES;
                }
                TLRPC.UserFull userFull = ChatActivity.this.getMessagesController().getUserFull(user.id);
                if (userFull != null) {
                    data = AvatarPreviewer.Data.of(user, userFull, menuItemArr);
                    if (!AvatarPreviewer.canPreview(data)) {
                        i = ((BaseFragment) ChatActivity.this).classGuid;
                    }
                    if (AvatarPreviewer.canPreview(data)) {
                        AvatarPreviewer avatarPreviewer = AvatarPreviewer.getInstance();
                        ChatActivity chatActivity3 = ChatActivity.this;
                        avatarPreviewer.show((ViewGroup) chatActivity3.fragmentView, chatActivity3.themeDelegate, data, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda15
                            @Override // org.telegram.ui.AvatarPreviewer.Callback
                            public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressUserAvatar$2(chatMessageCell, user, menuItem);
                            }
                        });
                        return true;
                    }
                } else {
                    i = ((BaseFragment) ChatActivity.this).classGuid;
                }
                data = AvatarPreviewer.Data.of(user, i, menuItemArr);
                if (AvatarPreviewer.canPreview(data)) {
                }
            }
            return false;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressAboutRevenueSharingAds() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.contentView == null || chatActivity.getParentActivity() == null) {
                return;
            }
            Context context = ChatActivity.this.contentView.getContext();
            ChatActivity chatActivity2 = ChatActivity.this;
            RevenueSharingAdsInfoBottomSheet.showAlert(context, chatActivity2, ((BaseFragment) chatActivity2).resourceProvider);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
            Bulletin createContainsEmojiBulletin;
            if (!ChatActivity.this.getMessagesController().premiumFeaturesBlocked() && animatedEmojiSpan != null && !animatedEmojiSpan.standard) {
                long documentId = animatedEmojiSpan.getDocumentId();
                TLRPC.Document document = animatedEmojiSpan.document;
                if (document == null) {
                    document = AnimatedEmojiDrawable.findDocument(((BaseFragment) ChatActivity.this).currentAccount, documentId);
                }
                if (document != null && (createContainsEmojiBulletin = BulletinFactory.of(ChatActivity.this).createContainsEmojiBulletin(document, 0, new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda0
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressAnimatedEmoji$19((TLRPC.InputStickerSet) obj);
                    }
                })) != null) {
                    createContainsEmojiBulletin.show();
                    return true;
                }
            }
            return false;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressBoostCounter(ChatMessageCell chatMessageCell) {
            ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openBoostForUsersDialog, Long.valueOf(ChatActivity.this.dialog_id), chatMessageCell);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            if (ChatActivity.this.chatMode == 5 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCallback) || (keyboardButton instanceof TLRPC.TL_keyboardButtonGame) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl) || (keyboardButton instanceof TLRPC.TL_keyboardButtonBuy) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUserProfile) || (keyboardButton instanceof TLRPC.TL_keyboardButtonRequestPeer) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCopy)) {
                ChatActivity.this.chatActivityEnterView.didPressedBotButton(keyboardButton, chatMessageCell.getMessageObject(), chatMessageCell.getMessageObject(), ChatActivity.this.makeProgressForBotButton(chatMessageCell, keyboardButton instanceof TLRPC.TL_keyboardButtonUrl ? keyboardButton.url : null));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCancelSendButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.messageOwner.send_state != 0) {
                ChatActivity.this.getSendMessagesHelper().cancelSendingMessage(messageObject);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC.Chat chat, int i, float f, float f2, boolean z) {
            MessageObject messageObject;
            if (chat == null) {
                return;
            }
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else if (z || !chat.signature_profiles || (messageObject = chatMessageCell.getMessageObject()) == null || messageObject.getDialogId() == UserObject.REPLY_BOT) {
                openChat(chatMessageCell, chat, i, z);
            } else {
                ChatActivity.this.openUserProfile(DialogObject.getPeerDialogId(messageObject.messageOwner.from_id));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelRecommendation(final ChatMessageCell chatMessageCell, final TLRPC.Chat chat, boolean z) {
            if (ChatActivity.this.getContext() == null || chat == null) {
                return;
            }
            if (((BaseFragment) ChatActivity.this).parentLayout == null || !((BaseFragment) ChatActivity.this).parentLayout.isInPreviewMode()) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", chat.id);
                if (!z) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                    return;
                }
                ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(ChatActivity.this.getContext(), R.drawable.popup_fixed_alert, ChatActivity.this.getResourceProvider(), 2);
                actionBarPopupWindowLayout.setBackgroundColor(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.OpenChannel2), R.drawable.msg_channel);
                actionBarMenuSubItem.setMinimumWidth(NotificationCenter.audioRouteChanged);
                actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda2
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$16(view);
                    }
                });
                actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
                ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString(R.string.ProfileJoinChannel), R.drawable.msg_addbot);
                actionBarMenuSubItem2.setMinimumWidth(NotificationCenter.audioRouteChanged);
                actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda3
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$18(chat, chatMessageCell, view);
                    }
                });
                actionBarPopupWindowLayout.addView(actionBarMenuSubItem2);
                ChatActivity chatActivity = new ChatActivity(bundle);
                chatActivity.allowExpandPreviewByClick = true;
                ChatActivity.this.presentFragmentAsPreviewWithMenu(chatActivity, actionBarPopupWindowLayout);
                ChatActivity.this.checkShowBlur(true);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelRecommendationsClose(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject == null || messageObject.type != 27) {
                return;
            }
            messageObject.toggleChannelRecommendations();
            messageObject.forceUpdate = true;
            chatMessageCell.forceResetMessageObject();
            chatMessageCell.requestLayout();
            ChatActivity.this.chatAdapter.updateRowWithMessageObject(messageObject, false, false);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCodeCopy(ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock) {
            StaticLayout staticLayout;
            if (textLayoutBlock == null || (staticLayout = textLayoutBlock.textLayout) == null || staticLayout.getText() == null) {
                return;
            }
            String charSequence = textLayoutBlock.textLayout.getText().toString();
            SpannableString spannableString = new SpannableString(charSequence);
            spannableString.setSpan(new CodeHighlighting.Span(false, 0, null, textLayoutBlock.language, charSequence), 0, spannableString.length(), 33);
            AndroidUtilities.addToClipboard(spannableString);
            BulletinFactory.of(ChatActivity.this).createCopyBulletin(LocaleController.getString(R.string.CodeCopied)).show();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCommentButton(ChatMessageCell chatMessageCell) {
            long j;
            int i;
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            MessageObject messageObject = (currentMessagesGroup == null || currentMessagesGroup.messages.isEmpty()) ? chatMessageCell.getMessageObject() : currentMessagesGroup.messages.get(0);
            TLRPC.MessageReplies messageReplies = messageObject.messageOwner.replies;
            if (messageReplies != null) {
                i = messageReplies.read_max_id;
                j = messageReplies.channel_id;
            } else {
                j = 0;
                i = -1;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.openDiscussionMessageChat(chatActivity.currentChat.id, messageObject, messageObject.getId(), j, i, 0, null);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressDialogButton(ChatMessageCell chatMessageCell) {
            ChatActivity.this.openMessageInOriginalDialog(chatMessageCell.getMessageObject());
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressEffect(ChatMessageCell chatMessageCell) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.emojiAnimationsOverlay.onTapItem(chatMessageCell, chatActivity, true);
            ChatActivity.this.chatListView.cancelClickRunnables(false);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            ChatActivity.this.getSendMessagesHelper().sendCallback(true, chatMessageCell.getMessageObject(), keyboardButton, ChatActivity.this);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressFactCheck(ChatMessageCell chatMessageCell) {
            MessageObject primaryMessageObject;
            int i;
            int i2;
            if (chatMessageCell == null || (primaryMessageObject = chatMessageCell.getPrimaryMessageObject()) == null) {
                return;
            }
            primaryMessageObject.factCheckExpanded = !primaryMessageObject.factCheckExpanded;
            primaryMessageObject.forceUpdate = true;
            if (ChatActivity.this.chatListView != null && ChatActivity.this.chatLayoutManager != null && !ChatActivity.this.chatLayoutManager.hasPendingScrollPosition()) {
                for (int childCount = ChatActivity.this.chatListView.getChildCount() - 1; childCount >= 0; childCount--) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(childCount);
                    i = ChatActivity.this.chatListView.getChildAdapterPosition(childAt);
                    if (i >= 0) {
                        if (childAt instanceof ChatMessageCell) {
                            if (((ChatMessageCell) childAt).getCurrentMessagesGroup() == null) {
                                i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                                break;
                            }
                        } else if (childAt instanceof ChatActionCell) {
                            i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                            break;
                        }
                    }
                }
            }
            i = -1;
            i2 = 0;
            ChatActivity.this.lambda$updateMessageAnimated$265(primaryMessageObject, false);
            if (ChatActivity.this.factCheckHint != null) {
                ChatActivity.this.factCheckHint.hide();
            }
            if (i < 0 || chatMessageCell.getCurrentMessagesGroup() != null) {
                return;
            }
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
        }

        /* JADX WARN: Code restructure failed: missing block: B:10:0x001c, code lost:
            r1 = r1.getFactCheck();
         */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void didPressFactCheckWhat(final ChatMessageCell chatMessageCell, final int i, final int i2) {
            TLRPC.TL_factCheck factCheck;
            String str;
            if (ChatActivity.this.factCheckHint != null) {
                ChatActivity.this.factCheckHint.hide();
            }
            if (chatMessageCell == null || (r1 = chatMessageCell.getMessageObject()) == null || factCheck == null || factCheck.country == null) {
                return;
            }
            try {
                str = new Locale("", factCheck.country).getDisplayCountry(LocaleController.getInstance().getCurrentLocale());
            } catch (Exception e) {
                FileLog.e(e);
                str = factCheck.country;
            }
            ChatActivity.this.factCheckHint = new HintView2(ChatActivity.this.getContext(), 3).setMultilineText(true).setTextAlign(Layout.Alignment.ALIGN_NORMAL).setDuration(-1L).setHideByTouch(true).useScale(true).setRounding(12.0f);
            final HintView2 hintView2 = ChatActivity.this.factCheckHint;
            hintView2.setOnHiddenListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda18
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressFactCheckWhat$0(hintView2);
                }
            });
            ChatActivity.this.factCheckHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString(R.string.FactCheckToast, str)));
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.contentView.addView(chatActivity.factCheckHint, LayoutHelper.createFrame(-1, 520.0f, 55, 16.0f, 0.0f, 16.0f, 0.0f));
            ChatActivity.this.contentView.post(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda19
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressFactCheckWhat$1(chatMessageCell, i2, i);
                }
            });
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressGiveawayChatButton(ChatMessageCell chatMessageCell, int i) {
            if (chatMessageCell.getMessageObject().messageOwner.media instanceof TLRPC.TL_messageMediaGiveaway) {
                long j = -((TLRPC.TL_messageMediaGiveaway) chatMessageCell.getMessageObject().messageOwner.media).channels.get(i).longValue();
                if (ChatActivity.this.dialog_id != j) {
                    ChatActivity.this.presentFragment(ChatActivity.of(j));
                } else {
                    ChatActivity.this.avatarContainer.openProfile(false);
                }
            }
            if (chatMessageCell.getMessageObject().messageOwner.media instanceof TLRPC.TL_messageMediaGiveawayResults) {
                ChatActivity.this.presentFragment(ProfileActivity.of(((TLRPC.TL_messageMediaGiveawayResults) chatMessageCell.getMessageObject().messageOwner.media).winners.get(i).longValue()));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressGroupImage(ChatMessageCell chatMessageCell, ImageReceiver imageReceiver, TLRPC.MessageExtendedMedia messageExtendedMedia, float f, float f2) {
            String str;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageExtendedMedia instanceof TLRPC.TL_messageExtendedMediaPreview) {
                Browser.Progress makeProgressForPaidMedia = ChatActivity.this.makeProgressForPaidMedia(chatMessageCell);
                StarsController starsController = StarsController.getInstance(((BaseFragment) ChatActivity.this).currentAccount);
                Objects.requireNonNull(makeProgressForPaidMedia);
                Runnable pay = starsController.pay(messageObject, new ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda11(makeProgressForPaidMedia));
                if (pay != null) {
                    makeProgressForPaidMedia.onCancel(pay);
                    makeProgressForPaidMedia.init();
                    return;
                }
                return;
            }
            TLRPC.Message message = messageObject.messageOwner;
            TLRPC.MessageMedia messageMedia = message.media;
            if (messageMedia instanceof TLRPC.TL_messageMediaPaidMedia) {
                TLRPC.TL_messageMediaPaidMedia tL_messageMediaPaidMedia = (TLRPC.TL_messageMediaPaidMedia) messageMedia;
                ArrayList arrayList = new ArrayList();
                int i = -1;
                for (int i2 = 0; i2 < tL_messageMediaPaidMedia.extended_media.size(); i2++) {
                    TLRPC.MessageExtendedMedia messageExtendedMedia2 = tL_messageMediaPaidMedia.extended_media.get(i2);
                    if (messageExtendedMedia2 instanceof TLRPC.TL_messageExtendedMedia) {
                        TLRPC.TL_messageExtendedMedia tL_messageExtendedMedia = (TLRPC.TL_messageExtendedMedia) messageExtendedMedia2;
                        if (tL_messageExtendedMedia == messageExtendedMedia) {
                            i = arrayList.size();
                        }
                        TLRPC.TL_message tL_message = new TLRPC.TL_message();
                        tL_message.id = message.id;
                        tL_message.from_id = message.from_id;
                        tL_message.from_boosts_applied = message.from_boosts_applied;
                        tL_message.peer_id = message.peer_id;
                        tL_message.saved_peer_id = message.saved_peer_id;
                        tL_message.date = message.date;
                        tL_message.expire_date = message.expire_date;
                        tL_message.action = message.action;
                        tL_message.message = message.message;
                        tL_message.flags = message.flags;
                        tL_message.flags2 = message.flags2;
                        tL_message.mentioned = message.mentioned;
                        tL_message.media_unread = message.media_unread;
                        tL_message.out = message.out;
                        tL_message.unread = message.unread;
                        tL_message.entities = message.entities;
                        tL_message.via_bot_name = message.via_bot_name;
                        tL_message.reply_markup = message.reply_markup;
                        tL_message.views = message.views;
                        tL_message.forwards = message.forwards;
                        tL_message.replies = message.replies;
                        tL_message.edit_date = message.edit_date;
                        tL_message.silent = message.silent;
                        tL_message.post = message.post;
                        tL_message.from_scheduled = message.from_scheduled;
                        tL_message.legacy = message.legacy;
                        tL_message.edit_hide = message.edit_hide;
                        tL_message.pinned = message.pinned;
                        tL_message.fwd_from = message.fwd_from;
                        tL_message.via_bot_id = message.via_bot_id;
                        tL_message.via_business_bot_id = message.via_business_bot_id;
                        tL_message.reply_to = message.reply_to;
                        tL_message.post_author = message.post_author;
                        tL_message.grouped_id = message.grouped_id;
                        tL_message.reactions = message.reactions;
                        tL_message.restriction_reason = message.restriction_reason;
                        tL_message.ttl_period = message.ttl_period;
                        tL_message.quick_reply_shortcut_id = message.quick_reply_shortcut_id;
                        tL_message.effect = message.effect;
                        tL_message.noforwards = message.noforwards;
                        tL_message.invert_media = message.invert_media;
                        tL_message.offline = message.offline;
                        tL_message.factcheck = message.factcheck;
                        tL_message.send_state = message.send_state;
                        tL_message.fwd_msg_id = message.fwd_msg_id;
                        if (TextUtils.isEmpty(tL_messageExtendedMedia.attachPath)) {
                            if (tL_messageMediaPaidMedia.extended_media.size() == 1) {
                                str = message.attachPath;
                            }
                            tL_message.params = message.params;
                            tL_message.random_id = message.random_id;
                            tL_message.local_id = message.local_id;
                            tL_message.dialog_id = message.dialog_id;
                            tL_message.ttl = message.ttl;
                            tL_message.destroyTime = message.destroyTime;
                            tL_message.destroyTimeMillis = message.destroyTimeMillis;
                            tL_message.layer = message.layer;
                            tL_message.seq_in = message.seq_in;
                            tL_message.seq_out = message.seq_out;
                            tL_message.with_my_score = message.with_my_score;
                            tL_message.replyMessage = message.replyMessage;
                            tL_message.reqId = message.reqId;
                            tL_message.realId = message.realId;
                            tL_message.stickerVerified = message.stickerVerified;
                            tL_message.isThreadMessage = message.isThreadMessage;
                            tL_message.voiceTranscription = message.voiceTranscription;
                            tL_message.voiceTranscriptionOpen = message.voiceTranscriptionOpen;
                            tL_message.voiceTranscriptionRated = message.voiceTranscriptionRated;
                            tL_message.voiceTranscriptionFinal = message.voiceTranscriptionFinal;
                            tL_message.voiceTranscriptionForce = message.voiceTranscriptionForce;
                            tL_message.voiceTranscriptionId = message.voiceTranscriptionId;
                            tL_message.premiumEffectWasPlayed = message.premiumEffectWasPlayed;
                            tL_message.originalLanguage = message.originalLanguage;
                            tL_message.translatedToLanguage = message.translatedToLanguage;
                            tL_message.translatedText = message.translatedText;
                            tL_message.replyStory = message.replyStory;
                            tL_message.media = tL_messageExtendedMedia.media;
                            tL_message.quick_reply_shortcut = message.quick_reply_shortcut;
                            tL_message.noforwards = true;
                            arrayList.add(new MessageObject(messageObject.currentAccount, tL_message, false, true));
                        } else {
                            str = tL_messageExtendedMedia.attachPath;
                        }
                        tL_message.attachPath = str;
                        tL_message.params = message.params;
                        tL_message.random_id = message.random_id;
                        tL_message.local_id = message.local_id;
                        tL_message.dialog_id = message.dialog_id;
                        tL_message.ttl = message.ttl;
                        tL_message.destroyTime = message.destroyTime;
                        tL_message.destroyTimeMillis = message.destroyTimeMillis;
                        tL_message.layer = message.layer;
                        tL_message.seq_in = message.seq_in;
                        tL_message.seq_out = message.seq_out;
                        tL_message.with_my_score = message.with_my_score;
                        tL_message.replyMessage = message.replyMessage;
                        tL_message.reqId = message.reqId;
                        tL_message.realId = message.realId;
                        tL_message.stickerVerified = message.stickerVerified;
                        tL_message.isThreadMessage = message.isThreadMessage;
                        tL_message.voiceTranscription = message.voiceTranscription;
                        tL_message.voiceTranscriptionOpen = message.voiceTranscriptionOpen;
                        tL_message.voiceTranscriptionRated = message.voiceTranscriptionRated;
                        tL_message.voiceTranscriptionFinal = message.voiceTranscriptionFinal;
                        tL_message.voiceTranscriptionForce = message.voiceTranscriptionForce;
                        tL_message.voiceTranscriptionId = message.voiceTranscriptionId;
                        tL_message.premiumEffectWasPlayed = message.premiumEffectWasPlayed;
                        tL_message.originalLanguage = message.originalLanguage;
                        tL_message.translatedToLanguage = message.translatedToLanguage;
                        tL_message.translatedText = message.translatedText;
                        tL_message.replyStory = message.replyStory;
                        tL_message.media = tL_messageExtendedMedia.media;
                        tL_message.quick_reply_shortcut = message.quick_reply_shortcut;
                        tL_message.noforwards = true;
                        arrayList.add(new MessageObject(messageObject.currentAccount, tL_message, false, true));
                    }
                }
                if (i <= -1 || arrayList.isEmpty()) {
                    return;
                }
                PhotoViewer photoViewer = PhotoViewer.getInstance();
                ChatActivity chatActivity = ChatActivity.this;
                photoViewer.setParentActivity(chatActivity, chatActivity.themeDelegate);
                PhotoViewer.getInstance().openPhoto(arrayList, i, ChatActivity.this.getDialogId(), 0L, 0L, ChatActivity.this.photoViewerPaidMediaProvider);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHiddenForward(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject().isImportedForward()) {
                didPressTime(chatMessageCell);
            } else {
                ChatActivity.this.showForwardHint(chatMessageCell);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHint(ChatMessageCell chatMessageCell, int i) {
            if (i == 0) {
                ChatActivity.this.showPollSolution(chatMessageCell.getMessageObject(), ((TLRPC.TL_messageMediaPoll) chatMessageCell.getMessageObject().messageOwner.media).results);
            } else if (i == 1) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
                if (messageFwdHeader == null || TextUtils.isEmpty(messageFwdHeader.psa_type)) {
                    return;
                }
                String string = LocaleController.getString("PsaMessageInfo_" + messageObject.messageOwner.fwd_from.psa_type);
                if (TextUtils.isEmpty(string)) {
                    string = LocaleController.getString(R.string.PsaMessageInfoDefault);
                }
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                MessageObject.addLinks(false, spannableStringBuilder);
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentMessagesGroup != null) {
                    int size = currentMessagesGroup.posArray.size();
                    int i2 = 0;
                    while (true) {
                        if (i2 >= size) {
                            break;
                        } else if ((currentMessagesGroup.posArray.get(i2).flags & 1) != 0) {
                            MessageObject messageObject2 = currentMessagesGroup.messages.get(i2);
                            if (messageObject2 != messageObject) {
                                int childCount = ChatActivity.this.chatListView.getChildCount();
                                for (int i3 = 0; i3 < childCount; i3++) {
                                    View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                                    if (childAt instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                                        if (messageObject2.equals(chatMessageCell2.getMessageObject())) {
                                            chatMessageCell = chatMessageCell2;
                                        }
                                    }
                                }
                                messageObject = messageObject2;
                            }
                        } else {
                            i2++;
                        }
                    }
                }
                ChatActivity.this.showInfoHint(messageObject, spannableStringBuilder, 1);
            }
            chatMessageCell.showHintButton(false, true, i);
        }

        /* JADX WARN: Code restructure failed: missing block: B:127:0x02e6, code lost:
            if (r12.exists() != false) goto L132;
         */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void didPressImage(ChatMessageCell chatMessageCell, float f, float f2) {
            int i;
            File file;
            LocationActivity locationActivity;
            Uri fromFile;
            TLRPC.Chat chat;
            final MessageObject messageObject = chatMessageCell.getMessageObject();
            int i2 = 2;
            if (messageObject.type == 23) {
                TLRPC.MessageMedia messageMedia = messageObject.messageOwner.media;
                TL_stories.StoryItem storyItem = messageMedia.storyItem;
                if (storyItem == null || (storyItem instanceof TL_stories.TL_storyItemDeleted)) {
                    return;
                }
                storyItem.dialogId = DialogObject.getPeerDialogId(messageMedia.peer);
                storyItem.messageId = messageObject.getId();
                storyItem.messageType = 2;
                StoriesUtilities.applyViewedUser(storyItem, ChatActivity.this.currentUser);
                ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), messageObject.messageOwner.media.storyItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
                return;
            }
            if (!messageObject.isVideo() || DownloadController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).canDownloadMedia(messageObject.messageOwner) == 1) {
                messageObject.putInDownloadsStore = true;
            }
            if (messageObject.isSendError()) {
                ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2, false);
            } else if (messageObject.isSending()) {
            } else {
                if (messageObject.isDice()) {
                    ChatActivity.this.createUndoView();
                    if (ChatActivity.this.undoView == null) {
                        return;
                    }
                    ChatActivity.this.undoView.showWithAction(0L, (ChatActivity.this.chatActivityEnterView.getVisibility() != 0 || ChatActivity.this.bottomOverlay.getVisibility() == 0) ? 17 : 16, messageObject.getDiceEmoji(), null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didPressImage$22(messageObject);
                        }
                    });
                    return;
                }
                if ((messageObject.isAnimatedEmoji() && (!messageObject.isAnimatedAnimatedEmoji() || (ChatActivity.this.emojiAnimationsOverlay.supports(MessageObject.findAnimatedEmojiEmoticon(messageObject.getDocument())) && ChatActivity.this.currentUser != null))) || messageObject.isPremiumSticker()) {
                    ChatActivity.this.restartSticker(chatMessageCell);
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.emojiAnimationsOverlay.onTapItem(chatMessageCell, chatActivity, true);
                    ChatActivity.this.chatListView.cancelClickRunnables(false);
                } else if (messageObject.needDrawBluredPreview()) {
                    Runnable sendSecretMessageRead = ChatActivity.this.sendSecretMessageRead(messageObject, false);
                    Runnable sendSecretMediaDelete = ChatActivity.this.sendSecretMediaDelete(messageObject);
                    chatMessageCell.invalidate();
                    SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                    SecretMediaViewer.getInstance().openMedia(messageObject, ChatActivity.this.photoViewerProvider, sendSecretMessageRead, sendSecretMediaDelete);
                } else if (MessageObject.isAnimatedEmoji(messageObject.getDocument()) && MessageObject.getInputStickerSet(messageObject.getDocument()) != null) {
                    ArrayList arrayList = new ArrayList(1);
                    arrayList.add(MessageObject.getInputStickerSet(messageObject.getDocument()));
                    ChatActivity chatActivity2 = ChatActivity.this;
                    EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity2, chatActivity2.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
                    emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                    ChatActivity.this.showDialog(emojiPacksAlert);
                } else {
                    r0 = null;
                    ChatActivityEnterView chatActivityEnterView = null;
                    r0 = null;
                    File file2 = null;
                    if (messageObject.getInputStickerSet() != null) {
                        Activity parentActivity = ChatActivity.this.getParentActivity();
                        ChatActivity chatActivity3 = ChatActivity.this;
                        TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 && ((chat = ChatActivity.this.currentChat) == null || ChatObject.canSendStickers(chat))) {
                            chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        }
                        StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity3, inputStickerSet, null, chatActivityEnterView, ChatActivity.this.themeDelegate);
                        stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                        ChatActivity.this.showDialog(stickersAlert);
                    } else if (messageObject.isVideo() || (i = messageObject.type) == 1 || ((i == 0 && !messageObject.isWebpageDocument()) || messageObject.isGif())) {
                        if (messageObject.isSponsored()) {
                            if (messageObject.isGif() || messageObject.isPhoto()) {
                                ChatActivity.this.logSponsoredClicked(messageObject, true, false);
                                if (messageObject.sponsoredUrl != null) {
                                    if (ChatActivity.this.progressDialogCurrent != null) {
                                        ChatActivity.this.progressDialogCurrent.cancel(true);
                                    }
                                    ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 9(chatMessageCell) : null;
                                    Browser.openUrl(ChatActivity.this.getContext(), Uri.parse(messageObject.sponsoredUrl), true, false, false, ChatActivity.this.progressDialogCurrent, null, false, ChatActivity.this.getMessagesController().sponsoredLinksInappAllow);
                                    return;
                                }
                                return;
                            } else if (messageObject.isVideo()) {
                                ChatActivity.this.logSponsoredClicked(messageObject, true, false);
                            }
                        }
                        ChatActivity.this.openPhotoViewerForMessage(chatMessageCell, messageObject);
                    } else {
                        int i3 = messageObject.type;
                        try {
                            if (i3 == 3) {
                                ChatActivity.this.sendSecretMessageRead(messageObject, true);
                                String str = messageObject.messageOwner.attachPath;
                                if (str != null && str.length() != 0) {
                                    file2 = new File(messageObject.messageOwner.attachPath);
                                }
                                if (file2 == null || !file2.exists()) {
                                    file2 = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                }
                                Intent intent = new Intent("android.intent.action.VIEW");
                                if (Build.VERSION.SDK_INT >= 24) {
                                    intent.setFlags(1);
                                    fromFile = FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), ApplicationLoader.getApplicationId() + ".provider", file2);
                                } else {
                                    fromFile = Uri.fromFile(file2);
                                }
                                intent.setDataAndType(fromFile, "video/mp4");
                                ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                            } else if (i3 == 4) {
                                if (AndroidUtilities.isMapsInstalled(ChatActivity.this)) {
                                    if (messageObject.isLiveLocation()) {
                                        TLRPC.Chat chat2 = ChatActivity.this.currentChat;
                                        if (chat2 != null && !ChatObject.canSendMessages(chat2) && !ChatActivity.this.currentChat.megagroup) {
                                            i2 = 6;
                                        }
                                        locationActivity = new LocationActivity(i2);
                                    } else {
                                        locationActivity = new LocationActivity(ChatActivity.this.currentEncryptedChat == null ? 3 : 0);
                                    }
                                    locationActivity.setDelegate(ChatActivity.this);
                                    locationActivity.setMessageObject(messageObject);
                                    ChatActivity.this.presentFragment(locationActivity);
                                }
                            } else if (i3 == 9 || i3 == 0) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    String str2 = messageObject.messageOwner.attachPath;
                                    if (str2 != null && str2.length() != 0) {
                                        file = new File(messageObject.messageOwner.attachPath);
                                    }
                                    file = null;
                                    if (file == null) {
                                        File pathToMessage = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                        if (pathToMessage.exists()) {
                                            file = pathToMessage;
                                        }
                                    }
                                    Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, messageObject.getDocumentName(), null, true);
                                    if (applyThemeFile != null) {
                                        ChatActivity.this.presentFragment(new ThemePreviewActivity(applyThemeFile));
                                        return;
                                    }
                                    ChatActivity.this.scrollToPositionOnRecreate = -1;
                                }
                                if (!messageObject.canPreviewDocument()) {
                                    AndroidUtilities.openForView(messageObject, ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate, false);
                                    return;
                                }
                                PhotoViewer photoViewer = PhotoViewer.getInstance();
                                ChatActivity chatActivity4 = ChatActivity.this;
                                photoViewer.setParentActivity(chatActivity4, chatActivity4.themeDelegate);
                                PhotoViewer photoViewer2 = PhotoViewer.getInstance();
                                ChatActivity chatActivity5 = ChatActivity.this;
                                photoViewer2.openPhoto(messageObject, chatActivity5, messageObject.type != 0 ? chatActivity5.dialog_id : 0L, messageObject.type != 0 ? ChatActivity.this.mergeDialogId : 0L, messageObject.type != 0 ? ChatActivity.this.getTopicId() : 0L, ChatActivity.this.photoViewerProvider);
                            }
                        } catch (Exception e) {
                            FileLog.e(e);
                            ChatActivity.this.alertUserOpenError(messageObject);
                        }
                    }
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressInstantButton(ChatMessageCell chatMessageCell, int i) {
            TLRPC.WebPage webPage;
            TLRPC.MessageMedia messageMedia;
            TLRPC.TL_webPageAttributeStory tL_webPageAttributeStory;
            TL_stories.StoryItem storyItem;
            TLRPC.Message message;
            TLRPC.MessageMedia messageMedia2;
            String format;
            TLRPC.WebPage webPage2;
            Context context;
            String str;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (i == 19) {
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 10(chatMessageCell) : null;
                BoostDialogs.openGiveAwayStatusDialog(messageObject, ChatActivity.this.progressDialogCurrent, ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider());
            } else if (i == 21) {
                if (ApplicationLoader.isStandaloneBuild()) {
                    if (LaunchActivity.instance != null) {
                        if (ChatActivity.this.progressDialogCurrent != null) {
                            ChatActivity.this.progressDialogCurrent.cancel(true);
                        }
                        ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 11(chatMessageCell) : null;
                        LaunchActivity.instance.checkAppUpdate(true, ChatActivity.this.progressDialogCurrent);
                        return;
                    }
                    return;
                }
                if (BuildVars.isHuaweiStoreApp()) {
                    context = ChatActivity.this.getContext();
                    str = BuildVars.HUAWEI_STORE_URL;
                } else {
                    context = ChatActivity.this.getContext();
                    str = BuildVars.PLAYSTORE_APP_URL;
                }
                Browser.openUrl(context, str);
            } else if (i == 8) {
                PollVotesAlert.showForPoll(ChatActivity.this, messageObject);
            } else {
                if (i == 0) {
                    TLRPC.MessageMedia messageMedia3 = messageObject.messageOwner.media;
                    if (messageMedia3 == null || (webPage2 = messageMedia3.webpage) == null || webPage2.cached_page == null) {
                        return;
                    }
                    LaunchActivity launchActivity = LaunchActivity.instance;
                    if (launchActivity == null || launchActivity.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(messageObject) == null) {
                        ChatActivity.this.createArticleViewer(false).open(messageObject);
                    }
                } else if (i == 5) {
                    long j = messageObject.messageOwner.media.user_id;
                    TLRPC.User user = j != 0 ? MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j)) : null;
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC.MessageMedia messageMedia4 = messageObject.messageOwner.media;
                    chatActivity.openVCard(user, messageMedia4.phone_number, messageMedia4.vcard, messageMedia4.first_name, messageMedia4.last_name);
                } else if (i == 30) {
                    long j2 = messageObject.messageOwner.media.user_id;
                    Bundle bundle = new Bundle();
                    bundle.putLong("user_id", j2);
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                } else if (i == 31) {
                    long j3 = messageObject.messageOwner.media.user_id;
                    TLRPC.User user2 = j3 != 0 ? MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j3)) : null;
                    if (user2 != null) {
                        if (!TextUtils.isEmpty(messageObject.vCardData)) {
                            format = messageObject.vCardData.toString();
                        } else if (TextUtils.isEmpty(user2.phone)) {
                            String str2 = MessageObject.getMedia(messageObject.messageOwner).phone_number;
                            format = !TextUtils.isEmpty(str2) ? PhoneFormat.getInstance().format(str2) : LocaleController.getString(R.string.NumberUnknown);
                        } else {
                            PhoneFormat phoneFormat = PhoneFormat.getInstance();
                            format = phoneFormat.format("+" + user2.phone);
                        }
                        Bundle bundle2 = new Bundle();
                        bundle2.putLong("user_id", user2.id);
                        bundle2.putString("phone", format);
                        bundle2.putBoolean("addContact", true);
                        ChatActivity.this.presentFragment(new ContactAddActivity(bundle2));
                    }
                } else {
                    if (i == 23 || i == 24) {
                        final boolean z = i == 24;
                        TLRPC.Message message2 = messageObject.messageOwner;
                        webPage = (message2 == null || (messageMedia = message2.media) == null) ? null : messageMedia.webpage;
                        if (webPage == null || webPage.url == null) {
                            return;
                        }
                        Matcher matcher = Pattern.compile("^https?\\:\\/\\/t\\.me\\/add(?:emoji|stickers)\\/(.+)$").matcher(webPage.url);
                        if (ChatActivity.this.progressDialogCurrent != null) {
                            ChatActivity.this.progressDialogCurrent.cancel(true);
                        }
                        ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 12(chatMessageCell) : null;
                        if (matcher.matches() && matcher.groupCount() > 1 && matcher.group(1) != null) {
                            String group = matcher.group(1);
                            if (MediaDataController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getStickerSetByName(group) == null) {
                                ChatActivity.this.progressDialogCurrent.init();
                                TLRPC.TL_messages_getStickerSet tL_messages_getStickerSet = new TLRPC.TL_messages_getStickerSet();
                                TLRPC.TL_inputStickerSetShortName tL_inputStickerSetShortName = new TLRPC.TL_inputStickerSetShortName();
                                tL_inputStickerSetShortName.short_name = group;
                                tL_messages_getStickerSet.stickerset = tL_inputStickerSetShortName;
                                final int sendRequest = ConnectionsManager.getInstance(((BaseFragment) ChatActivity.this).currentAccount).sendRequest(tL_messages_getStickerSet, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda22
                                    @Override // org.telegram.tgnet.RequestDelegate
                                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$24(z, tLObject, tL_error);
                                    }
                                });
                                ChatActivity.this.progressDialogCurrent.onCancel(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda23
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$25(sendRequest);
                                    }
                                });
                                return;
                            }
                        }
                    } else if (messageObject.isSponsored()) {
                        ChatActivity.this.logSponsoredClicked(messageObject, false, false);
                        if (messageObject.sponsoredUrl != null) {
                            if (ChatActivity.this.progressDialogCurrent != null) {
                                ChatActivity.this.progressDialogCurrent.cancel(true);
                            }
                            ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 13(chatMessageCell) : null;
                            Browser.openUrl(ChatActivity.this.getContext(), Uri.parse(messageObject.sponsoredUrl), true, false, false, ChatActivity.this.progressDialogCurrent, null, false, ChatActivity.this.getMessagesController().sponsoredLinksInappAllow);
                            return;
                        }
                        return;
                    } else {
                        webPage = messageObject.getStoryMentionWebpage();
                        if (webPage == null && (message = messageObject.messageOwner) != null && (messageMedia2 = message.media) != null) {
                            webPage = messageMedia2.webpage;
                        }
                        if (webPage == null) {
                            return;
                        }
                        if (webPage.attributes != null) {
                            for (int i2 = 0; i2 < webPage.attributes.size(); i2++) {
                                if ((webPage.attributes.get(i2) instanceof TLRPC.TL_webPageAttributeStory) && (storyItem = (tL_webPageAttributeStory = (TLRPC.TL_webPageAttributeStory) webPage.attributes.get(i2)).storyItem) != null) {
                                    storyItem.dialogId = DialogObject.getPeerDialogId(tL_webPageAttributeStory.peer);
                                    tL_webPageAttributeStory.storyItem.messageId = messageObject.getId();
                                    tL_webPageAttributeStory.storyItem.messageType = 1;
                                    ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), tL_webPageAttributeStory.storyItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
                                    return;
                                }
                            }
                        }
                        if (ChatActivity.this.openLinkInternally(webPage.url, chatMessageCell, null, messageObject.getId(), 2)) {
                            return;
                        }
                        if (ChatActivity.this.progressDialogCurrent != null) {
                            ChatActivity.this.progressDialogCurrent.cancel(true);
                        }
                        ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 14(chatMessageCell) : null;
                    }
                    Browser.openUrl(ChatActivity.this.getParentActivity(), Uri.parse(webPage.url), true, true, false, ChatActivity.this.progressDialogCurrent, null, false, true);
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressMoreChannelRecommendations(ChatMessageCell chatMessageCell) {
            if (!ChatActivity.this.getUserConfig().isPremium()) {
                BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.star_premium_2, AndroidUtilities.replaceSingleTag(LocaleController.formatPluralStringComma("UnlockSimilarChannelsPremium", ChatActivity.this.getMessagesController().recommendedChannelsLimitPremium), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda17
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressMoreChannelRecommendations$15();
                    }
                })).show();
                return;
            }
            Bundle bundle = new Bundle();
            bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
            bundle.putInt("start_from", 10);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.presentFragment(new MediaActivity(bundle, chatActivity.avatarContainer.getSharedMediaPreloader()));
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressOther(ChatMessageCell chatMessageCell, float f, float f2) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.type != 16) {
                ChatActivity.this.createMenu(chatMessageCell, true, false, f, f2, messageObject.isMusic(), false);
                return;
            }
            TLRPC.User user = ChatActivity.this.currentUser;
            if (user != null) {
                boolean isVideoCall = messageObject.isVideoCall();
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC.UserFull userFull = chatActivity.userInfo;
                VoIPHelper.startCall(user, isVideoCall, userFull != null && userFull.video_calls_available, chatActivity.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:52:0x0101, code lost:
            if (r3.isSame(r25.reaction) == false) goto L52;
         */
        /* JADX WARN: Removed duplicated region for block: B:116:0x0407  */
        /* JADX WARN: Removed duplicated region for block: B:119:0x0438  */
        /* JADX WARN: Removed duplicated region for block: B:121:0x0447  */
        /* JADX WARN: Removed duplicated region for block: B:133:0x04b2  */
        /* JADX WARN: Removed duplicated region for block: B:139:0x04cc  */
        /* JADX WARN: Removed duplicated region for block: B:148:0x0538  */
        /* JADX WARN: Removed duplicated region for block: B:151:0x0549  */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void didPressReaction(final ChatMessageCell chatMessageCell, final TLRPC.ReactionCount reactionCount, boolean z, float f, float f2) {
            float f3;
            ReactionsLayoutInBubble.ReactionButton reactionButton;
            TLRPC.InputStickerSet findStickerSet;
            boolean z2;
            TLRPC.Message message;
            TLRPC.TL_messageReactions tL_messageReactions;
            int height;
            int measuredHeight;
            int measureKeyboardHeight;
            int i;
            int i2;
            ChatActivityEnterView chatActivityEnterView;
            ReactionsLayoutInBubble.ReactionButton reactionButton2;
            float f4;
            ReactionsLayoutInBubble.VisibleReaction visibleReaction;
            TLRPC.TL_messageReactions tL_messageReactions2;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            if (ChatActivity.this.savedMessagesTagHint != null && ChatActivity.this.savedMessagesTagHint.shown()) {
                ChatActivity.this.savedMessagesTagHint.hide();
            }
            if (ChatActivity.this.getUserConfig().getClientUserId() == ChatActivity.this.getDialogId() && chatMessageCell.areTags() && !ChatActivity.this.getUserConfig().isPremium()) {
                if (z) {
                    return;
                }
                new PremiumFeatureBottomSheet(ChatActivity.this, 24, true).show();
            } else if (z && (reactionCount.reaction instanceof TLRPC.TL_reactionPaid)) {
                chatMessageCell.performHapticFeedback(0);
                MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
                if (primaryMessageObject == null) {
                    return;
                }
                TLRPC.Message message2 = primaryMessageObject.messageOwner;
                ArrayList<TLRPC.MessageReactor> arrayList = (message2 == null || (tL_messageReactions2 = message2.reactions) == null) ? null : tL_messageReactions2.top_reactors;
                StarsController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).commitPaidReaction();
                TLRPC.ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(-StarsController.MessageId.from(primaryMessageObject).did);
                Context context = ChatActivity.this.getContext();
                int i3 = ((BaseFragment) ChatActivity.this).currentAccount;
                long j = ChatActivity.this.dialog_id;
                ChatActivity chatActivity = ChatActivity.this;
                StarsReactionsSheet starsReactionsSheet = new StarsReactionsSheet(context, i3, j, chatActivity, primaryMessageObject, arrayList, chatFull == null || chatFull.paid_reactions_available, chatActivity.themeDelegate);
                starsReactionsSheet.setMessageCell(ChatActivity.this, primaryMessageObject.getId(), ChatActivity.this.findMessageCell(primaryMessageObject.getId(), true));
                starsReactionsSheet.show();
            } else {
                if (!z) {
                    if (chatMessageCell.areTags()) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        if (!chatActivity2.isInsideContainer) {
                            ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = chatActivity2.searchingReaction;
                            if (visibleReaction2 != null) {
                            }
                        }
                    }
                    if (!chatMessageCell.areTags() || (ChatActivity.this.chatMode != 0 && ChatActivity.this.chatMode != 3)) {
                        if (reactionCount != null) {
                            pressedReaction(chatMessageCell, reactionCount, f, f2);
                            return;
                        }
                        return;
                    }
                    ChatActivity.this.closeMenu();
                    ChatActivity.this.lambda$openSearchWithText$303("");
                    SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                    if (searchTagsList != null) {
                        searchTagsList.setChosen(ReactionsLayoutInBubble.VisibleReaction.fromTL(reactionCount.reaction), true);
                        return;
                    }
                    return;
                }
                chatMessageCell.performHapticFeedback(0);
                FrameLayout frameLayout = new FrameLayout(ChatActivity.this.getParentActivity()) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.3
                    Path path = new Path();

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        if (Build.VERSION.SDK_INT < 21) {
                            super.dispatchDraw(canvas);
                            return;
                        }
                        canvas.save();
                        this.path.rewind();
                        this.path.addRoundRect(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(8.0f), getWidth() - AndroidUtilities.dp(8.0f), getHeight() - AndroidUtilities.dp(8.0f), AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Path.Direction.CW);
                        canvas.clipPath(this.path);
                        super.dispatchDraw(canvas);
                        canvas.restore();
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                            ChatActivity.this.closeMenu();
                        }
                        return super.dispatchKeyEvent(keyEvent);
                    }

                    @Override // android.widget.FrameLayout, android.view.View
                    protected void onMeasure(int i4, int i5) {
                        int min = Math.min(View.MeasureSpec.getSize(i5), AndroidUtilities.dp(300.0f));
                        if (min == 0) {
                            min = AndroidUtilities.dp(300.0f);
                        }
                        super.onMeasure(i4, View.MeasureSpec.makeMeasureSpec(min, Integer.MIN_VALUE));
                    }
                };
                frameLayout.setLayoutParams(LayoutHelper.createFrame(-2, -2.0f));
                ReactionsLayoutInBubble.ReactionButton reactionButton3 = chatMessageCell.getReactionButton(ReactionsLayoutInBubble.VisibleReaction.fromTL(reactionCount.reaction));
                if (reactionButton3 == null) {
                    return;
                }
                Rect rect = new Rect();
                Drawable mutate = ContextCompat.getDrawable(ChatActivity.this.getParentActivity(), R.drawable.popup_fixed_alert).mutate();
                mutate.setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                mutate.getPadding(rect);
                frameLayout.setBackground(mutate);
                MessageObject primaryMessageObject2 = chatMessageCell.getPrimaryMessageObject();
                int i4 = chatMessageCell.reactionsLayoutInBubble.y;
                AndroidUtilities.dp(28.0f);
                float f5 = chatMessageCell.reactionsLayoutInBubble.x + reactionButton3.x;
                chatMessageCell.getLocationInWindow(new int[2]);
                boolean z3 = ChatActivity.this.getUserConfig().getClientUserId() == ChatActivity.this.getDialogId() && !ChatActivity.this.getMessagesController().getSavedMessagesController().unsupported;
                if (z3) {
                    MessagesController.getGlobalMainSettings().edit().putInt("savedsearchtaghint", 1).apply();
                    ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(ChatActivity.this.getParentActivity(), 0, ChatActivity.this.getResourceProvider(), 0);
                    if (ChatActivity.this.getUserConfig().isPremium()) {
                        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(TextUtils.isEmpty(ChatActivity.this.getMessagesController().getSavedTagName(reactionCount.reaction)) ? R.string.SavedTagLabelTag : R.string.SavedTagRenameTag), R.drawable.menu_tag_rename);
                        actionBarMenuSubItem.setMinimumWidth(NotificationCenter.audioRouteChanged);
                        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda4
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$9(reactionCount, view);
                            }
                        });
                        actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
                    }
                    ChatActivity chatActivity3 = ChatActivity.this;
                    if (!chatActivity3.isInsideContainer && (((visibleReaction = chatActivity3.searchingReaction) == null || !visibleReaction.isSame(reactionCount.reaction)) && (ChatActivity.this.chatMode == 0 || ChatActivity.this.chatMode == 3))) {
                        ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                        actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString(R.string.SavedTagFilterByTag), R.drawable.menu_tag_filter);
                        actionBarMenuSubItem2.setMinimumWidth(NotificationCenter.audioRouteChanged);
                        actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda5
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$10(reactionCount, view);
                            }
                        });
                        actionBarPopupWindowLayout.addView(actionBarMenuSubItem2);
                    }
                    ActionBarMenuSubItem actionBarMenuSubItem3 = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                    actionBarMenuSubItem3.setTextAndIcon(LocaleController.getString(R.string.SavedTagRemoveTag), R.drawable.menu_tag_delete);
                    actionBarMenuSubItem3.setMinimumWidth(NotificationCenter.audioRouteChanged);
                    actionBarMenuSubItem3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda6
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$11(chatMessageCell, reactionCount, view);
                        }
                    });
                    int i5 = Theme.key_color_red;
                    actionBarMenuSubItem3.setColors(Theme.getColor(i5), Theme.getColor(i5));
                    actionBarPopupWindowLayout.addView(actionBarMenuSubItem3);
                    frameLayout.addView(actionBarPopupWindowLayout);
                    f3 = f5;
                    reactionButton = reactionButton3;
                } else if ((primaryMessageObject2 == null || (message = primaryMessageObject2.messageOwner) == null || (tL_messageReactions = message.reactions) == null || !tL_messageReactions.can_see_list) && ChatActivity.this.dialog_id < 0) {
                    f3 = f5;
                    reactionButton = reactionButton3;
                    TLRPC.Reaction reaction = reactionCount.reaction;
                    if ((reaction instanceof TLRPC.TL_reactionCustomEmoji) && (findStickerSet = AnimatedEmojiDrawable.getDocumentFetcher(((BaseFragment) ChatActivity.this).currentAccount).findStickerSet(((TLRPC.TL_reactionCustomEmoji) reaction).document_id)) != null) {
                        reactionButton.stopAnimation();
                        final ArrayList arrayList2 = new ArrayList();
                        arrayList2.add(findStickerSet);
                        View messageContainsEmojiButton = new MessageContainsEmojiButton(((BaseFragment) ChatActivity.this).currentAccount, ChatActivity.this.getContext(), ChatActivity.this.themeDelegate, arrayList2, 3);
                        messageContainsEmojiButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda9
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$14(arrayList2, view);
                            }
                        });
                        frameLayout.addView(messageContainsEmojiButton, LayoutHelper.createFrame(NotificationCenter.needSetDayNightTheme, -2.0f));
                        z2 = true;
                        ChatActivity.this.scrimPopupWindow = new ActionBarPopupWindow(frameLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.6
                            @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                            public void dismiss() {
                                super.dismiss();
                                ChatActivity chatActivity4 = ChatActivity.this;
                                if (chatActivity4.scrimPopupWindow != this) {
                                    return;
                                }
                                chatActivity4.scrimPopupWindow = null;
                                chatActivity4.menuDeleteItem = null;
                                ChatActivity.this.scrimPopupWindowItems = null;
                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                    ChatActivity.this.dimBehindView(false);
                                } else {
                                    ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                }
                                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                                    return;
                                }
                                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                            }
                        };
                        ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                        ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                        ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                        ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                        ChatActivity.this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                        ChatActivity.this.scrimPopupWindow.setFocusable(true);
                        frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                        ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                        ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                        ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                        height = ChatActivity.this.contentView.getHeight();
                        measuredHeight = frameLayout.getMeasuredHeight();
                        measureKeyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                        if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                            height += measureKeyboardHeight;
                        }
                        int max = Math.max(AndroidUtilities.dp(6.0f), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - frameLayout.getMeasuredWidth(), (int) (f3 - AndroidUtilities.dp(28.0f))));
                        if (AndroidUtilities.isTablet()) {
                            int[] iArr = new int[2];
                            ChatActivity.this.fragmentView.getLocationInWindow(iArr);
                            max += iArr[0];
                        }
                        if (measuredHeight >= height) {
                            float y = ChatActivity.this.chatListView.getY() + chatMessageCell.getY();
                            if (ChatActivity.this.isInsideContainer) {
                                int[] iArr2 = new int[2];
                                chatMessageCell.getLocationInWindow(iArr2);
                                y = iArr2[1];
                            }
                            float f6 = measuredHeight;
                            float f7 = height / 2.0f;
                            if (f6 < f7) {
                                reactionButton2 = reactionButton;
                                if (chatMessageCell.reactionsLayoutInBubble.y + y + reactionButton2.y > f7 && !z2) {
                                    ChatActivity.this.scrimViewReactionOffset = -(measuredHeight - AndroidUtilities.dp(12.0f));
                                    f4 = ((y + chatMessageCell.reactionsLayoutInBubble.y) + reactionButton2.y) - f6;
                                    i2 = (int) f4;
                                    i = 0;
                                }
                            } else {
                                reactionButton2 = reactionButton;
                            }
                            ChatActivity.this.scrimViewReactionOffset = 0;
                            f4 = y + chatMessageCell.reactionsLayoutInBubble.y + reactionButton2.y + reactionButton2.height;
                            i2 = (int) f4;
                            i = 0;
                        } else {
                            i = 0;
                            ChatActivity.this.scrimViewReactionOffset = 0;
                            i2 = ((BaseFragment) ChatActivity.this).inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                        }
                        if (frameLayout.getVisibility() != 0) {
                            ChatActivity.this.scrimViewReactionOffset = i;
                        }
                        ChatActivity chatActivity4 = ChatActivity.this;
                        chatActivity4.scrimPopupWindow.showAtLocation(chatActivity4.chatListView, 51, ChatActivity.this.scrimPopupX = max, ChatActivity.this.scrimPopupY = i2);
                        ChatActivity.this.chatListView.stopScroll();
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                        ChatActivity.this.scrimViewReaction = Integer.valueOf(reactionCount.reaction.hashCode());
                        ChatActivity.this.scrimViewReactionAnimated = !(reactionCount.reaction instanceof TLRPC.TL_reactionCustomEmoji) && LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD);
                        ChatActivity.this.dimBehindView((View) chatMessageCell, !z3, true);
                        ChatActivity.this.hideHints(false);
                        if (ChatActivity.this.topUndoView != null) {
                            ChatActivity.this.topUndoView.hide(true, 1);
                        }
                        if (ChatActivity.this.undoView != null) {
                            ChatActivity.this.undoView.hide(true, 1);
                        }
                        chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null || chatActivityEnterView.getEditField() == null) {
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                        return;
                    }
                    frameLayout.setVisibility(8);
                } else {
                    if (reactionCount.reaction instanceof TLRPC.TL_reactionCustomEmoji) {
                        reactionButton3.stopAnimation();
                    }
                    Activity parentActivity = ChatActivity.this.getParentActivity();
                    ChatActivity chatActivity5 = ChatActivity.this;
                    f3 = f5;
                    reactionButton = reactionButton3;
                    frameLayout.addView(new ReactedUsersListView(parentActivity, chatActivity5.themeDelegate, ((BaseFragment) chatActivity5).currentAccount, primaryMessageObject2, reactionCount, false, false).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda7
                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                        public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList3) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$12(reactedUsersListView, arrayList3);
                        }
                    }).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda8
                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                        public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j2, TLRPC.MessagePeerReaction messagePeerReaction) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$13(chatMessageCell, reactedUsersListView, j2, messagePeerReaction);
                        }
                    }), LayoutHelper.createFrame(NotificationCenter.needSetDayNightTheme, -2.0f));
                }
                z2 = false;
                ChatActivity.this.scrimPopupWindow = new ActionBarPopupWindow(frameLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.6
                    @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                    public void dismiss() {
                        super.dismiss();
                        ChatActivity chatActivity42 = ChatActivity.this;
                        if (chatActivity42.scrimPopupWindow != this) {
                            return;
                        }
                        chatActivity42.scrimPopupWindow = null;
                        chatActivity42.menuDeleteItem = null;
                        ChatActivity.this.scrimPopupWindowItems = null;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                            ChatActivity.this.dimBehindView(false);
                        } else {
                            ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                        }
                        ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                    }
                };
                ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                ChatActivity.this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                ChatActivity.this.scrimPopupWindow.setFocusable(true);
                frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                height = ChatActivity.this.contentView.getHeight();
                measuredHeight = frameLayout.getMeasuredHeight();
                measureKeyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                }
                int max2 = Math.max(AndroidUtilities.dp(6.0f), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - frameLayout.getMeasuredWidth(), (int) (f3 - AndroidUtilities.dp(28.0f))));
                if (AndroidUtilities.isTablet()) {
                }
                if (measuredHeight >= height) {
                }
                if (frameLayout.getVisibility() != 0) {
                }
                ChatActivity chatActivity42 = ChatActivity.this;
                chatActivity42.scrimPopupWindow.showAtLocation(chatActivity42.chatListView, 51, ChatActivity.this.scrimPopupX = max2, ChatActivity.this.scrimPopupY = i2);
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.scrimViewReaction = Integer.valueOf(reactionCount.reaction.hashCode());
                ChatActivity.this.scrimViewReactionAnimated = !(reactionCount.reaction instanceof TLRPC.TL_reactionCustomEmoji) && LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD);
                ChatActivity.this.dimBehindView((View) chatMessageCell, !z3, true);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                }
                if (ChatActivity.this.undoView != null) {
                }
                chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                }
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:40:0x00d0, code lost:
            if (org.telegram.messenger.DialogObject.getPeerDialogId(r14) != r19.this$0.dialog_id) goto L127;
         */
        /* JADX WARN: Removed duplicated region for block: B:102:0x01f6  */
        /* JADX WARN: Removed duplicated region for block: B:115:0x021c  */
        /* JADX WARN: Removed duplicated region for block: B:128:0x023b  */
        /* JADX WARN: Removed duplicated region for block: B:133:0x0248  */
        /* JADX WARN: Removed duplicated region for block: B:134:0x024b  */
        /* JADX WARN: Removed duplicated region for block: B:36:0x00ba  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x00d5  */
        /* JADX WARN: Removed duplicated region for block: B:55:0x00f5  */
        /* JADX WARN: Removed duplicated region for block: B:56:0x0105  */
        /* JADX WARN: Removed duplicated region for block: B:59:0x010a  */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void didPressReplyMessage(ChatMessageCell chatMessageCell, final int i) {
            String str;
            int i2;
            long j;
            TLRPC.Message message;
            boolean z;
            TLRPC.Chat chat;
            TLRPC.Message message2;
            TLRPC.MessageReplyHeader messageReplyHeader;
            TLRPC.MessageReplyHeader messageReplyHeader2;
            TLRPC.MessageReplyHeader messageReplyHeader3;
            MessageObject messageObject;
            TLRPC.MessageReplyHeader messageReplyHeader4;
            TLRPC.Peer peer;
            TLRPC.MessageReplyHeader messageReplyHeader5;
            TLRPC.Message message3;
            TL_stories.StoryItem storyItem;
            if (UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                didPressSideButton(chatMessageCell);
                return;
            }
            final MessageObject messageObject2 = chatMessageCell.getMessageObject();
            if (messageObject2.isReplyToStory() && (storyItem = (message3 = messageObject2.messageOwner).replyStory) != null) {
                if (storyItem instanceof TL_stories.TL_storyItemDeleted) {
                    BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.story_bomb1, LocaleController.getString(R.string.StoryNotFound)).show();
                    return;
                }
                storyItem.dialogId = DialogObject.getPeerDialogId(message3.reply_to.peer);
                storyItem.messageId = messageObject2.getId();
                storyItem.messageType = 3;
                StoriesUtilities.applyViewedUser(storyItem, ChatActivity.this.currentUser);
                ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), storyItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
            } else if (ChatActivity.this.chatMode == 2 || ChatActivity.this.chatMode == 1) {
                ChatActivity.this.chatActivityDelegate.openReplyMessage(i);
                ChatActivity.this.lambda$onBackPressed$300();
            } else {
                TLRPC.Message message4 = messageObject2.messageOwner;
                if (message4 == null || (messageReplyHeader5 = message4.reply_to) == null || !messageReplyHeader5.quote) {
                    str = null;
                } else {
                    str = messageReplyHeader5.quote_text;
                    if ((messageReplyHeader5.flags & 1024) != 0) {
                        i2 = messageReplyHeader5.quote_offset;
                        j = ChatActivity.this.dialog_id;
                        message = messageObject2.messageOwner;
                        if (message != null && (messageReplyHeader4 = message.reply_to) != null) {
                            peer = messageReplyHeader4.reply_to_peer_id;
                            if (peer != null) {
                                TLRPC.MessageFwdHeader messageFwdHeader = messageReplyHeader4.reply_from;
                                if (messageFwdHeader != null) {
                                    TLRPC.Peer peer2 = messageFwdHeader.from_id;
                                    if (peer2 != null) {
                                        if (!(peer2 instanceof TLRPC.TL_peerUser)) {
                                            j = DialogObject.getPeerDialogId(peer2);
                                        }
                                        j = Long.MAX_VALUE;
                                    } else {
                                        TLRPC.Peer peer3 = messageFwdHeader.saved_from_peer;
                                        if (peer3 != null) {
                                            j = DialogObject.getPeerDialogId(peer3);
                                        }
                                        j = Long.MAX_VALUE;
                                    }
                                }
                            } else if (!(peer instanceof TLRPC.TL_peerUser)) {
                                j = DialogObject.getPeerDialogId(peer);
                                z = true;
                            }
                            chat = j >= 0 ? ChatActivity.this.getMessagesController().getChat(Long.valueOf(-j)) : null;
                            if (j != Long.MAX_VALUE || (j != ChatActivity.this.dialog_id && chat != null && !ChatObject.isPublic(chat) && (chat.left || chat.kicked))) {
                                message2 = messageObject2.messageOwner;
                                if (message2 != null || (messageReplyHeader2 = message2.reply_to) == null || TextUtils.isEmpty(messageReplyHeader2.quote_text) || !messageObject2.replyTextEllipsized || messageObject2.replyTextRevealed || messageObject2.shouldDrawWithoutBackground()) {
                                    TLRPC.Message message5 = messageObject2.messageOwner;
                                    BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.error, LocaleController.getString((message5 == null && (messageReplyHeader = message5.reply_to) != null && messageReplyHeader.quote) ? (chat == null || !chat.megagroup) ? ChatObject.isChannel(chat) ? R.string.QuotePrivateChannel : R.string.QuotePrivate : R.string.QuotePrivateGroup : (chat == null && chat.megagroup) ? R.string.ReplyPrivateGroup : !ChatObject.isChannel(chat) ? R.string.ReplyPrivateChannel : R.string.ReplyPrivate)).show(true);
                                }
                                messageObject2.replyTextRevealed = true;
                                ChatActivity.this.updateMessageAnimated(messageObject2, true);
                                return;
                            } else if (((j != ChatActivity.this.dialog_id || (ChatObject.isForum(ChatActivity.this.currentChat) && z)) && j != Long.MAX_VALUE) || (ChatActivity.this.chatMode == 3 && ((messageObject = messageObject2.replyMessageObject) == null || messageObject.getSavedDialogId() != ChatActivity.this.getTopicId()))) {
                                if (LaunchActivity.instance != null) {
                                    if (ChatActivity.this.progressDialogCurrent != null) {
                                        ChatActivity.this.progressDialogCurrent.cancel();
                                        ChatActivity.this.progressDialogCurrent = null;
                                    }
                                    LaunchActivity.instance.openMessage(j, i, str, ChatActivity.this.progressDialogCurrent = new 8(chatMessageCell), messageObject2.getId(), i2);
                                    return;
                                }
                                return;
                            } else {
                                TLRPC.Message message6 = messageObject2.messageOwner;
                                if (message6 != null && (messageReplyHeader3 = message6.reply_to) != null && messageReplyHeader3.quote) {
                                    ChatActivity chatActivity = ChatActivity.this;
                                    chatActivity.highlightMessageQuoteFirst = true;
                                    chatActivity.highlightMessageQuote = messageReplyHeader3.quote_text;
                                    chatActivity.highlightMessageQuoteOffset = i2;
                                    chatActivity.showNoQuoteAlert = true;
                                }
                                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda10
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReplyMessage$21(i, messageObject2);
                                    }
                                };
                                if (!ChatActivity.this.chatAdapter.isFiltered) {
                                    runnable.run();
                                    return;
                                }
                                ChatActivity chatActivity2 = ChatActivity.this;
                                chatActivity2.setFilterMessages(chatActivity2.searchingFiltered = false, true, false);
                                ChatActivity chatActivity3 = ChatActivity.this;
                                chatActivity3.updateSearchButtons(chatActivity3.getMediaDataController().getMask(), ChatActivity.this.getMediaDataController().getSearchPosition(), ChatActivity.this.getMediaDataController().getSearchCount());
                                AndroidUtilities.runOnUIThread(runnable, 80L);
                                return;
                            }
                        }
                        z = false;
                        if (j >= 0) {
                        }
                        if (j != Long.MAX_VALUE) {
                        }
                        message2 = messageObject2.messageOwner;
                        if (message2 != null) {
                        }
                        TLRPC.Message message52 = messageObject2.messageOwner;
                        BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.error, LocaleController.getString((message52 == null && (messageReplyHeader = message52.reply_to) != null && messageReplyHeader.quote) ? (chat == null || !chat.megagroup) ? ChatObject.isChannel(chat) ? R.string.QuotePrivateChannel : R.string.QuotePrivate : R.string.QuotePrivateGroup : (chat == null && chat.megagroup) ? R.string.ReplyPrivateGroup : !ChatObject.isChannel(chat) ? R.string.ReplyPrivateChannel : R.string.ReplyPrivate)).show(true);
                    }
                }
                i2 = -1;
                j = ChatActivity.this.dialog_id;
                message = messageObject2.messageOwner;
                if (message != null) {
                    peer = messageReplyHeader4.reply_to_peer_id;
                    if (peer != null) {
                    }
                    if (j >= 0) {
                    }
                    if (j != Long.MAX_VALUE) {
                    }
                    message2 = messageObject2.messageOwner;
                    if (message2 != null) {
                    }
                    TLRPC.Message message522 = messageObject2.messageOwner;
                    BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.error, LocaleController.getString((message522 == null && (messageReplyHeader = message522.reply_to) != null && messageReplyHeader.quote) ? (chat == null || !chat.megagroup) ? ChatObject.isChannel(chat) ? R.string.QuotePrivateChannel : R.string.QuotePrivate : R.string.QuotePrivateGroup : (chat == null && chat.megagroup) ? R.string.ReplyPrivateGroup : !ChatObject.isChannel(chat) ? R.string.ReplyPrivateChannel : R.string.ReplyPrivate)).show(true);
                }
                z = false;
                if (j >= 0) {
                }
                if (j != Long.MAX_VALUE) {
                }
                message2 = messageObject2.messageOwner;
                if (message2 != null) {
                }
                TLRPC.Message message5222 = messageObject2.messageOwner;
                BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.error, LocaleController.getString((message5222 == null && (messageReplyHeader = message5222.reply_to) != null && messageReplyHeader.quote) ? (chat == null || !chat.megagroup) ? ChatObject.isChannel(chat) ? R.string.QuotePrivateChannel : R.string.QuotePrivate : R.string.QuotePrivateGroup : (chat == null && chat.megagroup) ? R.string.ReplyPrivateGroup : !ChatObject.isChannel(chat) ? R.string.ReplyPrivateChannel : R.string.ReplyPrivate)).show(true);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressRevealSensitiveContent(final ChatMessageCell chatMessageCell) {
            if (!ChatActivity.this.getMessagesController().showSensitiveContent()) {
                final AlertDialog alertDialog = new AlertDialog(ChatActivity.this.getContext(), 3);
                alertDialog.showDelayed(200L);
                ChatActivity.this.getMessagesController().getContentSettings(new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda21
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressRevealSensitiveContent$29(alertDialog, chatMessageCell, (TL_account.contentSettings) obj);
                    }
                });
                return;
            }
            if (chatMessageCell.getMessageObject() != null) {
                chatMessageCell.getMessageObject().isSensitiveCached = Boolean.FALSE;
            }
            chatMessageCell.startRevealMedia();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSideButton(ChatMessageCell chatMessageCell) {
            TLRPC.Message message;
            TLRPC.MessageReplyHeader messageReplyHeader;
            int i;
            TLRPC.MessageFwdHeader messageFwdHeader;
            MessageObject.GroupedMessages groupedMessages;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.closeKeyboard();
            }
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (ChatActivity.this.chatMode == 2) {
                ChatActivity.this.chatActivityDelegate.openReplyMessage(messageObject.getId());
                ChatActivity.this.lambda$onBackPressed$300();
            } else if (ChatActivity.this.chatMode == 3 || ((ChatActivity.this.chatMode == 7 && ChatActivity.this.searchType == 2) || !((!UserObject.isReplyUser(ChatActivity.this.currentUser) && !UserObject.isUserSelf(ChatActivity.this.currentUser)) || (messageFwdHeader = messageObject.messageOwner.fwd_from) == null || messageFwdHeader.saved_from_peer == null))) {
                if (UserObject.isReplyUser(ChatActivity.this.currentUser) && (messageReplyHeader = (message = messageObject.messageOwner).reply_to) != null && (i = messageReplyHeader.reply_to_top_id) != 0) {
                    ChatActivity.this.openDiscussionMessageChat(messageReplyHeader.reply_to_peer_id.channel_id, null, i, 0L, -1, message.fwd_from.saved_from_msg_id, messageObject);
                } else if (ChatActivity.this.chatMode == 7 && ChatActivity.this.searchType == 2) {
                    ChatActivity.this.openMessageInOriginalDialog(messageObject);
                } else {
                    ChatActivity.this.openOriginalReplyChat(messageObject);
                }
            } else {
                ArrayList<MessageObject> arrayList = (messageObject.getGroupId() == 0 || (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) == null) ? null : groupedMessages.messages;
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    arrayList.add(messageObject);
                }
                ArrayList<MessageObject> arrayList2 = arrayList;
                boolean z = ChatActivity.this.getMessagesController().storiesEnabled() && StoryEntry.canRepostMessage(messageObject);
                ChatActivity chatActivity = ChatActivity.this;
                Context context = ChatActivity.this.getContext();
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new 1(context, chatActivity2, arrayList2, null, null, ChatObject.isChannel(chatActivity2.currentChat), null, null, false, false, z, ChatActivity.this.themeDelegate, z, messageObject));
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ChatActivity.this.fragmentView.requestLayout();
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSponsoredClose(ChatMessageCell chatMessageCell) {
            ChatActivity.this.selectedObject = chatMessageCell.getMessageObject();
            ChatActivity.this.hideAds();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSponsoredInfo(ChatMessageCell chatMessageCell, float f, float f2) {
            ChatActivity.this.createMenu(chatMessageCell, true, false, f, f2, false, false);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTime(ChatMessageCell chatMessageCell) {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(ChatActivity.this.dialog_id, 47, (Runnable) null);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTopicButton(ChatMessageCell chatMessageCell) {
            TLRPC.TL_forumTopic findTopic;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject != null) {
                long topicId = MessageObject.getTopicId(messageObject.currentAccount, messageObject.messageOwner, true);
                if (topicId == 0 || (findTopic = ChatActivity.this.getMessagesController().getTopicsController().findTopic(ChatActivity.this.currentChat.id, topicId)) == null) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                ForumUtilities.openTopic(chatActivity, chatActivity.currentChat.id, findTopic, messageObject.getId());
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            ChatActivity.this.didPressMessageUrl(characterStyle, z, chatMessageCell.getMessageObject(), chatMessageCell);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC.User user, float f, float f2, boolean z) {
            boolean z2 = true;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else if (chatMessageCell != null && chatMessageCell.getMessageObject() != null && chatMessageCell.getMessageObject().isSponsored()) {
                didPressInstantButton(chatMessageCell, 10);
            } else {
                if (!ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isThreadChat()) {
                    z2 = false;
                }
                openProfile(user, z2);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUserStatus(ChatMessageCell chatMessageCell, TLRPC.User user, TLRPC.Document document) {
            ImageLocation forDocument;
            if (chatMessageCell == null) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            PremiumPreviewBottomSheet premiumPreviewBottomSheet = new PremiumPreviewBottomSheet(chatActivity, ((BaseFragment) chatActivity).currentAccount, user, ChatActivity.this.themeDelegate);
            chatMessageCell.getLocationOnScreen(new int[2]);
            premiumPreviewBottomSheet.startEnterFromX = chatMessageCell.getNameStatusX();
            premiumPreviewBottomSheet.startEnterFromY = chatMessageCell.getNameStatusY();
            premiumPreviewBottomSheet.startEnterFromScale = chatMessageCell.getScaleX();
            premiumPreviewBottomSheet.startEnterFromX1 = chatMessageCell.getLeft();
            premiumPreviewBottomSheet.startEnterFromY1 = chatMessageCell.getTop();
            premiumPreviewBottomSheet.startEnterFromView = chatMessageCell;
            int colorId = UserObject.getColorId(user);
            ChatActivity chatActivity2 = ChatActivity.this;
            if (colorId < 7) {
                premiumPreviewBottomSheet.accentColor = Integer.valueOf(chatActivity2.getThemedColor(Theme.keys_avatar_nameInMessage[colorId]));
            } else {
                MessagesController.PeerColors peerColors = MessagesController.getInstance(((BaseFragment) chatActivity2).currentAccount).peerColors;
                MessagesController.PeerColor color = peerColors != null ? peerColors.getColor(colorId) : null;
                premiumPreviewBottomSheet.accentColor = color != null ? Integer.valueOf(color.getColor1()) : null;
            }
            AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = chatMessageCell.currentNameStatusDrawable;
            if (swapAnimatedEmojiDrawable != null && (swapAnimatedEmojiDrawable.getDrawable() instanceof AnimatedEmojiDrawable)) {
                premiumPreviewBottomSheet.startEnterFromScale *= 0.95f;
                if (document != null) {
                    BackupImageView backupImageView = new BackupImageView(ChatActivity.this.getContext());
                    SvgHelper.SvgDrawable svgThumb = DocumentObject.getSvgThumb(document.thumbs, Theme.key_windowBackgroundWhiteGrayIcon, 0.2f);
                    TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(document.thumbs, 90);
                    String str = "160_160";
                    if ("video/webm".equals(document.mime_type)) {
                        forDocument = ImageLocation.getForDocument(document);
                        str = "160_160_" + ImageLoader.AUTOPLAY_FILTER;
                        if (svgThumb != null) {
                            svgThumb.overrideWidthAndHeight(512, 512);
                        }
                    } else {
                        if (svgThumb != null && MessageObject.isAnimatedStickerDocument(document, false)) {
                            svgThumb.overrideWidthAndHeight(512, 512);
                        }
                        forDocument = ImageLocation.getForDocument(document);
                    }
                    ImageLocation imageLocation = forDocument;
                    backupImageView.setLayerNum(7);
                    backupImageView.setRoundRadius(AndroidUtilities.dp(4.0f));
                    backupImageView.setImage(imageLocation, str, ImageLocation.getForDocument(closestPhotoSizeWithSize, document), "140_140", svgThumb, document);
                    if (MessageObject.isTextColorEmoji(document)) {
                        Integer num = premiumPreviewBottomSheet.accentColor;
                        backupImageView.setColorFilter(new PorterDuffColorFilter(num != null ? num.intValue() : ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon), PorterDuff.Mode.SRC_IN));
                    }
                    premiumPreviewBottomSheet.statusStickerSet = MessageObject.getInputStickerSet(document);
                    premiumPreviewBottomSheet.overrideTitleIcon = backupImageView;
                    premiumPreviewBottomSheet.isEmojiStatus = true;
                }
            }
            ChatActivity.this.showDialog(premiumPreviewBottomSheet);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBot(ChatMessageCell chatMessageCell, String str) {
            if (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                if ((ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0) && ChatActivity.this.chatActivityEnterView != null && str != null && str.length() > 0) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    chatActivityEnterView.setFieldText("@" + str + " ");
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", j);
            if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                ChatActivity.this.presentFragment(new ChatActivity(bundle));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3) {
            int i4;
            int i5;
            int i6;
            int i7;
            if (i < 0 && !arrayList.isEmpty()) {
                ChatActivity.this.getSendMessagesHelper().sendVote(chatMessageCell.getMessageObject(), arrayList, null);
            } else if (ChatActivity.this.getParentActivity() == null) {
            } else {
                if (ChatActivity.this.pollHintView == null) {
                    ChatActivity.this.pollHintView = new HintView(ChatActivity.this.getParentActivity(), 5, ChatActivity.this.themeDelegate);
                    ChatActivity.this.pollHintView.setAlpha(0.0f);
                    ChatActivity.this.pollHintView.setVisibility(4);
                    ChatActivity chatActivity = ChatActivity.this;
                    int indexOfChild = chatActivity.contentView.indexOfChild(chatActivity.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.contentView.addView(chatActivity2.pollHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                }
                if (!arrayList.isEmpty() || i >= 0) {
                    i4 = i2;
                    i5 = i3;
                } else {
                    ArrayList<ChatMessageCell.PollButton> pollButtons = chatMessageCell.getPollButtons();
                    int size = pollButtons.size();
                    int i8 = 0;
                    float f = 0.0f;
                    while (true) {
                        if (i8 >= size) {
                            i6 = i2;
                            i7 = i3;
                            break;
                        }
                        ChatMessageCell.PollButton pollButton = pollButtons.get(i8);
                        float y = (chatMessageCell.getY() + pollButton.y) - AndroidUtilities.dp(4.0f);
                        ChatActivity chatActivity3 = ChatActivity.this;
                        float f2 = y - chatActivity3.chatListViewPaddingTop;
                        chatActivity3.pollHintX = pollButton.x + AndroidUtilities.dp(13.3f);
                        ChatActivity.this.pollHintY = (pollButton.y - AndroidUtilities.dp(6.0f)) + i3;
                        if (f2 > 0.0f) {
                            i6 = ChatActivity.this.pollHintX;
                            i7 = ChatActivity.this.pollHintY;
                            f = 0.0f;
                            break;
                        }
                        i8++;
                        f = f2;
                    }
                    if (f != 0.0f) {
                        ChatActivity.this.chatListView.smoothScrollBy(0, (int) f);
                        ChatActivity.this.pollHintCell = chatMessageCell;
                        return;
                    }
                    i4 = i6;
                    i5 = i7;
                }
                ChatActivity.this.pollHintView.showForMessageCell(chatMessageCell, Integer.valueOf(i), i4, i5, true);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressWebPage(ChatMessageCell chatMessageCell, TLRPC.WebPage webPage, String str, boolean z) {
            Uri parse;
            if (str == null || (parse = Uri.parse(str)) == null) {
                return;
            }
            if (!z && Browser.isTelegraphUrl(str, false)) {
                z = true;
            }
            if (ChatActivity.this.progressDialogCurrent != null) {
                ChatActivity.this.progressDialogCurrent.cancel(true);
            }
            ChatActivity.this.progressDialogCurrent = (chatMessageCell == null || chatMessageCell.getMessageObject() == null) ? null : new 7(chatMessageCell);
            if (z || Browser.isInternalUri(parse, null)) {
                Browser.openUrl(ChatActivity.this.getContext(), parse, true, true, false, ChatActivity.this.progressDialogCurrent, null, false, true);
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            AlertsCreator.showOpenUrlAlert(chatActivity, str, true, true, true, !z, chatActivity.progressDialogCurrent, ChatActivity.this.themeDelegate);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didStartVideoStream(MessageObject messageObject) {
            if (messageObject.isVideo()) {
                ChatActivity.this.sendSecretMessageRead(messageObject, true);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean doNotShowLoadingReply(MessageObject messageObject) {
            return ((messageObject != null && messageObject.getDialogId() == UserObject.REPLY_BOT) || (ChatActivity.this.chatAdapter != null && ChatActivity.this.chatAdapter.isFiltered)) && ChatActivity.this.chatMode != 7;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void forceUpdate(ChatMessageCell chatMessageCell, boolean z) {
            MessageObject primaryMessageObject;
            int i;
            int i2;
            if (chatMessageCell == null || (primaryMessageObject = chatMessageCell.getPrimaryMessageObject()) == null) {
                return;
            }
            primaryMessageObject.forceUpdate = true;
            if (ChatActivity.this.chatListView != null && ChatActivity.this.chatLayoutManager != null && !ChatActivity.this.chatLayoutManager.hasPendingScrollPosition()) {
                for (int childCount = ChatActivity.this.chatListView.getChildCount() - 1; childCount >= 0; childCount--) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(childCount);
                    i = ChatActivity.this.chatListView.getChildAdapterPosition(childAt);
                    if (i >= 0) {
                        if (childAt instanceof ChatMessageCell) {
                            if (((ChatMessageCell) childAt).getCurrentMessagesGroup() == null) {
                                i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                                break;
                            }
                        } else if (childAt instanceof ChatActionCell) {
                            i2 = ChatActivity.this.getScrollingOffsetForView(childAt);
                            break;
                        }
                    }
                }
            }
            i = -1;
            i2 = 0;
            ChatActivity.this.lambda$updateMessageAnimated$265(primaryMessageObject, false);
            if (z && i >= 0 && chatMessageCell.getCurrentMessagesGroup() == null) {
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getAdminRank(long j) {
            String adminRank;
            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.currentChat.megagroup && (adminRank = chatActivity.getMessagesController().getAdminRank(ChatActivity.this.currentChat.id, j)) != null) {
                    return adminRank;
                }
            }
            if (ChatActivity.this.forumTopic == null || ChatActivity.this.forumTopic.from_id == null) {
                return null;
            }
            if (ChatActivity.this.forumTopic.from_id.user_id == j || ChatActivity.this.forumTopic.from_id.channel_id == j || ChatActivity.this.forumTopic.from_id.chat_id == j) {
                return LocaleController.getString(R.string.TopicCreator);
            }
            return null;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public PinchToZoomHelper getPinchToZoomHelper() {
            return ChatActivity.this.pinchToZoomHelper;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getProgressLoadingBotButtonUrl(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 3) {
                return null;
            }
            return ChatActivity.this.progressDialogBotButtonUrl;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 1) {
                return null;
            }
            return ChatActivity.this.progressDialogLinkSpan;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper() {
            return ChatActivity.this.textSelectionHelper;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean hasSelectedMessages() {
            return ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() > 0;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void invalidateBlur() {
            ChatActivity.this.contentView.invalidateBlur();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isLandscape() {
            return ChatActivity.this.contentView.getMeasuredWidth() > ChatActivity.this.contentView.getMeasuredHeight();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isProgressLoading(ChatMessageCell chatMessageCell, int i) {
            return ChatActivity.this.progressDialogAtMessageId != 0 && chatMessageCell.getMessageObject() != null && ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId() && ChatActivity.this.progressDialogAtMessageType == i;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isReplyOrSelf() {
            return UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean keyboardIsOpened() {
            return ChatActivity.this.contentView.getKeyboardHeight() + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            try {
                ChatActivity chatActivity = ChatActivity.this;
                EmbedBottomSheet.show(chatActivity, messageObject, chatActivity.photoViewerProvider, str2, str3, str4, str, i, i2, ChatActivity.this.isKeyboardVisible());
            } catch (Throwable th) {
                FileLog.e(th);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean needPlayMessage(ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z) {
            if (!messageObject.isVoiceOnce() && !messageObject.isRoundOnce()) {
                if (messageObject.isVoice() || messageObject.isRoundVideo()) {
                    boolean playMessage = MediaController.getInstance().playMessage(messageObject, z);
                    MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                    return playMessage;
                } else if (messageObject.isMusic()) {
                    return MediaController.getInstance().setPlaylist(ChatActivity.this.chatAdapter.getMessages(), messageObject, ChatActivity.this.mergeDialogId, !ChatActivity.this.chatAdapter.isFiltered, null);
                } else {
                    return false;
                }
            } else if (ChatActivity.this.secretVoicePlayer == null || !ChatActivity.this.secretVoicePlayer.isShown()) {
                try {
                    AudioManager audioManager = (AudioManager) ApplicationLoader.applicationContext.getSystemService(MediaStreamTrack.AUDIO_TRACK_KIND);
                    int streamVolume = audioManager.getStreamVolume(3);
                    if (streamVolume == 0) {
                        audioManager.adjustStreamVolume(3, streamVolume, 1);
                        if (!messageObject.isOutOwner()) {
                            BulletinFactory.of(ChatActivity.this).createImageBulletin(R.drawable.tooltip_sound, LocaleController.getString(R.string.VoiceOnceTurnOnSound)).show(true);
                            return false;
                        }
                    }
                } catch (Exception unused) {
                }
                ChatActivity.this.secretVoicePlayer = new SecretVoicePlayer(ChatActivity.this.getContext());
                ChatActivity.this.secretVoicePlayer.setCell(chatMessageCell, !messageObject.isOutOwner() ? ChatActivity.this.sendSecretMessageRead(messageObject, true) : null, messageObject.isOutOwner() ? null : ChatActivity.this.sendSecretMediaDelete(messageObject));
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.showDialog(chatActivity.secretVoicePlayer);
                return false;
            } else {
                return false;
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needReloadPolls() {
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needShowPremiumBulletin(int i) {
            String formatString;
            Runnable runnable;
            CharSequence charSequence;
            View view;
            try {
                if (i == 0) {
                    ChatActivity.this.checkTopUndoView();
                    if (ChatActivity.this.topUndoView == null) {
                        return;
                    }
                    ChatActivity.this.topUndoView.showWithAction(0L, 84, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda12
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$6();
                        }
                    });
                    view = ChatActivity.this.topUndoView;
                } else if (i != 1) {
                    if (i == 2 || i == 3) {
                        String formatDateTime = LocaleController.formatDateTime(ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil, true);
                        BulletinFactory of = BulletinFactory.of(ChatActivity.this);
                        int i2 = R.raw.transcribe;
                        SpannableStringBuilder append = new SpannableStringBuilder().append((CharSequence) AndroidUtilities.replaceTags(LocaleController.formatPluralString("TranscriptionTrialEnd", ChatActivity.this.getMessagesController().transcribeAudioTrialWeeklyNumber, new Object[0]))).append((CharSequence) " ");
                        if (i == 2) {
                            formatString = LocaleController.getString(R.string.TranscriptionTrialEndBuy);
                            runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda13
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$7();
                                }
                            };
                        } else if (ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil <= 0) {
                            charSequence = "";
                            of.createSimpleBulletin(i2, append.append(charSequence), 6, 7000).show(true);
                            BotWebViewVibrationEffect.APP_ERROR.vibrate();
                            return;
                        } else {
                            formatString = LocaleController.formatString(R.string.TranscriptionTrialEndWaitOrBuy, formatDateTime);
                            runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda14
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$8();
                                }
                            };
                        }
                        charSequence = AndroidUtilities.replaceSingleTag(formatString, runnable);
                        of.createSimpleBulletin(i2, append.append(charSequence), 6, 7000).show(true);
                        BotWebViewVibrationEffect.APP_ERROR.vibrate();
                        return;
                    }
                    return;
                } else {
                    BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.transcribe, AndroidUtilities.replaceTags(ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil > 0 ? LocaleController.formatPluralString("TranscriptionTrialLeftUntil", TranscribeButton.getTranscribeTrialCount(((BaseFragment) ChatActivity.this).currentAccount), LocaleController.formatDateTime(ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil, true)) : LocaleController.formatPluralString("TranscriptionTrialLeft", TranscribeButton.getTranscribeTrialCount(((BaseFragment) ChatActivity.this).currentAccount), new Object[0])), 6).show(true);
                    view = ChatActivity.this.fragmentView;
                }
                view.performHapticFeedback(3, 2);
            } catch (Exception unused) {
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean onAccessibilityAction(int i, Bundle bundle) {
            if (i == 16 || i == R.id.acc_action_small_button || i == R.id.acc_action_msg_options) {
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.allowExpandPreviewByClick) {
                        if (((BaseFragment) chatActivity).parentLayout != null) {
                            ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                        }
                        return true;
                    }
                }
                return !canPerformActions();
            }
            return false;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void onDiceFinished() {
            if (ChatActivity.this.fireworksOverlay.isStarted()) {
                return;
            }
            ChatActivity.this.fireworksOverlay.start();
            ChatActivity.this.fireworksOverlay.performHapticFeedback(3, 2);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void setShouldNotRepeatSticker(MessageObject messageObject) {
            ChatActivity.this.alreadyPlayedStickers.put(messageObject, Boolean.TRUE);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell, boolean z) {
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            MessageObject messageObject = (currentMessagesGroup == null || currentMessagesGroup.messages.isEmpty()) ? chatMessageCell.getMessageObject() : currentMessagesGroup.messages.get(0);
            if (messageObject == null) {
                return false;
            }
            boolean z2 = !ChatActivity.this.hideCommentLoading && messageObject.getId() == ChatActivity.this.commentLoadingMessageId;
            return z ? z2 && System.currentTimeMillis() - ChatActivity.this.commentLoadingStartedAt > 1000 : z2;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldRepeatSticker(MessageObject messageObject) {
            return !ChatActivity.this.alreadyPlayedStickers.containsKey(messageObject);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldShowDialogButton(ChatMessageCell chatMessageCell) {
            return ChatActivity.this.chatMode == 7 && ChatActivity.this.searchType == 1;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldShowTopicButton(ChatMessageCell chatMessageCell) {
            return ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isTopic;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void videoTimerReached() {
            ChatActivity.this.showNoSoundHint();
        }
    }

    /* loaded from: classes4.dex */
    public class ChatScrollCallback extends RecyclerAnimationScrollHelper.AnimationCallback {
        private boolean lastBottom;
        private int lastItemOffset;
        private int lastPadding;
        private MessageObject scrollTo;
        private int position = 0;
        private boolean bottom = true;
        private int offset = 0;

        public ChatScrollCallback() {
        }

        static /* synthetic */ MessageObject access$35602(ChatScrollCallback chatScrollCallback, MessageObject messageObject) {
            chatScrollCallback.scrollTo = messageObject;
            return messageObject;
        }

        static /* synthetic */ boolean access$35702(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.lastBottom = z;
            return z;
        }

        static /* synthetic */ int access$35802(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastItemOffset = i;
            return i;
        }

        static /* synthetic */ int access$35902(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastPadding = i;
            return i;
        }

        static /* synthetic */ int access$36002(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.position = i;
            return i;
        }

        static /* synthetic */ int access$36102(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.offset = i;
            return i;
        }

        static /* synthetic */ boolean access$36202(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.bottom = z;
            return z;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onEndAnimation$0() {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollCallbackAnimationIndex);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onEndAnimation() {
            if (this.scrollTo != null) {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                int indexOf = ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(this.scrollTo);
                if (indexOf >= 0) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(indexOf, (int) ((this.lastItemOffset + this.lastPadding) - ChatActivity.this.chatListViewPaddingTop), this.lastBottom);
                }
            } else {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(this.position, this.offset, this.bottom);
            }
            this.scrollTo = null;
            ChatActivity.this.checkTextureViewPosition = true;
            ChatActivity.this.updateVisibleRows();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatScrollCallback$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatScrollCallback.this.lambda$onEndAnimation$0();
                }
            });
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onStartAnimation() {
            super.onStartAnimation();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollCallbackAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollCallbackAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations);
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                ChatActivity.this.pinchToZoomHelper.finishZoom();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void recycleView(View view) {
            if (view instanceof ChatMessageCell) {
                ArrayList arrayList = (ArrayList) ChatActivity.chatMessageCellsCache.get(((BaseFragment) ChatActivity.this).currentAccount);
                if (arrayList == null) {
                    ArrayList arrayList2 = new ArrayList();
                    ChatActivity.chatMessageCellsCache.put(((BaseFragment) ChatActivity.this).currentAccount, arrayList2);
                    arrayList = arrayList2;
                }
                arrayList.add((ChatMessageCell) view);
            }
        }
    }

    /* loaded from: classes4.dex */
    public class FirstViewPage extends View {
        private final ArrayList views;
        private final ArrayList viewsToMakeVisible;

        public FirstViewPage(Context context) {
            super(context);
            this.views = new ArrayList();
            this.viewsToMakeVisible = new ArrayList();
        }

        private void updateViews() {
            this.views.clear();
            this.views.add(ChatActivity.this.pagedownButton);
            this.views.add(ChatActivity.this.searchUpButton);
            this.views.add(ChatActivity.this.searchDownButton);
            this.views.add(ChatActivity.this.searchContainer);
            this.views.add(ChatActivity.this.topChatPanelView);
            this.views.add(ChatActivity.this.chatListView);
            this.views.add(ChatActivity.this.messagesSearchListContainer);
            this.views.add(ChatActivity.this.mentionContainer);
            this.views.add(ChatActivity.this.floatingDateView);
            this.views.removeAll(Collections.singleton(null));
        }

        @Override // android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            return false;
        }

        @Override // android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            Iterator it = this.viewsToMakeVisible.iterator();
            while (it.hasNext()) {
                ((View) it.next()).setVisibility(0);
            }
            this.viewsToMakeVisible.clear();
        }

        @Override // android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            updateViews();
            Iterator it = this.views.iterator();
            while (it.hasNext()) {
                View view = (View) it.next();
                if (view.getVisibility() == 0) {
                    view.setVisibility(8);
                    this.viewsToMakeVisible.add(view);
                }
            }
        }

        @Override // android.view.View
        public void setTranslationX(float f) {
            super.setTranslationX(f);
            updateViews();
            Iterator it = this.views.iterator();
            while (it.hasNext()) {
                View view = (View) it.next();
                if (view != null) {
                    view.setTranslationX(f);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public static final class MessageSkeleton {
        int height;
        int lastBottom;
        int width;

        private MessageSkeleton() {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class PinnedMessageButton extends TextView {
        public PinnedMessageButton(Context context) {
            super(context);
            setSingleLine(true);
            setLines(1);
            setMaxLines(1);
            setEllipsize(TextUtils.TruncateAt.END);
            setTextColor(ChatActivity.this.getThemedColor(Theme.key_featuredStickers_buttonText));
            setBackground(Theme.AdaptiveRipple.filledRect(ChatActivity.this.getThemedColor(Theme.key_featuredStickers_addButton), 16.0f));
            setTextSize(1, 14.0f);
            setTypeface(AndroidUtilities.bold());
            setGravity(17);
            setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(14.0f), 0);
        }

        @Override // android.widget.TextView, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(i), (int) (AndroidUtilities.displaySize.x * 0.45f)), Integer.MIN_VALUE), i2);
        }
    }

    /* loaded from: classes4.dex */
    private class RecyclerListViewInternal extends RecyclerListView implements StoriesListPlaceProvider.ClippedView {
        public RecyclerListViewInternal(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
        }

        @Override // org.telegram.ui.Stories.StoriesListPlaceProvider.ClippedView
        public void updateClip(int[] iArr) {
            iArr[0] = ((int) ChatActivity.this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
            iArr[1] = ChatActivity.this.chatListView.getMeasuredHeight() - (ChatActivity.this.chatListView.getPaddingBottom() - AndroidUtilities.dp(3.0f));
        }
    }

    /* loaded from: classes4.dex */
    public static class ReplyQuote {
        public int end;
        public ArrayList entities;
        public int length;
        public MessageObject message;
        public int offset;
        public boolean outdated;
        public final long peerId;
        public int start;
        public String text;

        private ReplyQuote(long j, MessageObject messageObject, int i, int i2) {
            this.peerId = j;
            this.message = messageObject;
            this.start = i;
            this.end = i2;
            update();
        }

        public static ReplyQuote from(MessageObject messageObject) {
            TLRPC.Message message;
            if (messageObject == null || (message = messageObject.messageOwner) == null || message.message == null) {
                return null;
            }
            return from(messageObject, 0, Math.min(MessagesController.getInstance(messageObject.currentAccount).quoteLengthMax, messageObject.messageOwner.message.length()));
        }

        public static ReplyQuote from(MessageObject messageObject, int i, int i2) {
            if (messageObject == null) {
                return null;
            }
            return new ReplyQuote(messageObject.getDialogId(), messageObject, i, i2);
        }

        public static ReplyQuote from(MessageObject messageObject, String str, int i) {
            TLRPC.Message message;
            String str2;
            int findQuoteStart;
            if (messageObject == null || (message = messageObject.messageOwner) == null || (str2 = message.message) == null || str == null || (findQuoteStart = MessageObject.findQuoteStart(str2, str, i)) < 0) {
                return null;
            }
            return new ReplyQuote(messageObject.getDialogId(), messageObject, findQuoteStart, findQuoteStart + str.length());
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r5v10, types: [org.telegram.tgnet.TLRPC$TL_messageEntityStrike] */
        /* JADX WARN: Type inference failed for: r5v11, types: [org.telegram.tgnet.TLRPC$TL_messageEntityUnderline] */
        /* JADX WARN: Type inference failed for: r5v12, types: [org.telegram.tgnet.TLRPC$TL_messageEntityItalic] */
        /* JADX WARN: Type inference failed for: r5v14, types: [org.telegram.tgnet.TLRPC$TL_messageEntityBold] */
        /* JADX WARN: Type inference failed for: r5v9, types: [org.telegram.tgnet.TLRPC$TL_messageEntitySpoiler] */
        public boolean update() {
            String str;
            TLRPC.Message message;
            String str2;
            int i;
            TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji;
            MessageObject messageObject = this.message;
            if (messageObject == null || (message = messageObject.messageOwner) == null || (str2 = message.message) == null) {
                str = "ReplyQuote: message is null";
            } else {
                int i2 = this.end;
                if (i2 < this.start || i2 > str2.length() || this.start > this.message.messageOwner.message.length() || (i = this.start) < 0 || this.end < 0) {
                    str = "ReplyQuote: start/end are invalid (" + this.start + ", " + this.end + ", len=" + this.message.messageOwner.message.length() + ")";
                } else {
                    String str3 = this.message.messageOwner.message;
                    int max = Math.max(0, i);
                    while (max < this.end && Character.isWhitespace(str3.charAt(max))) {
                        max++;
                    }
                    int min = Math.min(this.end, str3.length());
                    while (min > max && Character.isWhitespace(str3.charAt(min - 1))) {
                        min--;
                    }
                    if (max != min) {
                        this.text = this.message.messageOwner.message.substring(max, min);
                        ArrayList arrayList = this.entities;
                        if (arrayList != null) {
                            arrayList.clear();
                        }
                        ArrayList<TLRPC.MessageEntity> arrayList2 = this.message.messageOwner.entities;
                        if (arrayList2 != null && !arrayList2.isEmpty()) {
                            for (int i3 = 0; i3 < this.message.messageOwner.entities.size(); i3++) {
                                TLRPC.MessageEntity messageEntity = this.message.messageOwner.entities.get(i3);
                                int i4 = messageEntity.offset;
                                if (AndroidUtilities.intersect1dInclusive(max, min, i4, messageEntity.length + i4)) {
                                    if (messageEntity instanceof TLRPC.TL_messageEntityBold) {
                                        tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntityBold();
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityItalic) {
                                        tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntityItalic();
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityUnderline) {
                                        tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntityUnderline();
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityStrike) {
                                        tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntityStrike();
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntitySpoiler) {
                                        tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntitySpoiler();
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityCustomEmoji) {
                                        TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji2 = new TLRPC.TL_messageEntityCustomEmoji();
                                        TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji3 = (TLRPC.TL_messageEntityCustomEmoji) messageEntity;
                                        tL_messageEntityCustomEmoji2.document_id = tL_messageEntityCustomEmoji3.document_id;
                                        tL_messageEntityCustomEmoji2.document = tL_messageEntityCustomEmoji3.document;
                                        tL_messageEntityCustomEmoji = tL_messageEntityCustomEmoji2;
                                    }
                                    int i5 = messageEntity.offset;
                                    int i6 = i5 - max;
                                    int i7 = (i5 + messageEntity.length) - max;
                                    if ((i6 >= 0 || i7 >= 0) && (i6 <= min || i7 <= min)) {
                                        tL_messageEntityCustomEmoji.offset = Math.max(0, i6);
                                        tL_messageEntityCustomEmoji.length = Math.min(i7, min - max) - tL_messageEntityCustomEmoji.offset;
                                        if (this.entities == null) {
                                            this.entities = new ArrayList();
                                        }
                                        this.entities.add(tL_messageEntityCustomEmoji);
                                    }
                                }
                            }
                        }
                        this.offset = max;
                        this.length = min - max;
                        return true;
                    }
                    str = "ReplyQuote: message is full of whitespace";
                }
            }
            FileLog.e(str);
            return false;
        }

        public boolean checkEdit(MessageObject messageObject) {
            String str;
            TLRPC.Message message;
            String str2;
            int i;
            int i2;
            if (messageObject == null || (message = messageObject.messageOwner) == null || (str2 = message.message) == null) {
                str = "ReplyQuote.checkEdit: message is null";
            } else {
                int i3 = this.end;
                if (i3 >= this.start && i3 <= str2.length() && this.start <= messageObject.messageOwner.message.length() && (i = this.start) >= 0 && (i2 = this.end) >= 0) {
                    if (TextUtils.equals(this.text, messageObject.messageOwner.message.substring(i, i2))) {
                        this.message = messageObject;
                    } else {
                        int indexOf = messageObject.messageOwner.message.indexOf(this.text);
                        this.message = messageObject;
                        if (indexOf < 0) {
                            this.start = 0;
                            this.end = messageObject.messageOwner.message.length();
                            update();
                            this.outdated = true;
                            return true;
                        }
                        this.end = (this.end - this.start) + indexOf;
                        this.start = indexOf;
                    }
                    update();
                    this.outdated = false;
                    return false;
                }
                str = "ReplyQuote.checkEdit: start/end are invalid (" + this.start + ", " + this.end + ", len=" + messageObject.messageOwner.message.length() + ")";
            }
            FileLog.e(str);
            this.outdated = false;
            return false;
        }

        public ArrayList getEntities() {
            return this.entities;
        }

        public String getText() {
            return this.text;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class SearchItemListener extends ActionBarMenuItem.ActionBarMenuItemSearchListener {
        private float searchAnimationProgress;
        private boolean whiteActionBar;

        private SearchItemListener() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchCollapse$0(ValueAnimator valueAnimator) {
            setSearchAnimationProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchExpand$1() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.searchWas = false;
            chatActivity.searchItem.getSearchField().requestFocus();
            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            ChatActivity.this.removeKeyboardPositionBeforeTransition();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchExpand$2(ValueAnimator valueAnimator) {
            setSearchAnimationProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canClearCaption() {
            return ChatActivity.this.searchingHashtag == null;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canCollapseSearch() {
            if (ChatActivity.this.hashtagHistoryView.isShowing()) {
                return true;
            }
            if (ChatActivity.this.searchingHashtag != null) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.hashtagSearchTabs != null) {
                    View currentView = chatActivity.searchViewPager.getCurrentView();
                    if (currentView instanceof ChatActivityContainer) {
                        chatActivity = ((ChatActivityContainer) currentView).chatActivity;
                    }
                    if (chatActivity.messagesSearchListContainer.getTag() == null) {
                        chatActivity.showMessagesSearchListView(true);
                        return false;
                    }
                    if (ChatActivity.this.hashtagSearchTabs.tabs.getCurrentPosition() != ChatActivity.this.defaultSearchPage) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        chatActivity2.hashtagSearchTabs.tabs.scrollToTab(chatActivity2.defaultSearchPage, ChatActivity.this.defaultSearchPage);
                        return false;
                    }
                    return true;
                }
            }
            if (ChatActivity.this.messagesSearchListContainer.getTag() != null) {
                ChatActivity.this.showMessagesSearchListView(false);
                return false;
            }
            return true;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean forceShowClear() {
            return ChatActivity.this.searchingForUser;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onCaptionCleared() {
            ChatActivity.this.createSearchContainer();
            if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null) {
                if (ChatActivity.this.searchUserButton != null) {
                    ChatActivity.this.searchUserButton.callOnClick();
                    return;
                }
                return;
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
                ChatActivity.this.searchItem.setSearchFieldText("", true);
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.searchItem.setSearchFieldHint(LocaleController.getString(chatActivity.isSupportedTags() ? R.string.SavedTagSearchHint : R.string.Search));
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
        }

        /* JADX WARN: Code restructure failed: missing block: B:37:0x0111, code lost:
            if (r9.this$0.showAudioCallAsIcon != false) goto L36;
         */
        /* JADX WARN: Code restructure failed: missing block: B:64:0x0193, code lost:
            if (r9.this$0.showAudioCallAsIcon != false) goto L36;
         */
        /* JADX WARN: Code restructure failed: missing block: B:65:0x0195, code lost:
            r0 = r9.this$0.audioCallIconItem;
         */
        /* JADX WARN: Removed duplicated region for block: B:105:0x028d  */
        /* JADX WARN: Removed duplicated region for block: B:108:0x02ff  */
        /* JADX WARN: Removed duplicated region for block: B:111:0x030f  */
        /* JADX WARN: Removed duplicated region for block: B:88:0x020a  */
        /* JADX WARN: Removed duplicated region for block: B:94:0x0237  */
        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onSearchCollapse() {
            ActionBarMenu.LazyItem lazyItem;
            TLRPC.Chat chat;
            SearchTagsList searchTagsList;
            ChatSearchTabs chatSearchTabs;
            ChatActivity.this.searching = false;
            ChatActivity.this.updatePagedownButtonVisibility(true);
            ChatActivity.this.updateSearchUpDownButtonVisibility(true);
            if (ChatActivity.this.searchCalendarButton != null) {
                ChatActivity.this.searchCalendarButton.setVisibility(0);
            }
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
            }
            ChatActivity.this.mentionContainer.setReversed(false);
            ChatActivity.this.mentionContainer.getAdapter().setSearchingMentions(false);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
            ChatActivity.this.searchingHashtag = null;
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.searchItem.setSearchFieldHint(LocaleController.getString(chatActivity.isSupportedTags() ? R.string.SavedTagSearchHint : R.string.Search));
            ChatActivity.this.searchItem.setSearchFieldCaption(null);
            AndroidUtilities.updateViewVisibilityAnimated(ChatActivity.this.avatarContainer, true, 0.95f, true);
            if (ChatActivity.this.editTextItem != null && ChatActivity.this.editTextItem.getTag() != null) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(0);
                    ChatActivity.this.checkEditTextItemMenu();
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null) {
                }
                if (ChatActivity.this.searchViewPager != null) {
                }
                if (ChatActivity.this.chatMode != 3) {
                }
                ChatActivity.this.searchItem.setVisibility(8);
                ChatActivity.this.searchItemVisible = false;
                ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
                HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearSearchResults();
                if (ChatActivity.this.messagesSearchAdapter != null) {
                }
                ChatActivity.this.removeSelectedMessageHighlight();
                ChatActivity.this.updateBottomOverlay();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchAnimationProgress, 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda2
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.SearchItemListener.this.lambda$onSearchCollapse$0(valueAnimator);
                    }
                });
                ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ofFloat.setDuration(320L);
                ofFloat.start();
                ChatActivity.this.messagesSearchListContainer.setAlpha(0.0f);
                ChatActivity.this.messagesSearchListContainer.setVisibility(8);
                ChatActivity.this.messagesSearchListContainer.setTag(null);
                ChatActivity.this.updateSearchListEmptyView();
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity2.searchingReaction = null;
                chatActivity2.updateSearchUpDownButtonVisibility(true);
                ChatActivity.this.updatePagedownButtonVisibility(true);
                searchTagsList = ChatActivity.this.actionBarSearchTags;
                if (searchTagsList != null) {
                }
                chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
                if (chatSearchTabs != null) {
                }
                ChatActivity.this.setFilterMessages(false);
                ChatActivity.this.hashtagHistoryView.show(false);
            }
            if (ChatActivity.this.chatActivityEnterView.hasText() && TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer()) && ((chat = ChatActivity.this.currentChat) == null || ChatObject.canSendPlain(chat))) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null) {
                }
            } else {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    lazyItem = ChatActivity.this.attachItem;
                }
            }
            if (ChatActivity.this.searchViewPager != null) {
                if (ChatActivity.this.hashtagSearchTabs.tabs.getCurrentPosition() != 0) {
                    ChatActivity.this.hashtagSearchTabs.tabs.scrollToTab(0, 0);
                    ChatActivity.this.requestClearSearchPages = true;
                } else {
                    ChatActivity.this.searchViewPager.clearViews();
                }
            }
            if (ChatActivity.this.chatMode != 3 || ((ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser)) || (ChatActivity.this.threadMessageObject != null && ChatActivity.this.threadMessageObject.getRepliesCount() < 10))) {
                ChatActivity.this.searchItem.setVisibility(8);
            }
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearSearchResults();
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.searchAnimationProgress, 0.0f);
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda2
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.SearchItemListener.this.lambda$onSearchCollapse$0(valueAnimator);
                }
            });
            ofFloat2.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            ofFloat2.setDuration(320L);
            ofFloat2.start();
            ChatActivity.this.messagesSearchListContainer.setAlpha(0.0f);
            ChatActivity.this.messagesSearchListContainer.setVisibility(8);
            ChatActivity.this.messagesSearchListContainer.setTag(null);
            ChatActivity.this.updateSearchListEmptyView();
            ChatActivity chatActivity22 = ChatActivity.this;
            chatActivity22.searchingReaction = null;
            chatActivity22.updateSearchUpDownButtonVisibility(true);
            ChatActivity.this.updatePagedownButtonVisibility(true);
            searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.clear();
                ChatActivity.this.actionBarSearchTags.show(false);
            }
            chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
            if (chatSearchTabs != null) {
                chatSearchTabs.show(false);
            }
            ChatActivity.this.setFilterMessages(false);
            ChatActivity.this.hashtagHistoryView.show(false);
            lazyItem.setVisibility(8);
            if (ChatActivity.this.searchViewPager != null) {
            }
            if (ChatActivity.this.chatMode != 3) {
            }
            ChatActivity.this.searchItem.setVisibility(8);
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearSearchResults();
            if (ChatActivity.this.messagesSearchAdapter != null) {
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
            ValueAnimator ofFloat22 = ValueAnimator.ofFloat(this.searchAnimationProgress, 0.0f);
            ofFloat22.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda2
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.SearchItemListener.this.lambda$onSearchCollapse$0(valueAnimator);
                }
            });
            ofFloat22.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            ofFloat22.setDuration(320L);
            ofFloat22.start();
            ChatActivity.this.messagesSearchListContainer.setAlpha(0.0f);
            ChatActivity.this.messagesSearchListContainer.setVisibility(8);
            ChatActivity.this.messagesSearchListContainer.setTag(null);
            ChatActivity.this.updateSearchListEmptyView();
            ChatActivity chatActivity222 = ChatActivity.this;
            chatActivity222.searchingReaction = null;
            chatActivity222.updateSearchUpDownButtonVisibility(true);
            ChatActivity.this.updatePagedownButtonVisibility(true);
            searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
            }
            chatSearchTabs = ChatActivity.this.hashtagSearchTabs;
            if (chatSearchTabs != null) {
            }
            ChatActivity.this.setFilterMessages(false);
            ChatActivity.this.hashtagHistoryView.show(false);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchExpand() {
            ChatSearchTabs chatSearchTabs;
            boolean z = false;
            ChatActivity.this.searching = true;
            ChatActivity.this.updatePagedownButtonVisibility(true);
            ChatActivity.this.updateSearchUpDownButtonVisibility(true);
            if ((ChatActivity.this.threadMessageId != 0 && ChatActivity.this.chatMode != 3) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.preventReopenSearchWithText) {
                    chatActivity.lambda$openSearchWithText$303(null);
                }
            }
            if (ChatActivity.this.openSearchKeyboard) {
                ChatActivity.this.saveKeyboardPositionBeforeTransition();
                ChatActivity chatActivity2 = ChatActivity.this;
                if (!chatActivity2.isInsideContainer) {
                    AndroidUtilities.requestAdjustResize(chatActivity2.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.SearchItemListener.this.lambda$onSearchExpand$1();
                    }
                }, 500L);
                ChatActivity.this.hideSendButtonHints();
            }
            this.whiteActionBar = ChatActivity.this.searchingHashtag != null || ChatActivity.this.getDialogId() == ChatActivity.this.getUserConfig().getClientUserId();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchAnimationProgress, 1.0f);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda1
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.SearchItemListener.this.lambda$onSearchExpand$2(valueAnimator);
                }
            });
            ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            ofFloat.setDuration(320L);
            ofFloat.start();
            ChatActivity chatActivity3 = ChatActivity.this;
            SearchTagsList searchTagsList = chatActivity3.actionBarSearchTags;
            if (searchTagsList != null) {
                if (!chatActivity3.isInsideContainer && searchTagsList.hasFilters() && ChatActivity.this.searchingHashtag == null) {
                    z = true;
                }
                searchTagsList.show(z);
            }
            if (ChatActivity.this.searchingHashtag == null || (chatSearchTabs = ChatActivity.this.hashtagSearchTabs) == null || chatSearchTabs.tabs.getCurrentPosition() == ChatActivity.this.defaultSearchPage) {
                return;
            }
            ChatActivity chatActivity4 = ChatActivity.this;
            chatActivity4.hashtagSearchTabs.tabs.scrollToTab(chatActivity4.defaultSearchPage, ChatActivity.this.defaultSearchPage);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchFilterCleared(FiltersView.MediaFilterData mediaFilterData) {
            super.onSearchFilterCleared(mediaFilterData);
            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.clear();
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.searchingReaction = null;
            chatActivity.updateSearchUpDownButtonVisibility(true);
            ChatActivity.this.updatePagedownButtonVisibility(true);
            ChatActivity.this.setFilterMessages(false);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchPressed(EditText editText) {
            ChatActivity chatActivity;
            String str;
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.searchWas = true;
            chatActivity2.updateSearchButtons(0, 0, -1);
            ChatActivity.this.searchingQuery = editText.getText().toString();
            if (ChatActivity.this.searchingHashtag != null) {
                if (TextUtils.isEmpty(ChatActivity.this.searchingQuery)) {
                    return;
                }
                if (ChatActivity.this.searchingHashtag.startsWith("$")) {
                    chatActivity = ChatActivity.this;
                    str = "$" + ChatActivity.this.searchingQuery;
                } else {
                    chatActivity = ChatActivity.this;
                    str = "#" + ChatActivity.this.searchingQuery;
                }
                chatActivity.searchingHashtag = str;
                ChatActivity chatActivity3 = ChatActivity.this;
                chatActivity3.searchingQuery = chatActivity3.searchingHashtag;
                ChatActivity.this.checkHashtagStories(true);
                HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).putToHistory(ChatActivity.this.searchingHashtag);
                ChatActivity.this.hashtagHistoryView.update();
                View currentView = ChatActivity.this.searchViewPager.getCurrentView();
                HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearSearchResults();
                if (currentView instanceof ChatActivityContainer) {
                    ((ChatActivityContainer) currentView).chatActivity.updateSearchingHashtag(ChatActivity.this.searchingHashtag);
                }
                ChatActivity.this.updateSearchListEmptyView();
                ChatActivity.this.hashtagSearchEmptyView.showProgress(true);
                ChatActivity.this.showMessagesSearchListView(true);
            }
            ChatActivity.this.getMediaDataController().searchMessagesInChat(ChatActivity.this.searchingQuery, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ((BaseFragment) ChatActivity.this).classGuid, 0, ChatActivity.this.threadMessageId, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages, ChatActivity.this.searchingReaction);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onTextChanged(EditText editText) {
            if (ChatActivity.this.searchingHashtag == null) {
                ChatActivity.this.showMessagesSearchListView(false);
            }
            ChatActivity.this.createSearchContainer();
            if (ChatActivity.this.searchingForUser) {
                MentionsAdapter adapter = ChatActivity.this.mentionContainer.getAdapter();
                adapter.lambda$searchUsernameOrHashtag$7("@" + editText.getText().toString(), 0, ChatActivity.this.messages, true, true);
            } else if (ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchingChatMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString(R.string.SearchFrom))) {
                ChatActivity.this.searchUserButton.callOnClick();
            }
            if (ChatActivity.this.searchingHashtag != null) {
                boolean z = editText.length() == 0;
                if (z != ChatActivity.this.hashtagHistoryView.isShowing()) {
                    ChatActivity.this.hashtagHistoryView.show(z);
                    ChatActivity.this.updateBottomOverlay();
                }
            }
        }

        public void setSearchAnimationProgress(float f) {
            this.searchAnimationProgress = f;
            if (this.whiteActionBar) {
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultIcon);
                ActionBar actionBar = ((BaseFragment) ChatActivity.this).actionBar;
                ChatActivity chatActivity = ChatActivity.this;
                int i = Theme.key_actionBarActionModeDefaultIcon;
                actionBar.setItemsColor(ColorUtils.blendARGB(themedColor, chatActivity.getThemedColor(i), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setItemsColor(ChatActivity.this.getThemedColor(i), true);
                ((BaseFragment) ChatActivity.this).actionBar.setItemsBackgroundColor(ColorUtils.blendARGB(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSelector), ChatActivity.this.getThemedColor(Theme.key_actionBarActionModeDefaultSelector), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setBackgroundColor(ColorUtils.blendARGB(ChatActivity.this.getThemedColor(Theme.key_actionBarDefault), ChatActivity.this.getThemedColor(Theme.key_actionBarActionModeDefault), this.searchAnimationProgress));
                ActionBar actionBar2 = ((BaseFragment) ChatActivity.this).actionBar;
                int i2 = Theme.key_actionBarDefaultSearch;
                actionBar2.setSearchTextColor(ColorUtils.blendARGB(Theme.getColor(i2), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlackText), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setSearchTextColor(ColorUtils.blendARGB(Theme.getColor(Theme.key_actionBarDefaultSearchPlaceholder), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteGrayText), this.searchAnimationProgress), true);
                ((BaseFragment) ChatActivity.this).actionBar.setSearchCursorColor(ColorUtils.blendARGB(Theme.getColor(i2), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueText), this.searchAnimationProgress));
                ChatActivity chatActivity2 = ChatActivity.this;
                if (!chatActivity2.isInsideContainer && chatActivity2.getParentActivity() != null) {
                    AndroidUtilities.setLightStatusBar(ChatActivity.this.getParentActivity().getWindow(), ChatActivity.this.isLightStatusBar());
                }
            }
            View view = ChatActivity.this.fragmentView;
            if (view != null) {
                view.invalidate();
            }
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean showClearForCaption() {
            return ChatActivity.this.searchingHashtag == null;
        }
    }

    /* loaded from: classes4.dex */
    public class ThemeDelegate implements Theme.ResourcesProvider, ChatActionCell.ThemeDelegate, MessagePreviewView.ResourcesDelegate {
        private SparseIntArray animatingColors;
        Theme.MessageDrawable animatingMessageDrawable;
        Theme.MessageDrawable animatingMessageMediaDrawable;
        private Drawable backgroundDrawable;
        private List cachedThemes;
        private EmojiThemes chatTheme;
        private int currentColor;
        int currentServiceColor;
        boolean drawSelectedGradient;
        boolean drawServiceGradient;
        private AnimatorSet patternAlphaAnimator;
        private ValueAnimator patternIntensityAnimator;
        private Bitmap serviceBitmap;
        private Bitmap serviceBitmapSource;
        private Canvas serviceCanvas;
        private BitmapShader serviceShader;
        private BitmapShader serviceShaderSource;
        Bitmap startServiceBitmap;
        int startServiceButtonColor;
        int startServiceColor;
        int startServiceIconColor;
        int startServiceLinkColor;
        int startServiceTextColor;
        private boolean useSourceShader;
        private TLRPC.WallPaper wallpaper;
        private final HashMap currentDrawables = new HashMap();
        private final HashMap currentPaints = new HashMap();
        private final Matrix actionMatrix = new Matrix();
        private SparseIntArray currentColors = new SparseIntArray();
        private Paint paint = new Paint();
        final Rect src = new Rect();
        final Rect dst = new Rect();
        private boolean isDark = Theme.getActiveTheme().isDark();

        ThemeDelegate() {
            if (isThemeChangeAvailable(false)) {
                this.chatTheme = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogTheme(ChatActivity.this.dialog_id);
                TLRPC.WallPaper dialogWallpaper = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogWallpaper(ChatActivity.this.dialog_id);
                this.wallpaper = dialogWallpaper;
                EmojiThemes emojiThemes = this.chatTheme;
                if (emojiThemes != null || dialogWallpaper != null) {
                    setupChatTheme(emojiThemes, dialogWallpaper, false, true);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ThemeDelegate.lambda$new$0();
                        }
                    });
                }
            }
            if (ThemeEditorView.getInstance() == null) {
                Theme.refreshThemeColors(true, true);
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ThemeDelegate.lambda$new$0();
                }
            });
        }

        static /* synthetic */ TLRPC.WallPaper access$46400(ThemeDelegate themeDelegate) {
            return themeDelegate.wallpaper;
        }

        static /* synthetic */ EmojiThemes access$47300(ThemeDelegate themeDelegate) {
            return themeDelegate.chatTheme;
        }

        private Drawable getBackgroundDrawableFromTheme(final EmojiThemes emojiThemes, int i) {
            if (emojiThemes.showAsDefaultStub) {
                Drawable drawable = Theme.createBackgroundDrawable(EmojiThemes.getDefaultThemeInfo(this.isDark), emojiThemes.getPreviewColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0), emojiThemes.getWallpaperLink(this.isDark ? 1 : 0), i, false).wallpaper;
                return new ColorDrawable(-16777216);
            }
            int color = getColor(Theme.key_chat_wallpaper);
            int color2 = getColor(Theme.key_chat_wallpaper_gradient_to1);
            int color3 = getColor(Theme.key_chat_wallpaper_gradient_to2);
            int color4 = getColor(Theme.key_chat_wallpaper_gradient_to3);
            final MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable();
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(this.isDark ? 1 : 0).settings.intensity);
            motionBackgroundDrawable.setColors(color, color2, color3, color4, 0, true);
            motionBackgroundDrawable.setPhase(i);
            final int patternColor = motionBackgroundDrawable.getPatternColor();
            final boolean z = this.isDark;
            emojiThemes.loadWallpaper(z ? 1 : 0, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda6
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.ThemeDelegate.this.lambda$getBackgroundDrawableFromTheme$7(emojiThemes, z, motionBackgroundDrawable, patternColor, (Pair) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(Throwable th) {
                    ResultCallback.-CC.$default$onError(this, th);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC.TL_error tL_error) {
                    ResultCallback.-CC.$default$onError(this, tL_error);
                }
            });
            return motionBackgroundDrawable;
        }

        private void initDrawables() {
            Drawable messageDrawable;
            int themeDrawableColorKey;
            for (Map.Entry entry : Theme.getThemeDrawablesMap().entrySet()) {
                String str = (String) entry.getKey();
                str.hashCode();
                char c = 65535;
                switch (str.hashCode()) {
                    case -2061232504:
                        if (str.equals("drawableMsgIn")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -2005320132:
                        if (str.equals("drawableMsgInMedia")) {
                            c = 1;
                            break;
                        }
                        break;
                    case -1656383241:
                        if (str.equals("drawableMsgInMediaSelected")) {
                            c = 2;
                            break;
                        }
                        break;
                    case -1451465639:
                        if (str.equals("drawableMsgOutMedia")) {
                            c = 3;
                            break;
                        }
                        break;
                    case -1084641786:
                        if (str.equals("drawableMsgOutSelected")) {
                            c = 4;
                            break;
                        }
                        break;
                    case -8170988:
                        if (str.equals("drawableMsgOutMediaSelected")) {
                            c = 5;
                            break;
                        }
                        break;
                    case 300508483:
                        if (str.equals("drawableMsgInSelected")) {
                            c = 6;
                            break;
                        }
                        break;
                    case 526307915:
                        if (str.equals("drawableMsgOut")) {
                            c = 7;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        messageDrawable = new Theme.MessageDrawable(0, false, false, this);
                        break;
                    case 1:
                        messageDrawable = new Theme.MessageDrawable(1, false, false, this);
                        break;
                    case 2:
                        messageDrawable = new Theme.MessageDrawable(1, false, true, this);
                        break;
                    case 3:
                        messageDrawable = new Theme.MessageDrawable(1, true, false, this);
                        break;
                    case 4:
                        messageDrawable = new Theme.MessageDrawable(0, true, true, this);
                        break;
                    case 5:
                        messageDrawable = new Theme.MessageDrawable(1, true, true, this);
                        break;
                    case 6:
                        messageDrawable = new Theme.MessageDrawable(0, false, true, this);
                        break;
                    case 7:
                        messageDrawable = new Theme.MessageDrawable(0, true, false, this);
                        break;
                    default:
                        Drawable.ConstantState constantState = ((Drawable) entry.getValue()).getConstantState();
                        messageDrawable = constantState != null ? constantState.newDrawable().mutate() : null;
                        if (messageDrawable != null && (themeDrawableColorKey = Theme.getThemeDrawableColorKey((String) entry.getKey())) >= 0) {
                            Theme.setDrawableColor(messageDrawable, getColor(themeDrawableColorKey));
                            break;
                        }
                        break;
                }
                if (messageDrawable != null) {
                    this.currentDrawables.put((String) entry.getKey(), messageDrawable);
                }
            }
        }

        private void initPaints() {
            Paint paint;
            for (Map.Entry entry : Theme.getThemePaintsMap().entrySet()) {
                Paint paint2 = (Paint) entry.getValue();
                if (paint2 instanceof TextPaint) {
                    paint = new TextPaint();
                    paint.setTextSize(paint2.getTextSize());
                    paint.setTypeface(paint2.getTypeface());
                } else {
                    paint = new Paint();
                }
                if ((paint2.getFlags() & 1) != 0) {
                    paint.setFlags(1);
                }
                int themePaintColorKey = Theme.getThemePaintColorKey((String) entry.getKey());
                if (themePaintColorKey >= 0 && !"paintChatActionBackgroundDarken".equals(entry.getKey())) {
                    paint.setColor(getColor(themePaintColorKey));
                }
                this.currentPaints.put((String) entry.getKey(), paint);
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:32:0x010f, code lost:
            if (android.os.Build.VERSION.SDK_INT >= 33) goto L74;
         */
        /* JADX WARN: Code restructure failed: missing block: B:35:0x017f, code lost:
            if (android.os.Build.VERSION.SDK_INT >= 33) goto L74;
         */
        /* JADX WARN: Code restructure failed: missing block: B:36:0x0181, code lost:
            r22.serviceShader.setFilterMode(2);
            r22.serviceShaderSource.setFilterMode(2);
         */
        /* JADX WARN: Code restructure failed: missing block: B:37:0x018c, code lost:
            r22.useSourceShader = true;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        private void initServiceMessageColors(Drawable drawable) {
            float f;
            float f2;
            int i;
            Drawable drawable2 = drawable;
            if (ChatActivity.this.parentThemeDelegate != null) {
                return;
            }
            int i2 = AndroidUtilities.calcDrawableColor(drawable)[0];
            int currentColor = getCurrentColor(Theme.key_chat_serviceBackground);
            int i3 = Theme.key_chat_selectedBackground;
            int currentColor2 = getCurrentColor(i3);
            if (currentColor != 0 && this.wallpaper == null) {
                i2 = currentColor;
            }
            this.currentServiceColor = i2;
            if (drawable2 instanceof ChatBackgroundDrawable) {
                ChatBackgroundDrawable chatBackgroundDrawable = (ChatBackgroundDrawable) drawable2;
                f = chatBackgroundDrawable.getDimAmount();
                drawable2 = chatBackgroundDrawable.getDrawable(false);
            } else {
                f = 0.0f;
            }
            boolean z = drawable2 instanceof MotionBackgroundDrawable;
            boolean z2 = (z || (drawable2 instanceof BitmapDrawable)) && SharedConfig.getDevicePerformanceClass() != 0;
            this.drawServiceGradient = z2;
            this.drawSelectedGradient = z2;
            if (!z2) {
                this.serviceBitmap = null;
                this.serviceShader = null;
                this.serviceBitmapSource = null;
                this.serviceCanvas = null;
                this.useSourceShader = false;
            } else if (drawable2 instanceof BitmapDrawable) {
                Bitmap bitmap = ((BitmapDrawable) drawable2).getBitmap();
                int i4 = 40;
                if (bitmap.getWidth() > bitmap.getHeight()) {
                    i = (int) ((40 / bitmap.getWidth()) * bitmap.getHeight());
                } else {
                    i4 = (int) ((40 / bitmap.getHeight()) * bitmap.getWidth());
                    i = 40;
                }
                this.serviceBitmap = Bitmap.createBitmap(i4, i, Bitmap.Config.ARGB_8888);
                this.serviceCanvas = new Canvas(this.serviceBitmap);
                this.src.set(0, 0, bitmap.getWidth(), bitmap.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(bitmap, this.src, this.dst, (Paint) null);
                Bitmap bitmap2 = this.serviceBitmap;
                Utilities.blurBitmap(bitmap2, 3, 1, bitmap2.getWidth(), this.serviceBitmap.getHeight(), this.serviceBitmap.getRowBytes());
                this.serviceCanvas.drawColor(ColorUtils.setAlphaComponent(-16777216, (int) (f * 255.0f)));
                Bitmap bitmap3 = this.serviceBitmap;
                Shader.TileMode tileMode = Shader.TileMode.CLAMP;
                this.serviceShader = new BitmapShader(bitmap3, tileMode, tileMode);
                this.serviceBitmapSource = Bitmap.createBitmap(this.serviceBitmap);
                this.serviceShaderSource = new BitmapShader(this.serviceBitmapSource, tileMode, tileMode);
            } else {
                this.serviceBitmap = Bitmap.createBitmap(60, 80, Bitmap.Config.ARGB_8888);
                this.serviceBitmapSource = ((MotionBackgroundDrawable) drawable2).getBitmap();
                this.serviceCanvas = new Canvas(this.serviceBitmap);
                this.src.set(0, 0, this.serviceBitmapSource.getWidth(), this.serviceBitmapSource.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, (Paint) null);
                this.serviceCanvas.drawColor(ColorUtils.setAlphaComponent(-16777216, (int) (f * 255.0f)));
                Bitmap bitmap4 = this.serviceBitmap;
                Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
                this.serviceShader = new BitmapShader(bitmap4, tileMode2, tileMode2);
                this.serviceShaderSource = new BitmapShader(this.serviceBitmapSource, tileMode2, tileMode2);
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            if (paint != null) {
                Paint paint4 = (Paint) this.currentPaints.get("paintChatActionBackgroundDarken");
                if (paint4 == null) {
                    HashMap hashMap = this.currentPaints;
                    Paint paint5 = new Paint(1);
                    hashMap.put("paintChatActionBackgroundDarken", paint5);
                    paint5.setColor(0);
                    paint4 = paint5;
                }
                if (this.drawServiceGradient) {
                    ColorMatrix colorMatrix = new ColorMatrix();
                    if (!z) {
                        colorMatrix.setSaturation(1.6f);
                        AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.9f : 0.84f);
                        f2 = this.isDark ? 0.04f : 0.06f;
                    } else if (((MotionBackgroundDrawable) drawable2).getIntensity() >= 0.0f) {
                        colorMatrix.setSaturation(1.6f);
                        AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.97f : 0.92f);
                        if (this.isDark) {
                            f2 = 0.12f;
                        }
                        f2 = -0.06f;
                    } else {
                        colorMatrix.setSaturation(1.1f);
                        AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.4f : 0.8f);
                        if (this.isDark) {
                            f2 = 0.08f;
                        }
                        f2 = -0.06f;
                    }
                    AndroidUtilities.adjustBrightnessColorMatrix(colorMatrix, f2);
                    paint.setAlpha(NotificationCenter.closeSearchByActiveAction);
                    paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint.setShader(this.serviceShaderSource);
                    paint.setFilterBitmap(true);
                    paint2.setAlpha(NotificationCenter.closeSearchByActiveAction);
                    ColorMatrix colorMatrix2 = new ColorMatrix(colorMatrix);
                    AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2, 0.26f);
                    AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2, 0.92f);
                    paint2.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
                    paint2.setShader(this.serviceShaderSource);
                    paint2.setFilterBitmap(true);
                    paint4.setAlpha(0);
                } else {
                    paint.setColorFilter(null);
                    paint.setShader(null);
                    paint2.setColorFilter(null);
                    paint2.setShader(null);
                    paint4.setAlpha(21);
                }
            }
            if (paint3 == null) {
                paint3 = new Paint(1);
                this.currentPaints.put("paintChatMessageBackgroundSelected", paint3);
            }
            if (!this.drawSelectedGradient) {
                if (currentColor2 == 0) {
                    currentColor2 = getColor(i3);
                }
                paint3.setColor(currentColor2);
                paint3.setColorFilter(null);
                paint3.setShader(null);
                return;
            }
            ColorMatrix colorMatrix3 = new ColorMatrix();
            AndroidUtilities.adjustSaturationColorMatrix(colorMatrix3, 2.5f);
            AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix3, 0.75f);
            paint3.setAlpha(64);
            paint3.setColorFilter(new ColorMatrixColorFilter(colorMatrix3));
            paint3.setShader(this.serviceShaderSource);
            paint3.setFilterBitmap(true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$getBackgroundDrawableFromTheme$7(EmojiThemes emojiThemes, boolean z, final MotionBackgroundDrawable motionBackgroundDrawable, int i, Pair pair) {
            if (pair == null) {
                return;
            }
            long longValue = ((Long) pair.first).longValue();
            Bitmap bitmap = (Bitmap) pair.second;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 == null || longValue != emojiThemes2.getTlTheme(this.isDark ? 1 : 0).id || bitmap == null) {
                return;
            }
            ValueAnimator valueAnimator = this.patternIntensityAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(z ? 1 : 0).settings.intensity, bitmap);
            motionBackgroundDrawable.setPatternColorFilter(i);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.patternIntensityAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda7
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.ThemeDelegate.lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable.this, valueAnimator2);
                }
            });
            this.patternIntensityAnimator.setDuration(250L);
            this.patternIntensityAnimator.start();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0() {
            NotificationCenter globalInstance = NotificationCenter.getGlobalInstance();
            int i = NotificationCenter.didSetNewTheme;
            Boolean bool = Boolean.TRUE;
            globalInstance.lambda$postNotificationNameOnUIThread$1(i, Boolean.FALSE, bool, bool);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$1(EmojiThemes emojiThemes, TLRPC.WallPaper wallPaper, boolean z) {
            setupChatTheme(emojiThemes, wallPaper, z, true);
            initServiceMessageColors(this.backgroundDrawable);
            ChatActivity.this.contentView.invalidateBackground();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$2() {
            this.animatingColors = new SparseIntArray();
            Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOut");
            this.animatingMessageDrawable = messageDrawable;
            messageDrawable.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutStart();
            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOutMedia");
            this.animatingMessageMediaDrawable = messageDrawable2;
            messageDrawable2.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutMediaStart();
            this.animatingMessageDrawable.crossfadeProgress = 0.0f;
            this.animatingMessageMediaDrawable.crossfadeProgress = 0.0f;
            ChatActivity.this.updateMessagesVisiblePart(false);
            updateServiceMessageColor(0.0f);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$3() {
            this.animatingMessageDrawable.crossfadeFromDrawable = null;
            this.animatingMessageMediaDrawable.crossfadeFromDrawable = null;
            this.animatingColors = null;
            updateServiceMessageColor(1.0f);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$4(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$5(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        private void setupChatTheme(EmojiThemes emojiThemes, TLRPC.WallPaper wallPaper, boolean z, boolean z2) {
            Theme.ThemeInfo theme;
            Theme.ThemeInfo theme2;
            if (ChatActivity.this.parentThemeDelegate != null) {
                return;
            }
            this.chatTheme = emojiThemes;
            this.wallpaper = wallPaper;
            View view = ChatActivity.this.fragmentView;
            Drawable backgroundImage = view != null ? ((SizeNotifierFrameLayout) view).getBackgroundImage() : null;
            final MotionBackgroundDrawable motionBackgroundDrawable = backgroundImage instanceof MotionBackgroundDrawable ? (MotionBackgroundDrawable) backgroundImage : null;
            int phase = motionBackgroundDrawable != null ? motionBackgroundDrawable.getPhase() : 0;
            if ((emojiThemes == null || emojiThemes.showAsDefaultStub) && wallPaper == null) {
                this.currentColor = Theme.getServiceMessageColor();
            }
            String str = "Dark Blue";
            String str2 = "Blue";
            if (emojiThemes == null && wallPaper == null) {
                this.currentColors = new SparseIntArray();
                this.currentPaints.clear();
                this.currentDrawables.clear();
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                if (cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable) {
                    ((MotionBackgroundDrawable) cachedWallpaperNonBlocking).setPhase(phase);
                }
                this.backgroundDrawable = null;
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme2 = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string = sharedPreferences.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string) != null && !Theme.getTheme(string).isDark()) {
                        str2 = string;
                    }
                    String string2 = sharedPreferences.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string2) != null && Theme.getTheme(string2).isDark()) {
                        str = string2;
                    }
                    theme2 = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme2, false, this.isDark);
                initServiceMessageColors(this.backgroundDrawable);
                return;
            }
            if (ApplicationLoader.applicationContext != null) {
                Theme.createChatResources(ApplicationLoader.applicationContext, false);
            }
            this.currentColors = emojiThemes == null ? new SparseIntArray() : emojiThemes.createColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0);
            this.backgroundDrawable = !TextUtils.isEmpty(ChatThemeController.getWallpaperEmoticon(this.wallpaper)) ? PreviewView.getBackgroundDrawable(this.backgroundDrawable, ((BaseFragment) ChatActivity.this).currentAccount, this.wallpaper, this.isDark) : wallPaper != null ? ChatBackgroundDrawable.getOrCreate(this.backgroundDrawable, wallPaper, this.isDark) : getBackgroundDrawableFromTheme(emojiThemes, phase);
            AnimatorSet animatorSet = this.patternAlphaAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            if (z) {
                this.patternAlphaAnimator = new AnimatorSet();
                if (motionBackgroundDrawable != null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda4
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$4(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat.setDuration(200L);
                    this.patternAlphaAnimator.playTogether(ofFloat);
                }
                Drawable drawable = this.backgroundDrawable;
                if (drawable instanceof MotionBackgroundDrawable) {
                    final MotionBackgroundDrawable motionBackgroundDrawable2 = (MotionBackgroundDrawable) drawable;
                    motionBackgroundDrawable2.setPatternAlpha(0.0f);
                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                    ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda5
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$5(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.3
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable2.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat2.setDuration(250L);
                    this.patternAlphaAnimator.playTogether(ofFloat2);
                }
                this.patternAlphaAnimator.start();
            }
            if (emojiThemes == null && ChatActivity.this.dialog_id >= 0) {
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences2 = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string3 = sharedPreferences2.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string3) != null && !Theme.getTheme(string3).isDark()) {
                        str2 = string3;
                    }
                    String string4 = sharedPreferences2.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string4) != null && Theme.getTheme(string4).isDark()) {
                        str = string4;
                    }
                    theme = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme, false, this.isDark);
            }
            if (z2) {
                this.currentColor = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
                initServiceMessageColors(this.backgroundDrawable);
                updateServiceMessageColor(1.0f);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void updateServiceMessageColor(float f) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            Bitmap bitmap2;
            if (this.currentPaints.isEmpty()) {
                return;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            int i = this.currentServiceColor;
            int currentColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
            int currentColor2 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor3 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor4 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
            if (f != 1.0f) {
                i = ColorUtils.blendARGB(this.startServiceColor, i, f);
                currentColor = ColorUtils.blendARGB(this.startServiceTextColor, currentColor, f);
                currentColor2 = ColorUtils.blendARGB(this.startServiceLinkColor, currentColor2, f);
                currentColor3 = ColorUtils.blendARGB(this.startServiceButtonColor, currentColor3, f);
                currentColor4 = ColorUtils.blendARGB(this.startServiceIconColor, currentColor4, f);
            }
            if (paint != null && !this.drawServiceGradient) {
                paint.setColor(i);
                paint2.setColor(i);
            }
            this.currentColor = i;
            Paint paint4 = getPaint("paintChatActionText");
            if (paint4 != null) {
                ((TextPaint) paint4).linkColor = currentColor2;
                getPaint("paintChatActionText").setColor(currentColor);
                getPaint("paintChatBotButton").setColor(currentColor3);
            }
            Theme.setDrawableColor(getDrawable("drawableMsgStickerCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerClock"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerHalfCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerPinned"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerReplies"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerViews"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableBotInline"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableBotLink"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawable_botInvite"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableCommentSticker"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableGoIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableReplyIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableShareIcon"), currentColor4);
            if (this.serviceCanvas == null || (bitmap = this.serviceBitmapSource) == null) {
                return;
            }
            if (f == 1.0f || (bitmap2 = this.startServiceBitmap) == null) {
                this.useSourceShader = true;
                this.src.set(0, 0, bitmap.getWidth(), this.serviceBitmapSource.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, (Paint) null);
                if (paint != null) {
                    paint.setShader(this.serviceShaderSource);
                    paint2.setShader(this.serviceShaderSource);
                }
                if (paint3 == null) {
                    return;
                }
                bitmapShader = this.serviceShaderSource;
            } else {
                this.useSourceShader = false;
                this.src.set(0, 0, bitmap2.getWidth(), this.startServiceBitmap.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.startServiceBitmap, this.src, this.dst, (Paint) null);
                this.paint.setAlpha((int) (f * 255.0f));
                this.src.set(0, 0, this.serviceBitmapSource.getWidth(), this.serviceBitmapSource.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, this.paint);
                if (paint != null) {
                    paint.setShader(this.serviceShader);
                    paint2.setShader(this.serviceShader);
                }
                if (paint3 == null) {
                    return;
                }
                bitmapShader = this.serviceShader;
            }
            paint3.setShader(bitmapShader);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            if (this.backgroundDrawable == null || (bitmap = this.serviceBitmap) == null || (bitmapShader = this.serviceShader) == null) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            } else if (this.useSourceShader) {
                Theme.applyServiceShaderMatrix(this.serviceBitmapSource, this.serviceShaderSource, this.actionMatrix, i, i2, f, f2);
            } else {
                Theme.applyServiceShaderMatrix(bitmap, bitmapShader, this.actionMatrix, i, i2, f, f2);
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
            ColorFilter colorFilter;
            colorFilter = Theme.chat_animatedEmojiTextColorFilter;
            return colorFilter;
        }

        public List getCachedThemes() {
            return this.cachedThemes;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public int getColor(int i) {
            int indexOfKey;
            int fallbackKey;
            SparseIntArray sparseIntArray;
            SparseIntArray sparseIntArray2 = this.animatingColors;
            if (sparseIntArray2 != null && (indexOfKey = sparseIntArray2.indexOfKey(i)) >= 0) {
                sparseIntArray = this.animatingColors;
            } else if (this.chatTheme == null) {
                return Theme.getColor(i);
            } else {
                indexOfKey = this.currentColors.indexOfKey(i);
                if (indexOfKey < 0 && ((fallbackKey = Theme.getFallbackKey(i)) < 0 || (indexOfKey = this.currentColors.indexOfKey(fallbackKey)) < 0)) {
                    return Theme.getColor(i);
                }
                sparseIntArray = this.currentColors;
            }
            return sparseIntArray.valueAt(indexOfKey);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ int getColorOrDefault(int i) {
            int color;
            color = getColor(i);
            return color;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public int getCurrentColor(int i) {
            return getCurrentColor(i, false);
        }

        public int getCurrentColor(int i, boolean z) {
            int indexOfKey;
            SparseIntArray sparseIntArray;
            SparseIntArray sparseIntArray2;
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return Theme.getColor(i);
            }
            if (z || (sparseIntArray2 = this.animatingColors) == null || (indexOfKey = sparseIntArray2.indexOfKey(i)) < 0) {
                SparseIntArray sparseIntArray3 = this.currentColors;
                if (sparseIntArray3 == null || (indexOfKey = sparseIntArray3.indexOfKey(i)) < 0) {
                    return Theme.getColor(i);
                }
                sparseIntArray = this.currentColors;
            } else {
                sparseIntArray = this.animatingColors;
            }
            return sparseIntArray.valueAt(indexOfKey);
        }

        public EmojiThemes getCurrentTheme() {
            return this.chatTheme;
        }

        public TLRPC.WallPaper getCurrentWallpaper() {
            return this.wallpaper;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Drawable getDrawable(String str) {
            if (this.currentDrawables.isEmpty()) {
                return null;
            }
            return (Drawable) this.currentDrawables.get(str);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Paint getPaint(String str) {
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return null;
            }
            return (Paint) this.currentPaints.get(str);
        }

        @Override // org.telegram.ui.Components.MessagePreviewView.ResourcesDelegate
        public Drawable getWallpaperDrawable() {
            Drawable drawable = this.backgroundDrawable;
            return drawable != null ? drawable : Theme.getCachedWallpaperNonBlocking();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public boolean hasGradientService() {
            return this.backgroundDrawable != null ? this.serviceShader != null : Theme.hasGradientService();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ boolean isDark() {
            boolean isCurrentThemeDark;
            isCurrentThemeDark = Theme.isCurrentThemeDark();
            return isCurrentThemeDark;
        }

        public boolean isThemeChangeAvailable(boolean z) {
            TLRPC.User user;
            ChatActivity chatActivity = ChatActivity.this;
            return chatActivity.currentEncryptedChat == null && !(z && (chatActivity.currentChat != null || (user = chatActivity.currentUser) == null || user.bot));
        }

        @Override // org.telegram.ui.Components.MessagePreviewView.ResourcesDelegate
        public boolean isWallpaperMotion() {
            if (this.chatTheme != null) {
                return false;
            }
            return Theme.isWallpaperMotion();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void setAnimatedColor(int i, int i2) {
            SparseIntArray sparseIntArray = this.animatingColors;
            if (sparseIntArray != null) {
                sparseIntArray.put(i, i2);
            }
        }

        public void setCachedThemes(List list) {
            this.cachedThemes = list;
        }

        public void setCurrentTheme(EmojiThemes emojiThemes, TLRPC.WallPaper wallPaper, boolean z, Boolean bool) {
            setCurrentTheme(emojiThemes, wallPaper, z, bool, false);
        }

        public void setCurrentTheme(final EmojiThemes emojiThemes, final TLRPC.WallPaper wallPaper, final boolean z, Boolean bool, boolean z2) {
            if (((BaseFragment) ChatActivity.this).parentLayout == null || ChatActivity.this.parentThemeDelegate != null) {
                return;
            }
            boolean booleanValue = bool != null ? bool.booleanValue() : this.isDark;
            String emoticon = emojiThemes != null ? emojiThemes.getEmoticon() : null;
            EmojiThemes emojiThemes2 = this.chatTheme;
            String emoticon2 = emojiThemes2 != null ? emojiThemes2.getEmoticon() : null;
            TLRPC.WallPaper wallPaper2 = this.wallpaper;
            if (!z2) {
                if (!isThemeChangeAvailable(false)) {
                    return;
                }
                if (TextUtils.equals(emoticon2, emoticon) && this.isDark == booleanValue && ChatThemeController.equals(wallPaper, wallPaper2)) {
                    return;
                }
            }
            this.isDark = booleanValue;
            Theme.ThemeInfo currentNightTheme = booleanValue ? Theme.getCurrentNightTheme() : Theme.getCurrentTheme();
            INavigationLayout.ThemeAnimationSettings themeAnimationSettings = new INavigationLayout.ThemeAnimationSettings(currentNightTheme, currentNightTheme.currentAccentId, currentNightTheme.isDark(), !z);
            if (this.chatTheme == null && this.wallpaper == null) {
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                this.drawServiceGradient = cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable;
                initServiceMessageColors(cachedWallpaperNonBlocking);
                this.startServiceTextColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceText);
                this.startServiceLinkColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceButtonColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceIconColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceIcon);
            } else {
                if (this.drawServiceGradient) {
                    Drawable drawable = this.backgroundDrawable;
                    if (drawable instanceof MotionBackgroundDrawable) {
                        this.startServiceBitmap = ((MotionBackgroundDrawable) drawable).getBitmap();
                    }
                }
                Drawable drawable2 = this.backgroundDrawable;
                if (drawable2 != null) {
                    initServiceMessageColors(drawable2);
                }
            }
            this.startServiceColor = this.currentServiceColor;
            this.startServiceTextColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
            this.startServiceLinkColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            this.startServiceButtonColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            this.startServiceIconColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
            if (emojiThemes != null || wallPaper != null) {
                this.currentColor = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
            }
            themeAnimationSettings.applyTheme = false;
            if (ChatActivity.this.dialog_id < 0) {
                themeAnimationSettings.applyTrulyTheme = false;
            }
            themeAnimationSettings.afterStartDescriptionsAddedRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$1(emojiThemes, wallPaper, z);
                }
            };
            if (z) {
                themeAnimationSettings.animationProgress = new INavigationLayout.ThemeAnimationSettings.onAnimationProgress() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.1
                    @Override // org.telegram.ui.ActionBar.INavigationLayout.ThemeAnimationSettings.onAnimationProgress
                    public void setProgress(float f) {
                        ChatActivity.this.chatListView.invalidate();
                        ThemeDelegate themeDelegate = ThemeDelegate.this;
                        themeDelegate.animatingMessageDrawable.crossfadeProgress = f;
                        themeDelegate.animatingMessageMediaDrawable.crossfadeProgress = f;
                        themeDelegate.updateServiceMessageColor(f);
                    }
                };
                themeAnimationSettings.beforeAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$2();
                    }
                };
                themeAnimationSettings.afterAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$3();
                    }
                };
            } else {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.contentView != null) {
                    chatActivity.updateBackground();
                }
                themeAnimationSettings.afterStartDescriptionsAddedRunnable.run();
            }
            themeAnimationSettings.onlyTopFragment = true;
            themeAnimationSettings.resourcesProvider = this;
            themeAnimationSettings.duration = 250L;
            ((BaseFragment) ChatActivity.this).parentLayout.animateThemedValues(themeAnimationSettings, null);
            Runnable runnable = ChatActivity.this.onThemeChange;
            if (runnable != null) {
                runnable.run();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class TrackingWidthSimpleTextView extends SimpleTextView {
        private boolean trackWidth;

        public TrackingWidthSimpleTextView(Context context) {
            super(context);
            this.trackWidth = true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.ActionBar.SimpleTextView
        public boolean createLayout(int i) {
            boolean createLayout = super.createLayout(i);
            if (this.trackWidth && getVisibility() == 0) {
                ChatActivity.this.pinnedCounterTextViewX = getTextWidth() + AndroidUtilities.dp(4.0f);
                if (ChatActivity.this.pinnedCounterTextView != null) {
                    ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                }
            }
            return createLayout;
        }

        public boolean getTrackWidth() {
            return this.trackWidth;
        }

        public void setTrackWidth(boolean z) {
            this.trackWidth = z;
        }
    }

    public ChatActivity(Bundle bundle) {
        super(bundle);
        this.shareAlertDebugMode = 0;
        this.justCreatedTopic = false;
        this.justCreatedChat = false;
        this.alreadyPlayedStickers = new HashMap();
        this.actionModeViews = new ArrayList();
        this.pinnedMessageImageView = new BackupImageView[2];
        this.pinnedNameTextView = new TrackingWidthSimpleTextView[2];
        this.pinnedMessageTextView = new SimpleTextView[2];
        this.pinnedMessageButton = new PinnedMessageButton[2];
        this.pinnedNextAnimation = new AnimatorSet[2];
        this.pinnedMessageButtonShown = false;
        this.searchContainerHeight = 51;
        this.hideDateDelay = 500;
        this.businessLink = null;
        this.scheduledMessagesCount = -1;
        this.threadMessageVisible = true;
        this.pendingSendMessagesDict = new SparseArray();
        this.pendingSendMessages = new ArrayList();
        this.animatingMessageObjects = new ArrayList();
        this.animatingDocuments = new HashMap();
        this.scrollToPositionOnRecreate = -1;
        this.scrollToOffsetOnRecreate = 0;
        this.pollsToCheck = new ArrayList(10);
        this.pinnedMessageIds = new ArrayList();
        this.pinnedMessageObjects = new HashMap();
        this.loadingPinnedMessages = new SparseArray();
        this.currentPinnedMessageIndex = new int[1];
        this.dateObjectsStableIds = new SparseIntArray();
        this.allowStickersPanel = true;
        this.allowContextBotPanelSecond = true;
        this.runningAnimationIndex = -1;
        this.paused = true;
        this.firstOpen = true;
        this.lastLoadIndex = 1;
        this.selectedMessagesIds = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.selectedMessagesCanStarIds = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.waitingForLoad = new ArrayList();
        this.needRemovePreviousSameChatActivity = true;
        this.prevSetUnreadCount = Integer.MIN_VALUE;
        this.animateSendingViews = new ArrayList();
        this.messagesDict = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.repliesMessagesDict = new SparseArray();
        this.replyMessageOwners = new SparseArray();
        this.messagesByDays = new HashMap();
        this.messagesByDaysSorted = new SparseArray();
        this.messages = new ArrayList();
        this.waitingForReplies = new SparseArray();
        this.polls = new LongSparseArray();
        this.groupedMessagesMap = new LongSparseArray();
        this.maxMessageId = new int[]{ConnectionsManager.DEFAULT_DATACENTER_ID, ConnectionsManager.DEFAULT_DATACENTER_ID};
        this.minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.minDate = new int[2];
        this.endReached = new boolean[2];
        this.cacheEndReached = new boolean[2];
        this.forwardEndReached = new boolean[]{true, true};
        this.loading = true;
        this.firstLoading = true;
        this.last_message_id = 0;
        this.messageSkeletons = new ArrayList();
        this.skeletonPaint = new Paint(1);
        this.skeletonServicePaint = new Paint(1);
        this.skeletonColorMatrix = new ColorMatrix();
        this.skeletonBackgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.skeletonBackgroundDrawable = new Theme.MessageDrawable(0, false, false, new Theme.ResourcesProvider() { // from class: org.telegram.ui.ChatActivity.1
            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
                ColorFilter colorFilter;
                colorFilter = Theme.chat_animatedEmojiTextColorFilter;
                return colorFilter;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public int getColor(int i) {
                return ChatActivity.this.getThemedColor(i);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getColorOrDefault(int i) {
                int color;
                color = getColor(i);
                return color;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getCurrentColor(int i) {
                int color;
                color = getColor(i);
                return color;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Drawable getDrawable(String str) {
                return Theme.ResourcesProvider.-CC.$default$getDrawable(this, str);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Paint getPaint(String str) {
                Paint themePaint;
                themePaint = Theme.getThemePaint(str);
                return themePaint;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ boolean hasGradientService() {
                return Theme.ResourcesProvider.-CC.$default$hasGradientService(this);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ boolean isDark() {
                boolean isCurrentThemeDark;
                isCurrentThemeDark = Theme.isCurrentThemeDark();
                return isCurrentThemeDark;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void setAnimatedColor(int i, int i2) {
                Theme.ResourcesProvider.-CC.$default$setAnimatedColor(this, i, i2);
            }
        });
        this.skeletonMatrix = new Matrix();
        this.skeletonOutlinePaint = new Paint(1);
        this.skeletonOutlineMatrix = new Matrix();
        this.skeletonOutlinePaint.setStyle(Paint.Style.STROKE);
        this.skeletonOutlinePaint.setStrokeWidth(AndroidUtilities.dp(1.0f));
        this.startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.startFromVideoTimestamp = -1;
        this.first = true;
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.highlightMessageQuoteOffset = -1;
        this.scrollToMessagePosition = -10000;
        this.botInfo = new LongSparseArray();
        this.destroyTextureViewRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda21
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$0();
            }
        };
        this.actionBarBackgroundPaint = new Paint(1);
        this.scrimPaintAlpha = 0.0f;
        this.scrimViewAlpha = 1.0f;
        this.scrimViewProgress = 0.0f;
        this.popupAnimationIndex = -1;
        this.scrimPopupWindowHideDimOnDismiss = true;
        this.updateDeleteItemRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.2
            @Override // java.lang.Runnable
            public void run() {
                if (ChatActivity.this.selectedObject == null || ChatActivity.this.menuDeleteItem == null) {
                    return;
                }
                int max = Math.max(0, ChatActivity.this.selectedObject.messageOwner.ttl_period - (ChatActivity.this.getConnectionsManager().getCurrentTime() - ChatActivity.this.selectedObject.messageOwner.date));
                ChatActivity.this.menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", R.string.AutoDeleteIn, max < 86400 ? AndroidUtilities.formatDuration(max, false) : LocaleController.formatPluralString("Days", Math.round(max / 86400.0f), new Object[0])));
                AndroidUtilities.runOnUIThread(ChatActivity.this.updateDeleteItemRunnable, 1000L);
            }
        };
        this.swipeBackEnabled = true;
        this.fragmentTransitionRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.3
            @Override // java.lang.Runnable
            public void run() {
                if (ChatActivity.this.fragmentTransition == null || ChatActivity.this.fragmentTransition.isRunning()) {
                    return;
                }
                ChatActivity.this.fragmentTransition.start();
            }
        };
        this.chatMessagesMetadataController = new ChatMessagesMetadataController(this);
        this.postponedScrollCancelListener = new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda22
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$new$1(dialogInterface);
            }
        };
        this.postponeNotificationsWhileLoadingCallback = new NotificationCenter.PostponeNotificationCallback() { // from class: org.telegram.ui.ChatActivity.4
            @Override // org.telegram.messenger.NotificationCenter.PostponeNotificationCallback
            public boolean needPostpone(int i, int i2, Object[] objArr) {
                if (i == NotificationCenter.didReceiveNewMessages) {
                    long longValue = ((Long) objArr[0]).longValue();
                    if (ChatActivity.this.firstLoading && longValue == ChatActivity.this.dialog_id) {
                        return true;
                    }
                }
                return false;
            }
        };
        this.fixedKeyboardHeight = -1;
        this.pulled = false;
        this.photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.7
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z) {
                return ChatActivity.this.getPlaceForPhoto(messageObject, fileLocation, i, z, false);
            }
        };
        this.photoViewerPaidMediaProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.8
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean forceAllInGroup() {
                return true;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z) {
                return ChatActivity.this.getPlaceForPhoto(messageObject, fileLocation, i, z, false);
            }
        };
        this.botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.9
            /* JADX WARN: Removed duplicated region for block: B:26:0x008f A[LOOP:0: B:12:0x0035->B:26:0x008f, LOOP_END] */
            /* JADX WARN: Removed duplicated region for block: B:29:0x0058 A[SYNTHETIC] */
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z) {
                MentionsContainerView mentionsContainerView;
                ImageReceiver imageReceiver;
                if (i >= 0 && i < ChatActivity.this.botContextResults.size() && (mentionsContainerView = ChatActivity.this.mentionContainer) != null && mentionsContainerView.getListView() != null) {
                    int childCount = ChatActivity.this.mentionContainer.getListView().getChildCount();
                    Object obj = ChatActivity.this.botContextResults.get(i);
                    for (int i2 = 0; i2 < childCount; i2++) {
                        View childAt = ChatActivity.this.mentionContainer.getListView().getChildAt(i2);
                        if (childAt instanceof ContextLinkCell) {
                            ContextLinkCell contextLinkCell = (ContextLinkCell) childAt;
                            if (contextLinkCell.getResult() == obj) {
                                imageReceiver = contextLinkCell.getPhotoImage();
                                if (imageReceiver == null) {
                                    int[] iArr = new int[2];
                                    childAt.getLocationInWindow(iArr);
                                    PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                                    placeProviderObject.viewX = iArr[0];
                                    placeProviderObject.viewY = iArr[1] - (Build.VERSION.SDK_INT < 21 ? AndroidUtilities.statusBarHeight : 0);
                                    placeProviderObject.parentView = ChatActivity.this.mentionContainer.getListView();
                                    placeProviderObject.imageReceiver = imageReceiver;
                                    placeProviderObject.thumb = imageReceiver.getBitmapSafe();
                                    placeProviderObject.radius = imageReceiver.getRoundRadius(true);
                                    return placeProviderObject;
                                }
                            }
                        }
                        imageReceiver = null;
                        if (imageReceiver == null) {
                        }
                    }
                }
                return null;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                if (i < 0 || i >= ChatActivity.this.botContextResults.size()) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.lambda$createView$36((TLRPC.BotInlineResult) chatActivity.botContextResults.get(i), z, i2);
            }
        };
        this.onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() { // from class: org.telegram.ui.ChatActivity.10
            /* JADX WARN: Removed duplicated region for block: B:30:0x007f  */
            /* JADX WARN: Removed duplicated region for block: B:34:0x0092  */
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public boolean onItemClick(View view, int i, float f, float f2) {
                boolean z;
                boolean z2;
                if (!ChatActivity.this.textSelectionHelper.isTryingSelect() && !ChatActivity.this.textSelectionHelper.isInSelectionMode() && !((BaseFragment) ChatActivity.this).inPreviewMode) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (!chatActivity.isInsideContainer) {
                        chatActivity.wasManualScroll = true;
                        if (view instanceof ChatActionCell) {
                            ChatActionCell chatActionCell = (ChatActionCell) view;
                            if (!(chatActionCell.getMessageObject().messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL) && chatActionCell.getMessageObject().type != 21 && !chatActionCell.getMessageObject().isWallpaperAction()) {
                                z = false;
                                if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || (ChatActivity.this.isReport() && !z)) {
                                    ChatActivity.this.processRowSelect(view, view instanceof ChatMessageCell ? !((ChatMessageCell) view).isInsideBackground(f, f2) : false, f, f2);
                                    z2 = true;
                                } else {
                                    z2 = ChatActivity.this.createMenu(view, false, true, f, f2, true);
                                }
                                if (view instanceof ChatMessageCell) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                                    if (chatMessageCell.getMessageObject() != null && chatMessageCell.getMessageObject().type != 27) {
                                        ChatActivity.this.startMultiselect(i);
                                        return true;
                                    }
                                }
                                return z2;
                            }
                        }
                        z = true;
                        if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                        }
                        ChatActivity.this.processRowSelect(view, view instanceof ChatMessageCell ? !((ChatMessageCell) view).isInsideBackground(f, f2) : false, f, f2);
                        z2 = true;
                        if (view instanceof ChatMessageCell) {
                        }
                        return z2;
                    }
                }
                return false;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onLongClickRelease() {
                RecyclerListView.OnItemLongClickListenerExtended.-CC.$default$onLongClickRelease(this);
            }

            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onMove(float f, float f2) {
                RecyclerListView.OnItemLongClickListenerExtended.-CC.$default$onMove(this, f, f2);
            }
        };
        this.onItemClickListener = new 12();
        this.chatScrollHelperCallback = new ChatScrollCallback();
        this.showScheduledOrNoSoundRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda23
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$7();
            }
        };
        this.showScheduledHintRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$8();
            }
        };
        this.filledEditTextItemMenu = false;
        this.checkTranslationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda25
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$178();
            }
        };
        this.preventReopenSearchWithText = false;
    }

    static /* synthetic */ float access$15016(ChatActivity chatActivity, float f) {
        float f2 = chatActivity.pullingDownOffset + f;
        chatActivity.pullingDownOffset = f2;
        return f2;
    }

    static /* synthetic */ int access$17716(ChatActivity chatActivity, float f) {
        int i = (int) (chatActivity.skeletonTotalTranslation + f);
        chatActivity.skeletonTotalTranslation = i;
        return i;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void access$22400(ChatActivity chatActivity) {
        chatActivity.checkBotMessageHint();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void access$22500(ChatActivity chatActivity) {
        chatActivity.checkSavedMessagesTagHint();
    }

    static /* synthetic */ int access$23110(ChatActivity chatActivity) {
        int i = chatActivity.newMentionsCount;
        chatActivity.newMentionsCount = i - 1;
        return i;
    }

    static /* synthetic */ int access$24208(ChatActivity chatActivity) {
        int i = chatActivity.lastLoadIndex;
        chatActivity.lastLoadIndex = i + 1;
        return i;
    }

    static /* synthetic */ int access$32804(ChatActivity chatActivity) {
        int i = chatActivity.pinBullerinTag + 1;
        chatActivity.pinBullerinTag = i;
        return i;
    }

    static /* synthetic */ int access$3508(ChatActivity chatActivity) {
        int i = chatActivity.scheduledMessagesCount;
        chatActivity.scheduledMessagesCount = i + 1;
        return i;
    }

    static /* synthetic */ int access$3512(ChatActivity chatActivity, int i) {
        int i2 = chatActivity.scheduledMessagesCount + i;
        chatActivity.scheduledMessagesCount = i2;
        return i2;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void access$50800(ChatActivity chatActivity) {
        chatActivity.resetProgressDialogLoading();
    }

    private void addReplyMessageOwner(MessageObject messageObject, Integer num) {
        MessageObject messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 == null) {
            return;
        }
        int id = messageObject2.getId();
        ArrayList arrayList = (ArrayList) this.replyMessageOwners.get(id);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.replyMessageOwners.put(id, arrayList);
        }
        int id2 = messageObject.getId();
        if (!arrayList.contains(Integer.valueOf(id2))) {
            arrayList.add(Integer.valueOf(id2));
        }
        if (num.intValue() != 0) {
            arrayList.remove(num);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:45:0x00a3 A[Catch: Exception -> 0x006b, TryCatch #1 {Exception -> 0x006b, blocks: (B:27:0x005e, B:29:0x0062, B:32:0x006d, B:34:0x007b, B:43:0x0097, B:45:0x00a3, B:51:0x00b4, B:46:0x00a8, B:48:0x00ac, B:42:0x0093, B:35:0x007f, B:37:0x0086), top: B:65:0x005e, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a8 A[Catch: Exception -> 0x006b, TryCatch #1 {Exception -> 0x006b, blocks: (B:27:0x005e, B:29:0x0062, B:32:0x006d, B:34:0x007b, B:43:0x0097, B:45:0x00a3, B:51:0x00b4, B:46:0x00a8, B:48:0x00ac, B:42:0x0093, B:35:0x007f, B:37:0x0086), top: B:65:0x005e, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00b4 A[Catch: Exception -> 0x006b, TRY_LEAVE, TryCatch #1 {Exception -> 0x006b, blocks: (B:27:0x005e, B:29:0x0062, B:32:0x006d, B:34:0x007b, B:43:0x0097, B:45:0x00a3, B:51:0x00b4, B:46:0x00a8, B:48:0x00ac, B:42:0x0093, B:35:0x007f, B:37:0x0086), top: B:65:0x005e, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void addSponsoredMessages(boolean z) {
        MessagesController.SponsoredMessagesInfo sponsoredMessages;
        int i;
        TLObject userOrChat;
        long j;
        if (!this.sponsoredMessagesAdded && this.chatMode == 0 && ChatObject.isChannel(this.currentChat)) {
            if (this.forwardEndReached[0]) {
                if ((getUserConfig().isPremium() && getMessagesController().isSponsoredDisabled()) || isReport() || (sponsoredMessages = getMessagesController().getSponsoredMessages(this.dialog_id)) == null || sponsoredMessages.messages == null) {
                    return;
                }
                for (int i2 = 0; i2 < sponsoredMessages.messages.size(); i2++) {
                    MessageObject messageObject = sponsoredMessages.messages.get(i2);
                    messageObject.resetLayout();
                    if (messageObject.sponsoredUrl != null) {
                        try {
                            if (this.sponsoredUrlPattern == null) {
                                this.sponsoredUrlPattern = Pattern.compile("https://t\\.me/(\\w+)(?:/(\\d+))?");
                            }
                            Matcher matcher = this.sponsoredUrlPattern.matcher(messageObject.sponsoredUrl);
                            if (matcher.matches()) {
                                String group = matcher.group(1);
                                try {
                                } catch (Exception e) {
                                    FileLog.e((Throwable) e, false);
                                }
                                if (matcher.groupCount() >= 2) {
                                    i = Integer.parseInt(matcher.group(2));
                                    userOrChat = getMessagesController().getUserOrChat(group);
                                    if (!(userOrChat instanceof TLRPC.User)) {
                                        j = ((TLRPC.User) userOrChat).id;
                                    } else if (userOrChat instanceof TLRPC.Chat) {
                                        j = -((TLRPC.Chat) userOrChat).id;
                                    }
                                    if (i < 0) {
                                        getMessagesController().ensureMessagesLoaded(j, i, null);
                                    }
                                }
                                i = 0;
                                userOrChat = getMessagesController().getUserOrChat(group);
                                if (!(userOrChat instanceof TLRPC.User)) {
                                }
                                if (i < 0) {
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e((Throwable) e2, false);
                        }
                    }
                }
                this.sponsoredMessagesAdded = true;
                Integer num = sponsoredMessages.posts_between;
                this.sponsoredMessagesPostsBetween = num != null ? num.intValue() : 0;
                ArrayList arrayList = this.notPushedSponsoredMessages;
                if (arrayList != null) {
                    arrayList.clear();
                }
                processNewMessages(sponsoredMessages.messages);
            }
        }
    }

    private void addToPolls(MessageObject messageObject, MessageObject messageObject2) {
        long pollId = messageObject.getPollId();
        if (pollId != 0) {
            ArrayList arrayList = (ArrayList) this.polls.get(pollId);
            if (arrayList == null) {
                arrayList = new ArrayList();
                this.polls.put(pollId, arrayList);
            }
            arrayList.add(messageObject);
            if (messageObject2 != null) {
                arrayList.remove(messageObject2);
            }
        }
    }

    private void addToPulledDialogs(TLRPC.Chat chat, TLRPC.TL_forumTopic tL_forumTopic, long j, int i, int i2) {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), chat, null, tL_forumTopic, j, i, i2);
    }

    private void addToPulledDialogsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), this.currentChat, this.currentUser, null, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    private void addToPulledTopicsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), this.currentChat, this.currentUser, this.forumTopic, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void addToSelectedMessages(MessageObject messageObject, boolean z) {
        addToSelectedMessages(messageObject, z, true);
    }

    /* JADX WARN: Code restructure failed: missing block: B:34:0x0088, code lost:
        if (r3 == r5) goto L39;
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x0092, code lost:
        if (r3 == (r2.messages.size() - 1)) goto L39;
     */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x0094, code lost:
        r10 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x0096, code lost:
        r10 = false;
     */
    /* JADX WARN: Removed duplicated region for block: B:223:0x03c4  */
    /* JADX WARN: Removed duplicated region for block: B:264:0x0468  */
    /* JADX WARN: Removed duplicated region for block: B:265:0x046b  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x069d  */
    /* JADX WARN: Removed duplicated region for block: B:419:0x06c4  */
    /* JADX WARN: Removed duplicated region for block: B:427:0x0750  */
    /* JADX WARN: Removed duplicated region for block: B:431:0x0764  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:451:0x0809  */
    /* JADX WARN: Removed duplicated region for block: B:485:0x0869  */
    /* JADX WARN: Removed duplicated region for block: B:487:0x086d  */
    /* JADX WARN: Removed duplicated region for block: B:541:0x00a5 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void addToSelectedMessages(MessageObject messageObject, boolean z, boolean z2) {
        ActionBarMenuItem actionBarMenuItem;
        boolean z3;
        TextView textView;
        Drawable createSelectorDrawable;
        ActionBarMenuItem actionBarMenuItem2;
        int i;
        int i2;
        int i3;
        int i4;
        ActionBarMenuItem actionBarMenuItem3;
        ActionBarMenuItem actionBarMenuItem4;
        int i5;
        boolean z4;
        ActionBarMenuItem actionBarMenuItem5;
        ActionBarMenuItem actionBarMenuItem6;
        ActionBarMenuItem actionBarMenuItem7;
        int i6;
        ActionBarMenuItem actionBarMenuItem8;
        TLRPC.Chat chat;
        int i7;
        final int i8;
        int size;
        int i9;
        int i10;
        int i11;
        int i12;
        int i13;
        int i14;
        int i15;
        TextView textView2;
        Drawable createSelectorDrawable2;
        Drawable createSelectorDrawable3;
        TLRPC.Message message;
        TLRPC.Message message2;
        boolean z5;
        int i16 = this.cantForwardMessagesCount;
        if (messageObject != null) {
            ArrayList arrayList = this.threadMessageObjects;
            if (arrayList != null && arrayList.contains(messageObject) && !isThreadChat()) {
                return;
            }
            char c = messageObject.getDialogId() == this.dialog_id ? (char) 0 : (char) 1;
            if (z && messageObject.getGroupId() != 0) {
                MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    boolean z6 = false;
                    int i17 = 0;
                    for (int i18 = 0; i18 < groupedMessages.messages.size(); i18++) {
                        if (this.selectedMessagesIds[c].indexOfKey(groupedMessages.messages.get(i18).getId()) < 0) {
                            i17 = i18;
                            z6 = true;
                        }
                    }
                    int i19 = 0;
                    while (i19 < groupedMessages.messages.size()) {
                        MessageObject messageObject2 = groupedMessages.messages.get(i19);
                        if (z6) {
                            if (this.selectedMessagesIds[c].indexOfKey(messageObject2.getId()) < 0) {
                            }
                            if (TextUtils.isEmpty(messageObject2.caption)) {
                                showTextSelectionHint(messageObject);
                            }
                            i19++;
                        }
                        addToSelectedMessages(messageObject2, false, z5);
                        if (TextUtils.isEmpty(messageObject2.caption)) {
                        }
                        i19++;
                    }
                    return;
                }
                return;
            } else if (this.selectedMessagesIds[c].indexOfKey(messageObject.getId()) >= 0) {
                this.selectedMessagesIds[c].remove(messageObject.getId());
                if (!isReport()) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((message2 = messageObject.messageOwner) == null || !message2.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].remove(messageObject.getId());
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].remove(messageObject.getId());
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount--;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount--;
                    }
                    boolean isChatNoForwards = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards) {
                        this.cantForwardMessagesCount--;
                    } else {
                        this.canForwardMessagesCount--;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards) {
                        this.canSaveMusicCount--;
                    } else if (!messageObject.isDocument() || isChatNoForwards) {
                        this.cantSaveMessagesCount--;
                    } else {
                        this.canSaveDocumentsCount--;
                    }
                }
            } else if (this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() >= 100) {
                AndroidUtilities.shakeView(this.selectedMessagesCountTextView);
                Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService("vibrator");
                if (vibrator != null) {
                    vibrator.vibrate(200L);
                    return;
                }
                return;
            } else {
                this.selectedMessagesIds[c].put(messageObject.getId(), messageObject);
                if (!isReport()) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((message = messageObject.messageOwner) == null || !message.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount++;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount++;
                    }
                    boolean isChatNoForwards2 = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards2) {
                        this.cantForwardMessagesCount++;
                    } else {
                        this.canForwardMessagesCount++;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards2) {
                        this.canSaveMusicCount++;
                    } else if (!messageObject.isDocument() || messageObject.isRoundOnce() || messageObject.isVoiceOnce() || isChatNoForwards2) {
                        this.cantSaveMessagesCount++;
                    } else {
                        this.canSaveDocumentsCount++;
                    }
                    if (z) {
                        showTextSelectionHint(messageObject);
                    }
                }
            }
        }
        AnimatorSet animatorSet = this.forwardButtonAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.forwardButtonAnimation = null;
        }
        if (z2 && this.actionBar.isActionModeShowed() && !isReport()) {
            int size2 = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
            if (size2 == 0) {
                hideActionMode();
                updatePinnedMessageView(true);
            } else {
                createActionMode();
                ActionBarMenuItem item = this.actionBar.createActionMode().getItem(25);
                ActionBarMenuItem item2 = this.actionBar.createActionMode().getItem(10);
                ActionBarMenuItem item3 = this.actionBar.createActionMode().getItem(22);
                final ActionBarMenuItem item4 = this.actionBar.createActionMode().getItem(23);
                ActionBarMenuItem item5 = this.actionBar.createActionMode().getItem(11);
                ActionBarMenuItem item6 = this.actionBar.createActionMode().getItem(12);
                ActionBarMenuItem item7 = this.actionBar.createActionMode().getItem(28);
                ActionBarMenuItem item8 = this.actionBar.createActionMode().getItem(69);
                createBottomMessagesActionButtons();
                if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
                    actionBarMenuItem = item;
                    z3 = true;
                } else {
                    actionBarMenuItem = item;
                    z3 = false;
                }
                if ((i16 != 0 || this.cantForwardMessagesCount == 0) && (i16 == 0 || this.cantForwardMessagesCount != 0)) {
                    if (item5 != null) {
                        item5.setEnabled(this.cantForwardMessagesCount == 0 || z3);
                        item5.setAlpha(this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
                        if (z3) {
                            if (this.forwardButton != null && item5.getBackground() != null) {
                                this.forwardButton.setBackground(null);
                            }
                        } else if (item5.getBackground() == null) {
                            item5.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
                        }
                    }
                    TextView textView3 = this.forwardButton;
                    if (textView3 != null) {
                        textView3.setEnabled(this.cantForwardMessagesCount == 0 || z3);
                        Drawable background = this.forwardButton.getBackground();
                        if (z3) {
                            if (background != null) {
                                textView = this.forwardButton;
                                createSelectorDrawable = null;
                                textView.setBackground(createSelectorDrawable);
                            }
                            this.forwardButton.setAlpha(this.cantForwardMessagesCount != 0 ? 1.0f : 0.5f);
                        } else {
                            if (background == null) {
                                textView = this.forwardButton;
                                createSelectorDrawable = Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3);
                                textView.setBackground(createSelectorDrawable);
                            }
                            this.forwardButton.setAlpha(this.cantForwardMessagesCount != 0 ? 1.0f : 0.5f);
                        }
                    }
                } else {
                    this.forwardButtonAnimation = new AnimatorSet();
                    ArrayList arrayList2 = new ArrayList();
                    if (item5 != null) {
                        item5.setEnabled(this.cantForwardMessagesCount == 0 || z3);
                        arrayList2.add(ObjectAnimator.ofFloat(item5, View.ALPHA, this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f));
                        if (z3 && item5.getBackground() != null) {
                            createSelectorDrawable3 = null;
                        } else if (item5.getBackground() == null) {
                            createSelectorDrawable3 = Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 5);
                        }
                        item5.setBackground(createSelectorDrawable3);
                    }
                    TextView textView4 = this.forwardButton;
                    if (textView4 != null) {
                        textView4.setEnabled(this.cantForwardMessagesCount == 0 || z3);
                        if (!z3 || this.forwardButton.getBackground() == null) {
                            if (this.forwardButton.getBackground() == null) {
                                textView2 = this.forwardButton;
                                createSelectorDrawable2 = Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3);
                            }
                            arrayList2.add(ObjectAnimator.ofFloat(this.forwardButton, View.ALPHA, this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f));
                        } else {
                            textView2 = this.forwardButton;
                            createSelectorDrawable2 = null;
                        }
                        textView2.setBackground(createSelectorDrawable2);
                        arrayList2.add(ObjectAnimator.ofFloat(this.forwardButton, View.ALPHA, this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f));
                    }
                    this.forwardButtonAnimation.playTogether(arrayList2);
                    this.forwardButtonAnimation.setDuration(100L);
                    this.forwardButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.100
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.forwardButtonAnimation = null;
                        }
                    });
                    this.forwardButtonAnimation.start();
                }
                if (actionBarMenuItem != null) {
                    int i20 = this.canSaveMusicCount;
                    if (((i20 <= 0 || this.canSaveDocumentsCount != 0) && (i20 != 0 || this.canSaveDocumentsCount <= 0)) || this.cantSaveMessagesCount != 0) {
                        actionBarMenuItem2 = actionBarMenuItem;
                        i15 = 8;
                    } else {
                        actionBarMenuItem2 = actionBarMenuItem;
                        i15 = 0;
                    }
                    actionBarMenuItem2.setVisibility(i15);
                    actionBarMenuItem2.setContentDescription(LocaleController.getString(this.canSaveMusicCount > 0 ? R.string.SaveToMusic : R.string.SaveToDownloads));
                } else {
                    actionBarMenuItem2 = actionBarMenuItem;
                }
                if (item2 != null) {
                    i2 = item2.getVisibility();
                    item2.setVisibility((z3 || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
                    i = item2.getVisibility();
                } else {
                    i = 8;
                    i2 = 8;
                }
                if (item3 != null) {
                    i4 = item3.getVisibility();
                    item3.setVisibility((getMediaDataController().canAddStickerToFavorites() && this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() == size2) ? 0 : 8);
                    i3 = item3.getVisibility();
                } else {
                    i3 = 8;
                    i4 = 8;
                }
                if (item6 != null) {
                    item6.setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
                }
                this.hasUnfavedSelected = false;
                int i21 = 0;
                while (true) {
                    if (i21 >= 2) {
                        actionBarMenuItem3 = actionBarMenuItem2;
                        actionBarMenuItem4 = item2;
                        break;
                    }
                    actionBarMenuItem4 = item2;
                    int i22 = 0;
                    while (true) {
                        if (i22 >= this.selectedMessagesCanStarIds[i21].size()) {
                            actionBarMenuItem3 = actionBarMenuItem2;
                            i14 = 1;
                            break;
                        }
                        MessageObject messageObject3 = (MessageObject) this.selectedMessagesCanStarIds[i21].valueAt(i22);
                        actionBarMenuItem3 = actionBarMenuItem2;
                        if (messageObject3 != null && !getMediaDataController().isStickerInFavorites(messageObject3.getDocument())) {
                            i14 = 1;
                            this.hasUnfavedSelected = true;
                            break;
                        }
                        i22++;
                        actionBarMenuItem2 = actionBarMenuItem3;
                    }
                    if (this.hasUnfavedSelected) {
                        break;
                    }
                    i21 += i14;
                    item2 = actionBarMenuItem4;
                    actionBarMenuItem2 = actionBarMenuItem3;
                }
                if (item3 != null) {
                    item3.setIcon(this.hasUnfavedSelected ? R.drawable.msg_fave : R.drawable.msg_unfave);
                }
                final int i23 = (this.canEditMessagesCount == 1 && size2 == 1) ? 0 : 8;
                createBottomMessagesActionButtons();
                if (this.replyButton != null) {
                    BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
                    boolean z7 = (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0 || this.bottomOverlayChatWaitsReply) && ((chat = this.currentChat) == null || ((!ChatObject.isNotInChat(chat) || isThreadChat()) && ((!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat))));
                    if (this.chatMode != 1 && z7 && (this.selectedMessagesIds[0].size() == 0 || this.selectedMessagesIds[1].size() == 0)) {
                        if (size2 != 1) {
                            int i24 = 0;
                            int i25 = 0;
                            int i26 = 2;
                            long j = 0;
                            while (true) {
                                if (i24 >= i26) {
                                    i7 = i25;
                                    actionBarMenuItem6 = item3;
                                    break;
                                }
                                int size3 = this.selectedMessagesIds[i24].size();
                                int i27 = i25;
                                int i28 = 0;
                                while (i28 < size3) {
                                    int i29 = size3;
                                    MessageObject messageObject4 = (MessageObject) this.selectedMessagesIds[i24].valueAt(i28);
                                    long groupId = messageObject4.getGroupId();
                                    if (groupId == 0 || !(j == 0 || j == groupId)) {
                                        actionBarMenuItem6 = item3;
                                    } else {
                                        actionBarMenuItem6 = item3;
                                        if (!ChatObject.isForum(this.currentChat) || canSendMessageToTopic(messageObject4)) {
                                            i28++;
                                            size3 = i29;
                                            j = groupId;
                                            item3 = actionBarMenuItem6;
                                        }
                                    }
                                    i11 = 1;
                                    i13 = 8;
                                    i12 = 8;
                                    break;
                                }
                                actionBarMenuItem6 = item3;
                                i11 = 1;
                                i12 = i27;
                                i13 = 8;
                                if (i12 == i13) {
                                    i7 = i12;
                                    break;
                                }
                                i24 += i11;
                                i25 = i12;
                                item3 = actionBarMenuItem6;
                                i26 = 2;
                            }
                        } else {
                            char c2 = 0;
                            int size4 = this.selectedMessagesIds[0].size();
                            int i30 = 0;
                            while (i30 < size4) {
                                MessageObject messageObject5 = (MessageObject) this.selectedMessagesIds[c2].valueAt(i30);
                                int i31 = size4;
                                if (!ChatObject.isForum(this.currentChat) || canSendMessageToTopic(messageObject5)) {
                                    i30++;
                                    size4 = i31;
                                    c2 = 0;
                                }
                            }
                            actionBarMenuItem6 = item3;
                            i7 = 0;
                        }
                        if (this.threadMessageObjects != null && i7 == 0) {
                            char c3 = 0;
                            size = this.selectedMessagesIds[0].size();
                            i9 = 0;
                            while (i9 < size) {
                                if (this.threadMessageObjects.contains((MessageObject) this.selectedMessagesIds[c3].valueAt(i9))) {
                                    i10 = 1;
                                    i7 = 8;
                                } else {
                                    i10 = 1;
                                }
                                i9 += i10;
                                c3 = 0;
                            }
                        }
                        i8 = i7;
                        if (this.replyButton.getVisibility() == i8) {
                            AnimatorSet animatorSet2 = this.replyButtonAnimation;
                            if (animatorSet2 != null) {
                                animatorSet2.cancel();
                            }
                            AnimatorSet animatorSet3 = new AnimatorSet();
                            this.replyButtonAnimation = animatorSet3;
                            if (i8 == 0) {
                                this.replyButton.setVisibility(i8);
                                actionBarMenuItem5 = item7;
                                actionBarMenuItem7 = item5;
                                z4 = z3;
                                this.replyButtonAnimation.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 1.0f));
                                i5 = size2;
                            } else {
                                z4 = z3;
                                actionBarMenuItem5 = item7;
                                actionBarMenuItem7 = item5;
                                i5 = size2;
                                animatorSet3.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 0.0f));
                            }
                            this.replyButtonAnimation.setDuration(100L);
                            this.replyButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.101
                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationCancel(Animator animator) {
                                    if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator)) {
                                        return;
                                    }
                                    ChatActivity.this.replyButtonAnimation = null;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator) || ChatActivity.this.replyButton == null || i8 != 8) {
                                        return;
                                    }
                                    ChatActivity.this.replyButton.setVisibility(8);
                                }
                            });
                            this.replyButtonAnimation.start();
                            if (item4 != null) {
                                if (i2 != i || i4 != i3) {
                                    i6 = 0;
                                    float f = i23 == 0 ? 1.0f : 0.0f;
                                    item4.setAlpha(f);
                                    item4.setScaleX(f);
                                    item4.setVisibility(i23);
                                } else if (item4.getVisibility() != i23) {
                                    AnimatorSet animatorSet4 = this.editButtonAnimation;
                                    if (animatorSet4 != null) {
                                        animatorSet4.cancel();
                                    }
                                    this.editButtonAnimation = new AnimatorSet();
                                    item4.setPivotX(AndroidUtilities.dp(54.0f));
                                    item4.setPivotX(AndroidUtilities.dp(54.0f));
                                    if (i23 == 0) {
                                        item4.setVisibility(i23);
                                        i6 = 0;
                                        this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 1.0f));
                                    } else {
                                        i6 = 0;
                                        this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 0.0f));
                                    }
                                    this.editButtonAnimation.setDuration(100L);
                                    this.editButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.102
                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationCancel(Animator animator) {
                                            if (ChatActivity.this.editButtonAnimation == null || !ChatActivity.this.editButtonAnimation.equals(animator)) {
                                                return;
                                            }
                                            ChatActivity.this.editButtonAnimation = null;
                                        }

                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationEnd(Animator animator) {
                                            if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(animator) && i23 == 8) {
                                                item4.setVisibility(8);
                                            }
                                        }
                                    });
                                    this.editButtonAnimation.start();
                                }
                                if (item8 != null) {
                                    boolean z8 = i5 == 1 && !z4;
                                    if (z8) {
                                        z8 = false;
                                        for (int i32 = 0; i32 < 2; i32++) {
                                            for (int i33 = 0; i33 < this.selectedMessagesIds[i32].size(); i33++) {
                                                MessageObject messageObject6 = (MessageObject) this.selectedMessagesIds[i32].valueAt(i33);
                                                if (messageObject6 != null && !messageObject6.isVoiceOnce() && !messageObject6.isRoundOnce() && !messageObject6.messageOwner.noforwards && (messageObject6.isVoice() || messageObject6.isRoundVideo())) {
                                                    z8 = true;
                                                }
                                            }
                                        }
                                    }
                                    item8.setVisibility(z8 ? 0 : 8);
                                }
                                if (actionBarMenuItem5 != null) {
                                    if (getUserConfig().isPremium()) {
                                        if (((item4 == null || item4.getVisibility() != 0) ? 0 : 1) + ((actionBarMenuItem7 == null || actionBarMenuItem7.getVisibility() != 0) ? 0 : 1) + ((actionBarMenuItem3 == null || actionBarMenuItem3.getVisibility() != 0) ? 0 : 1) + ((actionBarMenuItem4 == null || actionBarMenuItem4.getVisibility() != 0) ? 0 : 1) + ((item6 == null || item6.getVisibility() != 0) ? 0 : 1) + ((actionBarMenuItem6 == null || actionBarMenuItem6.getVisibility() != 0) ? 0 : 1) + ((item8 == null || item8.getVisibility() != 0) ? 0 : 1) < 4) {
                                            actionBarMenuItem8 = actionBarMenuItem5;
                                            actionBarMenuItem8.setVisibility(i6);
                                        }
                                    }
                                    actionBarMenuItem8 = actionBarMenuItem5;
                                    i6 = 8;
                                    actionBarMenuItem8.setVisibility(i6);
                                }
                            }
                            i6 = 0;
                            if (item8 != null) {
                            }
                            if (actionBarMenuItem5 != null) {
                            }
                        } else {
                            i5 = size2;
                            z4 = z3;
                            actionBarMenuItem5 = item7;
                        }
                    }
                    actionBarMenuItem6 = item3;
                    i7 = 8;
                    if (this.threadMessageObjects != null) {
                        char c32 = 0;
                        size = this.selectedMessagesIds[0].size();
                        i9 = 0;
                        while (i9 < size) {
                        }
                    }
                    i8 = i7;
                    if (this.replyButton.getVisibility() == i8) {
                    }
                } else {
                    i5 = size2;
                    z4 = z3;
                    actionBarMenuItem5 = item7;
                    actionBarMenuItem6 = item3;
                }
                actionBarMenuItem7 = item5;
                if (item4 != null) {
                }
                i6 = 0;
                if (item8 != null) {
                }
                if (actionBarMenuItem5 != null) {
                }
            }
        }
        updateSelectedMessageReactions();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void afterMessageSend() {
        if (this.threadMessageId == 0 || this.isTopic) {
            if (this.isTopic) {
                this.replyingMessageObject = this.threadMessageObject;
            } else {
                this.replyingMessageObject = null;
            }
            this.replyingQuote = null;
            this.chatActivityEnterView.setReplyingMessageObject(null, null);
        }
        hideFieldPanel(false);
        if (this.chatMode == 0) {
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void alertUserOpenError(MessageObject messageObject) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString(R.string.AppName));
        builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
        builder.setMessage(messageObject.type == 3 ? LocaleController.getString(R.string.NoPlayerInstalled) : LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, messageObject.getDocument().mime_type));
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void animateToNextChat() {
        ChatPullingDownDrawable chatPullingDownDrawable = this.pullingDownDrawable;
        if (chatPullingDownDrawable == null) {
            return;
        }
        if (this.isTopic) {
            if (chatPullingDownDrawable.getTopic() != null) {
                addToPulledTopicsMyself();
                addToPulledDialogs(this.currentChat, this.pullingDownDrawable.nextTopic, this.dialog_id, this.dialogFolderId, this.dialogFilterId);
                Bundle bundle = new Bundle();
                bundle.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
                bundle.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
                bundle.putBoolean("pulled", true);
                ChatActivity chatActivityForTopic = ForumUtilities.getChatActivityForTopic(this, -this.dialog_id, this.pullingDownDrawable.getTopic(), 0, bundle);
                chatActivityForTopic.setPullingDownTransition(true);
                replacingChatActivity = true;
                presentFragment(chatActivityForTopic, true);
            }
        } else if (chatPullingDownDrawable.getChatId() != 0) {
            addToPulledDialogsMyself();
            ChatPullingDownDrawable chatPullingDownDrawable2 = this.pullingDownDrawable;
            addToPulledDialogs(chatPullingDownDrawable2.nextChat, null, chatPullingDownDrawable2.nextDialogId, chatPullingDownDrawable2.dialogFolderId, chatPullingDownDrawable2.dialogFilterId);
            Bundle bundle2 = new Bundle();
            bundle2.putLong("chat_id", this.pullingDownDrawable.getChatId());
            bundle2.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
            bundle2.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
            bundle2.putBoolean("pulled", true);
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.remove("diditem" + this.pullingDownDrawable.nextDialogId).apply();
            ChatActivity chatActivity = new ChatActivity(bundle2);
            ArrayList arrayList = this.nextChannels;
            if (arrayList != null && arrayList.size() > 1) {
                ArrayList arrayList2 = this.nextChannels;
                chatActivity.setNextChannels(new ArrayList(arrayList2.subList(1, arrayList2.size())));
            }
            chatActivity.setPullingDownTransition(true);
            replacingChatActivity = true;
            presentFragment(chatActivity, true);
        }
    }

    private boolean canSendMessageToGeneralTopic() {
        if (!isForumInViewAsMessagesMode() || this.currentChat == null) {
            return false;
        }
        return canSendMessageToTopic(getMessagesController().getTopicsController().findTopic(this.currentChat.id, 1L));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean canSendMessageToTopic(MessageObject messageObject) {
        if (messageObject == null || !ChatObject.isForum(this.currentChat)) {
            return false;
        }
        return canSendMessageToTopic(getMessagesController().getTopicsController().findTopic(this.currentChat.id, MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true)));
    }

    private boolean canSendMessageToTopic(TLRPC.TL_forumTopic tL_forumTopic) {
        return tL_forumTopic != null && (!tL_forumTopic.closed || ChatObject.canManageTopic(this.currentAccount, this.currentChat, tL_forumTopic));
    }

    private void cancelSearchLinks() {
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
        }
    }

    private void checkActionBarMenu(boolean z) {
        TLRPC.User user;
        TLRPC.UserFull userFull;
        TLRPC.ChatFull chatFull;
        TLRPC.ChatFull chatFull2;
        ChatAvatarContainer chatAvatarContainer;
        int i;
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if ((encryptedChat == null || (encryptedChat instanceof TLRPC.TL_encryptedChat)) && ((this.currentChat == null || (this.chatMode == 0 && this.threadMessageId == 0 && (chatFull = this.chatInfo) != null && chatFull.ttl_period != 0)) && ((user = this.currentUser) == null || !(UserObject.isDeleted(user) || (this.currentEncryptedChat == null && ((userFull = this.userInfo) == null || userFull.ttl_period == 0)))))) {
            ActionBarMenuItem.Item item = this.timeItem2;
            if (item != null) {
                item.setVisibility(0);
            }
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (chatAvatarContainer2 != null) {
                chatAvatarContainer2.showTimeItem(z);
            }
        } else {
            ActionBarMenuItem.Item item2 = this.timeItem2;
            if (item2 != null) {
                item2.setVisibility(8);
            }
            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
            if (chatAvatarContainer3 != null) {
                chatAvatarContainer3.hideTimeItem(z);
            }
        }
        ActionBarMenuItem.Item item3 = this.viewAsTopics;
        if (item3 != null) {
            TLRPC.Chat chat = this.currentChat;
            item3.setVisibility((chat == null || !chat.forum) ? 8 : 0);
        }
        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
        boolean z2 = true;
        if (chatAvatarContainer4 != null) {
            TLRPC.Chat chat2 = this.currentChat;
            chatAvatarContainer4.setStars((chat2 == null || (chat2.flags2 & 2048) == 0) ? false : true, z);
            TLRPC.EncryptedChat encryptedChat2 = this.currentEncryptedChat;
            if (encryptedChat2 != null) {
                chatAvatarContainer = this.avatarContainer;
                i = encryptedChat2.ttl;
            } else {
                TLRPC.UserFull userFull2 = this.userInfo;
                if (userFull2 != null) {
                    chatAvatarContainer = this.avatarContainer;
                    i = userFull2.ttl_period;
                } else {
                    TLRPC.ChatFull chatFull3 = this.chatInfo;
                    if (chatFull3 != null) {
                        chatAvatarContainer = this.avatarContainer;
                        i = chatFull3.ttl_period;
                    }
                }
            }
            chatAvatarContainer.setTime(i, z);
        }
        if (this.clearHistoryItem != null && (chatFull2 = this.chatInfo) != null) {
            if (!chatFull2.can_delete_channel && ChatObject.isChannel(this.currentChat)) {
                TLRPC.Chat chat3 = this.currentChat;
                if (!chat3.megagroup || ChatObject.isPublic(chat3)) {
                    z2 = false;
                }
            }
            this.clearHistoryItem.setVisibility(z2 ? 0 : 8);
        }
        checkAndUpdateAvatar();
    }

    private void checkBotCommands() {
        TLRPC.Chat chat;
        r0 = false;
        r0 = false;
        boolean z = false;
        URLSpanBotCommand.enabled = false;
        TLRPC.User user = this.currentUser;
        if (user == null || !user.bot) {
            TLRPC.ChatFull chatFull = this.chatInfo;
            if (chatFull instanceof TLRPC.TL_chatFull) {
                for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                    TLRPC.User user2 = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i).user_id));
                    if (user2 != null && user2.bot) {
                        URLSpanBotCommand.enabled = true;
                        return;
                    }
                }
                return;
            } else if (!(chatFull instanceof TLRPC.TL_channelFull)) {
                return;
            } else {
                if (!chatFull.bot_info.isEmpty() && (chat = this.currentChat) != null && chat.megagroup) {
                    z = true;
                }
            }
        } else {
            z = !UserObject.isReplyUser(user);
        }
        URLSpanBotCommand.enabled = z;
    }

    private void checkBotKeyboard() {
        MessageObject messageObject;
        StringBuilder sb;
        long j;
        if (this.chatActivityEnterView == null || (messageObject = this.botButtons) == null || this.userBlocked) {
            return;
        }
        if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply)) {
            MessageObject messageObject2 = this.replyingMessageObject;
            if (messageObject2 != null && this.botReplyButtons == messageObject2) {
                this.botReplyButtons = null;
                hideFieldPanel(true);
            }
            this.chatActivityEnterView.setButtons(this.botButtons);
            return;
        }
        SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
        if (this.isTopic) {
            sb = new StringBuilder();
            sb.append(this.dialog_id);
            sb.append("_");
            j = getTopicId();
        } else {
            sb = new StringBuilder();
            sb.append("");
            j = this.dialog_id;
        }
        sb.append(j);
        String sb2 = sb.toString();
        if (mainSettings.getInt("answered_" + sb2, 0) != this.botButtons.getId()) {
            if (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null) {
                MessageObject messageObject3 = this.botButtons;
                this.botReplyButtons = messageObject3;
                this.chatActivityEnterView.setButtons(messageObject3);
                showFieldPanelForReply(this.botButtons);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkBotMessageHint() {
        ChatMessageCell chatMessageCell;
        MessageObject primaryMessageObject;
        TLRPC.Message message;
        if (this.botMessageHint != null) {
            return;
        }
        ChatMessageCell chatMessageCell2 = null;
        for (int childCount = this.chatListView.getChildCount() - 1; childCount >= 0; childCount--) {
            View childAt = this.chatListView.getChildAt(childCount);
            if ((childAt instanceof ChatMessageCell) && (primaryMessageObject = (chatMessageCell = (ChatMessageCell) childAt).getPrimaryMessageObject()) != null && (message = primaryMessageObject.messageOwner) != null && message.via_business_bot_id != 0) {
                chatMessageCell2 = chatMessageCell;
            }
        }
        showBotMessageHint(chatMessageCell2, false);
    }

    private void checkChecksHint() {
        if (getMessagesController().pendingSuggestions.contains("NEWCOMER_TICKS")) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda83
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.showChecksHint();
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkDispatchHideSkeletons(boolean z) {
        if (this.startMessageAppearTransitionMs == 0) {
            this.startMessageAppearTransitionMs = (!z || this.messageSkeletons.isEmpty()) ? 1L : System.currentTimeMillis();
            isSkeletonVisible();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTextItemMenu() {
        ActionBarMenu.LazyItem lazyItem;
        if (this.filledEditTextItemMenu || (lazyItem = this.editTextItem) == null) {
            return;
        }
        ActionBarMenuItem createView = lazyItem.createView();
        createView.addSubItem(57, LocaleController.getString(R.string.Spoiler));
        if (this.chatMode == 0) {
            createView.addSubItem(58, LocaleController.getString(R.string.Quote));
        }
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString(R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder.length(), 33);
        createView.addSubItem(50, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString(R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        createView.addSubItem(51, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString(R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        createView.addSubItem(52, spannableStringBuilder3);
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat == null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString(R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            createView.addSubItem(55, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString(R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            createView.addSubItem(56, spannableStringBuilder5);
        }
        createView.addSubItem(53, LocaleController.getString(R.string.CreateLink));
        createView.addSubItem(54, LocaleController.getString(R.string.Regular));
        this.filledEditTextItemMenu = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTimer() {
        MessageObject editingMessageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || (editingMessageObject = chatActivityEnterView.getEditingMessageObject()) == null || editingMessageObject.scheduled) {
            return;
        }
        TLRPC.User user = this.currentUser;
        if (user == null || !user.self) {
            int abs = editingMessageObject.canEditMessageAnytime(this.currentChat) ? 360 : (getMessagesController().maxEditTime + NotificationCenter.onReceivedChannelDifference) - Math.abs(getConnectionsManager().getCurrentTime() - editingMessageObject.messageOwner.date);
            if (abs <= 0) {
                this.chatActivityEnterView.onEditTimeExpired();
                this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired, new Object[0]));
                return;
            }
            if (abs <= 300) {
                this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, AndroidUtilities.formatShortDuration(abs)));
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda359
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.checkEditTimer();
                }
            }, 1000L);
        }
    }

    private void checkGroupCallJoin(boolean z) {
        TLRPC.ChatFull chatFull;
        String str;
        ChatObject.Call call = this.groupCall;
        if (call != null && (((str = this.voiceChatHash) != null || this.openVideoChat) && this.openAnimationEnded)) {
            VoIPHelper.startCall(this.currentChat, null, str, this.createGroupCall, Boolean.valueOf(!call.call.rtmp_stream), getParentActivity(), this, getAccountInstance());
            this.voiceChatHash = null;
            this.openVideoChat = false;
            return;
        }
        if (this.voiceChatHash != null && z && (chatFull = this.chatInfo) != null && chatFull.call == null && this.fragmentView != null && getParentActivity() != null) {
            BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString(R.string.LinkHashExpired)).show();
            this.voiceChatHash = null;
        }
        this.lastCallCheckFromServer = !this.openAnimationEnded;
    }

    private void checkGroupEmojiPackHint() {
        TLRPC.ChatFull chatFull;
        TLRPC.TL_messages_stickerSet groupStickerSetById;
        if (this.groupEmojiPackHint != null || !ChatObject.isMegagroup(this.currentChat) || (chatFull = getMessagesController().getChatFull(this.currentChat.id)) == null || chatFull.emojiset == null || this.chatActivityEnterView == null || getContext() == null || MessagesController.getGlobalMainSettings().getBoolean("groupEmojiPackHintShown", false)) {
            return;
        }
        TLRPC.StickerSet stickerSet = chatFull.emojiset;
        long j = stickerSet.thumb_document_id;
        if (j == 0 && (groupStickerSetById = getMediaDataController().getGroupStickerSetById(stickerSet)) != null && !groupStickerSetById.documents.isEmpty()) {
            j = groupStickerSetById.documents.get(0).id;
        }
        if (j == 0) {
            return;
        }
        MessagesController.getGlobalMainSettings().edit().putBoolean("groupEmojiPackHintShown", true).apply();
        HintView2 hintView2 = new HintView2(getContext(), 3);
        this.groupEmojiPackHint = hintView2;
        hintView2.setCloseButton(true);
        this.groupEmojiPackHint.setMultilineText(true);
        this.groupEmojiPackHint.setTextAlign(Layout.Alignment.ALIGN_CENTER);
        this.groupEmojiPackHint.setRounding(12.0f);
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder("d");
        spannableStringBuilder.setSpan(new AnimatedEmojiSpan(j, this.groupEmojiPackHint.getTextPaint().getFontMetricsInt()), 0, spannableStringBuilder.length(), 33);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(chatFull.emojiset.title);
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 34);
        spannableStringBuilder.append((CharSequence) " ");
        spannableStringBuilder.append((CharSequence) spannableStringBuilder2);
        this.groupEmojiPackHint.setText(AndroidUtilities.replaceCharSequence("%s", LocaleController.getString(R.string.GroupEmojiPackHint), spannableStringBuilder));
        HintView2 hintView22 = this.groupEmojiPackHint;
        hintView22.setMaxWidthPx(HintView2.cutInFancyHalf(hintView22.getText(), this.groupEmojiPackHint.getTextPaint()));
        this.groupEmojiPackHint.setDuration(-1L);
        this.groupEmojiPackHint.setPadding(AndroidUtilities.dp(6.0f), 0, AndroidUtilities.dp(6.0f), 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkGroupEmojiPackHint$188();
            }
        }, 300L);
    }

    private void checkGroupMessagesOrder() {
        int i;
        if (this.reversed) {
            int i2 = -1;
            long j = 0;
            for (int i3 = 0; i3 < this.messages.size(); i3++) {
                long groupIdForUse = ((MessageObject) this.messages.get(i3)).getGroupIdForUse();
                if (j != groupIdForUse) {
                    if (i2 >= 0 && j != 0 && (i = i3 - i2) > 1) {
                        ArrayList arrayList = new ArrayList();
                        for (int i4 = 0; i4 < i; i4++) {
                            arrayList.add((MessageObject) this.messages.remove(i2));
                        }
                        Collections.sort(arrayList, new Comparator() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda171
                            @Override // java.util.Comparator
                            public final int compare(Object obj, Object obj2) {
                                int lambda$checkGroupMessagesOrder$340;
                                lambda$checkGroupMessagesOrder$340 = ChatActivity.lambda$checkGroupMessagesOrder$340((MessageObject) obj, (MessageObject) obj2);
                                return lambda$checkGroupMessagesOrder$340;
                            }
                        });
                        this.messages.addAll(i2, arrayList);
                    }
                    i2 = i3;
                    j = groupIdForUse;
                }
            }
            if (i2 < 0 || j == 0 || this.messages.size() - i2 <= 1) {
                return;
            }
            int size = this.messages.size() - i2;
            ArrayList arrayList2 = new ArrayList();
            for (int i5 = 0; i5 < size; i5++) {
                arrayList2.add((MessageObject) this.messages.remove(i2));
            }
            this.messages.addAll(i2, arrayList2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkHashtagStories(boolean z) {
        MessagesSearchAdapter messagesSearchAdapter;
        if (this.searchType == 2 && (messagesSearchAdapter = this.messagesSearchAdapter) != null) {
            messagesSearchAdapter.searchStories(this.searchingHashtag, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkInstantCameraView() {
        if (this.instantCameraView != null || getContext() == null) {
            return;
        }
        InstantCameraView instantCameraView = new InstantCameraView(getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.64
            @Override // org.telegram.ui.Components.InstantCameraView
            protected void clipBlur(Canvas canvas) {
                canvas.clipRect(0, 0, getWidth(), getHeight() - AndroidUtilities.dp(1.5f));
            }
        };
        this.instantCameraView = instantCameraView;
        this.contentView.addView(instantCameraView, 21, LayoutHelper.createFrame(-1, -1, 51));
    }

    private void checkInstantSearch() {
        TLRPC.Chat chat;
        long j = getArguments().getInt("search_from_user_id", 0);
        if (j != 0) {
            TLRPC.User user = getMessagesController().getUser(Long.valueOf(j));
            if (user != null) {
                lambda$openSearchWithText$303("");
                ImageView imageView = this.searchUserButton;
                if (imageView != null) {
                    imageView.callOnClick();
                }
                searchUserMessages(user, null);
                return;
            }
            return;
        }
        long j2 = getArguments().getInt("search_from_chat_id", 0);
        if (j2 == 0 || (chat = getMessagesController().getChat(Long.valueOf(j2))) == null) {
            return;
        }
        lambda$openSearchWithText$303("");
        ImageView imageView2 = this.searchUserButton;
        if (imageView2 != null) {
            imageView2.callOnClick();
        }
        searchUserMessages(null, chat);
    }

    private void checkLeaveChannelButton() {
        ActionBarMenuItem actionBarMenuItem;
        int i;
        int i2;
        ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
        if (actionBarMenuItem2 == null || this.chatMode == 3 || actionBarMenuItem2.hasSubItem(16) || this.isTopic) {
            return;
        }
        if (ChatObject.isChannel(this.currentChat)) {
            TLRPC.Chat chat = this.currentChat;
            if (!chat.creator) {
                if (ChatObject.isNotInChat(chat)) {
                    return;
                }
                if (this.currentChat.megagroup) {
                    actionBarMenuItem = this.headerItem;
                    i = R.drawable.msg_leave;
                    i2 = R.string.LeaveMegaMenu;
                } else {
                    actionBarMenuItem = this.headerItem;
                    i = R.drawable.msg_leave;
                    i2 = R.string.LeaveChannelMenu;
                }
                actionBarMenuItem.lazilyAddSubItem(16, i, LocaleController.getString(i2));
            }
        }
        if (ChatObject.isChannel(this.currentChat)) {
            return;
        }
        if (this.currentChat != null) {
            actionBarMenuItem = this.headerItem;
            i = R.drawable.msg_leave;
            i2 = R.string.DeleteAndExit;
        } else {
            TLRPC.User user = this.currentUser;
            if (user != null && user.bot) {
                ActionBarMenuItem.Item lazilyAddSubItem = this.headerItem.lazilyAddSubItem(16, R.drawable.msg_block2, LocaleController.getString(R.string.DeleteAndBlock));
                int i3 = Theme.key_text_RedRegular;
                lazilyAddSubItem.setColors(getThemedColor(i3), getThemedColor(i3));
                return;
            }
            actionBarMenuItem = this.headerItem;
            i = R.drawable.msg_delete;
            i2 = R.string.DeleteChatUser;
        }
        actionBarMenuItem.lazilyAddSubItem(16, i, LocaleController.getString(i2));
    }

    private void checkListViewPaddings() {
        MessageObject messageObject;
        if (this.wasManualScroll || (messageObject = this.unreadMessageObject) == null) {
            if (this.checkPaddingsRunnable != null) {
                return;
            }
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda227
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$checkListViewPaddings$210();
                }
            };
            this.checkPaddingsRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable);
        } else if (this.messages.indexOf(messageObject) >= 0) {
            this.fixPaddingsInLayout = true;
            View view = this.fragmentView;
            if (view != null) {
                view.requestLayout();
            }
        }
    }

    private void checkNewMessagesOnQuoteEdit(boolean z) {
        if (this.replyingMessageObject == null) {
            return;
        }
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = (MessageObject) this.messages.get(i);
            if (messageObject != null && messageObject.getId() == this.replyingMessageObject.getId() && messageObject.getDialogId() == this.replyingMessageObject.getDialogId()) {
                this.replyingMessageObject = messageObject;
                ReplyQuote replyQuote = this.replyingQuote;
                if (replyQuote != null) {
                    replyQuote.checkEdit(messageObject);
                }
                if (z) {
                    MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                    if (messagePreviewParams != null) {
                        MessageObject messageObject2 = this.replyingMessageObject;
                        MessageObject.GroupedMessages groupedMessages = this.replyingQuoteGroup;
                        if (groupedMessages == null) {
                            groupedMessages = getGroup(messageObject2.getGroupId());
                        }
                        messagePreviewParams.updateReply(messageObject2, groupedMessages, this.dialog_id, this.replyingQuote);
                    }
                    fallbackFieldPanel();
                    return;
                }
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkRaiseSensors() {
        TLRPC.Chat chat;
        BlurredFrameLayout blurredFrameLayout;
        FrameLayout frameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        MediaController mediaController;
        boolean z;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if ((chatActivityEnterView == null || !chatActivityEnterView.isStickersExpanded()) && (((chat = this.currentChat) == null || ChatObject.canSendVoice(chat)) && !ApplicationLoader.mainInterfacePaused && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && (((frameLayout = this.bottomOverlay) == null || frameLayout.getVisibility() != 0) && ((blurredFrameLayout2 = this.searchContainer) == null || blurredFrameLayout2.getVisibility() != 0))))) {
            mediaController = MediaController.getInstance();
            z = true;
        } else {
            mediaController = MediaController.getInstance();
            z = false;
        }
        mediaController.setAllowStartRecord(z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkSavedMessagesHint() {
        SharedPreferences.Editor edit;
        if (this.checkedSavedMessagesHint) {
            return;
        }
        this.checkedSavedMessagesHint = true;
        if (this.savedMessagesHintShown || this.chatMode != 0 || getMessagesController().getSavedMessagesController().unsupported || getMessagesController().getSavedMessagesController().getAllCount() <= 2) {
            return;
        }
        if (this.savedMessagesHint != null && MessagesController.getGlobalMainSettings().getInt("savedhint", 0) < 1) {
            this.savedMessagesHint.show();
            this.savedMessagesHintShown = true;
            edit = MessagesController.getGlobalMainSettings().edit().putInt("savedhint", MessagesController.getGlobalMainSettings().getInt("savedhint", 0) + 1);
        } else if (this.savedMessagesSearchHint == null || MessagesController.getGlobalMainSettings().getInt("savedsearchhint", 0) >= 1) {
            checkSavedMessagesTagHint();
            return;
        } else {
            this.savedMessagesSearchHint.show();
            this.savedMessagesHintShown = true;
            edit = MessagesController.getGlobalMainSettings().edit();
        }
        edit.putInt("savedsearchhint", MessagesController.getGlobalMainSettings().getInt("savedsearchhint", 0) + 1).apply();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkSavedMessagesTagHint() {
        ChatMessageCell chatMessageCell;
        HintView2 hintView2;
        HintView2 hintView22 = this.savedMessagesTagHint;
        if (hintView22 == null || hintView22.shown() || this.savedMessagesTagHintShown || !this.checkedSavedMessagesHint || this.savedMessagesTagHint == null) {
            return;
        }
        FrameLayout frameLayout = this.messagesSearchListContainer;
        if ((frameLayout == null || frameLayout.getTag() == null) && System.currentTimeMillis() - this.lastScrollTime > 1800 && MessagesController.getGlobalMainSettings().getInt("savedsearchtaghint", 0) < 1) {
            int[] iArr = new int[2];
            int childCount = this.chatListView.getChildCount() - 1;
            while (true) {
                if (childCount < 0) {
                    chatMessageCell = null;
                    break;
                }
                View childAt = this.chatListView.getChildAt(childCount);
                if (childAt instanceof ChatMessageCell) {
                    chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.areTags() && !chatMessageCell.reactionsLayoutInBubble.reactionButtons.isEmpty()) {
                        chatMessageCell.getLocationInWindow(iArr);
                        float f = iArr[1] + chatMessageCell.reactionsLayoutInBubble.y;
                        if (f >= AndroidUtilities.dp(240.0f) && f <= (AndroidUtilities.displaySize.y - AndroidUtilities.dp(25.0f)) - AndroidUtilities.navigationBarHeight) {
                            break;
                        }
                    }
                }
                childCount--;
            }
            if (chatMessageCell == null) {
                AndroidUtilities.cancelRunOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.checkSavedMessagesTagHint();
                    }
                });
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.checkSavedMessagesTagHint();
                    }
                }, 2000L);
                return;
            }
            this.savedMessagesTagHintShown = true;
            chatMessageCell.getLocationInWindow(iArr);
            this.savedMessagesTagHint.setTranslationY(((iArr[1] - hintView2.getTop()) - AndroidUtilities.dp(120.0f)) + chatMessageCell.reactionsLayoutInBubble.y);
            this.savedMessagesTagHint.setJointPx(0.0f, (-AndroidUtilities.dp(16.0f)) + iArr[0] + chatMessageCell.reactionsLayoutInBubble.x + (((ReactionsLayoutInBubble.ReactionButton) chatMessageCell.reactionsLayoutInBubble.reactionButtons.get(0)).width / 2.0f));
            this.savedMessagesTagHint.show();
            MessagesController.getGlobalMainSettings().edit().putInt("savedsearchtaghint", 1).apply();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkScrollForLoad(boolean z) {
        if (this.chatLayoutManager == null || this.paused || this.chatAdapter.isFrozen || this.waitingForGetDifference) {
            return;
        }
        int i = -1;
        final int i2 = -1;
        final int i3 = 0;
        for (int i4 = 0; i4 < this.chatListView.getChildCount(); i4++) {
            RecyclerListView recyclerListView = this.chatListView;
            int childAdapterPosition = recyclerListView.getChildAdapterPosition(recyclerListView.getChildAt(i4));
            if (childAdapterPosition != -1) {
                if (i2 == -1 || childAdapterPosition < i2) {
                    i2 = childAdapterPosition;
                }
                if (i == -1 || childAdapterPosition > i) {
                    i = childAdapterPosition;
                }
                i3++;
            }
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter.isFiltered) {
            if (chatActivityAdapter.loadingUpRow < 0 || i2 < 0 || this.chatAdapter.loadingUpRow < i2 || this.chatAdapter.loadingUpRow > i) {
                return;
            }
            getMediaDataController().loadMoreSearchMessages(false);
            return;
        }
        final int itemCount = chatActivityAdapter.getItemCount();
        final int i5 = z ? 25 : 5;
        if (this.chatMode != 7) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda71
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$checkScrollForLoad$111(itemCount, i2, i3, i5);
                }
            });
        } else if ((itemCount - i2) - i3 <= i5 && !this.loading && !this.endReached[0]) {
            this.loading = true;
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            HashtagSearchController hashtagSearchController = HashtagSearchController.getInstance(this.currentAccount);
            String str = this.searchingHashtag;
            int i6 = this.classGuid;
            int i7 = this.searchType;
            int i8 = this.lastLoadIndex;
            this.lastLoadIndex = i8 + 1;
            hashtagSearchController.searchHashtag(str, i6, i7, i8);
        }
    }

    private void checkSecretMessageForLocation(MessageObject messageObject) {
        if (messageObject.type != 4 || this.locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
            return;
        }
        this.locationAlertShown = true;
        AlertsCreator.showSecretLocationAlert(getParentActivity(), this.currentAccount, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkSecretMessageForLocation$179();
            }
        }, true, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkShowBlur(boolean z) {
        MessagePreviewView messagePreviewView;
        BluredView bluredView;
        BluredView bluredView2;
        INavigationLayout iNavigationLayout = this.parentLayout;
        boolean z2 = !(iNavigationLayout == null || !iNavigationLayout.isInPreviewMode() || this.parentLayout.hasIntegratedBlurInPreview() || this.inPreviewMode) || ((messagePreviewView = this.forwardingPreviewView) != null && messagePreviewView.isShowing());
        if (!z2 || ((bluredView2 = this.blurredView) != null && bluredView2.getTag() != null)) {
            if (z2 || (bluredView = this.blurredView) == null || bluredView.getTag() == null) {
                return;
            }
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().setListener(new HideViewAfterAnimation(this.blurredView)).alpha(0.0f).start();
            this.blurredView.setTag(null);
            this.chatListView.invalidate();
            View view = this.fragmentView;
            if (view != null) {
                view.invalidate();
                return;
            }
            return;
        }
        BluredView bluredView3 = this.blurredView;
        if (bluredView3 == null) {
            BluredView bluredView4 = new BluredView(this.fragmentView.getContext(), this.fragmentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.75
                @Override // android.view.View
                public void setAlpha(float f) {
                    super.setAlpha(f);
                    View view2 = ChatActivity.this.fragmentView;
                    if (view2 != null) {
                        view2.invalidate();
                    }
                }

                @Override // android.view.View
                public void setVisibility(int i) {
                    super.setVisibility(i);
                    View view2 = ChatActivity.this.fragmentView;
                    if (view2 != null) {
                        view2.invalidate();
                    }
                }
            };
            this.blurredView = bluredView4;
            this.contentView.addView(bluredView4, LayoutHelper.createFrame(-1, -1.0f));
        } else {
            if (this.contentView.indexOfChild(bluredView3) != this.contentView.getChildCount() - 1) {
                this.contentView.removeView(this.blurredView);
                this.contentView.addView(this.blurredView);
            }
            this.blurredView.update();
            this.blurredView.setVisibility(0);
        }
        this.blurredView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda79
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$checkShowBlur$101(view2);
            }
        });
        this.blurredView.setAlpha(0.0f);
        this.blurredView.animate().setListener(null).cancel();
        this.blurredView.animate().alpha(1.0f).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.76
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.fragmentView == null || chatActivity.chatListView == null) {
                    return;
                }
                ChatActivity.this.chatListView.invalidate();
                ChatActivity.this.fragmentView.invalidate();
            }
        }).start();
        this.blurredView.setTag(1);
    }

    private void checkThemeEmoticonOrWallpaper() {
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkThemeEmoticonOrWallpaper$332();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTopUndoView() {
        if (this.topUndoView != null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.70
            @Override // org.telegram.ui.Components.UndoView
            public void didPressUrl(CharacterStyle characterStyle) {
                ChatActivity.this.didPressMessageUrl(characterStyle, false, null, null);
            }

            @Override // org.telegram.ui.Components.UndoView
            public void showWithAction(long j, int i, Object obj, Object obj2, Runnable runnable, Runnable runnable2) {
                setAdditionalTranslationY((ChatActivity.this.fragmentContextView == null || !ChatActivity.this.fragmentContextView.isCallTypeVisible()) ? 0.0f : AndroidUtilities.dp(ChatActivity.this.fragmentContextView.getStyleHeight()));
                super.showWithAction(j, i, obj, obj2, runnable, runnable2);
            }
        };
        this.topUndoView = undoView;
        this.contentView.addView(undoView, 17, LayoutHelper.createFrame(-1, -2.0f, 51, 8.0f, 8.0f, 8.0f, 0.0f));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTranslation(boolean z) {
        if (System.currentTimeMillis() - this.lastTranslationCheck > 1000) {
            z = true;
        }
        AndroidUtilities.cancelRunOnUIThread(this.checkTranslationRunnable);
        AndroidUtilities.runOnUIThread(this.checkTranslationRunnable, z ? 0L : 150L);
    }

    private void checkWaitingForReplies() {
        TLRPC.MessageFwdHeader messageFwdHeader;
        int i;
        MessageObject messageObject;
        TLRPC.MessageReplies messageReplies;
        int indexOf;
        if (this.waitingForReplies.size() == 0) {
            return;
        }
        int size = this.waitingForReplies.size();
        ArrayList arrayList = null;
        LongSparseArray longSparseArray = null;
        ArrayList arrayList2 = null;
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject messageObject2 = (MessageObject) this.waitingForReplies.valueAt(i2);
            if (messageObject2.replyMessageObject != null) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(Integer.valueOf(this.waitingForReplies.keyAt(i2)));
                if (!(messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) && (messageFwdHeader = messageObject2.replyMessageObject.messageOwner.fwd_from) != null && MessageObject.getPeerId(messageFwdHeader.saved_from_peer) == this.dialog_id && (i = messageObject2.replyMessageObject.messageOwner.fwd_from.channel_post) != 0 && (messageObject = (MessageObject) this.messagesDict[0].get(i)) != null && (messageReplies = messageObject.messageOwner.replies) != null) {
                    messageReplies.replies++;
                    messageObject.animateComments = true;
                    TLRPC.Message message = messageObject2.messageOwner;
                    TLRPC.Peer peer = message.from_id;
                    if (peer == null) {
                        peer = message.peer_id;
                    }
                    int size2 = messageReplies.recent_repliers.size();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= size2) {
                            break;
                        } else if (MessageObject.getPeerId(messageObject.messageOwner.replies.recent_repliers.get(i3)) == MessageObject.getPeerId(peer)) {
                            messageObject.messageOwner.replies.recent_repliers.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                    messageObject.messageOwner.replies.recent_repliers.add(0, peer);
                    if (!messageObject2.isOut()) {
                        messageObject.messageOwner.replies.max_id = messageObject2.getId();
                    }
                    MessagesStorage messagesStorage = getMessagesStorage();
                    long j = this.currentChat.id;
                    int id = messageObject.getId();
                    TLRPC.MessageReplies messageReplies2 = messageObject.messageOwner.replies;
                    messagesStorage.updateRepliesCount(j, id, messageReplies2.recent_repliers, messageReplies2.max_id, 1);
                    if (messageObject.hasValidGroupId()) {
                        MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            int size3 = groupedMessages.messages.size();
                            for (int i4 = 0; i4 < size3; i4++) {
                                groupedMessages.messages.get(i4).animateComments = true;
                            }
                        }
                    } else if (this.chatAdapter != null && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                        }
                        arrayList2.add(Integer.valueOf(indexOf + this.chatAdapter.messagesStartRow));
                    }
                }
            }
        }
        if (arrayList != null) {
            int size4 = arrayList.size();
            for (int i5 = 0; i5 < size4; i5++) {
                this.waitingForReplies.remove(((Integer) arrayList.get(i5)).intValue());
            }
        }
        if (this.chatAdapter != null) {
            if (longSparseArray != null) {
                int size5 = longSparseArray.size();
                for (int i6 = 0; i6 < size5; i6++) {
                    MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i6);
                    ArrayList<MessageObject> arrayList3 = groupedMessages2.messages;
                    int indexOf2 = this.messages.indexOf(arrayList3.get(arrayList3.size() - 1));
                    if (indexOf2 >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        if (!chatActivityAdapter.isFiltered) {
                            chatActivityAdapter.notifyItemRangeChanged(indexOf2 + chatActivityAdapter.messagesStartRow, groupedMessages2.messages.size());
                        }
                    }
                }
            }
            if (arrayList2 == null || this.chatAdapter.isFiltered) {
                return;
            }
            int size6 = arrayList2.size();
            for (int i7 = 0; i7 < size6; i7++) {
                this.chatAdapter.notifyItemChanged(((Integer) arrayList2.get(i7)).intValue());
            }
        }
    }

    private void clearChatData(boolean z) {
        this.messages.clear();
        this.messagesByDays.clear();
        this.messagesByDaysSorted.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            showProgressView(chatActivityAdapter.botInfoRow < 0);
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        for (int i = 0; i < 2; i++) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.endReached[i] = false;
            this.cacheEndReached[i] = false;
            this.forwardEndReached[i] = true;
        }
        if (z) {
            this.first = true;
            this.firstLoading = true;
            this.loading = true;
            this.loadingForward = false;
        }
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.showScrollToMessageError = false;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 == null || chatActivityAdapter2.isFiltered) {
            return;
        }
        chatActivityAdapter2.notifyDataSetChanged(false);
    }

    private void clearHistory(boolean z, TLRPC.TL_updates_channelDifferenceTooLong tL_updates_channelDifferenceTooLong) {
        TLRPC.User user;
        if (!z) {
            this.messages.clear();
            this.waitingForLoad.clear();
            this.messagesByDays.clear();
            this.messagesByDaysSorted.clear();
            this.groupedMessagesMap.clear();
            this.threadMessageAdded = false;
            for (int i = 1; i >= 0; i--) {
                this.messagesDict[i].clear();
                if (this.currentEncryptedChat == null) {
                    this.maxMessageId[i] = Integer.MAX_VALUE;
                    this.minMessageId[i] = Integer.MIN_VALUE;
                } else {
                    this.maxMessageId[i] = Integer.MIN_VALUE;
                    this.minMessageId[i] = Integer.MAX_VALUE;
                }
                this.maxDate[i] = Integer.MIN_VALUE;
                this.minDate[i] = 0;
                this.selectedMessagesIds[i].clear();
                this.selectedMessagesCanCopyIds[i].clear();
                this.selectedMessagesCanStarIds[i].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            if (this.botButtons != null) {
                this.botButtons = null;
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.setButtons(null, false);
                }
            }
            if (this.progressView != null) {
                showProgressView(false);
                createEmptyView(false);
                this.chatListView.setEmptyView(this.emptyViewContainer);
            }
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
            if (this.currentEncryptedChat == null && (user = this.currentUser) != null && user.bot && this.botUser == null) {
                this.botUser = "";
                updateBottomOverlay();
                return;
            }
            return;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("clear history by overwrite firstLoading=" + this.firstLoading + " minMessage=" + this.minMessageId[0] + " topMessage=" + tL_updates_channelDifferenceTooLong.dialog.top_message);
        }
        TLRPC.Dialog dialog = tL_updates_channelDifferenceTooLong.dialog;
        int i2 = dialog.top_message;
        int i3 = this.minMessageId[0];
        if (i2 > i3) {
            this.createUnreadMessageAfterId = Math.max(i3 + 1, dialog.read_inbox_max_id);
        }
        this.forwardEndReached[0] = false;
        this.hideForwardEndReached = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null && chatActivityAdapter2.loadingDownRow < 0) {
            this.chatAdapter.notifyItemInserted(0);
        }
        TLRPC.Dialog dialog2 = tL_updates_channelDifferenceTooLong.dialog;
        int i4 = dialog2.unread_count;
        this.newUnreadMessageCount = i4;
        this.newMentionsCount = dialog2.unread_mentions_count;
        if (this.prevSetUnreadCount != i4) {
            CounterView counterView = this.pagedownButtonCounter;
            if (counterView != null) {
                counterView.setCount(i4, this.openAnimationEnded);
            }
            this.prevSetUnreadCount = this.newUnreadMessageCount;
            updatePagedownButtonVisibility(true);
        }
        int i5 = this.newMentionsCount;
        int i6 = tL_updates_channelDifferenceTooLong.dialog.unread_mentions_count;
        if (i5 != i6) {
            this.newMentionsCount = i6;
            if (i6 <= 0) {
                this.newMentionsCount = 0;
                this.hasAllMentionsLocal = true;
                showMentionDownButton(false, true);
            } else {
                SimpleTextView simpleTextView = this.mentiondownButtonCounter;
                if (simpleTextView != null) {
                    simpleTextView.setText(String.format("%d", Integer.valueOf(i6)));
                }
                showMentionDownButton(true, true);
            }
        }
        checkScrollForLoad(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void closeMenu(boolean z) {
        this.scrimPopupWindowHideDimOnDismiss = z;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
        if (z) {
            return;
        }
        ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.scrimViewAlphaAnimator.cancel();
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        this.scrimViewAlphaAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda29
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$closeMenu$263(valueAnimator2);
            }
        });
        this.scrimViewAlphaAnimator.setDuration(150L);
        this.scrimViewAlphaAnimator.start();
    }

    private void createActionMode() {
        ArrayList arrayList;
        ActionBarMenuItem addItemWithWidth;
        int i;
        if (this.selectedMessagesCountTextView != null || getContext() == null) {
            return;
        }
        ActionBarMenu createActionMode = this.actionBar.createActionMode();
        NumberTextView numberTextView = new NumberTextView(createActionMode.getContext());
        this.selectedMessagesCountTextView = numberTextView;
        numberTextView.setTextSize(18);
        this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.bold());
        this.selectedMessagesCountTextView.setTextColor(getThemedColor(Theme.key_actionBarActionModeDefaultIcon));
        this.selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda183
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view, MotionEvent motionEvent) {
                boolean lambda$createActionMode$81;
                lambda$createActionMode$81 = ChatActivity.lambda$createActionMode$81(view, motionEvent);
                return lambda$createActionMode$81;
            }
        });
        createActionMode.addView(this.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        if (this.currentEncryptedChat == null) {
            boolean z = getDialogId() == getUserConfig().getClientUserId() && ((i = this.chatMode) == 0 || i == 3);
            this.actionModeViews.add(createActionMode.addItemWithWidth(25, R.drawable.msg_download, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.SaveToMusic)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, R.drawable.msg_edit, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Edit)));
            if (z) {
                this.actionModeViews.add(createActionMode.addItemWithWidth(28, R.drawable.menu_tag_edit, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.AccDescrTagMessage)));
            }
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, R.drawable.msg_fave, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.AddToFavorites)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, R.drawable.msg_copy, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Copy)));
            if (!z && getDialogId() != UserObject.VERIFY) {
                this.actionModeViews.add(createActionMode.addItemWithWidth(11, R.drawable.msg_forward, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Forward)));
            }
            arrayList = this.actionModeViews;
            addItemWithWidth = createActionMode.addItemWithWidth(69, R.drawable.msg_shareout, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.ShareFile));
        } else {
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, R.drawable.msg_edit, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Edit)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, R.drawable.msg_fave, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.AddToFavorites)));
            arrayList = this.actionModeViews;
            addItemWithWidth = createActionMode.addItemWithWidth(10, R.drawable.msg_copy, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Copy));
        }
        arrayList.add(addItemWithWidth);
        this.actionModeViews.add(createActionMode.addItemWithWidth(12, R.drawable.msg_delete, AndroidUtilities.dp(54.0f), LocaleController.getString(R.string.Delete)));
        createActionMode.setItemVisibility(23, (this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) ? 0 : 8);
        createActionMode.setItemVisibility(10, (getMessagesController().isChatNoForwards(this.currentChat) || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
        createActionMode.setItemVisibility(22, this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0 ? 0 : 8);
        createActionMode.setItemVisibility(12, this.cantDeleteMessagesCount == 0 ? 0 : 8);
        createActionMode.setItemVisibility(28, getUserConfig().isPremium() ? 0 : 8);
        createActionMode.setItemVisibility(69, 8);
    }

    private void createAlertView() {
        if (this.alertView != null || getContext() == null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(getContext());
        this.alertView = frameLayout;
        frameLayout.setTag(1);
        this.alertView.setVisibility(8);
        this.alertView.setBackgroundResource(R.drawable.blockpanel);
        this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY));
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        int i = 9;
        if (blurredFrameLayout != null) {
            ViewParent parent = blurredFrameLayout.getParent();
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (parent == chatActivityFragmentView) {
                i = Math.max(9, chatActivityFragmentView.indexOfChild(this.topChatPanelView) + 1);
            }
        }
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            ViewParent parent2 = blurredFrameLayout2.getParent();
            ChatActivityFragmentView chatActivityFragmentView2 = this.contentView;
            if (parent2 == chatActivityFragmentView2) {
                i = Math.max(i, chatActivityFragmentView2.indexOfChild(this.pinnedMessageView) + 1);
            }
        }
        this.contentView.addView(this.alertView, i, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView = new TextView(getContext());
        this.alertNameTextView = textView;
        textView.setTextSize(1, 14.0f);
        this.alertNameTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
        this.alertNameTextView.setTypeface(AndroidUtilities.bold());
        this.alertNameTextView.setSingleLine(true);
        TextView textView2 = this.alertNameTextView;
        TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
        textView2.setEllipsize(truncateAt);
        this.alertNameTextView.setMaxLines(1);
        this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
        TextView textView3 = new TextView(getContext());
        this.alertTextView = textView3;
        textView3.setTextSize(1, 14.0f);
        this.alertTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
        this.alertTextView.setSingleLine(true);
        this.alertTextView.setEllipsize(truncateAt);
        this.alertTextView.setMaxLines(1);
        this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
    }

    private void createBizBotButton() {
        if (this.bizBotButton != null || getContext() == null) {
            return;
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
            return;
        }
        BusinessBotButton businessBotButton = new BusinessBotButton(getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.59
        };
        this.bizBotButton = businessBotButton;
        this.topChatPanelView.addView(businessBotButton, LayoutHelper.createFrame(-1, 48.0f, 83, 0.0f, 0.0f, 0.0f, 2.0f));
    }

    private void createBottomMessagesActionButtons() {
        if (this.replyButton != null || getContext() == null) {
            return;
        }
        if (!this.isInsideContainer) {
            TextView textView = new TextView(getContext());
            this.replyButton = textView;
            textView.setText(LocaleController.getString(R.string.Reply));
            this.replyButton.setGravity(16);
            this.replyButton.setTextSize(1, 15.0f);
            this.replyButton.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(21.0f), 0);
            this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
            TextView textView2 = this.replyButton;
            int i = Theme.key_actionBarActionModeDefaultIcon;
            textView2.setTextColor(getThemedColor(i));
            this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0f));
            this.replyButton.setTypeface(AndroidUtilities.bold());
            Drawable mutate = getContext().getResources().getDrawable(R.drawable.input_reply).mutate();
            mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
            this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate, (Drawable) null, (Drawable) null, (Drawable) null);
            this.replyButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda77
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$createBottomMessagesActionButtons$72(view);
                }
            });
            this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
        }
        TextView textView3 = new TextView(getContext());
        this.forwardButton = textView3;
        textView3.setText(LocaleController.getString(R.string.Forward));
        this.forwardButton.setGravity(16);
        this.forwardButton.setTextSize(1, 15.0f);
        this.forwardButton.setPadding(AndroidUtilities.dp(21.0f), 0, AndroidUtilities.dp(21.0f), 0);
        this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0f));
        this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
        TextView textView4 = this.forwardButton;
        int i2 = Theme.key_actionBarActionModeDefaultIcon;
        textView4.setTextColor(getThemedColor(i2));
        this.forwardButton.setTypeface(AndroidUtilities.bold());
        Drawable mutate2 = getContext().getResources().getDrawable(R.drawable.input_forward).mutate();
        mutate2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i2), PorterDuff.Mode.MULTIPLY));
        this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate2, (Drawable) null, (Drawable) null, (Drawable) null);
        this.forwardButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda78
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createBottomMessagesActionButtons$73(view);
            }
        });
        this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
        if (getDialogId() == UserObject.VERIFY) {
            this.forwardButton.setVisibility(8);
        }
    }

    private void createChatAttachView() {
        if (getParentActivity() == null || getContext() == null || this.chatAttachAlert != null) {
            return;
        }
        ChatAttachAlert chatAttachAlert = new ChatAttachAlert(getParentActivity(), this, false, false, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.84
            @Override // org.telegram.ui.Components.ChatAttachAlert, org.telegram.ui.ActionBar.BottomSheet
            public void dismissInternal() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null && chatAttachAlert2.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                super.dismissInternal();
                ChatActivity.this.onEditTextDialogClose(false, true);
            }

            @Override // org.telegram.ui.ActionBar.BottomSheet
            public void onDismissAnimationStart() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.setFocusable(false);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.getEditField() != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().requestFocus();
                }
                ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert3 != null && chatAttachAlert3.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                ChatActivity.this.onEditTextDialogClose(false, false);
            }
        };
        this.chatAttachAlert = chatAttachAlert;
        chatAttachAlert.setDelegate(new ChatAttachAlert.ChatAttachViewDelegate() { // from class: org.telegram.ui.ChatActivity.85
            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didPressedButton(int i, boolean z, boolean z2, int i2, long j, boolean z3, boolean z4) {
                ChatActivity chatActivity;
                ChatAttachAlert chatAttachAlert2;
                HashMap<Object, Object> hashMap;
                boolean z5;
                String str;
                HashMap<Object, Object> hashMap2;
                if (ChatActivity.this.getParentActivity() == null || (chatAttachAlert2 = (chatActivity = ChatActivity.this).chatAttachAlert) == null) {
                    return;
                }
                chatActivity.editingMessageObject = chatAttachAlert2.getEditingMessageObject();
                if (i != 8 && i != 7 && (i != 4 || ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos().isEmpty())) {
                    ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                    if (chatAttachAlert3 != null) {
                        chatAttachAlert3.dismissWithButtonClick(i);
                    }
                    ChatActivity.this.processSelectedAttach(i);
                    return;
                }
                if (i != 8) {
                    ChatActivity.this.chatAttachAlert.dismiss(true);
                }
                HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos();
                ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotosOrder();
                if (selectedPhotos.isEmpty()) {
                    hashMap = selectedPhotos;
                } else {
                    int ceil = (int) Math.ceil(selectedPhotos.size() / 10.0f);
                    int i3 = 0;
                    while (i3 < ceil) {
                        int i4 = i3 * 10;
                        int min = Math.min(10, selectedPhotos.size() - i4);
                        ArrayList arrayList = new ArrayList();
                        int i5 = 0;
                        while (i5 < min) {
                            int i6 = i4 + i5;
                            if (i6 >= selectedPhotosOrder.size()) {
                                hashMap2 = selectedPhotos;
                            } else {
                                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(i6));
                                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                                boolean z6 = photoEntry.isVideo;
                                if ((!z6 && (str = photoEntry.imagePath) != null) || (str = photoEntry.path) != null) {
                                    sendingMediaInfo.path = str;
                                }
                                sendingMediaInfo.thumbPath = photoEntry.thumbPath;
                                sendingMediaInfo.isVideo = z6;
                                CharSequence charSequence = photoEntry.caption;
                                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                                sendingMediaInfo.entities = photoEntry.entities;
                                sendingMediaInfo.masks = photoEntry.stickers;
                                sendingMediaInfo.ttl = photoEntry.ttl;
                                sendingMediaInfo.videoEditedInfo = photoEntry.editedInfo;
                                sendingMediaInfo.canDeleteAfter = photoEntry.canDeleteAfter;
                                sendingMediaInfo.updateStickersOrder = SendMessagesHelper.checkUpdateStickersOrder(photoEntry.caption);
                                sendingMediaInfo.hasMediaSpoilers = photoEntry.hasSpoiler;
                                hashMap2 = selectedPhotos;
                                sendingMediaInfo.stars = photoEntry.starsAmount;
                                arrayList.add(sendingMediaInfo);
                                photoEntry.reset();
                            }
                            i5++;
                            selectedPhotos = hashMap2;
                        }
                        HashMap<Object, Object> hashMap3 = selectedPhotos;
                        if (i3 == 0) {
                            ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities);
                            z5 = ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).updateStickersOrder;
                        } else {
                            z5 = false;
                        }
                        AccountInstance accountInstance = ChatActivity.this.getAccountInstance();
                        long j2 = ChatActivity.this.dialog_id;
                        MessageObject messageObject = ChatActivity.this.replyingMessageObject;
                        MessageObject threadMessage = ChatActivity.this.getThreadMessage();
                        ReplyQuote replyQuote = ChatActivity.this.replyingQuote;
                        boolean z7 = i == 4 || z4;
                        ChatActivity chatActivity2 = ChatActivity.this;
                        MessageObject messageObject2 = chatActivity2.editingMessageObject;
                        int i7 = chatActivity2.chatMode;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        SendMessagesHelper.prepareSendingMedia(accountInstance, arrayList, j2, messageObject, threadMessage, null, replyQuote, z7, z, messageObject2, z2, i2, i7, z5, null, chatActivity3.quickReplyShortcut, chatActivity3.getQuickReplyId(), j, z3);
                        i3++;
                        selectedPhotos = hashMap3;
                    }
                    hashMap = selectedPhotos;
                    ChatActivity.this.afterMessageSend();
                    ChatActivity.this.chatActivityEnterView.setFieldText("");
                }
                if (i2 != 0) {
                    if (ChatActivity.this.scheduledMessagesCount == -1) {
                        ChatActivity.this.scheduledMessagesCount = 0;
                    }
                    ChatActivity.access$3512(ChatActivity.this, hashMap.size());
                    ChatActivity.this.updateScheduledInterface(true);
                }
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didSelectBot(TLRPC.User user) {
                String publicUsername = UserObject.getPublicUsername(user);
                if (ChatActivity.this.chatActivityEnterView == null || user == null || TextUtils.isEmpty(publicUsername)) {
                    return;
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                chatActivityEnterView.setFieldText("@" + publicUsername + " ");
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void doOnIdle(Runnable runnable) {
                ChatActivity.this.lambda$openDiscussionMessageChat$316(runnable);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public boolean needEnterComment() {
                return ChatActivity.this.needEnterText();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void onCameraOpened() {
                ChatActivity.this.chatActivityEnterView.closeKeyboard();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void onWallpaperSelected(Object obj) {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$onWallpaperSelected(this, obj);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void openAvatarsSearch() {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$openAvatarsSearch(this);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ boolean selectItemOnClicking() {
                return ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$selectItemOnClicking(this);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void sendAudio(ArrayList arrayList, CharSequence charSequence, boolean z, int i, long j, boolean z2) {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$sendAudio(this, arrayList, charSequence, z, i, j, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        createDeleteMessagesAlert(messageObject, groupedMessages, false);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z) {
        if (messageObject == null && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, messageObject, this.selectedMessagesIds, groupedMessages, (int) getTopicId(), this.chatMode, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda344
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$215();
            }
        }, z ? new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda345
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$216();
            }
        } : null, this.themeDelegate);
    }

    /* JADX WARN: Removed duplicated region for block: B:115:0x02bb  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x034c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createEmptyView(boolean z) {
        FrameLayout frameLayout;
        View view;
        FrameLayout.LayoutParams layoutParams;
        int i;
        String str;
        TLRPC.TL_businessIntro tL_businessIntro;
        TLRPC.User user;
        TLRPC.Chat chat;
        TLRPC.TL_businessIntro tL_businessIntro2;
        boolean z2 = false;
        if ((this.emptyViewContainer == null || z) && getContext() != null) {
            FrameLayout frameLayout2 = this.emptyViewContainer;
            if (frameLayout2 == null) {
                FrameLayout frameLayout3 = new FrameLayout(getContext());
                this.emptyViewContainer = frameLayout3;
                frameLayout3.setVisibility(4);
                this.contentView.addView(this.emptyViewContainer, 3, LayoutHelper.createFrame(-1, -2, 17));
            } else {
                frameLayout2.removeAllViews();
            }
            if (this.chatAdapter.isFiltered) {
                TextView textView = new TextView(getContext());
                this.emptyView = textView;
                textView.setText(LocaleController.getString(R.string.NoFilteredMessages));
                this.emptyView.setTextSize(1, 14.0f);
                this.emptyView.setGravity(17);
                this.emptyView.setTextColor(getThemedColor(Theme.key_chat_serviceText));
                this.emptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(6.0f), this.emptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                this.emptyView.setTypeface(AndroidUtilities.bold());
                this.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                frameLayout = this.emptyViewContainer;
                view = this.emptyView;
                layoutParams = new FrameLayout.LayoutParams(-2, -2, 17);
            } else {
                int i2 = this.chatMode;
                if (i2 == 5) {
                    QuickRepliesEmptyView quickRepliesEmptyView = new QuickRepliesEmptyView(getContext(), this.chatMode, this.dialog_id, this.threadMessageId, this.quickReplyShortcut, getResourceProvider());
                    this.quickRepliesEmptyView = quickRepliesEmptyView;
                    quickRepliesEmptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(16.0f), this.quickRepliesEmptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                    frameLayout = this.emptyViewContainer;
                    view = this.quickRepliesEmptyView;
                } else if (i2 != 6) {
                    if ((this.preloadedGreetingsSticker != null && this.currentUser != null && !this.userBlocked) || (this.userInfo != null && getDialogId() != getUserConfig().getClientUserId() && this.userInfo.contact_require_premium && !getUserConfig().isPremium())) {
                        ChatGreetingsView chatGreetingsView = new ChatGreetingsView(getContext(), this.currentUser, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.139
                            @Override // android.widget.LinearLayout, android.view.ViewGroup, android.view.View
                            protected void onLayout(boolean z3, int i3, int i4, int i5, int i6) {
                                super.onLayout(z3, i3, i4, i5, i6);
                                setVisiblePart(getY() + ChatActivity.this.emptyViewContent.getY(), ChatActivity.this.getServiceHeight(this));
                            }
                        };
                        this.greetingsViewContainer = chatGreetingsView;
                        if (this.userInfo != null && getDialogId() != getUserConfig().getClientUserId() && this.userInfo.contact_require_premium && !getUserConfig().isPremium()) {
                            z2 = true;
                        }
                        chatGreetingsView.setPremiumLock(z2, this.dialog_id);
                        this.greetingsViewContainer.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda48
                            @Override // org.telegram.ui.Components.ChatGreetingsView.Listener
                            public final void onGreetings(TLRPC.Document document) {
                                ChatActivity.this.lambda$createEmptyView$261(document);
                            }
                        });
                        LinearLayout linearLayout = new LinearLayout(getContext());
                        this.emptyViewContent = linearLayout;
                        linearLayout.setOrientation(1);
                        this.emptyViewContent.setGravity(17);
                        this.emptyViewContent.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-2, -2, 17));
                        this.emptyViewContainer.addView(this.emptyViewContent, LayoutHelper.createFrame(-1, -2, 17));
                        TLRPC.UserFull userFull = this.userInfo;
                        if (userFull != null && (tL_businessIntro2 = userFull.business_intro) != null) {
                            this.greetingsViewContainer.setPreview(tL_businessIntro2.title, tL_businessIntro2.description);
                            this.greetingsViewContainer.setSticker(this.userInfo.business_intro.sticker);
                        }
                    } else if (this.currentEncryptedChat != null) {
                        this.bigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, 0, this.themeDelegate);
                        this.bigEmptyView.setStatusText(this.currentEncryptedChat.admin_id == getUserConfig().getClientUserId() ? LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(this.currentUser)) : LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(this.currentUser)));
                        frameLayout = this.emptyViewContainer;
                        view = this.bigEmptyView;
                        layoutParams = new FrameLayout.LayoutParams(-2, -2, 17);
                    } else if (this.isTopic && this.chatMode == 0) {
                        this.emptyViewContainer.addView(new CreateTopicEmptyView(getContext(), this.contentView, this.themeDelegate), new FrameLayout.LayoutParams(-2, -2, 17));
                        return;
                    } else if (!isThreadChat() && this.chatMode == 0 && (((user = this.currentUser) != null && user.self) || ((chat = this.currentChat) != null && chat.creator && !ChatObject.isChannelAndNotMegaGroup(chat)))) {
                        ChatBigEmptyView chatBigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, this.currentChat == null ? 2 : 1, this.themeDelegate);
                        this.bigEmptyView = chatBigEmptyView;
                        this.emptyViewContainer.addView(chatBigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                        if (this.currentChat != null) {
                            this.bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString(R.string.GroupEmptyTitle1)));
                            return;
                        }
                        return;
                    } else {
                        if (isThreadChat() && this.chatMode == 0) {
                            i = this.isComments ? R.string.NoComments : R.string.NoReplies;
                        } else if (this.chatMode == 1) {
                            i = R.string.NoScheduledMessages;
                        } else {
                            TLRPC.User user2 = this.currentUser;
                            if (user2 != null) {
                                long j = user2.id;
                                if (j != 777000 && j != 429000 && j != 4244000 && MessagesController.isSupportUser(user2)) {
                                    i = R.string.GotAQuestion;
                                }
                            }
                            TLRPC.User user3 = this.currentUser;
                            if (user3 == null || user3.self || user3.deleted || this.userBlocked) {
                                i = R.string.NoMessages;
                            } else {
                                str = null;
                                if (str != null) {
                                    ChatGreetingsView chatGreetingsView2 = new ChatGreetingsView(getContext(), this.currentUser, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.140
                                        @Override // android.widget.LinearLayout, android.view.ViewGroup, android.view.View
                                        protected void onLayout(boolean z3, int i3, int i4, int i5, int i6) {
                                            super.onLayout(z3, i3, i4, i5, i6);
                                            setVisiblePart(getY() + ChatActivity.this.emptyViewContent.getY(), ChatActivity.this.getServiceHeight(this));
                                        }
                                    };
                                    this.greetingsViewContainer = chatGreetingsView2;
                                    if (this.userInfo != null && getDialogId() != getUserConfig().getClientUserId() && this.userInfo.contact_require_premium && !getUserConfig().isPremium()) {
                                        z2 = true;
                                    }
                                    chatGreetingsView2.setPremiumLock(z2, this.dialog_id);
                                    this.greetingsViewContainer.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda49
                                        @Override // org.telegram.ui.Components.ChatGreetingsView.Listener
                                        public final void onGreetings(TLRPC.Document document) {
                                            ChatActivity.this.lambda$createEmptyView$262(document);
                                        }
                                    });
                                    TLRPC.UserFull userFull2 = this.userInfo;
                                    if (userFull2 != null && (tL_businessIntro = userFull2.business_intro) != null) {
                                        this.greetingsViewContainer.setPreview(tL_businessIntro.title, tL_businessIntro.description);
                                        this.greetingsViewContainer.setSticker(this.userInfo.business_intro.sticker);
                                    }
                                    LinearLayout linearLayout2 = new LinearLayout(getContext());
                                    this.emptyViewContent = linearLayout2;
                                    linearLayout2.setOrientation(1);
                                    this.emptyViewContent.setGravity(17);
                                    this.emptyViewContent.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-2, -2, 17));
                                    this.emptyViewContainer.addView(this.emptyViewContent, LayoutHelper.createFrame(-1, -2, 17));
                                } else {
                                    TextView textView2 = new TextView(getContext());
                                    this.emptyView = textView2;
                                    textView2.setText(str);
                                    this.emptyView.setTextSize(1, 14.0f);
                                    this.emptyView.setGravity(17);
                                    this.emptyView.setTextColor(getThemedColor(Theme.key_chat_serviceText));
                                    this.emptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(6.0f), this.emptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                                    this.emptyView.setTypeface(AndroidUtilities.bold());
                                    this.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                                    frameLayout = this.emptyViewContainer;
                                    view = this.emptyView;
                                    layoutParams = new FrameLayout.LayoutParams(-2, -2, 17);
                                }
                            }
                        }
                        str = LocaleController.getString(i);
                        if (str != null) {
                        }
                    }
                    updateGreetInfo();
                    return;
                } else {
                    BusinessLinksEmptyView businessLinksEmptyView = new BusinessLinksEmptyView(getContext(), this, this.businessLink, getResourceProvider());
                    this.businessLinksEmptyView = businessLinksEmptyView;
                    businessLinksEmptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(16.0f), this.businessLinksEmptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                    frameLayout = this.emptyViewContainer;
                    view = this.businessLinksEmptyView;
                }
                layoutParams = LayoutHelper.createFrame(-2, -2, 17);
            }
            frameLayout.addView(view, layoutParams);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createHint2MessageObject() {
        if (this.hint2MessageObject != null) {
            return;
        }
        TLRPC.TL_message tL_message = new TLRPC.TL_message();
        tL_message.message = LocaleController.getString(this.chatMode == 3 ? R.string.SavedMessagesProfileHint : R.string.BusinessRepliesHint);
        tL_message.id = 0;
        MessageObject messageObject = new MessageObject(this.currentAccount, tL_message, false, false);
        this.hint2MessageObject = messageObject;
        messageObject.type = 10;
        messageObject.contentType = 1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean createMenu(View view, boolean z, boolean z2, float f, float f2, boolean z3) {
        return createMenu(view, z, z2, f, f2, true, z3);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:1100:0x1695, code lost:
        if (r1 != 8) goto L377;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1171:0x1782, code lost:
        if (r5.paid_reactions_available != false) goto L1035;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1174:0x178c, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(r72.currentChat) == false) goto L1035;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1176:0x1790, code lost:
        if (r72.currentUser != null) goto L1035;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1178:0x1796, code lost:
        if (r23.isEmpty() == false) goto L414;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1270:0x18d8, code lost:
        if (r6.startsWith("https://" + getMessagesController().linkPrefix) == false) goto L503;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1403:0x1fda, code lost:
        if (r0.startsWith("https://" + getMessagesController().linkPrefix) == false) goto L933;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1512:0x23ff, code lost:
        if (r13.chatMode == 5) goto L675;
     */
    /* JADX WARN: Code restructure failed: missing block: B:425:0x081c, code lost:
        if (org.telegram.messenger.Emoji.fullyConsistsOfEmojis(r1) != false) goto L1725;
     */
    /* JADX WARN: Code restructure failed: missing block: B:475:0x0974, code lost:
        if (r72.selectedObject.messageOwner.ttl_period != 0) goto L1123;
     */
    /* JADX WARN: Code restructure failed: missing block: B:476:0x0976, code lost:
        r0 = org.telegram.messenger.R.drawable.msg_delete_auto;
     */
    /* JADX WARN: Code restructure failed: missing block: B:577:0x0b64, code lost:
        if (r72.selectedObject.messageOwner.ttl_period == 0) goto L1106;
     */
    /* JADX WARN: Code restructure failed: missing block: B:592:0x0bcd, code lost:
        if (r72.selectedObject.messageOwner.ttl_period != 0) goto L1123;
     */
    /* JADX WARN: Code restructure failed: missing block: B:715:0x0e0d, code lost:
        if (r0.edit_messages != false) goto L1345;
     */
    /* JADX WARN: Code restructure failed: missing block: B:784:0x0f8e, code lost:
        if (r72.selectedObject.isRoundOnce() == false) goto L1529;
     */
    /* JADX WARN: Code restructure failed: missing block: B:793:0x0fbf, code lost:
        if (r72.selectedObject.isRoundOnce() == false) goto L1529;
     */
    /* JADX WARN: Code restructure failed: missing block: B:817:0x1075, code lost:
        if (getMediaDataController().canAddStickerToFavorites() != false) goto L1570;
     */
    /* JADX WARN: Code restructure failed: missing block: B:840:0x1132, code lost:
        if (getMediaDataController().canAddStickerToFavorites() != false) goto L1570;
     */
    /* JADX WARN: Code restructure failed: missing block: B:841:0x1134, code lost:
        r13.add(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.AddToFavorites));
        r8.add(20);
        r0 = org.telegram.messenger.R.drawable.msg_fave;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1079:0x1655  */
    /* JADX WARN: Removed duplicated region for block: B:1080:0x1658  */
    /* JADX WARN: Removed duplicated region for block: B:1085:0x1668  */
    /* JADX WARN: Removed duplicated region for block: B:1092:0x167b  */
    /* JADX WARN: Removed duplicated region for block: B:1107:0x16b1 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1112:0x16ba  */
    /* JADX WARN: Removed duplicated region for block: B:1114:0x16c3  */
    /* JADX WARN: Removed duplicated region for block: B:1269:0x18bd  */
    /* JADX WARN: Removed duplicated region for block: B:1275:0x18e2  */
    /* JADX WARN: Removed duplicated region for block: B:1276:0x18e5  */
    /* JADX WARN: Removed duplicated region for block: B:1278:0x18e9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1285:0x192c  */
    /* JADX WARN: Removed duplicated region for block: B:1303:0x199b  */
    /* JADX WARN: Removed duplicated region for block: B:1304:0x19a2  */
    /* JADX WARN: Removed duplicated region for block: B:1307:0x19e0  */
    /* JADX WARN: Removed duplicated region for block: B:1308:0x19e2  */
    /* JADX WARN: Removed duplicated region for block: B:1311:0x19ea  */
    /* JADX WARN: Removed duplicated region for block: B:1313:0x19f0  */
    /* JADX WARN: Removed duplicated region for block: B:1316:0x1a0b  */
    /* JADX WARN: Removed duplicated region for block: B:1340:0x1b9f  */
    /* JADX WARN: Removed duplicated region for block: B:1385:0x1dea  */
    /* JADX WARN: Removed duplicated region for block: B:1388:0x1e06  */
    /* JADX WARN: Removed duplicated region for block: B:1390:0x1e14  */
    /* JADX WARN: Removed duplicated region for block: B:1391:0x1fa1  */
    /* JADX WARN: Removed duplicated region for block: B:1454:0x2221  */
    /* JADX WARN: Removed duplicated region for block: B:1480:0x2323  */
    /* JADX WARN: Removed duplicated region for block: B:1551:0x24d2  */
    /* JADX WARN: Removed duplicated region for block: B:1553:0x2529  */
    /* JADX WARN: Removed duplicated region for block: B:1560:0x258e  */
    /* JADX WARN: Removed duplicated region for block: B:1563:0x25bf  */
    /* JADX WARN: Removed duplicated region for block: B:1565:0x25c8  */
    /* JADX WARN: Removed duplicated region for block: B:1711:0x2930  */
    /* JADX WARN: Removed duplicated region for block: B:1719:0x299d  */
    /* JADX WARN: Removed duplicated region for block: B:1720:0x29a2  */
    /* JADX WARN: Removed duplicated region for block: B:1725:0x29ca  */
    /* JADX WARN: Removed duplicated region for block: B:1728:0x29f4  */
    /* JADX WARN: Removed duplicated region for block: B:1731:0x2a0f  */
    /* JADX WARN: Removed duplicated region for block: B:1738:0x2a70  */
    /* JADX WARN: Removed duplicated region for block: B:1744:0x2a9a  */
    /* JADX WARN: Removed duplicated region for block: B:1745:0x2a9e  */
    /* JADX WARN: Removed duplicated region for block: B:1748:0x2ab7  */
    /* JADX WARN: Removed duplicated region for block: B:1751:0x2abe  */
    /* JADX WARN: Removed duplicated region for block: B:1754:0x2ac5  */
    /* JADX WARN: Removed duplicated region for block: B:1789:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:206:0x03b4 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:209:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x03e6  */
    /* JADX WARN: Removed duplicated region for block: B:222:0x03e8  */
    /* JADX WARN: Removed duplicated region for block: B:225:0x03ef  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x0482  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x0619 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:331:0x061a  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x06d7  */
    /* JADX WARN: Removed duplicated region for block: B:373:0x0732 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:388:0x0787  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x07a9  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x07e3 A[Catch: Exception -> 0x07fb, TryCatch #0 {Exception -> 0x07fb, blocks: (B:409:0x07bf, B:410:0x07dd, B:412:0x07e3, B:416:0x07f7, B:415:0x07f5, B:418:0x07fd), top: B:1760:0x07bf }] */
    /* JADX WARN: Removed duplicated region for block: B:424:0x0818  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x0825  */
    /* JADX WARN: Removed duplicated region for block: B:434:0x0830  */
    /* JADX WARN: Removed duplicated region for block: B:443:0x0869  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x08ad  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x08cb  */
    /* JADX WARN: Removed duplicated region for block: B:467:0x0930  */
    /* JADX WARN: Removed duplicated region for block: B:533:0x0a93  */
    /* JADX WARN: Removed duplicated region for block: B:558:0x0b18  */
    /* JADX WARN: Removed duplicated region for block: B:559:0x0b1a  */
    /* JADX WARN: Removed duplicated region for block: B:562:0x0b23  */
    /* JADX WARN: Removed duplicated region for block: B:846:0x116c  */
    /* JADX WARN: Removed duplicated region for block: B:877:0x11d8  */
    /* JADX WARN: Removed duplicated region for block: B:879:0x11f4  */
    /* JADX WARN: Removed duplicated region for block: B:883:0x120f  */
    /* JADX WARN: Removed duplicated region for block: B:895:0x124b  */
    /* JADX WARN: Removed duplicated region for block: B:898:0x126b  */
    /* JADX WARN: Removed duplicated region for block: B:903:0x1294  */
    /* JADX WARN: Removed duplicated region for block: B:904:0x1299  */
    /* JADX WARN: Removed duplicated region for block: B:906:0x129d  */
    /* JADX WARN: Removed duplicated region for block: B:914:0x12b9  */
    /* JADX WARN: Removed duplicated region for block: B:915:0x12bc  */
    /* JADX WARN: Removed duplicated region for block: B:919:0x12dc  */
    /* JADX WARN: Removed duplicated region for block: B:938:0x133a  */
    /* JADX WARN: Removed duplicated region for block: B:939:0x133c  */
    /* JADX WARN: Removed duplicated region for block: B:942:0x1345  */
    /* JADX WARN: Removed duplicated region for block: B:956:0x1383  */
    /* JADX WARN: Removed duplicated region for block: B:957:0x1386  */
    /* JADX WARN: Type inference failed for: r11v24, types: [org.telegram.ui.ActionBar.ActionBarPopupWindow$ActionBarPopupWindowLayout] */
    /* JADX WARN: Type inference failed for: r35v4 */
    /* JADX WARN: Type inference failed for: r35v5 */
    /* JADX WARN: Type inference failed for: r4v86 */
    /* JADX WARN: Type inference failed for: r4v87, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r4v90 */
    /* JADX WARN: Type inference failed for: r5v100, types: [boolean] */
    /* JADX WARN: Type inference failed for: r5v110 */
    /* JADX WARN: Type inference failed for: r5v99 */
    /* JADX WARN: Type inference failed for: r7v30, types: [android.widget.LinearLayout, android.view.View, android.view.ViewGroup] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean createMenu(final View view, boolean z, boolean z2, float f, float f2, boolean z3, boolean z4) {
        MessageObject messageObject;
        final MessageObject messageObject2;
        boolean z5;
        String str;
        String str2;
        Integer num;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        String str3;
        boolean z10;
        String str4;
        boolean z11;
        boolean z12;
        int[] iArr;
        boolean z13;
        long j;
        CharSequence charSequence;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout;
        MessageObject messageObject3;
        boolean z14;
        boolean z15;
        MessageObject messageObject4;
        boolean z16;
        AtomicBoolean atomicBoolean;
        MessageObject messageObject5;
        Rect rect;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout2;
        MessageObject messageObject6;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout3;
        Rect rect2;
        int i;
        ReactionsContainerLayout reactionsContainerLayout;
        AtomicReference atomicReference;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout4;
        final ReactionsContainerLayout reactionsContainerLayout2;
        MessageObject messageObject7;
        int i2;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout5;
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        int i3;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout6;
        int i4;
        boolean z17;
        TLRPC.User user;
        ActionBarPopupWindow actionBarPopupWindow;
        int i5;
        int left;
        int height;
        int measuredHeight;
        int measureKeyboardHeight;
        View view2;
        int i6;
        UndoView undoView;
        UndoView undoView2;
        ChatActivityEnterView chatActivityEnterView;
        AtomicReference atomicReference2;
        AtomicBoolean atomicBoolean2;
        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout7;
        ArrayList arrayList;
        MessageObject messageObject8;
        int[] iArr2;
        ArrayList arrayList2;
        ArrayList arrayList3;
        final ChatActivity chatActivity;
        int i7;
        int i8;
        final MessageObject messageObject9;
        boolean z18;
        final MessageObject messageObject10;
        boolean z19;
        MessageObject messageObject11;
        MessageObject messageObject12;
        TLRPC.InputPeer inputPeer;
        int size;
        final int i9;
        final ArrayList arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        final int i10;
        int i11;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout8;
        TLRPC.InputPeer inputPeer2;
        AtomicReference atomicReference3;
        final AtomicBoolean atomicBoolean3;
        MessageObject messageObject13;
        TLRPC.InputPeer inputPeer3;
        MessageObject messageObject14;
        TLRPC.Message message;
        TLRPC.Chat chat;
        MessageObject messageObject15;
        float f3;
        int i12;
        int i13;
        int i14;
        int i15;
        TLRPC.Message message2;
        int i16;
        int i17;
        ?? r5;
        ReactedHeaderView reactedHeaderView;
        int i18;
        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout9;
        final int[] iArr3;
        final ReactedUsersListView onHeightChangedListener;
        ReactedHeaderView reactedHeaderView2;
        char c;
        final int[] iArr4;
        ReactedUsersListView.ContainerLinerLayout containerLinerLayout;
        int i19;
        MessageObject messageObject16;
        String str5;
        TLRPC.User user2;
        TLRPC.UserFull userFull;
        TLRPC.ChatFull chatFull;
        int i20;
        int i21;
        CharSequence charSequence2;
        int i22;
        int i23;
        int i24;
        TLRPC.Message message3;
        TLRPC.Chat chat2;
        TLRPC.MessageReplyHeader messageReplyHeader;
        TLRPC.Chat chat3;
        int i25;
        int i26;
        int i27;
        int i28;
        int i29;
        MessageObject messageObject17;
        MessageObject findPrimaryMessageObject;
        ArrayList arrayList7;
        int i30;
        TLRPC.User user3;
        int i31;
        MessageObject messageObject18;
        int i32;
        int i33;
        TLRPC.Message message4;
        TLRPC.Chat chat4;
        TLRPC.MessageReplyHeader messageReplyHeader2;
        TLRPC.Chat chat5;
        int i34;
        int i35;
        ArrayList arrayList8;
        TLRPC.Message message5;
        int i36;
        MessageObject messageObject19;
        MessageObject messageObject20;
        TLRPC.User user4;
        TLRPC.Message message6;
        TLRPC.Chat chat6;
        TLRPC.MessageReplyHeader messageReplyHeader3;
        Iterator<TLRPC.PollAnswer> it;
        TLRPC.Chat chat7;
        TLRPC.Peer peer;
        boolean z20;
        ArrayList arrayList9;
        BlurredFrameLayout blurredFrameLayout;
        TLRPC.Chat chat8;
        MessageObject messageObject21;
        int size2;
        int i37;
        int i38;
        TLRPC.MessageAction messageAction;
        TLRPC.UserFull userFull2;
        ArrayList arrayList10;
        if (this.actionBar.isActionModeShowed() || isReport()) {
            return false;
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.hideHints();
        }
        boolean z21 = view instanceof ChatMessageCell;
        if (z21) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject messageObject22 = chatMessageCell.getMessageObject();
            messageObject = chatMessageCell.getPrimaryMessageObject();
            messageObject2 = messageObject22;
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
            messageObject2 = messageObject;
        }
        if (messageObject2 == null) {
            return false;
        }
        if (!z) {
            TLRPC.MessageAction messageAction2 = messageObject2.messageOwner.action;
            if ((messageAction2 instanceof TLRPC.TL_messageActionGiftPremium) || (messageAction2 instanceof TLRPC.TL_messageActionGiftCode) || (messageAction2 instanceof TLRPC.TL_messageActionGiftStars)) {
                return false;
            }
        }
        HintView2 hintView2 = this.factCheckHint;
        if (hintView2 != null) {
            hintView2.hide(false);
        }
        StringBuilder sb = new StringBuilder();
        sb.append("open menu msg_id=");
        sb.append(messageObject2.getId());
        if (messageObject2.getDocument() != null) {
            StringBuilder sb2 = new StringBuilder();
            sb2.append(" doc_id=");
            z5 = z21;
            sb2.append(messageObject2.getDocument().id);
            str = sb2.toString();
        } else {
            z5 = z21;
            str = "";
        }
        sb.append(str);
        FileLog.d(sb.toString());
        int messageType = getMessageType(messageObject2);
        if (z) {
            TLRPC.MessageAction messageAction3 = messageObject2.messageOwner.action;
            boolean z22 = messageAction3 instanceof TLRPC.TL_messageActionGiveawayResults;
            if ((messageAction3 instanceof TLRPC.TL_messageActionPinMessage) || z22) {
                if (messageObject2.getReplyMsgId() != 0) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda140
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$createMenu$217(messageObject2);
                        }
                    });
                } else {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.MessageNotFound), this.themeDelegate).show();
                }
                return true;
            } else if (!z4 && (messageAction3 instanceof TLRPC.TL_messageActionPaymentSent)) {
                TLRPC.TL_payments_getPaymentReceipt tL_payments_getPaymentReceipt = new TLRPC.TL_payments_getPaymentReceipt();
                tL_payments_getPaymentReceipt.msg_id = messageObject2.getId();
                tL_payments_getPaymentReceipt.peer = getMessagesController().getInputPeer(messageObject2.messageOwner.peer_id);
                getConnectionsManager().sendRequest(tL_payments_getPaymentReceipt, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda129
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        ChatActivity.this.lambda$createMenu$219(tLObject, tL_error);
                    }
                }, 2);
                return true;
            } else if (!z4 && (messageAction3 instanceof TLRPC.TL_messageActionPaymentRefunded)) {
                StarsIntroActivity.showTransactionSheet(getContext(), this.currentAccount, messageObject2.messageOwner.date, (TLRPC.TL_messageActionPaymentRefunded) messageAction3, this.resourceProvider);
                return true;
            } else if ((messageAction3 instanceof TLRPC.TL_messageActionGroupCall) || (messageAction3 instanceof TLRPC.TL_messageActionInviteToGroupCall) || (messageAction3 instanceof TLRPC.TL_messageActionGroupCallScheduled)) {
                if (getParentActivity() == null) {
                    return false;
                }
                VoIPService sharedInstance = VoIPService.getSharedInstance();
                if (sharedInstance != null) {
                    ChatObject.Call call = sharedInstance.groupCall;
                    if (call == null || messageObject2.messageOwner.action.call.id != call.call.id) {
                        boolean z23 = getGroupCall() == null;
                        this.createGroupCall = z23;
                        VoIPHelper.startCall(this.currentChat, null, null, z23, getParentActivity(), this, getAccountInstance());
                    } else if (getParentActivity() instanceof LaunchActivity) {
                        GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(this.currentAccount), null, null, false, null);
                    } else {
                        Intent action = new Intent(getParentActivity(), LaunchActivity.class).setAction("voip_chat");
                        action.putExtra("currentAccount", VoIPService.getSharedInstance().getAccount());
                        getParentActivity().startActivity(action);
                    }
                    return true;
                } else if (this.fragmentContextView != null && getGroupCall() != null) {
                    if (VoIPService.getSharedInstance() != null) {
                        GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(VoIPService.getSharedInstance().getAccount()), null, null, false, null);
                    } else {
                        ChatObject.Call groupCall = getGroupCall();
                        if (groupCall == null) {
                            return false;
                        }
                        VoIPHelper.startCall(getMessagesController().getChat(Long.valueOf(groupCall.chatId)), null, null, false, getParentActivity(), this, getAccountInstance());
                    }
                    return true;
                } else if (ChatObject.canManageCalls(this.currentChat)) {
                    VoIPHelper.showGroupCallAlert(this, this.currentChat, null, true, getAccountInstance());
                    return true;
                }
            } else if (messageAction3 instanceof TLRPC.TL_messageActionSetChatTheme) {
                showChatThemeBottomSheet();
                return true;
            }
        }
        boolean z24 = (messageObject2.isSponsored() || !((arrayList10 = this.threadMessageObjects) == null || !arrayList10.contains(messageObject2) || isThreadChat())) ? true : z;
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.forwardingMessage = null;
        this.forwardingMessageGroup = null;
        this.selectedObjectToEditCaption = null;
        for (int i39 = 1; i39 >= 0; i39--) {
            this.selectedMessagesCanCopyIds[i39].clear();
            this.selectedMessagesCanStarIds[i39].clear();
            this.selectedMessagesIds[i39].clear();
        }
        hideActionMode();
        MessageObject.GroupedMessages validGroupedMessage = z3 ? getValidGroupedMessage(messageObject2) : null;
        int i40 = this.chatMode;
        if (i40 == 3 || i40 == 5 || i40 == 1 || (isThreadChat() && !this.isTopic)) {
            str2 = "ViewReplies";
        } else {
            if (this.currentChat != null) {
                str2 = "ViewReplies";
                if (messageObject2.getDialogId() != this.mergeDialogId && ChatObject.canPinMessages(this.currentChat)) {
                    num = 0;
                    z6 = true;
                }
            } else {
                str2 = "ViewReplies";
                if (this.currentEncryptedChat == null && !UserObject.isDeleted(this.currentUser) && (userFull2 = this.userInfo) != null) {
                    z6 = userFull2.can_pin_message;
                    num = 0;
                }
            }
            z7 = (((!UserObject.isReplyUser(this.dialog_id) || this.dialog_id == UserObject.VERIFY) ? false : false) || messageObject2.getId() <= 0 || ((messageAction = messageObject2.messageOwner.action) != null && !(messageAction instanceof TLRPC.TL_messageActionEmpty)) || messageObject2.isExpiredStory() || messageObject2.type == 24) ? false : true;
            boolean z25 = !getMessagesController().isChatNoForwards(this.currentChat) || messageObject2.messageOwner.noforwards || getDialogId() == UserObject.VERIFY;
            boolean z26 = !z25 || messageObject2.type == 29;
            boolean z27 = messageObject2.getDialogId() == this.mergeDialogId && z7 && (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId())))) && !messageObject2.isExpiredStory();
            if (messageObject2.canEditMessage(this.currentChat) || this.chatActivityEnterView.hasAudioToSend()) {
                z8 = z7;
            } else {
                z8 = z7;
                if (messageObject2.getDialogId() != this.mergeDialogId && messageObject2.type != 23) {
                    z9 = true;
                    if (z9 && validGroupedMessage != null) {
                        size2 = validGroupedMessage.messages.size();
                        i37 = 0;
                        int i41 = 0;
                        while (i37 < size2) {
                            MessageObject messageObject23 = validGroupedMessage.messages.get(i37);
                            if (i37 == 0 || !TextUtils.isEmpty(messageObject23.caption)) {
                                this.selectedObjectToEditCaption = messageObject23;
                                if (!TextUtils.isEmpty(messageObject23.caption)) {
                                    i38 = 1;
                                    i41++;
                                    i37 += i38;
                                }
                            }
                            i38 = 1;
                            i37 += i38;
                        }
                        z9 = i41 >= 2;
                    }
                    boolean z28 = (!messageObject2.isExpiredStory() || this.chatMode == 1 || ((arrayList9 = this.threadMessageObjects) != null && arrayList9.contains(messageObject2)) || messageObject2.isSponsored() || ((messageType == 1 && messageObject2.getDialogId() == this.mergeDialogId) || (messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent) || ((this.currentEncryptedChat == null && messageObject2.getId() < 0) || (((blurredFrameLayout = this.bottomOverlayChat) != null && blurredFrameLayout.getVisibility() == 0 && (!this.bottomOverlayChatWaitsReply || (messageObject21 = this.selectedObject) == null || (MessageObject.getTopicId(this.currentAccount, messageObject21.messageOwner, ChatObject.isForum(this.currentChat)) == 0 && !this.selectedObject.wasJustSent))) || ((chat8 = this.currentChat) != null && ((ChatObject.isNotInChat(chat8) && !isThreadChat()) || ((ChatObject.isChannel(this.currentChat) && !ChatObject.canPost(this.currentChat) && !this.currentChat.megagroup) || !ChatObject.canSendMessages(this.currentChat)))))))) ? false : true;
                    if (z24 && messageType >= 2 && messageType != 20) {
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if ((chatActivityEnterView3 == null || !(chatActivityEnterView3.isRecordingAudioVideo() || this.chatActivityEnterView.isRecordLocked())) && messageObject2.type != 27) {
                            createActionMode();
                            this.actionBar.createActionMode().setItemVisibility(12, 0);
                            createBottomMessagesActionButtons();
                            this.bottomMessagesActionContainer.setVisibility(0);
                            int measuredHeight2 = this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f);
                            createActionMode();
                            if (this.chatActivityEnterView.getVisibility() == 0) {
                                ArrayList arrayList11 = new ArrayList();
                                arrayList11.add(this.chatActivityEnterView);
                                MentionsContainerView mentionsContainerView = this.mentionContainer;
                                if (mentionsContainerView != null && mentionsContainerView.getVisibility() == 0) {
                                    arrayList11.add(this.mentionContainer);
                                }
                                SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
                                if (suggestEmojiView != null && suggestEmojiView.getVisibility() == 0) {
                                    arrayList11.add(this.suggestEmojiPanel);
                                }
                                this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, (View[]) arrayList11.toArray(new View[0]), new boolean[]{false, true, true}, this.chatListView, measuredHeight2);
                                if (getParentActivity() instanceof LaunchActivity) {
                                    ((LaunchActivity) getParentActivity()).hideVisibleActionMode();
                                }
                                ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                                if (chatActivityEnterView4 != null && chatActivityEnterView4.getEditField() != null) {
                                    this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                                }
                            } else if (this.bottomOverlayChat.getVisibility() == 0) {
                                this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, new View[]{this.bottomOverlayChat}, new boolean[]{true}, this.chatListView, measuredHeight2);
                            } else {
                                this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, null, null, this.chatListView, measuredHeight2);
                            }
                            closeMenu();
                            this.chatLayoutManager.setCanScrollVertically(true);
                            updatePinnedMessageView(true);
                            AnimatorSet animatorSet = new AnimatorSet();
                            ArrayList arrayList12 = new ArrayList();
                            for (int i42 = 0; i42 < this.actionModeViews.size(); i42++) {
                                View view3 = (View) this.actionModeViews.get(i42);
                                view3.setPivotY(ActionBar.getCurrentActionBarHeight() / 2);
                                AndroidUtilities.clearDrawableAnimation(view3);
                                arrayList12.add(ObjectAnimator.ofFloat(view3, View.SCALE_Y, 0.1f, 1.0f));
                            }
                            animatorSet.playTogether(arrayList12);
                            animatorSet.setDuration(250L);
                            animatorSet.start();
                            addToSelectedMessages(messageObject2, z2);
                            ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
                            if (chatActivityEnterView5 != null) {
                                chatActivityEnterView5.preventInput = true;
                            }
                            NumberTextView numberTextView = this.selectedMessagesCountTextView;
                            if (numberTextView != null) {
                                z20 = false;
                                numberTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), false);
                            } else {
                                z20 = false;
                            }
                            updateVisibleRows();
                            ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
                            if (chatActivityEnterView6 != null) {
                                chatActivityEnterView6.hideBotCommands();
                            }
                            return z20;
                        }
                        return false;
                    } else if (getParentActivity() == null) {
                        return false;
                    } else {
                        ArrayList arrayList13 = new ArrayList();
                        ArrayList arrayList14 = new ArrayList();
                        ArrayList arrayList15 = new ArrayList();
                        if (AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                            str3 = "";
                            TLRPC.Message message7 = messageObject2.messageOwner;
                            if (message7 != null && (peer = message7.from_id) != null) {
                                z10 = z9;
                                str4 = str2;
                                z11 = z25;
                                if (peer.user_id != getUserConfig().clientUserId && this.chatMode != 3) {
                                    arrayList14.add(LocaleController.getString(R.string.OpenProfile));
                                    arrayList15.add(104);
                                    arrayList13.add(Integer.valueOf(R.drawable.msg_user_search));
                                }
                                if (!getUserConfig().isPremium() && !getMessagesController().premiumFeaturesBlocked() && messageObject2.getDocument() != null && messageObject2.getDocument().size >= 157286400 && FileLoader.getInstance(this.currentAccount).isLoadingFile(FileLoader.getAttachFileName(messageObject2.getDocument())) && this.chatMode != 3) {
                                    arrayList14.add(LocaleController.getString(R.string.PremiumSpeedPromo));
                                    arrayList15.add(103);
                                    arrayList13.add(Integer.valueOf(R.drawable.msg_speed));
                                    if (SharedConfig.getDevicePerformanceClass() != 0) {
                                        TLRPC.TL_help_premiumPromo premiumPromo = MediaDataController.getInstance(this.currentAccount).getPremiumPromo();
                                        String featureTypeToServerString = PremiumPreviewFragment.featureTypeToServerString(2);
                                        if (premiumPromo != null) {
                                            int i43 = 0;
                                            while (true) {
                                                if (i43 >= premiumPromo.video_sections.size()) {
                                                    i43 = -1;
                                                    break;
                                                } else if (premiumPromo.video_sections.get(i43).equals(featureTypeToServerString)) {
                                                    break;
                                                } else {
                                                    i43++;
                                                }
                                            }
                                            if (i43 != -1) {
                                                z12 = z27;
                                                FileLoader.getInstance(this.currentAccount).loadFile(premiumPromo.videos.get(i43), premiumPromo, 3, 0);
                                                iArr = new int[]{messageObject2.getId()};
                                                if ((messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL) || !z24) {
                                                    z13 = z28;
                                                } else {
                                                    z13 = z28;
                                                    if (this.dialog_id >= 0 || ((chat7 = this.currentChat) != null && ChatObject.canUserDoAdminAction(chat7, 13))) {
                                                        AutoDeletePopupWrapper autoDeletePopupWrapper = new AutoDeletePopupWrapper(this.contentView.getContext(), null, new AutoDeletePopupWrapper.Callback() { // from class: org.telegram.ui.ChatActivity.124
                                                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                                                            public void dismiss() {
                                                                ActionBarPopupWindow actionBarPopupWindow2 = ChatActivity.this.scrimPopupWindow;
                                                                if (actionBarPopupWindow2 != null) {
                                                                    actionBarPopupWindow2.dismiss();
                                                                }
                                                            }

                                                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                                                            public void setAutoDeleteHistory(int i44, int i45) {
                                                                ChatActivity.this.getMessagesController().setDialogHistoryTTL(ChatActivity.this.dialog_id, i44);
                                                                ChatActivity chatActivity2 = ChatActivity.this;
                                                                if (chatActivity2.userInfo == null && chatActivity2.chatInfo == null) {
                                                                    return;
                                                                }
                                                                chatActivity2.createUndoView();
                                                                if (ChatActivity.this.undoView == null) {
                                                                    return;
                                                                }
                                                                UndoView undoView3 = ChatActivity.this.undoView;
                                                                long j2 = ChatActivity.this.dialog_id;
                                                                ChatActivity chatActivity3 = ChatActivity.this;
                                                                TLRPC.User user5 = chatActivity3.currentUser;
                                                                TLRPC.UserFull userFull3 = chatActivity3.userInfo;
                                                                undoView3.showWithAction(j2, i45, user5, Integer.valueOf(userFull3 != null ? userFull3.ttl_period : chatActivity3.chatInfo.ttl_period), (Runnable) null, (Runnable) null);
                                                            }

                                                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                                                            public /* synthetic */ void showGlobalAutoDeleteScreen() {
                                                                AutoDeletePopupWrapper.Callback.-CC.$default$showGlobalAutoDeleteScreen(this);
                                                            }
                                                        }, true, 0, getResourceProvider());
                                                        TLRPC.UserFull userFull3 = this.userInfo;
                                                        autoDeletePopupWrapper.lambda$updateItems$7(userFull3 != null ? userFull3.ttl_period : this.chatInfo.ttl_period);
                                                        actionBarPopupWindowLayout = autoDeletePopupWrapper.windowLayout;
                                                        charSequence = null;
                                                        j = 0;
                                                        messageObject3 = this.selectedObject;
                                                        if (messageObject3 != null && messageObject3.isHiddenSensitive() && !this.selectedObject.isMediaSpoilersRevealed) {
                                                            i20 = 0;
                                                            while (i20 < arrayList15.size()) {
                                                                int intValue = ((Integer) arrayList15.get(i20)).intValue();
                                                                if (intValue != 2 && intValue != 4 && intValue != 10) {
                                                                    if (intValue != 6) {
                                                                        if (intValue != 7) {
                                                                        }
                                                                    }
                                                                }
                                                                arrayList15.remove(i20);
                                                                arrayList14.remove(i20);
                                                                arrayList13.remove(i20);
                                                                i20--;
                                                                i20++;
                                                            }
                                                        }
                                                        if (!arrayList15.isEmpty() && actionBarPopupWindowLayout == null) {
                                                            return false;
                                                        }
                                                        if (this.scrimPopupWindow != null) {
                                                            closeMenu();
                                                            this.menuDeleteItem = null;
                                                            this.scrimPopupWindowItems = null;
                                                            return false;
                                                        }
                                                        AtomicBoolean atomicBoolean4 = new AtomicBoolean(false);
                                                        AtomicReference atomicReference4 = new AtomicReference(null);
                                                        Rect rect3 = new Rect();
                                                        List<TLRPC.TL_availableReaction> enabledReactionsList = getMediaDataController().getEnabledReactionsList();
                                                        boolean z29 = !isSecretChat() && !isInScheduleMode() && this.currentUser == null && messageObject.hasReactions() && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && !enabledReactionsList.isEmpty() && messageObject.messageOwner.reactions.can_see_list && !messageObject.isSecretMedia();
                                                        if (messageObject2.isForwardedChannelPost()) {
                                                            TLRPC.ChatFull chatFull2 = getMessagesController().getChatFull(-messageObject2.getFromChatId());
                                                            z14 = chatFull2 == null || !(isSecretChat() || this.chatMode == 5 || isInScheduleMode() || !messageObject.isReactionsAvailable() || (((chatFull2.available_reactions instanceof TLRPC.TL_chatReactionsNone) && !chatFull2.paid_reactions_available) || enabledReactionsList.isEmpty()));
                                                        } else if (!messageObject2.isSecretMedia()) {
                                                            if (this.chatMode != 5) {
                                                                if (!isSecretChat()) {
                                                                    if (!isInScheduleMode()) {
                                                                        if (messageObject.isReactionsAvailable()) {
                                                                            TLRPC.ChatFull chatFull3 = this.chatInfo;
                                                                            if (chatFull3 != null) {
                                                                                if (chatFull3.available_reactions instanceof TLRPC.TL_chatReactionsNone) {
                                                                                }
                                                                            }
                                                                            if (chatFull3 == null) {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        boolean z30 = (z29 || isInScheduleMode() || this.currentChat == null || !messageObject2.isOutOwner() || !messageObject2.isSent() || messageObject2.isEditing() || messageObject2.isSending() || messageObject2.isSendError() || messageObject2.isContentUnread() || messageObject2.isUnread() || ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject2.messageOwner.date >= getMessagesController().chatReadMarkExpirePeriod || (!ChatObject.isMegagroup(this.currentChat) && ChatObject.isChannel(this.currentChat)) || (chatFull = this.chatInfo) == null || chatFull.participants_count > getMessagesController().chatReadMarkSizeThreshold || (messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionChatJoinedByRequest) || !z5) ? false : true;
                                                        if (!z29 && this.currentChat == null && this.currentEncryptedChat == null && (user2 = this.currentUser) != null && !UserObject.isUserSelf(user2) && !UserObject.isReplyUser(this.currentUser) && !UserObject.isAnonymous(this.currentUser)) {
                                                            TLRPC.User user5 = this.currentUser;
                                                            if (!user5.bot && !UserObject.isService(user5.id) && (((userFull = this.userInfo) == null || !userFull.read_dates_private) && !isInScheduleMode() && messageObject2.isOutOwner() && messageObject2.isSent() && !messageObject2.isEditing() && !messageObject2.isSending() && !messageObject2.isSendError() && !messageObject2.isContentUnread() && !messageObject2.isUnread() && ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject2.messageOwner.date < getMessagesController().pmReadDateExpirePeriod && !(messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionChatJoinedByRequest) && z5)) {
                                                                z15 = true;
                                                                messageObject4 = this.selectedObject;
                                                                if (messageObject4 != null && messageObject4.isSponsored()) {
                                                                    messageObject16 = this.selectedObject;
                                                                    if (messageObject16.sponsoredInfo == null && messageObject16.sponsoredAdditionalInfo == null) {
                                                                        str5 = messageObject16.sponsoredUrl;
                                                                        if (str5 != null) {
                                                                        }
                                                                    }
                                                                    z16 = true;
                                                                    boolean z31 = this.chatMode != 3 ? false : z30;
                                                                    int i44 = (!z29 || z31 || z16) ? 1 : 0;
                                                                    Activity parentActivity = getParentActivity();
                                                                    int i45 = R.drawable.popup_fixed_alert;
                                                                    final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout10 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity, i45, this.themeDelegate, i44);
                                                                    actionBarPopupWindowLayout10.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                                    Rect rect4 = new Rect();
                                                                    getParentActivity().getResources().getDrawable(i45).mutate().getPadding(rect4);
                                                                    actionBarPopupWindowLayout10.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                                                    if (actionBarPopupWindowLayout != null) {
                                                                        if (z29) {
                                                                            ReactedHeaderView reactedHeaderView3 = new ReactedHeaderView(this.contentView.getContext(), this.currentAccount, messageObject, this.dialog_id);
                                                                            TLRPC.TL_messageReactions tL_messageReactions = messageObject.messageOwner.reactions;
                                                                            if (tL_messageReactions != null) {
                                                                                Iterator<TLRPC.ReactionCount> it2 = tL_messageReactions.results.iterator();
                                                                                int i46 = 0;
                                                                                while (it2.hasNext()) {
                                                                                    i46 += it2.next().count;
                                                                                }
                                                                                i17 = i46;
                                                                                i16 = 10;
                                                                            } else {
                                                                                i16 = 10;
                                                                                i17 = 0;
                                                                            }
                                                                            if (i17 > i16 && messageObject.messageOwner.reactions.results.size() > 1) {
                                                                                r5 = 1;
                                                                                ReactedUsersListView.ContainerLinerLayout containerLinerLayout2 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                                                                containerLinerLayout2.hasHeader = r5;
                                                                                containerLinerLayout2.setOrientation(1);
                                                                                int dp = AndroidUtilities.dp(200.0f);
                                                                                if (r5 == 0) {
                                                                                    reactedHeaderView = reactedHeaderView3;
                                                                                    i18 = 96;
                                                                                } else {
                                                                                    reactedHeaderView = reactedHeaderView3;
                                                                                    i18 = 44;
                                                                                }
                                                                                containerLinerLayout2.setLayoutParams(new FrameLayout.LayoutParams(dp, AndroidUtilities.dp(i18 + NotificationCenter.onReceivedChannelDifference) + (r5 ^ 1)));
                                                                                ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                                                                actionBarMenuSubItem.setItemHeight(44);
                                                                                actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
                                                                                actionBarMenuSubItem.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                                                actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda151
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.lambda$createMenu$220(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view4);
                                                                                    }
                                                                                });
                                                                                containerLinerLayout2.addView(actionBarMenuSubItem, LayoutHelper.createLinear(-1, -2));
                                                                                int[] iArr5 = new int[1];
                                                                                if (r5 == 0) {
                                                                                    ArrayList<TLRPC.ReactionCount> arrayList16 = messageObject.messageOwner.reactions.results;
                                                                                    final LinearLayout linearLayout = new LinearLayout(this.contentView.getContext());
                                                                                    linearLayout.setOrientation(0);
                                                                                    final ViewPager viewPager = new ViewPager(this.contentView.getContext());
                                                                                    final HorizontalScrollView horizontalScrollView = new HorizontalScrollView(this.contentView.getContext());
                                                                                    final AtomicBoolean atomicBoolean5 = new AtomicBoolean();
                                                                                    MessageObject messageObject24 = messageObject;
                                                                                    ?? r4 = arrayList16.size() > 1 ? 1 : 0;
                                                                                    final int size3 = arrayList16.size() + r4;
                                                                                    int i47 = 0;
                                                                                    while (true) {
                                                                                        iArr4 = iArr5;
                                                                                        if (i47 >= size3) {
                                                                                            break;
                                                                                        }
                                                                                        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout11 = actionBarPopupWindowLayout;
                                                                                        final ReactionTabHolderView reactionTabHolderView = new ReactionTabHolderView(this.contentView.getContext());
                                                                                        int i48 = r4 != 0 ? i47 - 1 : i47;
                                                                                        if (i48 < 0) {
                                                                                            reactionTabHolderView.setCounter(i17);
                                                                                            i19 = i17;
                                                                                        } else {
                                                                                            i19 = i17;
                                                                                            reactionTabHolderView.setCounter(this.currentAccount, arrayList16.get(i48));
                                                                                        }
                                                                                        final int i49 = i47;
                                                                                        reactionTabHolderView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda156
                                                                                            @Override // android.view.View.OnClickListener
                                                                                            public final void onClick(View view4) {
                                                                                                ChatActivity.lambda$createMenu$222(ViewPager.this, i49, linearLayout, atomicBoolean5, horizontalScrollView, reactionTabHolderView, view4);
                                                                                            }
                                                                                        });
                                                                                        linearLayout.addView(reactionTabHolderView, LayoutHelper.createFrameRelatively(-2.0f, -1.0f, 16, i47 == 0 ? 6.0f : 0.0f, 6.0f, 6.0f, 6.0f));
                                                                                        i47++;
                                                                                        iArr5 = iArr4;
                                                                                        actionBarPopupWindowLayout = actionBarPopupWindowLayout11;
                                                                                        i17 = i19;
                                                                                    }
                                                                                    ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout12 = actionBarPopupWindowLayout;
                                                                                    int i50 = i17;
                                                                                    horizontalScrollView.setHorizontalScrollBarEnabled(false);
                                                                                    horizontalScrollView.addView(linearLayout);
                                                                                    containerLinerLayout2.addView(horizontalScrollView, LayoutHelper.createLinear(-1, 44));
                                                                                    FrameLayout frameLayout = new FrameLayout(this.contentView.getContext());
                                                                                    frameLayout.setBackgroundColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                                                                    containerLinerLayout2.addView(frameLayout, new LinearLayout.LayoutParams(-1, (int) Theme.dividerPaint.getStrokeWidth()));
                                                                                    int dp2 = AndroidUtilities.dp(88.0f) + 1;
                                                                                    SparseArray sparseArray = new SparseArray();
                                                                                    final SparseIntArray sparseIntArray = new SparseIntArray();
                                                                                    int i51 = 0;
                                                                                    while (true) {
                                                                                        containerLinerLayout = containerLinerLayout2;
                                                                                        if (i51 >= arrayList16.size() + 1) {
                                                                                            break;
                                                                                        }
                                                                                        sparseIntArray.put(i51, AndroidUtilities.dp(300.0f) + dp2);
                                                                                        i51++;
                                                                                        containerLinerLayout2 = containerLinerLayout;
                                                                                    }
                                                                                    rect2 = rect3;
                                                                                    atomicReference2 = atomicReference4;
                                                                                    ReactedHeaderView reactedHeaderView4 = reactedHeaderView;
                                                                                    atomicBoolean2 = atomicBoolean4;
                                                                                    rect = rect4;
                                                                                    arrayList = arrayList15;
                                                                                    messageObject8 = messageObject2;
                                                                                    actionBarPopupWindowLayout3 = actionBarPopupWindowLayout12;
                                                                                    i = 24;
                                                                                    iArr2 = iArr;
                                                                                    arrayList2 = arrayList14;
                                                                                    arrayList3 = arrayList13;
                                                                                    viewPager.setAdapter(new 125(size3, sparseArray, r4, arrayList16, messageObject2, reactedHeaderView4, messageObject24, sparseIntArray, dp2, viewPager, actionBarPopupWindowLayout10, iArr4, i50));
                                                                                    viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { // from class: org.telegram.ui.ChatActivity.126
                                                                                        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                                                        public void onPageScrollStateChanged(int i52) {
                                                                                            if (i52 == 0) {
                                                                                                atomicBoolean5.set(false);
                                                                                            }
                                                                                        }

                                                                                        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                                                        public void onPageScrolled(int i52, float f4, int i53) {
                                                                                            if (atomicBoolean5.get()) {
                                                                                                return;
                                                                                            }
                                                                                            int i54 = 0;
                                                                                            float f5 = -1.0f;
                                                                                            float f6 = -1.0f;
                                                                                            while (i54 < linearLayout.getChildCount()) {
                                                                                                ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(i54);
                                                                                                reactionTabHolderView2.setOutlineProgress(i54 == i52 ? 1.0f - f4 : i54 == (i52 + 1) % size3 ? f4 : 0.0f);
                                                                                                if (i54 == i52) {
                                                                                                    f5 = reactionTabHolderView2.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView2.getWidth()) / 2.0f);
                                                                                                }
                                                                                                if (i54 == i52 + 1) {
                                                                                                    f6 = reactionTabHolderView2.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView2.getWidth()) / 2.0f);
                                                                                                }
                                                                                                i54++;
                                                                                            }
                                                                                            if (f5 != -1.0f && f6 != -1.0f) {
                                                                                                horizontalScrollView.setScrollX((int) (f5 + ((f6 - f5) * f4)));
                                                                                            }
                                                                                            actionBarPopupWindowLayout10.getSwipeBack().setNewForegroundHeight(iArr4[0], (int) ((sparseIntArray.get(i52, 0) * (1.0f - f4)) + (sparseIntArray.get(i52 + 1, 0) * f4)), false);
                                                                                        }

                                                                                        @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                                                        public void onPageSelected(int i52) {
                                                                                            actionBarPopupWindowLayout10.getSwipeBack().setNewForegroundHeight(iArr4[0], sparseIntArray.get(i52), true);
                                                                                        }
                                                                                    });
                                                                                    i7 = -1;
                                                                                    containerLinerLayout2 = containerLinerLayout;
                                                                                    containerLinerLayout2.addView(viewPager, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                                                    chatActivity = this;
                                                                                    reactedHeaderView2 = reactedHeaderView4;
                                                                                    messageObject9 = messageObject24;
                                                                                    actionBarPopupWindowLayout9 = actionBarPopupWindowLayout10;
                                                                                    iArr3 = iArr4;
                                                                                    onHeightChangedListener = null;
                                                                                    c = 0;
                                                                                    i8 = 8;
                                                                                } else {
                                                                                    MessageObject messageObject25 = messageObject;
                                                                                    messageObject8 = messageObject2;
                                                                                    actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                                                                    iArr2 = iArr;
                                                                                    arrayList2 = arrayList14;
                                                                                    arrayList3 = arrayList13;
                                                                                    atomicReference2 = atomicReference4;
                                                                                    ReactedHeaderView reactedHeaderView5 = reactedHeaderView;
                                                                                    atomicBoolean2 = atomicBoolean4;
                                                                                    arrayList = arrayList15;
                                                                                    rect2 = rect3;
                                                                                    rect = rect4;
                                                                                    i7 = -1;
                                                                                    i = 24;
                                                                                    chatActivity = this;
                                                                                    i8 = 8;
                                                                                    containerLinerLayout2.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                                                    messageObject9 = messageObject25;
                                                                                    actionBarPopupWindowLayout9 = actionBarPopupWindowLayout10;
                                                                                    iArr3 = iArr5;
                                                                                    onHeightChangedListener = new ReactedUsersListView(chatActivity.contentView.getContext(), chatActivity.themeDelegate, chatActivity.currentAccount, messageObject25, null, false, true).setSeenUsers(reactedHeaderView5.getSeenUsers()).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda157
                                                                                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                                                                                        public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList17) {
                                                                                            ChatActivity.this.lambda$createMenu$223(reactedUsersListView, arrayList17);
                                                                                        }
                                                                                    }).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda158
                                                                                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                                                                                        public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j2, TLRPC.MessagePeerReaction messagePeerReaction) {
                                                                                            ChatActivity.this.lambda$createMenu$224(messageObject9, reactedUsersListView, j2, messagePeerReaction);
                                                                                        }
                                                                                    }).setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda159
                                                                                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnHeightChangedListener
                                                                                        public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i52) {
                                                                                            ChatActivity.lambda$createMenu$225(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, iArr3, reactedUsersListView, i52);
                                                                                        }
                                                                                    });
                                                                                    Objects.requireNonNull(onHeightChangedListener);
                                                                                    reactedHeaderView2 = reactedHeaderView5;
                                                                                    reactedHeaderView2.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda160(onHeightChangedListener));
                                                                                    c = 0;
                                                                                    containerLinerLayout2.addView(onHeightChangedListener, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                                                }
                                                                                iArr3[c] = actionBarPopupWindowLayout9.addViewToSwipeBack(containerLinerLayout2);
                                                                                reactedHeaderView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda161
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.lambda$createMenu$226(ReactedUsersListView.this, actionBarPopupWindowLayout9, iArr3, view4);
                                                                                    }
                                                                                });
                                                                                actionBarPopupWindowLayout9.addView(reactedHeaderView2, LayoutHelper.createLinear(i7, 48));
                                                                                z18 = true;
                                                                                actionBarPopupWindowLayout7 = actionBarPopupWindowLayout9;
                                                                            }
                                                                            r5 = 0;
                                                                            ReactedUsersListView.ContainerLinerLayout containerLinerLayout22 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                                                            containerLinerLayout22.hasHeader = r5;
                                                                            containerLinerLayout22.setOrientation(1);
                                                                            int dp3 = AndroidUtilities.dp(200.0f);
                                                                            if (r5 == 0) {
                                                                            }
                                                                            containerLinerLayout22.setLayoutParams(new FrameLayout.LayoutParams(dp3, AndroidUtilities.dp(i18 + NotificationCenter.onReceivedChannelDifference) + (r5 ^ 1)));
                                                                            ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                                                            actionBarMenuSubItem2.setItemHeight(44);
                                                                            actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
                                                                            actionBarMenuSubItem2.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                                            actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda151
                                                                                @Override // android.view.View.OnClickListener
                                                                                public final void onClick(View view4) {
                                                                                    ChatActivity.lambda$createMenu$220(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view4);
                                                                                }
                                                                            });
                                                                            containerLinerLayout22.addView(actionBarMenuSubItem2, LayoutHelper.createLinear(-1, -2));
                                                                            int[] iArr52 = new int[1];
                                                                            if (r5 == 0) {
                                                                            }
                                                                            iArr3[c] = actionBarPopupWindowLayout9.addViewToSwipeBack(containerLinerLayout22);
                                                                            reactedHeaderView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda161
                                                                                @Override // android.view.View.OnClickListener
                                                                                public final void onClick(View view4) {
                                                                                    ChatActivity.lambda$createMenu$226(ReactedUsersListView.this, actionBarPopupWindowLayout9, iArr3, view4);
                                                                                }
                                                                            });
                                                                            actionBarPopupWindowLayout9.addView(reactedHeaderView2, LayoutHelper.createLinear(i7, 48));
                                                                            z18 = true;
                                                                            actionBarPopupWindowLayout7 = actionBarPopupWindowLayout9;
                                                                        } else {
                                                                            atomicReference2 = atomicReference4;
                                                                            atomicBoolean2 = atomicBoolean4;
                                                                            rect = rect4;
                                                                            actionBarPopupWindowLayout7 = actionBarPopupWindowLayout10;
                                                                            arrayList = arrayList15;
                                                                            messageObject8 = messageObject2;
                                                                            actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                                                            iArr2 = iArr;
                                                                            arrayList2 = arrayList14;
                                                                            arrayList3 = arrayList13;
                                                                            chatActivity = this;
                                                                            rect2 = rect3;
                                                                            i7 = -1;
                                                                            i8 = 8;
                                                                            i = 24;
                                                                            messageObject9 = messageObject;
                                                                            z18 = false;
                                                                        }
                                                                        if (z31) {
                                                                            messageObject10 = messageObject8;
                                                                            final MessageSeenView messageSeenView = new MessageSeenView(chatActivity.contentView.getContext(), chatActivity.currentAccount, messageObject10, chatActivity.currentChat);
                                                                            FrameLayout frameLayout2 = new FrameLayout(chatActivity.contentView.getContext());
                                                                            frameLayout2.addView(messageSeenView, LayoutHelper.createFrame(i7, -2.0f));
                                                                            ActionBarMenuSubItem actionBarMenuSubItem3 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                                            actionBarMenuSubItem3.setItemHeight(44);
                                                                            actionBarMenuSubItem3.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
                                                                            actionBarMenuSubItem3.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                                            FrameLayout frameLayout3 = new FrameLayout(chatActivity.contentView.getContext());
                                                                            final LinearLayout linearLayout2 = new LinearLayout(chatActivity.contentView.getContext());
                                                                            linearLayout2.setBackgroundColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                                                            linearLayout2.setOrientation(1);
                                                                            final RecyclerListView createListView = messageSeenView.createListView();
                                                                            frameLayout3.addView(actionBarMenuSubItem3);
                                                                            linearLayout2.addView(frameLayout3);
                                                                            linearLayout2.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(i7, i8));
                                                                            frameLayout3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.128
                                                                                @Override // android.view.View.OnClickListener
                                                                                public void onClick(View view4) {
                                                                                    Bulletin.hideVisible();
                                                                                    actionBarPopupWindowLayout7.getSwipeBack().closeForeground();
                                                                                }
                                                                            });
                                                                            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout13 = actionBarPopupWindowLayout7;
                                                                            messageSeenView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.129
                                                                                @Override // android.view.View.OnClickListener
                                                                                public void onClick(View view4) {
                                                                                    long j2;
                                                                                    String str6;
                                                                                    if (ChatActivity.this.scrimPopupWindow == null || messageSeenView.users.isEmpty()) {
                                                                                        return;
                                                                                    }
                                                                                    if (messageSeenView.users.size() != 1 || (messageSeenView.dates.size() > 0 && ((Integer) messageSeenView.dates.get(0)).intValue() > 0)) {
                                                                                        if (SharedConfig.messageSeenHintCount > 0 && ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f)) {
                                                                                            ChatActivity chatActivity2 = ChatActivity.this;
                                                                                            chatActivity2.messageSeenPrivacyBulletin = BulletinFactory.of(Bulletin.BulletinWindow.make(chatActivity2.getContext()), ChatActivity.this.themeDelegate).createErrorBulletin(AndroidUtilities.replaceTags(LocaleController.getString(R.string.MessageSeenTooltipMessage)));
                                                                                            ChatActivity.this.messageSeenPrivacyBulletin.setDuration(4000);
                                                                                            ChatActivity.this.messageSeenPrivacyBulletin.show();
                                                                                            SharedConfig.updateMessageSeenHintCount(SharedConfig.messageSeenHintCount - 1);
                                                                                        }
                                                                                        createListView.requestLayout();
                                                                                        linearLayout2.requestLayout();
                                                                                        createListView.getAdapter().notifyDataSetChanged();
                                                                                        actionBarPopupWindowLayout13.getSwipeBack().openForeground(r6[0]);
                                                                                        return;
                                                                                    }
                                                                                    TLObject tLObject = (TLObject) messageSeenView.users.get(0);
                                                                                    if (tLObject == null) {
                                                                                        return;
                                                                                    }
                                                                                    Bundle bundle = new Bundle();
                                                                                    if (!(tLObject instanceof TLRPC.User)) {
                                                                                        if (tLObject instanceof TLRPC.Chat) {
                                                                                            j2 = ((TLRPC.Chat) tLObject).id;
                                                                                            str6 = "chat_id";
                                                                                        }
                                                                                        ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                                                                                        ChatActivity.this.closeMenu();
                                                                                    }
                                                                                    j2 = ((TLRPC.User) tLObject).id;
                                                                                    str6 = "user_id";
                                                                                    bundle.putLong(str6, j2);
                                                                                    ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                                                                                    ChatActivity.this.closeMenu();
                                                                                }
                                                                            });
                                                                            linearLayout2.addView(createListView, LayoutHelper.createLinear(i7, -2));
                                                                            createListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda162
                                                                                @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                                                                                public final void onItemClick(View view4, int i52) {
                                                                                    ChatActivity.this.lambda$createMenu$227(messageSeenView, view4, i52);
                                                                                }
                                                                            });
                                                                            final int[] iArr6 = {actionBarPopupWindowLayout7.addViewToSwipeBack(linearLayout2)};
                                                                            actionBarPopupWindowLayout7.addView((View) frameLayout2, LayoutHelper.createLinear(i7, 44));
                                                                        } else {
                                                                            messageObject10 = messageObject8;
                                                                            if (z15) {
                                                                                actionBarPopupWindowLayout7.addView((View) new MessagePrivateSeenView(getContext(), messageObject10, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda130
                                                                                    @Override // java.lang.Runnable
                                                                                    public final void run() {
                                                                                        ChatActivity.this.lambda$createMenu$228();
                                                                                    }
                                                                                }, chatActivity.themeDelegate), LayoutHelper.createLinear(i7, 36));
                                                                            }
                                                                            MessageObject messageObject26 = chatActivity.selectedObject;
                                                                            z19 = (messageObject26 != null || !messageObject26.isVoice() || chatActivity.selectedObject.messageOwner == null || !getUserConfig().isPremium() || TextUtils.isEmpty(chatActivity.selectedObject.messageOwner.voiceTranscription) || (message2 = chatActivity.selectedObject.messageOwner) == null || message2.voiceTranscriptionRated || message2.voiceTranscriptionId == j || !message2.voiceTranscriptionOpen) ? false : true;
                                                                            if (!z19 && messageObject10.probablyRingtone() && chatActivity.currentEncryptedChat == null) {
                                                                                ActionBarMenuSubItem actionBarMenuSubItem4 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                                                actionBarMenuSubItem4.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                                                actionBarMenuSubItem4.setTextAndIcon(LocaleController.getString(R.string.SaveForNotifications), R.drawable.msg_tone_add);
                                                                                actionBarPopupWindowLayout7.addView(actionBarMenuSubItem4);
                                                                                actionBarMenuSubItem4.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda131
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.this.lambda$createMenu$229(messageObject10, view4);
                                                                                    }
                                                                                });
                                                                                z18 = true;
                                                                            }
                                                                            if (z18) {
                                                                                actionBarPopupWindowLayout7.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(i7, 8));
                                                                            }
                                                                            if (actionBarPopupWindowLayout7.getSwipeBack() != null) {
                                                                                actionBarPopupWindowLayout7.getSwipeBack().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda132
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.this.lambda$createMenu$230(view4);
                                                                                    }
                                                                                });
                                                                            }
                                                                            if (z19) {
                                                                                messageObject11 = messageObject10;
                                                                                messageObject5 = messageObject9;
                                                                            } else {
                                                                                ?? linearLayout3 = new LinearLayout(chatActivity.contentView.getContext());
                                                                                linearLayout3.setOrientation(1);
                                                                                LinearLayout.LayoutParams createLinear = LayoutHelper.createLinear(i7, 89);
                                                                                FrameLayout frameLayout4 = new FrameLayout(chatActivity.contentView.getContext());
                                                                                FrameLayout frameLayout5 = new FrameLayout(chatActivity.contentView.getContext());
                                                                                frameLayout5.setBackgroundColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                                                                TextView textView = new TextView(chatActivity.contentView.getContext());
                                                                                textView.setTextColor(chatActivity.getThemedColor(Theme.key_windowBackgroundWhiteGrayText));
                                                                                textView.setGravity(1);
                                                                                textView.setText(LocaleController.getString(R.string.RateTranscription));
                                                                                frameLayout4.addView(textView, LayoutHelper.createFrame(-1, -2.0f, 48, 0.0f, 12.0f, 0.0f, 0.0f));
                                                                                final boolean[] zArr = new boolean[1];
                                                                                final boolean[] zArr2 = new boolean[1];
                                                                                final ImageView imageView = new ImageView(chatActivity.contentView.getContext());
                                                                                int i52 = Theme.key_dialogButtonSelector;
                                                                                imageView.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i52), 0, 0));
                                                                                Drawable mutate = chatActivity.contentView.getContext().getResources().getDrawable(R.drawable.msg_rate_up).mutate();
                                                                                int i53 = Theme.key_actionBarDefaultSubmenuItemIcon;
                                                                                int themedColor = chatActivity.getThemedColor(i53);
                                                                                PorterDuff.Mode mode = PorterDuff.Mode.SRC_IN;
                                                                                mutate.setColorFilter(new PorterDuffColorFilter(themedColor, mode));
                                                                                messageObject11 = messageObject10;
                                                                                messageObject5 = messageObject9;
                                                                                imageView.setImageDrawable(new CrossfadeDrawable(mutate, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor(i53))));
                                                                                imageView.setContentDescription(LocaleController.getString(R.string.AccDescrRateTranscriptionUp));
                                                                                frameLayout4.addView(imageView, LayoutHelper.createFrame(33, 33.0f, 49, -42.0f, 39.0f, 0.0f, 0.0f));
                                                                                final ImageView imageView2 = new ImageView(chatActivity.contentView.getContext());
                                                                                imageView2.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i52), 0, 0));
                                                                                Drawable mutate2 = chatActivity.contentView.getContext().getResources().getDrawable(R.drawable.msg_rate_down).mutate();
                                                                                mutate2.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor(i53), mode));
                                                                                imageView2.setImageDrawable(new CrossfadeDrawable(mutate2, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor(i53))));
                                                                                imageView2.setContentDescription(LocaleController.getString(R.string.AccDescrRateTranscriptionDown));
                                                                                frameLayout4.addView(imageView2, LayoutHelper.createFrame(33, 33.0f, 49, 42.0f, 39.0f, 0.0f, 0.0f));
                                                                                final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda133
                                                                                    @Override // java.lang.Runnable
                                                                                    public final void run() {
                                                                                        ChatActivity.this.lambda$createMenu$235(zArr2, zArr, imageView, imageView2);
                                                                                    }
                                                                                };
                                                                                imageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda134
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.lambda$createMenu$236(zArr, runnable, view4);
                                                                                    }
                                                                                });
                                                                                imageView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda135
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.lambda$createMenu$237(zArr, runnable, view4);
                                                                                    }
                                                                                });
                                                                                linearLayout3.addView(frameLayout4, LayoutHelper.createLinear(-1, 81));
                                                                                linearLayout3.addView(frameLayout5, LayoutHelper.createLinear(-1, 8));
                                                                                actionBarPopupWindowLayout7.addView((View) linearLayout3, createLinear);
                                                                            }
                                                                            messageObject12 = chatActivity.selectedObject;
                                                                            if (messageObject12 == null && messageObject12.isSponsored()) {
                                                                                MessageObject messageObject27 = chatActivity.selectedObject;
                                                                                if (messageObject27.sponsoredInfo == null && messageObject27.sponsoredAdditionalInfo == null) {
                                                                                    String str6 = messageObject27.sponsoredUrl;
                                                                                    if (str6 != null) {
                                                                                    }
                                                                                    i12 = 6;
                                                                                    f3 = 14.0f;
                                                                                    inputPeer = null;
                                                                                    if (!chatActivity.selectedObject.sponsoredCanReport) {
                                                                                        FrameLayout frameLayout6 = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.131
                                                                                            @Override // android.widget.FrameLayout, android.view.View
                                                                                            protected void onMeasure(int i54, int i55) {
                                                                                                super.onMeasure(i54, i55);
                                                                                            }
                                                                                        };
                                                                                        frameLayout6.setMinimumHeight(AndroidUtilities.dp(56.0f));
                                                                                        int themedColor2 = chatActivity.getThemedColor(Theme.key_dialogButtonSelector);
                                                                                        if (actionBarPopupWindowLayout7.getItemsCount() <= 0) {
                                                                                            i15 = 0;
                                                                                        } else {
                                                                                            i15 = 0;
                                                                                            i12 = 0;
                                                                                        }
                                                                                        frameLayout6.setBackground(Theme.createRadSelectorDrawable(themedColor2, i12, i15));
                                                                                        frameLayout6.setPadding(AndroidUtilities.dp(18.0f), i15, AndroidUtilities.dp(18.0f), i15);
                                                                                        ImageView imageView3 = new ImageView(getParentActivity());
                                                                                        imageView3.setScaleType(ImageView.ScaleType.CENTER);
                                                                                        imageView3.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon), PorterDuff.Mode.MULTIPLY));
                                                                                        imageView3.setImageResource(R.drawable.msg_info);
                                                                                        frameLayout6.addView(imageView3, LayoutHelper.createFrame(-2, 40, (LocaleController.isRTL ? 5 : 3) | 16));
                                                                                        TextView textView2 = new TextView(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.132
                                                                                            @Override // android.widget.TextView, android.view.View
                                                                                            protected void onMeasure(int i54, int i55) {
                                                                                                if (View.MeasureSpec.getMode(i54) == Integer.MIN_VALUE && getLayout() != null) {
                                                                                                    Layout layout = getLayout();
                                                                                                    int i56 = 0;
                                                                                                    for (int i57 = 0; i57 < layout.getLineCount(); i57++) {
                                                                                                        i56 = Math.max(i56, (int) Math.ceil(layout.getLineWidth(i57)));
                                                                                                    }
                                                                                                    i54 = View.MeasureSpec.makeMeasureSpec(getPaddingLeft() + i56 + getPaddingRight(), 1073741824);
                                                                                                }
                                                                                                super.onMeasure(i54, i55);
                                                                                            }
                                                                                        };
                                                                                        textView2.setMaxLines(3);
                                                                                        textView2.setGravity(3);
                                                                                        textView2.setEllipsize(TextUtils.TruncateAt.END);
                                                                                        textView2.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                                                        textView2.setTextSize(1, f3);
                                                                                        textView2.setMaxWidth(AndroidUtilities.dp(240.0f));
                                                                                        textView2.setText(LocaleController.getString(R.string.SponsoredMessageInfo));
                                                                                        textView2.setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(43.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(43.0f) : 0, 0);
                                                                                        frameLayout6.addView(textView2, LayoutHelper.createFrame(-2, -2, (LocaleController.isRTL ? 5 : 3) | 16));
                                                                                        actionBarPopupWindowLayout7.addView(frameLayout6);
                                                                                        frameLayout6.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda143
                                                                                            @Override // android.view.View.OnClickListener
                                                                                            public final void onClick(View view4) {
                                                                                                ChatActivity.this.lambda$createMenu$244(view4);
                                                                                            }
                                                                                        });
                                                                                        actionBarPopupWindowLayout7.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                                                        chatActivity.scrimPopupWindowItems = new ActionBarMenuSubItem[arrayList2.size()];
                                                                                        size = arrayList2.size();
                                                                                        i9 = 0;
                                                                                        while (i9 < size) {
                                                                                            final ActionBarMenuSubItem actionBarMenuSubItem5 = new ActionBarMenuSubItem(getParentActivity(), i9 == 0, i9 == size + (-1), chatActivity.themeDelegate);
                                                                                            actionBarMenuSubItem5.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                                                            ArrayList arrayList17 = arrayList2;
                                                                                            ArrayList arrayList18 = arrayList3;
                                                                                            actionBarMenuSubItem5.setTextAndIcon((CharSequence) arrayList17.get(i9), ((Integer) arrayList18.get(i9)).intValue());
                                                                                            final ArrayList arrayList19 = arrayList;
                                                                                            Integer num2 = (Integer) arrayList19.get(i9);
                                                                                            if (num2.intValue() == 1 && (messageObject15 = chatActivity.selectedObject) != null && messageObject15.messageOwner.ttl_period != 0) {
                                                                                                chatActivity.menuDeleteItem = actionBarMenuSubItem5;
                                                                                                chatActivity.updateDeleteItemRunnable.run();
                                                                                                actionBarMenuSubItem5.setSubtextColor(chatActivity.getThemedColor(Theme.key_windowBackgroundWhiteGrayText6));
                                                                                            }
                                                                                            chatActivity.scrimPopupWindowItems[i9] = actionBarMenuSubItem5;
                                                                                            if (num2.intValue() == 35) {
                                                                                                actionBarPopupWindowLayout7.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                                                            }
                                                                                            actionBarPopupWindowLayout7.addView(actionBarMenuSubItem5);
                                                                                            actionBarMenuSubItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda144
                                                                                                @Override // android.view.View.OnClickListener
                                                                                                public final void onClick(View view4) {
                                                                                                    ChatActivity.this.lambda$createMenu$245(i9, arrayList19, view4);
                                                                                                }
                                                                                            });
                                                                                            if (num2.intValue() == 29) {
                                                                                                final boolean isContextTranslateEnabled = getMessagesController().getTranslateController().isContextTranslateEnabled();
                                                                                                final String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
                                                                                                final String toLanguage = TranslateAlert2.getToLanguage();
                                                                                                final Utilities.CallbackReturn callbackReturn = new Utilities.CallbackReturn() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda145
                                                                                                    @Override // org.telegram.messenger.Utilities.CallbackReturn
                                                                                                    public final Object run(Object obj) {
                                                                                                        Boolean lambda$createMenu$246;
                                                                                                        lambda$createMenu$246 = ChatActivity.this.lambda$createMenu$246(view, (URLSpan) obj);
                                                                                                        return lambda$createMenu$246;
                                                                                                    }
                                                                                                };
                                                                                                MessageObject messageObject28 = chatActivity.selectedObject;
                                                                                                if (messageObject28 != null) {
                                                                                                    inputPeer3 = (messageObject28.isPoll() || chatActivity.selectedObject.isVoiceTranscriptionOpen() || chatActivity.selectedObject.isSponsored() || chatActivity.selectedObject.scheduled) ? inputPeer : inputPeer;
                                                                                                    messageObject14 = chatActivity.selectedObject;
                                                                                                    if (messageObject14 != null || (message = messageObject14.messageOwner) == null || message.originalLanguage == null) {
                                                                                                        arrayList4 = arrayList19;
                                                                                                        arrayList5 = arrayList18;
                                                                                                        arrayList6 = arrayList17;
                                                                                                        i10 = i9;
                                                                                                        i11 = size;
                                                                                                        actionBarPopupWindowLayout8 = actionBarPopupWindowLayout7;
                                                                                                        atomicBoolean3 = atomicBoolean2;
                                                                                                        messageObject13 = messageObject11;
                                                                                                        if (LanguageDetector.hasSupport()) {
                                                                                                            atomicReference3 = atomicReference2;
                                                                                                            inputPeer2 = null;
                                                                                                            if (isContextTranslateEnabled) {
                                                                                                                final TLRPC.InputPeer inputPeer4 = inputPeer3;
                                                                                                                final int[] iArr7 = iArr2;
                                                                                                                final CharSequence charSequence3 = charSequence;
                                                                                                                final boolean z32 = z26;
                                                                                                                actionBarMenuSubItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda152
                                                                                                                    @Override // android.view.View.OnClickListener
                                                                                                                    public final void onClick(View view4) {
                                                                                                                        ChatActivity.this.lambda$createMenu$255(i10, arrayList4, inputPeer4, iArr7, toLanguage, charSequence3, z32, callbackReturn, view4);
                                                                                                                    }
                                                                                                                });
                                                                                                            } else {
                                                                                                                actionBarMenuSubItem5.setVisibility(8);
                                                                                                            }
                                                                                                        } else {
                                                                                                            inputPeer2 = null;
                                                                                                            final String[] strArr = {null};
                                                                                                            actionBarMenuSubItem5.setVisibility(8);
                                                                                                            atomicBoolean3.set(true);
                                                                                                            final AtomicReference atomicReference5 = atomicReference2;
                                                                                                            LanguageDetector.detectLanguage(charSequence.toString(), new LanguageDetector.StringCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda147
                                                                                                                @Override // org.telegram.messenger.LanguageDetector.StringCallback
                                                                                                                public final void run(String str7) {
                                                                                                                    ChatActivity.this.lambda$createMenu$249(strArr, toLanguage, language, isContextTranslateEnabled, actionBarMenuSubItem5, atomicBoolean3, atomicReference5, str7);
                                                                                                                }
                                                                                                            }, new LanguageDetector.ExceptionCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda148
                                                                                                                @Override // org.telegram.messenger.LanguageDetector.ExceptionCallback
                                                                                                                public final void run(Exception exc) {
                                                                                                                    ChatActivity.lambda$createMenu$250(atomicBoolean3, atomicReference5, exc);
                                                                                                                }
                                                                                                            });
                                                                                                            final TLRPC.InputPeer inputPeer5 = inputPeer3;
                                                                                                            final int[] iArr8 = iArr2;
                                                                                                            final CharSequence charSequence4 = charSequence;
                                                                                                            final boolean z33 = z26;
                                                                                                            actionBarMenuSubItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda149
                                                                                                                @Override // android.view.View.OnClickListener
                                                                                                                public final void onClick(View view4) {
                                                                                                                    ChatActivity.this.lambda$createMenu$252(i10, arrayList4, strArr, toLanguage, language, inputPeer5, iArr8, charSequence4, z33, callbackReturn, view4);
                                                                                                                }
                                                                                                            });
                                                                                                            actionBarMenuSubItem5.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda150
                                                                                                                @Override // java.lang.Runnable
                                                                                                                public final void run() {
                                                                                                                    ChatActivity.lambda$createMenu$253(atomicReference5);
                                                                                                                }
                                                                                                            }, 250L);
                                                                                                            atomicReference3 = atomicReference5;
                                                                                                        }
                                                                                                    } else {
                                                                                                        atomicBoolean3 = atomicBoolean2;
                                                                                                        atomicBoolean3.set(false);
                                                                                                        final String str7 = chatActivity.selectedObject.messageOwner.originalLanguage;
                                                                                                        actionBarMenuSubItem5.setVisibility((str7 == null || (str7.equals(toLanguage) && str7.equals(language) && !str7.equals(TranslateController.UNKNOWN_LANGUAGE)) || ((!isContextTranslateEnabled || RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(str7)) && ((((chat = chatActivity.currentChat) == null || !(chat.has_link || ChatObject.isPublic(chat))) && chatActivity.selectedObject.messageOwner.fwd_from == null) || !("uk".equals(str7) || "ru".equals(str7))))) ? 8 : 0);
                                                                                                        final int i54 = i9;
                                                                                                        arrayList4 = arrayList19;
                                                                                                        arrayList5 = arrayList18;
                                                                                                        arrayList6 = arrayList17;
                                                                                                        final TLRPC.InputPeer inputPeer6 = inputPeer3;
                                                                                                        final int[] iArr9 = iArr2;
                                                                                                        i10 = i9;
                                                                                                        final CharSequence charSequence5 = charSequence;
                                                                                                        i11 = size;
                                                                                                        messageObject13 = messageObject11;
                                                                                                        final boolean z34 = z26;
                                                                                                        actionBarPopupWindowLayout8 = actionBarPopupWindowLayout7;
                                                                                                        actionBarMenuSubItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda146
                                                                                                            @Override // android.view.View.OnClickListener
                                                                                                            public final void onClick(View view4) {
                                                                                                                ChatActivity.this.lambda$createMenu$248(i54, arrayList19, str7, toLanguage, language, inputPeer6, iArr9, charSequence5, z34, callbackReturn, view4);
                                                                                                            }
                                                                                                        });
                                                                                                        atomicReference3 = atomicReference2;
                                                                                                        inputPeer2 = null;
                                                                                                        i9 = i10 + 1;
                                                                                                        chatActivity = this;
                                                                                                        atomicReference2 = atomicReference3;
                                                                                                        atomicBoolean2 = atomicBoolean3;
                                                                                                        arrayList = arrayList4;
                                                                                                        arrayList3 = arrayList5;
                                                                                                        arrayList2 = arrayList6;
                                                                                                        size = i11;
                                                                                                        inputPeer = inputPeer2;
                                                                                                        actionBarPopupWindowLayout7 = actionBarPopupWindowLayout8;
                                                                                                        messageObject11 = messageObject13;
                                                                                                    }
                                                                                                }
                                                                                                inputPeer3 = getMessagesController().getInputPeer(chatActivity.dialog_id);
                                                                                                messageObject14 = chatActivity.selectedObject;
                                                                                                if (messageObject14 != null) {
                                                                                                }
                                                                                                arrayList4 = arrayList19;
                                                                                                arrayList5 = arrayList18;
                                                                                                arrayList6 = arrayList17;
                                                                                                i10 = i9;
                                                                                                i11 = size;
                                                                                                actionBarPopupWindowLayout8 = actionBarPopupWindowLayout7;
                                                                                                atomicBoolean3 = atomicBoolean2;
                                                                                                messageObject13 = messageObject11;
                                                                                                if (LanguageDetector.hasSupport()) {
                                                                                                }
                                                                                            } else {
                                                                                                arrayList4 = arrayList19;
                                                                                                arrayList5 = arrayList18;
                                                                                                arrayList6 = arrayList17;
                                                                                                i10 = i9;
                                                                                                i11 = size;
                                                                                                actionBarPopupWindowLayout8 = actionBarPopupWindowLayout7;
                                                                                                inputPeer2 = inputPeer;
                                                                                                atomicReference3 = atomicReference2;
                                                                                                atomicBoolean3 = atomicBoolean2;
                                                                                                messageObject13 = messageObject11;
                                                                                            }
                                                                                            i9 = i10 + 1;
                                                                                            chatActivity = this;
                                                                                            atomicReference2 = atomicReference3;
                                                                                            atomicBoolean2 = atomicBoolean3;
                                                                                            arrayList = arrayList4;
                                                                                            arrayList3 = arrayList5;
                                                                                            arrayList2 = arrayList6;
                                                                                            size = i11;
                                                                                            inputPeer = inputPeer2;
                                                                                            actionBarPopupWindowLayout7 = actionBarPopupWindowLayout8;
                                                                                            messageObject11 = messageObject13;
                                                                                        }
                                                                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout7;
                                                                                        reactionsContainerLayout = inputPeer;
                                                                                        atomicReference = atomicReference2;
                                                                                        atomicBoolean = atomicBoolean2;
                                                                                        messageObject6 = messageObject11;
                                                                                    }
                                                                                }
                                                                                LinearLayout linearLayout4 = new LinearLayout(getParentActivity());
                                                                                linearLayout4.setOrientation(1);
                                                                                ActionBarMenuSubItem actionBarMenuSubItem6 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                                                actionBarMenuSubItem6.setItemHeight(44);
                                                                                actionBarMenuSubItem6.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
                                                                                actionBarMenuSubItem6.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                                                actionBarMenuSubItem6.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda136
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view4) {
                                                                                        ChatActivity.lambda$createMenu$238(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view4);
                                                                                    }
                                                                                });
                                                                                linearLayout4.addView(actionBarMenuSubItem6, LayoutHelper.createLinear(-1, -2));
                                                                                linearLayout4.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                                                ArrayList arrayList20 = new ArrayList();
                                                                                String str8 = chatActivity.selectedObject.sponsoredUrl;
                                                                                if (str8 == null || str8.startsWith(getMessagesController().linkPrefix)) {
                                                                                    f3 = 14.0f;
                                                                                    inputPeer = null;
                                                                                } else {
                                                                                    TextView textView3 = new TextView(getParentActivity());
                                                                                    textView3.setTextColor(chatActivity.getThemedColor(Theme.key_chat_messageLinkIn));
                                                                                    f3 = 14.0f;
                                                                                    textView3.setTextSize(1, 14.0f);
                                                                                    textView3.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                                                    textView3.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                                                    Uri parse = Uri.parse(chatActivity.selectedObject.sponsoredUrl);
                                                                                    inputPeer = null;
                                                                                    textView3.setText(Browser.replaceHostname(parse, Browser.IDN_toUnicode(parse.getHost()), null));
                                                                                    textView3.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, chatActivity.selectedObject.sponsoredAdditionalInfo == null ? 6 : 0));
                                                                                    textView3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda137
                                                                                        @Override // android.view.View.OnClickListener
                                                                                        public final void onClick(View view4) {
                                                                                            ChatActivity.this.lambda$createMenu$239(view4);
                                                                                        }
                                                                                    });
                                                                                    textView3.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda138
                                                                                        @Override // android.view.View.OnLongClickListener
                                                                                        public final boolean onLongClick(View view4) {
                                                                                            boolean lambda$createMenu$240;
                                                                                            lambda$createMenu$240 = ChatActivity.this.lambda$createMenu$240(view4);
                                                                                            return lambda$createMenu$240;
                                                                                        }
                                                                                    });
                                                                                    arrayList20.add(textView3);
                                                                                }
                                                                                if (chatActivity.selectedObject.sponsoredInfo != null) {
                                                                                    TextView textView4 = new TextView(getParentActivity());
                                                                                    textView4.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                                                    textView4.setTextSize(1, f3);
                                                                                    textView4.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                                                    textView4.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                                                    textView4.setText(chatActivity.selectedObject.sponsoredInfo);
                                                                                    textView4.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, chatActivity.selectedObject.sponsoredAdditionalInfo == null ? 6 : 0));
                                                                                    textView4.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda139
                                                                                        @Override // android.view.View.OnClickListener
                                                                                        public final void onClick(View view4) {
                                                                                            ChatActivity.this.lambda$createMenu$241(view4);
                                                                                        }
                                                                                    });
                                                                                    arrayList20.add(textView4);
                                                                                }
                                                                                if (chatActivity.selectedObject.sponsoredAdditionalInfo != null) {
                                                                                    TextView textView5 = new TextView(getParentActivity());
                                                                                    textView5.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                                                    textView5.setTextSize(1, f3);
                                                                                    textView5.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                                                    textView5.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                                                    textView5.setText(chatActivity.selectedObject.sponsoredAdditionalInfo);
                                                                                    i12 = 6;
                                                                                    textView5.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, 6));
                                                                                    textView5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda141
                                                                                        @Override // android.view.View.OnClickListener
                                                                                        public final void onClick(View view4) {
                                                                                            ChatActivity.this.lambda$createMenu$242(view4);
                                                                                        }
                                                                                    });
                                                                                    arrayList20.add(textView5);
                                                                                } else {
                                                                                    i12 = 6;
                                                                                }
                                                                                for (int i55 = 0; i55 < arrayList20.size(); i55 += i13) {
                                                                                    View view4 = (View) arrayList20.get(i55);
                                                                                    if (i55 > 0) {
                                                                                        FrameLayout frameLayout7 = new FrameLayout(getParentActivity());
                                                                                        frameLayout7.setBackgroundColor(chatActivity.getThemedColor(Theme.key_divider));
                                                                                        i13 = 1;
                                                                                        i14 = -1;
                                                                                        LinearLayout.LayoutParams createLinear2 = LayoutHelper.createLinear(-1, 1);
                                                                                        createLinear2.height = 1;
                                                                                        linearLayout4.addView(frameLayout7, createLinear2);
                                                                                    } else {
                                                                                        i13 = 1;
                                                                                        i14 = -1;
                                                                                    }
                                                                                    linearLayout4.addView(view4, LayoutHelper.createLinear(i14, -2));
                                                                                }
                                                                                final int addViewToSwipeBack = actionBarPopupWindowLayout7.addViewToSwipeBack(linearLayout4);
                                                                                ActionBarMenuSubItem actionBarMenuSubItem7 = new ActionBarMenuSubItem((Context) getParentActivity(), true, true, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                                                actionBarMenuSubItem7.setTextAndIcon(LocaleController.getString(chatActivity.selectedObject.sponsoredCanReport ? R.string.SponsoredMessageSponsorReportable : R.string.SponsoredMessageSponsor), R.drawable.msg_channel);
                                                                                actionBarPopupWindowLayout7.addView(actionBarMenuSubItem7);
                                                                                actionBarMenuSubItem7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda142
                                                                                    @Override // android.view.View.OnClickListener
                                                                                    public final void onClick(View view5) {
                                                                                        ChatActivity.this.lambda$createMenu$243(actionBarPopupWindowLayout7, addViewToSwipeBack, view5);
                                                                                    }
                                                                                });
                                                                                actionBarPopupWindowLayout7.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                                                if (!chatActivity.selectedObject.sponsoredCanReport) {
                                                                                }
                                                                            } else {
                                                                                inputPeer = null;
                                                                            }
                                                                            chatActivity.scrimPopupWindowItems = new ActionBarMenuSubItem[arrayList2.size()];
                                                                            size = arrayList2.size();
                                                                            i9 = 0;
                                                                            while (i9 < size) {
                                                                            }
                                                                            actionBarPopupWindowLayout2 = actionBarPopupWindowLayout7;
                                                                            reactionsContainerLayout = inputPeer;
                                                                            atomicReference = atomicReference2;
                                                                            atomicBoolean = atomicBoolean2;
                                                                            messageObject6 = messageObject11;
                                                                        }
                                                                        z18 = true;
                                                                        MessageObject messageObject262 = chatActivity.selectedObject;
                                                                        if (messageObject262 != null) {
                                                                        }
                                                                        if (!z19) {
                                                                            ActionBarMenuSubItem actionBarMenuSubItem42 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                                            actionBarMenuSubItem42.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                                            actionBarMenuSubItem42.setTextAndIcon(LocaleController.getString(R.string.SaveForNotifications), R.drawable.msg_tone_add);
                                                                            actionBarPopupWindowLayout7.addView(actionBarMenuSubItem42);
                                                                            actionBarMenuSubItem42.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda131
                                                                                @Override // android.view.View.OnClickListener
                                                                                public final void onClick(View view42) {
                                                                                    ChatActivity.this.lambda$createMenu$229(messageObject10, view42);
                                                                                }
                                                                            });
                                                                            z18 = true;
                                                                        }
                                                                        if (z18) {
                                                                        }
                                                                        if (actionBarPopupWindowLayout7.getSwipeBack() != null) {
                                                                        }
                                                                        if (z19) {
                                                                        }
                                                                        messageObject12 = chatActivity.selectedObject;
                                                                        if (messageObject12 == null) {
                                                                        }
                                                                        inputPeer = null;
                                                                        chatActivity.scrimPopupWindowItems = new ActionBarMenuSubItem[arrayList2.size()];
                                                                        size = arrayList2.size();
                                                                        i9 = 0;
                                                                        while (i9 < size) {
                                                                        }
                                                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout7;
                                                                        reactionsContainerLayout = inputPeer;
                                                                        atomicReference = atomicReference2;
                                                                        atomicBoolean = atomicBoolean2;
                                                                        messageObject6 = messageObject11;
                                                                    } else {
                                                                        atomicBoolean = atomicBoolean4;
                                                                        messageObject5 = messageObject;
                                                                        rect = rect4;
                                                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout10;
                                                                        messageObject6 = messageObject2;
                                                                        actionBarPopupWindowLayout3 = actionBarPopupWindowLayout;
                                                                        rect2 = rect3;
                                                                        i = 24;
                                                                        reactionsContainerLayout = null;
                                                                        atomicReference = atomicReference4;
                                                                    }
                                                                    ChatScrimPopupContainerLayout chatScrimPopupContainerLayout = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.133
                                                                        @Override // android.view.ViewGroup, android.view.View
                                                                        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                                                            if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                                                                ChatActivity.this.closeMenu();
                                                                            }
                                                                            return super.dispatchKeyEvent(keyEvent);
                                                                        }

                                                                        @Override // android.view.ViewGroup, android.view.View
                                                                        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                                                            boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                                                            if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                                                                ChatActivity.this.closeMenu();
                                                                            }
                                                                            return dispatchTouchEvent;
                                                                        }
                                                                    };
                                                                    final Rect rect5 = rect2;
                                                                    chatScrimPopupContainerLayout.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.134
                                                                        private int[] pos = new int[2];

                                                                        /* JADX WARN: Code restructure failed: missing block: B:12:0x0052, code lost:
                                                                            if (r9.getActionMasked() == 4) goto L9;
                                                                         */
                                                                        /* JADX WARN: Code restructure failed: missing block: B:13:0x0054, code lost:
                                                                            r7.this$0.closeMenu();
                                                                         */
                                                                        /* JADX WARN: Code restructure failed: missing block: B:9:0x004a, code lost:
                                                                            if (r2.contains((int) r9.getX(), (int) r9.getY()) == false) goto L9;
                                                                         */
                                                                        @Override // android.view.View.OnTouchListener
                                                                        /*
                                                                            Code decompiled incorrectly, please refer to instructions dump.
                                                                        */
                                                                        public boolean onTouch(View view5, MotionEvent motionEvent) {
                                                                            if (motionEvent.getActionMasked() == 0) {
                                                                                ActionBarPopupWindow actionBarPopupWindow2 = ChatActivity.this.scrimPopupWindow;
                                                                                if (actionBarPopupWindow2 != null && actionBarPopupWindow2.isShowing()) {
                                                                                    View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                                                                    contentView.getLocationInWindow(this.pos);
                                                                                    Rect rect6 = rect5;
                                                                                    int[] iArr10 = this.pos;
                                                                                    int i56 = iArr10[0];
                                                                                    rect6.set(i56, iArr10[1], contentView.getMeasuredWidth() + i56, this.pos[1] + contentView.getMeasuredHeight());
                                                                                }
                                                                            }
                                                                            return false;
                                                                        }
                                                                    });
                                                                    actionBarPopupWindowLayout4 = actionBarPopupWindowLayout3;
                                                                    if (actionBarPopupWindowLayout4 != null) {
                                                                        boolean z35 = getUserConfig().getClientUserId() == getDialogId();
                                                                        reactionsContainerLayout2 = new ReactionsContainerLayout(z35 ? 3 : 0, this, this.contentView.getContext(), this.currentAccount, getResourceProvider());
                                                                        if (z35) {
                                                                            reactionsContainerLayout2.setHint(getUserConfig().isPremium() ? LocaleController.getString(R.string.SavedTagReactionsHint2) : AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.SavedTagReactionsPremiumHint), Theme.key_windowBackgroundWhiteBlueText2, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda153
                                                                                @Override // java.lang.Runnable
                                                                                public final void run() {
                                                                                    ChatActivity.this.lambda$createMenu$257();
                                                                                }
                                                                            }));
                                                                        }
                                                                        if (!z14 || (z35 && getMessagesController().premiumFeaturesBlocked())) {
                                                                            messageObject7 = messageObject6;
                                                                        } else {
                                                                            int dp4 = AndroidUtilities.dp(4.0f) + (LocaleController.isRTL ? 0 : 24);
                                                                            int dp5 = AndroidUtilities.dp(4.0f);
                                                                            int dp6 = AndroidUtilities.dp(4.0f);
                                                                            if (!LocaleController.isRTL) {
                                                                                i = 0;
                                                                            }
                                                                            float f4 = 22;
                                                                            reactionsContainerLayout2.setPadding(dp4, dp5, dp6 + i, AndroidUtilities.dp(f4));
                                                                            final MessageObject messageObject29 = messageObject5;
                                                                            reactionsContainerLayout2.setDelegate(new ReactionsContainerLayout.ReactionsContainerDelegate() { // from class: org.telegram.ui.ChatActivity.135
                                                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                                                public /* synthetic */ boolean drawBackground() {
                                                                                    return ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$drawBackground(this);
                                                                                }

                                                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                                                public /* synthetic */ void drawRoundRect(Canvas canvas, RectF rectF, float f5, float f6, float f7, int i56, boolean z36) {
                                                                                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$drawRoundRect(this, canvas, rectF, f5, f6, f7, i56, z36);
                                                                                }

                                                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                                                public /* synthetic */ boolean needEnterText() {
                                                                                    return ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$needEnterText(this);
                                                                                }

                                                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                                                public /* synthetic */ void onEmojiWindowDismissed() {
                                                                                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$onEmojiWindowDismissed(this);
                                                                                }

                                                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                                                public void onReactionClicked(View view5, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z36, boolean z37) {
                                                                                    float f5;
                                                                                    float f6;
                                                                                    ReactionsLayoutInBubble.ReactionButton reactionButton;
                                                                                    ChatMessageCell findMessageCell = ChatActivity.this.findMessageCell(messageObject29.getId(), true);
                                                                                    if (findMessageCell == null || (reactionButton = findMessageCell.reactionsLayoutInBubble.getReactionButton(visibleReaction)) == null) {
                                                                                        f5 = 0.0f;
                                                                                        f6 = 0.0f;
                                                                                    } else {
                                                                                        ReactionsLayoutInBubble reactionsLayoutInBubble = findMessageCell.reactionsLayoutInBubble;
                                                                                        float f7 = reactionsLayoutInBubble.x + reactionButton.x + (reactionButton.width / 2.0f);
                                                                                        f6 = reactionsLayoutInBubble.y + reactionButton.y + (reactionButton.height / 2.0f);
                                                                                        f5 = f7;
                                                                                    }
                                                                                    ChatActivity.this.selectReaction(findMessageCell, messageObject29, reactionsContainerLayout2, view5, f5, f6, visibleReaction, false, (visibleReaction == null || !visibleReaction.isStar) ? z36 : true, z37, false);
                                                                                }
                                                                            });
                                                                            chatScrimPopupContainerLayout.addView(reactionsContainerLayout2, LayoutHelper.createLinear(-1, (int) ((reactionsContainerLayout2.getTopOffset() / AndroidUtilities.density) + 52.0f + f4), 5, 0, 50, 0, -20));
                                                                            chatScrimPopupContainerLayout.setReactionsLayout(reactionsContainerLayout2);
                                                                            chatScrimPopupContainerLayout.setClipChildren(false);
                                                                            messageObject7 = messageObject6;
                                                                            MessageObject.GroupedMessages validGroupedMessage2 = getValidGroupedMessage(messageObject7);
                                                                            reactionsContainerLayout2.setMessage(validGroupedMessage2 != null ? validGroupedMessage2.findPrimaryMessageObject() : messageObject7, this.chatInfo, true);
                                                                            reactionsContainerLayout2.setTransitionProgress(0.0f);
                                                                            if (actionBarPopupWindowLayout2.getSwipeBack() != null) {
                                                                                actionBarPopupWindowLayout2.getSwipeBack().addOnSwipeBackProgressListener(new PopupSwipeBackLayout.OnSwipeBackProgressListener() { // from class: org.telegram.ui.ChatActivity.136
                                                                                    boolean isEnter = true;

                                                                                    @Override // org.telegram.ui.Components.PopupSwipeBackLayout.OnSwipeBackProgressListener
                                                                                    public void onSwipeBackProgress(PopupSwipeBackLayout popupSwipeBackLayout, float f5, float f6) {
                                                                                        if (f5 == 0.0f && !this.isEnter) {
                                                                                            reactionsContainerLayout2.startEnterAnimation(false);
                                                                                            this.isEnter = true;
                                                                                        } else if (f5 == 1.0f && this.isEnter) {
                                                                                            reactionsContainerLayout2.setAlpha(1.0f - f6);
                                                                                            if (f6 == 1.0f) {
                                                                                                this.isEnter = false;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                });
                                                                            }
                                                                        }
                                                                        boolean z36 = ((!getMessagesController().isChatNoForwards(this.currentChat) && (!messageObject7.messageOwner.noforwards || (user = this.currentUser) == null || !user.bot)) || messageObject7.messageOwner.action != null || !messageObject7.isSent() || messageObject7.isEditing() || (i2 = this.chatMode) == 1 || i2 == 3 || getDialogId() == UserObject.VERIFY) ? false : true;
                                                                        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout14 = actionBarPopupWindowLayout2;
                                                                        chatScrimPopupContainerLayout.addView(actionBarPopupWindowLayout14, LayoutHelper.createLinearRelatively(-2.0f, -2.0f, 3, z14 ? 16.0f : 0.0f, 0.0f, z14 ? 36.0f : 0.0f, 0.0f));
                                                                        chatScrimPopupContainerLayout.setPopupWindowLayout(actionBarPopupWindowLayout14);
                                                                        if (z36) {
                                                                            actionBarPopupWindowLayout14.measure(View.MeasureSpec.makeMeasureSpec(0, 0), View.MeasureSpec.makeMeasureSpec(0, 0));
                                                                            boolean z37 = ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup;
                                                                            TextView textView6 = new TextView(this.contentView.getContext());
                                                                            textView6.setTextSize(1, 14.0f);
                                                                            textView6.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                                            textView6.setText(LocaleController.getString(getMessagesController().isChatNoForwards(this.currentChat) ? z37 ? R.string.ForwardsRestrictedInfoChannel : R.string.ForwardsRestrictedInfoGroup : R.string.ForwardsRestrictedInfoBot));
                                                                            textView6.setMaxWidth(actionBarPopupWindowLayout14.getMeasuredWidth() - AndroidUtilities.dp(38.0f));
                                                                            Drawable mutate3 = ContextCompat.getDrawable(this.contentView.getContext(), R.drawable.popup_fixed_alert).mutate();
                                                                            mutate3.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                                                                            FrameLayout frameLayout8 = new FrameLayout(this.contentView.getContext());
                                                                            frameLayout8.setBackground(mutate3);
                                                                            frameLayout8.addView(textView6, LayoutHelper.createFrame(-1, -2.0f, 0, 11.0f, 11.0f, 11.0f, 11.0f));
                                                                            chatScrimPopupContainerLayout.addView(frameLayout8, LayoutHelper.createLinear(-1, -2, 3, z14 ? 16 : 0, -8, z14 ? 36 : 0, 0));
                                                                            chatScrimPopupContainerLayout.applyViewBottom(frameLayout8);
                                                                        }
                                                                        if (messageObject7.contentType == 0) {
                                                                            CharSequence charSequence6 = messageObject7.messageText;
                                                                            AnimatedEmojiSpan[] animatedEmojiSpanArr2 = charSequence6 instanceof Spanned ? (AnimatedEmojiSpan[]) ((Spanned) charSequence6).getSpans(0, charSequence6.length(), AnimatedEmojiSpan.class) : reactionsContainerLayout;
                                                                            CharSequence messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                                                            AnimatedEmojiSpan[] animatedEmojiSpanArr3 = messageCaption instanceof Spanned ? (AnimatedEmojiSpan[]) ((Spanned) messageCaption).getSpans(0, messageCaption.length(), AnimatedEmojiSpan.class) : reactionsContainerLayout;
                                                                            int length = (animatedEmojiSpanArr2 == null ? 0 : animatedEmojiSpanArr2.length) + (animatedEmojiSpanArr3 == null ? 0 : animatedEmojiSpanArr3.length);
                                                                            if (length > 0) {
                                                                                final ArrayList arrayList21 = new ArrayList();
                                                                                int length2 = animatedEmojiSpanArr2 == null ? 0 : animatedEmojiSpanArr2.length;
                                                                                int i56 = 0;
                                                                                AnimatedEmojiSpan[] animatedEmojiSpanArr4 = animatedEmojiSpanArr3;
                                                                                while (i56 < length) {
                                                                                    AnimatedEmojiSpan animatedEmojiSpan = i56 < length2 ? animatedEmojiSpanArr2[i56] : animatedEmojiSpanArr4[i56 - length2];
                                                                                    if (animatedEmojiSpan == null || animatedEmojiSpan.standard) {
                                                                                        animatedEmojiSpanArr = animatedEmojiSpanArr4;
                                                                                        i3 = length;
                                                                                        actionBarPopupWindowLayout6 = actionBarPopupWindowLayout14;
                                                                                    } else {
                                                                                        TLRPC.Document document = animatedEmojiSpan.document;
                                                                                        if (document == null) {
                                                                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout14;
                                                                                            document = AnimatedEmojiDrawable.findDocument(this.currentAccount, animatedEmojiSpan.documentId);
                                                                                        } else {
                                                                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout14;
                                                                                        }
                                                                                        TLRPC.InputStickerSet inputStickerSet = MessageObject.getInputStickerSet(document);
                                                                                        if (inputStickerSet == null) {
                                                                                            animatedEmojiSpanArr = animatedEmojiSpanArr4;
                                                                                            i3 = length;
                                                                                        } else {
                                                                                            int i57 = 0;
                                                                                            AnimatedEmojiSpan[] animatedEmojiSpanArr5 = animatedEmojiSpanArr4;
                                                                                            while (true) {
                                                                                                if (i57 >= arrayList21.size()) {
                                                                                                    animatedEmojiSpanArr = animatedEmojiSpanArr5;
                                                                                                    i3 = length;
                                                                                                    i4 = 1;
                                                                                                    z17 = false;
                                                                                                    break;
                                                                                                }
                                                                                                animatedEmojiSpanArr = animatedEmojiSpanArr5;
                                                                                                i3 = length;
                                                                                                i4 = 1;
                                                                                                if (((TLRPC.InputStickerSet) arrayList21.get(i57)).id == inputStickerSet.id) {
                                                                                                    z17 = true;
                                                                                                    break;
                                                                                                }
                                                                                                i57++;
                                                                                                animatedEmojiSpanArr5 = animatedEmojiSpanArr;
                                                                                                length = i3;
                                                                                            }
                                                                                            if (!z17) {
                                                                                                arrayList21.add(inputStickerSet);
                                                                                            }
                                                                                            i56 += i4;
                                                                                            animatedEmojiSpanArr4 = animatedEmojiSpanArr;
                                                                                            length = i3;
                                                                                            actionBarPopupWindowLayout14 = actionBarPopupWindowLayout6;
                                                                                        }
                                                                                    }
                                                                                    i4 = 1;
                                                                                    i56 += i4;
                                                                                    animatedEmojiSpanArr4 = animatedEmojiSpanArr;
                                                                                    length = i3;
                                                                                    actionBarPopupWindowLayout14 = actionBarPopupWindowLayout6;
                                                                                }
                                                                                actionBarPopupWindowLayout2 = actionBarPopupWindowLayout14;
                                                                                if (arrayList21.size() > 0 && !getMessagesController().premiumFeaturesBlocked()) {
                                                                                    FrameLayout frameLayout9 = new FrameLayout(this.contentView.getContext());
                                                                                    frameLayout9.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                                                                    actionBarPopupWindowLayout5 = actionBarPopupWindowLayout2;
                                                                                    actionBarPopupWindowLayout5.addView((View) frameLayout9, LayoutHelper.createLinear(-1, 8));
                                                                                    MessageContainsEmojiButton messageContainsEmojiButton = new MessageContainsEmojiButton(this.currentAccount, this.contentView.getContext(), this.themeDelegate, arrayList21, 0);
                                                                                    messageContainsEmojiButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda154
                                                                                        @Override // android.view.View.OnClickListener
                                                                                        public final void onClick(View view5) {
                                                                                            ChatActivity.this.lambda$createMenu$258(arrayList21, view5);
                                                                                        }
                                                                                    });
                                                                                    actionBarPopupWindowLayout5.addView((View) messageContainsEmojiButton, LayoutHelper.createLinear(-1, -2));
                                                                                    actionBarPopupWindowLayout5.precalculateHeight();
                                                                                    reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout);
                                                                                    final ReactionsContainerLayout reactionsContainerLayout3 = reactionsContainerLayout2;
                                                                                    ActionBarPopupWindow actionBarPopupWindow2 = new ActionBarPopupWindow(chatScrimPopupContainerLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                                                        public void dismiss() {
                                                                                            super.dismiss();
                                                                                            if (ChatActivity.this.scrimPopupWindow != this) {
                                                                                                return;
                                                                                            }
                                                                                            if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                                                ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                                                ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                                            }
                                                                                            ChatActivity chatActivity2 = ChatActivity.this;
                                                                                            chatActivity2.scrimPopupWindow = null;
                                                                                            chatActivity2.menuDeleteItem = null;
                                                                                            ChatActivity.this.scrimPopupWindowItems = null;
                                                                                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                                            if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                                                ChatActivity.this.dimBehindView(false);
                                                                                            } else {
                                                                                                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                                            }
                                                                                            ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                                            if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                                                return;
                                                                                            }
                                                                                            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                                                        }

                                                                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                                                        public void dismiss(boolean z38) {
                                                                                            super.dismiss(z38);
                                                                                            ReactionsContainerLayout reactionsContainerLayout4 = reactionsContainerLayout3;
                                                                                            if (reactionsContainerLayout4 != null) {
                                                                                                reactionsContainerLayout4.dismissParent(z38);
                                                                                            }
                                                                                        }
                                                                                    };
                                                                                    this.scrimPopupWindow = actionBarPopupWindow2;
                                                                                    actionBarPopupWindow2.setPauseNotifications(true);
                                                                                    this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                                                    this.scrimPopupWindow.setOutsideTouchable(true);
                                                                                    this.scrimPopupWindow.setClippingEnabled(true);
                                                                                    if (z14 || !ReactionsContainerLayout.allowSmoothEnterTransition()) {
                                                                                        actionBarPopupWindow = this.scrimPopupWindow;
                                                                                        i5 = R.style.PopupContextAnimation;
                                                                                    } else {
                                                                                        actionBarPopupWindow = this.scrimPopupWindow;
                                                                                        i5 = 0;
                                                                                    }
                                                                                    actionBarPopupWindow.setAnimationStyle(i5);
                                                                                    this.scrimPopupWindow.setFocusable(true);
                                                                                    chatScrimPopupContainerLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                                                    this.scrimPopupWindow.setInputMethodMode(2);
                                                                                    this.scrimPopupWindow.setSoftInputMode(48);
                                                                                    this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                                                    actionBarPopupWindowLayout5.setFitItems(true);
                                                                                    Rect rect6 = rect;
                                                                                    left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) + rect6.left) - AndroidUtilities.dp(28.0f);
                                                                                    if (left >= AndroidUtilities.dp(6.0f)) {
                                                                                        left = AndroidUtilities.dp(6.0f);
                                                                                    } else if (left > (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) {
                                                                                        left = (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - chatScrimPopupContainerLayout.getMeasuredWidth();
                                                                                    }
                                                                                    if (AndroidUtilities.isTablet()) {
                                                                                        int[] iArr10 = new int[2];
                                                                                        this.fragmentView.getLocationInWindow(iArr10);
                                                                                        left += iArr10[0];
                                                                                    }
                                                                                    height = this.contentView.getHeight();
                                                                                    measuredHeight = chatScrimPopupContainerLayout.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                                                    measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                                                    if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                                                        height += measureKeyboardHeight;
                                                                                    }
                                                                                    int y = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                                                    int dp7 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                                                    if (measuredHeight >= height) {
                                                                                        int y2 = (int) (this.chatListView.getY() + view.getTop() + f2);
                                                                                        if (this.isInsideContainer) {
                                                                                            int[] iArr11 = new int[2];
                                                                                            view2 = view;
                                                                                            view2.getLocationInWindow(iArr11);
                                                                                            y2 = (int) (iArr11[1] + f2);
                                                                                            this.chatListView.getLocationInWindow(iArr11);
                                                                                            y = AndroidUtilities.dp(24.0f);
                                                                                            dp7 = (Math.min(iArr11[1] + this.chatListView.getMeasuredHeight(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp(8.0f)) - measuredHeight;
                                                                                        } else {
                                                                                            view2 = view;
                                                                                            if ((measuredHeight - rect6.top) - rect6.bottom > AndroidUtilities.dp(240.0f)) {
                                                                                                y2 += AndroidUtilities.dp(240.0f) - measuredHeight;
                                                                                            }
                                                                                        }
                                                                                        i6 = Utilities.clamp(y2, dp7, y);
                                                                                    } else {
                                                                                        view2 = view;
                                                                                        i6 = this.inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                                                                                    }
                                                                                    this.scrimPopupX = left;
                                                                                    this.scrimPopupY = i6;
                                                                                    chatScrimPopupContainerLayout.setMaxHeight((dp7 + measuredHeight) - i6);
                                                                                    final int i58 = left;
                                                                                    final int i59 = i6;
                                                                                    final boolean z38 = z14;
                                                                                    final ReactionsContainerLayout reactionsContainerLayout4 = reactionsContainerLayout2;
                                                                                    Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                                                        @Override // java.lang.Runnable
                                                                                        public final void run() {
                                                                                            ChatActivity.this.lambda$createMenu$260(i58, i59, z38, reactionsContainerLayout4);
                                                                                        }
                                                                                    };
                                                                                    if (atomicBoolean.get()) {
                                                                                        runnable2.run();
                                                                                    } else {
                                                                                        atomicReference.set(runnable2);
                                                                                    }
                                                                                    this.chatListView.stopScroll();
                                                                                    this.chatLayoutManager.setCanScrollVertically(false);
                                                                                    dimBehindView(view2, true);
                                                                                    hideHints(false);
                                                                                    undoView = this.topUndoView;
                                                                                    if (undoView != null) {
                                                                                        undoView.hide(true, 1);
                                                                                    }
                                                                                    undoView2 = this.undoView;
                                                                                    if (undoView2 != null) {
                                                                                        undoView2.hide(true, 1);
                                                                                    }
                                                                                    chatActivityEnterView = this.chatActivityEnterView;
                                                                                    if (chatActivityEnterView == null && chatActivityEnterView.getEditField() != null) {
                                                                                        this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                                                                                        return true;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout14;
                                                                        reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout);
                                                                        final ReactionsContainerLayout reactionsContainerLayout32 = reactionsContainerLayout2;
                                                                        ActionBarPopupWindow actionBarPopupWindow22 = new ActionBarPopupWindow(chatScrimPopupContainerLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                                            @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                                            public void dismiss() {
                                                                                super.dismiss();
                                                                                if (ChatActivity.this.scrimPopupWindow != this) {
                                                                                    return;
                                                                                }
                                                                                if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                                    ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                                    ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                                }
                                                                                ChatActivity chatActivity2 = ChatActivity.this;
                                                                                chatActivity2.scrimPopupWindow = null;
                                                                                chatActivity2.menuDeleteItem = null;
                                                                                ChatActivity.this.scrimPopupWindowItems = null;
                                                                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                                if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                                    ChatActivity.this.dimBehindView(false);
                                                                                } else {
                                                                                    ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                                }
                                                                                ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                                if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                                    return;
                                                                                }
                                                                                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                                            }

                                                                            @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                                            public void dismiss(boolean z382) {
                                                                                super.dismiss(z382);
                                                                                ReactionsContainerLayout reactionsContainerLayout42 = reactionsContainerLayout32;
                                                                                if (reactionsContainerLayout42 != null) {
                                                                                    reactionsContainerLayout42.dismissParent(z382);
                                                                                }
                                                                            }
                                                                        };
                                                                        this.scrimPopupWindow = actionBarPopupWindow22;
                                                                        actionBarPopupWindow22.setPauseNotifications(true);
                                                                        this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                                        this.scrimPopupWindow.setOutsideTouchable(true);
                                                                        this.scrimPopupWindow.setClippingEnabled(true);
                                                                        if (z14) {
                                                                        }
                                                                        actionBarPopupWindow = this.scrimPopupWindow;
                                                                        i5 = R.style.PopupContextAnimation;
                                                                        actionBarPopupWindow.setAnimationStyle(i5);
                                                                        this.scrimPopupWindow.setFocusable(true);
                                                                        chatScrimPopupContainerLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                                        this.scrimPopupWindow.setInputMethodMode(2);
                                                                        this.scrimPopupWindow.setSoftInputMode(48);
                                                                        this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                                        actionBarPopupWindowLayout5.setFitItems(true);
                                                                        Rect rect62 = rect;
                                                                        left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) + rect62.left) - AndroidUtilities.dp(28.0f);
                                                                        if (left >= AndroidUtilities.dp(6.0f)) {
                                                                        }
                                                                        if (AndroidUtilities.isTablet()) {
                                                                        }
                                                                        height = this.contentView.getHeight();
                                                                        measuredHeight = chatScrimPopupContainerLayout.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                                        measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                                        if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                                        }
                                                                        int y3 = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                                        int dp72 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                                        if (measuredHeight >= height) {
                                                                        }
                                                                        this.scrimPopupX = left;
                                                                        this.scrimPopupY = i6;
                                                                        chatScrimPopupContainerLayout.setMaxHeight((dp72 + measuredHeight) - i6);
                                                                        final int i582 = left;
                                                                        final int i592 = i6;
                                                                        final boolean z382 = z14;
                                                                        final ReactionsContainerLayout reactionsContainerLayout42 = reactionsContainerLayout2;
                                                                        Runnable runnable22 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                ChatActivity.this.lambda$createMenu$260(i582, i592, z382, reactionsContainerLayout42);
                                                                            }
                                                                        };
                                                                        if (atomicBoolean.get()) {
                                                                        }
                                                                        this.chatListView.stopScroll();
                                                                        this.chatLayoutManager.setCanScrollVertically(false);
                                                                        dimBehindView(view2, true);
                                                                        hideHints(false);
                                                                        undoView = this.topUndoView;
                                                                        if (undoView != null) {
                                                                        }
                                                                        undoView2 = this.undoView;
                                                                        if (undoView2 != null) {
                                                                        }
                                                                        chatActivityEnterView = this.chatActivityEnterView;
                                                                        return chatActivityEnterView == null ? true : true;
                                                                    }
                                                                    chatScrimPopupContainerLayout.addView(actionBarPopupWindowLayout4);
                                                                    reactionsContainerLayout2 = reactionsContainerLayout;
                                                                    actionBarPopupWindowLayout5 = actionBarPopupWindowLayout2;
                                                                    reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout);
                                                                    final ReactionsContainerLayout reactionsContainerLayout322 = reactionsContainerLayout2;
                                                                    ActionBarPopupWindow actionBarPopupWindow222 = new ActionBarPopupWindow(chatScrimPopupContainerLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                                        public void dismiss() {
                                                                            super.dismiss();
                                                                            if (ChatActivity.this.scrimPopupWindow != this) {
                                                                                return;
                                                                            }
                                                                            if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                                ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                                ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                            }
                                                                            ChatActivity chatActivity2 = ChatActivity.this;
                                                                            chatActivity2.scrimPopupWindow = null;
                                                                            chatActivity2.menuDeleteItem = null;
                                                                            ChatActivity.this.scrimPopupWindowItems = null;
                                                                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                            if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                                ChatActivity.this.dimBehindView(false);
                                                                            } else {
                                                                                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                            }
                                                                            ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                            if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                                return;
                                                                            }
                                                                            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                                        }

                                                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                                        public void dismiss(boolean z3822) {
                                                                            super.dismiss(z3822);
                                                                            ReactionsContainerLayout reactionsContainerLayout422 = reactionsContainerLayout322;
                                                                            if (reactionsContainerLayout422 != null) {
                                                                                reactionsContainerLayout422.dismissParent(z3822);
                                                                            }
                                                                        }
                                                                    };
                                                                    this.scrimPopupWindow = actionBarPopupWindow222;
                                                                    actionBarPopupWindow222.setPauseNotifications(true);
                                                                    this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                                    this.scrimPopupWindow.setOutsideTouchable(true);
                                                                    this.scrimPopupWindow.setClippingEnabled(true);
                                                                    if (z14) {
                                                                    }
                                                                    actionBarPopupWindow = this.scrimPopupWindow;
                                                                    i5 = R.style.PopupContextAnimation;
                                                                    actionBarPopupWindow.setAnimationStyle(i5);
                                                                    this.scrimPopupWindow.setFocusable(true);
                                                                    chatScrimPopupContainerLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                                    this.scrimPopupWindow.setInputMethodMode(2);
                                                                    this.scrimPopupWindow.setSoftInputMode(48);
                                                                    this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                                    actionBarPopupWindowLayout5.setFitItems(true);
                                                                    Rect rect622 = rect;
                                                                    left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) + rect622.left) - AndroidUtilities.dp(28.0f);
                                                                    if (left >= AndroidUtilities.dp(6.0f)) {
                                                                    }
                                                                    if (AndroidUtilities.isTablet()) {
                                                                    }
                                                                    height = this.contentView.getHeight();
                                                                    measuredHeight = chatScrimPopupContainerLayout.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                                    measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                                    if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                                    }
                                                                    int y32 = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                                    int dp722 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                                    if (measuredHeight >= height) {
                                                                    }
                                                                    this.scrimPopupX = left;
                                                                    this.scrimPopupY = i6;
                                                                    chatScrimPopupContainerLayout.setMaxHeight((dp722 + measuredHeight) - i6);
                                                                    final int i5822 = left;
                                                                    final int i5922 = i6;
                                                                    final boolean z3822 = z14;
                                                                    final ReactionsContainerLayout reactionsContainerLayout422 = reactionsContainerLayout2;
                                                                    Runnable runnable222 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            ChatActivity.this.lambda$createMenu$260(i5822, i5922, z3822, reactionsContainerLayout422);
                                                                        }
                                                                    };
                                                                    if (atomicBoolean.get()) {
                                                                    }
                                                                    this.chatListView.stopScroll();
                                                                    this.chatLayoutManager.setCanScrollVertically(false);
                                                                    dimBehindView(view2, true);
                                                                    hideHints(false);
                                                                    undoView = this.topUndoView;
                                                                    if (undoView != null) {
                                                                    }
                                                                    undoView2 = this.undoView;
                                                                    if (undoView2 != null) {
                                                                    }
                                                                    chatActivityEnterView = this.chatActivityEnterView;
                                                                    if (chatActivityEnterView == null) {
                                                                    }
                                                                }
                                                                z16 = false;
                                                                if (this.chatMode != 3) {
                                                                }
                                                                if (z29) {
                                                                }
                                                                Activity parentActivity2 = getParentActivity();
                                                                int i452 = R.drawable.popup_fixed_alert;
                                                                final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout102 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity2, i452, this.themeDelegate, i44);
                                                                actionBarPopupWindowLayout102.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                                Rect rect42 = new Rect();
                                                                getParentActivity().getResources().getDrawable(i452).mutate().getPadding(rect42);
                                                                actionBarPopupWindowLayout102.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                                                if (actionBarPopupWindowLayout != null) {
                                                                }
                                                                View chatScrimPopupContainerLayout2 = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.133
                                                                    @Override // android.view.ViewGroup, android.view.View
                                                                    public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                                                        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                                                            ChatActivity.this.closeMenu();
                                                                        }
                                                                        return super.dispatchKeyEvent(keyEvent);
                                                                    }

                                                                    @Override // android.view.ViewGroup, android.view.View
                                                                    public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                                                        boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                                                        if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                                                            ChatActivity.this.closeMenu();
                                                                        }
                                                                        return dispatchTouchEvent;
                                                                    }
                                                                };
                                                                final Rect rect52 = rect2;
                                                                chatScrimPopupContainerLayout2.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.134
                                                                    private int[] pos = new int[2];

                                                                    /* JADX WARN: Code restructure failed: missing block: B:12:0x0052, code lost:
                                                                        if (r9.getActionMasked() == 4) goto L9;
                                                                     */
                                                                    /* JADX WARN: Code restructure failed: missing block: B:13:0x0054, code lost:
                                                                        r7.this$0.closeMenu();
                                                                     */
                                                                    /* JADX WARN: Code restructure failed: missing block: B:9:0x004a, code lost:
                                                                        if (r2.contains((int) r9.getX(), (int) r9.getY()) == false) goto L9;
                                                                     */
                                                                    @Override // android.view.View.OnTouchListener
                                                                    /*
                                                                        Code decompiled incorrectly, please refer to instructions dump.
                                                                    */
                                                                    public boolean onTouch(View view5, MotionEvent motionEvent) {
                                                                        if (motionEvent.getActionMasked() == 0) {
                                                                            ActionBarPopupWindow actionBarPopupWindow23 = ChatActivity.this.scrimPopupWindow;
                                                                            if (actionBarPopupWindow23 != null && actionBarPopupWindow23.isShowing()) {
                                                                                View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                                                                contentView.getLocationInWindow(this.pos);
                                                                                Rect rect63 = rect52;
                                                                                int[] iArr102 = this.pos;
                                                                                int i562 = iArr102[0];
                                                                                rect63.set(i562, iArr102[1], contentView.getMeasuredWidth() + i562, this.pos[1] + contentView.getMeasuredHeight());
                                                                            }
                                                                        }
                                                                        return false;
                                                                    }
                                                                });
                                                                actionBarPopupWindowLayout4 = actionBarPopupWindowLayout3;
                                                                if (actionBarPopupWindowLayout4 != null) {
                                                                }
                                                                actionBarPopupWindowLayout5 = actionBarPopupWindowLayout2;
                                                                reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout2);
                                                                final ReactionsContainerLayout reactionsContainerLayout3222 = reactionsContainerLayout2;
                                                                ActionBarPopupWindow actionBarPopupWindow2222 = new ActionBarPopupWindow(chatScrimPopupContainerLayout2, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                                    @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                                    public void dismiss() {
                                                                        super.dismiss();
                                                                        if (ChatActivity.this.scrimPopupWindow != this) {
                                                                            return;
                                                                        }
                                                                        if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                            ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                            ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                        }
                                                                        ChatActivity chatActivity2 = ChatActivity.this;
                                                                        chatActivity2.scrimPopupWindow = null;
                                                                        chatActivity2.menuDeleteItem = null;
                                                                        ChatActivity.this.scrimPopupWindowItems = null;
                                                                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                        if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                            ChatActivity.this.dimBehindView(false);
                                                                        } else {
                                                                            ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                        }
                                                                        ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                        if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                            return;
                                                                        }
                                                                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                                    }

                                                                    @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                                    public void dismiss(boolean z38222) {
                                                                        super.dismiss(z38222);
                                                                        ReactionsContainerLayout reactionsContainerLayout4222 = reactionsContainerLayout3222;
                                                                        if (reactionsContainerLayout4222 != null) {
                                                                            reactionsContainerLayout4222.dismissParent(z38222);
                                                                        }
                                                                    }
                                                                };
                                                                this.scrimPopupWindow = actionBarPopupWindow2222;
                                                                actionBarPopupWindow2222.setPauseNotifications(true);
                                                                this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                                this.scrimPopupWindow.setOutsideTouchable(true);
                                                                this.scrimPopupWindow.setClippingEnabled(true);
                                                                if (z14) {
                                                                }
                                                                actionBarPopupWindow = this.scrimPopupWindow;
                                                                i5 = R.style.PopupContextAnimation;
                                                                actionBarPopupWindow.setAnimationStyle(i5);
                                                                this.scrimPopupWindow.setFocusable(true);
                                                                chatScrimPopupContainerLayout2.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                                this.scrimPopupWindow.setInputMethodMode(2);
                                                                this.scrimPopupWindow.setSoftInputMode(48);
                                                                this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                                actionBarPopupWindowLayout5.setFitItems(true);
                                                                Rect rect6222 = rect;
                                                                left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout2.getMeasuredWidth()) + rect6222.left) - AndroidUtilities.dp(28.0f);
                                                                if (left >= AndroidUtilities.dp(6.0f)) {
                                                                }
                                                                if (AndroidUtilities.isTablet()) {
                                                                }
                                                                height = this.contentView.getHeight();
                                                                measuredHeight = chatScrimPopupContainerLayout2.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                                measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                                if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                                }
                                                                int y322 = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                                int dp7222 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                                if (measuredHeight >= height) {
                                                                }
                                                                this.scrimPopupX = left;
                                                                this.scrimPopupY = i6;
                                                                chatScrimPopupContainerLayout2.setMaxHeight((dp7222 + measuredHeight) - i6);
                                                                final int i58222 = left;
                                                                final int i59222 = i6;
                                                                final boolean z38222 = z14;
                                                                final ReactionsContainerLayout reactionsContainerLayout4222 = reactionsContainerLayout2;
                                                                Runnable runnable2222 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        ChatActivity.this.lambda$createMenu$260(i58222, i59222, z38222, reactionsContainerLayout4222);
                                                                    }
                                                                };
                                                                if (atomicBoolean.get()) {
                                                                }
                                                                this.chatListView.stopScroll();
                                                                this.chatLayoutManager.setCanScrollVertically(false);
                                                                dimBehindView(view2, true);
                                                                hideHints(false);
                                                                undoView = this.topUndoView;
                                                                if (undoView != null) {
                                                                }
                                                                undoView2 = this.undoView;
                                                                if (undoView2 != null) {
                                                                }
                                                                chatActivityEnterView = this.chatActivityEnterView;
                                                                if (chatActivityEnterView == null) {
                                                                }
                                                            }
                                                        }
                                                        z15 = false;
                                                        messageObject4 = this.selectedObject;
                                                        if (messageObject4 != null) {
                                                            messageObject16 = this.selectedObject;
                                                            if (messageObject16.sponsoredInfo == null) {
                                                                str5 = messageObject16.sponsoredUrl;
                                                                if (str5 != null) {
                                                                }
                                                            }
                                                            z16 = true;
                                                            if (this.chatMode != 3) {
                                                            }
                                                            if (z29) {
                                                            }
                                                            Activity parentActivity22 = getParentActivity();
                                                            int i4522 = R.drawable.popup_fixed_alert;
                                                            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout1022 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity22, i4522, this.themeDelegate, i44);
                                                            actionBarPopupWindowLayout1022.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                            Rect rect422 = new Rect();
                                                            getParentActivity().getResources().getDrawable(i4522).mutate().getPadding(rect422);
                                                            actionBarPopupWindowLayout1022.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                                            if (actionBarPopupWindowLayout != null) {
                                                            }
                                                            View chatScrimPopupContainerLayout22 = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.133
                                                                @Override // android.view.ViewGroup, android.view.View
                                                                public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                                                    if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                                                        ChatActivity.this.closeMenu();
                                                                    }
                                                                    return super.dispatchKeyEvent(keyEvent);
                                                                }

                                                                @Override // android.view.ViewGroup, android.view.View
                                                                public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                                                    boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                                                    if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                                                        ChatActivity.this.closeMenu();
                                                                    }
                                                                    return dispatchTouchEvent;
                                                                }
                                                            };
                                                            final Rect rect522 = rect2;
                                                            chatScrimPopupContainerLayout22.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.134
                                                                private int[] pos = new int[2];

                                                                /* JADX WARN: Code restructure failed: missing block: B:12:0x0052, code lost:
                                                                    if (r9.getActionMasked() == 4) goto L9;
                                                                 */
                                                                /* JADX WARN: Code restructure failed: missing block: B:13:0x0054, code lost:
                                                                    r7.this$0.closeMenu();
                                                                 */
                                                                /* JADX WARN: Code restructure failed: missing block: B:9:0x004a, code lost:
                                                                    if (r2.contains((int) r9.getX(), (int) r9.getY()) == false) goto L9;
                                                                 */
                                                                @Override // android.view.View.OnTouchListener
                                                                /*
                                                                    Code decompiled incorrectly, please refer to instructions dump.
                                                                */
                                                                public boolean onTouch(View view5, MotionEvent motionEvent) {
                                                                    if (motionEvent.getActionMasked() == 0) {
                                                                        ActionBarPopupWindow actionBarPopupWindow23 = ChatActivity.this.scrimPopupWindow;
                                                                        if (actionBarPopupWindow23 != null && actionBarPopupWindow23.isShowing()) {
                                                                            View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                                                            contentView.getLocationInWindow(this.pos);
                                                                            Rect rect63 = rect522;
                                                                            int[] iArr102 = this.pos;
                                                                            int i562 = iArr102[0];
                                                                            rect63.set(i562, iArr102[1], contentView.getMeasuredWidth() + i562, this.pos[1] + contentView.getMeasuredHeight());
                                                                        }
                                                                    }
                                                                    return false;
                                                                }
                                                            });
                                                            actionBarPopupWindowLayout4 = actionBarPopupWindowLayout3;
                                                            if (actionBarPopupWindowLayout4 != null) {
                                                            }
                                                            actionBarPopupWindowLayout5 = actionBarPopupWindowLayout2;
                                                            reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout22);
                                                            final ReactionsContainerLayout reactionsContainerLayout32222 = reactionsContainerLayout2;
                                                            ActionBarPopupWindow actionBarPopupWindow22222 = new ActionBarPopupWindow(chatScrimPopupContainerLayout22, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                                public void dismiss() {
                                                                    super.dismiss();
                                                                    if (ChatActivity.this.scrimPopupWindow != this) {
                                                                        return;
                                                                    }
                                                                    if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                        ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                        ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                    }
                                                                    ChatActivity chatActivity2 = ChatActivity.this;
                                                                    chatActivity2.scrimPopupWindow = null;
                                                                    chatActivity2.menuDeleteItem = null;
                                                                    ChatActivity.this.scrimPopupWindowItems = null;
                                                                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                    if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                        ChatActivity.this.dimBehindView(false);
                                                                    } else {
                                                                        ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                    }
                                                                    ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                    if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                        return;
                                                                    }
                                                                    ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                                }

                                                                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                                public void dismiss(boolean z382222) {
                                                                    super.dismiss(z382222);
                                                                    ReactionsContainerLayout reactionsContainerLayout42222 = reactionsContainerLayout32222;
                                                                    if (reactionsContainerLayout42222 != null) {
                                                                        reactionsContainerLayout42222.dismissParent(z382222);
                                                                    }
                                                                }
                                                            };
                                                            this.scrimPopupWindow = actionBarPopupWindow22222;
                                                            actionBarPopupWindow22222.setPauseNotifications(true);
                                                            this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                            this.scrimPopupWindow.setOutsideTouchable(true);
                                                            this.scrimPopupWindow.setClippingEnabled(true);
                                                            if (z14) {
                                                            }
                                                            actionBarPopupWindow = this.scrimPopupWindow;
                                                            i5 = R.style.PopupContextAnimation;
                                                            actionBarPopupWindow.setAnimationStyle(i5);
                                                            this.scrimPopupWindow.setFocusable(true);
                                                            chatScrimPopupContainerLayout22.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                            this.scrimPopupWindow.setInputMethodMode(2);
                                                            this.scrimPopupWindow.setSoftInputMode(48);
                                                            this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                            actionBarPopupWindowLayout5.setFitItems(true);
                                                            Rect rect62222 = rect;
                                                            left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout22.getMeasuredWidth()) + rect62222.left) - AndroidUtilities.dp(28.0f);
                                                            if (left >= AndroidUtilities.dp(6.0f)) {
                                                            }
                                                            if (AndroidUtilities.isTablet()) {
                                                            }
                                                            height = this.contentView.getHeight();
                                                            measuredHeight = chatScrimPopupContainerLayout22.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                            measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                            if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                            }
                                                            int y3222 = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                            int dp72222 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                            if (measuredHeight >= height) {
                                                            }
                                                            this.scrimPopupX = left;
                                                            this.scrimPopupY = i6;
                                                            chatScrimPopupContainerLayout22.setMaxHeight((dp72222 + measuredHeight) - i6);
                                                            final int i582222 = left;
                                                            final int i592222 = i6;
                                                            final boolean z382222 = z14;
                                                            final ReactionsContainerLayout reactionsContainerLayout42222 = reactionsContainerLayout2;
                                                            Runnable runnable22222 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    ChatActivity.this.lambda$createMenu$260(i582222, i592222, z382222, reactionsContainerLayout42222);
                                                                }
                                                            };
                                                            if (atomicBoolean.get()) {
                                                            }
                                                            this.chatListView.stopScroll();
                                                            this.chatLayoutManager.setCanScrollVertically(false);
                                                            dimBehindView(view2, true);
                                                            hideHints(false);
                                                            undoView = this.topUndoView;
                                                            if (undoView != null) {
                                                            }
                                                            undoView2 = this.undoView;
                                                            if (undoView2 != null) {
                                                            }
                                                            chatActivityEnterView = this.chatActivityEnterView;
                                                            if (chatActivityEnterView == null) {
                                                            }
                                                        }
                                                        z16 = false;
                                                        if (this.chatMode != 3) {
                                                        }
                                                        if (z29) {
                                                        }
                                                        Activity parentActivity222 = getParentActivity();
                                                        int i45222 = R.drawable.popup_fixed_alert;
                                                        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout10222 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity222, i45222, this.themeDelegate, i44);
                                                        actionBarPopupWindowLayout10222.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                                        Rect rect4222 = new Rect();
                                                        getParentActivity().getResources().getDrawable(i45222).mutate().getPadding(rect4222);
                                                        actionBarPopupWindowLayout10222.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                                        if (actionBarPopupWindowLayout != null) {
                                                        }
                                                        View chatScrimPopupContainerLayout222 = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.133
                                                            @Override // android.view.ViewGroup, android.view.View
                                                            public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                                                if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                                                    ChatActivity.this.closeMenu();
                                                                }
                                                                return super.dispatchKeyEvent(keyEvent);
                                                            }

                                                            @Override // android.view.ViewGroup, android.view.View
                                                            public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                                                boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                                                if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                                                    ChatActivity.this.closeMenu();
                                                                }
                                                                return dispatchTouchEvent;
                                                            }
                                                        };
                                                        final Rect rect5222 = rect2;
                                                        chatScrimPopupContainerLayout222.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.134
                                                            private int[] pos = new int[2];

                                                            /* JADX WARN: Code restructure failed: missing block: B:12:0x0052, code lost:
                                                                if (r9.getActionMasked() == 4) goto L9;
                                                             */
                                                            /* JADX WARN: Code restructure failed: missing block: B:13:0x0054, code lost:
                                                                r7.this$0.closeMenu();
                                                             */
                                                            /* JADX WARN: Code restructure failed: missing block: B:9:0x004a, code lost:
                                                                if (r2.contains((int) r9.getX(), (int) r9.getY()) == false) goto L9;
                                                             */
                                                            @Override // android.view.View.OnTouchListener
                                                            /*
                                                                Code decompiled incorrectly, please refer to instructions dump.
                                                            */
                                                            public boolean onTouch(View view5, MotionEvent motionEvent) {
                                                                if (motionEvent.getActionMasked() == 0) {
                                                                    ActionBarPopupWindow actionBarPopupWindow23 = ChatActivity.this.scrimPopupWindow;
                                                                    if (actionBarPopupWindow23 != null && actionBarPopupWindow23.isShowing()) {
                                                                        View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                                                        contentView.getLocationInWindow(this.pos);
                                                                        Rect rect63 = rect5222;
                                                                        int[] iArr102 = this.pos;
                                                                        int i562 = iArr102[0];
                                                                        rect63.set(i562, iArr102[1], contentView.getMeasuredWidth() + i562, this.pos[1] + contentView.getMeasuredHeight());
                                                                    }
                                                                }
                                                                return false;
                                                            }
                                                        });
                                                        actionBarPopupWindowLayout4 = actionBarPopupWindowLayout3;
                                                        if (actionBarPopupWindowLayout4 != null) {
                                                        }
                                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout2;
                                                        reactionsContainerLayout2.setParentLayout(chatScrimPopupContainerLayout222);
                                                        final ReactionsContainerLayout reactionsContainerLayout322222 = reactionsContainerLayout2;
                                                        ActionBarPopupWindow actionBarPopupWindow222222 = new ActionBarPopupWindow(chatScrimPopupContainerLayout222, -2, -2) { // from class: org.telegram.ui.ChatActivity.138
                                                            @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                                            public void dismiss() {
                                                                super.dismiss();
                                                                if (ChatActivity.this.scrimPopupWindow != this) {
                                                                    return;
                                                                }
                                                                if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                                    ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                                    ChatActivity.this.messageSeenPrivacyBulletin = null;
                                                                }
                                                                ChatActivity chatActivity2 = ChatActivity.this;
                                                                chatActivity2.scrimPopupWindow = null;
                                                                chatActivity2.menuDeleteItem = null;
                                                                ChatActivity.this.scrimPopupWindowItems = null;
                                                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                                                if (ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                                    ChatActivity.this.dimBehindView(false);
                                                                } else {
                                                                    ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                                                }
                                                                ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                                                                if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                                                                    return;
                                                                }
                                                                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                                            }

                                                            @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                                            public void dismiss(boolean z3822222) {
                                                                super.dismiss(z3822222);
                                                                ReactionsContainerLayout reactionsContainerLayout422222 = reactionsContainerLayout322222;
                                                                if (reactionsContainerLayout422222 != null) {
                                                                    reactionsContainerLayout422222.dismissParent(z3822222);
                                                                }
                                                            }
                                                        };
                                                        this.scrimPopupWindow = actionBarPopupWindow222222;
                                                        actionBarPopupWindow222222.setPauseNotifications(true);
                                                        this.scrimPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
                                                        this.scrimPopupWindow.setOutsideTouchable(true);
                                                        this.scrimPopupWindow.setClippingEnabled(true);
                                                        if (z14) {
                                                        }
                                                        actionBarPopupWindow = this.scrimPopupWindow;
                                                        i5 = R.style.PopupContextAnimation;
                                                        actionBarPopupWindow.setAnimationStyle(i5);
                                                        this.scrimPopupWindow.setFocusable(true);
                                                        chatScrimPopupContainerLayout222.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                                        this.scrimPopupWindow.setInputMethodMode(2);
                                                        this.scrimPopupWindow.setSoftInputMode(48);
                                                        this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                                        actionBarPopupWindowLayout5.setFitItems(true);
                                                        Rect rect622222 = rect;
                                                        left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout222.getMeasuredWidth()) + rect622222.left) - AndroidUtilities.dp(28.0f);
                                                        if (left >= AndroidUtilities.dp(6.0f)) {
                                                        }
                                                        if (AndroidUtilities.isTablet()) {
                                                        }
                                                        height = this.contentView.getHeight();
                                                        measuredHeight = chatScrimPopupContainerLayout222.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                                        measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                                        if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                        }
                                                        int y32222 = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                                        int dp722222 = (height - measuredHeight) - AndroidUtilities.dp(8.0f);
                                                        if (measuredHeight >= height) {
                                                        }
                                                        this.scrimPopupX = left;
                                                        this.scrimPopupY = i6;
                                                        chatScrimPopupContainerLayout222.setMaxHeight((dp722222 + measuredHeight) - i6);
                                                        final int i5822222 = left;
                                                        final int i5922222 = i6;
                                                        final boolean z3822222 = z14;
                                                        final ReactionsContainerLayout reactionsContainerLayout422222 = reactionsContainerLayout2;
                                                        Runnable runnable222222 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                ChatActivity.this.lambda$createMenu$260(i5822222, i5922222, z3822222, reactionsContainerLayout422222);
                                                            }
                                                        };
                                                        if (atomicBoolean.get()) {
                                                        }
                                                        this.chatListView.stopScroll();
                                                        this.chatLayoutManager.setCanScrollVertically(false);
                                                        dimBehindView(view2, true);
                                                        hideHints(false);
                                                        undoView = this.topUndoView;
                                                        if (undoView != null) {
                                                        }
                                                        undoView2 = this.undoView;
                                                        if (undoView2 != null) {
                                                        }
                                                        chatActivityEnterView = this.chatActivityEnterView;
                                                        if (chatActivityEnterView == null) {
                                                        }
                                                    }
                                                }
                                                if (messageType < 0 || (messageType == -1 && z24 && ((messageObject2.isSending() || messageObject2.isEditing()) && this.currentEncryptedChat == null))) {
                                                    this.selectedObject = messageObject2;
                                                    this.selectedObjectGroup = validGroupedMessage;
                                                    i21 = messageObject2.type;
                                                    if (i21 != 19 && i21 != 15 && i21 != 13) {
                                                        charSequence2 = getMessageCaption(messageObject2, validGroupedMessage, iArr);
                                                        if (charSequence2 == null && this.selectedObject.isPoll()) {
                                                            try {
                                                                TLRPC.Poll poll = ((TLRPC.TL_messageMediaPoll) this.selectedObject.messageOwner.media).poll;
                                                                StringBuilder sb3 = new StringBuilder(poll.question.text);
                                                                sb3.append("\n");
                                                                it = poll.answers.iterator();
                                                                while (it.hasNext()) {
                                                                    sb3.append("\n🔘 ");
                                                                    TLRPC.TL_textWithEntities tL_textWithEntities = it.next().text;
                                                                    sb3.append(tL_textWithEntities == null ? str3 : tL_textWithEntities.text);
                                                                }
                                                                charSequence2 = sb3.toString();
                                                            } catch (Exception unused) {
                                                            }
                                                        }
                                                        if (charSequence2 == null && MessageObject.isMediaEmpty(this.selectedObject.messageOwner)) {
                                                            charSequence2 = getMessageContent(this.selectedObject, 0L, false);
                                                        }
                                                        if (charSequence2 != null) {
                                                        }
                                                        MessageObject messageObject30 = this.selectedObject;
                                                        charSequence2 = (!messageObject30.translated || messageObject30.isRestrictedMessage) ? null : null;
                                                        if (messageObject2.isSponsored() && !getUserConfig().isPremium() && !getMessagesController().premiumFeaturesBlocked() && !messageObject2.sponsoredCanReport) {
                                                            arrayList14.add(LocaleController.getString(R.string.HideAd));
                                                            arrayList15.add(31);
                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_block2));
                                                        }
                                                        if (messageObject2.isSponsored() && messageObject2.sponsoredCanReport) {
                                                            arrayList14.add(LocaleController.getString(R.string.AboutRevenueSharingAds));
                                                            arrayList15.add(33);
                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_report));
                                                            arrayList14.add(LocaleController.getString(R.string.ReportAd));
                                                            arrayList15.add(34);
                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_block2));
                                                            if (!getMessagesController().premiumFeaturesBlocked()) {
                                                                arrayList14.add(LocaleController.getString(R.string.RemoveAds));
                                                                arrayList15.add(35);
                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_cancel));
                                                            }
                                                        }
                                                        if (messageType == -1) {
                                                            MessageObject messageObject31 = this.selectedObject;
                                                            if ((messageObject31.type == 0 || messageObject31.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z26 && !messageObject2.isExpiredStory()) {
                                                                arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                arrayList15.add(3);
                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                            }
                                                            arrayList14.add(LocaleController.getString(R.string.CancelSending));
                                                            arrayList15.add(24);
                                                        } else {
                                                            if (messageType == 0) {
                                                                arrayList14.add(LocaleController.getString(R.string.Retry));
                                                                arrayList15.add(num);
                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_retry));
                                                                arrayList14.add(LocaleController.getString((this.chatMode != 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                arrayList15.add(1);
                                                            } else if (messageType == 1) {
                                                                if (this.currentChat != null) {
                                                                    if (z13 && !this.isInsideContainer) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Reply));
                                                                        arrayList15.add(8);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.menu_reply));
                                                                    }
                                                                    if (!isThreadChat() && this.chatMode != 1 && messageObject != null && messageObject.hasReplies() && this.currentChat.megagroup && messageObject.canViewThread()) {
                                                                        arrayList14.add(LocaleController.formatPluralString(str4, messageObject.getRepliesCount(), new Object[0]));
                                                                        arrayList15.add(27);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                                                    }
                                                                    MessageObject messageObject32 = this.selectedObject;
                                                                    if (messageObject32 != null && (message6 = messageObject32.messageOwner) != null && message6.action == null && (chat6 = this.currentChat) != null && chat6.forum && !this.isTopic && (messageReplyHeader3 = message6.reply_to) != null && messageReplyHeader3.forum_topic) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ViewInTopic));
                                                                        arrayList15.add(32);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                                                    }
                                                                    if (z12) {
                                                                        arrayList14.add(LocaleController.getString(R.string.UnpinMessage));
                                                                        arrayList15.add(14);
                                                                        i36 = R.drawable.msg_unpin;
                                                                    } else {
                                                                        if (z8) {
                                                                            arrayList14.add(LocaleController.getString(R.string.PinMessage));
                                                                            arrayList15.add(13);
                                                                            i36 = R.drawable.msg_pin;
                                                                        }
                                                                        messageObject19 = this.selectedObject;
                                                                        if (messageObject19 != null && messageObject19.contentType == 0 && charSequence2 != null && charSequence2.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                                                            arrayList14.add(LocaleController.getString(R.string.TranslateMessage));
                                                                            arrayList15.add(29);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_translate));
                                                                        }
                                                                        if (messageObject2.canEditMessage(this.currentChat)) {
                                                                            arrayList14.add(LocaleController.getString(R.string.Edit));
                                                                            arrayList15.add(12);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_edit));
                                                                        }
                                                                        messageObject20 = this.selectedObject;
                                                                        if (messageObject20.contentType == 0 && !messageObject20.isMediaEmptyWebpage() && this.selectedObject.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((user4 = this.currentUser) != null && user4.bot))) {
                                                                            arrayList14.add(LocaleController.getString(R.string.ReportChat));
                                                                            arrayList15.add(23);
                                                                            i35 = R.drawable.msg_report;
                                                                            arrayList13.add(Integer.valueOf(i35));
                                                                        }
                                                                        if (messageObject2.canDeleteMessage(this.chatMode == 1, this.currentChat) && (((arrayList8 = this.threadMessageObjects) == null || !arrayList8.contains(messageObject2)) && ((message5 = messageObject2.messageOwner) == null || !(message5.action instanceof TLRPC.TL_messageActionTopicCreate)))) {
                                                                            arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                            arrayList15.add(1);
                                                                        }
                                                                        j = 0;
                                                                    }
                                                                    arrayList13.add(Integer.valueOf(i36));
                                                                    messageObject19 = this.selectedObject;
                                                                    if (messageObject19 != null) {
                                                                        arrayList14.add(LocaleController.getString(R.string.TranslateMessage));
                                                                        arrayList15.add(29);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_translate));
                                                                    }
                                                                    if (messageObject2.canEditMessage(this.currentChat)) {
                                                                    }
                                                                    messageObject20 = this.selectedObject;
                                                                    if (messageObject20.contentType == 0) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ReportChat));
                                                                        arrayList15.add(23);
                                                                        i35 = R.drawable.msg_report;
                                                                        arrayList13.add(Integer.valueOf(i35));
                                                                    }
                                                                    if (messageObject2.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                                                                        arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                        arrayList15.add(1);
                                                                    }
                                                                    j = 0;
                                                                } else {
                                                                    if (this.selectedObject.getId() > 0 && z13 && !this.isInsideContainer) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Reply));
                                                                        arrayList15.add(8);
                                                                        i35 = R.drawable.menu_reply;
                                                                        arrayList13.add(Integer.valueOf(i35));
                                                                    }
                                                                    if (messageObject2.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                                                                    }
                                                                    j = 0;
                                                                }
                                                                charSequence = charSequence2;
                                                                actionBarPopupWindowLayout = null;
                                                                messageObject3 = this.selectedObject;
                                                                if (messageObject3 != null) {
                                                                    i20 = 0;
                                                                    while (i20 < arrayList15.size()) {
                                                                    }
                                                                }
                                                                if (!arrayList15.isEmpty()) {
                                                                }
                                                                if (this.scrimPopupWindow != null) {
                                                                }
                                                            } else {
                                                                String str9 = str4;
                                                                if (messageType == 20) {
                                                                    arrayList14.add(LocaleController.getString(R.string.Retry));
                                                                    arrayList15.add(num);
                                                                    arrayList13.add(Integer.valueOf(R.drawable.msg_retry));
                                                                    if (z26) {
                                                                        i34 = 3;
                                                                    } else {
                                                                        arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                        i34 = 3;
                                                                        arrayList15.add(3);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                                    }
                                                                    arrayList14.add(LocaleController.getString((this.chatMode != i34 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                    arrayList15.add(1);
                                                                } else if (this.currentEncryptedChat == null) {
                                                                    if (this.chatMode == 1) {
                                                                        arrayList14.add(LocaleController.getString(R.string.MessageScheduleSend));
                                                                        arrayList15.add(100);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_send));
                                                                    }
                                                                    if (this.selectedObject.messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
                                                                        TLRPC.TL_messageActionPhoneCall tL_messageActionPhoneCall = (TLRPC.TL_messageActionPhoneCall) messageObject2.messageOwner.action;
                                                                        TLRPC.PhoneCallDiscardReason phoneCallDiscardReason = tL_messageActionPhoneCall.reason;
                                                                        arrayList14.add(LocaleController.getString((((phoneCallDiscardReason instanceof TLRPC.TL_phoneCallDiscardReasonMissed) || (phoneCallDiscardReason instanceof TLRPC.TL_phoneCallDiscardReasonBusy)) && !messageObject2.isOutOwner()) ? R.string.CallBack : R.string.CallAgain));
                                                                        arrayList15.add(18);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_callback));
                                                                        if (VoIPHelper.canRateCall(tL_messageActionPhoneCall)) {
                                                                            arrayList14.add(LocaleController.getString(R.string.CallMessageReportProblem));
                                                                            arrayList15.add(19);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_fave));
                                                                        }
                                                                    }
                                                                    if ((z13 || (!z26 && ChatObject.isChannelAndNotMegaGroup(this.currentChat) && !this.selectedObject.isSponsored() && this.selectedObject.contentType == 0 && this.chatMode == 0)) && !this.isInsideContainer) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Reply));
                                                                        arrayList15.add(8);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.menu_reply));
                                                                    }
                                                                    MessageObject messageObject33 = this.selectedObject;
                                                                    if ((messageObject33.type == 0 || messageObject33.isDice() || this.selectedObject.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z26 && !this.selectedObject.sponsoredCanReport) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                        arrayList15.add(3);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                                    }
                                                                    if (!isThreadChat() && this.chatMode != 1 && (chat5 = this.currentChat) != null && messageObject != null && ((chat5.has_link || messageObject.hasReplies()) && this.currentChat.megagroup && messageObject.canViewThread())) {
                                                                        arrayList14.add(messageObject.hasReplies() ? LocaleController.formatPluralString(str9, messageObject.getRepliesCount(), new Object[0]) : LocaleController.getString(R.string.ViewThread));
                                                                        arrayList15.add(27);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                                                    }
                                                                    if (!this.selectedObject.isSponsored() && this.chatMode != 1 && ChatObject.isChannel(this.currentChat) && this.selectedObject.getDialogId() != this.mergeDialogId) {
                                                                        arrayList14.add(LocaleController.getString(R.string.CopyLink));
                                                                        arrayList15.add(22);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_link));
                                                                    }
                                                                    MessageObject messageObject34 = this.selectedObject;
                                                                    if (messageObject34 != null && (message4 = messageObject34.messageOwner) != null && message4.action == null && (chat4 = this.currentChat) != null && chat4.forum && !this.isTopic && (messageReplyHeader2 = message4.reply_to) != null && messageReplyHeader2.forum_topic) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ViewInTopic));
                                                                        arrayList15.add(32);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                                                    }
                                                                    if (messageType == 2) {
                                                                        if (this.chatMode != 1) {
                                                                            if (this.selectedObject.type != 17 || messageObject2.isPollClosed()) {
                                                                                if (this.selectedObject.isMusic() && !z26 && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                                    i33 = R.string.SaveToMusic;
                                                                                } else if (this.selectedObject.isDocument() && !z26 && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                                    i33 = R.string.SaveToDownloads;
                                                                                }
                                                                                arrayList14.add(LocaleController.getString(i33));
                                                                                arrayList15.add(10);
                                                                                i25 = R.drawable.msg_download;
                                                                                arrayList13.add(Integer.valueOf(i25));
                                                                            } else {
                                                                                if (messageObject2.canUnvote()) {
                                                                                    arrayList14.add(LocaleController.getString(R.string.Unvote));
                                                                                    arrayList15.add(25);
                                                                                    arrayList13.add(Integer.valueOf(R.drawable.msg_unvote));
                                                                                }
                                                                                if (!messageObject2.isForwarded()) {
                                                                                    if (!messageObject2.isOut() || (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup)) {
                                                                                        if (ChatObject.isChannel(this.currentChat)) {
                                                                                            TLRPC.Chat chat9 = this.currentChat;
                                                                                            if (!chat9.megagroup) {
                                                                                                if (!chat9.creator) {
                                                                                                    TLRPC.TL_chatAdminRights tL_chatAdminRights = chat9.admin_rights;
                                                                                                    if (tL_chatAdminRights != null) {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    arrayList14.add(LocaleController.getString(messageObject2.isQuiz() ? R.string.StopQuiz : R.string.StopPoll));
                                                                                    arrayList15.add(26);
                                                                                    i25 = R.drawable.msg_pollstop;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                }
                                                                            }
                                                                        }
                                                                        if (this.selectedObject.isSponsored() && (i31 = this.chatMode) != 5 && i31 != 1 && ((!this.selectedObject.needDrawBluredPreview() || this.selectedObject.hasExtendedMediaPreview()) && !this.selectedObject.isLiveLocation() && (i32 = (messageObject18 = this.selectedObject).type) != 16 && !z11 && i32 != 18 && i32 != 25 && i32 != 21 && !messageObject18.isWallpaperAction() && !messageObject2.isExpiredStory())) {
                                                                            int i60 = messageObject2.type;
                                                                            if (i60 != 24 && i60 != 30) {
                                                                                arrayList14.add(LocaleController.getString(R.string.Forward));
                                                                                arrayList15.add(2);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_forward));
                                                                            }
                                                                        }
                                                                        if (z12) {
                                                                            arrayList14.add(LocaleController.getString(R.string.UnpinMessage));
                                                                            arrayList15.add(14);
                                                                            i29 = R.drawable.msg_unpin;
                                                                        } else {
                                                                            if (z8) {
                                                                                arrayList14.add(LocaleController.getString(R.string.PinMessage));
                                                                                arrayList15.add(13);
                                                                                i29 = R.drawable.msg_pin;
                                                                            }
                                                                            messageObject17 = this.selectedObject;
                                                                            if (messageObject17 == null && messageObject17.contentType == 0 && charSequence2 != null && charSequence2.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                                                                arrayList14.add(LocaleController.getString(R.string.TranslateMessage));
                                                                                arrayList15.add(29);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_translate));
                                                                            }
                                                                            if (z10) {
                                                                                arrayList14.add(LocaleController.getString(R.string.Edit));
                                                                                arrayList15.add(12);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_edit));
                                                                            }
                                                                            if (this.chatMode == 1 && this.selectedObject.canEditMessageScheduleTime(this.currentChat)) {
                                                                                arrayList14.add(LocaleController.getString(R.string.MessageScheduleEditTime));
                                                                                arrayList15.add(102);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_calendar2));
                                                                            }
                                                                            MessageObject.GroupedMessages groupedMessages = this.selectedObjectGroup;
                                                                            findPrimaryMessageObject = groupedMessages == null ? groupedMessages.findPrimaryMessageObject() : this.selectedObject;
                                                                            if (findPrimaryMessageObject != null && findPrimaryMessageObject.isFactCheckable() && getMessagesController().canEditFactcheck && ChatObject.isChannelAndNotMegaGroup(this.currentChat)) {
                                                                                arrayList14.add(LocaleController.getString(findPrimaryMessageObject.getFactCheck() != null ? R.string.AddFactCheck : R.string.EditFactCheck));
                                                                                arrayList15.add(106);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.menu_factcheck));
                                                                            }
                                                                            if (this.chatMode != 1) {
                                                                                MessageObject messageObject35 = this.selectedObject;
                                                                                if (messageObject35.contentType == 0 && messageObject35.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((user3 = this.currentUser) != null && user3.bot))) {
                                                                                    if (UserObject.isReplyUser(this.currentUser)) {
                                                                                        arrayList14.add(LocaleController.getString(R.string.BlockContact));
                                                                                        arrayList15.add(23);
                                                                                        i30 = R.drawable.msg_block2;
                                                                                    } else {
                                                                                        arrayList14.add(LocaleController.getString(R.string.ReportChat));
                                                                                        arrayList15.add(23);
                                                                                        i30 = R.drawable.msg_report;
                                                                                    }
                                                                                    arrayList13.add(Integer.valueOf(i30));
                                                                                }
                                                                            }
                                                                            if (messageObject2.canDeleteMessage(this.chatMode != 1, this.currentChat) && ((arrayList7 = this.threadMessageObjects) == null || !arrayList7.contains(messageObject2))) {
                                                                                arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                                arrayList15.add(1);
                                                                                arrayList13.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                                                            }
                                                                        }
                                                                        arrayList13.add(Integer.valueOf(i29));
                                                                        messageObject17 = this.selectedObject;
                                                                        if (messageObject17 == null) {
                                                                        }
                                                                        if (z10) {
                                                                        }
                                                                        if (this.chatMode == 1) {
                                                                            arrayList14.add(LocaleController.getString(R.string.MessageScheduleEditTime));
                                                                            arrayList15.add(102);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_calendar2));
                                                                        }
                                                                        MessageObject.GroupedMessages groupedMessages2 = this.selectedObjectGroup;
                                                                        if (groupedMessages2 == null) {
                                                                        }
                                                                        if (findPrimaryMessageObject != null) {
                                                                            arrayList14.add(LocaleController.getString(findPrimaryMessageObject.getFactCheck() != null ? R.string.AddFactCheck : R.string.EditFactCheck));
                                                                            arrayList15.add(106);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.menu_factcheck));
                                                                        }
                                                                        if (this.chatMode != 1) {
                                                                        }
                                                                        if (messageObject2.canDeleteMessage(this.chatMode != 1, this.currentChat)) {
                                                                            arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                            arrayList15.add(1);
                                                                            arrayList13.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                                                        }
                                                                    } else if (messageType != 3 || z26) {
                                                                        if (messageType == 4) {
                                                                            if (!z26 && !this.selectedObject.hasRevealedExtendedMedia()) {
                                                                                if (this.selectedObject.isVideo()) {
                                                                                    if (!this.selectedObject.needDrawBluredPreview()) {
                                                                                        arrayList14.add(LocaleController.getString(R.string.SaveToGallery));
                                                                                        arrayList15.add(4);
                                                                                        i28 = R.drawable.msg_gallery;
                                                                                        arrayList13.add(Integer.valueOf(i28));
                                                                                        arrayList14.add(LocaleController.getString(R.string.ShareFile));
                                                                                        arrayList15.add(6);
                                                                                        i25 = R.drawable.msg_shareout;
                                                                                        arrayList13.add(Integer.valueOf(i25));
                                                                                    }
                                                                                } else if (this.selectedObject.isMusic() && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                                    i27 = R.string.SaveToMusic;
                                                                                    arrayList14.add(LocaleController.getString(i27));
                                                                                    arrayList15.add(10);
                                                                                    i28 = R.drawable.msg_download;
                                                                                    arrayList13.add(Integer.valueOf(i28));
                                                                                    arrayList14.add(LocaleController.getString(R.string.ShareFile));
                                                                                    arrayList15.add(6);
                                                                                    i25 = R.drawable.msg_shareout;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                } else if (this.selectedObject.getDocument() != null && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                                    if (MessageObject.isNewGifDocument(this.selectedObject.getDocument())) {
                                                                                        arrayList14.add(LocaleController.getString(R.string.SaveToGIFs));
                                                                                        arrayList15.add(11);
                                                                                        i26 = R.drawable.msg_gif;
                                                                                        arrayList13.add(Integer.valueOf(i26));
                                                                                    }
                                                                                    i27 = R.string.SaveToDownloads;
                                                                                    arrayList14.add(LocaleController.getString(i27));
                                                                                    arrayList15.add(10);
                                                                                    i28 = R.drawable.msg_download;
                                                                                    arrayList13.add(Integer.valueOf(i28));
                                                                                    arrayList14.add(LocaleController.getString(R.string.ShareFile));
                                                                                    arrayList15.add(6);
                                                                                    i25 = R.drawable.msg_shareout;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                } else if (!this.selectedObject.needDrawBluredPreview()) {
                                                                                    arrayList14.add(LocaleController.getString(R.string.SaveToGallery));
                                                                                    arrayList15.add(4);
                                                                                    i25 = R.drawable.msg_gallery;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                }
                                                                            }
                                                                        } else if (messageType == 5) {
                                                                            arrayList14.add(LocaleController.getString(R.string.ApplyLocalizationFile));
                                                                            arrayList15.add(5);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_language));
                                                                            if (!z26) {
                                                                                if (!this.selectedObject.isVoiceOnce()) {
                                                                                }
                                                                            }
                                                                        } else if (messageType == 10) {
                                                                            arrayList14.add(LocaleController.getString(R.string.ApplyThemeFile));
                                                                            arrayList15.add(5);
                                                                            arrayList13.add(Integer.valueOf(R.drawable.msg_theme));
                                                                            if (!z26) {
                                                                                if (!this.selectedObject.isVoiceOnce()) {
                                                                                }
                                                                            }
                                                                        } else if (messageType != 6 || z26 || this.selectedObject.hasRevealedExtendedMedia()) {
                                                                            if (messageType == 7) {
                                                                                if (this.selectedObject.isMask()) {
                                                                                    arrayList14.add(LocaleController.getString(R.string.AddToMasks));
                                                                                    arrayList15.add(9);
                                                                                    i25 = R.drawable.msg_sticker;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                } else {
                                                                                    arrayList14.add(LocaleController.getString(R.string.AddToStickers));
                                                                                    arrayList15.add(9);
                                                                                    arrayList13.add(Integer.valueOf(R.drawable.msg_sticker));
                                                                                    if (!getMediaDataController().isStickerInFavorites(this.selectedObject.getDocument())) {
                                                                                    }
                                                                                    arrayList14.add(LocaleController.getString(R.string.DeleteFromFavorites));
                                                                                    arrayList15.add(21);
                                                                                    i25 = R.drawable.msg_unfave;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                }
                                                                            } else if (messageType == 8) {
                                                                                long j2 = this.selectedObject.messageOwner.media.user_id;
                                                                                TLRPC.User user6 = j2 != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2)) : null;
                                                                                if (user6 != null && user6.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(Long.valueOf(user6.id)) == null) {
                                                                                    arrayList14.add(LocaleController.getString(R.string.AddContactTitle));
                                                                                    arrayList15.add(15);
                                                                                    arrayList13.add(Integer.valueOf(R.drawable.msg_addcontact));
                                                                                }
                                                                                if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                                                                    if (!z26) {
                                                                                        arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                                        arrayList15.add(16);
                                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                                                    }
                                                                                    arrayList14.add(LocaleController.getString(R.string.Call));
                                                                                    arrayList15.add(17);
                                                                                    i25 = R.drawable.msg_callback;
                                                                                    arrayList13.add(Integer.valueOf(i25));
                                                                                }
                                                                            } else if (messageType == 9) {
                                                                                if (!getMediaDataController().isStickerInFavorites(this.selectedObject.getDocument())) {
                                                                                }
                                                                                arrayList14.add(LocaleController.getString(R.string.DeleteFromFavorites));
                                                                                arrayList15.add(21);
                                                                                i25 = R.drawable.msg_unfave;
                                                                                arrayList13.add(Integer.valueOf(i25));
                                                                            }
                                                                            charSequence = charSequence2;
                                                                            actionBarPopupWindowLayout = null;
                                                                            messageObject3 = this.selectedObject;
                                                                            if (messageObject3 != null) {
                                                                            }
                                                                            if (!arrayList15.isEmpty()) {
                                                                            }
                                                                            if (this.scrimPopupWindow != null) {
                                                                            }
                                                                        } else if (!this.selectedObject.needDrawBluredPreview() && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                            arrayList14.add(LocaleController.getString(R.string.SaveToGallery));
                                                                            arrayList15.add(7);
                                                                            i26 = R.drawable.msg_gallery;
                                                                            arrayList13.add(Integer.valueOf(i26));
                                                                            i27 = R.string.SaveToDownloads;
                                                                            arrayList14.add(LocaleController.getString(i27));
                                                                            arrayList15.add(10);
                                                                            i28 = R.drawable.msg_download;
                                                                            arrayList13.add(Integer.valueOf(i28));
                                                                            arrayList14.add(LocaleController.getString(R.string.ShareFile));
                                                                            arrayList15.add(6);
                                                                            i25 = R.drawable.msg_shareout;
                                                                            arrayList13.add(Integer.valueOf(i25));
                                                                        }
                                                                        if (this.selectedObject.isSponsored()) {
                                                                        }
                                                                        if (z12) {
                                                                        }
                                                                        arrayList13.add(Integer.valueOf(i29));
                                                                        messageObject17 = this.selectedObject;
                                                                        if (messageObject17 == null) {
                                                                        }
                                                                        if (z10) {
                                                                        }
                                                                        if (this.chatMode == 1) {
                                                                        }
                                                                        MessageObject.GroupedMessages groupedMessages22 = this.selectedObjectGroup;
                                                                        if (groupedMessages22 == null) {
                                                                        }
                                                                        if (findPrimaryMessageObject != null) {
                                                                        }
                                                                        if (this.chatMode != 1) {
                                                                        }
                                                                        if (messageObject2.canDeleteMessage(this.chatMode != 1, this.currentChat)) {
                                                                        }
                                                                    } else {
                                                                        TLRPC.MessageMedia messageMedia = this.selectedObject.messageOwner.media;
                                                                        if ((messageMedia instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.isNewGifDocument(messageMedia.webpage.document)) {
                                                                            arrayList14.add(LocaleController.getString(R.string.SaveToGIFs));
                                                                            arrayList15.add(11);
                                                                            i25 = R.drawable.msg_gif;
                                                                            arrayList13.add(Integer.valueOf(i25));
                                                                        }
                                                                        if (this.selectedObject.isSponsored()) {
                                                                        }
                                                                        if (z12) {
                                                                        }
                                                                        arrayList13.add(Integer.valueOf(i29));
                                                                        messageObject17 = this.selectedObject;
                                                                        if (messageObject17 == null) {
                                                                        }
                                                                        if (z10) {
                                                                        }
                                                                        if (this.chatMode == 1) {
                                                                        }
                                                                        MessageObject.GroupedMessages groupedMessages222 = this.selectedObjectGroup;
                                                                        if (groupedMessages222 == null) {
                                                                        }
                                                                        if (findPrimaryMessageObject != null) {
                                                                        }
                                                                        if (this.chatMode != 1) {
                                                                        }
                                                                        if (messageObject2.canDeleteMessage(this.chatMode != 1, this.currentChat)) {
                                                                        }
                                                                    }
                                                                    j = 0;
                                                                    charSequence = charSequence2;
                                                                    actionBarPopupWindowLayout = null;
                                                                    messageObject3 = this.selectedObject;
                                                                    if (messageObject3 != null) {
                                                                    }
                                                                    if (!arrayList15.isEmpty()) {
                                                                    }
                                                                    if (this.scrimPopupWindow != null) {
                                                                    }
                                                                } else {
                                                                    if (z13 && !this.isInsideContainer) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Reply));
                                                                        arrayList15.add(8);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.menu_reply));
                                                                    }
                                                                    MessageObject messageObject36 = this.selectedObject;
                                                                    if ((messageObject36.type == 0 || messageObject36.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z26) {
                                                                        arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                        arrayList15.add(3);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                                    }
                                                                    if (!isThreadChat() && this.chatMode != 1 && (chat3 = this.currentChat) != null && messageObject != null && ((chat3.has_link || messageObject.hasReplies()) && this.currentChat.megagroup && messageObject.canViewThread())) {
                                                                        arrayList14.add(messageObject.hasReplies() ? LocaleController.formatPluralString(str9, messageObject.getRepliesCount(), new Object[0]) : LocaleController.getString(R.string.ViewThread));
                                                                        arrayList15.add(27);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                                                    }
                                                                    MessageObject messageObject37 = this.selectedObject;
                                                                    if (messageObject37 != null && (message3 = messageObject37.messageOwner) != null && message3.action == null && (chat2 = this.currentChat) != null && chat2.forum && !this.isTopic && (messageReplyHeader = message3.reply_to) != null && messageReplyHeader.forum_topic) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ViewInTopic));
                                                                        arrayList15.add(32);
                                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                                                    }
                                                                    if (messageType == 4 && !z26 && !this.selectedObject.hasRevealedExtendedMedia() && !this.selectedObject.needDrawBluredPreview()) {
                                                                        if (this.selectedObject.isVideo()) {
                                                                            arrayList14.add(LocaleController.getString(R.string.SaveToGallery));
                                                                            arrayList15.add(4);
                                                                            i24 = R.drawable.msg_gallery;
                                                                        } else {
                                                                            if (this.selectedObject.isMusic() && !this.selectedObject.isVoiceOnce() && !this.selectedObject.isRoundOnce()) {
                                                                                i23 = R.string.SaveToMusic;
                                                                            } else if (this.selectedObject.isVideo() || this.selectedObject.getDocument() == null || this.selectedObject.isVoiceOnce() || this.selectedObject.isRoundOnce()) {
                                                                                arrayList14.add(LocaleController.getString(R.string.SaveToGallery));
                                                                                arrayList15.add(4);
                                                                                i22 = R.drawable.msg_gallery;
                                                                            } else {
                                                                                i23 = R.string.SaveToDownloads;
                                                                            }
                                                                            arrayList14.add(LocaleController.getString(i23));
                                                                            arrayList15.add(10);
                                                                            i24 = R.drawable.msg_download;
                                                                        }
                                                                        arrayList13.add(Integer.valueOf(i24));
                                                                        arrayList14.add(LocaleController.getString(R.string.ShareFile));
                                                                        arrayList15.add(6);
                                                                        i22 = R.drawable.msg_shareout;
                                                                    } else if (messageType == 5) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ApplyLocalizationFile));
                                                                        arrayList15.add(5);
                                                                        i22 = R.drawable.msg_language;
                                                                    } else if (messageType == 10) {
                                                                        arrayList14.add(LocaleController.getString(R.string.ApplyThemeFile));
                                                                        arrayList15.add(5);
                                                                        i22 = R.drawable.msg_theme;
                                                                    } else if (messageType == 7) {
                                                                        arrayList14.add(LocaleController.getString(R.string.AddToStickers));
                                                                        arrayList15.add(9);
                                                                        i22 = R.drawable.msg_sticker;
                                                                    } else {
                                                                        if (messageType == 8) {
                                                                            long j3 = this.selectedObject.messageOwner.media.user_id;
                                                                            j = 0;
                                                                            TLRPC.User user7 = j3 != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j3)) : null;
                                                                            if (user7 != null && user7.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(Long.valueOf(user7.id)) == null) {
                                                                                arrayList14.add(LocaleController.getString(R.string.AddContactTitle));
                                                                                arrayList15.add(15);
                                                                                arrayList13.add(Integer.valueOf(R.drawable.msg_addcontact));
                                                                            }
                                                                            if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                                                                if (!z26) {
                                                                                    arrayList14.add(LocaleController.getString(R.string.Copy));
                                                                                    arrayList15.add(16);
                                                                                    arrayList13.add(Integer.valueOf(R.drawable.msg_copy));
                                                                                }
                                                                                arrayList14.add(LocaleController.getString(R.string.Call));
                                                                                arrayList15.add(17);
                                                                                i22 = R.drawable.msg_callback;
                                                                                arrayList13.add(Integer.valueOf(i22));
                                                                            }
                                                                        } else {
                                                                            j = 0;
                                                                        }
                                                                        arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                        arrayList15.add(1);
                                                                        arrayList13.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                                                        charSequence = charSequence2;
                                                                        actionBarPopupWindowLayout = null;
                                                                        messageObject3 = this.selectedObject;
                                                                        if (messageObject3 != null) {
                                                                        }
                                                                        if (!arrayList15.isEmpty()) {
                                                                        }
                                                                        if (this.scrimPopupWindow != null) {
                                                                        }
                                                                    }
                                                                    j = 0;
                                                                    arrayList13.add(Integer.valueOf(i22));
                                                                    arrayList14.add(LocaleController.getString((this.chatMode == 3 || this.threadMessageId == getUserConfig().getClientUserId()) ? R.string.Delete : R.string.Remove));
                                                                    arrayList15.add(1);
                                                                    arrayList13.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                                                    charSequence = charSequence2;
                                                                    actionBarPopupWindowLayout = null;
                                                                    messageObject3 = this.selectedObject;
                                                                    if (messageObject3 != null) {
                                                                    }
                                                                    if (!arrayList15.isEmpty()) {
                                                                    }
                                                                    if (this.scrimPopupWindow != null) {
                                                                    }
                                                                }
                                                            }
                                                            arrayList13.add(Integer.valueOf(r0));
                                                            j = 0;
                                                            charSequence = charSequence2;
                                                            actionBarPopupWindowLayout = null;
                                                            messageObject3 = this.selectedObject;
                                                            if (messageObject3 != null) {
                                                            }
                                                            if (!arrayList15.isEmpty()) {
                                                            }
                                                            if (this.scrimPopupWindow != null) {
                                                            }
                                                        }
                                                        int i61 = R.drawable.msg_delete;
                                                        arrayList13.add(Integer.valueOf(i61));
                                                        j = 0;
                                                        charSequence = charSequence2;
                                                        actionBarPopupWindowLayout = null;
                                                        messageObject3 = this.selectedObject;
                                                        if (messageObject3 != null) {
                                                        }
                                                        if (!arrayList15.isEmpty()) {
                                                        }
                                                        if (this.scrimPopupWindow != null) {
                                                        }
                                                    }
                                                    charSequence2 = null;
                                                    MessageObject messageObject302 = this.selectedObject;
                                                    if (messageObject302.translated) {
                                                    }
                                                    if (messageObject2.isSponsored()) {
                                                        arrayList14.add(LocaleController.getString(R.string.HideAd));
                                                        arrayList15.add(31);
                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_block2));
                                                    }
                                                    if (messageObject2.isSponsored()) {
                                                        arrayList14.add(LocaleController.getString(R.string.AboutRevenueSharingAds));
                                                        arrayList15.add(33);
                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_report));
                                                        arrayList14.add(LocaleController.getString(R.string.ReportAd));
                                                        arrayList15.add(34);
                                                        arrayList13.add(Integer.valueOf(R.drawable.msg_block2));
                                                        if (!getMessagesController().premiumFeaturesBlocked()) {
                                                        }
                                                    }
                                                    if (messageType == -1) {
                                                    }
                                                    int i612 = R.drawable.msg_delete;
                                                    arrayList13.add(Integer.valueOf(i612));
                                                    j = 0;
                                                    charSequence = charSequence2;
                                                    actionBarPopupWindowLayout = null;
                                                    messageObject3 = this.selectedObject;
                                                    if (messageObject3 != null) {
                                                    }
                                                    if (!arrayList15.isEmpty()) {
                                                    }
                                                    if (this.scrimPopupWindow != null) {
                                                    }
                                                } else {
                                                    actionBarPopupWindowLayout = null;
                                                    charSequence = null;
                                                    j = 0;
                                                    messageObject3 = this.selectedObject;
                                                    if (messageObject3 != null) {
                                                    }
                                                    if (!arrayList15.isEmpty()) {
                                                    }
                                                    if (this.scrimPopupWindow != null) {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                z12 = z27;
                                iArr = new int[]{messageObject2.getId()};
                                if (messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL) {
                                }
                                z13 = z28;
                                if (messageType < 0) {
                                }
                                this.selectedObject = messageObject2;
                                this.selectedObjectGroup = validGroupedMessage;
                                i21 = messageObject2.type;
                                if (i21 != 19) {
                                    charSequence2 = getMessageCaption(messageObject2, validGroupedMessage, iArr);
                                    if (charSequence2 == null) {
                                        TLRPC.Poll poll2 = ((TLRPC.TL_messageMediaPoll) this.selectedObject.messageOwner.media).poll;
                                        StringBuilder sb32 = new StringBuilder(poll2.question.text);
                                        sb32.append("\n");
                                        it = poll2.answers.iterator();
                                        while (it.hasNext()) {
                                        }
                                        charSequence2 = sb32.toString();
                                    }
                                    if (charSequence2 == null) {
                                        charSequence2 = getMessageContent(this.selectedObject, 0L, false);
                                    }
                                    if (charSequence2 != null) {
                                    }
                                    MessageObject messageObject3022 = this.selectedObject;
                                    if (messageObject3022.translated) {
                                    }
                                    if (messageObject2.isSponsored()) {
                                    }
                                    if (messageObject2.isSponsored()) {
                                    }
                                    if (messageType == -1) {
                                    }
                                    int i6122 = R.drawable.msg_delete;
                                    arrayList13.add(Integer.valueOf(i6122));
                                    j = 0;
                                    charSequence = charSequence2;
                                    actionBarPopupWindowLayout = null;
                                    messageObject3 = this.selectedObject;
                                    if (messageObject3 != null) {
                                    }
                                    if (!arrayList15.isEmpty()) {
                                    }
                                    if (this.scrimPopupWindow != null) {
                                    }
                                }
                                charSequence2 = null;
                                MessageObject messageObject30222 = this.selectedObject;
                                if (messageObject30222.translated) {
                                }
                                if (messageObject2.isSponsored()) {
                                }
                                if (messageObject2.isSponsored()) {
                                }
                                if (messageType == -1) {
                                }
                                int i61222 = R.drawable.msg_delete;
                                arrayList13.add(Integer.valueOf(i61222));
                                j = 0;
                                charSequence = charSequence2;
                                actionBarPopupWindowLayout = null;
                                messageObject3 = this.selectedObject;
                                if (messageObject3 != null) {
                                }
                                if (!arrayList15.isEmpty()) {
                                }
                                if (this.scrimPopupWindow != null) {
                                }
                            }
                        } else {
                            str3 = "";
                        }
                        z10 = z9;
                        str4 = str2;
                        z11 = z25;
                        if (!getUserConfig().isPremium()) {
                            arrayList14.add(LocaleController.getString(R.string.PremiumSpeedPromo));
                            arrayList15.add(103);
                            arrayList13.add(Integer.valueOf(R.drawable.msg_speed));
                            if (SharedConfig.getDevicePerformanceClass() != 0) {
                            }
                        }
                        z12 = z27;
                        iArr = new int[]{messageObject2.getId()};
                        if (messageObject2.messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL) {
                        }
                        z13 = z28;
                        if (messageType < 0) {
                        }
                        this.selectedObject = messageObject2;
                        this.selectedObjectGroup = validGroupedMessage;
                        i21 = messageObject2.type;
                        if (i21 != 19) {
                        }
                        charSequence2 = null;
                        MessageObject messageObject302222 = this.selectedObject;
                        if (messageObject302222.translated) {
                        }
                        if (messageObject2.isSponsored()) {
                        }
                        if (messageObject2.isSponsored()) {
                        }
                        if (messageType == -1) {
                        }
                        int i612222 = R.drawable.msg_delete;
                        arrayList13.add(Integer.valueOf(i612222));
                        j = 0;
                        charSequence = charSequence2;
                        actionBarPopupWindowLayout = null;
                        messageObject3 = this.selectedObject;
                        if (messageObject3 != null) {
                        }
                        if (!arrayList15.isEmpty()) {
                        }
                        if (this.scrimPopupWindow != null) {
                        }
                    }
                }
            }
            z9 = false;
            if (z9) {
                size2 = validGroupedMessage.messages.size();
                i37 = 0;
                int i412 = 0;
                while (i37 < size2) {
                }
                if (i412 >= 2) {
                }
            }
            if (!messageObject2.isExpiredStory()) {
            }
            if (z24) {
            }
            if (getParentActivity() == null) {
            }
        }
        num = 0;
        z6 = false;
        if ((!UserObject.isReplyUser(this.dialog_id) || this.dialog_id == UserObject.VERIFY) ? false : false) {
        }
        if (getMessagesController().isChatNoForwards(this.currentChat)) {
        }
        if (z25) {
        }
        if (messageObject2.getDialogId() == this.mergeDialogId) {
        }
        if (messageObject2.canEditMessage(this.currentChat)) {
        }
        z8 = z7;
        z9 = false;
        if (z9) {
        }
        if (!messageObject2.isExpiredStory()) {
        }
        if (z24) {
        }
        if (getParentActivity() == null) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x012e  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0279  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0321  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createPinnedMessageView() {
        int i;
        int i2;
        int i3;
        if (this.currentEncryptedChat == null && this.pinnedMessageView == null && getContext() != null) {
            71 r1 = new 71(getContext(), this.contentView);
            this.pinnedMessageView = r1;
            r1.setTag(1);
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
            BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
            int i4 = Theme.key_chat_topPanelBackground;
            blurredFrameLayout.backgroundColor = getThemedColor(i4);
            this.pinnedMessageView.backgroundPaddingBottom = AndroidUtilities.dp(2.0f);
            this.pinnedMessageView.getBackground().mutate().setColorFilter(new PorterDuffColorFilter(getThemedColor(i4), PorterDuff.Mode.MULTIPLY));
            BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
            if (blurredFrameLayout2 != null) {
                ViewParent parent = blurredFrameLayout2.getParent();
                ChatActivityFragmentView chatActivityFragmentView = this.contentView;
                if (parent == chatActivityFragmentView) {
                    i = chatActivityFragmentView.indexOfChild(this.topChatPanelView);
                    this.contentView.addView(this.pinnedMessageView, i, LayoutHelper.createFrame(-1, 50, 51));
                    this.pinnedMessageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda277
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.this.lambda$createPinnedMessageView$95(view);
                        }
                    });
                    this.pinnedMessageView.setEnabled(!isInPreviewMode());
                    View view = new View(getContext());
                    view.setBackground(Theme.getSelectorDrawable(false));
                    this.pinnedMessageView.addView(view, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 2.0f));
                    PinnedLineView pinnedLineView = new PinnedLineView(getContext(), this.themeDelegate);
                    this.pinnedLineView = pinnedLineView;
                    this.pinnedMessageView.addView(pinnedLineView, LayoutHelper.createFrame(2, 48.0f, 51, 8.0f, 0.0f, 0.0f, 0.0f));
                    this.pinnedMessageView.setClipChildren(false);
                    NumberTextView numberTextView = new NumberTextView(getContext());
                    this.pinnedCounterTextView = numberTextView;
                    numberTextView.setAddNumber();
                    this.pinnedCounterTextView.setTextSize(14);
                    this.pinnedCounterTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
                    this.pinnedCounterTextView.setTypeface(AndroidUtilities.bold());
                    this.pinnedMessageView.addView(this.pinnedCounterTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.0f, 44.0f, 0.0f));
                    for (i2 = 0; i2 < 2; i2++) {
                        this.pinnedNameTextView[i2] = new TrackingWidthSimpleTextView(getContext());
                        this.pinnedNameTextView[i2].setTextSize(14);
                        this.pinnedNameTextView[i2].setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
                        this.pinnedNameTextView[i2].setTypeface(AndroidUtilities.bold());
                        this.pinnedMessageView.addView(this.pinnedNameTextView[i2], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.3f, 44.0f, 0.0f));
                        this.pinnedMessageTextView[i2] = new SimpleTextView(getContext()) { // from class: org.telegram.ui.ChatActivity.72
                            @Override // android.view.View
                            public void setTranslationY(float f) {
                                super.setTranslationY(f);
                                if (this != ChatActivity.this.pinnedMessageTextView[0] || ChatActivity.this.pinnedNextAnimation[1] == null) {
                                    return;
                                }
                                if (!ChatActivity.this.forceScrollToFirst || f >= 0.0f) {
                                    ChatActivity.this.pinnedLineView.setTranslationY(0.0f);
                                } else {
                                    ChatActivity.this.pinnedLineView.setTranslationY(f / 2.0f);
                                }
                            }
                        };
                        this.pinnedMessageTextView[i2].setTextSize(14);
                        this.pinnedMessageTextView[i2].setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
                        this.pinnedMessageView.addView(this.pinnedMessageTextView[i2], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 25.3f, 44.0f, 0.0f));
                        this.pinnedMessageButton[i2] = new PinnedMessageButton(getContext());
                        this.pinnedMessageView.addView(this.pinnedMessageButton[i2], LayoutHelper.createFrame(-2, 28.0f, 53, 0.0f, 10.0f, 14.0f, 0.0f));
                        this.pinnedMessageImageView[i2] = new BackupImageView(getContext()) { // from class: org.telegram.ui.ChatActivity.73
                            private SpoilerEffect spoilerEffect = new SpoilerEffect();
                            private Path path = new Path();
                            private float[] radii = new float[8];

                            /* JADX INFO: Access modifiers changed from: protected */
                            @Override // org.telegram.ui.Components.BackupImageView, android.view.View
                            public void onDraw(Canvas canvas) {
                                super.onDraw(canvas);
                                if (this.hasBlur) {
                                    canvas.save();
                                    RectF rectF = AndroidUtilities.rectTmp;
                                    rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                                    int[] roundRadius = this.imageReceiver.getRoundRadius();
                                    float[] fArr = this.radii;
                                    float f = roundRadius[0];
                                    fArr[1] = f;
                                    fArr[0] = f;
                                    float f2 = roundRadius[1];
                                    fArr[3] = f2;
                                    fArr[2] = f2;
                                    float f3 = roundRadius[2];
                                    fArr[5] = f3;
                                    fArr[4] = f3;
                                    float f4 = roundRadius[3];
                                    fArr[7] = f4;
                                    fArr[6] = f4;
                                    this.path.rewind();
                                    this.path.addRoundRect(rectF, this.radii, Path.Direction.CW);
                                    canvas.clipPath(this.path);
                                    this.spoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                                    this.spoilerEffect.setBounds(0, 0, getWidth(), getHeight());
                                    this.spoilerEffect.draw(canvas);
                                    canvas.restore();
                                    invalidate();
                                }
                            }
                        };
                        this.pinnedMessageImageView[i2].setBlurAllowed(true);
                        this.pinnedMessageImageView[i2].setRoundRadius(AndroidUtilities.dp(2.0f));
                        this.pinnedMessageView.addView(this.pinnedMessageImageView[i2], LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                        if (i2 == 1) {
                            this.pinnedNameTextView[i2].setVisibility(4);
                            this.pinnedMessageButton[i2].setVisibility(4);
                            this.pinnedMessageTextView[i2].setVisibility(4);
                            this.pinnedMessageImageView[i2].setVisibility(4);
                        }
                    }
                    ImageView imageView = new ImageView(getContext());
                    this.pinnedListButton = imageView;
                    imageView.setImageResource(R.drawable.msg_pinnedlist);
                    ImageView imageView2 = this.pinnedListButton;
                    int i5 = Theme.key_chat_topPanelClose;
                    int themedColor = getThemedColor(i5);
                    PorterDuff.Mode mode = PorterDuff.Mode.MULTIPLY;
                    imageView2.setColorFilter(new PorterDuffColorFilter(themedColor, mode));
                    ImageView imageView3 = this.pinnedListButton;
                    ImageView.ScaleType scaleType = ImageView.ScaleType.CENTER;
                    imageView3.setScaleType(scaleType);
                    this.pinnedListButton.setContentDescription(LocaleController.getString(R.string.AccPinnedMessagesList));
                    this.pinnedListButton.setVisibility(4);
                    this.pinnedListButton.setAlpha(0.0f);
                    this.pinnedListButton.setScaleX(0.4f);
                    this.pinnedListButton.setScaleY(0.4f);
                    i3 = Build.VERSION.SDK_INT;
                    if (i3 >= 21) {
                        this.pinnedListButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615));
                    }
                    this.pinnedMessageView.addView(this.pinnedListButton, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 7.0f, 0.0f));
                    this.pinnedListButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda278
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            ChatActivity.this.lambda$createPinnedMessageView$96(view2);
                        }
                    });
                    ImageView imageView4 = new ImageView(getContext());
                    this.closePinned = imageView4;
                    imageView4.setImageResource(R.drawable.miniplayer_close);
                    this.closePinned.setColorFilter(new PorterDuffColorFilter(getThemedColor(i5), mode));
                    this.closePinned.setScaleType(scaleType);
                    this.closePinned.setVisibility(8);
                    this.closePinned.setContentDescription(LocaleController.getString(R.string.Close));
                    RadialProgressView radialProgressView = new RadialProgressView(getContext(), this.themeDelegate);
                    this.pinnedProgress = radialProgressView;
                    radialProgressView.setVisibility(8);
                    this.pinnedProgress.setSize(AndroidUtilities.dp(16.0f));
                    this.pinnedProgress.setStrokeWidth(2.0f);
                    this.pinnedProgress.setProgressColor(getThemedColor(Theme.key_chat_topPanelLine));
                    this.pinnedMessageView.addView(this.pinnedProgress, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    if (i3 >= 21) {
                        this.closePinned.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615, 1, AndroidUtilities.dp(14.0f)));
                    }
                    this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    this.closePinned.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda279
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            ChatActivity.this.lambda$createPinnedMessageView$98(view2);
                        }
                    });
                    updatePinnedListButton(false);
                }
            }
            i = 8;
            this.contentView.addView(this.pinnedMessageView, i, LayoutHelper.createFrame(-1, 50, 51));
            this.pinnedMessageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda277
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ChatActivity.this.lambda$createPinnedMessageView$95(view2);
                }
            });
            this.pinnedMessageView.setEnabled(!isInPreviewMode());
            View view2 = new View(getContext());
            view2.setBackground(Theme.getSelectorDrawable(false));
            this.pinnedMessageView.addView(view2, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 2.0f));
            PinnedLineView pinnedLineView2 = new PinnedLineView(getContext(), this.themeDelegate);
            this.pinnedLineView = pinnedLineView2;
            this.pinnedMessageView.addView(pinnedLineView2, LayoutHelper.createFrame(2, 48.0f, 51, 8.0f, 0.0f, 0.0f, 0.0f));
            this.pinnedMessageView.setClipChildren(false);
            NumberTextView numberTextView2 = new NumberTextView(getContext());
            this.pinnedCounterTextView = numberTextView2;
            numberTextView2.setAddNumber();
            this.pinnedCounterTextView.setTextSize(14);
            this.pinnedCounterTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
            this.pinnedCounterTextView.setTypeface(AndroidUtilities.bold());
            this.pinnedMessageView.addView(this.pinnedCounterTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.0f, 44.0f, 0.0f));
            while (i2 < 2) {
            }
            ImageView imageView5 = new ImageView(getContext());
            this.pinnedListButton = imageView5;
            imageView5.setImageResource(R.drawable.msg_pinnedlist);
            ImageView imageView22 = this.pinnedListButton;
            int i52 = Theme.key_chat_topPanelClose;
            int themedColor2 = getThemedColor(i52);
            PorterDuff.Mode mode2 = PorterDuff.Mode.MULTIPLY;
            imageView22.setColorFilter(new PorterDuffColorFilter(themedColor2, mode2));
            ImageView imageView32 = this.pinnedListButton;
            ImageView.ScaleType scaleType2 = ImageView.ScaleType.CENTER;
            imageView32.setScaleType(scaleType2);
            this.pinnedListButton.setContentDescription(LocaleController.getString(R.string.AccPinnedMessagesList));
            this.pinnedListButton.setVisibility(4);
            this.pinnedListButton.setAlpha(0.0f);
            this.pinnedListButton.setScaleX(0.4f);
            this.pinnedListButton.setScaleY(0.4f);
            i3 = Build.VERSION.SDK_INT;
            if (i3 >= 21) {
            }
            this.pinnedMessageView.addView(this.pinnedListButton, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 7.0f, 0.0f));
            this.pinnedListButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda278
                @Override // android.view.View.OnClickListener
                public final void onClick(View view22) {
                    ChatActivity.this.lambda$createPinnedMessageView$96(view22);
                }
            });
            ImageView imageView42 = new ImageView(getContext());
            this.closePinned = imageView42;
            imageView42.setImageResource(R.drawable.miniplayer_close);
            this.closePinned.setColorFilter(new PorterDuffColorFilter(getThemedColor(i52), mode2));
            this.closePinned.setScaleType(scaleType2);
            this.closePinned.setVisibility(8);
            this.closePinned.setContentDescription(LocaleController.getString(R.string.Close));
            RadialProgressView radialProgressView2 = new RadialProgressView(getContext(), this.themeDelegate);
            this.pinnedProgress = radialProgressView2;
            radialProgressView2.setVisibility(8);
            this.pinnedProgress.setSize(AndroidUtilities.dp(16.0f));
            this.pinnedProgress.setStrokeWidth(2.0f);
            this.pinnedProgress.setProgressColor(getThemedColor(Theme.key_chat_topPanelLine));
            this.pinnedMessageView.addView(this.pinnedProgress, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
            if (i3 >= 21) {
            }
            this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
            this.closePinned.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda279
                @Override // android.view.View.OnClickListener
                public final void onClick(View view22) {
                    ChatActivity.this.lambda$createPinnedMessageView$98(view22);
                }
            });
            updatePinnedListButton(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createSearchContainer() {
        if (this.searchContainer != null || getContext() == null) {
            return;
        }
        BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(getContext(), this.contentView) { // from class: org.telegram.ui.ChatActivity.62
            private Rect blurBounds = new Rect();

            @Override // android.view.ViewGroup
            protected void measureChildWithMargins(View view, int i, int i2, int i3, int i4) {
                if (view == ChatActivity.this.searchCountText) {
                    int i5 = (ChatActivity.this.searchCalendarButton == null || ChatActivity.this.searchCalendarButton.getVisibility() == 8) ? 14 : 62;
                    if (ChatActivity.this.searchUserButton != null && ChatActivity.this.searchUserButton.getVisibility() != 8) {
                        i5 += 48;
                    }
                    ((ViewGroup.MarginLayoutParams) view.getLayoutParams()).leftMargin = AndroidUtilities.dp(i5);
                }
                super.measureChildWithMargins(view, i, i2, i3, i4);
            }

            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                if (ChatActivity.this.chatActivityEnterView.getVisibility() != 0) {
                    Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                    Theme.chat_composeShadowDrawable.draw(canvas);
                }
                this.blurBounds.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), this.blurBounds, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
            }

            @Override // android.view.View
            public void setVisibility(int i) {
                super.setVisibility(i);
                if (ChatActivity.this.chatListView != null) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.isInsideContainer) {
                        RecyclerListView recyclerListView = chatActivity.chatListView;
                        int paddingLeft = ChatActivity.this.chatListView.getPaddingLeft();
                        int paddingTop = ChatActivity.this.chatListView.getPaddingTop();
                        int paddingRight = ChatActivity.this.chatListView.getPaddingRight();
                        int dp = AndroidUtilities.dp(3.0f);
                        ChatActivity chatActivity2 = ChatActivity.this;
                        recyclerListView.setPadding(paddingLeft, paddingTop, paddingRight, dp + chatActivity2.blurredViewBottomOffset + ((chatActivity2.isInsideContainer && i == 0) ? AndroidUtilities.dp(50.0f) : 0));
                    }
                }
            }
        };
        this.searchContainer = blurredFrameLayout;
        blurredFrameLayout.setClickable(false);
        BlurredFrameLayout blurredFrameLayout2 = this.searchContainer;
        blurredFrameLayout2.drawBlur = false;
        blurredFrameLayout2.isTopView = false;
        blurredFrameLayout2.setWillNotDraw(false);
        this.searchContainer.setVisibility(4);
        this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        this.searchContainer.setClipToPadding(false);
        AnimatedTextView animatedTextView = new AnimatedTextView(getContext(), true, true, true);
        this.searchCountText = animatedTextView;
        CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
        animatedTextView.setAnimationProperties(0.25f, 0L, 280L, cubicBezierInterpolator);
        this.searchCountText.setTextSize(AndroidUtilities.dp(15.0f));
        this.searchCountText.setTypeface(AndroidUtilities.bold());
        this.searchCountText.setTextColor(getThemedColor(Theme.key_chat_searchPanelText));
        this.searchCountText.setGravity(3);
        this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, 30.0f, 16, 0.0f, -1.0f, 97.33f, 0.0f));
        this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
        HashtagHistoryView hashtagHistoryView = this.hashtagHistoryView;
        if (hashtagHistoryView != null) {
            hashtagHistoryView.bringToFront();
        }
        AnimatedTextView animatedTextView2 = new AnimatedTextView(getContext(), true, false, true);
        this.searchExpandList = animatedTextView2;
        animatedTextView2.setAnimationProperties(0.0f, 0L, 420L, cubicBezierInterpolator);
        this.searchExpandList.setScaleProperty(0.7f);
        this.searchExpandList.setTextSize(AndroidUtilities.dp(15.0f));
        this.searchExpandList.setGravity(5);
        this.searchExpandList.setTypeface(AndroidUtilities.bold());
        this.searchExpandList.setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueText2));
        AnimatedTextView animatedTextView3 = this.searchExpandList;
        FrameLayout frameLayout = this.messagesSearchListContainer;
        animatedTextView3.setText(LocaleController.getString((frameLayout == null || frameLayout.getTag() == null) ? R.string.SearchAsList : R.string.SearchAsChat));
        AnimatedTextView animatedTextView4 = this.searchExpandList;
        animatedTextView4.adaptWidth = false;
        animatedTextView4.setPadding(AndroidUtilities.dp(15.33f), 0, AndroidUtilities.dp(15.33f), 0);
        this.searchExpandList.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda254
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createSearchContainer$83(view);
            }
        });
        this.searchExpandList.setAlpha(0.5f);
        this.searchExpandList.setClickable(false);
        this.searchContainer.addView(this.searchExpandList, LayoutHelper.createFrame(-2, -1, 117));
        AnimatedTextView animatedTextView5 = new AnimatedTextView(getContext(), true, true, true);
        this.searchOtherButton = animatedTextView5;
        animatedTextView5.setGravity(17);
        this.searchOtherButton.setTypeface(AndroidUtilities.bold());
        this.searchOtherButton.setTextColor(getThemedColor(Theme.key_chat_fieldOverlayText));
        this.searchOtherButton.setTextSize(AndroidUtilities.dp(15.0f));
        AnimatedTextView animatedTextView6 = this.searchOtherButton;
        int i = Theme.key_windowBackgroundWhite;
        animatedTextView6.setBackground(Theme.createSelectorWithBackgroundDrawable(getThemedColor(i), Theme.blendOver(getThemedColor(i), getThemedColor(Theme.key_listSelector))));
        this.searchOtherButton.setText(LocaleController.getString(this.chatAdapter.isFiltered ? R.string.SavedTagHideOtherMessages : R.string.SavedTagShowOtherMessages));
        this.searchOtherButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda255
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createSearchContainer$84(view);
            }
        });
        this.searchOtherButton.setVisibility(8);
        this.searchOtherButton.setAlpha(0.0f);
        this.searchContainer.addView(this.searchOtherButton, LayoutHelper.createFrame(-1, -1, 119));
        TLRPC.Chat chat = this.currentChat;
        if (chat != null && ((!ChatObject.isChannel(chat) || this.currentChat.megagroup) && this.chatMode != 7)) {
            ImageView imageView = new ImageView(getContext());
            this.searchUserButton = imageView;
            imageView.setScaleType(ImageView.ScaleType.CENTER);
            this.searchUserButton.setImageResource(R.drawable.msg_usersearch);
            this.searchUserButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_searchPanelIcons), PorterDuff.Mode.MULTIPLY));
            this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 1));
            this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
            this.searchUserButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda256
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$createSearchContainer$85(view);
                }
            });
            this.searchUserButton.setContentDescription(LocaleController.getString(R.string.AccDescrSearchByUser));
        }
        if (this.chatMode != 7) {
            ImageView imageView2 = new ImageView(getContext());
            this.searchCalendarButton = imageView2;
            imageView2.setScaleType(ImageView.ScaleType.CENTER);
            this.searchCalendarButton.setImageResource(R.drawable.msg_calendar);
            this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_searchPanelIcons), PorterDuff.Mode.MULTIPLY));
            this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 1));
            this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48.0f, 51, 2.66f, 0.0f, 0.0f, 0.0f));
            this.searchCalendarButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda257
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$createSearchContainer$86(view);
                }
            });
            this.searchCalendarButton.setContentDescription(LocaleController.getString(R.string.JumpToDate));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public TextureView createTextureView(boolean z) {
        if (this.parentLayout == null) {
            return null;
        }
        AndroidUtilities.cancelRunOnUIThread(this.destroyTextureViewRunnable);
        if (this.videoPlayerContainer == null) {
            if (Build.VERSION.SDK_INT >= 21) {
                FrameLayout frameLayout = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.79
                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.videoPlayerContainer = frameLayout;
                frameLayout.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.80
                    @Override // android.view.ViewOutlineProvider
                    public void getOutline(View view, Outline outline) {
                        ImageReceiver imageReceiver = (ImageReceiver) view.getTag(R.id.parent_tag);
                        if (imageReceiver == null) {
                            int i = AndroidUtilities.roundPlayingMessageSize;
                            outline.setOval(0, 0, i, i);
                            return;
                        }
                        int[] roundRadius = imageReceiver.getRoundRadius();
                        int i2 = 0;
                        for (int i3 = 0; i3 < 4; i3++) {
                            i2 = Math.max(i2, roundRadius[i3]);
                        }
                        outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), i2);
                    }
                });
                this.videoPlayerContainer.setClipToOutline(true);
            } else {
                this.videoPlayerContainer = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.81
                    RectF rect = new RectF();

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (getTag() == null) {
                            canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                        }
                    }

                    @Override // android.view.View
                    protected void onSizeChanged(int i, int i2, int i3, int i4) {
                        super.onSizeChanged(i, i2, i3, i4);
                        ChatActivity.this.aspectPath.reset();
                        ImageReceiver imageReceiver = (ImageReceiver) getTag(R.id.parent_tag);
                        if (imageReceiver != null) {
                            int[] roundRadius = imageReceiver.getRoundRadius();
                            int i5 = 0;
                            for (int i6 = 0; i6 < 4; i6++) {
                                i5 = Math.max(i5, roundRadius[i6]);
                            }
                            this.rect.set(0.0f, 0.0f, i, i2);
                            ChatActivity.this.aspectPath.addRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                        } else {
                            float f = i / 2;
                            ChatActivity.this.aspectPath.addCircle(f, i2 / 2, f, Path.Direction.CW);
                        }
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int i) {
                        super.setVisibility(i);
                        if (i == 0) {
                            setLayerType(2, null);
                        }
                    }
                };
                this.aspectPath = new Path();
                Paint paint = new Paint(1);
                this.aspectPaint = paint;
                paint.setColor(-16777216);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout = aspectRatioFrameLayout;
            aspectRatioFrameLayout.setBackgroundColor(0);
            if (z) {
                this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }
            TextureView textureView = new TextureView(getParentActivity());
            this.videoTextureView = textureView;
            textureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup viewGroup = (ViewGroup) this.videoPlayerContainer.getParent();
        if (viewGroup != null && viewGroup != this.contentView) {
            viewGroup.removeView(this.videoPlayerContainer);
            viewGroup = null;
        }
        if (viewGroup == null) {
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            FrameLayout frameLayout2 = this.videoPlayerContainer;
            int i = AndroidUtilities.roundPlayingMessageSize;
            chatActivityFragmentView.addView(frameLayout2, 1, new FrameLayout.LayoutParams(i, i));
        }
        this.videoPlayerContainer.setTag(null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0235  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x02b8  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0302  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createTopPanel() {
        int i;
        int i2;
        if (this.contentView == null || this.topChatPanelView != null || getContext() == null) {
            return;
        }
        BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(getContext(), this.contentView) { // from class: org.telegram.ui.ChatActivity.56
            private boolean ignoreLayout;

            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i3, int i4) {
                int size = View.MeasureSpec.getSize(i3);
                if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0 && ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                    size = (size - AndroidUtilities.dp(31.0f)) / 2;
                }
                this.ignoreLayout = true;
                if (ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.reportSpamButton.getLayoutParams();
                    layoutParams.width = size;
                    if (ChatActivity.this.addToContactsButton == null || ChatActivity.this.addToContactsButton.getVisibility() != 0) {
                        ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                        layoutParams.leftMargin = 0;
                    } else {
                        ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                        layoutParams.leftMargin = size;
                        layoutParams.width -= AndroidUtilities.dp(15.0f);
                    }
                }
                if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0) {
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) ChatActivity.this.addToContactsButton.getLayoutParams();
                    layoutParams2.width = size;
                    if (ChatActivity.this.reportSpamButton == null || ChatActivity.this.reportSpamButton.getVisibility() != 0) {
                        ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                        layoutParams2.leftMargin = 0;
                    } else {
                        ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(11.0f), 0, AndroidUtilities.dp(4.0f), 0);
                    }
                }
                this.ignoreLayout = false;
                super.onMeasure(i3, i4);
            }

            @Override // android.view.View, android.view.ViewParent
            public void requestLayout() {
                if (this.ignoreLayout) {
                    return;
                }
                super.requestLayout();
            }
        };
        this.topChatPanelView = blurredFrameLayout;
        int i3 = Theme.key_chat_topPanelBackground;
        blurredFrameLayout.backgroundColor = getThemedColor(i3);
        this.topChatPanelView.backgroundPaddingBottom = AndroidUtilities.dp(2.0f);
        this.topChatPanelView.setTag(1);
        this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
        invalidateChatListViewTopPadding();
        this.topChatPanelView.setClickable(true);
        this.topChatPanelView.setVisibility(8);
        this.topChatPanelView.setBackgroundResource(R.drawable.blockpanel);
        Drawable background = this.topChatPanelView.getBackground();
        int themedColor = getThemedColor(i3);
        PorterDuff.Mode mode = PorterDuff.Mode.MULTIPLY;
        background.setColorFilter(new PorterDuffColorFilter(themedColor, mode));
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            ViewParent parent = blurredFrameLayout2.getParent();
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (parent == chatActivityFragmentView) {
                i = chatActivityFragmentView.indexOfChild(this.pinnedMessageView) + 1;
                this.contentView.addView(this.topChatPanelView, i, LayoutHelper.createFrame(-1, 50, 51));
                TextView textView = new TextView(getContext());
                this.reportSpamButton = textView;
                int i4 = Theme.key_text_RedBold;
                textView.setTextColor(getThemedColor(i4));
                i2 = Build.VERSION.SDK_INT;
                if (i2 >= 21) {
                    this.reportSpamButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i4) & 436207615, 3));
                }
                this.reportSpamButton.setTag(Integer.valueOf(i4));
                this.reportSpamButton.setTextSize(1, 14.0f);
                this.reportSpamButton.setTypeface(AndroidUtilities.bold());
                this.reportSpamButton.setSingleLine(true);
                this.reportSpamButton.setMaxLines(1);
                this.reportSpamButton.setGravity(17);
                this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.reportSpamButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda260
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createTopPanel$75(view);
                    }
                });
                LinkSpanDrawable.LinksTextView linksTextView = new LinkSpanDrawable.LinksTextView(getContext(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.57
                    PorterDuffColorFilter colorFilter;
                    int lastColor;
                    Layout lastLayout;
                    AnimatedEmojiSpan.EmojiGroupedSpans stack;

                    @Override // android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (this.lastLayout != getLayout()) {
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.stack;
                            Layout layout = getLayout();
                            this.lastLayout = layout;
                            this.stack = AnimatedEmojiSpan.update(7, this, emojiGroupedSpans, layout);
                        }
                        int themedColor2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon);
                        if (this.lastColor != themedColor2 || this.colorFilter == null) {
                            this.colorFilter = new PorterDuffColorFilter(themedColor2, PorterDuff.Mode.MULTIPLY);
                            this.lastColor = themedColor2;
                        }
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.stack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, this.colorFilter);
                    }

                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // org.telegram.ui.Components.LinkSpanDrawable.LinksTextView, android.view.View
                    public void onDetachedFromWindow() {
                        super.onDetachedFromWindow();
                        AnimatedEmojiSpan.release(this, this.stack);
                        this.lastLayout = null;
                    }
                };
                this.emojiStatusSpamHint = linksTextView;
                linksTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
                this.emojiStatusSpamHint.setTextSize(1, 13.3f);
                this.emojiStatusSpamHint.setGravity(17);
                this.emojiStatusSpamHint.setVisibility(8);
                this.emojiStatusSpamHint.setLinkTextColor(getThemedColor(Theme.key_windowBackgroundWhiteLinkText));
                this.topChatPanelView.addView(this.emojiStatusSpamHint, LayoutHelper.createFrame(-1, -2.0f, 51, 25.0f, 0.0f, 25.0f, 1.0f));
                View view = new View(getContext());
                this.topViewSeparator1 = view;
                view.setVisibility(8);
                View view2 = this.topViewSeparator1;
                int i5 = Theme.key_divider;
                view2.setBackgroundColor(getThemedColor(i5));
                this.topViewSeparator1.setAlpha(0.5f);
                this.topChatPanelView.addView(this.topViewSeparator1, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 2.0f));
                View view3 = new View(getContext());
                this.topViewSeparator2 = view3;
                view3.setVisibility(8);
                this.topViewSeparator2.setBackgroundColor(getThemedColor(i5));
                this.topChatPanelView.addView(this.topViewSeparator2, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 51, 10.0f, 48.0f, 10.0f, 1.0f));
                View view4 = new View(getContext());
                this.topViewSeparator3 = view4;
                view4.setVisibility(8);
                this.topViewSeparator3.setBackgroundColor(getThemedColor(i5));
                this.topChatPanelView.addView(this.topViewSeparator3, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                TextView textView2 = new TextView(getContext());
                this.addToContactsButton = textView2;
                int i6 = Theme.key_chat_addContact;
                textView2.setTextColor(getThemedColor(i6));
                this.addToContactsButton.setVisibility(8);
                this.addToContactsButton.setTextSize(1, 14.0f);
                this.addToContactsButton.setTypeface(AndroidUtilities.bold());
                this.addToContactsButton.setSingleLine(true);
                this.addToContactsButton.setMaxLines(1);
                this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                this.addToContactsButton.setGravity(17);
                if (i2 >= 21) {
                    this.addToContactsButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i6) & 436207615, 3));
                }
                this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.addToContactsButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda261
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$78(view5);
                    }
                });
                TextView textView3 = new TextView(getContext());
                this.restartTopicButton = textView3;
                textView3.setTextColor(getThemedColor(i6));
                this.restartTopicButton.setVisibility(8);
                this.restartTopicButton.setTextSize(1, 14.0f);
                this.restartTopicButton.setTypeface(AndroidUtilities.bold());
                this.restartTopicButton.setSingleLine(true);
                this.restartTopicButton.setMaxLines(1);
                this.restartTopicButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                this.restartTopicButton.setGravity(17);
                this.restartTopicButton.setText(LocaleController.getString(R.string.RestartTopic).toUpperCase());
                if (i2 >= 21) {
                    this.restartTopicButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i6) & 436207615, 3));
                }
                this.topChatPanelView.addView(this.restartTopicButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.restartTopicButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda262
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$79(view5);
                    }
                });
                ImageView imageView = new ImageView(getContext());
                this.closeReportSpam = imageView;
                imageView.setImageResource(R.drawable.miniplayer_close);
                this.closeReportSpam.setContentDescription(LocaleController.getString(R.string.Close));
                if (i2 >= 21) {
                    this.closeReportSpam.setBackground(Theme.AdaptiveRipple.circle(getThemedColor(Theme.key_chat_topPanelClose)));
                }
                this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), mode));
                this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
                this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 36.0f, 53, 0.0f, 6.0f, 2.0f, 0.0f));
                this.closeReportSpam.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda263
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$80(view5);
                    }
                });
            }
        }
        i = 8;
        this.contentView.addView(this.topChatPanelView, i, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView4 = new TextView(getContext());
        this.reportSpamButton = textView4;
        int i42 = Theme.key_text_RedBold;
        textView4.setTextColor(getThemedColor(i42));
        i2 = Build.VERSION.SDK_INT;
        if (i2 >= 21) {
        }
        this.reportSpamButton.setTag(Integer.valueOf(i42));
        this.reportSpamButton.setTextSize(1, 14.0f);
        this.reportSpamButton.setTypeface(AndroidUtilities.bold());
        this.reportSpamButton.setSingleLine(true);
        this.reportSpamButton.setMaxLines(1);
        this.reportSpamButton.setGravity(17);
        this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.reportSpamButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda260
            @Override // android.view.View.OnClickListener
            public final void onClick(View view5) {
                ChatActivity.this.lambda$createTopPanel$75(view5);
            }
        });
        LinkSpanDrawable.LinksTextView linksTextView2 = new LinkSpanDrawable.LinksTextView(getContext(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.57
            PorterDuffColorFilter colorFilter;
            int lastColor;
            Layout lastLayout;
            AnimatedEmojiSpan.EmojiGroupedSpans stack;

            @Override // android.view.View
            protected void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
                if (this.lastLayout != getLayout()) {
                    AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.stack;
                    Layout layout = getLayout();
                    this.lastLayout = layout;
                    this.stack = AnimatedEmojiSpan.update(7, this, emojiGroupedSpans, layout);
                }
                int themedColor2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon);
                if (this.lastColor != themedColor2 || this.colorFilter == null) {
                    this.colorFilter = new PorterDuffColorFilter(themedColor2, PorterDuff.Mode.MULTIPLY);
                    this.lastColor = themedColor2;
                }
                AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.stack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, this.colorFilter);
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.LinkSpanDrawable.LinksTextView, android.view.View
            public void onDetachedFromWindow() {
                super.onDetachedFromWindow();
                AnimatedEmojiSpan.release(this, this.stack);
                this.lastLayout = null;
            }
        };
        this.emojiStatusSpamHint = linksTextView2;
        linksTextView2.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
        this.emojiStatusSpamHint.setTextSize(1, 13.3f);
        this.emojiStatusSpamHint.setGravity(17);
        this.emojiStatusSpamHint.setVisibility(8);
        this.emojiStatusSpamHint.setLinkTextColor(getThemedColor(Theme.key_windowBackgroundWhiteLinkText));
        this.topChatPanelView.addView(this.emojiStatusSpamHint, LayoutHelper.createFrame(-1, -2.0f, 51, 25.0f, 0.0f, 25.0f, 1.0f));
        View view5 = new View(getContext());
        this.topViewSeparator1 = view5;
        view5.setVisibility(8);
        View view22 = this.topViewSeparator1;
        int i52 = Theme.key_divider;
        view22.setBackgroundColor(getThemedColor(i52));
        this.topViewSeparator1.setAlpha(0.5f);
        this.topChatPanelView.addView(this.topViewSeparator1, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 2.0f));
        View view32 = new View(getContext());
        this.topViewSeparator2 = view32;
        view32.setVisibility(8);
        this.topViewSeparator2.setBackgroundColor(getThemedColor(i52));
        this.topChatPanelView.addView(this.topViewSeparator2, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 51, 10.0f, 48.0f, 10.0f, 1.0f));
        View view42 = new View(getContext());
        this.topViewSeparator3 = view42;
        view42.setVisibility(8);
        this.topViewSeparator3.setBackgroundColor(getThemedColor(i52));
        this.topChatPanelView.addView(this.topViewSeparator3, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 38.0f));
        TextView textView22 = new TextView(getContext());
        this.addToContactsButton = textView22;
        int i62 = Theme.key_chat_addContact;
        textView22.setTextColor(getThemedColor(i62));
        this.addToContactsButton.setVisibility(8);
        this.addToContactsButton.setTextSize(1, 14.0f);
        this.addToContactsButton.setTypeface(AndroidUtilities.bold());
        this.addToContactsButton.setSingleLine(true);
        this.addToContactsButton.setMaxLines(1);
        this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        this.addToContactsButton.setGravity(17);
        if (i2 >= 21) {
        }
        this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.addToContactsButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda261
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$78(view52);
            }
        });
        TextView textView32 = new TextView(getContext());
        this.restartTopicButton = textView32;
        textView32.setTextColor(getThemedColor(i62));
        this.restartTopicButton.setVisibility(8);
        this.restartTopicButton.setTextSize(1, 14.0f);
        this.restartTopicButton.setTypeface(AndroidUtilities.bold());
        this.restartTopicButton.setSingleLine(true);
        this.restartTopicButton.setMaxLines(1);
        this.restartTopicButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        this.restartTopicButton.setGravity(17);
        this.restartTopicButton.setText(LocaleController.getString(R.string.RestartTopic).toUpperCase());
        if (i2 >= 21) {
        }
        this.topChatPanelView.addView(this.restartTopicButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.restartTopicButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda262
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$79(view52);
            }
        });
        ImageView imageView2 = new ImageView(getContext());
        this.closeReportSpam = imageView2;
        imageView2.setImageResource(R.drawable.miniplayer_close);
        this.closeReportSpam.setContentDescription(LocaleController.getString(R.string.Close));
        if (i2 >= 21) {
        }
        this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), mode));
        this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
        this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 36.0f, 53, 0.0f, 6.0f, 2.0f, 0.0f));
        this.closeReportSpam.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda263
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$80(view52);
            }
        });
    }

    private void createTranslateButton() {
        if (this.translateButton != null || getContext() == null) {
            return;
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
            return;
        }
        TranslateButton translateButton = new TranslateButton(getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.58
            @Override // org.telegram.ui.Components.TranslateButton
            protected void onButtonClick() {
                if (ChatActivity.this.getUserConfig().isPremium()) {
                    ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId());
                } else {
                    SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                    edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), 14).commit();
                    ChatActivity.this.showDialog(new PremiumFeatureBottomSheet(ChatActivity.this, 13, false));
                }
                ChatActivity.this.updateTopPanel(true);
            }

            @Override // org.telegram.ui.Components.TranslateButton
            protected void onCloseClick() {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), NotificationCenter.filePreparingStarted).commit();
                ChatActivity.this.updateTopPanel(true);
            }
        };
        this.translateButton = translateButton;
        this.topChatPanelView.addView(translateButton, LayoutHelper.createFrame(-1, 36.0f, 83, 0.0f, 0.0f, 0.0f, 2.0f));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createUndoView() {
        if (this.undoView != null || getContext() == null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, false, this.themeDelegate);
        this.undoView = undoView;
        undoView.setAdditionalTranslationY(AndroidUtilities.dp(51.0f));
        this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public ArrayList createVoiceMessagesPlaylist(MessageObject messageObject, boolean z) {
        ArrayList arrayList = new ArrayList();
        arrayList.add(messageObject);
        int id = messageObject.getId();
        messageObject.getDialogId();
        if (id != 0) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = (MessageObject) this.messages.get(size);
                if ((messageObject2.getDialogId() != this.mergeDialogId || messageObject.getDialogId() == this.mergeDialogId) && (((this.currentEncryptedChat == null && messageObject2.getId() > id) || (this.currentEncryptedChat != null && messageObject2.getId() < id)) && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && !messageObject2.isVoiceOnce() && !messageObject2.isRoundOnce() && (!z || (messageObject2.isContentUnread() && !messageObject2.isOut()))))) {
                    arrayList.add(messageObject2);
                }
            }
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: destroyTextureView */
    public void lambda$new$0() {
        FrameLayout frameLayout = this.videoPlayerContainer;
        if (frameLayout == null || frameLayout.getParent() == null) {
            return;
        }
        this.chatListView.invalidateViews();
        this.aspectRatioFrameLayout.setDrawingReady(false);
        this.videoPlayerContainer.setTag(null);
        if (Build.VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, null);
        }
        this.contentView.removeView(this.videoPlayerContainer);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:111:0x01c7, code lost:
        if (r3.isMessagePaused() != false) goto L115;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didPressMessageUrl(CharacterStyle characterStyle, boolean z, MessageObject messageObject, ChatMessageCell chatMessageCell) {
        TLRPC.WebPage webPage;
        MessageObject messageObject2;
        MessageObject messageObject3;
        TLRPC.WebPage webPage2;
        MessageObject messageObject4;
        TLRPC.Message message;
        MessageObject messageObject5 = messageObject;
        if (characterStyle == null || getParentActivity() == null) {
            return;
        }
        boolean z2 = true;
        boolean z3 = true;
        boolean z4 = getMessagesController().isChatNoForwards(this.currentChat) || !(messageObject5 == null || (message = messageObject5.messageOwner) == null || !message.noforwards);
        ChatMessageCell chatMessageCell2 = null;
        if (characterStyle instanceof URLSpanMono) {
            if (!z4 || getDialogId() == UserObject.VERIFY) {
                ((URLSpanMono) characterStyle).copyToClipboard();
                UndoView undoView = getUndoView();
                if (undoView != null) {
                    undoView.showWithAction(0L, 58, (Runnable) null);
                }
            }
            if (!z || chatMessageCell == null) {
                return;
            }
        } else if (characterStyle instanceof URLSpanUserMention) {
            TLRPC.User user = getMessagesController().getUser(Utilities.parseLong(((URLSpanUserMention) characterStyle).getURL()));
            if (user != null) {
                MessagesController.getInstance(this.currentAccount).openChatOrProfileWith(user, null, this, 0, false);
            }
            if (z && chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
            logSponsoredClicked(messageObject5, false, false);
            return;
        } else if (characterStyle instanceof URLSpanNoUnderline) {
            String url = ((URLSpanNoUnderline) characterStyle).getURL();
            if (url != null && url.startsWith("tel:")) {
                didPressPhoneNumber(chatMessageCell, characterStyle, url.substring(4));
                if (!z || chatMessageCell == null) {
                    return;
                }
            } else if (messageObject5 != null && url.startsWith("/")) {
                if (URLSpanBotCommand.enabled) {
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    TLRPC.Chat chat = this.currentChat;
                    chatActivityEnterView.setCommand(messageObject5, url, z, (chat == null || !chat.megagroup) ? false : false);
                    if (!z && this.chatActivityEnterView.getFieldText() == null) {
                        hideFieldPanel(false);
                    }
                }
                if (!z || chatMessageCell == null) {
                    return;
                }
            } else if (messageObject5 != null && url.startsWith(MediaStreamTrack.VIDEO_TRACK_KIND) && !z) {
                int intValue = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isYouTubeVideo()) {
                    webPage2 = messageObject5.messageOwner.media.webpage;
                } else {
                    MessageObject messageObject6 = messageObject5.replyMessageObject;
                    if (messageObject6 == null || !messageObject6.isYouTubeVideo()) {
                        webPage2 = null;
                    } else {
                        MessageObject messageObject7 = messageObject5.replyMessageObject;
                        messageObject5 = messageObject7;
                        webPage2 = messageObject7.messageOwner.media.webpage;
                    }
                }
                if (webPage2 != null) {
                    EmbedBottomSheet.show(this, messageObject5, this.photoViewerProvider, webPage2.site_name, webPage2.title, webPage2.url, webPage2.embed_url, webPage2.embed_width, webPage2.embed_height, intValue, isKeyboardVisible());
                    return;
                }
                if (messageObject5.isVideo() || (messageObject4 = messageObject5.replyMessageObject) == null) {
                    chatMessageCell2 = chatMessageCell;
                } else {
                    MessageObject messageObject8 = (MessageObject) this.messagesDict[messageObject4.getDialogId() == this.dialog_id ? (char) 0 : (char) 1].get(messageObject5.replyMessageObject.getId());
                    messageObject5 = messageObject8 == null ? messageObject5.replyMessageObject : messageObject8;
                }
                messageObject5.forceSeekTo = intValue / ((float) messageObject5.getDuration());
                openPhotoViewerForMessage(chatMessageCell2, messageObject5);
                return;
            } else if (messageObject5 != null && url.startsWith(MediaStreamTrack.AUDIO_TRACK_KIND)) {
                int intValue2 = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isMusic() || (messageObject3 = messageObject5.replyMessageObject) == null) {
                    messageObject2 = messageObject5;
                } else {
                    messageObject2 = (MessageObject) this.messagesDict[messageObject3.getDialogId() == this.dialog_id ? (char) 0 : (char) 1].get(messageObject5.replyMessageObject.getId());
                }
                if (messageObject2 == null) {
                    return;
                }
                float f = intValue2;
                float duration = f / ((float) messageObject2.getDuration());
                MediaController mediaController = getMediaController();
                if (mediaController.isPlayingMessage(messageObject2)) {
                    messageObject2.audioProgress = duration;
                    mediaController.seekToProgress(messageObject2, duration);
                } else {
                    messageObject2.forceSeekTo = f / ((float) messageObject2.getDuration());
                }
                mediaController.playMessage(messageObject2);
                if (z && chatMessageCell != null) {
                    chatMessageCell.resetPressedLink(-1);
                }
                if (messageObject2.isVoice()) {
                    return;
                }
                showDialog(new AudioPlayerAlert(getContext(), this.themeDelegate));
                return;
            } else if (!url.startsWith("card:")) {
                openClickableLink(characterStyle, url, z, chatMessageCell, messageObject, false);
                return;
            } else {
                didLongPressCard(chatMessageCell, characterStyle, url.substring(5));
            }
        } else {
            String url2 = ((URLSpan) characterStyle).getURL();
            if (url2 != null && url2.startsWith("tel:")) {
                didPressPhoneNumber(chatMessageCell, characterStyle, url2.substring(4));
                return;
            } else if (!z) {
                logSponsoredClicked(messageObject5, false, false);
                boolean z5 = characterStyle instanceof URLSpanReplacement;
                if ((!z5 || (url2 != null && url2.startsWith("mailto:"))) && !AndroidUtilities.shouldShowUrlInAlert(url2)) {
                    if (messageObject5 != null) {
                        TLRPC.MessageMedia messageMedia = messageObject5.messageOwner.media;
                        if ((messageMedia instanceof TLRPC.TL_messageMediaWebPage) && (webPage = messageMedia.webpage) != null && webPage.cached_page != null) {
                            String lowerCase = url2.toLowerCase();
                            String lowerCase2 = messageObject5.messageOwner.media.webpage.url.toLowerCase();
                            if ((lowerCase.contains("telegram.org/blog") || Browser.isTelegraphUrl(lowerCase, false) || lowerCase.contains("t.me/iv")) && (lowerCase.contains(lowerCase2) || lowerCase2.contains(lowerCase))) {
                                LaunchActivity launchActivity = LaunchActivity.instance;
                                if (launchActivity == null || launchActivity.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(messageObject5) == null) {
                                    createArticleViewer(false).open(messageObject5);
                                    return;
                                }
                                return;
                            }
                        }
                    }
                    if (openLinkInternally(url2, chatMessageCell, characterStyle, messageObject5 != null ? messageObject.getId() : 0)) {
                        return;
                    }
                    z2 = z5;
                } else {
                    if (openLinkInternally(url2, chatMessageCell, characterStyle, messageObject5 != null ? messageObject.getId() : 0)) {
                        return;
                    }
                }
                processExternalUrl(2, url2, characterStyle, chatMessageCell, Browser.urlMustNotHaveConfirmation(url2) ? false : z2, false);
                return;
            } else {
                didLongPressLink(chatMessageCell, messageObject5, characterStyle, url2);
                if (chatMessageCell == null) {
                    return;
                }
            }
        }
        chatMessageCell.resetPressedLink(-1);
    }

    private void dimBehindView(float f, boolean z, boolean z2) {
        ValueAnimator ofFloat;
        final boolean z3 = f > 0.0f;
        View view = this.scrimView;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            chatMessageCell.setInvalidatesParent(z3);
            if (z3) {
                restartSticker(chatMessageCell);
            }
        }
        this.contentView.invalidate();
        this.chatListView.invalidate();
        AnimatorSet animatorSet = this.scrimAnimatorSet;
        if (animatorSet != null) {
            animatorSet.removeAllListeners();
            this.scrimAnimatorSet.cancel();
        }
        this.scrimAnimatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        final float max = Math.max(this.scrimPaintAlpha, f);
        if (z3) {
            this.scrimViewAlpha = 1.0f;
            this.scrimViewProgress = 0.0f;
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            ofFloat = ValueAnimator.ofFloat(0.0f, f);
            arrayList.add(ofFloat);
            if (z) {
                AndroidUtilities.makeGlobalBlurBitmap(new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda225
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        ChatActivity.this.lambda$dimBehindView$89((Bitmap) obj);
                    }
                }, 14.0f);
            }
        } else {
            float f2 = this.scrimPaintAlpha;
            this.scrimViewProgress = f2 / max;
            ofFloat = ValueAnimator.ofFloat(f2, 0.0f);
            arrayList.add(ofFloat);
        }
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda226
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$dimBehindView$90(max, valueAnimator2);
            }
        });
        if (!z3 || z2) {
            FrameLayout frameLayout = this.pagedownButton;
            if (frameLayout != null) {
                arrayList.add(ObjectAnimator.ofFloat(frameLayout, View.ALPHA, z3 ? 0.0f : 1.0f));
            }
            FrameLayout frameLayout2 = this.mentiondownButton;
            if (frameLayout2 != null) {
                arrayList.add(ObjectAnimator.ofFloat(frameLayout2, View.ALPHA, z3 ? 0.0f : 1.0f));
            }
            FrameLayout frameLayout3 = this.reactionsMentiondownButton;
            if (frameLayout3 != null) {
                arrayList.add(ObjectAnimator.ofFloat(frameLayout3, View.ALPHA, z3 ? 0.0f : 1.0f));
            }
        }
        this.scrimAnimatorSet.playTogether(arrayList);
        this.scrimAnimatorSet.setDuration(z3 ? 150L : 220L);
        View view2 = this.scrimView;
        final ChatMessageCell chatMessageCell2 = view2 instanceof ChatMessageCell ? (ChatMessageCell) view2 : null;
        this.scrimAnimatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.65
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (z3) {
                    return;
                }
                if (ChatActivity.this.scrimBlurBitmap != null) {
                    ChatActivity.this.scrimBlurBitmapShader = null;
                    ChatActivity.this.scrimBlurBitmapPaint = null;
                    ChatActivity.this.scrimBlurBitmap.recycle();
                    ChatActivity.this.scrimBlurBitmap = null;
                }
                ChatMessageCell chatMessageCell3 = chatMessageCell2;
                if (chatMessageCell3 != null) {
                    chatMessageCell3.invalidate();
                }
                ChatActivity.this.setScrimView(null);
                ChatActivity.this.scrimViewReaction = null;
                ChatActivity.this.contentView.invalidate();
                ChatActivity.this.chatListView.invalidate();
            }
        });
        if (this.scrimView != null && this.scrimViewAlpha <= 0.0f) {
            setScrimView(null);
        }
        this.scrimAnimatorSet.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, float f) {
        setScrimView(view);
        dimBehindView(f, false, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    private void dimBehindView(View view, boolean z) {
        dimBehindView(view, false, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, boolean z, boolean z2) {
        setScrimView(view);
        dimBehindView(z2 ? 0.2f : 0.0f, z, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    private void editResetMediaManual() {
        TLRPC.Message message;
        TLRPC.MessageMedia messageMedia;
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || (message = messageObject.messageOwner) == null || (messageMedia = message.media) == null) {
            return;
        }
        messageMedia.manual = false;
    }

    public static void fillActionModeMenu(Menu menu, TLRPC.EncryptedChat encryptedChat, boolean z) {
        int i;
        int i2 = R.id.menu_bold;
        if (menu.findItem(i2) != null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        if (z) {
            menu.add(R.id.menu_groupbolditalic, R.id.menu_quote, 6, LocaleController.getString(R.string.Quote));
            i = 7;
        } else {
            i = 6;
        }
        int i3 = R.id.menu_groupbolditalic;
        menu.add(i3, R.id.menu_spoiler, i, LocaleController.getString(R.string.Spoiler));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString(R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder.length(), 33);
        menu.add(i3, i2, i + 1, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString(R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        menu.add(i3, R.id.menu_italic, i + 2, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString(R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        int i4 = i + 4;
        menu.add(i3, R.id.menu_mono, i + 3, spannableStringBuilder3);
        if (encryptedChat == null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString(R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            menu.add(i3, R.id.menu_strike, i4, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString(R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            i4 = i + 6;
            menu.add(i3, R.id.menu_underline, i + 5, spannableStringBuilder5);
        }
        menu.add(i3, R.id.menu_link, i4, LocaleController.getString(R.string.CreateLink));
        menu.add(i3, R.id.menu_regular, i4 + 1, LocaleController.getString(R.string.Regular));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void fillEditingMediaWithCaption(CharSequence charSequence, ArrayList arrayList) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(charSequence)) {
            MessageObject messageObject = this.editingMessageObject;
            messageObject.editingMessage = charSequence;
            messageObject.editingMessageEntities = arrayList;
            return;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
            MessageObject messageObject2 = this.editingMessageObject;
            if (messageObject2.editingMessage != null || TextUtils.isEmpty(messageObject2.messageOwner.message)) {
                return;
            }
            this.editingMessageObject.editingMessage = "";
        }
    }

    private void fillInviterId(boolean z) {
        long j;
        TLRPC.Chat chat = this.currentChat;
        if (chat == null || this.chatInfo == null || ChatObject.isNotInChat(chat) || this.currentChat.creator) {
            return;
        }
        TLRPC.ChatFull chatFull = this.chatInfo;
        long j2 = chatFull.inviterId;
        if (j2 != 0) {
            this.chatInviterId = j2;
            return;
        }
        TLRPC.ChatParticipants chatParticipants = chatFull.participants;
        if (chatParticipants != null) {
            TLRPC.ChatParticipant chatParticipant = chatParticipants.self_participant;
            if (chatParticipant != null) {
                j = chatParticipant.inviter_id;
            } else {
                long clientUserId = getUserConfig().getClientUserId();
                int size = this.chatInfo.participants.participants.size();
                for (int i = 0; i < size; i++) {
                    TLRPC.ChatParticipant chatParticipant2 = this.chatInfo.participants.participants.get(i);
                    if (chatParticipant2.user_id == clientUserId) {
                        j = chatParticipant2.inviter_id;
                    }
                }
            }
            this.chatInviterId = j;
            return;
        }
        if (z && this.chatInviterId == 0) {
            getMessagesController().checkChatInviter(this.currentChat.id, false);
        }
    }

    private Integer findClosest(ArrayList arrayList, int i, int[] iArr) {
        if (arrayList.isEmpty()) {
            return 0;
        }
        Integer num = (Integer) arrayList.get(0);
        if (i >= num.intValue()) {
            iArr[0] = 0;
            return num;
        }
        int size = arrayList.size();
        int i2 = size - 1;
        Integer num2 = (Integer) arrayList.get(i2);
        if (i <= num2.intValue()) {
            iArr[0] = i2;
            return num2;
        }
        int i3 = 0;
        int i4 = 0;
        while (i3 < size) {
            i4 = (i3 + size) / 2;
            Integer num3 = (Integer) arrayList.get(i4);
            if (num3.intValue() == i) {
                iArr[0] = i4;
                return num3;
            } else if (i < num3.intValue()) {
                if (i4 > 0) {
                    int i5 = i4 - 1;
                    Integer num4 = (Integer) arrayList.get(i5);
                    if (i > num4.intValue()) {
                        iArr[0] = i5;
                        return num4;
                    }
                }
                i3 = i4 + 1;
            } else if (i4 > 0 && i < ((Integer) arrayList.get(i4 - 1)).intValue()) {
                iArr[0] = i4;
                return num3;
            } else {
                size = i4;
            }
        }
        iArr[0] = i4;
        return (Integer) arrayList.get(i4);
    }

    private void firstLoadMessages() {
        MessagesController messagesController;
        long j;
        long j2;
        boolean z;
        int i;
        int i2;
        int i3;
        int i4;
        long j3;
        int i5;
        int i6;
        boolean z2;
        int i7;
        int i8;
        int i9;
        if (this.firstMessagesLoaded) {
            return;
        }
        this.firstMessagesLoaded = true;
        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
        if (this.chatMode == 7) {
            HashtagSearchController hashtagSearchController = HashtagSearchController.getInstance(this.currentAccount);
            String str = this.searchingHashtag;
            int i10 = this.classGuid;
            int i11 = this.searchType;
            int i12 = this.lastLoadIndex;
            this.lastLoadIndex = i12 + 1;
            hashtagSearchController.searchHashtag(str, i10, i11, i12);
        } else {
            if (this.startLoadFromDate != 0) {
                messagesController = getMessagesController();
                j = this.dialog_id;
                j2 = this.mergeDialogId;
                i9 = this.startLoadFromDate;
                i3 = this.classGuid;
                i4 = this.chatMode;
                j3 = this.threadMessageId;
                i5 = this.replyMaxReadId;
                int i13 = this.lastLoadIndex;
                i6 = i13;
                this.lastLoadIndex = i13 + 1;
                z2 = this.isTopic;
                i7 = 4;
                i8 = 0;
                z = false;
                i = 30;
                i2 = 0;
            } else if (this.startLoadFromMessageId != 0 && (!isThreadChat() || this.startLoadFromMessageId == this.highlightMessageId || this.isTopic)) {
                this.startLoadFromMessageIdSaved = this.startLoadFromMessageId;
                int i14 = this.migrated_to;
                if (i14 != 0) {
                    this.mergeDialogId = i14;
                    messagesController = getMessagesController();
                    j = this.mergeDialogId;
                    z = this.loadInfo;
                    i = this.initialMessagesSize;
                    i2 = this.startLoadFromMessageId;
                    i3 = this.classGuid;
                    i4 = this.chatMode;
                    j3 = this.threadMessageId;
                    i5 = this.replyMaxReadId;
                    int i15 = this.lastLoadIndex;
                    i6 = i15;
                    this.lastLoadIndex = i15 + 1;
                    z2 = this.isTopic;
                    i7 = 3;
                    i8 = 0;
                    j2 = 0;
                    i9 = 0;
                } else {
                    MessagesController messagesController2 = getMessagesController();
                    long j4 = this.dialog_id;
                    long j5 = this.mergeDialogId;
                    boolean z3 = this.loadInfo;
                    int i16 = this.initialMessagesSize;
                    int i17 = this.startLoadFromMessageId;
                    int i18 = this.classGuid;
                    int i19 = this.chatMode;
                    long j6 = this.threadMessageId;
                    int i20 = this.replyMaxReadId;
                    int i21 = this.lastLoadIndex;
                    this.lastLoadIndex = i21 + 1;
                    messagesController2.loadMessages(j4, j5, z3, i16, i17, 0, true, 0, i18, 3, 0, i19, j6, i20, i21, this.isTopic);
                }
            } else if (this.historyPreloaded) {
                this.lastLoadIndex++;
            } else {
                messagesController = getMessagesController();
                j = this.dialog_id;
                j2 = this.mergeDialogId;
                z = this.loadInfo;
                i = this.initialMessagesSize;
                i2 = this.startLoadFromMessageId;
                i3 = this.classGuid;
                i4 = this.chatMode;
                j3 = this.threadMessageId;
                i5 = this.replyMaxReadId;
                int i22 = this.lastLoadIndex;
                i6 = i22;
                this.lastLoadIndex = i22 + 1;
                z2 = this.isTopic;
                i7 = 2;
                i8 = 0;
                i9 = 0;
            }
            messagesController.loadMessages(j, j2, z, i, i2, i9, true, 0, i3, i7, i8, i4, j3, i5, i6, z2);
        }
        int i23 = this.chatMode;
        if (i23 == 0 || (i23 == 3 && getSavedDialogId() == getUserConfig().getClientUserId())) {
            if (!isThreadChat() || this.isTopic) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController3 = getMessagesController();
                long j7 = this.dialog_id;
                long j8 = this.mergeDialogId;
                int i24 = this.classGuid;
                long j9 = this.chatMode == 3 ? 0L : this.threadMessageId;
                int i25 = this.replyMaxReadId;
                int i26 = this.lastLoadIndex;
                this.lastLoadIndex = i26 + 1;
                messagesController3.loadMessages(j7, j8, false, 1, 0, 0, true, 0, i24, 2, 0, 1, j9, i25, i26, this.isTopic);
            }
        }
    }

    private void fixLayout() {
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.123
                @Override // android.view.ViewTreeObserver.OnPreDrawListener
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean fixLayoutInternal() {
        boolean z;
        ActionBar actionBar;
        BackDrawable backDrawable;
        MessageObject.GroupedMessages currentMessagesGroup;
        NumberTextView numberTextView = this.selectedMessagesCountTextView;
        if (numberTextView != null) {
            numberTextView.setTextSize((AndroidUtilities.isTablet() || ApplicationLoader.applicationContext.getResources().getConfiguration().orientation != 2) ? 20 : 18);
        }
        int childCount = this.chatListView.getChildCount();
        HashMap hashMap = null;
        int i = 0;
        while (true) {
            z = true;
            if (i >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (currentMessagesGroup = ((ChatMessageCell) childAt).getCurrentMessagesGroup()) != null && currentMessagesGroup.hasSibling && !currentMessagesGroup.messages.isEmpty()) {
                if (hashMap == null) {
                    hashMap = new HashMap();
                }
                if (!hashMap.containsKey(Long.valueOf(currentMessagesGroup.groupId))) {
                    hashMap.put(Long.valueOf(currentMessagesGroup.groupId), currentMessagesGroup);
                    ArrayList<MessageObject> arrayList = currentMessagesGroup.messages;
                    int indexOf = this.messages.indexOf(arrayList.get(arrayList.size() - 1));
                    if (indexOf >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf + chatActivityAdapter.messagesStartRow, currentMessagesGroup.messages.size());
                        this.chatListView.setItemAnimator(null);
                    }
                }
            }
            i++;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                actionBar = this.actionBar;
                backDrawable = new BackDrawable(false);
            } else {
                actionBar = this.actionBar;
                INavigationLayout iNavigationLayout = this.parentLayout;
                if (iNavigationLayout != null && !iNavigationLayout.getFragmentStack().isEmpty() && this.parentLayout.getFragmentStack().get(0) != this && this.parentLayout.getFragmentStack().size() != 1) {
                    z = false;
                }
                backDrawable = new BackDrawable(z);
            }
            actionBar.setBackButtonDrawable(backDrawable);
            return false;
        }
        return true;
    }

    private void forwardMessages(ArrayList arrayList, boolean z, boolean z2, boolean z3, int i) {
        if (arrayList == null || arrayList.isEmpty() || !checkSlowModeAlert()) {
            return;
        }
        if ((i != 0) == (this.chatMode == 1)) {
            this.waitingForSendingMessageLoad = true;
        }
        int sendMessage = getSendMessagesHelper().sendMessage(arrayList, this.dialog_id, z, z2, z3, i, getThreadMessage());
        AlertsCreator.showSendMediaAlert(sendMessage, this, this.themeDelegate);
        if (sendMessage != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda266
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$forwardMessages$127();
                }
            });
        }
    }

    private int getHeightForMessage(MessageObject messageObject, boolean z) {
        boolean z2 = false;
        if (getParentActivity() == null) {
            return 0;
        }
        if (this.dummyMessageCell == null) {
            this.dummyMessageCell = new ChatMessageCell(getParentActivity(), this.currentAccount, true, this.sharedResources, this.themeDelegate);
        }
        this.dummyMessageCell.isChat = this.currentChat != null || UserObject.isUserSelf(this.currentUser);
        ChatMessageCell chatMessageCell = this.dummyMessageCell;
        int i = this.chatMode;
        chatMessageCell.isSavedChat = i == 3;
        chatMessageCell.isSavedPreviewChat = i == 3 && this.isInsideContainer;
        TLRPC.User user = this.currentUser;
        chatMessageCell.isBot = user != null && user.bot;
        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) {
            z2 = true;
        }
        chatMessageCell.isMegagroup = z2;
        return this.dummyMessageCell.computeHeight(messageObject, (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId()), z);
    }

    private boolean getLiteModeChat() {
        if (this.liteModeChat == null) {
            this.liteModeChat = Boolean.valueOf(LiteMode.isEnabled(LiteMode.FLAGS_CHAT));
        }
        return this.liteModeChat.booleanValue();
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        return getMessageCaption(messageObject, groupedMessages, null);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int[] iArr) {
        if (messageObject == null) {
            return null;
        }
        String restrictionReason = MessagesController.getInstance(this.currentAccount).getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (TextUtils.isEmpty(restrictionReason)) {
            if (!messageObject.isVoiceTranscriptionOpen() || TranscribeButton.isTranscribing(messageObject)) {
                CharSequence charSequence = messageObject.caption;
                if (charSequence != null) {
                    return charSequence;
                }
                if (groupedMessages == null) {
                    return null;
                }
                int size = groupedMessages.messages.size();
                CharSequence charSequence2 = null;
                for (int i = 0; i < size; i++) {
                    MessageObject messageObject2 = groupedMessages.messages.get(i);
                    CharSequence charSequence3 = messageObject2.caption;
                    if (charSequence3 != null) {
                        if (charSequence2 != null) {
                            return null;
                        }
                        if (iArr != null) {
                            iArr[0] = messageObject2.getId();
                        }
                        charSequence2 = charSequence3;
                    }
                }
                return charSequence2;
            }
            return messageObject.getVoiceTranscription();
        }
        return restrictionReason;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public CharSequence getMessageContent(MessageObject messageObject, long j, boolean z) {
        TLRPC.Chat chat;
        String str;
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (z) {
            long fromChatId = messageObject.getFromChatId();
            if (j != fromChatId) {
                if (fromChatId > 0) {
                    TLRPC.User user = getMessagesController().getUser(Long.valueOf(fromChatId));
                    if (user != null) {
                        str = ContactsController.formatName(user.first_name, user.last_name);
                        spannableStringBuilder.append((CharSequence) str).append((CharSequence) ":\n");
                    }
                } else if (fromChatId < 0 && (chat = getMessagesController().getChat(Long.valueOf(-fromChatId))) != null) {
                    str = chat.title;
                    spannableStringBuilder.append((CharSequence) str).append((CharSequence) ":\n");
                }
            }
        }
        CharSequence restrictionReason = MessagesController.getInstance(this.currentAccount).getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (TextUtils.isEmpty(restrictionReason) && (restrictionReason = messageObject.caption) == null) {
            spannableStringBuilder.append(messageObject.messageText);
        } else {
            spannableStringBuilder.append(restrictionReason);
        }
        return spannableStringBuilder;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMessageType(MessageObject messageObject) {
        String str;
        String str2;
        if (messageObject == null) {
            return -1;
        }
        boolean z = false;
        boolean z2 = true;
        if (this.currentEncryptedChat != null) {
            if (messageObject.isSending()) {
                return -1;
            }
            if (messageObject.isAnimatedEmoji()) {
                return 2;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            }
            int i = messageObject.type;
            if (i == 10 || i == 11) {
                return (messageObject.getId() == 0 || messageObject.isSending()) ? -1 : 1;
            } else if (messageObject.isVoice()) {
                return 2;
            } else {
                if (!messageObject.isAnimatedEmoji() && (messageObject.isSticker() || messageObject.isAnimatedSticker())) {
                    TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                    if ((inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) && !getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) {
                        return 7;
                    }
                } else if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                    if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                        z = true;
                    }
                    if (z || !FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).exists()) {
                        z2 = z;
                    }
                    if (z2) {
                        if (messageObject.getDocument() != null && (str = messageObject.getDocument().mime_type) != null && str.endsWith("text/xml")) {
                            return 5;
                        }
                        if (messageObject.messageOwner.ttl <= 0) {
                            return 4;
                        }
                    }
                } else if (messageObject.type == 12) {
                    return 8;
                } else {
                    if (messageObject.isMediaEmpty()) {
                        return 3;
                    }
                }
                return 2;
            }
        } else if (messageObject.isEditing()) {
            return -1;
        } else {
            if (messageObject.getId() <= 0 && messageObject.isOut()) {
                if (messageObject.isSendError()) {
                    return !messageObject.isMediaEmpty() ? 0 : 20;
                }
                return -1;
            } else if (messageObject.isAnimatedEmoji()) {
                return 2;
            } else {
                int i2 = messageObject.type;
                if (i2 == 6) {
                    return -1;
                }
                if (i2 == 10 || i2 == 11 || i2 == 21 || messageObject.isWallpaperAction()) {
                    return messageObject.getId() == 0 ? -1 : 1;
                } else if (messageObject.isVoice()) {
                    return 2;
                } else {
                    if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                        TLRPC.InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                        return inputStickerSet2 instanceof TLRPC.TL_inputStickerSetID ? !getMediaDataController().isStickerPackInstalled(inputStickerSet2.id) ? 7 : 9 : (!(inputStickerSet2 instanceof TLRPC.TL_inputStickerSetShortName) || getMediaDataController().isStickerPackInstalled(inputStickerSet2.short_name)) ? 9 : 7;
                    }
                    if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                            z = true;
                        }
                        if (z || !messageObject.mediaExists) {
                            z2 = z;
                        }
                        if (z2) {
                            if (messageObject.getDocument() != null && !messageObject.isMusic() && (str2 = messageObject.getDocument().mime_type) != null) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                }
                                if (str2.endsWith("/xml")) {
                                    return 5;
                                }
                                if ((!messageObject.isNewGif() && str2.endsWith("/mp4")) || str2.endsWith("/png") || str2.endsWith("/jpg") || str2.endsWith("/jpeg")) {
                                    return 6;
                                }
                            }
                            return 4;
                        }
                    } else if (messageObject.type == 12) {
                        return 8;
                    } else {
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public MessageSkeleton getNewSkeleton(boolean z) {
        MessageSkeleton messageSkeleton = new MessageSkeleton();
        TLRPC.Chat chat = this.currentChat;
        messageSkeleton.height = ((chat == null || !ChatObject.isChannelAndNotMegaGroup(chat)) ? AndroidUtilities.dp(64.0f) : AndroidUtilities.dp(128.0f)) + Utilities.fastRandom.nextInt(AndroidUtilities.dp(64.0f));
        messageSkeleton.width = (int) Math.min((this.chatListView.getWidth() * 0.8f) - (z ? 0 : AndroidUtilities.dp(42.0f)), AndroidUtilities.dp(42.0f) + (((Utilities.fastRandom.nextFloat() * 0.35f) + 0.4f) * this.chatListView.getWidth()));
        return messageSkeleton;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getPinnedMessagesCount() {
        return Math.max(this.loadedPinnedMessagesCount, this.totalPinnedMessagesCount);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:20:0x0053, code lost:
        if (r9.getId() == r17.getId()) goto L43;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z, boolean z2) {
        ChatActionCell chatActionCell;
        MessageObject messageObject2;
        ImageReceiver imageReceiver;
        ImageReceiver imageReceiver2;
        TLRPC.Message message;
        TLRPC.MessageAction messageAction;
        TLRPC.Photo photo;
        ArrayList<TLRPC.VideoSize> arrayList;
        TLRPC.FileLocation fileLocation2;
        TLRPC.Chat chat;
        ChatMessageCell chatMessageCell;
        MessageObject messageObject3;
        int childCount = this.chatListView.getChildCount();
        for (int i2 = 0; i2 < childCount; i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if (childAt instanceof ChatMessageCell) {
                imageReceiver2 = (messageObject == null || (messageObject3 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) == null || messageObject3.getId() != messageObject.getId()) ? null : chatMessageCell.getPhotoImage(i);
            } else if ((childAt instanceof ChatActionCell) && (messageObject2 = (chatActionCell = (ChatActionCell) childAt).getMessageObject()) != null) {
                if (messageObject == null) {
                    if (fileLocation != null && messageObject2.photoThumbs != null) {
                        int i3 = 0;
                        while (true) {
                            if (i3 >= messageObject2.photoThumbs.size()) {
                                imageReceiver = null;
                                break;
                            }
                            TLRPC.FileLocation fileLocation3 = messageObject2.photoThumbs.get(i3).location;
                            if (fileLocation3 != null && fileLocation3.local_id == fileLocation.local_id) {
                                imageReceiver = chatActionCell.getPhotoImage();
                                break;
                            }
                            i3++;
                        }
                        if (imageReceiver != null || (message = messageObject2.messageOwner) == null || (messageAction = message.action) == null || (photo = messageAction.photo) == null || (arrayList = photo.video_sizes) == null || arrayList.isEmpty() || (fileLocation2 = messageObject2.messageOwner.action.photo.video_sizes.get(0).location) == null || fileLocation2.volume_id != fileLocation.volume_id || fileLocation2.local_id != fileLocation.local_id) {
                            imageReceiver2 = imageReceiver;
                        }
                        imageReceiver2 = chatActionCell.getPhotoImage();
                    }
                }
            }
            if (imageReceiver2 != null) {
                if (!z2 || childAt.getY() + imageReceiver2.getImageY2() >= this.chatListViewPaddingTop - AndroidUtilities.dp(4.0f)) {
                    int[] iArr = new int[2];
                    childAt.getLocationInWindow(iArr);
                    PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                    placeProviderObject.viewX = iArr[0];
                    placeProviderObject.viewY = iArr[1] - (Build.VERSION.SDK_INT < 21 ? AndroidUtilities.statusBarHeight : 0);
                    placeProviderObject.parentView = this.chatListView;
                    placeProviderObject.animatingImageView = null;
                    placeProviderObject.imageReceiver = imageReceiver2;
                    if (z) {
                        placeProviderObject.thumb = imageReceiver2.getBitmapSafe();
                    }
                    placeProviderObject.radius = imageReceiver2.getRoundRadius(true);
                    if ((childAt instanceof ChatActionCell) && (chat = this.currentChat) != null) {
                        placeProviderObject.dialogId = -chat.id;
                    }
                    placeProviderObject.clipTopAddition = (int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f));
                    placeProviderObject.clipBottomAddition = this.blurredViewBottomOffset;
                    return placeProviderObject;
                }
                return null;
            }
        }
        return null;
    }

    private int getScrollOffsetForMessage(int i) {
        return (int) Math.max(-AndroidUtilities.dp(2.0f), (((this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) - this.chatListViewPaddingTop) - i) / 2.0f);
    }

    private int getScrollOffsetForMessage(MessageObject messageObject) {
        return getScrollOffsetForMessage(getHeightForMessage(messageObject, !TextUtils.isEmpty(this.highlightMessageQuote))) - scrollOffsetForQuote(messageObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getScrollingOffsetForView(View view) {
        FileLog.d("getScrollingOffsetForView view=" + view + " results in {" + ((this.chatListView.getMeasuredHeight() - view.getBottom()) - this.chatListView.getPaddingBottom()) + "} chatHeight=" + this.chatListView.getMeasuredHeight() + " bottom=" + view.getBottom() + " paddingBottom=" + this.chatListView.getPaddingBottom());
        return (this.chatListView.getMeasuredHeight() - view.getBottom()) - this.chatListView.getPaddingBottom();
    }

    private SearchItemListener getSearchItemListener() {
        if (this.searchItemListener == null) {
            this.searchItemListener = new SearchItemListener();
        }
        return this.searchItemListener;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public float getServiceTop(View view) {
        return ((view.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY()) - ((1.0f - this.contentPanTranslationT) * this.chatListViewPaddingTop);
    }

    private int getSponsoredMessagesCount() {
        int i = 0;
        while (i < this.messages.size() && ((MessageObject) this.messages.get(i)).isSponsored()) {
            i++;
        }
        return i;
    }

    private int getStableIdForDateObject(int i) {
        int i2 = this.dateObjectsStableIds.get(i, -1);
        if (i2 == -1) {
            int i3 = lastStableId;
            lastStableId = i3 + 1;
            this.dateObjectsStableIds.put(i, i3);
            return i3;
        }
        return i2;
    }

    private void gotChatInfo() {
        TLRPC.ChatFull chatFull = this.chatInfo;
        if (chatFull == null || !chatFull.paid_reactions_available) {
            return;
        }
        getMessagesController().arePaidReactionsAnonymous();
        if (StarsController.getInstance(this.currentAccount).balanceAvailable()) {
            return;
        }
        StarsController.getInstance(this.currentAccount).getBalance();
    }

    private boolean hasSelectedNoforwardsMessage() {
        TLRPC.Message message;
        for (int i = 0; i < this.selectedMessagesIds.length; i++) {
            try {
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    MessageObject messageObject = (MessageObject) this.selectedMessagesIds[i].valueAt(i2);
                    if (messageObject != null && (message = messageObject.messageOwner) != null && message.noforwards) {
                        return true;
                    }
                }
            } catch (Exception unused) {
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideActionMode() {
        EditTextCaption editField;
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            if (!actionBar.isActionModeShowed()) {
                return;
            }
            this.actionBar.hideActionMode();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.cantSaveMessagesCount = 0;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && (editField = chatActivityEnterView.getEditField()) != null) {
            if (this.chatActivityEnterView.getVisibility() == 0) {
                editField.requestFocus();
            }
            editField.setAllowDrawCursor(true);
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear(true);
            this.textSelectionHelper.cancelAllAnimators();
        }
        TextSelectionHint textSelectionHint = this.textSelectionHint;
        if (textSelectionHint != null) {
            textSelectionHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.preventInput = false;
        }
        this.textSelectionHintWasShowed = false;
        if (this.tagSelector != null) {
            hideTagSelector();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideAds() {
        if (!getUserConfig().isPremium()) {
            showDialog(new PremiumFeatureBottomSheet(this, 3, true));
            return;
        }
        BulletinFactory.of(this).createAdReportedBulletin(LocaleController.getString(R.string.AdHidden)).show();
        getMessagesController().disableAds(true);
        removeFromSponsored(this.selectedObject);
        removeMessageWithThanos(this.selectedObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideFloatingDateView(boolean z) {
        if (this.floatingDateView.getTag() == null || this.currentFloatingDateOnScreen) {
            return;
        }
        if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
            this.floatingDateView.setTag(null);
            if (z) {
                AnimatorSet animatorSet = new AnimatorSet();
                this.floatingDateAnimation = animatorSet;
                animatorSet.setDuration(150L);
                this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 0.0f));
                this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.92
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                            ChatActivity.this.floatingDateAnimation = null;
                        }
                    }
                });
                this.floatingDateAnimation.setStartDelay(this.hideDateDelay);
                this.floatingDateAnimation.start();
            } else {
                AnimatorSet animatorSet2 = this.floatingDateAnimation;
                if (animatorSet2 != null) {
                    animatorSet2.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
            this.hideDateDelay = 500;
        }
    }

    private void hideHints() {
        HintView2 hintView2 = this.savedMessagesTagHint;
        if (hintView2 != null && hintView2.shown()) {
            this.savedMessagesTagHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.hideHints();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideHints(boolean z) {
        if (!z) {
            HintView hintView = this.slowModeHint;
            if (hintView != null) {
                hintView.hide();
            }
            HintView hintView2 = this.scheduledOrNoSoundHint;
            if (hintView2 != null) {
                hintView2.hide();
            }
            HintView hintView3 = this.scheduledHint;
            if (hintView3 != null) {
                hintView3.hide();
            }
        }
        HintView hintView4 = this.fwdRestrictedBottomHint;
        if (hintView4 != null) {
            hintView4.hide();
        }
        HintView hintView5 = this.fwdRestrictedTopHint;
        if (hintView5 != null) {
            hintView5.hide();
        }
        HintView hintView6 = this.noSoundHintView;
        if (hintView6 != null) {
            hintView6.hide();
        }
        HintView hintView7 = this.forwardHintView;
        if (hintView7 != null) {
            hintView7.hide();
        }
        HintView hintView8 = this.pollHintView;
        if (hintView8 != null) {
            hintView8.hide();
        }
        HintView hintView9 = this.timerHintView;
        if (hintView9 != null) {
            hintView9.hide();
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null) {
            checksHintView.hide();
        }
    }

    private void hideInfoView() {
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell == null || chatActionCell.getTag() == null) {
            return;
        }
        this.infoTopView.setTag(null);
        final ChatActionCell chatActionCell2 = this.infoTopView;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda264
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.this.lambda$hideInfoView$102(chatActionCell2, valueAnimator);
            }
        });
        ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.78
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator2) {
                ChatActivity.this.topViewOffset = 0.0f;
                if (animator2 == ChatActivity.this.infoTopViewAnimator) {
                    ViewGroup viewGroup = (ViewGroup) chatActionCell2.getParent();
                    if (viewGroup != null) {
                        viewGroup.removeView(chatActionCell2);
                    }
                    ChatActivity.this.infoTopView = null;
                    ChatActivity.this.infoTopViewAnimator = null;
                }
            }
        });
        ofFloat.setDuration(150L);
        this.infoTopViewAnimator = ofFloat;
        ofFloat.start();
    }

    private boolean hidePinnedMessageView(boolean z) {
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout == null || blurredFrameLayout.getTag() != null) {
            return false;
        }
        int i = 0;
        while (true) {
            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
            if (i >= animatorSetArr.length) {
                break;
            }
            AnimatorSet animatorSet = animatorSetArr[i];
            if (animatorSet != null) {
                animatorSet.cancel();
                this.pinnedNextAnimation[i] = null;
            }
            i++;
        }
        this.setPinnedTextTranslationX = false;
        this.pinnedMessageView.setTag(1);
        AnimatorSet animatorSet2 = this.pinnedMessageViewAnimator;
        if (animatorSet2 != null) {
            animatorSet2.cancel();
            this.pinnedMessageViewAnimator = null;
        }
        if (z) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, -AndroidUtilities.dp(50.0f));
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda45
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$hidePinnedMessageView$205(valueAnimator);
                }
            });
            this.pinnedMessageViewAnimator.playTogether(ofFloat);
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.112
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    if (ChatActivity.this.pinnedMessageView != null) {
                        ChatActivity.this.pinnedMessageView.setVisibility(8);
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }
            });
            this.pinnedMessageViewAnimator.start();
        } else {
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.chatListView.invalidate();
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideSendButtonHints() {
        HintView hintView = this.scheduledOrNoSoundHint;
        if (hintView != null) {
            hintView.hide();
        }
        HintView hintView2 = this.scheduledHint;
        if (hintView2 != null) {
            hintView2.hide();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideTagSelector() {
        final ReactionsContainerLayout reactionsContainerLayout = this.tagSelector;
        if (reactionsContainerLayout == null) {
            return;
        }
        this.tagSelector = null;
        reactionsContainerLayout.dismissWindow();
        if (reactionsContainerLayout.getReactionsWindow() != null && reactionsContainerLayout.getReactionsWindow().containerView != null) {
            reactionsContainerLayout.getReactionsWindow().containerView.animate().alpha(0.0f).setDuration(180L).start();
        }
        reactionsContainerLayout.animate().alpha(0.01f).translationY(-AndroidUtilities.dp(12.0f)).scaleX(0.7f).scaleY(0.7f).withEndAction(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$hideTagSelector$82(reactionsContainerLayout);
            }
        }).setDuration(180L).start();
    }

    private void hideUndoViews() {
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        UndoView undoView2 = this.topUndoView;
        if (undoView2 != null) {
            undoView2.hide(true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate1() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, this.openAnimationEnded);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate2() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void invalidateChatListViewTopPadding() {
        int i;
        if (!this.invalidateChatListViewTopPadding) {
            this.invalidateChatListViewTopPadding = true;
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.invalidate();
            }
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) {
            i = 0;
        } else {
            i = (this.topChatPanelView.getLayoutParams() == null ? AndroidUtilities.dp(50.0f) : this.topChatPanelView.getLayoutParams().height) - AndroidUtilities.dp(2.0f);
        }
        float max = this.contentPanTranslation + this.contentPaddingTop + Math.max(0, i + ((int) Math.max(-i, this.topChatPanelViewOffset)));
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            float f = max + this.pinnedMessageEnterOffset;
            blurredFrameLayout2.setTranslationY(f);
            max = f + AndroidUtilities.dp(48.0f);
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        if (view != null) {
            view.setTranslationY(max + this.pendingRequestsDelegate.getViewEnterOffset());
        }
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        float f2 = 0.0f;
        float currentHeight = (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0.0f) + 0.0f;
        ChatSearchTabs chatSearchTabs = this.hashtagSearchTabs;
        float currentHeight2 = currentHeight + (chatSearchTabs != null ? chatSearchTabs.getCurrentHeight() : 0.0f);
        if (this.fragmentContextView != null) {
            FragmentContextView fragmentContextView = this.fragmentLocationContextView;
            float dp = (fragmentContextView == null || fragmentContextView.getVisibility() != 0) ? 0.0f : AndroidUtilities.dp(36.0f) + 0.0f;
            FragmentContextView fragmentContextView2 = this.fragmentContextView;
            fragmentContextView2.setTranslationY(this.contentPanTranslation + currentHeight2 + dp + fragmentContextView2.getTopPadding());
        }
        if (this.fragmentLocationContextView != null) {
            FragmentContextView fragmentContextView3 = this.fragmentContextView;
            if (fragmentContextView3 != null && fragmentContextView3.getVisibility() == 0) {
                f2 = 0.0f + AndroidUtilities.dp(this.fragmentContextView.getStyleHeight()) + this.fragmentContextView.getTopPadding();
            }
            FragmentContextView fragmentContextView4 = this.fragmentLocationContextView;
            fragmentContextView4.setTranslationY(this.contentPanTranslation + currentHeight2 + f2 + fragmentContextView4.getTopPadding());
        }
        BlurredFrameLayout blurredFrameLayout3 = this.topChatPanelView;
        if (blurredFrameLayout3 != null) {
            blurredFrameLayout3.setTranslationY(this.contentPanTranslation + currentHeight2 + this.contentPaddingTop + this.topChatPanelViewOffset);
        }
        FrameLayout frameLayout = this.alertView;
        if (frameLayout != null && frameLayout.getVisibility() == 0) {
            this.alertView.setTranslationY(((this.contentPanTranslation + currentHeight2) + this.contentPaddingTop) - (AndroidUtilities.dp(50.0f) * (1.0f - this.alertViewEnterProgress)));
        }
        BlurredFrameLayout blurredFrameLayout4 = this.bottomOverlayChat;
        if (blurredFrameLayout4 != null) {
            blurredFrameLayout4.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        BlurredFrameLayout blurredFrameLayout5 = this.bottomMessagesActionContainer;
        if (blurredFrameLayout5 != null) {
            blurredFrameLayout5.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.setAdditionalTranslationY(this.chatActivityEnterView.getHeightWithTopView() - this.chatActivityEnterView.getAnimatedTop());
        }
    }

    private void invalidatePremiumBlocked() {
        TLRPC.User user;
        if (getDialogId() == getUserConfig().getClientUserId() || getUserConfig().isPremium() || (user = this.currentUser) == null || !user.contact_require_premium || this.messages.isEmpty() == getMessagesController().isUserPremiumBlocked(getDialogId())) {
            return;
        }
        getMessagesController().invalidateUserPremiumBlocked(getDialogId(), this.classGuid);
    }

    public static boolean isClickableLink(String str) {
        return str.startsWith("https://") || str.startsWith("@") || str.startsWith("#") || str.startsWith("$") || str.startsWith("video?");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSkeletonVisible() {
        FrameLayout frameLayout;
        if (this.justCreatedTopic || this.justCreatedChat || this.currentUser != null || this.chatListView == null || !SharedConfig.animationsEnabled() || !getLiteModeChat()) {
            return false;
        }
        int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i2 = 0;
        for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
            i2 += this.chatListView.getChildAt(i3).getHeight();
            int top = this.chatListView.getChildAt(i3).getTop();
            if (top < i) {
                i = top;
            }
        }
        float f = i;
        if (f <= this.chatListViewPaddingTop) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        boolean[] zArr = this.endReached;
        boolean z = (!zArr[0] || (!(this.mergeDialogId == 0 || zArr[1]) || this.messages.isEmpty())) && this.loading && f > this.chatListViewPaddingTop && (!this.messages.isEmpty() ? i2 == 0 : !this.animateProgressViewTo);
        if (z && this.inTransitionAnimation && (frameLayout = this.emptyViewContainer) != null && frameLayout.getVisibility() == 0 && this.emptyViewContainer.getChildCount() > 0) {
            return false;
        }
        if (!z && this.startMessageAppearTransitionMs == 0) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        if (SharedConfig.getDevicePerformanceClass() != 0 && !this.fromPullingDownTransition && this.fragmentBeginToShow) {
            boolean z2 = z && this.startMessageAppearTransitionMs == 0;
            Drawable wallpaperDrawable = this.themeDelegate.getWallpaperDrawable();
            View view = this.fragmentView;
            if (view != null) {
                wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
            }
            if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
                MotionBackgroundDrawable motionBackgroundDrawable = (MotionBackgroundDrawable) wallpaperDrawable;
                if (motionBackgroundDrawable.isIndeterminateAnimation() != z2) {
                    if (!z2) {
                        motionBackgroundDrawable.generateNextGradient();
                    }
                    motionBackgroundDrawable.setIndeterminateAnimation(z2);
                    motionBackgroundDrawable.setIndeterminateSpeedScale(z2 ? 1.5f : 1.0f);
                    motionBackgroundDrawable.updateAnimation(true);
                } else if (z2) {
                    motionBackgroundDrawable.updateAnimation(false);
                }
            }
        }
        return z || (this.startMessageAppearTransitionMs != 0 && System.currentTimeMillis() - this.startMessageAppearTransitionMs <= 200);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSupportedTags() {
        return getUserConfig().getClientUserId() == getDialogId() && !getMessagesController().getSavedMessagesController().unsupported && getUserConfig().isPremium();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x00c5, code lost:
        if (r4 != null) goto L53;
     */
    /* JADX WARN: Code restructure failed: missing block: B:90:0x0055, code lost:
        continue;
     */
    /* JADX WARN: Code restructure failed: missing block: B:98:0x00e8, code lost:
        continue;
     */
    /* JADX WARN: Removed duplicated region for block: B:11:0x002a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ boolean lambda$applyChatLinkMessageMaybe$213(TLRPC.MessageEntity messageEntity) {
        TLRPC.ChatFull chatFull;
        TLRPC.TL_messages_stickerSet groupStickerSetById;
        ArrayList<TLRPC.Document> arrayList;
        ArrayList<TLRPC.Document> arrayList2;
        ArrayList<TLRPC.Document> arrayList3;
        if (messageEntity instanceof TLRPC.TL_messageEntityCustomEmoji) {
            TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji = (TLRPC.TL_messageEntityCustomEmoji) messageEntity;
            long j = tL_messageEntityCustomEmoji.document_id;
            TLRPC.Document document = tL_messageEntityCustomEmoji.document;
            if (document == null) {
                document = AnimatedEmojiDrawable.findDocument(this.currentAccount, j);
            }
            if (document == null) {
                Iterator<TLRPC.TL_messages_stickerSet> it = MediaDataController.getInstance(this.currentAccount).getStickerSets(5).iterator();
                while (it.hasNext()) {
                    TLRPC.TL_messages_stickerSet next = it.next();
                    if (next != null && (arrayList3 = next.documents) != null && !arrayList3.isEmpty()) {
                        Iterator<TLRPC.Document> it2 = next.documents.iterator();
                        while (true) {
                            if (it2.hasNext()) {
                                TLRPC.Document next2 = it2.next();
                                if (next2.id == j) {
                                    document = next2;
                                    continue;
                                    break;
                                }
                            }
                        }
                    }
                    while (it.hasNext()) {
                    }
                }
            }
            if (document == null) {
                Iterator<TLRPC.StickerSetCovered> it3 = MediaDataController.getInstance(this.currentAccount).getFeaturedEmojiSets().iterator();
                while (it3.hasNext()) {
                    TLRPC.StickerSetCovered next3 = it3.next();
                    if (next3 != null && (arrayList2 = next3.covers) != null && !arrayList2.isEmpty()) {
                        Iterator<TLRPC.Document> it4 = next3.covers.iterator();
                        while (true) {
                            if (!it4.hasNext()) {
                                break;
                            }
                            TLRPC.Document next4 = it4.next();
                            if (next4.id == j) {
                                document = next4;
                                break;
                            }
                        }
                    }
                    if (document != null) {
                        break;
                    }
                    if (next3 instanceof TLRPC.TL_stickerSetFullCovered) {
                        arrayList = ((TLRPC.TL_stickerSetFullCovered) next3).documents;
                    } else {
                        if ((next3 instanceof TLRPC.TL_stickerSetNoCovered) && next3.set != null) {
                            TLRPC.TL_inputStickerSetID tL_inputStickerSetID = new TLRPC.TL_inputStickerSetID();
                            tL_inputStickerSetID.id = next3.set.id;
                            TLRPC.TL_messages_stickerSet stickerSet = MediaDataController.getInstance(this.currentAccount).getStickerSet(tL_inputStickerSetID, true);
                            if (stickerSet != null) {
                                arrayList = stickerSet.documents;
                            }
                        }
                        arrayList = null;
                    }
                    if (arrayList != null && !arrayList.isEmpty()) {
                        Iterator<TLRPC.Document> it5 = arrayList.iterator();
                        while (true) {
                            if (it5.hasNext()) {
                                TLRPC.Document next5 = it5.next();
                                if (next5.id == j) {
                                    document = next5;
                                    continue;
                                    break;
                                }
                            }
                        }
                    }
                    if (document != null) {
                        break;
                    }
                }
            }
            if (document != null && (chatFull = MessagesController.getInstance(this.currentAccount).getChatFull(-this.dialog_id)) != null && chatFull.emojiset != null && (groupStickerSetById = MediaDataController.getInstance(this.currentAccount).getGroupStickerSetById(chatFull.emojiset)) != null) {
                Iterator<TLRPC.Document> it6 = groupStickerSetById.documents.iterator();
                while (it6.hasNext()) {
                    if (it6.next().id == j) {
                        return true;
                    }
                }
            }
            return document != null && MessageObject.isFreeEmoji(document);
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyDraftMaybe$214() {
        ChatActivityEnterView chatActivityEnterView;
        if (BaseFragment.hasSheets(this) || (chatActivityEnterView = this.chatActivityEnterView) == null) {
            return;
        }
        chatActivityEnterView.setFieldFocused(true);
        this.chatActivityEnterView.openKeyboard();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkGroupEmojiPackHint$188() {
        FrameLayout.LayoutParams createFrame = LayoutHelper.createFrame(-1, -2.0f, 87, 0.0f, 0.0f, 0.0f, 0.0f);
        createFrame.bottomMargin = this.chatActivityEnterView.getMeasuredHeight();
        this.contentView.addView(this.groupEmojiPackHint, createFrame);
        this.groupEmojiPackHint.setJointPx(0.0f, this.chatActivityEnterView.getEmojiButton().getX() + AndroidUtilities.dp(18.0f));
        this.groupEmojiPackHint.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkGroupMessagesOrder$340(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject2.getId() - messageObject.getId();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkListViewPaddings$210() {
        this.checkPaddingsRunnable = null;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkRecordLocked$299(boolean z, DialogInterface dialogInterface, int i) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            if (z) {
                lambda$onBackPressed$300();
            } else {
                chatActivityEnterView.cancelRecordingAudioVideo();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkScrollForLoad$111(int i, int i2, int i3, int i4) {
        MessagesController messagesController;
        long j;
        long j2;
        int i5;
        int i6;
        int i7;
        int i8;
        long j3;
        int i9;
        int i10;
        boolean z;
        int i11;
        int i12;
        int i13;
        boolean z2;
        int i14;
        MessagesController messagesController2;
        long j4;
        long j5;
        int i15;
        boolean z3;
        int i16;
        if ((i - i2) - i3 <= i4 && !this.loading) {
            boolean[] zArr = this.endReached;
            if (!zArr[0]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.messagesByDays.size() != 0) {
                    MessagesController messagesController3 = getMessagesController();
                    long j6 = this.dialog_id;
                    long j7 = this.mergeDialogId;
                    i13 = this.maxMessageId[0];
                    z2 = !this.cacheEndReached[0];
                    i14 = this.minDate[0];
                    messagesController2 = messagesController3;
                    j5 = j6;
                    j4 = j7;
                } else {
                    MessagesController messagesController4 = getMessagesController();
                    long j8 = this.dialog_id;
                    messagesController2 = messagesController4;
                    j5 = j8;
                    j4 = this.mergeDialogId;
                    z3 = !this.cacheEndReached[0];
                    i15 = this.minDate[0];
                    i16 = 0;
                    int i17 = this.classGuid;
                    int i18 = this.chatMode;
                    long j9 = this.threadMessageId;
                    int i19 = this.replyMaxReadId;
                    int i20 = this.lastLoadIndex;
                    this.lastLoadIndex = i20 + 1;
                    messagesController2.loadMessages(j5, j4, false, 50, i16, 0, z3, i15, i17, 0, 0, i18, j9, i19, i20, this.isTopic);
                }
            } else if (this.mergeDialogId != 0 && !zArr[1]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController5 = getMessagesController();
                long j10 = this.mergeDialogId;
                i13 = this.maxMessageId[1];
                z2 = !this.cacheEndReached[1];
                i14 = this.minDate[1];
                messagesController2 = messagesController5;
                j4 = 0;
                j5 = j10;
            }
            i16 = i13;
            z3 = z2;
            i15 = i14;
            int i172 = this.classGuid;
            int i182 = this.chatMode;
            long j92 = this.threadMessageId;
            int i192 = this.replyMaxReadId;
            int i202 = this.lastLoadIndex;
            this.lastLoadIndex = i202 + 1;
            messagesController2.loadMessages(j5, j4, false, 50, i16, 0, z3, i15, i172, 0, 0, i182, j92, i192, i202, this.isTopic);
        }
        if (i3 <= 0 || this.loadingForward || i2 > 10) {
            return;
        }
        if (this.mergeDialogId != 0 && !this.forwardEndReached[1]) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            messagesController = getMessagesController();
            j = this.mergeDialogId;
            i5 = this.minMessageId[1];
            i6 = this.maxDate[1];
            i7 = this.classGuid;
            i8 = this.chatMode;
            j3 = this.threadMessageId;
            i9 = this.replyMaxReadId;
            int i21 = this.lastLoadIndex;
            i10 = i21;
            this.lastLoadIndex = i21 + 1;
            z = this.isTopic;
            i11 = 1;
            i12 = 0;
            j2 = 0;
        } else if (this.forwardEndReached[0]) {
            return;
        } else {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            messagesController = getMessagesController();
            j = this.dialog_id;
            j2 = this.mergeDialogId;
            i5 = this.minMessageId[0];
            i6 = this.maxDate[0];
            i7 = this.classGuid;
            i8 = this.chatMode;
            j3 = this.threadMessageId;
            i9 = this.replyMaxReadId;
            int i22 = this.lastLoadIndex;
            i10 = i22;
            this.lastLoadIndex = i22 + 1;
            z = this.isTopic;
            i11 = 1;
            i12 = 0;
        }
        messagesController.loadMessages(j, j2, false, 50, i5, 0, true, i6, i7, i11, i12, i8, j3, i9, i10, z);
        this.loadingForward = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSecretMessageForLocation$179() {
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                if (chatMessageCell.getMessageObject().type == 4) {
                    chatMessageCell.forceResetMessageObject();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkShowBlur$101(View view) {
        finishPreviewFragment();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkThemeEmoticonOrWallpaper$332() {
        TLRPC.UserFull userFull = this.userInfo;
        setChatThemeEmoticon(userFull != null ? userFull.theme_emoticon : null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$closeMenu$263(ValueAnimator valueAnimator) {
        this.scrimViewAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidate();
            this.chatListView.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createActionMode$81(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$72(View view) {
        int i;
        MessageObject messageObject = null;
        for (int i2 = 1; i2 >= 0; i2--) {
            if (messageObject == null && this.selectedMessagesIds[i2].size() != 0) {
                messageObject = (MessageObject) this.messagesDict[i2].get(this.selectedMessagesIds[i2].keyAt(0));
            }
            this.selectedMessagesIds[i2].clear();
            this.selectedMessagesCanCopyIds[i2].clear();
            this.selectedMessagesCanStarIds[i2].clear();
        }
        hideActionMode();
        if (messageObject != null && ((i = messageObject.messageOwner.id) > 0 || (i < 0 && this.currentEncryptedChat != null))) {
            showFieldPanelForReply(messageObject);
        }
        updatePinnedMessageView(true);
        updateVisibleRows();
        updateSelectedMessageReactions();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$73(View view) {
        openForward(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$215() {
        hideActionMode();
        updatePinnedMessageView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$216() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$261(TLRPC.Document document) {
        this.animatingDocuments.put(document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(document, null, this.dialog_id, null, null, null, this.replyingQuote, null, true, 0, false, null, this.quickReplyShortcut, getQuickReplyId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$262(TLRPC.Document document) {
        this.animatingDocuments.put(document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(document, null, this.dialog_id, null, null, null, this.replyingQuote, null, true, 0, false, null, this.quickReplyShortcut, getQuickReplyId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$217(MessageObject messageObject) {
        scrollToMessageId(messageObject.getReplyMsgId(), messageObject.messageOwner.id, true, messageObject.getDialogId() == this.mergeDialogId ? 1 : 0, false, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$218(TLObject tLObject) {
        if (tLObject instanceof TLRPC.TL_payments_paymentReceiptStars) {
            StarsIntroActivity.showTransactionSheet(getContext(), false, this.currentAccount, (TLRPC.TL_payments_paymentReceiptStars) tLObject, this.resourceProvider);
        } else if (tLObject instanceof TLRPC.PaymentReceipt) {
            presentFragment(new PaymentFormActivity((TLRPC.PaymentReceipt) tLObject));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$219(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$218(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$220(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$221(HorizontalScrollView horizontalScrollView, float f, float f2, ReactionTabHolderView reactionTabHolderView, ReactionTabHolderView reactionTabHolderView2, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        horizontalScrollView.setScrollX((int) (f + ((f2 - f) * floatValue)));
        reactionTabHolderView.setOutlineProgress(1.0f - floatValue);
        reactionTabHolderView2.setOutlineProgress(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$222(ViewPager viewPager, int i, LinearLayout linearLayout, AtomicBoolean atomicBoolean, final HorizontalScrollView horizontalScrollView, final ReactionTabHolderView reactionTabHolderView, View view) {
        int currentItem = viewPager.getCurrentItem();
        if (i == currentItem) {
            return;
        }
        final ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(currentItem);
        atomicBoolean.set(true);
        viewPager.setCurrentItem(i, true);
        final float scrollX = horizontalScrollView.getScrollX();
        final float x = reactionTabHolderView.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(150L);
        duration.setInterpolator(CubicBezierInterpolator.DEFAULT);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda250
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$221(horizontalScrollView, scrollX, x, reactionTabHolderView2, reactionTabHolderView, valueAnimator);
            }
        });
        duration.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$223(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.127
            @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$224(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC.MessagePeerReaction messagePeerReaction) {
        String str;
        Bundle bundle = new Bundle();
        if (j > 0) {
            str = "user_id";
        } else {
            j = -j;
            str = "chat_id";
        }
        bundle.putLong(str, j);
        bundle.putInt("report_reaction_message_id", messageObject.getId());
        bundle.putLong("report_reaction_from_dialog_id", this.dialog_id);
        presentFragment(new ProfileActivity(bundle));
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$225(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i) {
        actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], AndroidUtilities.dp(52.0f) + i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$226(ReactedUsersListView reactedUsersListView, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, View view) {
        if (reactedUsersListView == null || reactedUsersListView.isLoaded) {
            actionBarPopupWindowLayout.getSwipeBack().openForeground(iArr[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$227(MessageSeenView messageSeenView, View view, int i) {
        long j;
        String str;
        TLObject tLObject = (TLObject) messageSeenView.users.get(i);
        if (tLObject == null) {
            return;
        }
        closeMenu(true);
        Bundle bundle = new Bundle();
        if (!(tLObject instanceof TLRPC.User)) {
            if (tLObject instanceof TLRPC.Chat) {
                j = ((TLRPC.Chat) tLObject).id;
                str = "chat_id";
            }
            presentFragment(new ProfileActivity(bundle));
        }
        j = ((TLRPC.User) tLObject).id;
        str = "user_id";
        bundle.putLong(str, j);
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$228() {
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$229(MessageObject messageObject, View view) {
        UndoView undoView;
        if (getMediaDataController().saveToRingtones(messageObject.getDocument()) && (undoView = getUndoView()) != null) {
            undoView.showWithAction(this.dialog_id, UndoView.ACTION_RINGTONE_ADDED, new Runnable() { // from class: org.telegram.ui.ChatActivity.130
                boolean clicked;

                @Override // java.lang.Runnable
                public void run() {
                    if (this.clicked) {
                        return;
                    }
                    this.clicked = true;
                    ChatActivity.this.presentFragment(new NotificationsSettingsActivity());
                }
            });
        }
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$230(View view) {
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$231(CrossfadeDrawable crossfadeDrawable, ValueAnimator valueAnimator) {
        crossfadeDrawable.setProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$232(long[] jArr, boolean[] zArr, ImageView imageView, ImageView imageView2) {
        jArr[0] = SystemClock.elapsedRealtime();
        if (!zArr[0]) {
            imageView = imageView2;
        }
        final CrossfadeDrawable crossfadeDrawable = (CrossfadeDrawable) imageView.getDrawable();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda340
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$231(CrossfadeDrawable.this, valueAnimator);
            }
        });
        ofFloat.setDuration(150L);
        ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
        ofFloat.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$233() {
        closeMenu();
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString(R.string.TranscriptionReportSent)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$234(Runnable runnable, long[] jArr, TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.cancelRunOnUIThread(runnable);
        this.selectedObject.messageOwner.voiceTranscriptionRated = true;
        getMessagesStorage().updateMessageVoiceTranscriptionOpen(this.selectedObject.getDialogId(), this.selectedObject.getId(), this.selectedObject.messageOwner);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda325
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$233();
            }
        }, jArr[0] > 0 ? Math.max(0L, 300 - (SystemClock.elapsedRealtime() - jArr[0])) : 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$235(boolean[] zArr, final boolean[] zArr2, final ImageView imageView, final ImageView imageView2) {
        if (zArr[0]) {
            return;
        }
        zArr[0] = true;
        final long[] jArr = {-1};
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda248
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$createMenu$232(jArr, zArr2, imageView, imageView2);
            }
        };
        TLRPC.TL_messages_rateTranscribedAudio tL_messages_rateTranscribedAudio = new TLRPC.TL_messages_rateTranscribedAudio();
        tL_messages_rateTranscribedAudio.msg_id = this.selectedObject.getId();
        tL_messages_rateTranscribedAudio.peer = getMessagesController().getInputPeer(this.selectedObject.messageOwner.peer_id);
        tL_messages_rateTranscribedAudio.transcription_id = this.selectedObject.messageOwner.voiceTranscriptionId;
        tL_messages_rateTranscribedAudio.good = zArr2[0];
        getConnectionsManager().sendRequest(tL_messages_rateTranscribedAudio, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda249
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$createMenu$234(runnable, jArr, tLObject, tL_error);
            }
        });
        AndroidUtilities.runOnUIThread(runnable, 150L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$236(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = true;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$237(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = false;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$238(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$239(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return;
        }
        logSponsoredClicked(messageObject, false, false);
        Browser.openUrl(getContext(), Uri.parse(this.selectedObject.sponsoredUrl), true, false, false, null, null, false, getMessagesController().sponsoredLinksInappAllow);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createMenu$240(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return false;
        }
        if (AndroidUtilities.addToClipboard(messageObject.sponsoredUrl)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyLinkBulletin().show();
            return true;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$241(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$242(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredAdditionalInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$243(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int i, View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        actionBarPopupWindowLayout.getSwipeBack().openForeground(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$244(View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        BottomSheet.Builder builder = new BottomSheet.Builder(this.contentView.getContext());
        builder.setCustomView(new SponsoredMessageInfoView(getParentActivity(), null, this.themeDelegate));
        builder.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$245(int i, ArrayList arrayList, View view) {
        if (this.selectedObject == null || i >= arrayList.size()) {
            return;
        }
        processSelectedOption(((Integer) arrayList.get(i)).intValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ Boolean lambda$createMenu$246(View view, URLSpan uRLSpan) {
        didPressMessageUrl(uRLSpan, false, this.selectedObject, view instanceof ChatMessageCell ? (ChatMessageCell) view : null);
        return Boolean.TRUE;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$247() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$248(int i, ArrayList arrayList, String str, String str2, String str3, TLRPC.InputPeer inputPeer, int[] iArr, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        TLRPC.Message message;
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        String str4 = (str == null || !str.equals(str2)) ? str2 : str3;
        MessageObject messageObject = this.selectedObject;
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, inputPeer, iArr[0], str, str4, charSequence, (messageObject == null || (message = messageObject.messageOwner) == null) ? null : message.entities, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda252
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$247();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 > 0) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
            updateTopPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$249(String[] strArr, String str, String str2, boolean z, ActionBarMenuSubItem actionBarMenuSubItem, AtomicBoolean atomicBoolean, AtomicReference atomicReference, String str3) {
        TLRPC.Chat chat;
        strArr[0] = str3;
        if (str3 != null && ((!str3.equals(str) || !strArr[0].equals(str2) || strArr[0].equals(TranslateController.UNKNOWN_LANGUAGE)) && ((z && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(strArr[0])) || ((((chat = this.currentChat) != null && (chat.has_link || ChatObject.isPublic(chat))) || this.selectedObject.messageOwner.fwd_from != null) && ("uk".equals(strArr[0]) || "ru".equals(strArr[0])))))) {
            actionBarMenuSubItem.setVisibility(0);
        }
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$250(AtomicBoolean atomicBoolean, AtomicReference atomicReference, Exception exc) {
        FileLog.e("mlkit: failed to detect language in message");
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$251() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$252(int i, ArrayList arrayList, String[] strArr, String str, String str2, TLRPC.InputPeer inputPeer, int[] iArr, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        TLRPC.Message message;
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        String str3 = strArr[0];
        String str4 = (str3 == null || !str3.equals(str)) ? str : str2;
        MessageObject messageObject = this.selectedObject;
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, inputPeer, iArr[0], strArr[0], str4, charSequence, (messageObject == null || (message = messageObject.messageOwner) == null) ? null : message.entities, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda307
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$251();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 > 0) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
            updateTopPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$253(AtomicReference atomicReference) {
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.getAndSet(null)).run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$254() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$255(int i, ArrayList arrayList, TLRPC.InputPeer inputPeer, int[] iArr, String str, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, inputPeer, iArr[0], TranslateController.UNKNOWN_LANGUAGE, str, charSequence, null, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda302
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$254();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 > 0) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
            updateTopPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$256(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$257() {
        closeMenu(false);
        PremiumFeatureBottomSheet premiumFeatureBottomSheet = new PremiumFeatureBottomSheet(this, 24, true);
        premiumFeatureBottomSheet.setDimBehind(false);
        premiumFeatureBottomSheet.setOnHideListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda245
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$createMenu$256(dialogInterface);
            }
        });
        premiumFeatureBottomSheet.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$258(ArrayList arrayList, View view) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.137
            @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$259() {
        ActionBarMenuSubItem actionBarMenuSubItem;
        ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
        if (actionBarMenuSubItemArr == null || actionBarMenuSubItemArr.length <= 0 || (actionBarMenuSubItem = actionBarMenuSubItemArr[0]) == null) {
            return;
        }
        actionBarMenuSubItem.requestFocus();
        this.scrimPopupWindowItems[0].performAccessibilityAction(64, null);
        this.scrimPopupWindowItems[0].sendAccessibilityEvent(8);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$260(int i, int i2, boolean z, ReactionsContainerLayout reactionsContainerLayout) {
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow == null || this.fragmentView == null || actionBarPopupWindow.isShowing() || !AndroidUtilities.isActivityRunning(getParentActivity())) {
            return;
        }
        this.scrimPopupWindow.showAtLocation(this.chatListView, 51, i, i2);
        if (z && reactionsContainerLayout != null) {
            reactionsContainerLayout.startEnterAnimation(true);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda220
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$259();
            }
        }, 420L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$95(View view) {
        int i;
        this.wasManualScroll = true;
        if (isThreadChat() && !this.isTopic) {
            scrollToMessageId((int) this.threadMessageId, 0, true, 0, true, 0);
            return;
        }
        int i2 = this.currentPinnedMessageId;
        if (i2 != 0) {
            if (this.pinnedMessageIds.isEmpty()) {
                i = 0;
            } else {
                ArrayList arrayList = this.pinnedMessageIds;
                if (i2 == ((Integer) arrayList.get(arrayList.size() - 1)).intValue()) {
                    i = ((Integer) this.pinnedMessageIds.get(0)).intValue() + 1;
                    this.forceScrollToFirst = true;
                } else {
                    i = i2 - 1;
                    this.forceScrollToFirst = false;
                }
            }
            this.forceNextPinnedMessageId = i;
            scrollToMessageId(i2, 0, true, 0, true, !this.forceScrollToFirst ? -i : i);
            updateMessagesVisiblePart(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$96(View view) {
        openPinnedMessagesList(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$97(DialogInterface dialogInterface, int i) {
        MessageObject messageObject = (MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
        if (messageObject == null) {
            messageObject = (MessageObject) this.messagesDict[0].get(this.currentPinnedMessageId);
        }
        unpinMessage(messageObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$98(View view) {
        TLRPC.UserFull userFull;
        if (getParentActivity() == null) {
            return;
        }
        TLRPC.Chat chat = this.currentChat;
        if (chat != null ? ChatObject.canPinMessages(chat) : (this.currentEncryptedChat != null || (userFull = this.userInfo) == null) ? false : userFull.can_pin_message) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString(R.string.UnpinMessageAlertTitle));
            builder.setMessage(LocaleController.getString(R.string.UnpinMessageAlert));
            builder.setPositiveButton(LocaleController.getString(R.string.UnpinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda339
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$createPinnedMessageView$97(dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
            showDialog(builder.create());
        } else if (this.pinnedMessageIds.isEmpty()) {
        } else {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, ((Integer) this.pinnedMessageIds.get(0)).intValue()).commit();
            updatePinnedMessageView(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$83(View view) {
        toggleMesagesSearchListView();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$84(View view) {
        setFilterMessages(!this.chatAdapter.isFiltered);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$85(View view) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.setReversed(true);
            this.mentionContainer.getAdapter().setSearchingMentions(true);
        }
        this.searchCalendarButton.setVisibility(8);
        this.searchUserButton.setVisibility(8);
        this.searchingForUser = true;
        this.searchingUserMessages = null;
        this.searchingChatMessages = null;
        this.searchItem.setSearchFieldHint(LocaleController.getString(R.string.SearchMembers));
        this.searchItem.setSearchFieldCaption(LocaleController.getString(R.string.SearchFrom));
        AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
        this.searchItem.clearSearchText();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$86(View view) {
        if (getParentActivity() == null) {
            return;
        }
        ActionBarMenuItem actionBarMenuItem = this.searchItem;
        if (actionBarMenuItem != null) {
            AndroidUtilities.hideKeyboard(actionBarMenuItem.getSearchField());
        }
        showDialog(AlertsCreator.createCalendarPickerDialog(getParentActivity(), 1375315200000L, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity.63
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public void run(int i) {
                ChatActivity.this.jumpToDate(i);
            }
        }, this.themeDelegate).create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$74(int i) {
        if (i == 0) {
            updateTopPanel(true);
        } else {
            lambda$onBackPressed$300();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$75(View view) {
        AlertsCreator.showBlockReportSpamAlert(this, this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat, this.reportSpamButton.getTag(R.id.object_tag) != null, this.chatInfo, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda319
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public final void run(int i) {
                ChatActivity.this.lambda$createTopPanel$74(i);
            }
        }, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$76(ArrayList arrayList, int i) {
        getMessagesController().addUsersToChat(this.currentChat, this, arrayList, i, null, null, null);
        getMessagesController().hidePeerSettingsBar(this.dialog_id, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$77() {
        if (this.undoView != null || getContext() == null) {
            return;
        }
        createUndoView();
        this.undoView.showWithAction(this.dialog_id, 8, this.currentUser);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$78(View view) {
        if (this.addToContactsButtonArchive) {
            getMessagesController().addDialogToFolder(this.dialog_id, 0, 0, 0L);
            createUndoView();
            this.undoView.showWithAction(this.dialog_id, 23, (Runnable) null);
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putBoolean("dialog_bar_archived" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_block" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_report" + this.dialog_id, false);
            edit.commit();
            updateTopPanel(false);
            getNotificationsController().clearDialogNotificationsSettings(this.dialog_id, getTopicId());
        } else if (this.addToContactsButton.getTag() == null || ((Integer) this.addToContactsButton.getTag()).intValue() != 4) {
            if (this.addToContactsButton.getTag() != null) {
                shareMyContact(1, null);
                return;
            }
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", this.currentUser.id);
            bundle.putBoolean("addContact", true);
            ContactAddActivity contactAddActivity = new ContactAddActivity(bundle);
            contactAddActivity.setDelegate(new ContactAddActivity.ContactAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda322
                @Override // org.telegram.ui.ContactAddActivity.ContactAddActivityDelegate
                public final void didAddToContacts() {
                    ChatActivity.this.lambda$createTopPanel$77();
                }
            });
            presentFragment(contactAddActivity);
        } else {
            TLRPC.ChatFull chatFull = this.chatInfo;
            if (chatFull == null || chatFull.participants == null) {
                return;
            }
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                longSparseArray.put(this.chatInfo.participants.participants.get(i).user_id, null);
            }
            long j = this.chatInfo.id;
            InviteMembersBottomSheet inviteMembersBottomSheet = new InviteMembersBottomSheet(getContext(), this.currentAccount, longSparseArray, this.chatInfo.id, this, this.themeDelegate);
            inviteMembersBottomSheet.setDelegate(new GroupCreateActivity.ContactsAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda321
                @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                public final void didSelectUsers(ArrayList arrayList, int i2) {
                    ChatActivity.this.lambda$createTopPanel$76(arrayList, i2);
                }

                @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                public /* synthetic */ void needAddBot(TLRPC.User user) {
                    GroupCreateActivity.ContactsAddActivityDelegate.-CC.$default$needAddBot(this, user);
                }
            });
            inviteMembersBottomSheet.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$79(View view) {
        TopicsController topicsController = getMessagesController().getTopicsController();
        long j = this.currentChat.id;
        TLRPC.TL_forumTopic tL_forumTopic = this.forumTopic;
        int i = tL_forumTopic.id;
        tL_forumTopic.closed = false;
        topicsController.toggleCloseTopic(j, i, false);
        updateTopicButtons();
        updateBottomOverlay();
        updateTopPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$80(View view) {
        long j = this.dialog_id;
        if (this.currentEncryptedChat != null) {
            j = this.currentUser.id;
        }
        getMessagesController().hidePeerSettingsBar(j, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$18(View view, MotionEvent motionEvent) {
        ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
        if (chatThemeBottomSheet != null) {
            chatThemeBottomSheet.close();
            return true;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$19(int i, View view) {
        jumpToDate(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$20(int i) {
        this.actionBar.setSubtitle(LocaleController.formatPluralString("messages", i, new Object[0]));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$21(final int i) {
        if (i != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda357
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$20(i);
                }
            });
        } else {
            this.actionBar.setSubtitle(LocaleController.getString(R.string.NoMessagesForThisDay));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$22(TLObject tLObject, TLObject tLObject2, TLRPC.TL_error tL_error) {
        if (tLObject2 instanceof TLRPC.messages_Messages) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject2;
            boolean isEmpty = messages_messages.messages.isEmpty();
            final int i = ((TLRPC.messages_Messages) tLObject).offset_id_offset;
            if (!isEmpty) {
                i -= messages_messages.offset_id_offset;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda320
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$21(i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$23(final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.messages_Messages) {
            if (((TLRPC.messages_Messages) tLObject).messages.isEmpty()) {
                this.actionBar.setSubtitle(LocaleController.getString(R.string.NoMessagesForThisDay));
                return;
            }
            TLRPC.TL_messages_getHistory tL_messages_getHistory = new TLRPC.TL_messages_getHistory();
            tL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
            tL_messages_getHistory.offset_date = this.startLoadFromDate + 86400;
            tL_messages_getHistory.limit = 1;
            getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda207
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC.TL_error tL_error2) {
                    ChatActivity.this.lambda$createView$22(tLObject, tLObject2, tL_error2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$24() {
        toggleMute(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$25(View view) {
        if (!MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id, getTopicId())) {
            this.muteItem.openSwipeBack();
            return;
        }
        updateTitleIcons(true);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda253
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$24();
            }
        }, 150L);
        this.headerItem.toggleSubMenu();
        if (getParentActivity() != null) {
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$26(View view) {
        if (this.floatingDateView.getAlpha() == 0.0f || this.actionBar.isActionModeShowed() || isReport()) {
            return;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(this.floatingDateView.getCustomDate() * 1000);
        int i = calendar.get(1);
        int i2 = calendar.get(2);
        int i3 = calendar.get(5);
        calendar.clear();
        calendar.set(i, i2, i3);
        jumpToDate((int) (calendar.getTime().getTime() / 1000));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$27(View view) {
        onPageDownClicked();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$28(View view) {
        if (this.chatMode == 7) {
            HashtagSearchController.getInstance(this.currentAccount).jumpToMessage(this.classGuid, this.hashtagSearchSelectedIndex + 1, this.searchType);
            return;
        }
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, this.reversed ? 2 : 1, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$29(View view) {
        if (this.chatMode == 7) {
            HashtagSearchController.getInstance(this.currentAccount).jumpToMessage(this.classGuid, this.hashtagSearchSelectedIndex - 1, this.searchType);
            return;
        }
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, this.reversed ? 1 : 2, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$30() {
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = (MessageObject) this.messages.get(i);
            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                messageObject.setContentIsRead();
            }
        }
        this.newMentionsCount = 0;
        getMessagesController().markMentionsAsRead(this.dialog_id, getTopicId());
        this.hasAllMentionsLocal = true;
        showMentionDownButton(false, true);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$31() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$32(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(1, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda271
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$30();
            }
        });
        dimBehindView((View) this.mentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda272
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$31();
            }
        });
        view.performHapticFeedback(0, 2);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$33(View view, MotionEvent motionEvent) {
        return ContentPreviewViewer.getInstance().onTouch(motionEvent, this.mentionContainer.getListView(), 0, this.mentionsOnItemClickListener, this.mentionContainer.getAdapter().isStickers() ? this.contentPreviewViewerDelegate : null, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$34(TLRPC.TL_document tL_document, String str, Object obj, boolean z, int i) {
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tL_document, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, null, z, i, false, obj, this.quickReplyShortcut, getQuickReplyId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$35(Object obj, boolean z, int i) {
        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of((String) obj, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, z, i, null, false));
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v21, types: [java.lang.CharSequence, android.text.SpannableString, android.text.Spannable] */
    public /* synthetic */ void lambda$createView$37(View view, int i) {
        Activity parentActivity;
        long j;
        AlertsCreator.ScheduleDatePickerDelegate scheduleDatePickerDelegate;
        Dialog create;
        StringBuilder sb;
        String str;
        ChatActivityEnterView chatActivityEnterView;
        ChatActivityEnterView chatActivityEnterView2;
        BlurredFrameLayout blurredFrameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        if (i == 0 || this.mentionContainer.getAdapter().isBannedInline()) {
            return;
        }
        int i2 = i - 1;
        final Object item = this.mentionContainer.getAdapter().getItem(i2);
        int resultStartPosition = this.mentionContainer.getAdapter().getResultStartPosition();
        int resultLength = this.mentionContainer.getAdapter().getResultLength();
        Paint.FontMetricsInt fontMetricsInt = null;
        if (!(item instanceof QuickRepliesController.QuickReply)) {
            if (item instanceof TLRPC.TL_document) {
                if (this.chatMode == 0 && checkSlowMode(view)) {
                    return;
                }
                MessageObject.SendAnimationData sendAnimationData = view instanceof StickerCell ? ((StickerCell) view).getSendAnimationData() : null;
                final TLRPC.TL_document tL_document = (TLRPC.TL_document) item;
                final Object itemParent = this.mentionContainer.getAdapter().getItemParent(i2);
                final String findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(tL_document);
                if (this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda267
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i3) {
                            ChatActivity.this.lambda$createView$34(tL_document, findAnimatedEmojiEmoticon, itemParent, z, i3);
                        }
                    }, this.themeDelegate);
                } else {
                    getSendMessagesHelper().sendSticker(tL_document, findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, sendAnimationData, true, 0, false, itemParent, this.quickReplyShortcut, getQuickReplyId());
                }
                hideFieldPanel(false);
                this.chatActivityEnterView.addStickerToRecent(tL_document);
                this.chatActivityEnterView.setFieldText("");
                return;
            } else if (item instanceof TLRPC.Chat) {
                TLRPC.Chat chat = (TLRPC.Chat) item;
                if (this.searchingForUser && (blurredFrameLayout2 = this.searchContainer) != null && blurredFrameLayout2.getVisibility() == 0) {
                    searchUserMessages(null, chat);
                    return;
                }
                String publicUsername = ChatObject.getPublicUsername(chat);
                if (publicUsername != null) {
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + publicUsername + " ", false);
                    return;
                }
                return;
            } else {
                if (!(item instanceof TLRPC.User)) {
                    if (item instanceof String) {
                        if (!this.mentionContainer.getAdapter().isBotCommands()) {
                            ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                            sb = new StringBuilder();
                            sb.append(item);
                            chatActivityEnterView2 = chatActivityEnterView3;
                        } else if (this.chatMode != 1) {
                            if (checkSlowMode(view)) {
                                return;
                            }
                            SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of((String) item, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, true, 0, null, false);
                            of.quick_reply_shortcut = this.quickReplyShortcut;
                            of.quick_reply_shortcut_id = getQuickReplyId();
                            getSendMessagesHelper().sendMessage(of);
                            this.chatActivityEnterView.setFieldText("");
                            hideFieldPanel(false);
                            return;
                        } else {
                            parentActivity = getParentActivity();
                            j = this.dialog_id;
                            scheduleDatePickerDelegate = new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda268
                                @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                                public final void didSelectDate(boolean z, int i3) {
                                    ChatActivity.this.lambda$createView$35(item, z, i3);
                                }
                            };
                        }
                    } else if (!(item instanceof TLRPC.BotInlineResult)) {
                        if (item instanceof TLRPC.TL_inlineBotWebView) {
                            processInlineBotWebView((TLRPC.TL_inlineBotWebView) item);
                            return;
                        } else if (item instanceof TLRPC.TL_inlineBotSwitchPM) {
                            processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM) item);
                            return;
                        } else if (item instanceof MediaDataController.KeywordResult) {
                            String str2 = ((MediaDataController.KeywordResult) item).emoji;
                            this.chatActivityEnterView.addEmojiToRecent(str2);
                            if (str2 != null) {
                                if (str2.startsWith("animated_")) {
                                    try {
                                        fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                                    } catch (Exception e) {
                                        FileLog.e((Throwable) e, false);
                                    }
                                    long parseLong = Long.parseLong(str2.substring(9));
                                    TLRPC.Document findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, parseLong);
                                    SpannableString spannableString = new SpannableString(MessageObject.findAnimatedEmojiEmoticon(findDocument));
                                    spannableString.setSpan(findDocument != null ? new AnimatedEmojiSpan(findDocument, fontMetricsInt) : new AnimatedEmojiSpan(parseLong, fontMetricsInt), 0, spannableString.length(), 33);
                                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString, false);
                                    this.mentionContainer.updateVisibility(false);
                                    return;
                                }
                            }
                            this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str2, true);
                            this.mentionContainer.updateVisibility(false);
                            return;
                        } else {
                            return;
                        }
                    } else if (this.chatActivityEnterView.getFieldText() == null) {
                        return;
                    } else {
                        if (this.chatMode != 1 && checkSlowMode(view)) {
                            return;
                        }
                        final TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) item;
                        if (this.currentEncryptedChat != null) {
                            char c = ((botInlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaAuto) && "game".equals(botInlineResult.type)) ? (char) 1 : botInlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaInvoice ? (char) 2 : (char) 0;
                            if (c != 0) {
                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                builder.setTitle(LocaleController.getString(R.string.SendMessageTitle));
                                builder.setMessage(LocaleController.getString(c == 1 ? R.string.GameCantSendSecretChat : R.string.InvoiceCantSendSecretChat));
                                builder.setNegativeButton(LocaleController.getString(R.string.OK), null);
                                create = builder.create();
                            }
                        }
                        if ((botInlineResult.type.equals("photo") && (botInlineResult.photo != null || botInlineResult.content != null)) || ((botInlineResult.type.equals("gif") && (botInlineResult.document != null || botInlineResult.content != null)) || (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && botInlineResult.document != null))) {
                            ArrayList arrayList = new ArrayList(this.mentionContainer.getAdapter().getSearchResultBotContext());
                            this.botContextResults = arrayList;
                            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                            PhotoViewer.getInstance().openPhotoForSelect(arrayList, this.mentionContainer.getAdapter().getItemPosition(i2), 3, false, this.botContextProvider, this);
                            return;
                        } else if (this.chatMode != 1) {
                            lambda$createView$36(botInlineResult, true, 0);
                            return;
                        } else {
                            parentActivity = getParentActivity();
                            j = this.dialog_id;
                            scheduleDatePickerDelegate = new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda269
                                @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                                public final void didSelectDate(boolean z, int i3) {
                                    ChatActivity.this.lambda$createView$36(botInlineResult, z, i3);
                                }
                            };
                        }
                    }
                    AlertsCreator.createScheduleDatePickerDialog(parentActivity, j, scheduleDatePickerDelegate, this.themeDelegate);
                    return;
                }
                TLRPC.User user = (TLRPC.User) item;
                if (this.searchingForUser && (blurredFrameLayout = this.searchContainer) != null && blurredFrameLayout.getVisibility() == 0) {
                    searchUserMessages(user, null);
                    return;
                } else if (UserObject.getPublicUsername(user) == null) {
                    ?? spannableString2 = new SpannableString(UserObject.getFirstName(user, false) + " ");
                    spannableString2.setSpan(new URLSpanUserMention("" + user.id, 3), 0, spannableString2.length(), 33);
                    chatActivityEnterView = this.chatActivityEnterView;
                    str = spannableString2;
                    chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, false);
                    return;
                } else {
                    ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                    sb = new StringBuilder();
                    sb.append("@");
                    sb.append(UserObject.getPublicUsername(user));
                    chatActivityEnterView2 = chatActivityEnterView4;
                }
                sb.append(" ");
                chatActivityEnterView = chatActivityEnterView2;
                str = sb.toString();
                chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, false);
                return;
            }
        } else if (getUserConfig().isPremium()) {
            TLRPC.TL_messages_sendQuickReplyMessages tL_messages_sendQuickReplyMessages = new TLRPC.TL_messages_sendQuickReplyMessages();
            tL_messages_sendQuickReplyMessages.peer = getMessagesController().getInputPeer(this.dialog_id);
            tL_messages_sendQuickReplyMessages.shortcut_id = ((QuickRepliesController.QuickReply) item).id;
            getConnectionsManager().sendRequest(tL_messages_sendQuickReplyMessages, null);
            ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
            if (chatActivityEnterView5 != null) {
                chatActivityEnterView5.setFieldText(null);
                return;
            }
            return;
        } else {
            create = new PremiumFeatureBottomSheet(this, getContext(), this.currentAccount, true, 31, false, null);
        }
        showDialog(create);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$38(DialogInterface dialogInterface, int i) {
        this.mentionContainer.getAdapter().clearRecentHashtags();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$39(View view, int i) {
        boolean z = false;
        if (getParentActivity() != null && this.mentionContainer.getAdapter().isLongClickEnabled() && i != 0 && !this.mentionContainer.getAdapter().isBannedInline()) {
            Object item = this.mentionContainer.getAdapter().getItem(i - 1);
            if (item instanceof String) {
                if (!this.mentionContainer.getAdapter().isBotCommands()) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setTitle(LocaleController.getString(R.string.AppName));
                    builder.setMessage(LocaleController.getString(R.string.ClearSearch));
                    builder.setPositiveButton(LocaleController.getString(R.string.ClearButton), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda251
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.lambda$createView$38(dialogInterface, i2);
                        }
                    });
                    builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                    showDialog(builder.create());
                    return true;
                } else if (URLSpanBotCommand.enabled) {
                    this.chatActivityEnterView.setFieldText("");
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    String str = (String) item;
                    TLRPC.Chat chat = this.currentChat;
                    if (chat != null && chat.megagroup) {
                        z = true;
                    }
                    chatActivityEnterView.setCommand(null, str, true, z);
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$40(Integer num) {
        if (num.intValue() != 0) {
            updateReactionsMentionButton(true);
            scrollToMessageId(num.intValue(), 0, false, 0, true, 0);
            return;
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$41(View view) {
        this.wasManualScroll = true;
        getMessagesController().getNextReactionMention(this.dialog_id, getTopicId(), this.reactionsMentionCount, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda275
            @Override // androidx.core.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.this.lambda$createView$40((Integer) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$42() {
        for (int i = 0; i < this.messages.size(); i++) {
            ((MessageObject) this.messages.get(i)).markReactionsAsRead();
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$43() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$44(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(0, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda200
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$42();
            }
        });
        dimBehindView((View) this.reactionsMentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda201
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$43();
            }
        });
        view.performHapticFeedback(0, 2);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$45(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$46() {
        AlertDialog alertDialog = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
        this.progressDialog = alertDialog;
        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda369
            @Override // android.content.DialogInterface.OnShowListener
            public final void onShow(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$createView$45(dialogInterface);
            }
        });
        this.progressDialog.setOnCancelListener(this.postponedScrollCancelListener);
        this.progressDialog.showDelayed(500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$47(MessageObject messageObject) {
        scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda352
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$46();
            }
        });
        if (this.waitingForLoad.isEmpty()) {
            showMessagesSearchListView(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$48(View view, int i) {
        if (this.chatMode == 7) {
            Object item = this.messagesSearchAdapter.getItem(i);
            if (i != 0 || !this.messagesSearchAdapter.containsStories) {
                if (item instanceof MessageObject) {
                    openMessageInOriginalDialog((MessageObject) item);
                    return;
                }
                return;
            }
            Bundle bundle = new Bundle();
            bundle.putInt("type", 3);
            bundle.putString("hashtag", this.messagesSearchAdapter.storiesList.query);
            bundle.putInt("storiesCount", this.messagesSearchAdapter.storiesList.getCount());
            presentFragment(new MediaActivity(bundle, null));
        } else if (this.searchingReaction == null) {
            getMediaDataController().jumpToSearchedMessage(this.classGuid, i);
            showMessagesSearchListView(false);
        } else if (i < 0 || i >= getMediaDataController().searchResultMessages.size()) {
        } else {
            final MessageObject messageObject = getMediaDataController().searchResultMessages.get(i);
            this.searchingFiltered = false;
            setFilterMessages(false, true, false);
            getMediaDataController().setSearchedPosition(i);
            updateSearchButtons(getMediaDataController().getMask(), getMediaDataController().getSearchPosition(), getMediaDataController().getSearchCount());
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda265
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$47(messageObject);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$49(View view, MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            checkRecordLocked(false);
        }
        this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createView$50(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$51(View view) {
        MessageObject messageObject;
        MessageObject messageObject2;
        int i = this.fieldPanelShown;
        if (i != 1 || (messageObject2 = this.editingMessageObject) == null) {
            if (this.messagePreviewParams == null) {
                return;
            }
            this.forbidForwardingWithDismiss = false;
            if (i != 2) {
                if (i == 3) {
                    SharedConfig.forwardingOptionsHintHintShowed();
                    openForwardingPreview(1);
                    return;
                } else if (i == 4) {
                    openForwardingPreview(2);
                    return;
                } else {
                    return;
                }
            }
            if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
                MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                if (!messagePreviewParams.hasSecretMessages && this.chatMode != 5) {
                    this.forbidForwardingWithDismiss = messagePreviewParams.quote == null;
                    SharedConfig.replyingOptionsHintHintShowed();
                    openForwardingPreview(0);
                    return;
                }
            }
            messageObject = this.replyingMessageObject;
            if (messageObject == null) {
                return;
            }
        } else if (messageObject2.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (this.chatAttachAlert == null) {
                createChatAttachView();
            }
            this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
            openAttachMenu();
            return;
        } else {
            messageObject = this.editingMessageObject;
        }
        scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$52(View view) {
        MessageObject messageObject;
        MessageObject messageObject2;
        int i = this.fieldPanelShown;
        if (i == 1 && (messageObject2 = this.editingMessageObject) != null) {
            scrollToMessageId(messageObject2.getId(), 0, true, 0, true, 0);
            return true;
        } else if (this.messagePreviewParams == null || i != 2 || (messageObject = this.replyingMessageObject) == null) {
            return false;
        } else {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
            return true;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$53(View view) {
        MessageObject messageObject;
        int i = this.fieldPanelShown;
        if (i == 2) {
            this.replyingQuote = null;
            this.replyingMessageObject = null;
            MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.updateReply(null, null, this.dialog_id, null);
            }
        } else if (i == 3) {
            openAnotherForward();
            return;
        } else if (i != 4) {
            if (ChatObject.isForum(this.currentChat) && !this.isTopic && (messageObject = this.replyingMessageObject) != null) {
                long topicId = MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true);
                if (topicId != 0) {
                    getMediaDataController().cleanDraft(this.dialog_id, topicId, false);
                }
            }
            showFieldPanel(false, null, null, null, null, true, 0, null, true, true);
            return;
        } else {
            this.foundWebPage = null;
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 != null) {
                int i2 = this.currentAccount;
                MessageObject messageObject2 = this.replyingMessageObject;
                messagePreviewParams2.updateLink(i2, null, null, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
            }
            this.chatActivityEnterView.setWebPage(null, false);
            editResetMediaManual();
        }
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$54(View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null) {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$55(ChatActivityEnterTopView.EditViewButton editViewButton, FrameLayout frameLayout, View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (editViewButton.isEditButton()) {
                openEditingMessageInPhotoEditor();
            } else {
                frameLayout.callOnClick();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$56(View view) {
        this.bottomOverlayChatText.callOnClick();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$57(Boolean bool) {
        showBottomOverlayProgress(true, false);
        if (bool.booleanValue()) {
            lambda$onBackPressed$300();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$58(String str) {
        if (str == null || str.length() == 0) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
        } else {
            getMessagesController().sendBotStart(this.currentUser, str);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$59(DialogInterface dialogInterface, int i) {
        getMessagesController().unblockPeer(this.currentUser.id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$60() {
        showBottomOverlayProgress(false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$61(Context context, TLRPC.TL_error tL_error) {
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putLong("dialog_join_requested_time_" + this.dialog_id, System.currentTimeMillis()).commit();
        if (tL_error != null && "INVITE_REQUEST_SENT".equals(tL_error.text)) {
            JoinGroupAlert.showBulletin(context, this, ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup);
        }
        showBottomOverlayProgress(false, true);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$62(boolean z) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.closeChats;
        notificationCenter.removeObserver(this, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i, new Object[0]);
        lambda$onBackPressed$300();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needDeleteDialog, Long.valueOf(this.dialog_id), this.currentUser, this.currentChat, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$63(final Context context, View view) {
        String str;
        String str2;
        if (getParentActivity() == null || this.pullingDownOffset != 0.0f) {
            return;
        }
        if (this.chatMode == 3) {
            Bundle bundle = new Bundle();
            long savedDialogId = getSavedDialogId();
            if (savedDialogId >= 0) {
                str2 = "user_id";
            } else {
                savedDialogId = -savedDialogId;
                str2 = "chat_id";
            }
            bundle.putLong(str2, savedDialogId);
            presentFragment(new ChatActivity(bundle));
        } else if (isReport()) {
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < this.selectedMessagesIds[0].size(); i++) {
                arrayList.add(Integer.valueOf(this.selectedMessagesIds[0].keyAt(i)));
            }
            showBottomOverlayProgress(true, true);
            ReportBottomSheet.continueReport(this, this.reportOption, arrayList, new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda208
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    ChatActivity.this.lambda$createView$57((Boolean) obj);
                }
            });
        } else if (this.chatMode == 2) {
            lambda$onBackPressed$300();
            this.chatActivityDelegate.onUnpin(true, this.bottomOverlayChatText.getTag() == null);
        } else {
            TLRPC.User user = this.currentUser;
            if (user == null || user.id != UserObject.VERIFY) {
                if (user != null && this.userBlocked) {
                    if (user.bot) {
                        final String str3 = this.botUser;
                        this.botUser = null;
                        getMessagesController().unblockPeer(this.currentUser.id, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda209
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$createView$58(str3);
                            }
                        });
                        return;
                    }
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setMessage(LocaleController.getString(R.string.AreYouSureUnblockContact));
                    builder.setPositiveButton(LocaleController.getString(R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda210
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.lambda$createView$59(dialogInterface, i2);
                        }
                    });
                    builder.setTitle(LocaleController.getString(R.string.AppName));
                    builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                    showDialog(builder.create());
                    return;
                } else if (!UserObject.isReplyUser(user)) {
                    TLRPC.User user2 = this.currentUser;
                    if (user2 != null && user2.bot && (str = this.botUser) != null) {
                        if (str.length() != 0) {
                            getMessagesController().sendBotStart(this.currentUser, this.botUser);
                        } else {
                            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
                        }
                        this.botUser = null;
                        updateBottomOverlay();
                        return;
                    }
                    if (ChatObject.isChannel(this.currentChat)) {
                        TLRPC.Chat chat = this.currentChat;
                        if (!(chat instanceof TLRPC.TL_channelForbidden)) {
                            if (ChatObject.isNotInChat(chat)) {
                                if (this.currentChat.join_request) {
                                    showBottomOverlayProgress(true, true);
                                    MessagesController.getInstance(this.currentAccount).addUserToChat(this.currentChat.id, UserConfig.getInstance(this.currentAccount).getCurrentUser(), 0, null, null, true, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda211
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            ChatActivity.this.lambda$createView$60();
                                        }
                                    }, new MessagesController.ErrorDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda212
                                        @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                                        public final boolean run(TLRPC.TL_error tL_error) {
                                            boolean lambda$createView$61;
                                            lambda$createView$61 = ChatActivity.this.lambda$createView$61(context, tL_error);
                                            return lambda$createView$61;
                                        }
                                    });
                                    return;
                                }
                                Runnable runnable = this.chatInviteRunnable;
                                if (runnable != null) {
                                    AndroidUtilities.cancelRunOnUIThread(runnable);
                                    this.chatInviteRunnable = null;
                                }
                                showBottomOverlayProgress(true, true);
                                getMessagesController().addUserToChat(this.currentChat.id, getUserConfig().getCurrentUser(), 0, null, this, null);
                                NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                                if (!hasReportSpam() || this.reportSpamButton.getTag(R.id.object_tag) == null) {
                                    return;
                                }
                                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                                edit.putInt("dialog_bar_vis3" + this.dialog_id, 3).commit();
                                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(this.dialog_id));
                                return;
                            }
                        }
                    }
                    TLRPC.ChatFull chatFull = this.chatInfo;
                    AlertsCreator.createClearOrDeleteDialogAlert(this, false, this.currentChat, this.currentUser, this.currentEncryptedChat != null, true, chatFull != null && chatFull.can_delete_channel, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda213
                        @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                        public final void run(boolean z) {
                            ChatActivity.this.lambda$createView$62(z);
                        }
                    }, this.themeDelegate);
                    return;
                }
            }
            toggleMute(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$64(View view) {
        createUndoView();
        this.undoView.showWithAction(this.dialog_id, 18, LocaleController.getString(R.string.BroadcastGroupInfo));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$65() {
        return this.currentEncryptedChat != null || getMessagesController().isChatNoForwards(this.currentChat);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$66(float[] fArr) {
        fArr[1] = this.chatListView.getBottom() - this.blurredViewBottomOffset;
        fArr[0] = (this.chatListView.getTop() + this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$67() {
        HintView2 hintView2;
        BlurredFrameLayout blurredFrameLayout = this.searchContainer;
        if ((blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) && (hintView2 = this.savedMessagesSearchHint) != null) {
            hintView2.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$2() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$3(int i, int i2, boolean z) {
        getMessagesController().deleteMessagesRange(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.dialog_id : 0L, i, i2, z, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda376
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$2();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$4() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCard$346(ScrimOptions scrimOptions, String str) {
        scrimOptions.dismiss();
        AndroidUtilities.addToClipboard(str);
        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString(R.string.CardNumberCopied)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCard$347(TLRPC.TL_bankCardOpenUrl tL_bankCardOpenUrl) {
        Browser.openUrl(getContext(), tL_bankCardOpenUrl.url, this.inlineReturn == 0, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCard$348(Browser.Progress progress, ChatMessageCell chatMessageCell, final String str, TLObject tLObject, CharacterStyle characterStyle) {
        progress.end();
        ItemOptions makeOptions = ItemOptions.makeOptions((BaseFragment) this, (View) chatMessageCell, true);
        final ScrimOptions scrimOptions = new ScrimOptions(getContext(), this.themeDelegate);
        makeOptions.setOnDismiss(new ChatActivity$$ExternalSyntheticLambda32(scrimOptions));
        makeOptions.add(R.drawable.msg_copy, LocaleController.getString(R.string.CopyCardNumber), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda312
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressCard$346(scrimOptions, str);
            }
        });
        if (tLObject instanceof TLRPC.TL_payments_bankCardData) {
            TLRPC.TL_payments_bankCardData tL_payments_bankCardData = (TLRPC.TL_payments_bankCardData) tLObject;
            Iterator<TLRPC.TL_bankCardOpenUrl> it = tL_payments_bankCardData.open_urls.iterator();
            while (it.hasNext()) {
                final TLRPC.TL_bankCardOpenUrl next = it.next();
                makeOptions.add(R.drawable.msg_payment_card, next.name, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda313
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$didLongPressCard$347(next);
                    }
                });
            }
            if (!TextUtils.isEmpty(tL_payments_bankCardData.title)) {
                makeOptions.addGap();
                makeOptions.addText(tL_payments_bankCardData.title, 13, AndroidUtilities.dp(200.0f));
            }
        }
        scrimOptions.setItemOptions(makeOptions);
        scrimOptions.setScrim(chatMessageCell, characterStyle, null);
        showDialog(scrimOptions);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCard$349(final Browser.Progress progress, final ChatMessageCell chatMessageCell, final String str, final CharacterStyle characterStyle, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda306
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressCard$348(progress, chatMessageCell, str, tLObject, characterStyle);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCard$350(int i) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressCopyButton$365(String str, DialogInterface dialogInterface, int i) {
        AndroidUtilities.addToClipboard(str);
        BulletinFactory.of(this).createCopyBulletin(LocaleController.formatString(R.string.ExactTextCopied, str)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressLink$342(String str, CharacterStyle characterStyle, MessageObject messageObject, ChatMessageCell chatMessageCell, boolean z, boolean z2) {
        if (str.startsWith("video?")) {
            didPressMessageUrl(characterStyle, false, messageObject, chatMessageCell);
        } else if (z && !z2) {
            Browser.openInTelegramBrowser(getParentActivity(), str, null);
        } else {
            logSponsoredClicked(messageObject, false, false);
            openClickableLink(characterStyle, str, false, chatMessageCell, messageObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressLink$343(String str) {
        Browser.openInExternalBrowser(getParentActivity(), str, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressLink$344(MessageObject messageObject) {
        TLRPC.WebPage webPage;
        TLRPC.MessageMedia messageMedia = messageObject.messageOwner.media;
        if (messageMedia == null || (webPage = messageMedia.webpage) == null || webPage.cached_page == null) {
            return;
        }
        LaunchActivity launchActivity = LaunchActivity.instance;
        if (launchActivity == null || launchActivity.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(messageObject) == null) {
            createArticleViewer(false).open(messageObject);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00dd A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00de  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$didLongPressLink$345(String str, MessageObject messageObject, boolean z) {
        String substring;
        UndoView undoView;
        int i;
        String publicUsername;
        StringBuilder sb;
        MessageObject messageObject2;
        if (str.startsWith("video?") && messageObject != null && !messageObject.scheduled) {
            if (!messageObject.isVideo() && !messageObject.isRoundVideo() && !messageObject.isVoice() && !messageObject.isMusic() && (messageObject2 = messageObject.replyMessageObject) != null) {
                messageObject = messageObject2;
            }
            long dialogId = messageObject.getDialogId();
            int id = messageObject.getId();
            TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
            if (messageFwdHeader != null) {
                TLRPC.Peer peer = messageFwdHeader.saved_from_peer;
                if (peer != null) {
                    dialogId = MessageObject.getPeerId(peer);
                    id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                } else {
                    TLRPC.Peer peer2 = messageFwdHeader.from_id;
                    if (peer2 != null) {
                        dialogId = MessageObject.getPeerId(peer2);
                        id = messageObject.messageOwner.fwd_from.channel_post;
                    }
                }
            }
            int intValue = str.startsWith("video?") ? Utilities.parseInt((CharSequence) str).intValue() : -1;
            if (DialogObject.isChatDialog(dialogId)) {
                TLRPC.Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId));
                publicUsername = ChatObject.getPublicUsername(chat);
                if (chat != null && publicUsername != null) {
                    sb = new StringBuilder();
                    sb.append("https://t.me/");
                    sb.append(publicUsername);
                    sb.append("/");
                    sb.append(id);
                    sb.append("?t=");
                    sb.append(intValue);
                    substring = sb.toString();
                }
                substring = null;
            } else {
                TLRPC.User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                publicUsername = UserObject.getPublicUsername(user);
                if (user != null && publicUsername != null) {
                    sb = new StringBuilder();
                    sb.append("https://t.me/");
                    sb.append(publicUsername);
                    sb.append("/");
                    sb.append(id);
                    sb.append("?t=");
                    sb.append(intValue);
                    substring = sb.toString();
                }
                substring = null;
            }
            if (substring == null) {
                return;
            }
        } else if (!z) {
            AndroidUtilities.addToClipboard(str);
            createUndoView();
            if (this.undoView != null) {
                return;
            }
            if (str.startsWith("@")) {
                undoView = this.undoView;
                i = 56;
            } else if (str.startsWith("#") || str.startsWith("$")) {
                undoView = this.undoView;
                i = 57;
            } else {
                undoView = this.undoView;
                i = 59;
            }
            undoView.showWithAction(0L, i, (Runnable) null);
            return;
        } else {
            substring = str.substring(7);
        }
        AndroidUtilities.addToClipboard(substring);
        createUndoView();
        if (this.undoView != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$351(long j) {
        presentFragment(of(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$352(ScrimOptions scrimOptions, String str) {
        scrimOptions.dismiss();
        AndroidUtilities.addToClipboard("@" + str);
        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString(R.string.UsernameCopied)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$353(String str) {
        Context context = getContext();
        Browser.openUrl(context, "https://fragment.com/username/" + str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$354(long j) {
        presentFragment(ProfileActivity.of(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$355(Browser.Progress progress, ChatMessageCell chatMessageCell, final String str, CharacterStyle characterStyle, TLObject tLObject, Boolean bool) {
        final long j;
        boolean z;
        progress.end();
        boolean z2 = false;
        if (tLObject instanceof TLRPC.User) {
            j = ((TLRPC.User) tLObject).id;
            z = true;
        } else {
            if (tLObject instanceof TLRPC.Chat) {
                TLRPC.Chat chat = (TLRPC.Chat) tLObject;
                j = -chat.id;
                z2 = ChatObject.isChannelAndNotMegaGroup(chat);
            } else {
                j = 0;
            }
            z = false;
        }
        ItemOptions makeOptions = ItemOptions.makeOptions((BaseFragment) this, (View) chatMessageCell, true);
        final ScrimOptions scrimOptions = new ScrimOptions(getContext(), this.themeDelegate);
        makeOptions.setOnDismiss(new ChatActivity$$ExternalSyntheticLambda32(scrimOptions));
        if (j != 0) {
            makeOptions.add(z2 ? R.drawable.msg_channel : R.drawable.msg_discussion, LocaleController.getString(z2 ? R.string.ViewChannel : R.string.SendMessage), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda333
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressUsername$351(j);
                }
            });
        }
        makeOptions.add(R.drawable.msg_copy, LocaleController.getString(R.string.ProfileCopyUsername), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda334
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressUsername$352(scrimOptions, str);
            }
        });
        if (bool.booleanValue()) {
            makeOptions.add(R.drawable.msg_ton, LocaleController.getString(R.string.BuyUsernameOnFragment), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda335
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressUsername$353(str);
                }
            });
        }
        makeOptions.addGap();
        if (j != 0) {
            makeOptions.addProfile(tLObject, LocaleController.getString(z ? R.string.ViewProfile : z2 ? R.string.ViewChannelProfile : R.string.ViewGroupProfile), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda336
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressUsername$354(j);
                }
            });
        } else {
            makeOptions.addText(LocaleController.getString(R.string.NoUsernameFound2), 13, AndroidUtilities.dp(200.0f));
        }
        scrimOptions.setItemOptions(makeOptions);
        scrimOptions.setScrim(chatMessageCell, characterStyle, null);
        showDialog(scrimOptions);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$356(Browser.Progress progress, TLObject tLObject, Utilities.Callback2 callback2, boolean z) {
        TLObject tLObject2;
        progress.end();
        if (tLObject instanceof TLRPC.TL_contacts_resolvedPeer) {
            TLRPC.TL_contacts_resolvedPeer tL_contacts_resolvedPeer = (TLRPC.TL_contacts_resolvedPeer) tLObject;
            getMessagesController().putUsers(tL_contacts_resolvedPeer.users, false);
            getMessagesController().putChats(tL_contacts_resolvedPeer.chats, false);
            long peerDialogId = DialogObject.getPeerDialogId(tL_contacts_resolvedPeer.peer);
            if (peerDialogId >= 0) {
                tLObject2 = getMessagesController().getUser(Long.valueOf(peerDialogId));
            } else if (peerDialogId < 0) {
                tLObject2 = getMessagesController().getChat(Long.valueOf(-peerDialogId));
            }
            callback2.run(tLObject2, Boolean.valueOf(z));
        }
        tLObject2 = null;
        callback2.run(tLObject2, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$357(final Browser.Progress progress, final Utilities.Callback2 callback2, final boolean z, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda384
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressUsername$356(progress, tLObject, callback2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$358(int i) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$359(TLRPC.TL_error tL_error, TLObject tLObject, TLObject tLObject2, final Utilities.Callback2 callback2, String str, final Browser.Progress progress) {
        final boolean z = tL_error != null && "USERNAME_PURCHASE_AVAILABLE".equals(tL_error.text);
        if (tLObject != null || (tL_error == null && (tLObject2 instanceof TLRPC.TL_boolTrue))) {
            callback2.run(tLObject, Boolean.valueOf(z));
            return;
        }
        TLRPC.TL_contacts_resolveUsername tL_contacts_resolveUsername = new TLRPC.TL_contacts_resolveUsername();
        tL_contacts_resolveUsername.username = str;
        final int sendRequest = getConnectionsManager().sendRequest(tL_contacts_resolveUsername, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda365
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject3, TLRPC.TL_error tL_error2) {
                ChatActivity.this.lambda$didLongPressUsername$357(progress, callback2, z, tLObject3, tL_error2);
            }
        });
        progress.onCancel(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda366
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressUsername$358(sendRequest);
            }
        });
        progress.init();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$360(final TLObject tLObject, final Utilities.Callback2 callback2, final String str, final Browser.Progress progress, final TLObject tLObject2, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda356
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressUsername$359(tL_error, tLObject, tLObject2, callback2, str, progress);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didLongPressUsername$361(int i) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$366(TLRPC.User user, String str, Boolean bool) {
        Intent intent;
        String str2;
        String country;
        Object systemService;
        if (getParentActivity() == null) {
            return;
        }
        if (bool.booleanValue()) {
            intent = new Intent("android.intent.action.INSERT");
            str2 = "vnd.android.cursor.dir/raw_contact";
        } else {
            intent = new Intent("android.intent.action.INSERT_OR_EDIT");
            str2 = "vnd.android.cursor.item/contact";
        }
        intent.setType(str2);
        if (user != null) {
            intent.putExtra("name", ContactsController.formatName(user.first_name, user.last_name));
        }
        ArrayList<? extends Parcelable> arrayList = new ArrayList<>();
        ContentValues contentValues = new ContentValues();
        contentValues.put("mimetype", "vnd.android.cursor.item/phone_v2");
        if (!str.startsWith("+")) {
            TLRPC.User currentUser = getUserConfig().getCurrentUser();
            HashMap hashMap = new HashMap();
            boolean z = false;
            try {
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt")));
                while (true) {
                    String readLine = bufferedReader.readLine();
                    if (readLine == null) {
                        break;
                    }
                    String[] split = readLine.split(";");
                    CountrySelectActivity.Country country2 = new CountrySelectActivity.Country();
                    country2.name = split[2];
                    String str3 = split[0];
                    country2.code = str3;
                    country2.shortname = split[1];
                    List list = (List) hashMap.get(str3);
                    if (list == null) {
                        String str4 = split[0];
                        list = new ArrayList();
                        hashMap.put(str4, list);
                    }
                    list.add(country2);
                }
                bufferedReader.close();
            } catch (Exception e) {
                FileLog.e(e);
            }
            String str5 = currentUser.phone;
            int i = 4;
            while (true) {
                if (i < 1) {
                    break;
                }
                List list2 = (List) hashMap.get(str5.substring(0, i));
                if (list2 == null || list2.size() <= 0) {
                    i--;
                } else {
                    String str6 = ((CountrySelectActivity.Country) list2.get(0)).code;
                    if (str6.endsWith("0") && str.startsWith("0")) {
                        str = str.substring(1);
                    }
                    str = "+" + str6 + str;
                    z = true;
                }
            }
            if (!z && Build.VERSION.SDK_INT >= 23) {
                Context context = ApplicationLoader.applicationContext;
                if (context != null) {
                    systemService = context.getSystemService(TelephonyManager.class);
                    country = ((TelephonyManager) systemService).getSimCountryIso().toUpperCase(Locale.US);
                } else {
                    country = Locale.getDefault().getCountry();
                }
                if (country.endsWith("0") && str.startsWith("0")) {
                    str = str.substring(1);
                }
                str = "+" + country + str;
            }
        }
        contentValues.put("data1", str);
        contentValues.put("data2", (Integer) 2);
        arrayList.add(contentValues);
        intent.putExtra("finishActivityOnSaveCompleted", true);
        intent.putParcelableArrayListExtra("data", arrayList);
        getParentActivity().startActivity(intent);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$367(ItemOptions itemOptions, String str) {
        itemOptions.dismiss();
        new NewContactBottomSheet(this, getContext()).setInitialPhoneNumber(str, false).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didPressPhoneNumber$368(Utilities.Callback callback) {
        callback.run(Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$370(String str) {
        if (getParentActivity() == null) {
            return;
        }
        try {
            Intent intent = new Intent("android.intent.action.VIEW", Uri.fromParts("sms", str, null));
            intent.putExtra("sms_body", ContactsController.getInstance(this.currentAccount).getInviteText(1));
            getParentActivity().startActivityForResult(intent, 500);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$371(String str) {
        Context context = getContext();
        Browser.openUrl(context, "tel:" + str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$372(String str) {
        AndroidUtilities.addToClipboard(str);
        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString(R.string.PhoneCopied)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$373(TLRPC.User user) {
        presentFragment(of(user.id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$374(TLRPC.User user, TLRPC.UserFull userFull) {
        VoIPHelper.startCall(user, false, userFull != null && userFull.video_calls_available, getParentActivity(), userFull, getAccountInstance());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$375(TLRPC.User user, TLRPC.UserFull userFull) {
        VoIPHelper.startCall(user, true, userFull != null && userFull.video_calls_available, getParentActivity(), userFull, getAccountInstance());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$376(String str) {
        Context context = getContext();
        Browser.openUrl(context, "tel:" + str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$377(String str) {
        AndroidUtilities.addToClipboard(str);
        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString(R.string.PhoneCopied)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$378(ScrimOptions scrimOptions, TLRPC.User user) {
        scrimOptions.dismiss();
        presentFragment(ProfileActivity.of(user.id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$379(ChatMessageCell chatMessageCell, final String str, TLRPC.TL_contact tL_contact, CharacterStyle characterStyle, final TLRPC.User user) {
        final TLRPC.UserFull userFull = user != null ? getMessagesController().getUserFull(user.id) : null;
        final ItemOptions makeOptions = ItemOptions.makeOptions((BaseFragment) this, (View) chatMessageCell, true);
        final ScrimOptions scrimOptions = new ScrimOptions(getContext(), this.themeDelegate);
        makeOptions.setOnDismiss(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda228
            @Override // java.lang.Runnable
            public final void run() {
                ScrimOptions.this.dismiss();
            }
        });
        final Utilities.Callback callback = new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda234
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                ChatActivity.this.lambda$didPressPhoneNumber$366(user, str, (Boolean) obj);
            }
        };
        final ItemOptions makeSwipeback = makeOptions.makeSwipeback();
        makeSwipeback.add(R.drawable.ic_ab_back, LocaleController.getString(R.string.Back), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                ItemOptions.this.closeSwipeback();
            }
        });
        makeSwipeback.addGap();
        makeSwipeback.add(R.drawable.msg_addbot, LocaleController.getString(R.string.CreateNewContact), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda236
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didPressPhoneNumber$367(makeOptions, str);
            }
        });
        makeSwipeback.add(R.drawable.menu_contact_existing, LocaleController.getString(R.string.AddToExistingContact), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda237
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$didPressPhoneNumber$368(Utilities.Callback.this);
            }
        });
        if (tL_contact == null && (user == null || !getContactsController().contactsDict.containsKey(Long.valueOf(user.id)))) {
            makeOptions.add(R.drawable.msg_contact_add, LocaleController.getString(R.string.AddToContacts), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda238
                @Override // java.lang.Runnable
                public final void run() {
                    ItemOptions.this.openSwipeback(makeSwipeback);
                }
            });
            makeOptions.addGap();
        }
        if (user == null) {
            makeOptions.add(R.drawable.menu_invit_telegram, LocaleController.getString(R.string.InviteToTelegramShort), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda239
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$370(str);
                }
            });
            makeOptions.add(R.drawable.msg_calls_regular, LocaleController.getString(R.string.VoiceCallViaCarrier), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda240
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$371(str);
                }
            });
            makeOptions.add(R.drawable.msg_copy, LocaleController.getString(R.string.CopyNumber), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda241
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$372(str);
                }
            });
            makeOptions.addGap();
            makeOptions.addText(LocaleController.getString(R.string.NumberNotOnTelegram), 13);
        } else {
            makeOptions.add(R.drawable.msg_discussion, LocaleController.getString(R.string.SendMessage), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda242
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$373(user);
                }
            });
            if (!UserObject.isUserSelf(user)) {
                makeOptions.add(R.drawable.msg_calls, LocaleController.getString(R.string.VoiceCallViaTelegram), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda229
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$didPressPhoneNumber$374(user, userFull);
                    }
                });
                makeOptions.add(R.drawable.msg_videocall, LocaleController.getString(R.string.VideoCallViaTelegram), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda230
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$didPressPhoneNumber$375(user, userFull);
                    }
                });
            }
            makeOptions.add(R.drawable.msg_calls_regular, LocaleController.getString(R.string.VoiceCallViaCarrier), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda231
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$376(str);
                }
            });
            makeOptions.add(R.drawable.msg_copy, LocaleController.getString(R.string.CopyNumber), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda232
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$377(str);
                }
            });
            makeOptions.addGap();
            makeOptions.addProfile(user, LocaleController.getString(R.string.ViewProfile), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda233
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didPressPhoneNumber$378(scrimOptions, user);
                }
            });
        }
        scrimOptions.setItemOptions(makeOptions);
        scrimOptions.setScrim(chatMessageCell, characterStyle, null);
        showDialog(scrimOptions);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$381(TLRPC.TL_contact tL_contact, final Utilities.Callback callback) {
        final TLRPC.User user = getMessagesStorage().getUser(tL_contact.user_id);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda216
            @Override // java.lang.Runnable
            public final void run() {
                Utilities.Callback.this.run(user);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$382(Browser.Progress progress, TLObject tLObject, Utilities.Callback callback) {
        TLRPC.User user;
        progress.end();
        if (tLObject instanceof TLRPC.TL_contacts_resolvedPeer) {
            TLRPC.TL_contacts_resolvedPeer tL_contacts_resolvedPeer = (TLRPC.TL_contacts_resolvedPeer) tLObject;
            getMessagesController().putUsers(tL_contacts_resolvedPeer.users, false);
            getMessagesController().putChats(tL_contacts_resolvedPeer.chats, false);
            long peerDialogId = DialogObject.getPeerDialogId(tL_contacts_resolvedPeer.peer);
            if (peerDialogId >= 0) {
                user = getMessagesController().getUser(Long.valueOf(peerDialogId));
                callback.run(user);
            }
        }
        user = null;
        callback.run(user);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$383(final Browser.Progress progress, final Utilities.Callback callback, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda301
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didPressPhoneNumber$382(progress, tLObject, callback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressPhoneNumber$384(int i) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$153() {
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$154() {
        createEmptyView(false);
        if (this.fragmentBeginToShow) {
            this.chatListView.setEmptyView(this.emptyViewContainer);
            return;
        }
        this.chatListView.setAnimateEmptyView(false, 0);
        this.chatListView.setEmptyView(this.emptyViewContainer);
        this.chatListView.setAnimateEmptyView(true, 1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$155() {
        resumeDelayedFragmentAnimation();
        AndroidUtilities.cancelRunOnUIThread(this.fragmentTransitionRunnable);
        this.fragmentTransitionRunnable.run();
        getNotificationCenter().runDelayedNotifications();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$156(Object[] objArr, StickersAlert stickersAlert, boolean z, TLRPC.StickerSet stickerSet, DialogInterface dialogInterface) {
        if (objArr.length > 2) {
            Object obj = objArr[2];
            if (obj instanceof TLRPC.Document) {
                TLRPC.Document document = (TLRPC.Document) obj;
                if (objArr.length > 3) {
                    Object obj2 = objArr[3];
                    if (obj2 instanceof String) {
                        document.localThumbPath = (String) obj2;
                    }
                }
                BulletinFactory.of(stickersAlert.container, this.resourceProvider).createEmojiBulletin(document, LocaleController.formatString(z ? R.string.StickersStickerEditedInSetToast : R.string.StickersStickerAddedToSetToast, stickerSet.title)).setDuration(2750).show(true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$157(MessageObject messageObject, int i) {
        this.delayedReadRunnable = null;
        messageObject.messageOwner.replies.read_max_id = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$158() {
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString(R.string.BoostingRemoveRestrictionsSuccessTitle), LocaleController.getString(R.string.BoostingRemoveRestrictionsSuccessSubTitle)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$159(ChannelBoostsController.CanApplyBoost canApplyBoost) {
        this.canApplyBoosts = canApplyBoost;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$160(TL_stories.TL_premium_boostsStatus tL_premium_boostsStatus) {
        if (tL_premium_boostsStatus == null) {
            return;
        }
        this.boostsStatus = tL_premium_boostsStatus;
        getMessagesController().getBoostsController().userCanBoostChannel(this.dialog_id, tL_premium_boostsStatus, new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda182
            @Override // com.google.android.exoplayer2.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.this.lambda$didReceivedNotification$159((ChannelBoostsController.CanApplyBoost) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$161(Object[] objArr, long j) {
        MessageObject messageObject = (MessageObject) this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(((Integer) objArr[1]).intValue());
        if (messageObject != null) {
            messageObject.messageOwner.media.extended_media = (ArrayList) objArr[2];
            messageObject.forceUpdate = true;
            messageObject.setType();
            updateMessageAnimated(messageObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$162(Object[] objArr, long j) {
        MessageObject messageObject;
        int intValue = ((Integer) objArr[1]).intValue();
        LongSparseArray longSparseArray = this.filteredMessagesDict;
        if (longSparseArray != null && (messageObject = (MessageObject) longSparseArray.get(intValue)) != null) {
            MessageObject.updateReactions(messageObject.messageOwner, (TLRPC.TL_messageReactions) objArr[2]);
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
        }
        MessageObject messageObject2 = (MessageObject) this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(intValue);
        if (messageObject2 != null) {
            MessageObject.updateReactions(messageObject2.messageOwner, (TLRPC.TL_messageReactions) objArr[2]);
            messageObject2.forceUpdate = true;
            messageObject2.reactionsChanged = true;
            updateMessageAnimated(messageObject2, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didReceivedNotification$163(View view) {
        MessageObject messageObject;
        if (!(view instanceof ChatMessageCell) || (messageObject = ((ChatMessageCell) view).getMessageObject()) == null) {
            return;
        }
        messageObject.forceUpdate = true;
        messageObject.reactionsChanged = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$164() {
        AndroidUtilities.forEachViews((RecyclerView) this.chatListView, new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda72
            @Override // com.google.android.exoplayer2.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.lambda$didReceivedNotification$163((View) obj);
            }
        });
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            chatActivityAdapter.notifyDataSetChanged(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didReceivedNotification$165(View view) {
        MessageObject messageObject;
        if (!(view instanceof ChatMessageCell) || (messageObject = ((ChatMessageCell) view).getMessageObject()) == null) {
            return;
        }
        messageObject.forceUpdate = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$166() {
        AndroidUtilities.forEachViews((RecyclerView) this.chatListView, new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda173
            @Override // com.google.android.exoplayer2.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.lambda$didReceivedNotification$165((View) obj);
            }
        });
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            chatActivityAdapter.notifyDataSetChanged(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$167() {
        updateMessagesVisiblePart(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$168(ArrayList arrayList, int i) {
        replaceMessageObjects(arrayList, i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$didReceivedNotification$169(Integer num, Integer num2) {
        return num2.compareTo(num);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$170() {
        checkScrollForLoad(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didReceivedNotification$171(Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo, boolean z) {
        if (themeAccent == null) {
            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, -1);
            return;
        }
        Theme.ThemeAccent accent = themeInfo.getAccent(false);
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, Integer.valueOf(themeAccent.id));
        if (z) {
            Theme.deleteThemeAccent(themeInfo, accent, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$172(int i) {
        playReactionAnimation(Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ Boolean lambda$didReceivedNotification$173(MessageObject messageObject) {
        return Boolean.valueOf((messageObject == null || messageObject.getFactCheck() == null) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ Boolean lambda$didReceivedNotification$174(MessageObject messageObject) {
        return Boolean.valueOf((messageObject == null || messageObject.getEffect() == null) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$dimBehindView$89(Bitmap bitmap) {
        this.scrimBlurBitmap = bitmap;
        Paint paint = new Paint(1);
        this.scrimBlurBitmapPaint = paint;
        Bitmap bitmap2 = this.scrimBlurBitmap;
        Shader.TileMode tileMode = Shader.TileMode.CLAMP;
        BitmapShader bitmapShader = new BitmapShader(bitmap2, tileMode, tileMode);
        this.scrimBlurBitmapShader = bitmapShader;
        paint.setShader(bitmapShader);
        ColorMatrix colorMatrix = new ColorMatrix();
        AndroidUtilities.adjustSaturationColorMatrix(colorMatrix, Theme.isCurrentThemeDark() ? 0.08f : 0.25f);
        AndroidUtilities.adjustBrightnessColorMatrix(colorMatrix, Theme.isCurrentThemeDark() ? -0.02f : -0.07f);
        this.scrimBlurBitmapPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
        this.scrimBlurMatrix = new Matrix();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$dimBehindView$90(float f, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.scrimPaintAlpha = floatValue;
        this.scrimViewProgress = floatValue / f;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$forwardMessages$127() {
        this.waitingForSendingMessageLoad = false;
        hideFieldPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatThanosEffect$339(ThanosEffect[] thanosEffectArr) {
        ThanosEffect thanosEffect;
        if (this.removingFromParent || (thanosEffect = thanosEffectArr[0]) == null) {
            return;
        }
        AndroidUtilities.removeFromParent(thanosEffect);
        thanosEffectArr[0] = null;
        if (this.chatListThanosEffect == thanosEffect) {
            this.chatListThanosEffect = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getThemeDescriptions$328() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateColors();
        }
        Theme.refreshAttachButtonsColors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.checkColors();
        }
        RecyclerListView recyclerListView = this.chatListView;
        int i = 0;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    ((ChatMessageCell) childAt).createSelectorDrawable(0);
                } else if (childAt instanceof ChatActionCell) {
                    ((ChatActionCell) childAt).setInvalidateColors(true);
                }
            }
        }
        RecyclerListView recyclerListView2 = this.messagesSearchListView;
        if (recyclerListView2 != null) {
            int childCount2 = recyclerListView2.getChildCount();
            for (int i3 = 0; i3 < childCount2; i3++) {
                View childAt2 = this.messagesSearchListView.getChildAt(i3);
                if (childAt2 instanceof DialogCell) {
                    ((DialogCell) childAt2).update(0);
                }
            }
        }
        if (this.scrimPopupWindowItems != null) {
            while (true) {
                ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
                if (i >= actionBarMenuSubItemArr.length) {
                    break;
                }
                actionBarMenuSubItemArr[i].setColors(getThemedColor(Theme.key_actionBarDefaultSubmenuItem), getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon));
                this.scrimPopupWindowItems[i].setSelectorColor(getThemedColor(Theme.key_dialogButtonSelector));
                i++;
            }
        }
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            View contentView = actionBarPopupWindow.getContentView();
            contentView.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
            contentView.invalidate();
        }
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView != null) {
            instantCameraView.invalidateBlur();
        }
        PinnedLineView pinnedLineView = this.pinnedLineView;
        if (pinnedLineView != null) {
            pinnedLineView.updateColors();
        }
        ChatActivityEnterTopView chatActivityEnterTopView = this.chatActivityEnterTopView;
        if (chatActivityEnterTopView != null && chatActivityEnterTopView.getEditView() != null) {
            this.chatActivityEnterTopView.getEditView().updateColors();
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem != null) {
            actionBarMenuItem.updateColor();
        }
        setNavigationBarColor(getThemedColor(Theme.key_windowBackgroundGray));
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.updateColors();
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidateBlurredViews();
            this.contentView.invalidateBackground();
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        if (chatAvatarContainer2 != null && chatAvatarContainer2.getTimeItem() != null) {
            this.avatarContainer.getTimeItem().invalidate();
        }
        TranslateButton translateButton = this.translateButton;
        if (translateButton != null) {
            translateButton.updateColors();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hideInfoView$102(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hidePinnedMessageView$205(ValueAnimator valueAnimator) {
        this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hideTagSelector$82(ReactionsContainerLayout reactionsContainerLayout) {
        this.contentView.removeView(reactionsContainerLayout);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markSponsoredAsRead$326(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$184(BaseFragment baseFragment, MessageObject messageObject, INavigationLayout iNavigationLayout) {
        if (baseFragment instanceof NotificationCenter.NotificationCenterDelegate) {
            getNotificationCenter().removeObserver((NotificationCenter.NotificationCenterDelegate) baseFragment, NotificationCenter.closeChats);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeChats, new Object[0]);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", messageObject.messageOwner.action.channel_id);
        iNavigationLayout.addFragmentToStack(new ChatActivity(bundle), iNavigationLayout.getFragmentStack().size() - 1);
        baseFragment.finishFragment();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$185(long j) {
        getMessagesController().loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$1(DialogInterface dialogInterface) {
        this.postponedScrollIsCanceled = true;
        this.postponedScrollMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceNextPinnedMessageId = 0;
        invalidateMessagesVisiblePart();
        showPinnedProgress(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$178() {
        this.lastTranslationCheck = System.currentTimeMillis();
        if (this.chatListView != null && this.chatAdapter != null) {
            int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int i2 = Integer.MIN_VALUE;
            for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getCurrentMessagesGroup() != null) {
                        for (int i4 = 0; i4 < chatMessageCell.getCurrentMessagesGroup().messages.size(); i4++) {
                            int id = chatMessageCell.getCurrentMessagesGroup().messages.get(i4).getId();
                            i = Math.min(i, id);
                            i2 = Math.max(i2, id);
                        }
                    } else if (chatMessageCell.getMessageObject() != null) {
                        int id2 = chatMessageCell.getMessageObject().getId();
                        i = Math.min(i, id2);
                        i2 = Math.max(i2, id2);
                    }
                }
            }
            if (i <= i2) {
                ArrayList arrayList = new ArrayList();
                for (int i5 = 0; i5 < this.messages.size(); i5++) {
                    MessageObject messageObject = (MessageObject) this.messages.get(i5);
                    MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                    if (groupedMessages == null) {
                        int id3 = messageObject.getId();
                        getMessagesController().getTranslateController().checkTranslation(messageObject, id3 >= i + (-7) && id3 <= i2 + 7);
                    } else if (!arrayList.contains(Long.valueOf(groupedMessages.groupId))) {
                        for (int i6 = 0; i6 < groupedMessages.messages.size(); i6++) {
                            MessageObject messageObject2 = groupedMessages.messages.get(i6);
                            if (messageObject2 != null) {
                                int id4 = messageObject2.getId();
                                getMessagesController().getTranslateController().checkTranslation(messageObject2, id4 >= i + (-7) && id4 <= i2 + 7);
                            }
                        }
                        arrayList.add(Long.valueOf(groupedMessages.groupId));
                    }
                }
            }
        }
        if (this.currentPinnedMessageId > 0 && this.pinnedMessageObjects != null) {
            getMessagesController().getTranslateController().checkTranslation((MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)), true);
        }
        updateTranslateItemVisibility();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$7() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField() == null || this.chatActivityEnterView.getEditField().getText().length() < 5) {
            return;
        }
        SharedConfig.increaseScheduledOrNoSoundHintShowed();
        if (this.scheduledOrNoSoundHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledOrNoSoundHint = hintView;
            hintView.createCloseButton();
            this.scheduledOrNoSoundHint.setAlpha(0.0f);
            this.scheduledOrNoSoundHint.setVisibility(4);
            this.scheduledOrNoSoundHint.setText(LocaleController.getString(R.string.ScheduledOrNoSoundHint));
            this.contentView.addView(this.scheduledOrNoSoundHint, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        this.scheduledOrNoSoundHint.showForView(sendButton, true);
        this.scheduledOrNoSoundHintShown = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$8() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || this.forwardingPreviewView != null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField() == null || this.chatActivityEnterView.getEditField().getText().length() == 0) {
            return;
        }
        SharedConfig.increaseScheduledHintShowed();
        if (this.scheduledHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledHint = hintView;
            hintView.createCloseButton();
            this.scheduledHint.setAlpha(0.0f);
            this.scheduledHint.setVisibility(4);
            this.scheduledHint.setText(LocaleController.getString(R.string.ScheduledHint));
            this.contentView.addView(this.scheduledHint, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        this.scheduledHint.showForView(sendButton, true);
        this.scheduledHintShown = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onActivityResultFragment$152(Uri uri, boolean z, int i) {
        fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.replyingQuote, null, null, null, null, 0, this.editingMessageObject, z, i, this.chatMode, this.quickReplyShortcut, getQuickReplyId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onCustomTransitionAnimation$329(ChatActivity chatActivity, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        chatActivity.setTransitionToChatProgress(floatValue);
        float f = 1.0f - floatValue;
        float dp = AndroidUtilities.dp(8.0f) * f;
        this.avatarContainer.setTranslationY(dp);
        this.avatarContainer.getAvatarImageView().setTranslationY(-dp);
        float f2 = (-AndroidUtilities.dp(8.0f)) * floatValue;
        chatActivity.avatarContainer.setTranslationY(f2);
        chatActivity.avatarContainer.getAvatarImageView().setTranslationY(-f2);
        float f3 = (floatValue * 0.2f) + 0.8f;
        this.avatarContainer.getAvatarImageView().setScaleX(f3);
        this.avatarContainer.getAvatarImageView().setScaleY(f3);
        this.avatarContainer.getAvatarImageView().setAlpha(floatValue);
        float f4 = (0.2f * f) + 0.8f;
        chatActivity.avatarContainer.getAvatarImageView().setScaleX(f4);
        chatActivity.avatarContainer.getAvatarImageView().setScaleY(f4);
        chatActivity.avatarContainer.getAvatarImageView().setAlpha(f);
        ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        FrameLayout frameLayout = chatActivity.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        if (z) {
            chatActivity.fragmentContextView.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout = chatActivity.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout2 = chatActivity.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.setAlpha(f);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onEditTextDialogClose$106() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$10(Boolean bool) {
        boolean booleanValue = bool.booleanValue();
        this.waitingForGetDifference = booleanValue;
        if (booleanValue) {
            return;
        }
        firstLoadMessages();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$11(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$12(MessagesStorage messagesStorage, int i, CountDownLatch countDownLatch) {
        this.currentEncryptedChat = messagesStorage.getEncryptedChat(i);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$13(MessagesStorage messagesStorage, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(this.currentEncryptedChat.user_id);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$14(long j) {
        getMediaDataController().loadBotInfo(j, j, true, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$15(DialogInterface dialogInterface, int i) {
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        if (unreadCounterTextView != null) {
            unreadCounterTextView.callOnClick();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$16(DialogInterface dialogInterface, int i) {
        lambda$onBackPressed$300();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$17() {
        int i;
        this.chatInviteRunnable = null;
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
            builder.setMessage(LocaleController.getString(R.string.JoinByPeekGroupText));
            i = R.string.JoinByPeekGroupTitle;
        } else {
            builder.setMessage(LocaleController.getString(R.string.JoinByPeekChannelText));
            i = R.string.JoinByPeekChannelTitle;
        }
        builder.setTitle(LocaleController.getString(i));
        builder.setPositiveButton(LocaleController.getString(R.string.JoinByPeekJoin), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda198
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$onFragmentCreate$15(dialogInterface, i2);
            }
        });
        builder.setNegativeButton(LocaleController.getString(R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda199
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$onFragmentCreate$16(dialogInterface, i2);
            }
        });
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$9(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentChat = messagesStorage.getChat(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$5() {
        this.shareAlertDebugMode = (this.shareAlertDebugMode + 1) % 3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$6() {
        this.shareAlertDebugTopicsSlowMotion = !this.shareAlertDebugTopicsSlowMotion;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onPageDownClicked$88() {
        setPagedownLoading(true, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onRequestPermissionsResultFragment$150(DialogInterface dialogInterface, int i) {
        try {
            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.setData(Uri.parse("package:" + ApplicationLoader.applicationContext.getPackageName()));
            getParentActivity().startActivity(intent);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$211(DialogInterface dialogInterface) {
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.checkImport(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$212() {
        openVideoEditor(this.startVideoEdit, null);
        this.startVideoEdit = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$100(DialogInterface dialogInterface, int i) {
        openForwardingPreview(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$99(DialogInterface dialogInterface, int i) {
        this.forbidForwardingWithDismiss = false;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams != null) {
            messagePreviewParams.updateForward(null, this.dialog_id);
        }
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$189(TLRPC.TL_attachMenuBot tL_attachMenuBot, TLRPC.TL_error tL_error, TLRPC.User user) {
        tL_attachMenuBot.side_menu_disclaimer_needed = false;
        tL_attachMenuBot.inactive = false;
        if (tL_error == null) {
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(user.id, this.attachMenuBotStartCommand, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$190(final TLRPC.TL_attachMenuBot tL_attachMenuBot, final TLRPC.User user, TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda392
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$189(tL_attachMenuBot, tL_error, user);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$191(final TLRPC.User user, final TLRPC.TL_attachMenuBot tL_attachMenuBot, Boolean bool) {
        TLRPC.TL_messages_toggleBotInAttachMenu tL_messages_toggleBotInAttachMenu = new TLRPC.TL_messages_toggleBotInAttachMenu();
        tL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(user.id);
        tL_messages_toggleBotInAttachMenu.enabled = true;
        tL_messages_toggleBotInAttachMenu.write_allowed = true;
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tL_messages_toggleBotInAttachMenu, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda387
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$190(tL_attachMenuBot, user, tLObject, tL_error);
            }
        }, 66);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$192(TLRPC.TL_error tL_error, TLRPC.TL_attachMenuBot tL_attachMenuBot, TLRPC.User user) {
        if (tL_error == null) {
            tL_attachMenuBot.side_menu_disclaimer_needed = false;
            tL_attachMenuBot.inactive = false;
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(user.id, this.attachMenuBotStartCommand, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$193(final TLRPC.TL_attachMenuBot tL_attachMenuBot, final TLRPC.User user, TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda394
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$192(tL_error, tL_attachMenuBot, user);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$194(final TLRPC.User user, AtomicBoolean atomicBoolean, final TLRPC.TL_attachMenuBot tL_attachMenuBot, DialogInterface dialogInterface, int i) {
        TLRPC.TL_messages_toggleBotInAttachMenu tL_messages_toggleBotInAttachMenu = new TLRPC.TL_messages_toggleBotInAttachMenu();
        tL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(user.id);
        tL_messages_toggleBotInAttachMenu.enabled = true;
        tL_messages_toggleBotInAttachMenu.write_allowed = atomicBoolean.get();
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tL_messages_toggleBotInAttachMenu, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda385
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$193(tL_attachMenuBot, user, tLObject, tL_error);
            }
        }, 66);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openAttachBotLayout$195(CheckBoxCell checkBoxCell, AtomicBoolean atomicBoolean, View view) {
        boolean z = !checkBoxCell.isChecked();
        checkBoxCell.setChecked(z, true);
        atomicBoolean.set(z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$196(TLObject tLObject, final TLRPC.User user) {
        BulletinFactory of;
        int i;
        if (tLObject instanceof TLRPC.TL_attachMenuBotsBot) {
            TLRPC.TL_attachMenuBotsBot tL_attachMenuBotsBot = (TLRPC.TL_attachMenuBotsBot) tLObject;
            MessagesController.getInstance(this.currentAccount).putUsers(tL_attachMenuBotsBot.users, false);
            final TLRPC.TL_attachMenuBot tL_attachMenuBot = tL_attachMenuBotsBot.bot;
            if (MediaDataController.canShowAttachMenuBot(tL_attachMenuBot, getCurrentUser() != null ? getCurrentUser() : getCurrentChat())) {
                if (!tL_attachMenuBot.inactive) {
                    openAttachBotLayout(user.id, this.attachMenuBotStartCommand, false);
                    return;
                } else if (tL_attachMenuBot.show_in_attach_menu || tL_attachMenuBot.show_in_side_menu) {
                    WebAppDisclaimerAlert.show(getContext(), new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda379
                        @Override // com.google.android.exoplayer2.util.Consumer
                        public final void accept(Object obj) {
                            ChatActivity.this.lambda$openAttachBotLayout$191(user, tL_attachMenuBot, (Boolean) obj);
                        }
                    }, null, null);
                    return;
                } else {
                    AttachBotIntroTopView attachBotIntroTopView = new AttachBotIntroTopView(getParentActivity());
                    attachBotIntroTopView.setColor(Theme.getColor(Theme.key_chat_attachIcon));
                    attachBotIntroTopView.setBackgroundColor(Theme.getColor(Theme.key_dialogTopBackground));
                    attachBotIntroTopView.setAttachBot(tL_attachMenuBot);
                    final AtomicBoolean atomicBoolean = new AtomicBoolean();
                    AlertDialog.Builder negativeButton = new AlertDialog.Builder(getParentActivity()).setTopView(attachBotIntroTopView).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotRequestAttachPermission", R.string.BotRequestAttachPermission, UserObject.getUserName(user)))).setPositiveButton(LocaleController.getString(R.string.BotAddToMenu), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda377
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.lambda$openAttachBotLayout$194(user, atomicBoolean, tL_attachMenuBot, dialogInterface, i2);
                        }
                    }).setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                    if (tL_attachMenuBot.request_write_access) {
                        atomicBoolean.set(true);
                        final CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 5, getResourceProvider());
                        checkBoxCell.setPadding(0, AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f));
                        checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
                        checkBoxCell.setMultiline(true);
                        checkBoxCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, UserObject.getUserName(user))), "", true, false);
                        checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                        checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda378
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.lambda$openAttachBotLayout$195(CheckBoxCell.this, atomicBoolean, view);
                            }
                        });
                        negativeButton.setCustomViewOffset(6);
                        negativeButton.setView(checkBoxCell);
                    }
                    negativeButton.show();
                    return;
                }
            }
            TLRPC.User user2 = this.currentUser;
            if (user2 != null && user2.bot && user.id == tL_attachMenuBot.bot_id) {
                of = BulletinFactory.of(this);
                i = R.string.BotCantOpenAttachMenuSameBot;
            } else if (user2 != null && user2.bot && user.id != tL_attachMenuBot.bot_id) {
                of = BulletinFactory.of(this);
                i = R.string.BotCantOpenAttachMenuBot;
            } else if (user2 == null || user2.bot) {
                TLRPC.Chat chat = this.currentChat;
                if (chat == null || ChatObject.isChannelAndNotMegaGroup(chat)) {
                    TLRPC.Chat chat2 = this.currentChat;
                    if (chat2 == null || !ChatObject.isChannelAndNotMegaGroup(chat2)) {
                        return;
                    }
                    of = BulletinFactory.of(this);
                    i = R.string.BotCantOpenAttachMenuChannel;
                } else {
                    of = BulletinFactory.of(this);
                    i = R.string.BotCantOpenAttachMenuGroup;
                }
            } else {
                of = BulletinFactory.of(this);
                i = R.string.BotCantOpenAttachMenuUser;
            }
            of.createErrorBulletin(LocaleController.getString(i)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$197(final TLRPC.User user, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda362
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$196(tLObject, user);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$198(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC.TL_contacts_resolvedPeer tL_contacts_resolvedPeer = (TLRPC.TL_contacts_resolvedPeer) tLObject;
            if (tL_contacts_resolvedPeer.users.isEmpty()) {
                return;
            }
            final TLRPC.User user = tL_contacts_resolvedPeer.users.get(0);
            if (user.bot && user.bot_attach_menu) {
                TLRPC.TL_messages_getAttachMenuBot tL_messages_getAttachMenuBot = new TLRPC.TL_messages_getAttachMenuBot();
                tL_messages_getAttachMenuBot.bot = MessagesController.getInstance(this.currentAccount).getInputUser(user.id);
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(tL_messages_getAttachMenuBot, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda328
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC.TL_error tL_error) {
                        ChatActivity.this.lambda$openAttachBotLayout$197(user, tLObject2, tL_error);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$199(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda258
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$198(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openClickableLink$324(String str, CharacterStyle characterStyle, MessageObject messageObject, ChatMessageCell chatMessageCell, int i, DialogInterface dialogInterface, int i2) {
        UndoView undoView;
        int i3;
        String publicUsername;
        StringBuilder sb;
        String str2;
        MessageObject messageObject2;
        if (i2 == 0) {
            if (str.startsWith("video?")) {
                didPressMessageUrl(characterStyle, false, messageObject, chatMessageCell);
                return;
            }
            logSponsoredClicked(messageObject, false, false);
            openClickableLink(characterStyle, str, false, chatMessageCell, messageObject, true);
        } else if (i2 == 1) {
            if (!str.startsWith("video?") || messageObject == null || messageObject.scheduled) {
                AndroidUtilities.addToClipboard(str);
            } else {
                if (!messageObject.isVideo() && !messageObject.isRoundVideo() && !messageObject.isVoice() && !messageObject.isMusic() && (messageObject2 = messageObject.replyMessageObject) != null) {
                    messageObject = messageObject2;
                }
                long dialogId = messageObject.getDialogId();
                int id = messageObject.getId();
                TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
                if (messageFwdHeader != null) {
                    TLRPC.Peer peer = messageFwdHeader.saved_from_peer;
                    if (peer != null) {
                        dialogId = MessageObject.getPeerId(peer);
                        id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                    } else {
                        TLRPC.Peer peer2 = messageFwdHeader.from_id;
                        if (peer2 != null) {
                            dialogId = MessageObject.getPeerId(peer2);
                            id = messageObject.messageOwner.fwd_from.channel_post;
                        }
                    }
                }
                if (DialogObject.isChatDialog(dialogId)) {
                    TLRPC.Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId));
                    publicUsername = ChatObject.getPublicUsername(chat);
                    if (chat != null && publicUsername != null) {
                        sb = new StringBuilder();
                        sb.append("https://t.me/");
                        sb.append(publicUsername);
                        sb.append("/");
                        sb.append(id);
                        sb.append("?t=");
                        sb.append(i);
                        str2 = sb.toString();
                    }
                    str2 = null;
                } else {
                    TLRPC.User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                    publicUsername = UserObject.getPublicUsername(user);
                    if (user != null && publicUsername != null) {
                        sb = new StringBuilder();
                        sb.append("https://t.me/");
                        sb.append(publicUsername);
                        sb.append("/");
                        sb.append(id);
                        sb.append("?t=");
                        sb.append(i);
                        str2 = sb.toString();
                    }
                    str2 = null;
                }
                if (str2 == null) {
                    return;
                }
                AndroidUtilities.addToClipboard(str2);
            }
            createUndoView();
            if (this.undoView == null) {
                return;
            }
            if (str.startsWith("@")) {
                undoView = this.undoView;
                i3 = 56;
            } else if (str.startsWith("#") || str.startsWith("$")) {
                undoView = this.undoView;
                i3 = 57;
            } else {
                undoView = this.undoView;
                i3 = 59;
            }
            undoView.showWithAction(0L, i3, (Runnable) null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openClickableLink$325(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$312(int i, TLObject tLObject, TLRPC.TL_error tL_error, int i2, MessageObject messageObject, TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, TLRPC.Chat chat, int i3, MessageObject messageObject2) {
        if (i != this.commentMessagesLoadingGuid) {
            return;
        }
        this.commentMessagesRequestId = -1;
        if (tLObject != null) {
            this.savedHistory = (TLRPC.messages_Messages) tLObject;
        } else if ("CHANNEL_PRIVATE".equals(tL_error.text)) {
            MessagesController.showCantOpenAlert(this, LocaleController.getString(R.string.ChannelCantOpenBannedByAdmin));
            this.commentLoadingMessageId = 0;
            this.hideCommentLoading = false;
            this.chatListView.invalidateViews();
            return;
        } else {
            this.savedNoHistory = true;
        }
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, this.savedNoHistory, this.savedHistory, i2, messageObject, tL_messages_getDiscussionMessage, chat, i3, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$313(final int i, final TLObject tLObject, final TLRPC.TL_error tL_error, final int i2, final MessageObject messageObject, final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final TLRPC.Chat chat, final int i3, final MessageObject messageObject2) {
        lambda$openDiscussionMessageChat$316(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda386
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$312(i, tLObject, tL_error, i2, messageObject, tL_messages_getDiscussionMessage, chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$314(final int i, final int i2, final MessageObject messageObject, final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final TLRPC.Chat chat, final int i3, final MessageObject messageObject2, final TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda382
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$313(i, tLObject, tL_error, i2, messageObject, tL_messages_getDiscussionMessage, chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$315(int i, final int i2, long j, TLObject tLObject, final int i3, final MessageObject messageObject, final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final TLRPC.Chat chat, final MessageObject messageObject2) {
        int i4;
        if (i != this.commentLoadingGuid) {
            return;
        }
        this.commentRequestId = -1;
        if (tLObject instanceof TLRPC.TL_messages_discussionMessage) {
            this.savedDiscussionMessage = (TLRPC.TL_messages_discussionMessage) tLObject;
            getMessagesController().putUsers(this.savedDiscussionMessage.users, false);
            getMessagesController().putChats(this.savedDiscussionMessage.chats, false);
        } else {
            this.savedNoDiscussion = true;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC.TL_messages_discussionMessage tL_messages_discussionMessage = this.savedDiscussionMessage;
        if (tL_messages_discussionMessage != null && tL_messages_discussionMessage.messages != null) {
            for (int i5 = 0; i5 < this.savedDiscussionMessage.messages.size(); i5++) {
                TLRPC.Message message = this.savedDiscussionMessage.messages.get(i5);
                if (!(message instanceof TLRPC.TL_messageEmpty)) {
                    arrayList.add(message);
                }
            }
        }
        if (arrayList.size() <= 0) {
            this.savedNoHistory = true;
            processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, true, this.savedHistory, i2, messageObject, tL_messages_getDiscussionMessage, chat, i3, messageObject2);
            return;
        }
        TLRPC.Message message2 = (TLRPC.Message) arrayList.get(0);
        TLRPC.TL_messages_getReplies tL_messages_getReplies = new TLRPC.TL_messages_getReplies();
        tL_messages_getReplies.peer = getMessagesController().getInputPeer(message2.peer_id);
        tL_messages_getReplies.msg_id = message2.id;
        tL_messages_getReplies.offset_date = 0;
        tL_messages_getReplies.limit = 30;
        if (i3 > 0) {
            tL_messages_getReplies.offset_id = i3;
            i4 = -15;
        } else {
            tL_messages_getReplies.offset_id = i2 == 0 ? 1 : i2;
            i4 = -20;
        }
        tL_messages_getReplies.add_offset = i4;
        final int i6 = 1 + this.commentMessagesLoadingGuid;
        this.commentMessagesLoadingGuid = i6;
        this.commentMessagesRequestId = getConnectionsManager().sendRequest(tL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda360
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject2, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$openDiscussionMessageChat$314(i6, i2, messageObject, tL_messages_getDiscussionMessage, chat, i3, messageObject2, tLObject2, tL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$317(final int i, final int i2, final long j, final int i3, final MessageObject messageObject, final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final TLRPC.Chat chat, final MessageObject messageObject2, final TLObject tLObject, TLRPC.TL_error tL_error) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda323
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$315(i, i2, j, tLObject, i3, messageObject, tL_messages_getDiscussionMessage, chat, messageObject2);
            }
        };
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda324
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$316(runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openLinkInternally$327(int i, int i2, CharacterStyle characterStyle, ChatMessageCell chatMessageCell) {
        this.progressDialogAtMessageId = i;
        this.progressDialogAtMessageType = i2;
        this.progressDialogLinkSpan = characterStyle;
        chatMessageCell.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openPollCreate$112(TLRPC.TL_messageMediaPoll tL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
        if (checkSlowModeAlert()) {
            SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(tL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) hashMap, z, i);
            of.quick_reply_shortcut = this.quickReplyShortcut;
            of.quick_reply_shortcut_id = getQuickReplyId();
            getSendMessagesHelper().sendMessage(of);
            afterMessageSend();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$107(boolean z) {
        if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, ((Integer) this.pinnedMessageIds.get(0)).intValue()).commit();
            this.pinnedMessageIds.clear();
            this.pinnedMessageObjects.clear();
            this.currentPinnedMessageId = 0;
            this.loadedPinnedMessagesCount = 0;
            this.totalPinnedMessagesCount = 0;
            updatePinnedMessageView(true);
        }
        getMessagesController().deleteDialog(this.dialog_id, 1, z);
        this.clearingHistory = false;
        clearHistory(false, null);
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$108() {
        this.clearingHistory = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processInlineBotWebView$104(TLRPC.TL_inlineBotWebView tL_inlineBotWebView) {
        int i = this.currentAccount;
        TLRPC.User user = this.currentUser;
        WebViewRequestProps of = WebViewRequestProps.of(i, user != null ? user.id : this.currentChat.id, this.mentionContainer.getAdapter().getFoundContextBot().id, tL_inlineBotWebView.text, tL_inlineBotWebView.url, 1, 0, false, null, false, null, null, 1, false);
        LaunchActivity launchActivity = LaunchActivity.instance;
        if (launchActivity == null || launchActivity.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(of) == null) {
            if (AndroidUtilities.isTablet()) {
                BotWebViewSheet botWebViewSheet = new BotWebViewSheet(getContext(), getResourceProvider());
                botWebViewSheet.setDefaultFullsize(false);
                botWebViewSheet.setNeedsContext(true);
                botWebViewSheet.setParentActivity(getParentActivity());
                botWebViewSheet.requestWebView(this, of);
                botWebViewSheet.show();
                return;
            }
            BotWebViewAttachedSheet createBotViewer = createBotViewer();
            createBotViewer.setDefaultFullsize(false);
            createBotViewer.setNeedsContext(true);
            createBotViewer.setParentActivity(getParentActivity());
            createBotViewer.requestWebView(this, of);
            createBotViewer.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processInlineBotWebView$105(Runnable runnable, Boolean bool) {
        this.approved = true;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$308() {
        this.commentLoadingMessageId = 0;
        this.hideCommentLoading = false;
        this.chatListView.invalidateViews();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$309(boolean[] zArr, int i, ChatActivity chatActivity) {
        ChatActivityEnterView chatActivityEnterView;
        if (zArr[0] || i != this.commentLoadingMessageId || !this.isFullyVisible || isFinishing()) {
            return;
        }
        zArr[0] = true;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda393
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$308();
            }
        }, 200L);
        presentFragment(chatActivity);
        if (!isKeyboardVisible() || chatActivity.hideKeyboardOnShow() || (chatActivityEnterView = chatActivity.chatActivityEnterView) == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        chatActivity.chatActivityEnterView.getEditField().requestFocus();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$310(TLRPC.messages_Messages messages_messages, long j, int i, int i2, int i3, int i4, ArrayList arrayList) {
        getMessagesController().processLoadedMessages(messages_messages, messages_messages.messages.size(), j, 0L, 30, i > 0 ? i : i2, 0, false, i3, i4, 0, 0, 0, i > 0 ? 3 : 2, true, 0, ((MessageObject) arrayList.get(arrayList.size() - 1)).getId(), 1, false, 0, true, this.isTopic, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$311(final ArrayList arrayList, TLRPC.TL_messages_discussionMessage tL_messages_discussionMessage, final TLRPC.messages_Messages messages_messages, TLRPC.Chat chat, TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final int i, MessageObject messageObject, final int i2, final int i3, MessageObject messageObject2) {
        int i4;
        TLRPC.TL_messageReactions tL_messageReactions;
        TLRPC.MessageReplies messageReplies;
        TLRPC.MessageReplies messageReplies2;
        if (arrayList.isEmpty() || tL_messages_discussionMessage == null) {
            this.commentLoadingMessageId = 0;
            this.hideCommentLoading = false;
            this.chatListView.invalidateViews();
            if (messageObject2 != null) {
                openOriginalReplyChat(messageObject2);
                return;
            } else if (getParentActivity() != null) {
                BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.ChannelPostDeleted), this.themeDelegate).show();
                return;
            } else {
                return;
            }
        }
        this.hideCommentLoading = true;
        this.chatListView.invalidateViews();
        Bundle bundle = new Bundle();
        final long dialogId = ((MessageObject) arrayList.get(0)).getDialogId();
        bundle.putLong("chat_id", -dialogId);
        bundle.putInt("message_id", Math.max(1, tL_messages_discussionMessage.read_inbox_max_id));
        bundle.putInt("unread_count", tL_messages_discussionMessage.unread_count);
        bundle.putBoolean("historyPreloaded", messages_messages != null);
        final ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.setThreadMessages(arrayList, chat, tL_messages_getDiscussionMessage.msg_id, tL_messages_discussionMessage.read_inbox_max_id, tL_messages_discussionMessage.read_outbox_max_id, null);
        if (i != 0) {
            chatActivity.highlightMessageId = i;
        }
        if (messageObject != null && (messageReplies = messageObject.messageOwner.replies) != null && (messageReplies2 = chatActivity.threadMessageObject.messageOwner.replies) != null) {
            messageReplies.replies = messageReplies2.replies;
        }
        if (messageObject != null && (tL_messageReactions = messageObject.messageOwner.reactions) != null) {
            chatActivity.threadMessageObject.messageOwner.reactions = tL_messageReactions;
        }
        final boolean[] zArr = {false};
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda389
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$309(zArr, i2, chatActivity);
            }
        };
        if (messages_messages == null) {
            runnable.run();
            return;
        }
        if (!messages_messages.messages.isEmpty()) {
            for (int size = messages_messages.messages.size() - 1; size >= 0; size--) {
                TLRPC.Message message = messages_messages.messages.get(size);
                int i5 = message.id;
                if (i5 > i3 && !message.out) {
                    i4 = i5;
                    break;
                }
            }
        }
        i4 = 0;
        final int classGuid = chatActivity.getClassGuid();
        NotificationCenter.getInstance(this.currentAccount).addObserver(new 144(classGuid, runnable, chatActivity), NotificationCenter.messagesDidLoad);
        final int i6 = i4;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda390
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$310(messages_messages, dialogId, i, i3, classGuid, i6, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processNewMessages$183(int i) {
        scrollToMessageId(i, 0, false, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$270(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$271(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$272() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$273(boolean z, int i) {
        if (getParentActivity() == null || this.fragmentView == null || i <= 0) {
            return;
        }
        BulletinFactory.of(this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$274(boolean z, boolean z2, boolean z3, Uri uri) {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.of(this).createDownloadBulletin(z ? BulletinFactory.FileType.PHOTO_TO_DOWNLOADS : z2 ? BulletinFactory.FileType.VIDEO_TO_DOWNLOADS : z3 ? BulletinFactory.FileType.GIF_TO_DOWNLOADS : BulletinFactory.FileType.UNKNOWN, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$275(MessageObject messageObject, Long l, Runnable runnable) {
        StarsController.getInstance(this.currentAccount).updateMediaPrice(messageObject, l.longValue(), runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$276(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$277(boolean[] zArr, View view) {
        boolean z = !zArr[1];
        zArr[1] = z;
        ((CheckBoxCell) view).setChecked(z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$278(boolean[] zArr, View view) {
        boolean z = !zArr[0];
        zArr[0] = z;
        ((CheckBoxCell) view).setChecked(z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$280(int i, boolean[] zArr, DialogInterface dialogInterface, int i2) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, i, false, !zArr[1], zArr[0]);
        Bulletin createPinMessageBulletin = BulletinFactory.createPinMessageBulletin(this, this.themeDelegate);
        createPinMessageBulletin.show();
        final Bulletin.Layout layout = createPinMessageBulletin.getLayout();
        layout.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda355
            @Override // java.lang.Runnable
            public final void run() {
                layout.performHapticFeedback(3, 2);
            }
        }, 550L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$281(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC.TL_exportedMessageLink tL_exportedMessageLink = (TLRPC.TL_exportedMessageLink) tLObject;
            try {
                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", tL_exportedMessageLink.link));
                if (BulletinFactory.canShowBulletin(this)) {
                    BulletinFactory.of(this).createCopyLinkBulletin(!isThreadChat() && tL_exportedMessageLink.link.contains("/c/"), this.themeDelegate).show();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$282(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda354
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$281(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$283() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$284(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$285(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$286(AlertDialog[] alertDialogArr, final int i) {
        AlertDialog alertDialog = alertDialogArr[0];
        if (alertDialog == null) {
            return;
        }
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda341
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$285(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$287(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$288(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$289(TLRPC.TL_error tL_error, TLRPC.TL_messages_editMessage tL_messages_editMessage) {
        AlertsCreator.processError(this.currentAccount, tL_error, this, tL_messages_editMessage, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$290(final AlertDialog[] alertDialogArr, final TLRPC.TL_messages_editMessage tL_messages_editMessage, TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda374
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$processSelectedOption$288(alertDialogArr);
            }
        });
        if (tL_error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) tLObject, false);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda375
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$289(tL_error, tL_messages_editMessage);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$291(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$292(AlertDialog[] alertDialogArr, final int i) {
        AlertDialog alertDialog = alertDialogArr[0];
        if (alertDialog == null) {
            return;
        }
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda371
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$291(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$293(MessageObject messageObject, DialogInterface dialogInterface, int i) {
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        final TLRPC.TL_messages_editMessage tL_messages_editMessage = new TLRPC.TL_messages_editMessage();
        TLRPC.TL_inputMediaPoll tL_inputMediaPoll = new TLRPC.TL_inputMediaPoll();
        TLRPC.TL_poll tL_poll = new TLRPC.TL_poll();
        tL_inputMediaPoll.poll = tL_poll;
        TLRPC.Poll poll = ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll;
        tL_poll.id = poll.id;
        tL_poll.question = poll.question;
        tL_poll.answers = poll.answers;
        tL_poll.closed = true;
        tL_messages_editMessage.media = tL_inputMediaPoll;
        tL_messages_editMessage.peer = getMessagesController().getInputPeer(this.dialog_id);
        tL_messages_editMessage.id = messageObject.getId();
        tL_messages_editMessage.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
        final int sendRequest = getConnectionsManager().sendRequest(tL_messages_editMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda317
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$processSelectedOption$290(alertDialogArr, tL_messages_editMessage, tLObject, tL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda318
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$292(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$294(TLRPC.TL_messages_sendScheduledMessages tL_messages_sendScheduledMessages) {
        NotificationCenter notificationCenter = NotificationCenter.getInstance(this.currentAccount);
        int i = NotificationCenter.messagesDeleted;
        ArrayList<Integer> arrayList = tL_messages_sendScheduledMessages.id;
        long clientUserId = getUserConfig().getClientUserId();
        long j = this.dialog_id;
        Long valueOf = Long.valueOf(clientUserId == j ? 0L : -j);
        Boolean bool = Boolean.TRUE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, arrayList, valueOf, bool, bool);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$295(TLRPC.TL_error tL_error) {
        String str;
        int i;
        if (tL_error.text.startsWith("SLOWMODE_WAIT_")) {
            i = R.string.SlowmodeSendError;
        } else if (!tL_error.text.equals("CHAT_SEND_MEDIA_FORBIDDEN")) {
            str = tL_error.text;
            AlertsCreator.showSimpleToast(this, str);
        } else {
            i = R.string.AttachMediaRestrictedForever;
        }
        str = LocaleController.getString(i);
        AlertsCreator.showSimpleToast(this, str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$296(final TLRPC.TL_messages_sendScheduledMessages tL_messages_sendScheduledMessages, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda350
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$294(tL_messages_sendScheduledMessages);
                }
            });
        } else if (tL_error.text != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda351
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$295(tL_error);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$297(MessageObject.GroupedMessages groupedMessages, MessageObject messageObject, boolean z, int i) {
        SendMessagesHelper sendMessagesHelper;
        boolean z2;
        ArrayList<TLRPC.MessageEntity> arrayList;
        String str;
        MessageObject messageObject2;
        if (groupedMessages == null || groupedMessages.messages.isEmpty()) {
            sendMessagesHelper = SendMessagesHelper.getInstance(this.currentAccount);
            z2 = false;
            arrayList = null;
            str = null;
            messageObject2 = messageObject;
        } else {
            sendMessagesHelper = SendMessagesHelper.getInstance(this.currentAccount);
            messageObject2 = groupedMessages.messages.get(0);
            z2 = false;
            arrayList = null;
            str = null;
        }
        sendMessagesHelper.editMessage(messageObject2, str, z2, this, arrayList, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$298(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeKeyboardPositionBeforeTransition$187() {
        this.cancelFixedPositionRunnable = null;
        this.fixedKeyboardHeight = -1;
        View view = this.fragmentView;
        if (view != null) {
            view.requestLayout();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$121(Utilities.Callback2 callback2, TLRPC.WebPage webPage) {
        callback2.run(Boolean.TRUE, webPage);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$122(Utilities.Callback2 callback2) {
        callback2.run(Boolean.FALSE, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$123(LongSparseArray longSparseArray, final Utilities.Callback2 callback2) {
        TLRPC.Message message;
        TLRPC.MessageMedia messageMedia;
        TLRPC.WebPage webPage;
        MessageObject messageObject = (longSparseArray.size() == 1 && longSparseArray.valueAt(0) != null && ((ArrayList) longSparseArray.valueAt(0)).size() == 1) ? (MessageObject) ((ArrayList) longSparseArray.valueAt(0)).get(0) : null;
        if (messageObject != null && (message = messageObject.messageOwner) != null && (messageMedia = message.media) != null && (webPage = messageMedia.webpage) != null && webPage.attributes != null) {
            for (int i = 0; i < messageObject.messageOwner.media.webpage.attributes.size(); i++) {
                TLRPC.WebPageAttribute webPageAttribute = messageObject.messageOwner.media.webpage.attributes.get(i);
                if ((webPageAttribute instanceof TLRPC.TL_webPageAttributeStory) && ((TLRPC.TL_webPageAttributeStory) webPageAttribute).storyItem != null) {
                    final TLRPC.WebPage webPage2 = messageObject.messageOwner.media.webpage;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda30
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.lambda$requestLinkPreview$121(Utilities.Callback2.this, webPage2);
                        }
                    });
                    return;
                }
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda31
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$requestLinkPreview$122(Utilities.Callback2.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$124(TLRPC.TL_messageMediaWebPage tL_messageMediaWebPage, TLRPC.TL_webPageAttributeStory tL_webPageAttributeStory, final Utilities.Callback2 callback2) {
        try {
            final LongSparseArray longSparseArray = new LongSparseArray();
            TLRPC.TL_message tL_message = new TLRPC.TL_message();
            tL_message.message = "";
            tL_message.id = 0;
            tL_message.media = tL_messageMediaWebPage;
            ArrayList arrayList = new ArrayList();
            arrayList.add(new MessageObject(this.currentAccount, tL_message, false, false));
            longSparseArray.put(DialogObject.getPeerDialogId(tL_webPageAttributeStory.peer), arrayList);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(longSparseArray, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda395
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.lambda$requestLinkPreview$123(LongSparseArray.this, callback2);
                }
            }, this.classGuid, false, null);
        } catch (Exception unused) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$125(TLObject tLObject, final Utilities.Callback2 callback2) {
        final TLRPC.TL_webPageAttributeStory tL_webPageAttributeStory;
        this.linkSearchRequestId = 0;
        if (!(tLObject instanceof TLRPC.TL_messageMediaWebPage)) {
            callback2.run(Boolean.FALSE, null);
            return;
        }
        final TLRPC.TL_messageMediaWebPage tL_messageMediaWebPage = (TLRPC.TL_messageMediaWebPage) tLObject;
        TLRPC.WebPage webPage = tL_messageMediaWebPage.webpage;
        if (webPage == null || !"telegram_story".equals(webPage.type)) {
            callback2.run(Boolean.valueOf(tL_messageMediaWebPage.webpage != null), tL_messageMediaWebPage.webpage);
            return;
        }
        if (tL_messageMediaWebPage.webpage.attributes != null) {
            for (int i = 0; i < tL_messageMediaWebPage.webpage.attributes.size(); i++) {
                if (tL_messageMediaWebPage.webpage.attributes.get(i) instanceof TLRPC.TL_webPageAttributeStory) {
                    tL_webPageAttributeStory = (TLRPC.TL_webPageAttributeStory) tL_messageMediaWebPage.webpage.attributes.get(i);
                    break;
                }
            }
        }
        tL_webPageAttributeStory = null;
        if (tL_webPageAttributeStory == null) {
            callback2.run(Boolean.FALSE, null);
        } else if (tL_webPageAttributeStory.storyItem != null) {
            callback2.run(Boolean.TRUE, tL_messageMediaWebPage.webpage);
        } else {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda391
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$requestLinkPreview$124(tL_messageMediaWebPage, tL_webPageAttributeStory, callback2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$126(final Utilities.Callback2 callback2, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda388
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$requestLinkPreview$125(tLObject, callback2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreviewCached$120(TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview, Utilities.Callback2 callback2, Boolean bool, TLRPC.WebPage webPage) {
        if (bool.booleanValue() && !(webPage instanceof TLRPC.TL_webPagePending)) {
            Iterator it = this.lastLinkPreviewResults.keySet().iterator();
            while (it.hasNext() && this.lastLinkPreviewResults.size() > 5) {
                it.next();
                it.remove();
            }
            this.lastLinkPreviewResults.put(tL_messages_getWebPagePreview.message, webPage);
        }
        callback2.run(bool, webPage);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$132(int i, boolean z) {
        this.chatScrollHelper.scrollToPosition(this.chatScrollHelperCallback.position = i, this.chatScrollHelperCallback.offset = 0, this.chatScrollHelperCallback.bottom = !z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$134() {
        MessagesController messagesController = getMessagesController();
        long j = this.dialog_id;
        long j2 = this.mergeDialogId;
        int i = this.classGuid;
        int i2 = this.chatMode;
        long j3 = this.threadMessageId;
        int i3 = this.replyMaxReadId;
        int i4 = this.lastLoadIndex;
        this.lastLoadIndex = i4 + 1;
        messagesController.loadMessages(j, j2, false, 30, 0, 0, true, 0, i, 0, 0, i2, j3, i3, i4, this.isTopic);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$140() {
        int i = this.nextScrollToMessageId;
        if (i != 0) {
            scrollToMessageId(i, this.nextScrollFromMessageId, this.nextScrollSelect, this.nextScrollLoadIndex, this.nextScrollForce, this.nextScrollForcePinnedMessageId);
            this.nextScrollToMessageId = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$141(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$113() {
        this.foundWebPage = null;
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$114() {
        this.foundWebPage = null;
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$115(MessagesController messagesController, CharSequence charSequence, boolean z, DialogInterface dialogInterface, int i) {
        messagesController.secretWebpagePreview = 1;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
        this.foundUrls = null;
        searchLinks(charSequence, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$116(final MessagesController messagesController, final CharSequence charSequence, final boolean z) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString(R.string.AppName));
        builder.setPositiveButton(LocaleController.getString(R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda368
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$searchLinks$115(messagesController, charSequence, z, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
        builder.setMessage(LocaleController.getString(R.string.SecretLinkPreviewAlert));
        showDialog(builder.create());
        messagesController.secretWebpagePreview = 0;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$117(int i, Boolean bool, TLRPC.WebPage webPage, TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview) {
        if (this.waitingForWebpageId != i) {
            return;
        }
        if (bool.booleanValue()) {
            this.foundWebPage = webPage;
            String str = tL_messages_getWebPagePreview.message;
            webPage.display_url = str;
            if ((webPage instanceof TLRPC.TL_webPage) || (webPage instanceof TLRPC.TL_webPagePending)) {
                boolean z = webPage instanceof TLRPC.TL_webPagePending;
                if (z) {
                    this.pendingLinkSearchString = str;
                }
                if (this.currentEncryptedChat != null && z) {
                    webPage.url = str;
                }
                MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                if (messagePreviewParams != null) {
                    int i2 = this.currentAccount;
                    CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                    MessageObject messageObject = this.replyingMessageObject;
                    messagePreviewParams.updateLink(i2, null, fieldText, messageObject == this.threadMessageObject ? null : messageObject, this.replyingQuote, this.editingMessageObject);
                }
                showFieldPanelForWebPage(true, this.foundWebPage, false);
                return;
            }
            this.foundWebPage = null;
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 != null) {
                int i3 = this.currentAccount;
                CharSequence fieldText2 = this.chatActivityEnterView.getFieldText();
                MessageObject messageObject2 = this.replyingMessageObject;
                messagePreviewParams2.updateLink(i3, null, fieldText2, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
            }
        } else {
            this.foundWebPage = null;
        }
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$118(final int i, final TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview, final Boolean bool, final TLRPC.WebPage webPage) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda370
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$searchLinks$117(i, bool, webPage, tL_messages_getWebPagePreview);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$119(final CharSequence charSequence, final MessagesController messagesController, final boolean z) {
        boolean z2;
        CharSequence charSequence2;
        URLSpanReplacement[] uRLSpanReplacementArr;
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
            this.linkSearchRequestId = 0;
            z2 = true;
        } else {
            z2 = false;
        }
        ArrayList arrayList = null;
        try {
            Matcher matcher = AndroidUtilities.WEB_URL.matcher(charSequence);
            while (matcher.find()) {
                if (matcher.start() <= 0 || charSequence.charAt(matcher.start() - 1) != '@') {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(charSequence.subSequence(matcher.start(), matcher.end()));
                }
            }
            if ((charSequence instanceof Spannable) && (uRLSpanReplacementArr = (URLSpanReplacement[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class)) != null && uRLSpanReplacementArr.length > 0) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                for (URLSpanReplacement uRLSpanReplacement : uRLSpanReplacementArr) {
                    arrayList.add(uRLSpanReplacement.getURL());
                }
            }
            if (arrayList != null && this.foundUrls != null && arrayList.size() == this.foundUrls.size()) {
                boolean z3 = true;
                for (int i = 0; i < arrayList.size(); i++) {
                    if (!TextUtils.equals((CharSequence) arrayList.get(i), (CharSequence) this.foundUrls.get(i))) {
                        z3 = false;
                    }
                }
                if (z3 && !z2) {
                    return;
                }
            }
            this.foundUrls = arrayList;
        } catch (Exception e) {
            FileLog.e(e);
            String lowerCase = charSequence.toString().toLowerCase();
            if (charSequence.length() < 13 || !(lowerCase.contains("http://") || lowerCase.contains("https://"))) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda349
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$searchLinks$114();
                    }
                });
                return;
            }
            charSequence2 = charSequence;
        }
        if (arrayList == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda346
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$113();
                }
            });
            return;
        }
        charSequence2 = TextUtils.join(" ", arrayList);
        if (arrayList != null && !arrayList.isEmpty()) {
            ((CharSequence) arrayList.get(0)).toString();
        }
        if (this.currentEncryptedChat != null && messagesController.secretWebpagePreview == 2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda347
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$116(messagesController, charSequence, z);
                }
            });
            return;
        }
        final TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview = new TLRPC.TL_messages_getWebPagePreview();
        if (charSequence2 instanceof String) {
            tL_messages_getWebPagePreview.message = (String) charSequence2;
        } else {
            tL_messages_getWebPagePreview.message = charSequence2.toString();
        }
        TLRPC.WebPage webPage = this.foundWebPage;
        if (webPage == null || !tL_messages_getWebPagePreview.message.equals(webPage.displayedText)) {
            final int i2 = this.waitingForWebpageId + 1;
            this.waitingForWebpageId = i2;
            requestLinkPreviewCached(tL_messages_getWebPagePreview, new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda348
                @Override // org.telegram.messenger.Utilities.Callback2
                public final void run(Object obj, Object obj2) {
                    ChatActivity.this.lambda$searchLinks$118(i2, tL_messages_getWebPagePreview, (Boolean) obj, (TLRPC.WebPage) obj2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMedia$306() {
        this.closeInstantCameraAnimation = null;
        runCloseInstantCameraAnimation();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSecretMediaDelete$131(long j, MessageObject messageObject) {
        getMessagesController().lambda$checkDeletingTask$78(j, this.dialog_id, messageObject.getId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSecretMessageRead$130(MessageObject messageObject) {
        TLRPC.Message message = messageObject.messageOwner;
        int i = message.ttl;
        boolean z = i != Integer.MAX_VALUE;
        if (i == Integer.MAX_VALUE) {
            i = 0;
        }
        message.destroyTime = getConnectionsManager().getCurrentTime() + i;
        messageObject.messageOwner.destroyTimeMillis = (i * 1000) + getConnectionsManager().getCurrentTimeMillis();
        if (this.currentEncryptedChat != null) {
            getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, i);
        } else {
            getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, i, 0L, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChatThemeEmoticon$333(EmojiThemes emojiThemes) {
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(emojiThemes, themeDelegate.wallpaper, this.openAnimationStartTime != 0, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setPagedownLoading$103(boolean[] zArr, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.pagedownLoadingT = floatValue;
        if (!zArr[0] && z && floatValue > 0.5f) {
            zArr[0] = true;
            this.pagedownButtonLoadingDrawable.reset();
            this.pagedownButtonLoading.setVisibility(0);
        }
        this.pagedownButtonLoading.setAlpha(Math.max(0.0f, (this.pagedownLoadingT - 0.5f) * 2.0f));
        this.pagedownButtonArrow.setScaleX(1.0f - this.pagedownLoadingT);
        this.pagedownButtonArrow.setScaleY(1.0f - this.pagedownLoadingT);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$109(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            return;
        }
        getMessagesController().processUpdates((TLRPC.Updates) tLObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$110(int i, MessageObject messageObject, DialogInterface dialogInterface, int i2) {
        if (i == 1) {
            TLRPC.TL_contacts_acceptContact tL_contacts_acceptContact = new TLRPC.TL_contacts_acceptContact();
            tL_contacts_acceptContact.id = getMessagesController().getInputUser(this.currentUser);
            getConnectionsManager().sendRequest(tL_contacts_acceptContact, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda358
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.lambda$shareMyContact$109(tLObject, tL_error);
                }
            });
            return;
        }
        SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(getUserConfig().getCurrentUser(), this.dialog_id, messageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
        of.quick_reply_shortcut_id = getQuickReplyId();
        of.quick_reply_shortcut = this.quickReplyShortcut;
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(of);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showAlert$204(ValueAnimator valueAnimator) {
        this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showBotMessageHint$68(HintView2 hintView2) {
        this.contentView.removeView(hintView2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showBotMessageHint$69(ChatMessageCell chatMessageCell) {
        int[] iArr = new int[2];
        chatMessageCell.getLocationInWindow(iArr);
        HintView2 hintView2 = this.botMessageHint;
        hintView2.setTranslationY(((iArr[1] - hintView2.getTop()) - AndroidUtilities.dp(120.0f)) + chatMessageCell.getTimeY());
        this.botMessageHint.setJointPx(0.0f, ((((-AndroidUtilities.dp(16.0f)) + iArr[0]) + chatMessageCell.timeX) + chatMessageCell.timeWidth) - (chatMessageCell.signWidth / 2.0f));
        this.botMessageHint.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$showChatThemeBottomSheet$330(MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showChatThemeBottomSheet$331(DialogInterface dialogInterface) {
        this.chatThemeBottomSheet = null;
        this.chatListView.setOnInterceptTouchListener(null);
        setChildrenEnabled(this.contentView, true);
        ChatThemeController.getInstance(this.currentAccount).clearWallpaperThumbImages();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showFieldPanel$128() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showFieldPanel$129() {
        ViewPropertyAnimator scaleY;
        this.showTapForForwardingOptionsHit = !this.showTapForForwardingOptionsHit;
        this.replyObjectTextView.setPivotX(0.0f);
        this.replyObjectHintTextView.setPivotX(0.0f);
        if (this.showTapForForwardingOptionsHit) {
            this.replyObjectTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
            scaleY = this.replyObjectHintTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
        } else {
            this.replyObjectTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
            scaleY = this.replyObjectHintTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f);
        }
        scaleY.setDuration(150L).start();
        AndroidUtilities.runOnUIThread(this.tapForForwardingOptionsHitRunnable, 6000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$180(DialogInterface dialogInterface, int i) {
        showDialog(new 106(getParentActivity(), this));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$181(DialogInterface dialogInterface, int i) {
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(0L, 75, (Runnable) null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$182() {
        TLRPC.ChatFull chatFull = this.chatInfo;
        if (chatFull == null || this.paused) {
            return;
        }
        TLRPC.Chat chat = this.currentChat;
        if (chat.creator && chat.megagroup && !chat.gigagroup && chatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            int i = notificationsSettings.getInt("group_convert_time", 0);
            int i2 = BuildVars.DEBUG_PRIVATE_VERSION ? 120 : 604800;
            int currentTime = getConnectionsManager().getCurrentTime();
            if (Math.abs(currentTime - i) < i2 || this.visibleDialog != null || getParentActivity() == null) {
                return;
            }
            notificationsSettings.edit().putInt("group_convert_time", currentTime).commit();
            showDialog(AlertsCreator.createGigagroupConvertAlert(getParentActivity(), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda304
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$180(dialogInterface, i3);
                }
            }, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda305
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$181(dialogInterface, i3);
                }
            }).create());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGreetInfo$264(View view) {
        showDialog(new PremiumFeatureBottomSheet(this, 28, true));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showInfoHint$186(int i) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.equals(this.hintMessageObject)) {
                    chatMessageCell.showHintButton(true, true, i);
                }
            }
        }
        this.hintMessageObject = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$147(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$148(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showOpenGameAlert$307(TLRPC.TL_game tL_game, MessageObject messageObject, String str, long j, DialogInterface dialogInterface, int i) {
        showOpenGameAlert(tL_game, messageObject, str, false, j);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putBoolean("askgame_" + j, false).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showPinnedProgress$142() {
        this.pinnedProgressIsShowing = true;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showPremiumFloodWaitBulletin$341(boolean z) {
        presentFragment(new PremiumPreviewFragment(z ? "upload_speed" : "download_speed"));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuickRepliesRemoveAlert$301(DialogInterface dialogInterface, int i) {
        lambda$onBackPressed$300();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$175(DialogInterface dialogInterface, int i) {
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messagePreviewParams.quote == null) {
            return;
        }
        openForwardingPreview(0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$176(DialogInterface dialogInterface, int i) {
        hideFieldPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$177(DialogInterface dialogInterface) {
        this.quoteMessageUpdateAlert = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$showRequestUrlAlert$318(CheckBoxCell[] checkBoxCellArr, View view) {
        if (view.isEnabled()) {
            Integer num = (Integer) view.getTag();
            checkBoxCellArr[num.intValue()].setChecked(!checkBoxCellArr[num.intValue()].isChecked(), true);
            if (num.intValue() != 0 || checkBoxCellArr[1] == null) {
                return;
            }
            if (checkBoxCellArr[num.intValue()].isChecked()) {
                checkBoxCellArr[1].setEnabled(true);
                return;
            }
            checkBoxCellArr[1].setChecked(false, true);
            checkBoxCellArr[1].setEnabled(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$319(TLObject tLObject, String str, TLRPC.TL_messages_requestUrlAuth tL_messages_requestUrlAuth, boolean z) {
        if (tLObject instanceof TLRPC.TL_urlAuthResultAccepted) {
            Browser.openUrl((Context) getParentActivity(), ((TLRPC.TL_urlAuthResultAccepted) tLObject).url, false);
        } else if (tLObject instanceof TLRPC.TL_urlAuthResultDefault) {
            Browser.openUrl((Context) getParentActivity(), str, false);
        } else {
            String str2 = tL_messages_requestUrlAuth.url;
            if (str2 != null) {
                AlertsCreator.showOpenUrlAlert(this, str2, false, z, this.themeDelegate);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$320(final String str, final TLRPC.TL_messages_requestUrlAuth tL_messages_requestUrlAuth, final boolean z, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda308
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$319(tLObject, str, tL_messages_requestUrlAuth, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$321(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$322(AlertDialog[] alertDialogArr, final int i) {
        AlertDialog alertDialog = alertDialogArr[0];
        if (alertDialog == null) {
            return;
        }
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda259
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showRequestUrlAlert$321(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$323(CheckBoxCell[] checkBoxCellArr, final String str, final TLRPC.TL_messages_requestUrlAuth tL_messages_requestUrlAuth, TLRPC.TL_urlAuthResultRequest tL_urlAuthResultRequest, final boolean z, DialogInterface dialogInterface, int i) {
        int i2;
        if (!checkBoxCellArr[0].isChecked()) {
            Browser.openUrl((Context) getParentActivity(), str, false);
            return;
        }
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC.TL_messages_acceptUrlAuth tL_messages_acceptUrlAuth = new TLRPC.TL_messages_acceptUrlAuth();
        String str2 = tL_messages_requestUrlAuth.url;
        if (str2 != null) {
            tL_messages_acceptUrlAuth.url = str2;
            i2 = tL_messages_acceptUrlAuth.flags | 4;
        } else {
            tL_messages_acceptUrlAuth.button_id = tL_messages_requestUrlAuth.button_id;
            tL_messages_acceptUrlAuth.msg_id = tL_messages_requestUrlAuth.msg_id;
            tL_messages_acceptUrlAuth.peer = tL_messages_requestUrlAuth.peer;
            i2 = tL_messages_acceptUrlAuth.flags | 2;
        }
        tL_messages_acceptUrlAuth.flags = i2;
        if (tL_urlAuthResultRequest.request_write_access) {
            tL_messages_acceptUrlAuth.write_allowed = checkBoxCellArr[1].isChecked();
        }
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        final int sendRequest = getConnectionsManager().sendRequest(tL_messages_acceptUrlAuth, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda176
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$showRequestUrlAlert$320(str, tL_messages_requestUrlAuth, z, tLObject, tL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda177
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$322(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$266(TLObject tLObject) {
        this.editingMessageObjectReqId = 0;
        if (tLObject != null || getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString(R.string.AppName));
        builder.setMessage(LocaleController.getString(R.string.EditMessageError));
        builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
        showDialog(builder.create());
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setEditingMessageObject(null, null, false);
            hideFieldPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$267(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda361
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startEditingMessageObject$266(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startMessageUnselect$139() {
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.highlightMessageQuoteFirst = false;
        this.highlightMessageQuoteFirstTime = 0L;
        this.highlightMessageQuote = null;
        this.highlightMessageQuoteOffset = -1;
        this.showNoQuoteAlert = false;
        updateVisibleRows();
        this.unselectRunnable = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$268(ArrayList arrayList, ArrayList arrayList2, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList, Boolean.TRUE, arrayList2, 0, 0, Integer.valueOf(i), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$269(MessageObject messageObject) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, messageObject.getId(), true, false, false);
        this.pinBulletin = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$334(String str, String str2, CharSequence charSequence, Runnable[] runnableArr, View view) {
        TranslateAlert2.showAlert(getContext(), this, this.currentAccount, str, str2, charSequence, null, false, null, null);
        Runnable runnable = runnableArr[0];
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$336(final String str, final String str2, final CharSequence charSequence, BotHelpCell botHelpCell, View view) {
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
        Drawable mutate = ContextCompat.getDrawable(getContext(), R.drawable.popup_fixed_alert).mutate();
        mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
        actionBarPopupWindowLayout.setBackground(mutate);
        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(getContext(), true, true);
        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.TranslateMessage), R.drawable.msg_translate);
        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda372
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$updateBotHelpCellClick$334(str, str2, charSequence, r5, view2);
            }
        });
        actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
        final ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(actionBarPopupWindowLayout, -2, -2);
        final Runnable[] runnableArr = {new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda373
            @Override // java.lang.Runnable
            public final void run() {
                ActionBarPopupWindow.this.dismiss();
            }
        }};
        actionBarPopupWindow.setPauseNotifications(true);
        actionBarPopupWindow.setDismissAnimationDuration(NotificationCenter.updateAllMessages);
        actionBarPopupWindow.setOutsideTouchable(true);
        actionBarPopupWindow.setClippingEnabled(true);
        actionBarPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
        actionBarPopupWindow.setFocusable(true);
        actionBarPopupWindow.showAsDropDown(botHelpCell, (botHelpCell.getWidth() / 2) - AndroidUtilities.dp(90.0f), AndroidUtilities.dp(-16.0f), 83);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$337(final BotHelpCell botHelpCell, final CharSequence charSequence, final String str) {
        final String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
        if (str == null || ((str.equals(language) && !str.equals(TranslateController.UNKNOWN_LANGUAGE)) || RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(str))) {
            botHelpCell.setClickable(false);
        } else {
            botHelpCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda342
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$updateBotHelpCellClick$336(str, language, charSequence, botHelpCell, view);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$200() {
        ChatGreetingsView.showPremiumSheet(getContext(), this.currentAccount, this.dialog_id, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$201(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$202(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$203() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$updateFilteredMessages$70(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject.getId() - messageObject2.getId();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$updateFilteredMessages$71(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject2.getId() - messageObject.getId();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$93(View view) {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", this.chatInviterId);
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$94(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$135(MessageObject messageObject) {
        if (messageObject.isVideo()) {
            openPhotoViewerForMessage(null, messageObject);
        } else {
            MediaController.getInstance().playMessage(messageObject);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$136() {
        updatePinnedMessageView(this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$138(boolean z) {
        lambda$updateMessagesVisiblePart$137(z, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$143(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$144(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessageView$206(TLRPC.KeyboardButton keyboardButton, MessageObject messageObject, View view) {
        if (getParentActivity() != null) {
            if (this.bottomOverlayChat.getVisibility() != 0 || (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCallback) || (keyboardButton instanceof TLRPC.TL_keyboardButtonGame) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl) || (keyboardButton instanceof TLRPC.TL_keyboardButtonBuy) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUserProfile)) {
                this.chatActivityEnterView.didPressedBotButton(keyboardButton, messageObject, messageObject);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updatePinnedMessageView$207(TLRPC.KeyboardButton keyboardButton, MessageObject messageObject, PinnedMessageButton pinnedMessageButton, View view) {
        if (getParentActivity() == null || !((this.bottomOverlayChat.getVisibility() != 0 || (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) || (keyboardButton instanceof TLRPC.TL_keyboardButtonCallback) || (keyboardButton instanceof TLRPC.TL_keyboardButtonGame) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl) || (keyboardButton instanceof TLRPC.TL_keyboardButtonBuy) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) || (keyboardButton instanceof TLRPC.TL_keyboardButtonUserProfile)) && (keyboardButton instanceof TLRPC.TL_keyboardButtonUrl))) {
            return false;
        }
        openClickableLink(null, keyboardButton.url, true, null, messageObject, false);
        try {
            pinnedMessageButton.performHapticFeedback(0, 1);
        } catch (Exception unused) {
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$91(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$92(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateSearchUpDownButtonVisibility$145(ValueAnimator valueAnimator) {
        this.searchUpDownEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateSearchUpDownButtonVisibility$146(ValueAnimator valueAnimator) {
        this.searchUpDownEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateSecretStatus$149(View view) {
        LimitReachedBottomSheet.openBoostsForRemoveRestrictions(this, this.boostsStatus, this.canApplyBoosts, this.dialog_id, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateSelectedMessageReactions$151() {
        ReactionsContainerLayout reactionsContainerLayout = this.tagSelector;
        if (reactionsContainerLayout != null) {
            reactionsContainerLayout.requestLayout();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$208(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$209(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    private void loadSendAsPeers(boolean z) {
        TLRPC.Chat chat;
        if (this.sendAsPeersObj != null || (chat = this.currentChat) == null || !ChatObject.canSendAsPeers(chat) || this.chatActivityEnterView == null) {
            return;
        }
        TLRPC.TL_channels_sendAsPeers sendAsPeers = getMessagesController().getSendAsPeers(this.dialog_id);
        this.sendAsPeersObj = sendAsPeers;
        if (sendAsPeers != null) {
            this.chatActivityEnterView.updateSendAsButton(z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Browser.Progress makeProgressForBotButton(ChatMessageCell chatMessageCell, String str) {
        Browser.Progress progress = this.progressDialogCurrent;
        147 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (str != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 147(chatMessageCell, str);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Browser.Progress makeProgressForForward(ChatMessageCell chatMessageCell) {
        Browser.Progress progress = this.progressDialogCurrent;
        146 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 146(chatMessageCell);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    private Browser.Progress makeProgressForLink(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
        Browser.Progress progress = this.progressDialogCurrent;
        145 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (characterStyle != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 145(chatMessageCell, characterStyle);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Browser.Progress makeProgressForPaidMedia(ChatMessageCell chatMessageCell) {
        Browser.Progress progress = this.progressDialogCurrent;
        148 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 148(chatMessageCell);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    private void markSponsoredAsRead(MessageObject messageObject) {
        if (!messageObject.isSponsored() || messageObject.viewsReloaded) {
            return;
        }
        messageObject.viewsReloaded = true;
        TLRPC.TL_channels_viewSponsoredMessage tL_channels_viewSponsoredMessage = new TLRPC.TL_channels_viewSponsoredMessage();
        tL_channels_viewSponsoredMessage.channel = MessagesController.getInputChannel(this.currentChat);
        tL_channels_viewSponsoredMessage.random_id = messageObject.sponsoredId;
        getConnectionsManager().sendRequest(tL_channels_viewSponsoredMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda244
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.lambda$markSponsoredAsRead$326(tLObject, tL_error);
            }
        });
        getMessagesController().markSponsoredAsRead(this.dialog_id, messageObject);
    }

    private void migrateToNewChat(final MessageObject messageObject) {
        BaseFragment chatUsersActivity;
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null) {
            return;
        }
        final long j = messageObject.messageOwner.action.channel_id;
        final BaseFragment baseFragment = iNavigationLayout.getFragmentStack().size() > 0 ? (BaseFragment) this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) : null;
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        final INavigationLayout iNavigationLayout2 = this.parentLayout;
        if (indexOf <= 0 || (baseFragment instanceof ChatActivity) || (baseFragment instanceof ProfileActivity) || !this.currentChat.creator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda193
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$migrateToNewChat$184(baseFragment, messageObject, iNavigationLayout2);
                }
            });
        } else {
            int size = iNavigationLayout2.getFragmentStack().size() - 1;
            while (indexOf < size) {
                BaseFragment baseFragment2 = (BaseFragment) iNavigationLayout2.getFragmentStack().get(indexOf);
                if (baseFragment2 instanceof ChatActivity) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", j);
                    chatUsersActivity = new ChatActivity(bundle);
                } else if (baseFragment2 instanceof ProfileActivity) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("chat_id", j);
                    chatUsersActivity = new ProfileActivity(bundle2);
                } else if (baseFragment2 instanceof ChatEditActivity) {
                    Bundle bundle3 = new Bundle();
                    bundle3.putLong("chat_id", j);
                    chatUsersActivity = new ChatEditActivity(bundle3);
                } else if (baseFragment2 instanceof ChatUsersActivity) {
                    if (!((ChatUsersActivity) baseFragment2).hasSelectType()) {
                        Bundle arguments = baseFragment2.getArguments();
                        arguments.putLong("chat_id", j);
                        chatUsersActivity = new ChatUsersActivity(arguments);
                    }
                    baseFragment2.removeSelfFromStack();
                    indexOf++;
                } else {
                    indexOf++;
                }
                iNavigationLayout2.addFragmentToStack(chatUsersActivity, indexOf);
                baseFragment2.removeSelfFromStack();
                indexOf++;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda194
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$migrateToNewChat$185(j);
            }
        }, 1000L);
    }

    private void moveScrollToLastMessage(boolean z) {
        if (this.chatListView == null || this.messages.isEmpty() || this.pinchToZoomHelper.isInOverlayMode()) {
            return;
        }
        this.chatLayoutManager.scrollToPositionWithOffset(z ? getSponsoredMessagesCount() : 0, 0);
        this.chatListView.stopScroll();
    }

    public static ChatActivity of(long j) {
        String str;
        Bundle bundle = new Bundle();
        if (j >= 0) {
            str = "user_id";
        } else {
            j = -j;
            str = "chat_id";
        }
        bundle.putLong(str, j);
        return new ChatActivity(bundle);
    }

    public static ChatActivity of(long j, int i) {
        String str;
        Bundle bundle = new Bundle();
        if (j >= 0) {
            str = "user_id";
        } else {
            j = -j;
            str = "chat_id";
        }
        bundle.putLong(str, j);
        bundle.putInt("message_id", i);
        return new ChatActivity(bundle);
    }

    private void openAnotherForward() {
        MessagePreviewParams.Messages messages;
        ArrayList<MessageObject> arrayList;
        String formatString;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messagePreviewParams.isEmpty() || (messages = this.messagePreviewParams.forwardMessages) == null || (arrayList = messages.messages) == null) {
            return;
        }
        int size = arrayList.size();
        long j = 0;
        long j2 = 0;
        for (int i = 0; i < size; i++) {
            MessageObject messageObject = this.messagePreviewParams.forwardMessages.messages.get(i);
            if (j == 0) {
                j2 = messageObject.getDialogId();
                j = messageObject.getFromChatId();
            } else if (j != messageObject.getFromChatId()) {
                break;
            }
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setButtonsVertical(true);
        int i2 = (j2 > 0L ? 1 : (j2 == 0L ? 0 : -1));
        MessagesController messagesController = getMessagesController();
        if (i2 > 0) {
            TLRPC.User user = messagesController.getUser(Long.valueOf(j2));
            if (user == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardPrivate", R.string.CancelForwardPrivate, LocaleController.formatPluralString("MessagesBold", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]), ContactsController.formatName(user.first_name, user.last_name));
        } else {
            TLRPC.Chat chat = messagesController.getChat(Long.valueOf(-j2));
            if (chat == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardChat", R.string.CancelForwardChat, LocaleController.formatPluralString("MessagesBold", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]), chat.title);
        }
        builder.setMessage(AndroidUtilities.replaceTags(formatString));
        builder.setTitle(LocaleController.formatPluralString("messages", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]));
        builder.setPositiveButton(LocaleController.getString(R.string.CancelForwarding), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda217
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i3) {
                ChatActivity.this.lambda$openAnotherForward$99(dialogInterface, i3);
            }
        });
        builder.setNegativeButton(LocaleController.getString(R.string.ShowForwardingOptions), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda218
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i3) {
                ChatActivity.this.lambda$openAnotherForward$100(dialogInterface, i3);
            }
        });
        AlertDialog create = builder.create();
        showDialog(create);
        TextView textView = (TextView) create.getButton(-1);
        if (textView != null) {
            textView.setTextColor(getThemedColor(Theme.key_text_RedBold));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openAttachMenu() {
        ChatAttachAlert chatAttachAlert;
        int i;
        if (getParentActivity() != null) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView == null || TextUtils.isEmpty(chatActivityEnterView.getSlowModeTimer())) {
                createChatAttachView();
                this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
                int i2 = Build.VERSION.SDK_INT;
                if (i2 == 21 || i2 == 22) {
                    this.chatActivityEnterView.closeKeyboard();
                }
                TLRPC.Chat chat = this.currentChat;
                if (chat == null || ChatObject.hasAdminRights(chat) || !this.currentChat.slowmode_enabled) {
                    chatAttachAlert = this.chatAttachAlert;
                    i = -1;
                } else {
                    chatAttachAlert = this.chatAttachAlert;
                    i = 10;
                }
                chatAttachAlert.setMaxSelectedPhotos(i, true);
                this.chatAttachAlert.enableDefaultMode();
                this.chatAttachAlert.init();
                this.chatAttachAlert.getCommentTextView().setText(this.chatActivityEnterView.getFieldText());
                ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                chatAttachAlert2.parentThemeDelegate = this.themeDelegate;
                showDialog(chatAttachAlert2);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:31:0x008b A[ADDED_TO_REGION] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openClickableLink(final CharacterStyle characterStyle, final String str, boolean z, final ChatMessageCell chatMessageCell, final MessageObject messageObject, boolean z2) {
        String str2;
        String str3;
        TLRPC.Message message;
        if (!z) {
            logSponsoredClicked(messageObject, false, false);
            String extractUsername = Browser.extractUsername(str);
            if (extractUsername != null) {
                String lowerCase = extractUsername.toLowerCase();
                if (ChatObject.hasPublicLink(this.currentChat, lowerCase) || UserObject.hasPublicUsername(this.currentUser, lowerCase)) {
                    ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                    if (chatAvatarContainer != null) {
                        chatAvatarContainer.openProfile(false);
                        return;
                    } else {
                        shakeContent();
                        return;
                    }
                } else if (str.startsWith("@")) {
                    getMessagesController().openByUserName(lowerCase, this, 0, makeProgressForLink(chatMessageCell, characterStyle));
                    return;
                }
            } else if (str.startsWith("#") || str.startsWith("$")) {
                int i = this.chatMode;
                if (i != 1 && i != 2 && i != 7) {
                    lambda$openHashtagSearch$304(str);
                    return;
                }
                this.chatActivityDelegate.openHashtagSearch(str);
                if (this.chatMode != 7) {
                    lambda$onBackPressed$300();
                    return;
                }
                return;
            }
            processExternalUrl(0, str, characterStyle, chatMessageCell, false, false);
            return;
        }
        if (str.startsWith("@")) {
            if (chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
            didLongPressUsername(chatMessageCell, characterStyle, str.substring(1));
        } else if (characterStyle != null) {
            if (chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
            didLongPressLink(chatMessageCell, messageObject, characterStyle, str);
        } else {
            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
            final int intValue = str.startsWith("video?") ? Utilities.parseInt((CharSequence) str).intValue() : -1;
            if (intValue >= 0) {
                builder.setTitle(AndroidUtilities.formatDuration(intValue, false));
            } else {
                try {
                    Uri parse = Uri.parse(str);
                    str2 = Browser.replaceHostname(parse, Browser.IDN_toUnicode(parse.getHost()), null);
                } catch (Exception e) {
                    try {
                        FileLog.e((Throwable) e, false);
                        str2 = str;
                    } catch (Exception e2) {
                        e = e2;
                        str2 = str;
                        FileLog.e(e);
                        str3 = str2;
                        builder.setTitle(str3);
                        builder.setTitleMultipleLines(true);
                        builder.setItems((getMessagesController().isChatNoForwards(this.currentChat) && (messageObject == null || (message = messageObject.messageOwner) == null || !message.noforwards)) ? new CharSequence[]{LocaleController.getString(R.string.Open), LocaleController.getString(R.string.Copy)} : new CharSequence[]{LocaleController.getString(R.string.Open)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda93
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i2) {
                                ChatActivity.this.lambda$openClickableLink$324(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i2);
                            }
                        });
                        builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda94
                            @Override // android.content.DialogInterface.OnDismissListener
                            public final void onDismiss(DialogInterface dialogInterface) {
                                ChatActivity.lambda$openClickableLink$325(ChatMessageCell.this, dialogInterface);
                            }
                        });
                        showDialog(builder.create());
                    }
                }
                try {
                    str3 = URLDecoder.decode(str2.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e3) {
                    e = e3;
                    FileLog.e(e);
                    str3 = str2;
                    builder.setTitle(str3);
                    builder.setTitleMultipleLines(true);
                    builder.setItems((getMessagesController().isChatNoForwards(this.currentChat) && (messageObject == null || (message = messageObject.messageOwner) == null || !message.noforwards)) ? new CharSequence[]{LocaleController.getString(R.string.Open), LocaleController.getString(R.string.Copy)} : new CharSequence[]{LocaleController.getString(R.string.Open)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda93
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.lambda$openClickableLink$324(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i2);
                        }
                    });
                    builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda94
                        @Override // android.content.DialogInterface.OnDismissListener
                        public final void onDismiss(DialogInterface dialogInterface) {
                            ChatActivity.lambda$openClickableLink$325(ChatMessageCell.this, dialogInterface);
                        }
                    });
                    showDialog(builder.create());
                }
                builder.setTitle(str3);
                builder.setTitleMultipleLines(true);
            }
            builder.setItems((getMessagesController().isChatNoForwards(this.currentChat) && (messageObject == null || (message = messageObject.messageOwner) == null || !message.noforwards)) ? new CharSequence[]{LocaleController.getString(R.string.Open), LocaleController.getString(R.string.Copy)} : new CharSequence[]{LocaleController.getString(R.string.Open)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda93
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i2) {
                    ChatActivity.this.lambda$openClickableLink$324(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i2);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda94
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$openClickableLink$325(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openDiscussionMessageChat(long j, final MessageObject messageObject, int i, final long j2, final int i2, final int i3, final MessageObject messageObject2) {
        int i4 = i;
        final TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(j));
        final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage = new TLRPC.TL_messages_getDiscussionMessage();
        tL_messages_getDiscussionMessage.peer = MessagesController.getInputPeer(chat);
        tL_messages_getDiscussionMessage.msg_id = i4;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("getDiscussionMessage chat = " + chat.id + " msg_id = " + i4);
        }
        this.commentLoadingMessageId = 0;
        this.hideCommentLoading = false;
        this.savedDiscussionMessage = null;
        this.savedNoDiscussion = false;
        this.savedNoHistory = false;
        this.savedHistory = null;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.invalidateViews();
        }
        if (this.commentMessagesRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentMessagesRequestId, false);
        }
        if (this.commentRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentRequestId, false);
        }
        if (messageObject2 != null) {
            i4 = messageObject2.getId();
        }
        this.commentLoadingMessageId = i4;
        this.hideCommentLoading = false;
        this.commentLoadingStartedAt = System.currentTimeMillis();
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null) {
            recyclerListView2.invalidateViews();
        }
        final int i5 = this.commentLoadingGuid + 1;
        this.commentLoadingGuid = i5;
        this.commentRequestId = getConnectionsManager().sendRequest(tL_messages_getDiscussionMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda303
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$openDiscussionMessageChat$317(i5, i2, j2, i3, messageObject2, tL_messages_getDiscussionMessage, chat, messageObject, tLObject, tL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.commentRequestId, this.classGuid);
    }

    private void openEditingMessageInPhotoEditor() {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (this.editingMessageObject.isPhoto() || this.editingMessageObject.isVideo()) {
                final MessageObject messageObject2 = this.editingMessageObject;
                File file = null;
                if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath)) {
                    File file2 = new File(messageObject2.messageOwner.attachPath);
                    if (file2.exists()) {
                        file = file2;
                    }
                }
                if (file == null) {
                    file = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject2.messageOwner);
                }
                if (file.exists()) {
                    PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                    ArrayList arrayList = new ArrayList();
                    final MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, file.getAbsolutePath(), 0, messageObject2.isVideo(), 0, 0, 0L);
                    photoEntry.caption = this.chatActivityEnterView.getFieldText();
                    arrayList.add(photoEntry);
                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 2, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.105
                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean allowSendingSubmenu() {
                            return false;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean canCaptureMorePhotos() {
                            return false;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean closeKeyboard() {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.chatActivityEnterView == null || !chatActivity.isKeyboardVisible()) {
                                return false;
                            }
                            ChatActivity.this.chatActivityEnterView.closeKeyboard();
                            return true;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public MessageObject getEditingMessageObject() {
                            MessageObject messageObject3 = ChatActivity.this.editingMessageObject;
                            MessageObject messageObject4 = messageObject2;
                            if (messageObject3 == messageObject4) {
                                return messageObject4;
                            }
                            return null;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject3, TLRPC.FileLocation fileLocation, int i, boolean z) {
                            return ChatActivity.this.getPlaceForPhoto(messageObject2, null, i, z, true);
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public void onApplyCaption(CharSequence charSequence) {
                            ChatActivity.this.chatActivityEnterView.setFieldText(charSequence, true);
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.editingMessageObject != messageObject2) {
                                return;
                            }
                            MediaController.PhotoEntry photoEntry2 = photoEntry;
                            if (photoEntry2.isCropped || photoEntry2.isPainted || photoEntry2.isFiltered || videoEditedInfo != null) {
                                chatActivity.sendMedia(photoEntry2, videoEditedInfo, z, i2, z2);
                            } else {
                                chatActivity.chatActivityEnterView.doneEditingMessage();
                            }
                        }
                    }, this);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openForward(boolean z) {
        HintView hintView;
        View view;
        if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
            String string = LocaleController.getString(getMessagesController().isChatNoForwards(this.currentChat) ? (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) ? R.string.ForwardsRestrictedInfoGroup : R.string.ForwardsRestrictedInfoChannel : R.string.ForwardsRestrictedInfoBot);
            if (z) {
                if (this.fwdRestrictedTopHint == null) {
                    SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                    int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    HintView hintView2 = new HintView((Context) getParentActivity(), 7, true);
                    this.fwdRestrictedTopHint = hintView2;
                    sizeNotifierFrameLayout.addView(hintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                    this.fwdRestrictedTopHint.setAlpha(0.0f);
                    this.fwdRestrictedTopHint.setVisibility(4);
                }
                this.fwdRestrictedTopHint.setText(string);
                hintView = this.fwdRestrictedTopHint;
                view = this.actionBar.getActionMode().getItem(11);
            } else {
                if (this.fwdRestrictedBottomHint == null) {
                    SizeNotifierFrameLayout sizeNotifierFrameLayout2 = (SizeNotifierFrameLayout) this.fragmentView;
                    int indexOfChild2 = sizeNotifierFrameLayout2.indexOfChild(this.chatActivityEnterView);
                    if (indexOfChild2 == -1) {
                        return;
                    }
                    HintView hintView3 = new HintView(getParentActivity(), 9);
                    this.fwdRestrictedBottomHint = hintView3;
                    sizeNotifierFrameLayout2.addView(hintView3, indexOfChild2 + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                    this.fwdRestrictedBottomHint.setAlpha(0.0f);
                    this.fwdRestrictedBottomHint.setVisibility(4);
                }
                this.fwdRestrictedBottomHint.setText(string);
                hintView = this.fwdRestrictedBottomHint;
                view = this.forwardButton;
            }
            hintView.showForView(view, true);
            return;
        }
        int i = 0;
        boolean z2 = false;
        for (int i2 = 0; i2 < 2; i2++) {
            for (int i3 = 0; i3 < this.selectedMessagesIds[i2].size(); i3++) {
                MessageObject messageObject = (MessageObject) this.selectedMessagesIds[i2].valueAt(i3);
                if (messageObject.isPoll()) {
                    i = messageObject.isPublicPoll() ? 2 : 1;
                    if (i == 2) {
                        break;
                    }
                } else if (messageObject.isInvoice()) {
                    z2 = true;
                }
            }
            if (i == 2) {
                break;
            }
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
            this.selectionReactionsOverlay.setHiddenByScroll(true);
        }
        Bundle bundle = new Bundle();
        bundle.putBoolean("onlySelect", true);
        bundle.putInt("dialogsType", 3);
        bundle.putInt("messagesCount", this.canForwardMessagesCount);
        bundle.putInt("hasPoll", i);
        bundle.putBoolean("hasInvoice", z2);
        bundle.putBoolean("canSelectTopics", true);
        DialogsActivity dialogsActivity = new DialogsActivity(bundle);
        dialogsActivity.setDelegate(this);
        presentFragment(dialogsActivity);
    }

    private void openForwardingPreview(int i) {
        TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || this.forwardingPreviewView != null) {
            return;
        }
        if (messagePreviewParams.linkMessage != null) {
            int i2 = this.currentAccount;
            TLRPC.WebPage webPage = this.foundWebPage;
            CharSequence fieldText = this.chatActivityEnterView.getFieldText();
            MessageObject messageObject = this.replyingMessageObject;
            if (messageObject == this.threadMessageObject) {
                messageObject = null;
            }
            messagePreviewParams.updateLink(i2, webPage, fieldText, messageObject, this.replyingQuote, this.editingMessageObject);
        }
        if (this.messagePreviewParams.isEmpty()) {
            return;
        }
        this.keyboardWasVisible = this.chatActivityEnterView.isKeyboardVisible();
        Context context = this.contentView.getContext();
        MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
        TLRPC.User user = this.currentUser;
        TLRPC.Chat chat = this.currentChat;
        int i3 = this.currentAccount;
        ThemeDelegate themeDelegate = this.themeDelegate;
        ReplyQuote replyQuote = this.replyingQuote;
        68 r13 = new 68(context, this, messagePreviewParams2, user, chat, i3, themeDelegate, i, replyQuote != null && replyQuote.outdated);
        this.forwardingPreviewView = r13;
        this.messagePreviewParams.attach(r13);
        TLRPC.ChatFull chatFull = this.chatInfo;
        TLRPC.Peer peer = chatFull != null ? chatFull.default_send_as : null;
        if (peer == null && (tL_channels_sendAsPeers = this.sendAsPeersObj) != null && !tL_channels_sendAsPeers.peers.isEmpty()) {
            peer = this.sendAsPeersObj.peers.get(0).peer;
        }
        this.forwardingPreviewView.setSendAsPeer(peer);
        checkShowBlur(true);
        this.contentView.addView(this.forwardingPreviewView);
        if (this.keyboardWasVisible) {
            this.chatActivityEnterView.freezeEmojiView(true);
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
    }

    private boolean openLinkInternally(String str, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, int i) {
        return openLinkInternally(str, chatMessageCell, characterStyle, i, 1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean openLinkInternally(String str, final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final int i, final int i2) {
        TLRPC.TL_forumTopic findTopic;
        String group;
        int i3;
        if (this.currentChat != null && str != null) {
            Runnable runnable = (chatMessageCell == null || (characterStyle == null && i2 == 1)) ? null : new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda70
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$openLinkInternally$327(i, i2, characterStyle, chatMessageCell);
                }
            };
            if (str.startsWith("tg:privatepost") || str.startsWith("tg://privatepost")) {
                Uri parse = Uri.parse(str.replace("tg:privatepost", "tg://telegram.org").replace("tg://privatepost", "tg://telegram.org"));
                int intValue = Utilities.parseInt((CharSequence) parse.getQueryParameter("post")).intValue();
                long longValue = Utilities.parseLong(parse.getQueryParameter("channel")).longValue();
                int intValue2 = Utilities.parseInt((CharSequence) parse.getQueryParameter("thread")).intValue();
                long j = this.currentChat.id;
                if (longValue == j && intValue != 0) {
                    if (intValue2 != 0) {
                        openDiscussionMessageChat(j, null, intValue2, 0L, -1, 0, null);
                    } else {
                        this.showScrollToMessageError = true;
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue);
                            lambda$onBackPressed$300();
                        } else {
                            scrollToMessageId(intValue, i, true, 0, false, 0, runnable);
                        }
                    }
                    return true;
                }
            } else {
                try {
                    if (ChatObject.getPublicUsername(this.currentChat) != null) {
                        if (publicMsgUrlPattern == null) {
                            publicMsgUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)/([0-9]+)/?([0-9]+)?");
                            voiceChatUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)\\?(voicechat+)");
                        }
                        Matcher matcher = publicMsgUrlPattern.matcher(str);
                        if (matcher.find(2) && matcher.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher.group(2))) {
                            Uri parse2 = Uri.parse(str);
                            int intValue3 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("thread")).intValue();
                            int intValue4 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("comment")).intValue();
                            if (intValue3 == 0 && intValue4 == 0) {
                                if (matcher.group(4) != null) {
                                    i3 = Integer.parseInt(matcher.group(3));
                                    group = matcher.group(4);
                                } else {
                                    group = matcher.group(3);
                                    i3 = 0;
                                }
                                int parseInt = Integer.parseInt(group);
                                if (!ChatObject.isForum(this.currentChat) || i3 == getTopicId()) {
                                    this.showScrollToMessageError = true;
                                    if (this.chatMode == 2) {
                                        this.chatActivityDelegate.openReplyMessage(parseInt);
                                        lambda$onBackPressed$300();
                                    } else {
                                        int timestampFromLink = LaunchActivity.getTimestampFromLink(parse2);
                                        this.startFromVideoTimestamp = timestampFromLink;
                                        if (timestampFromLink >= 0) {
                                            this.startFromVideoMessageId = parseInt;
                                        }
                                        scrollToMessageId(parseInt, i, true, 0, false, 0, runnable);
                                    }
                                    return true;
                                }
                                return false;
                            }
                            return false;
                        }
                        if (!str.startsWith("tg:resolve") && !str.startsWith("tg://resolve")) {
                            Matcher matcher2 = voiceChatUrlPattern.matcher(str);
                            try {
                                if (matcher2.find(2) && matcher2.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher2.group(2))) {
                                    String queryParameter = Uri.parse(str).getQueryParameter("voicechat");
                                    if (!TextUtils.isEmpty(queryParameter)) {
                                        this.voiceChatHash = queryParameter;
                                        checkGroupCallJoin(true);
                                        return true;
                                    }
                                }
                            } catch (Exception e) {
                                FileLog.e(e);
                            }
                        }
                        Uri parse3 = Uri.parse(str.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org"));
                        String lowerCase = parse3.getQueryParameter("domain").toLowerCase();
                        int intValue5 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("post")).intValue();
                        int intValue6 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("thread")).intValue();
                        int intValue7 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("comment")).intValue();
                        if (ChatObject.hasPublicLink(this.currentChat, lowerCase) && intValue5 != 0 && intValue6 == 0 && intValue7 == 0) {
                            if (this.chatMode == 2) {
                                this.chatActivityDelegate.openReplyMessage(intValue5);
                                lambda$onBackPressed$300();
                            } else {
                                scrollToMessageId(intValue5, i, true, 0, false, 0, runnable);
                            }
                            return true;
                        }
                        return false;
                    }
                    if (privateMsgUrlPattern == null) {
                        privateMsgUrlPattern = Pattern.compile("(https://)?t.me/c/([0-9]+)/([0-9]+)/?([0-9]+)?");
                    }
                    Matcher matcher3 = privateMsgUrlPattern.matcher(str);
                    if (matcher3.find(2) && matcher3.find(3) && matcher3.group(4) == null) {
                        long parseLong = Long.parseLong(matcher3.group(2));
                        int parseInt2 = Integer.parseInt(matcher3.group(3));
                        if (parseLong == this.currentChat.id && parseInt2 != 0) {
                            Uri parse4 = Uri.parse(str);
                            int intValue8 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("thread")).intValue();
                            int intValue9 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("topic")).intValue();
                            int intValue10 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("comment")).intValue();
                            if (intValue8 == 0 && intValue9 == 0 && intValue10 == 0) {
                                if (ChatObject.isForum(this.currentChat) && (findTopic = getMessagesController().getTopicsController().findTopic(parseLong, parseInt2)) != null) {
                                    TLRPC.TL_forumTopic tL_forumTopic = this.forumTopic;
                                    return tL_forumTopic != null && tL_forumTopic.id == findTopic.id;
                                }
                                this.showScrollToMessageError = true;
                                if (this.chatMode == 2) {
                                    this.chatActivityDelegate.openReplyMessage(parseInt2);
                                    lambda$onBackPressed$300();
                                } else {
                                    scrollToMessageId(parseInt2, i, true, 0, false, 0, runnable);
                                }
                                return true;
                            }
                            return false;
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:13:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:15:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openMessageInOriginalDialog(MessageObject messageObject) {
        Bundle bundle = new Bundle();
        TLRPC.Peer peer = messageObject.messageOwner.peer_id;
        long j = peer.channel_id;
        if (j == 0) {
            j = peer.chat_id;
            if (j == 0) {
                long j2 = peer.user_id;
                if (j2 != 0) {
                    bundle.putLong("user_id", j2);
                }
                bundle.putInt("message_id", messageObject.getRealId());
                bundle.putBoolean("need_remove_previous_same_chat_activity", false);
                if (getMessagesController().checkCanOpenChat(bundle, this)) {
                    return;
                }
                presentFragment(DialogsActivity.highlightFoundQuote(new ChatActivity(bundle), messageObject));
                return;
            }
        }
        bundle.putLong("chat_id", j);
        bundle.putInt("message_id", messageObject.getRealId());
        bundle.putBoolean("need_remove_previous_same_chat_activity", false);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0067  */
    /* JADX WARN: Removed duplicated region for block: B:21:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openOriginalReplyChat(MessageObject messageObject) {
        if (UserObject.isUserSelf(this.currentUser)) {
            TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
            if (messageFwdHeader.saved_from_peer.user_id == this.currentUser.id) {
                scrollToMessageId(messageFwdHeader.saved_from_msg_id, messageObject.getId(), true, 0, true, 0);
                return;
            }
        }
        Bundle bundle = new Bundle();
        TLRPC.Peer peer = messageObject.messageOwner.fwd_from.saved_from_peer;
        long j = peer.channel_id;
        if (j == 0) {
            j = peer.chat_id;
            if (j == 0) {
                long j2 = peer.user_id;
                if (j2 != 0) {
                    bundle.putLong("user_id", j2);
                }
                bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
                if (getMessagesController().checkCanOpenChat(bundle, this)) {
                    return;
                }
                presentFragment(new ChatActivity(bundle));
                return;
            }
        }
        bundle.putLong("chat_id", j);
        bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openPinnedMessagesList(boolean z) {
        INavigationLayout iNavigationLayout;
        long j;
        String str;
        if (getParentActivity() == null || (iNavigationLayout = this.parentLayout) == null || iNavigationLayout.getLastFragment() != this || this.pinnedMessageIds.isEmpty()) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC.Chat chat = this.currentChat;
        if (chat != null) {
            j = chat.id;
            str = "chat_id";
        } else {
            j = this.currentUser.id;
            str = "user_id";
        }
        bundle.putLong(str, j);
        bundle.putInt("chatMode", 2);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.pinnedMessageIds = new ArrayList(this.pinnedMessageIds);
        chatActivity.pinnedMessageObjects = new HashMap(this.pinnedMessageObjects);
        int size = this.pinnedMessageIds.size();
        for (int i = 0; i < size; i++) {
            Integer num = (Integer) this.pinnedMessageIds.get(i);
            MessageObject messageObject = (MessageObject) this.pinnedMessageObjects.get(num);
            MessageObject messageObject2 = (MessageObject) this.messagesDict[0].get(num.intValue());
            if (messageObject == null) {
                messageObject = messageObject2;
            } else if (messageObject2 != null) {
                messageObject.mediaExists = messageObject2.mediaExists;
                messageObject.attachPathExists = messageObject2.attachPathExists;
            }
            if (messageObject != null) {
                chatActivity.pinnedMessageObjects.put(num, messageObject);
                chatActivity.updatePinnedTopicStarterMessage();
            }
        }
        chatActivity.loadedPinnedMessagesCount = this.loadedPinnedMessagesCount;
        chatActivity.totalPinnedMessagesCount = this.isTopic ? this.pinnedMessageIds.size() : this.totalPinnedMessagesCount;
        chatActivity.pinnedEndReached = this.pinnedEndReached;
        chatActivity.userInfo = this.userInfo;
        chatActivity.chatInfo = this.chatInfo;
        chatActivity.chatActivityDelegate = new 74();
        if (!z) {
            presentFragment(chatActivity, false);
            return;
        }
        presentFragmentAsPreview(chatActivity);
        checkShowBlur(true);
    }

    public static ChatActivity openReportChat(long j, String str, byte[] bArr) {
        String str2;
        BaseFragment safeLastFragment = LaunchActivity.getSafeLastFragment();
        if (safeLastFragment == null) {
            return null;
        }
        Bundle bundle = new Bundle();
        if (DialogObject.isUserDialog(j)) {
            str2 = "user_id";
        } else {
            j = -j;
            str2 = "chat_id";
        }
        bundle.putLong(str2, j);
        bundle.putString("reportTitle", str);
        bundle.putByteArray("reportOption", bArr);
        ChatActivity chatActivity = new ChatActivity(bundle);
        safeLastFragment.presentFragment(chatActivity);
        return chatActivity;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openScheduledMessages() {
        long j;
        String str;
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null || iNavigationLayout.getLastFragment() != this) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat != null) {
            bundle.putInt("enc_id", encryptedChat.id);
        } else {
            TLRPC.Chat chat = this.currentChat;
            if (chat != null) {
                j = chat.id;
                str = "chat_id";
            } else {
                j = this.currentUser.id;
                str = "user_id";
            }
            bundle.putLong(str, j);
        }
        bundle.putInt("chatMode", 1);
        ChatActivity chatActivity = new ChatActivity(bundle);
        if (this.isTopic) {
            ForumUtilities.applyTopic(chatActivity, MessagesStorage.TopicKey.of(getDialogId(), getTopicId()));
        }
        chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.87
            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2) {
                ChatActivityDelegate.-CC.$default$onUnpin(this, z, z2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openHashtagSearch(String str2) {
                ChatActivity.this.lambda$openHashtagSearch$304(str2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openReplyMessage(int i) {
                ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
            }
        };
        presentFragment(chatActivity, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: openSearchWithUser */
    public void lambda$openSearchWithUser$305(final TLRPC.User user) {
        boolean z;
        HintView2 hintView2 = this.savedMessagesHint;
        if (hintView2 == null || !hintView2.shown()) {
            z = false;
        } else {
            this.savedMessagesHint.hide();
            z = true;
        }
        HintView2 hintView22 = this.savedMessagesSearchHint;
        if (hintView22 != null && hintView22.shown()) {
            this.savedMessagesSearchHint.hide();
            z = true;
        }
        if (z) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda383
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$openSearchWithUser$305(user);
                }
            }, 200L);
            return;
        }
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.searchItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.searchIconItem;
            if (actionBarMenuItem3 != null && this.showSearchAsIcon) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem3 = this.audioCallIconItem;
            if (lazyItem3 != null && this.showAudioCallAsIcon) {
                lazyItem3.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
            ImageView imageView = this.searchCalendarButton;
            if (imageView != null) {
                imageView.setVisibility(8);
            }
            ImageView imageView2 = this.searchUserButton;
            if (imageView2 != null) {
                imageView2.setVisibility(8);
            }
        }
        ActionBarMenuItem actionBarMenuItem4 = this.searchItem;
        if (actionBarMenuItem4 != null) {
            this.preventReopenSearchWithText = true;
            this.openSearchKeyboard = false;
            actionBarMenuItem4.openSearch(false);
            this.preventReopenSearchWithText = false;
        }
        searchUserMessages(user, null);
        updatePinnedMessageView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openUserProfile(long j) {
        BaseFragment profileActivity;
        int i = 1;
        if (j < 0) {
            if (j != getDialogId()) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", -j);
                if (getMessagesController().checkCanOpenChat(bundle, this)) {
                    profileActivity = new ChatActivity(bundle);
                    presentFragment(profileActivity);
                }
                return;
            }
            this.avatarContainer.openProfile(true);
        } else if (j == getUserConfig().getClientUserId()) {
            Bundle bundle2 = new Bundle();
            bundle2.putLong("user_id", j);
            bundle2.putBoolean("my_profile", true);
            profileActivity = new ProfileActivity(bundle2, null);
            presentFragment(profileActivity);
        } else {
            if (j != getDialogId()) {
                Bundle bundle3 = new Bundle();
                bundle3.putLong("user_id", j);
                if (this.currentEncryptedChat != null && j == this.currentUser.id) {
                    bundle3.putLong("dialog_id", this.dialog_id);
                }
                ProfileActivity profileActivity2 = new ProfileActivity(bundle3);
                TLRPC.User user = this.currentUser;
                profileActivity2.setPlayProfileAnimation((user == null || user.id != j) ? 0 : 0);
                presentFragment(profileActivity2);
                return;
            }
            this.avatarContainer.openProfile(true);
        }
    }

    private TLRPC.KeyboardButton pinnedButton(MessageObject messageObject) {
        TLRPC.Message message;
        TLRPC.ReplyMarkup replyMarkup;
        ArrayList<TLRPC.TL_keyboardButtonRow> arrayList;
        if (messageObject == null || (message = messageObject.messageOwner) == null || (replyMarkup = message.reply_markup) == null || (arrayList = replyMarkup.rows) == null || arrayList.size() != 1 || messageObject.messageOwner.reply_markup.rows.get(0) == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons.size() != 1) {
            return null;
        }
        return messageObject.messageOwner.reply_markup.rows.get(0).buttons.get(0);
    }

    private boolean pinnedOnlyStarterMessage() {
        return this.pinnedMessageIds.size() == 1 && this.topicStarterMessageObject != null && ((Integer) this.pinnedMessageIds.get(0)).intValue() == this.topicStarterMessageObject.getId();
    }

    private void playReactionAnimation(Integer num) {
        ChatMessageCell findMessageCell;
        if (this.fragmentView == null || (findMessageCell = findMessageCell(num.intValue(), false)) == null) {
            return;
        }
        TLRPC.MessagePeerReaction randomUnreadReaction = findMessageCell.getMessageObject().getRandomUnreadReaction();
        if (randomUnreadReaction != null && findMessageCell.reactionsLayoutInBubble.hasUnreadReactions) {
            ReactionsEffectOverlay.show(this, null, findMessageCell, null, 0.0f, 0.0f, ReactionsLayoutInBubble.VisibleReaction.fromTL(randomUnreadReaction.reaction), this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
            ReactionsEffectOverlay.startAnimation();
        }
        findMessageCell.markReactionsAsRead();
    }

    /* JADX WARN: Code restructure failed: missing block: B:63:0x0115, code lost:
        if (r5 == r42.groupedMessagesMap.get(r1.getGroupId())) goto L47;
     */
    /* JADX WARN: Removed duplicated region for block: B:107:0x01cd  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x01f5  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0292  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x02c7  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x034f  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x03c6  */
    /* JADX WARN: Removed duplicated region for block: B:235:0x0408  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0414  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x042c  */
    /* JADX WARN: Removed duplicated region for block: B:247:0x0476  */
    /* JADX WARN: Removed duplicated region for block: B:251:0x0483  */
    /* JADX WARN: Removed duplicated region for block: B:274:0x04ff  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0072  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x05d1  */
    /* JADX WARN: Removed duplicated region for block: B:308:0x05d5  */
    /* JADX WARN: Removed duplicated region for block: B:339:0x0674  */
    /* JADX WARN: Removed duplicated region for block: B:343:0x068d  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0164  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processDeletedMessages(ArrayList arrayList, long j, boolean z) {
        char c;
        MessageObject messageObject;
        int size;
        boolean z2;
        int i;
        boolean z3;
        int i2;
        boolean z4;
        boolean z5;
        boolean z6;
        LongSparseArray longSparseArray;
        int i3;
        HintView2 hintView2;
        ArrayList arrayList2;
        int i4;
        ChatAvatarContainer chatAvatarContainer;
        TLRPC.User user;
        char c2;
        int i5;
        ChatActivityAdapter chatActivityAdapter;
        ArrayList arrayList3;
        int i6;
        Object obj;
        LongSparseArray longSparseArray2;
        ArrayList arrayList4;
        int i7;
        ArrayList arrayList5;
        boolean z7;
        int i8;
        boolean z8;
        int indexOf;
        boolean z9;
        LongSparseArray longSparseArray3;
        ArrayList arrayList6;
        LongSparseArray longSparseArray4;
        ArrayList arrayList7;
        MessageObject.GroupedMessages groupedMessages;
        MessagesSearchAdapter messagesSearchAdapter;
        TLRPC.Message message;
        TLRPC.User user2;
        LongSparseArray longSparseArray5;
        int i9;
        int i10;
        INavigationLayout iNavigationLayout;
        int size2;
        int i11;
        int i12;
        ArrayList arrayList8 = arrayList;
        ArrayList arrayList9 = new ArrayList();
        ArrayList arrayList10 = new ArrayList();
        int currentTime = getConnectionsManager().getCurrentTime();
        if (ChatObject.isChannel(this.currentChat)) {
            if (j == 0 && this.mergeDialogId != 0) {
                c = 1;
                messageObject = this.replyingMessageObject;
                if (messageObject != null && arrayList8.contains(Integer.valueOf(messageObject.getId()))) {
                    this.replyingMessageObject = null;
                    this.replyingQuote = null;
                    fallbackFieldPanel();
                }
                if (this.threadMessageObject != null && !this.isTopic && (iNavigationLayout = this.parentLayout) != null) {
                    size2 = iNavigationLayout.getFragmentStack().size() - 1;
                    i11 = 0;
                    while (i11 < size2) {
                        BaseFragment baseFragment = (BaseFragment) this.parentLayout.getFragmentStack().get(i11);
                        if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                            ChatActivity chatActivity = (ChatActivity) baseFragment;
                            if (chatActivity.needRemovePreviousSameChatActivity) {
                                i12 = size2;
                                if (chatActivity.dialog_id == this.dialog_id && getTopicId() == getTopicId() && chatActivity.getChatMode() == getChatMode()) {
                                    z2 = true;
                                    break;
                                }
                                i11++;
                                size2 = i12;
                            }
                        }
                        i12 = size2;
                        i11++;
                        size2 = i12;
                    }
                }
                z2 = false;
                LongSparseArray longSparseArray6 = null;
                LongSparseArray longSparseArray7 = null;
                i = 0;
                z3 = false;
                i2 = 0;
                z4 = false;
                boolean z10 = false;
                z5 = false;
                z6 = false;
                for (size = arrayList.size(); i < size; size = i7) {
                    Integer num = (Integer) arrayList8.get(i);
                    ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                    if (chatActivityAdapter2 == null || !chatActivityAdapter2.isFiltered) {
                        arrayList3 = arrayList10;
                        i6 = currentTime;
                        obj = this.messagesDict[c].get(num.intValue());
                    } else {
                        arrayList3 = arrayList10;
                        i6 = currentTime;
                        obj = this.filteredMessagesDict.get(num.intValue());
                    }
                    MessageObject messageObject2 = (MessageObject) obj;
                    MessageObject messageObject3 = this.selectedObject;
                    if (messageObject3 == null || messageObject2 != messageObject3) {
                        if (messageObject2 == null || (r5 = this.selectedObjectGroup) == null) {
                            longSparseArray2 = longSparseArray6;
                            arrayList4 = arrayList9;
                        } else {
                            longSparseArray2 = longSparseArray6;
                            arrayList4 = arrayList9;
                        }
                        if (c == 0) {
                            if (this.pinnedMessageObjects.containsKey(num)) {
                                this.pinnedMessageObjects.remove(num);
                                this.pinnedMessageIds.remove(num);
                                this.loadedPinnedMessagesCount = this.pinnedMessageIds.size();
                                int i13 = this.totalPinnedMessagesCount - 1;
                                this.totalPinnedMessagesCount = i13;
                                if (i13 < 0) {
                                    i10 = 0;
                                    this.totalPinnedMessagesCount = 0;
                                } else {
                                    i10 = 0;
                                }
                                if (this.currentPinnedMessageId == num.intValue()) {
                                    this.currentPinnedMessageId = i10;
                                }
                            }
                            this.repliesMessagesDict.remove(num.intValue());
                            updateReplyMessageOwners(num.intValue(), null);
                        }
                        if (messageObject2 == null) {
                            TLRPC.Message message2 = messageObject2.messageOwner;
                            if (message2.reply_to != null && !(message2.action instanceof TLRPC.TL_messageActionPinMessage)) {
                                int replyAnyMsgId = messageObject2.getReplyAnyMsgId();
                                MessageObject messageObject4 = this.threadMessageObject;
                                if (messageObject4 == null || messageObject4.getId() != replyAnyMsgId) {
                                    MessageObject messageObject5 = (MessageObject) this.messagesDict[c].get(replyAnyMsgId);
                                    if (messageObject5 != null && messageObject5.hasReplies()) {
                                        z8 = true;
                                        messageObject5.messageOwner.replies.replies--;
                                        messageObject5.viewsReloaded = false;
                                    }
                                } else {
                                    if (z2 || !this.threadMessageObject.hasReplies()) {
                                        i9 = 1;
                                    } else {
                                        i9 = 1;
                                        this.threadMessageObject.messageOwner.replies.replies--;
                                    }
                                    if (this.replyOriginalMessageId != 0) {
                                        i2 += i9;
                                    }
                                    z8 = true;
                                    z3 = true;
                                }
                                messageObject2.deleted = z8;
                                if (messageObject2.scheduled && z) {
                                    messageObject2.scheduledSent = z8;
                                }
                                if (this.editingMessageObject == messageObject2) {
                                    hideFieldPanel(z8);
                                }
                                ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                                indexOf = (chatActivityAdapter3 == null && chatActivityAdapter3.isFiltered && (longSparseArray5 = this.filteredMessagesDict) != null) ? chatActivityAdapter3.filteredMessages.indexOf(longSparseArray5.get(num.intValue())) : this.messages.indexOf(messageObject2);
                                if (indexOf == -1) {
                                    if (messageObject2.scheduled) {
                                        this.scheduledMessagesCount--;
                                        z6 = true;
                                    }
                                    if (this.selectedMessagesIds[c].indexOfKey(num.intValue()) >= 0) {
                                        boolean z11 = i == size + (-1);
                                        addToSelectedMessages(messageObject2, false, z11);
                                        z10 = z11;
                                        z4 = true;
                                    }
                                    ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                    MessageObject messageObject6 = (MessageObject) ((chatActivityAdapter4 == null || !chatActivityAdapter4.isFiltered || this.filteredMessagesDict == null) ? this.messages : chatActivityAdapter4.filteredMessages).remove(indexOf);
                                    ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
                                    if (chatActivityAdapter5 != null) {
                                        if (chatActivityAdapter5.isFiltered) {
                                            int indexOf2 = this.messages.indexOf(messageObject2);
                                            if (indexOf2 >= 0) {
                                                this.messages.remove(indexOf2);
                                            }
                                            getMediaDataController().removeMessageFromResults(messageObject6.getId());
                                        } else {
                                            LongSparseArray longSparseArray8 = this.filteredMessagesDict;
                                            if (longSparseArray8 != null) {
                                                i7 = size;
                                                z9 = z3;
                                                MessageObject messageObject7 = (MessageObject) longSparseArray8.get(num.intValue());
                                                if (messageObject7 != null) {
                                                    this.filteredMessagesDict.remove(num.intValue());
                                                    this.chatAdapter.filteredMessages.remove(messageObject7);
                                                    getMediaDataController().removeMessageFromResults(messageObject7.getId());
                                                }
                                                messagesSearchAdapter = this.messagesSearchAdapter;
                                                if (messagesSearchAdapter != null) {
                                                    messagesSearchAdapter.notifyDataSetChanged();
                                                }
                                                arrayList4.add(Integer.valueOf(this.chatAdapter.messagesStartRow + indexOf));
                                                if (!z && !messageObject2.scheduledSent && messageObject6 != null && (message = messageObject6.messageOwner) != null && message.send_state == 0) {
                                                    if (i6 - message.date >= ((this.currentChat == null || ((user2 = this.currentUser) != null && user2.bot)) ? 2 : 0)) {
                                                        arrayList5 = arrayList3;
                                                        arrayList5.add(Integer.valueOf(this.chatAdapter.messagesStartRow + indexOf));
                                                        messageObject6.deletedByThanos = LiteMode.isEnabled(65536);
                                                        if (messageObject6.getGroupId() != 0 || (groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject6.getGroupId())) == null) {
                                                            z7 = z2;
                                                            longSparseArray3 = longSparseArray2;
                                                        } else {
                                                            if (longSparseArray2 == null) {
                                                                longSparseArray3 = new LongSparseArray();
                                                                longSparseArray7 = new LongSparseArray();
                                                            } else {
                                                                longSparseArray3 = longSparseArray2;
                                                            }
                                                            longSparseArray3.put(groupedMessages.groupId, groupedMessages);
                                                            if (longSparseArray7.get(groupedMessages.groupId) == null) {
                                                                z7 = z2;
                                                                longSparseArray7.put(groupedMessages.groupId, Integer.valueOf(groupedMessages.messages.size()));
                                                            } else {
                                                                z7 = z2;
                                                            }
                                                            groupedMessages.messages.remove(messageObject2);
                                                        }
                                                        this.messagesDict[c].remove(num.intValue());
                                                        arrayList6 = (ArrayList) this.messagesByDays.get(messageObject2.dateKey);
                                                        if (arrayList6 != null) {
                                                            arrayList6.remove(messageObject2);
                                                            if (arrayList6.isEmpty()) {
                                                                this.messagesByDays.remove(messageObject2.dateKey);
                                                                this.messagesByDaysSorted.remove(messageObject2.dateKeyInt);
                                                                ChatActivityAdapter chatActivityAdapter6 = this.chatAdapter;
                                                                int indexOf3 = (chatActivityAdapter6 == null || !chatActivityAdapter6.isFiltered) ? indexOf : this.messages.indexOf(messageObject2);
                                                                if (indexOf3 >= 0 && indexOf3 < this.messages.size()) {
                                                                    this.messages.remove(indexOf3);
                                                                    ChatActivityAdapter chatActivityAdapter7 = this.chatAdapter;
                                                                    if (chatActivityAdapter7 != null && !chatActivityAdapter7.isFiltered) {
                                                                        arrayList4.add(Integer.valueOf(chatActivityAdapter7.messagesStartRow + indexOf3));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        longSparseArray4 = this.filteredMessagesByDays;
                                                        if (longSparseArray4 != null && (arrayList7 = (ArrayList) longSparseArray4.get(messageObject2.dateKeyInt)) != null) {
                                                            ChatActivityAdapter chatActivityAdapter8 = this.chatAdapter;
                                                            MessageObject messageObject8 = (chatActivityAdapter8 == null && chatActivityAdapter8.isFiltered) ? (MessageObject) this.filteredMessagesDict.get(messageObject2.getId()) : messageObject2;
                                                            arrayList7.remove(messageObject8);
                                                            if (arrayList7.isEmpty()) {
                                                                this.filteredMessagesByDays.remove(messageObject2.dateKeyInt);
                                                                ChatActivityAdapter chatActivityAdapter9 = this.chatAdapter;
                                                                if (chatActivityAdapter9 != null && !chatActivityAdapter9.isFiltered) {
                                                                    indexOf = chatActivityAdapter9.filteredMessages.indexOf(messageObject8);
                                                                }
                                                                ChatActivityAdapter chatActivityAdapter10 = this.chatAdapter;
                                                                if (chatActivityAdapter10 != null && indexOf >= 0 && indexOf < chatActivityAdapter10.filteredMessages.size()) {
                                                                    this.chatAdapter.filteredMessages.remove(indexOf);
                                                                    ChatActivityAdapter chatActivityAdapter11 = this.chatAdapter;
                                                                    if (chatActivityAdapter11.isFiltered) {
                                                                        arrayList4.add(Integer.valueOf(chatActivityAdapter11.messagesStartRow + indexOf));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        longSparseArray6 = longSparseArray3;
                                                        z3 = z9;
                                                        i8 = 1;
                                                        z5 = true;
                                                        i += i8;
                                                        arrayList8 = arrayList;
                                                        arrayList10 = arrayList5;
                                                        arrayList9 = arrayList4;
                                                        z2 = z7;
                                                        currentTime = i6;
                                                    }
                                                }
                                            }
                                        }
                                        i7 = size;
                                        z9 = z3;
                                        messagesSearchAdapter = this.messagesSearchAdapter;
                                        if (messagesSearchAdapter != null) {
                                        }
                                        arrayList4.add(Integer.valueOf(this.chatAdapter.messagesStartRow + indexOf));
                                        if (!z) {
                                            if (i6 - message.date >= ((this.currentChat == null || ((user2 = this.currentUser) != null && user2.bot)) ? 2 : 0)) {
                                            }
                                        }
                                    } else {
                                        i7 = size;
                                        z9 = z3;
                                    }
                                    arrayList5 = arrayList3;
                                    if (messageObject6.getGroupId() != 0) {
                                    }
                                    z7 = z2;
                                    longSparseArray3 = longSparseArray2;
                                    this.messagesDict[c].remove(num.intValue());
                                    arrayList6 = (ArrayList) this.messagesByDays.get(messageObject2.dateKey);
                                    if (arrayList6 != null) {
                                    }
                                    longSparseArray4 = this.filteredMessagesByDays;
                                    if (longSparseArray4 != null) {
                                        ChatActivityAdapter chatActivityAdapter82 = this.chatAdapter;
                                        if (chatActivityAdapter82 == null) {
                                        }
                                        arrayList7.remove(messageObject8);
                                        if (arrayList7.isEmpty()) {
                                        }
                                    }
                                    longSparseArray6 = longSparseArray3;
                                    z3 = z9;
                                    i8 = 1;
                                    z5 = true;
                                    i += i8;
                                    arrayList8 = arrayList;
                                    arrayList10 = arrayList5;
                                    arrayList9 = arrayList4;
                                    z2 = z7;
                                    currentTime = i6;
                                } else {
                                    i7 = size;
                                }
                            }
                            z8 = true;
                            messageObject2.deleted = z8;
                            if (messageObject2.scheduled) {
                                messageObject2.scheduledSent = z8;
                            }
                            if (this.editingMessageObject == messageObject2) {
                            }
                            ChatActivityAdapter chatActivityAdapter32 = this.chatAdapter;
                            if (chatActivityAdapter32 == null) {
                            }
                            if (indexOf == -1) {
                            }
                        } else {
                            i7 = size;
                        }
                        arrayList5 = arrayList3;
                        z7 = z2;
                        longSparseArray6 = longSparseArray2;
                        i8 = 1;
                        i += i8;
                        arrayList8 = arrayList;
                        arrayList10 = arrayList5;
                        arrayList9 = arrayList4;
                        z2 = z7;
                        currentTime = i6;
                    } else {
                        longSparseArray2 = longSparseArray6;
                        arrayList4 = arrayList9;
                    }
                    closeMenu();
                    if (c == 0) {
                    }
                    if (messageObject2 == null) {
                    }
                    arrayList5 = arrayList3;
                    z7 = z2;
                    longSparseArray6 = longSparseArray2;
                    i8 = 1;
                    i += i8;
                    arrayList8 = arrayList;
                    arrayList10 = arrayList5;
                    arrayList9 = arrayList4;
                    z2 = z7;
                    currentTime = i6;
                }
                longSparseArray = longSparseArray6;
                ArrayList arrayList11 = arrayList9;
                ArrayList arrayList12 = arrayList10;
                if (z3) {
                    updateReplyMessageHeader(true);
                }
                if (i2 != 0 && this.replyOriginalChat != null) {
                    int i14 = -i2;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.changeRepliesCounter, Long.valueOf(this.replyOriginalChat.id), Integer.valueOf(this.replyOriginalMessageId), Integer.valueOf(i14));
                    getMessagesStorage().updateRepliesCount(this.replyOriginalChat.id, this.replyOriginalMessageId, null, 0, i14);
                }
                if (z4) {
                    if (!z10) {
                        addToSelectedMessages(null, false, true);
                    }
                    updateActionModeTitle();
                }
                if (longSparseArray != null) {
                    int i15 = 0;
                    while (i15 < longSparseArray.size()) {
                        LongSparseArray longSparseArray9 = longSparseArray;
                        MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray9.valueAt(i15);
                        if (this.chatListItemAnimator != null) {
                            if (groupedMessages2.messages.size() == 1) {
                                this.chatListItemAnimator.groupWillTransformToSingleMessage(groupedMessages2);
                            } else {
                                this.chatListItemAnimator.groupWillChanged(groupedMessages2);
                            }
                        }
                        if (groupedMessages2.messages.isEmpty()) {
                            this.groupedMessagesMap.remove(groupedMessages2.groupId);
                        } else {
                            groupedMessages2.calculate();
                            ArrayList<MessageObject> arrayList13 = groupedMessages2.messages;
                            int indexOf4 = this.chatAdapter.getMessages().indexOf(arrayList13.get(arrayList13.size() - 1));
                            if (indexOf4 >= 0 && (chatActivityAdapter = this.chatAdapter) != null && !chatActivityAdapter.isFrozen) {
                                chatActivityAdapter.notifyItemRangeChanged(indexOf4 + chatActivityAdapter.messagesStartRow, ((Integer) longSparseArray7.get(groupedMessages2.groupId)).intValue());
                            }
                        }
                        i15++;
                        longSparseArray = longSparseArray9;
                    }
                }
                if (this.messages.isEmpty()) {
                    i3 = 0;
                } else {
                    if (this.endReached[0] || this.loading) {
                        if (this.botButtons != null) {
                            this.botButtons = null;
                            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                            if (chatActivityEnterView != null) {
                                chatActivityEnterView.setButtons(null, false);
                            }
                        }
                        if (this.currentEncryptedChat == null && (user = this.currentUser) != null && user.bot && this.botUser == null) {
                            this.botUser = "";
                            updateBottomOverlay();
                        }
                    } else {
                        if (!this.chatAdapter.isFiltered) {
                            showProgressView(false);
                        }
                        RecyclerListView recyclerListView = this.chatListView;
                        if (recyclerListView != null) {
                            recyclerListView.setEmptyView(null);
                        }
                        if (this.currentEncryptedChat == null) {
                            int[] iArr = this.maxMessageId;
                            c2 = 1;
                            iArr[1] = Integer.MAX_VALUE;
                            i5 = 0;
                            iArr[0] = Integer.MAX_VALUE;
                            int[] iArr2 = this.minMessageId;
                            iArr2[1] = Integer.MIN_VALUE;
                            iArr2[0] = Integer.MIN_VALUE;
                        } else {
                            c2 = 1;
                            i5 = 0;
                            int[] iArr3 = this.maxMessageId;
                            iArr3[1] = Integer.MIN_VALUE;
                            iArr3[0] = Integer.MIN_VALUE;
                            int[] iArr4 = this.minMessageId;
                            iArr4[1] = Integer.MAX_VALUE;
                            iArr4[0] = Integer.MAX_VALUE;
                        }
                        int[] iArr5 = this.maxDate;
                        iArr5[c2] = Integer.MIN_VALUE;
                        iArr5[i5] = Integer.MIN_VALUE;
                        int[] iArr6 = this.minDate;
                        iArr6[c2] = i5;
                        iArr6[i5] = i5;
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        MessagesController messagesController = getMessagesController();
                        long j2 = this.dialog_id;
                        long j3 = this.mergeDialogId;
                        boolean z12 = !this.cacheEndReached[0];
                        int i16 = this.minDate[0];
                        int i17 = this.classGuid;
                        int i18 = this.chatMode;
                        long j4 = this.threadMessageId;
                        int i19 = this.replyMaxReadId;
                        int i20 = this.lastLoadIndex;
                        this.lastLoadIndex = i20 + 1;
                        messagesController.loadMessages(j2, j3, false, 30, 0, 0, z12, i16, i17, 0, 0, i18, j4, i19, i20, this.isTopic);
                        this.loading = true;
                    }
                    i3 = 0;
                    this.canShowPagedownButton = false;
                    updatePagedownButtonVisibility(true);
                    showMentionDownButton(false, true);
                }
                if (!z5) {
                    if (this.chatMode == 2 && (chatAvatarContainer = this.avatarContainer) != null) {
                        chatAvatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[i3]));
                    }
                    ChatActivityAdapter chatActivityAdapter12 = this.chatAdapter;
                    if (chatActivityAdapter12 != null && !chatActivityAdapter12.isFrozen) {
                        int i21 = chatActivityAdapter12.hintRow;
                        int i22 = this.chatAdapter.loadingUpRow;
                        int i23 = this.chatAdapter.loadingDownRow;
                        int size3 = arrayList11.size();
                        for (int i24 = 0; i24 < size3; i24++) {
                            Integer num2 = (Integer) arrayList11.get(i24);
                            this.chatAdapter.notifyItemRemoved(num2.intValue(), arrayList12.contains(num2));
                        }
                        if (!isThreadChat() || this.messages.size() <= 3) {
                            i4 = 0;
                            removeUnreadPlane(false);
                        } else {
                            i4 = 0;
                        }
                        if (this.chatAdapter.getMessages().isEmpty()) {
                            if (i22 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                            if (i23 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                            if (i21 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                        } else {
                            ChatActivityAdapter chatActivityAdapter13 = this.chatAdapter;
                            chatActivityAdapter13.notifyItemRangeChanged(chatActivityAdapter13.messagesStartRow, chatActivityAdapter13.getMessages().size());
                        }
                    }
                    updateVisibleRows();
                    if (this.chatMode == 5) {
                        updateBottomOverlay();
                    }
                } else if (this.threadMessageId == 0) {
                    this.first_unread_id = 0;
                    this.last_message_id = 0;
                    this.createUnreadMessageAfterId = 0;
                    removeMessageObject(this.unreadMessageObject);
                    this.unreadMessageObject = null;
                }
                if (z6) {
                    updateScheduledInterface(true);
                }
                invalidatePremiumBlocked();
                hintView2 = this.savedMessagesTagHint;
                if (hintView2 != null && hintView2.shown()) {
                    this.savedMessagesTagHint.hide();
                }
                if (this.chatMode == 5 || (arrayList2 = this.messages) == null || !arrayList2.isEmpty()) {
                    return;
                }
                this.threadMessageId = 0L;
                return;
            } else if (j != (-this.dialog_id)) {
                return;
            }
        } else if (j != 0) {
            return;
        }
        c = 0;
        messageObject = this.replyingMessageObject;
        if (messageObject != null) {
            this.replyingMessageObject = null;
            this.replyingQuote = null;
            fallbackFieldPanel();
        }
        if (this.threadMessageObject != null) {
            size2 = iNavigationLayout.getFragmentStack().size() - 1;
            i11 = 0;
            while (i11 < size2) {
            }
        }
        z2 = false;
        LongSparseArray longSparseArray62 = null;
        LongSparseArray longSparseArray72 = null;
        i = 0;
        z3 = false;
        i2 = 0;
        z4 = false;
        boolean z102 = false;
        z5 = false;
        z6 = false;
        while (i < size) {
        }
        longSparseArray = longSparseArray62;
        ArrayList arrayList112 = arrayList9;
        ArrayList arrayList122 = arrayList10;
        if (z3) {
        }
        if (i2 != 0) {
            int i142 = -i2;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.changeRepliesCounter, Long.valueOf(this.replyOriginalChat.id), Integer.valueOf(this.replyOriginalMessageId), Integer.valueOf(i142));
            getMessagesStorage().updateRepliesCount(this.replyOriginalChat.id, this.replyOriginalMessageId, null, 0, i142);
        }
        if (z4) {
        }
        if (longSparseArray != null) {
        }
        if (this.messages.isEmpty()) {
        }
        if (!z5) {
        }
        if (z6) {
        }
        invalidatePremiumBlocked();
        hintView2 = this.savedMessagesTagHint;
        if (hintView2 != null) {
            this.savedMessagesTagHint.hide();
        }
        if (this.chatMode == 5) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x006e, code lost:
        if (r12.inlineReturn == 0) goto L22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:0x007f, code lost:
        if (r12.inlineReturn == 0) goto L22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x0081, code lost:
        r4 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x008e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processExternalUrl(int i, String str, CharacterStyle characterStyle, ChatMessageCell chatMessageCell, boolean z, boolean z2) {
        Activity parentActivity;
        Uri parse;
        String hostAuthority;
        boolean z3 = false;
        try {
            hostAuthority = AndroidUtilities.getHostAuthority(str);
        } catch (Exception e) {
            e = e;
        }
        if (this.currentEncryptedChat != null) {
            if (getMessagesController().secretWebpagePreview == 1) {
            }
            if (!z || AndroidUtilities.shouldShowUrlInAlert(str)) {
                if (i != 0 || i == 2) {
                    AlertsCreator.showOpenUrlAlert(this, str, true, !z2, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : true, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
                } else if (i == 1) {
                    AlertsCreator.showOpenUrlAlert(this, str, true, !z2, false, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
                    return;
                } else {
                    return;
                }
            } else if (i == 0) {
                Browser.openUrl(getParentActivity(), Uri.parse(str), true, !z2, makeProgressForLink(chatMessageCell, characterStyle));
                return;
            } else {
                if (i == 1) {
                    parentActivity = getParentActivity();
                    parse = Uri.parse(str);
                } else if (i != 2) {
                    return;
                } else {
                    parentActivity = getParentActivity();
                    parse = Uri.parse(str);
                }
                Browser.openUrl(parentActivity, parse, z3, !z2, makeProgressForLink(chatMessageCell, characterStyle));
                return;
            }
        }
        if (getMessagesController().authDomains.contains(hostAuthority)) {
            try {
                getSendMessagesHelper().requestUrlAuth(str, this, i == 0 || i == 2);
                return;
            } catch (Exception e2) {
                e = e2;
                FileLog.e(e);
                if (z) {
                }
                if (i != 0) {
                }
                AlertsCreator.showOpenUrlAlert(this, str, true, !z2, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : true, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
            }
        }
        if (z) {
        }
        if (i != 0) {
        }
        AlertsCreator.showOpenUrlAlert(this, str, true, !z2, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : true, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
    }

    /* JADX WARN: Code restructure failed: missing block: B:26:0x0053, code lost:
        if (r5 != r4.get(r4.size() - 1).id) goto L9;
     */
    /* JADX WARN: Removed duplicated region for block: B:30:0x005a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processLoadedDiscussionMessage(boolean z, final TLRPC.TL_messages_discussionMessage tL_messages_discussionMessage, boolean z2, TLRPC.messages_Messages messages_messages, final int i, final MessageObject messageObject, final TLRPC.TL_messages_getDiscussionMessage tL_messages_getDiscussionMessage, final TLRPC.Chat chat, final int i2, final MessageObject messageObject2) {
        ArrayList<TLRPC.Message> arrayList;
        int i3;
        TLRPC.MessageReplyHeader messageReplyHeader;
        TLRPC.messages_Messages messages_messages2 = messages_messages;
        final int i4 = this.commentLoadingMessageId;
        if (messages_messages2 != null) {
            if (i == 1 || i == 0 || tL_messages_discussionMessage == null || i == tL_messages_discussionMessage.read_inbox_max_id || i2 > 0) {
                if (!messages_messages2.messages.isEmpty() && tL_messages_discussionMessage != null && !tL_messages_discussionMessage.messages.isEmpty()) {
                    TLRPC.Message message = messages_messages2.messages.get(0);
                    if (message == null || (messageReplyHeader = message.reply_to) == null) {
                        i3 = 0;
                    } else {
                        i3 = messageReplyHeader.reply_to_top_id;
                        if (i3 == 0) {
                            i3 = messageReplyHeader.reply_to_msg_id;
                        }
                    }
                    ArrayList<TLRPC.Message> arrayList2 = tL_messages_discussionMessage.messages;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processLoadedDiscussionMessage reset history");
                }
            }
            messages_messages2 = null;
            if (BuildVars.LOGS_ENABLED) {
            }
        }
        final TLRPC.messages_Messages messages_messages3 = messages_messages2;
        final ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        if (tL_messages_discussionMessage != null && (arrayList = tL_messages_discussionMessage.messages) != null) {
            int size = arrayList.size();
            for (int i5 = 0; i5 < size; i5++) {
                TLRPC.Message message2 = tL_messages_discussionMessage.messages.get(i5);
                if (!(message2 instanceof TLRPC.TL_messageEmpty)) {
                    message2.isThreadMessage = true;
                    arrayList3.add(new MessageObject(UserConfig.selectedAccount, message2, true, true));
                }
            }
        }
        getMessagesStorage().loadMessageAttachPaths(arrayList3, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda380
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$311(arrayList3, tL_messages_discussionMessage, messages_messages3, chat, tL_messages_getDiscussionMessage, i2, messageObject2, i4, i, messageObject);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:207:0x03b5, code lost:
        if (r14.quick_reply_shortcut_id != r32.threadMessageId) goto L327;
     */
    /* JADX WARN: Code restructure failed: missing block: B:214:0x03d5, code lost:
        if (org.telegram.messenger.MessageObject.getSavedDialogId(getUserConfig().getClientUserId(), r13.messageOwner) != r32.threadMessageId) goto L327;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x03f2, code lost:
        if (r32.threadMessageId != r13.getReplyMsgId()) goto L327;
     */
    /* JADX WARN: Code restructure failed: missing block: B:374:0x0617, code lost:
        if (r1.quick_reply_shortcut_id != r32.threadMessageId) goto L426;
     */
    /* JADX WARN: Code restructure failed: missing block: B:380:0x0633, code lost:
        if (org.telegram.messenger.MessageObject.getSavedDialogId(getUserConfig().getClientUserId(), r8.messageOwner) != r32.threadMessageId) goto L426;
     */
    /* JADX WARN: Code restructure failed: missing block: B:389:0x0660, code lost:
        if (getTopicId() != org.telegram.messenger.MessageObject.getTopicId(r32.currentAccount, r8.messageOwner, org.telegram.messenger.ChatObject.isForum(r32.currentChat))) goto L828;
     */
    /* JADX WARN: Code restructure failed: missing block: B:395:0x0679, code lost:
        if (r32.threadMessageId != r8.getReplyMsgId()) goto L427;
     */
    /* JADX WARN: Removed duplicated region for block: B:128:0x024b  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x0315  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x031a  */
    /* JADX WARN: Removed duplicated region for block: B:177:0x032e  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x044a  */
    /* JADX WARN: Removed duplicated region for block: B:255:0x0458  */
    /* JADX WARN: Removed duplicated region for block: B:333:0x0545  */
    /* JADX WARN: Removed duplicated region for block: B:400:0x0692  */
    /* JADX WARN: Removed duplicated region for block: B:405:0x06ad  */
    /* JADX WARN: Removed duplicated region for block: B:409:0x06cb  */
    /* JADX WARN: Removed duplicated region for block: B:427:0x0737  */
    /* JADX WARN: Removed duplicated region for block: B:430:0x073f  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0760  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x076e  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x0778  */
    /* JADX WARN: Removed duplicated region for block: B:516:0x0886  */
    /* JADX WARN: Removed duplicated region for block: B:563:0x093f  */
    /* JADX WARN: Removed duplicated region for block: B:597:0x09ba  */
    /* JADX WARN: Removed duplicated region for block: B:616:0x0a12  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x0b92  */
    /* JADX WARN: Removed duplicated region for block: B:681:0x0b9c  */
    /* JADX WARN: Removed duplicated region for block: B:710:0x0c1a  */
    /* JADX WARN: Removed duplicated region for block: B:720:0x0c53  */
    /* JADX WARN: Removed duplicated region for block: B:724:0x0c7c  */
    /* JADX WARN: Removed duplicated region for block: B:729:0x0c88  */
    /* JADX WARN: Removed duplicated region for block: B:734:0x0c97  */
    /* JADX WARN: Removed duplicated region for block: B:737:0x0ca5  */
    /* JADX WARN: Removed duplicated region for block: B:741:0x0cb4  */
    /* JADX WARN: Removed duplicated region for block: B:744:0x0cbe  */
    /* JADX WARN: Removed duplicated region for block: B:747:0x0cc9  */
    /* JADX WARN: Removed duplicated region for block: B:759:0x0cea  */
    /* JADX WARN: Removed duplicated region for block: B:762:0x0cf7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:766:0x0d05  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x0173  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:903:0x0341 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:911:0x0454 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:917:0x09f9 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processNewMessages(ArrayList arrayList) {
        ArrayList arrayList2;
        char c;
        int i;
        boolean z;
        boolean z2;
        boolean z3;
        SimpleTextView simpleTextView;
        CounterView counterView;
        int i2;
        TLRPC.Message message;
        boolean z4;
        int id;
        TLRPC.MessageAction messageAction;
        ChatAvatarContainer chatAvatarContainer;
        long j;
        String str;
        int i3;
        TLRPC.Chat chat;
        MessageObject.GroupedMessages groupedMessages;
        int i4;
        int i5;
        int i6;
        HashMap hashMap;
        String str2;
        LongSparseArray longSparseArray;
        int i7;
        ArrayList arrayList3;
        ChatActivityAdapter chatActivityAdapter;
        int i8;
        ValueAnimator valueAnimator;
        MessageObject messageObject;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject messageObject2;
        int i9;
        String formatDateChat;
        ChatActivityAdapter chatActivityAdapter2;
        TLRPC.Chat chat2;
        boolean z5;
        int i10;
        int i11;
        MessageObject.GroupedMessages groupedMessages3;
        int i12;
        int i13;
        MessageObject messageObject3;
        int i14;
        TLRPC.DecryptedMessageAction decryptedMessageAction;
        TLRPC.User user;
        MessageObject messageObject4;
        ArrayList arrayList4;
        boolean z6;
        ArrayList arrayList5;
        ArrayList arrayList6;
        String str3;
        SimpleTextView simpleTextView2;
        CounterView counterView2;
        String str4;
        int i15;
        int i16;
        TLRPC.MessageAction messageAction2;
        ChatAvatarContainer chatAvatarContainer2;
        boolean z7;
        TLRPC.Chat chat3;
        int min;
        int i17;
        int i18;
        TLRPC.DecryptedMessageAction decryptedMessageAction2;
        TLRPC.User user2;
        int i19;
        MessageObject messageObject5;
        MessageObject messageObject6;
        TLRPC.MessageAction messageAction3;
        TLRPC.Chat chat4;
        TLRPC.Chat chat5;
        Long l;
        int i20;
        ArrayList arrayList7 = arrayList;
        char c2 = 0;
        long clientUserId = getUserConfig().getClientUserId();
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.setShouldAnimateEnterFromBottom(true);
        }
        int size = arrayList.size();
        int i21 = 0;
        boolean z8 = false;
        LongSparseArray longSparseArray2 = null;
        boolean z9 = false;
        while (i21 < size) {
            MessageObject messageObject7 = (MessageObject) arrayList7.get(i21);
            if (!z8) {
                z8 = messageObject7.isSponsored();
            }
            if (messageObject7.getId() > 0 && ((i20 = messageObject7.type) == 21 || i20 == 22)) {
                int i22 = 0;
                while (true) {
                    if (i22 >= this.messages.size()) {
                        break;
                    }
                    int i23 = messageObject7.type;
                    if (((MessageObject) this.messages.get(i22)).type != i23 || ((MessageObject) this.messages.get(i22)).getId() >= 0) {
                        i22++;
                        c2 = 0;
                    } else {
                        this.messagesDict[c2].remove(((MessageObject) this.messages.get(i22)).getId());
                        this.messagesDict[c2].put(messageObject7.getId(), messageObject7);
                        messageObject7.copyStableParams((MessageObject) this.messages.get(i22));
                        if (i23 == 22) {
                            TLRPC.WallPaper wallPaper = ((MessageObject) this.messages.get(i22)).messageOwner.action.wallpaper;
                            TLRPC.MessageAction messageAction4 = messageObject7.messageOwner.action;
                            TLRPC.WallPaper wallPaper2 = messageAction4.wallpaper;
                            long j2 = wallPaper2 != null ? wallPaper2.id : wallPaper != null ? wallPaper.id : 0L;
                            messageAction4.wallpaper = wallPaper;
                            if (wallPaper != null) {
                                wallPaper.id = j2;
                            }
                        } else if (i23 == 21) {
                            PhotoUtilities.replacePhotoImagesInCache(this.currentAccount, ((MessageObject) this.messages.get(i22)).messageOwner.action.photo, messageObject7.messageOwner.action.photo);
                        }
                        this.messages.set(i22, messageObject7);
                        if (i23 != 22) {
                            ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                            chatActivityAdapter3.notifyItemChanged(chatActivityAdapter3.messagesStartRow + i22);
                        }
                    }
                }
            }
            int id2 = messageObject7.getId();
            if (this.chatMode != 3 && this.threadMessageId != 0 && id2 > 0) {
                if (id2 <= (messageObject7.isOut() ? this.threadMaxOutboxReadId : this.threadMaxInboxReadId)) {
                    messageObject7.setIsRead();
                }
            }
            if (this.currentEncryptedChat == null && !this.forwardEndReached[0] && id2 < 0) {
                this.pendingSendMessagesDict.put(id2, messageObject7);
                this.pendingSendMessages.add(0, messageObject7);
            }
            if (!messageObject7.isDice() || messageObject7.isForwarded()) {
                TLRPC.MessageAction messageAction5 = messageObject7.messageOwner.action;
                if (!(messageAction5 instanceof TLRPC.TL_messageActionGiftPremium) && !(messageAction5 instanceof TLRPC.TL_messageActionGiftCode)) {
                    i19 = 1;
                    if (this.chatMode == i19 && messageObject7.hasValidGroupId() && this.messagesDict[0].indexOfKey(messageObject7.getId()) >= 0) {
                        long groupId = messageObject7.getGroupId();
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray();
                        }
                        l = (Long) longSparseArray2.get(groupId);
                        if (l == null) {
                            l = Long.valueOf(Utilities.random.nextLong());
                            longSparseArray2.put(groupId, l);
                        }
                        messageObject7.localGroupId = l.longValue();
                    }
                    if (messageObject7.isOut()) {
                        if (!z9) {
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                            z9 = true;
                        }
                        if (this.currentChat != null && (chat5 = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                            this.currentChat = chat5;
                            if (!chat5.gigagroup && chat5.slowmode_enabled && messageObject7.isSent() && this.chatMode != 1) {
                                TLRPC.ChatFull chatFull = this.chatInfo;
                                if (chatFull != null && !ChatObject.isIgnoredChatRestrictionsForBoosters(chatFull)) {
                                    int i24 = messageObject7.messageOwner.date + this.chatInfo.slowmode_seconds;
                                    int currentTime = getConnectionsManager().getCurrentTime();
                                    if (i24 > getConnectionsManager().getCurrentTime()) {
                                        TLRPC.ChatFull chatFull2 = this.chatInfo;
                                        chatFull2.slowmode_next_send_date = Math.max(chatFull2.slowmode_next_send_date, Math.min(currentTime + chatFull2.slowmode_seconds, i24));
                                        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                                        if (chatActivityEnterView != null) {
                                            chatActivityEnterView.setSlowModeTimer(this.chatInfo.slowmode_next_send_date);
                                        }
                                    }
                                }
                                getMessagesController().loadFullChat(this.currentChat.id, 0, true);
                            }
                        }
                        if (messageObject7.wasJustSent && ((getUserConfig().isPremium() || messageObject7.isAnimatedAnimatedEmoji() || messageObject7.getEffect() != null) && SharedConfig.getDevicePerformanceClass() != 0)) {
                            if (LiteMode.isEnabled(messageObject7.isAnimatedAnimatedEmoji() ? LiteMode.FLAG_ANIMATED_EMOJI_CHAT : 2)) {
                                messageObject7.forcePlayEffect = true;
                            }
                        }
                    }
                    if (this.currentChat == null) {
                        TLRPC.MessageAction messageAction6 = messageObject7.messageOwner.action;
                        if ((((messageAction6 instanceof TLRPC.TL_messageActionChatDeleteUser) && messageAction6.user_id == clientUserId) || ((messageAction6 instanceof TLRPC.TL_messageActionChatAddUser) && messageAction6.users.contains(Long.valueOf(clientUserId)))) && (chat4 = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                            this.currentChat = chat4;
                            checkActionBarMenu(false);
                            updateBottomOverlay();
                            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                            if (chatAvatarContainer3 != null) {
                                chatAvatarContainer3.updateSubtitle(true);
                            }
                        }
                    } else if (this.inlineReturn != 0 && messageObject7.messageOwner.reply_markup != null) {
                        for (int i25 = 0; i25 < messageObject7.messageOwner.reply_markup.rows.size(); i25++) {
                            TLRPC.TL_keyboardButtonRow tL_keyboardButtonRow = messageObject7.messageOwner.reply_markup.rows.get(i25);
                            int i26 = 0;
                            while (true) {
                                if (i26 >= tL_keyboardButtonRow.buttons.size()) {
                                    break;
                                }
                                TLRPC.KeyboardButton keyboardButton = tL_keyboardButtonRow.buttons.get(i26);
                                if (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) {
                                    processSwitchButton((TLRPC.TL_keyboardButtonSwitchInline) keyboardButton);
                                    break;
                                }
                                i26++;
                            }
                        }
                    }
                    if (messageObject7.getReplyMsgId() != 0 && messageObject7.replyMessageObject == null) {
                        messageObject6 = (MessageObject) this.messagesDict[0].get(messageObject7.getReplyMsgId());
                        messageObject7.replyMessageObject = messageObject6;
                        if (messageObject6 == null && messageObject7.getDialogId() != this.mergeDialogId) {
                            messageObject7.replyMessageObject = (MessageObject) this.repliesMessagesDict.get(messageObject7.getReplyMsgId());
                        }
                        messageObject7.applyTimestampsHighlightForReplyMsg();
                        messageAction3 = messageObject7.messageOwner.action;
                        if (!(messageAction3 instanceof TLRPC.TL_messageActionPinMessage)) {
                            messageObject7.generatePinMessageText(null, null);
                        } else if (messageAction3 instanceof TLRPC.TL_messageActionGameScore) {
                            messageObject7.generateGameMessageText(null);
                        } else if (messageAction3 instanceof TLRPC.TL_messageActionPaymentSent) {
                            messageObject7.generatePaymentSentMessageText(null);
                        }
                    }
                    messageObject5 = messageObject7.replyMessageObject;
                    if (messageObject5 == null) {
                        this.repliesMessagesDict.put(messageObject5.getId(), messageObject7.replyMessageObject);
                        addReplyMessageOwner(messageObject7, 0);
                    }
                    i21++;
                    arrayList7 = arrayList;
                    c2 = 0;
                }
            }
            i19 = 1;
            messageObject7.wasUnread = true;
            if (this.chatMode == i19) {
                long groupId2 = messageObject7.getGroupId();
                if (longSparseArray2 == null) {
                }
                l = (Long) longSparseArray2.get(groupId2);
                if (l == null) {
                }
                messageObject7.localGroupId = l.longValue();
            }
            if (messageObject7.isOut()) {
            }
            if (this.currentChat == null) {
            }
            if (messageObject7.getReplyMsgId() != 0) {
                messageObject6 = (MessageObject) this.messagesDict[0].get(messageObject7.getReplyMsgId());
                messageObject7.replyMessageObject = messageObject6;
                if (messageObject6 == null) {
                    messageObject7.replyMessageObject = (MessageObject) this.repliesMessagesDict.get(messageObject7.getReplyMsgId());
                }
                messageObject7.applyTimestampsHighlightForReplyMsg();
                messageAction3 = messageObject7.messageOwner.action;
                if (!(messageAction3 instanceof TLRPC.TL_messageActionPinMessage)) {
                }
            }
            messageObject5 = messageObject7.replyMessageObject;
            if (messageObject5 == null) {
            }
            i21++;
            arrayList7 = arrayList;
            c2 = 0;
        }
        int i27 = this.chatMode;
        int i28 = 5;
        if ((i27 == 1 || i27 == 5) && !arrayList.isEmpty()) {
            arrayList2 = arrayList;
            c = 0;
            replaceMessageObjects(arrayList2, 0, true);
        } else {
            arrayList2 = arrayList;
            c = 0;
        }
        if (this.justCreatedTopic) {
            this.forwardEndReached[c] = true;
        }
        boolean z10 = this.forwardEndReached[c];
        String str5 = "%d";
        if (z10) {
            String str6 = "%d";
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("received new messages " + arrayList.size() + " in dialog " + this.dialog_id);
            }
            MessageObject messageObject8 = null;
            LongSparseArray longSparseArray3 = null;
            HashMap<String, ArrayList<MessageObject>> hashMap2 = null;
            int i29 = 0;
            boolean z11 = false;
            boolean z12 = false;
            boolean z13 = false;
            boolean z14 = false;
            int i30 = -1;
            while (i29 < arrayList.size()) {
                MessageObject messageObject9 = (MessageObject) arrayList2.get(i29);
                boolean z15 = messageObject9.scheduled;
                boolean z16 = z12;
                int i31 = this.chatMode;
                boolean z17 = z13;
                if (z15 == (i31 == 1)) {
                    if (i31 == 5) {
                        if (messageObject9.getQuickReplyId() != getQuickReplyId()) {
                            if (!TextUtils.equals(messageObject9.getQuickReplyName(), this.quickReplyShortcut)) {
                                if (messageObject9.messageOwner != null) {
                                }
                            }
                        }
                        z4 = z14;
                        if (messageObject9.isOut() && this.messagesDict[0].indexOfKey(messageObject9.getId()) < 0) {
                            rotateMotionBackgroundDrawable();
                        }
                        id = messageObject9.getId();
                        if (this.chatMode == 1 && this.messagesDict[0].indexOfKey(id) >= 0) {
                            messageObject4 = (MessageObject) this.messagesDict[0].get(id);
                            this.messagesDict[0].remove(id);
                            if (messageObject4 != null) {
                                int indexOf = this.messages.indexOf(messageObject4);
                                this.messages.remove(indexOf);
                                ArrayList arrayList8 = (ArrayList) this.messagesByDays.get(messageObject4.dateKey);
                                arrayList8.remove(messageObject4);
                                if (arrayList8.isEmpty()) {
                                    this.messagesByDays.remove(messageObject4.dateKey);
                                    this.messagesByDaysSorted.remove(messageObject4.dateKeyInt);
                                    if (indexOf >= 0 && indexOf < this.messages.size()) {
                                        this.messages.remove(indexOf);
                                    }
                                }
                                if (messageObject4.hasValidGroupId()) {
                                    MessageObject.GroupedMessages groupedMessages4 = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject4.getGroupId());
                                    groupedMessages4.messages.remove(messageObject4);
                                    if (longSparseArray3 == null) {
                                        longSparseArray3 = new LongSparseArray();
                                    }
                                    longSparseArray3.put(groupedMessages4.groupId, groupedMessages4);
                                }
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                if (chatActivityAdapter4 != null) {
                                    chatActivityAdapter4.notifyDataSetChanged(true);
                                }
                            }
                        }
                        if (isSecretChat()) {
                            checkSecretMessageForLocation(messageObject9);
                        }
                        if (this.chatMode != 1 && (user = this.currentUser) != null && ((user.bot && messageObject9.isOut()) || this.currentUser.id == clientUserId)) {
                            messageObject9.setIsRead();
                        }
                        messageAction = messageObject9.messageOwner.action;
                        chatAvatarContainer = this.avatarContainer;
                        if (chatAvatarContainer != null && this.currentEncryptedChat != null && (messageAction instanceof TLRPC.TL_messageEncryptedAction)) {
                            decryptedMessageAction = messageAction.encryptedAction;
                            if (decryptedMessageAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                chatAvatarContainer.setTime(decryptedMessageAction.ttl_seconds, true);
                            }
                        }
                        if (messageObject9.type >= 0 || this.messagesDict[0].indexOfKey(id) >= 0 || (((chat = this.currentChat) != null && chat.creator && ((!ChatObject.isChannel(chat) || this.currentChat.megagroup) && ((messageAction instanceof TLRPC.TL_messageActionChatCreate) || ((messageAction instanceof TLRPC.TL_messageActionChatEditPhoto) && this.messages.size() < 2)))) || (messageAction instanceof TLRPC.TL_messageActionChannelMigrateFrom) || (messageObject9.messageOwner instanceof TLRPC.TL_messageEmpty))) {
                            j = clientUserId;
                            str = str6;
                            z14 = z4;
                        } else {
                            MessageObject messageObject10 = this.threadMessageObject;
                            if (messageObject10 != null && messageObject10.messageOwner.replies != null && messageObject9.isReply() && !(messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject9.getReplyAnyMsgId()) {
                                this.threadMessageObject.messageOwner.replies.replies++;
                            }
                            addToPolls(messageObject9, null);
                            if (i29 == 0 && messageObject9.shouldAnimateSending() && (i14 = this.chatMode) != 1 && (i14 != 5 || this.messages.size() + 1 < getMessagesController().quickReplyMessagesLimit)) {
                                this.animatingMessageObjects.add(messageObject9);
                            }
                            if (messageObject9.hasValidGroupId()) {
                                groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject9.getGroupId());
                                if (groupedMessages == null) {
                                    groupedMessages = new MessageObject.GroupedMessages();
                                    groupedMessages.reversed = this.reversed;
                                    long groupId3 = messageObject9.getGroupId();
                                    groupedMessages.groupId = groupId3;
                                    j = clientUserId;
                                    this.groupedMessagesMap.put(groupId3, groupedMessages);
                                } else {
                                    j = clientUserId;
                                }
                                if (longSparseArray3 == null) {
                                    longSparseArray3 = new LongSparseArray();
                                }
                                longSparseArray3.put(groupedMessages.groupId, groupedMessages);
                                groupedMessages.messages.add(messageObject9);
                            } else {
                                j = clientUserId;
                                groupedMessages = null;
                            }
                            if (groupedMessages != null) {
                                if (groupedMessages.messages.size() > 1) {
                                    ArrayList<MessageObject> arrayList9 = groupedMessages.messages;
                                    messageObject3 = arrayList9.get(arrayList9.size() - 2);
                                } else {
                                    messageObject3 = null;
                                }
                                if (messageObject3 != null) {
                                    i4 = this.messages.indexOf(messageObject3);
                                    if (i4 == -1) {
                                        str = str6;
                                    } else if ((!messageObject9.scheduled && messageObject9.messageOwner.id < 0) || messageObject9.isQuickReply() || this.messages.isEmpty()) {
                                        str = str6;
                                        i4 = 0;
                                    } else {
                                        int size2 = this.messages.size();
                                        int i32 = 0;
                                        while (i32 < size2) {
                                            MessageObject messageObject11 = (MessageObject) this.messages.get(i32);
                                            if (messageObject11.type >= 0) {
                                                TLRPC.Message message2 = messageObject11.messageOwner;
                                                i10 = i4;
                                                int i33 = message2.date;
                                                i11 = size2;
                                                if (i33 > 0) {
                                                    str = str6;
                                                    if ((this.chatMode != 1 && (i12 = message2.id) > 0 && (i13 = messageObject9.messageOwner.id) > 0 && i12 < i13) || i33 <= messageObject9.messageOwner.date) {
                                                        if (messageObject11.getGroupId() == 0 || ((groupedMessages3 = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject11.getGroupId())) != null && groupedMessages3.messages.size() == 0)) {
                                                            groupedMessages3 = null;
                                                        }
                                                        if (groupedMessages3 == null) {
                                                            i4 = i32;
                                                        } else {
                                                            ArrayList arrayList10 = this.messages;
                                                            ArrayList<MessageObject> arrayList11 = groupedMessages3.messages;
                                                            i4 = arrayList10.indexOf(arrayList11.get(arrayList11.size() - 1));
                                                        }
                                                        if (i4 != -1 || i4 > this.messages.size()) {
                                                            i4 = this.messages.size();
                                                        }
                                                    }
                                                    i32++;
                                                    i4 = i10;
                                                    size2 = i11;
                                                    str6 = str;
                                                }
                                            } else {
                                                i10 = i4;
                                                i11 = size2;
                                            }
                                            str = str6;
                                            i32++;
                                            i4 = i10;
                                            size2 = i11;
                                            str6 = str;
                                        }
                                        str = str6;
                                        if (i4 != -1) {
                                        }
                                        i4 = this.messages.size();
                                    }
                                    if (z8 || this.sponsoredMessagesPostsBetween <= 0) {
                                        i5 = i30;
                                    } else if (i30 < 0) {
                                        i4 = 0;
                                        i5 = 0;
                                    } else {
                                        i5 = i30 + 1;
                                        int i34 = 0;
                                        int i35 = 0;
                                        while (true) {
                                            if (i5 >= this.messages.size()) {
                                                z5 = false;
                                                break;
                                            }
                                            MessageObject messageObject12 = (MessageObject) this.messages.get(i5);
                                            if (messageObject12 != null && !messageObject12.isSponsored()) {
                                                i34 += messageObject12.getApproximateHeight();
                                                i35++;
                                            }
                                            if (i35 > this.sponsoredMessagesPostsBetween && i34 > AndroidUtilities.displaySize.y) {
                                                i5 = Math.min(i5 + 1, this.messages.size());
                                                z5 = true;
                                                break;
                                            }
                                            i5++;
                                        }
                                        if (!z5 || i5 > this.messages.size()) {
                                            if (this.notPushedSponsoredMessages == null) {
                                                this.notPushedSponsoredMessages = new ArrayList();
                                            }
                                            this.notPushedSponsoredMessages.add(messageObject9);
                                            z14 = z4;
                                            i3 = 1;
                                            i29 += i3;
                                            arrayList2 = arrayList;
                                            z12 = z16;
                                            z13 = z17;
                                            clientUserId = j;
                                            str6 = str;
                                        } else {
                                            i4 = i5;
                                        }
                                    }
                                    if (this.currentEncryptedChat != null) {
                                        TLRPC.MessageMedia messageMedia = messageObject9.messageOwner.media;
                                        if ((messageMedia instanceof TLRPC.TL_messageMediaWebPage) && (messageMedia.webpage instanceof TLRPC.TL_webPageUrlPending)) {
                                            if (hashMap2 == null) {
                                                hashMap2 = new HashMap<>();
                                            }
                                            ArrayList<MessageObject> arrayList12 = hashMap2.get(messageObject9.messageOwner.media.webpage.url);
                                            if (arrayList12 == null) {
                                                arrayList12 = new ArrayList<>();
                                                hashMap2.put(messageObject9.messageOwner.media.webpage.url, arrayList12);
                                            }
                                            arrayList12.add(messageObject9);
                                        }
                                    }
                                    messageObject9.checkLayout();
                                    if (!(messageAction instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                                        migrateToNewChat(messageObject9);
                                        if (longSparseArray3 != null) {
                                            for (int i36 = 0; i36 < longSparseArray3.size(); i36++) {
                                                ((MessageObject.GroupedMessages) longSparseArray3.valueAt(i36)).calculate();
                                            }
                                            return;
                                        }
                                        return;
                                    }
                                    TLRPC.Chat chat6 = this.currentChat;
                                    if (chat6 != null && chat6.megagroup && ((messageAction instanceof TLRPC.TL_messageActionChatAddUser) || (messageAction instanceof TLRPC.TL_messageActionChatDeleteUser))) {
                                        z4 = true;
                                    }
                                    int[] iArr = this.minDate;
                                    int i37 = iArr[0];
                                    if (i37 == 0 || messageObject9.messageOwner.date < i37) {
                                        iArr[0] = messageObject9.messageOwner.date;
                                    }
                                    if (messageObject9.isOut() && !messageObject9.messageOwner.from_scheduled) {
                                        removeUnreadPlane(true);
                                        hideInfoView();
                                        z11 = true;
                                    }
                                    if (id > 0) {
                                        int[] iArr2 = this.maxMessageId;
                                        i6 = 0;
                                        iArr2[0] = Math.min(id, iArr2[0]);
                                        int[] iArr3 = this.minMessageId;
                                        iArr3[0] = Math.max(id, iArr3[0]);
                                    } else {
                                        i6 = 0;
                                        if (this.currentEncryptedChat != null) {
                                            int[] iArr4 = this.maxMessageId;
                                            iArr4[0] = Math.max(id, iArr4[0]);
                                            int[] iArr5 = this.minMessageId;
                                            iArr5[0] = Math.min(id, iArr5[0]);
                                        }
                                    }
                                    int[] iArr6 = this.maxDate;
                                    iArr6[i6] = Math.max(iArr6[i6], messageObject9.messageOwner.date);
                                    this.messagesDict[i6].put(id, messageObject9);
                                    if (!z8 || this.messages.isEmpty()) {
                                        hashMap = this.messagesByDays;
                                        str2 = messageObject9.dateKey;
                                    } else {
                                        hashMap = this.messagesByDays;
                                        str2 = ((MessageObject) this.messages.get(i6)).dateKey;
                                    }
                                    ArrayList arrayList13 = (ArrayList) hashMap.get(str2);
                                    if (i4 > this.messages.size()) {
                                        i4 = this.messages.size();
                                    }
                                    int sponsoredMessagesCount = getSponsoredMessagesCount();
                                    if (z8 || i4 >= sponsoredMessagesCount || ((chat2 = this.currentChat) != null && !ChatObject.isChannelAndNotMegaGroup(chat2))) {
                                        sponsoredMessagesCount = i4;
                                    }
                                    if ((messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL) && this.messages.size() == 2) {
                                        sponsoredMessagesCount = 1;
                                    }
                                    if (arrayList13 == null) {
                                        arrayList13 = new ArrayList();
                                        this.messagesByDays.put(messageObject9.dateKey, arrayList13);
                                        this.messagesByDaysSorted.put(messageObject9.dateKeyInt, arrayList13);
                                        if (this.chatMode != 5) {
                                            TLRPC.TL_message tL_message = new TLRPC.TL_message();
                                            if (this.chatMode == 1) {
                                                int i38 = messageObject9.messageOwner.date;
                                                if (i38 == 2147483646) {
                                                    tL_message.message = LocaleController.getString(R.string.MessageScheduledUntilOnline);
                                                    longSparseArray = longSparseArray3;
                                                    i9 = 0;
                                                    tL_message.id = i9;
                                                    Calendar calendar = Calendar.getInstance();
                                                    calendar.setTimeInMillis(messageObject9.messageOwner.date * 1000);
                                                    calendar.set(11, 0);
                                                    calendar.set(12, 0);
                                                    calendar.set(13, 0);
                                                    calendar.set(14, 0);
                                                    tL_message.date = (int) (calendar.getTimeInMillis() / 1000);
                                                    MessageObject messageObject13 = new MessageObject(this.currentAccount, tL_message, false, false);
                                                    messageObject13.type = 10;
                                                    messageObject13.contentType = 1;
                                                    messageObject13.isDateObject = true;
                                                    messageObject13.stableId = getStableIdForDateObject(messageObject9.dateKeyInt);
                                                    this.messages.add(sponsoredMessagesCount, messageObject13);
                                                    chatActivityAdapter2 = this.chatAdapter;
                                                    if (chatActivityAdapter2 != null) {
                                                        chatActivityAdapter2.notifyItemInserted(sponsoredMessagesCount);
                                                    }
                                                    if (this.chatMode == 5 && !(messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionGeoProximityReached)) {
                                                        if (messageObject9.isOut() && !messageObject9.messageOwner.from_scheduled) {
                                                            i7 = 0;
                                                            arrayList13.add(i7, messageObject9);
                                                            if (this.chatAdapter != null && sponsoredMessagesCount < this.messages.size()) {
                                                                messageObject = (MessageObject) this.messages.get(sponsoredMessagesCount);
                                                                if (messageObject.hasValidGroupId() && messageObject.getGroupId() != messageObject9.getGroupId() && (groupedMessages2 = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                                                                    if (groupedMessages2.messages.size() > 1) {
                                                                        this.chatAdapter.notifyItemRangeChanged(1, groupedMessages2.messages.size() - 1);
                                                                    }
                                                                    int i39 = lastStableId;
                                                                    lastStableId = i39 + 1;
                                                                    messageObject9.stableId = i39;
                                                                    getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                                    this.messages.add(sponsoredMessagesCount, messageObject9);
                                                                    if (sponsoredMessagesCount == 0 && !messageObject9.isSponsored()) {
                                                                        z17 = true;
                                                                    }
                                                                    arrayList3 = this.notPushedSponsoredMessages;
                                                                    if (arrayList3 != null && arrayList3.contains(messageObject9)) {
                                                                        this.notPushedSponsoredMessages.remove(messageObject9);
                                                                    }
                                                                    chatActivityAdapter = this.chatAdapter;
                                                                    if (chatActivityAdapter != null) {
                                                                        chatActivityAdapter.notifyItemChanged(sponsoredMessagesCount);
                                                                        this.chatAdapter.notifyItemInserted(sponsoredMessagesCount);
                                                                    }
                                                                    if (messageObject9.isOut() && this.waitingForSendingMessageLoad) {
                                                                        this.waitingForSendingMessageLoad = false;
                                                                        if (!this.animatingMessageObjects.contains(messageObject9)) {
                                                                            this.chatActivityEnterView.hideTopView(true);
                                                                        }
                                                                        valueAnimator = this.changeBoundAnimator;
                                                                        if (valueAnimator != null) {
                                                                            valueAnimator.start();
                                                                        }
                                                                    }
                                                                    if ((this.threadMessageId != 0 || this.isTopic) && !messageObject9.isOut() && messageObject9.messageOwner.mentioned && messageObject9.isContentUnread()) {
                                                                        i8 = 1;
                                                                        this.newMentionsCount++;
                                                                    } else {
                                                                        i8 = 1;
                                                                    }
                                                                    if (!z8) {
                                                                        this.newUnreadMessageCount += i8;
                                                                    }
                                                                    int i40 = messageObject9.type;
                                                                    z16 = (i40 != 10 || i40 == 11) ? true : true;
                                                                    i30 = i5;
                                                                    if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                                                        messageObject8 = messageObject9;
                                                                    }
                                                                    longSparseArray3 = longSparseArray;
                                                                    z14 = z4;
                                                                }
                                                            }
                                                            int i392 = lastStableId;
                                                            lastStableId = i392 + 1;
                                                            messageObject9.stableId = i392;
                                                            getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                            this.messages.add(sponsoredMessagesCount, messageObject9);
                                                            if (sponsoredMessagesCount == 0) {
                                                                z17 = true;
                                                            }
                                                            arrayList3 = this.notPushedSponsoredMessages;
                                                            if (arrayList3 != null) {
                                                                this.notPushedSponsoredMessages.remove(messageObject9);
                                                            }
                                                            chatActivityAdapter = this.chatAdapter;
                                                            if (chatActivityAdapter != null) {
                                                            }
                                                            if (messageObject9.isOut()) {
                                                                this.waitingForSendingMessageLoad = false;
                                                                if (!this.animatingMessageObjects.contains(messageObject9)) {
                                                                }
                                                                valueAnimator = this.changeBoundAnimator;
                                                                if (valueAnimator != null) {
                                                                }
                                                            }
                                                            if (this.threadMessageId != 0) {
                                                            }
                                                            i8 = 1;
                                                            this.newMentionsCount++;
                                                            if (!z8) {
                                                            }
                                                            int i402 = messageObject9.type;
                                                            if (i402 != 10) {
                                                            }
                                                            i30 = i5;
                                                            if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                                            }
                                                            longSparseArray3 = longSparseArray;
                                                            z14 = z4;
                                                        } else if (this.chatMode != 3 && this.paused && sponsoredMessagesCount == 0) {
                                                            if (!this.scrollToTopUnReadOnResume && (messageObject2 = this.unreadMessageObject) != null) {
                                                                removeMessageObject(messageObject2);
                                                                this.unreadMessageObject = null;
                                                            }
                                                            if (this.unreadMessageObject == null) {
                                                                TLRPC.TL_message tL_message2 = new TLRPC.TL_message();
                                                                tL_message2.message = "";
                                                                tL_message2.id = 0;
                                                                MessageObject messageObject14 = new MessageObject(this.currentAccount, tL_message2, false, false);
                                                                messageObject14.type = 6;
                                                                messageObject14.contentType = 2;
                                                                int i41 = lastStableId;
                                                                lastStableId = i41 + 1;
                                                                messageObject14.stableId = i41;
                                                                this.messages.add(0, messageObject14);
                                                                ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
                                                                if (chatActivityAdapter5 != null) {
                                                                    chatActivityAdapter5.notifyItemInserted(0);
                                                                }
                                                                this.unreadMessageObject = messageObject14;
                                                                this.scrollToMessage = messageObject14;
                                                                this.scrollToMessagePosition = -10000;
                                                                this.scrollToTopUnReadOnResume = true;
                                                            }
                                                        }
                                                    }
                                                    i7 = 0;
                                                    arrayList13.add(i7, messageObject9);
                                                    if (this.chatAdapter != null) {
                                                        messageObject = (MessageObject) this.messages.get(sponsoredMessagesCount);
                                                        if (messageObject.hasValidGroupId()) {
                                                            if (groupedMessages2.messages.size() > 1) {
                                                            }
                                                            int i3922 = lastStableId;
                                                            lastStableId = i3922 + 1;
                                                            messageObject9.stableId = i3922;
                                                            getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                            this.messages.add(sponsoredMessagesCount, messageObject9);
                                                            if (sponsoredMessagesCount == 0) {
                                                            }
                                                            arrayList3 = this.notPushedSponsoredMessages;
                                                            if (arrayList3 != null) {
                                                            }
                                                            chatActivityAdapter = this.chatAdapter;
                                                            if (chatActivityAdapter != null) {
                                                            }
                                                            if (messageObject9.isOut()) {
                                                            }
                                                            if (this.threadMessageId != 0) {
                                                            }
                                                            i8 = 1;
                                                            this.newMentionsCount++;
                                                            if (!z8) {
                                                            }
                                                            int i4022 = messageObject9.type;
                                                            if (i4022 != 10) {
                                                            }
                                                            i30 = i5;
                                                            if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                                            }
                                                            longSparseArray3 = longSparseArray;
                                                            z14 = z4;
                                                        }
                                                    }
                                                    int i39222 = lastStableId;
                                                    lastStableId = i39222 + 1;
                                                    messageObject9.stableId = i39222;
                                                    getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                    this.messages.add(sponsoredMessagesCount, messageObject9);
                                                    if (sponsoredMessagesCount == 0) {
                                                    }
                                                    arrayList3 = this.notPushedSponsoredMessages;
                                                    if (arrayList3 != null) {
                                                    }
                                                    chatActivityAdapter = this.chatAdapter;
                                                    if (chatActivityAdapter != null) {
                                                    }
                                                    if (messageObject9.isOut()) {
                                                    }
                                                    if (this.threadMessageId != 0) {
                                                    }
                                                    i8 = 1;
                                                    this.newMentionsCount++;
                                                    if (!z8) {
                                                    }
                                                    int i40222 = messageObject9.type;
                                                    if (i40222 != 10) {
                                                    }
                                                    i30 = i5;
                                                    if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                                    }
                                                    longSparseArray3 = longSparseArray;
                                                    z14 = z4;
                                                } else {
                                                    longSparseArray = longSparseArray3;
                                                    i9 = 0;
                                                    formatDateChat = LocaleController.formatString("MessageScheduledOn", R.string.MessageScheduledOn, LocaleController.formatDateChat(i38, true));
                                                }
                                            } else {
                                                longSparseArray = longSparseArray3;
                                                i9 = 0;
                                                formatDateChat = LocaleController.formatDateChat(messageObject9.messageOwner.date);
                                            }
                                            tL_message.message = formatDateChat;
                                            tL_message.id = i9;
                                            Calendar calendar2 = Calendar.getInstance();
                                            calendar2.setTimeInMillis(messageObject9.messageOwner.date * 1000);
                                            calendar2.set(11, 0);
                                            calendar2.set(12, 0);
                                            calendar2.set(13, 0);
                                            calendar2.set(14, 0);
                                            tL_message.date = (int) (calendar2.getTimeInMillis() / 1000);
                                            MessageObject messageObject132 = new MessageObject(this.currentAccount, tL_message, false, false);
                                            messageObject132.type = 10;
                                            messageObject132.contentType = 1;
                                            messageObject132.isDateObject = true;
                                            messageObject132.stableId = getStableIdForDateObject(messageObject9.dateKeyInt);
                                            this.messages.add(sponsoredMessagesCount, messageObject132);
                                            chatActivityAdapter2 = this.chatAdapter;
                                            if (chatActivityAdapter2 != null) {
                                            }
                                            if (this.chatMode == 5) {
                                            }
                                            i7 = 0;
                                            arrayList13.add(i7, messageObject9);
                                            if (this.chatAdapter != null) {
                                            }
                                            int i392222 = lastStableId;
                                            lastStableId = i392222 + 1;
                                            messageObject9.stableId = i392222;
                                            getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                            this.messages.add(sponsoredMessagesCount, messageObject9);
                                            if (sponsoredMessagesCount == 0) {
                                            }
                                            arrayList3 = this.notPushedSponsoredMessages;
                                            if (arrayList3 != null) {
                                            }
                                            chatActivityAdapter = this.chatAdapter;
                                            if (chatActivityAdapter != null) {
                                            }
                                            if (messageObject9.isOut()) {
                                            }
                                            if (this.threadMessageId != 0) {
                                            }
                                            i8 = 1;
                                            this.newMentionsCount++;
                                            if (!z8) {
                                            }
                                            int i402222 = messageObject9.type;
                                            if (i402222 != 10) {
                                            }
                                            i30 = i5;
                                            if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                            }
                                            longSparseArray3 = longSparseArray;
                                            z14 = z4;
                                        }
                                    }
                                    longSparseArray = longSparseArray3;
                                    if (this.chatMode == 5) {
                                    }
                                    i7 = 0;
                                    arrayList13.add(i7, messageObject9);
                                    if (this.chatAdapter != null) {
                                    }
                                    int i3922222 = lastStableId;
                                    lastStableId = i3922222 + 1;
                                    messageObject9.stableId = i3922222;
                                    getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                    this.messages.add(sponsoredMessagesCount, messageObject9);
                                    if (sponsoredMessagesCount == 0) {
                                    }
                                    arrayList3 = this.notPushedSponsoredMessages;
                                    if (arrayList3 != null) {
                                    }
                                    chatActivityAdapter = this.chatAdapter;
                                    if (chatActivityAdapter != null) {
                                    }
                                    if (messageObject9.isOut()) {
                                    }
                                    if (this.threadMessageId != 0) {
                                    }
                                    i8 = 1;
                                    this.newMentionsCount++;
                                    if (!z8) {
                                    }
                                    int i4022222 = messageObject9.type;
                                    if (i4022222 != 10) {
                                    }
                                    i30 = i5;
                                    if (messageObject9.messageOwner.action instanceof TLRPC.TL_messageActionSetChatTheme) {
                                    }
                                    longSparseArray3 = longSparseArray;
                                    z14 = z4;
                                }
                            }
                            i4 = -1;
                            if (i4 == -1) {
                            }
                            if (z8) {
                            }
                            i5 = i30;
                            if (this.currentEncryptedChat != null) {
                            }
                            messageObject9.checkLayout();
                            if (!(messageAction instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                            }
                        }
                        i3 = 1;
                        i29 += i3;
                        arrayList2 = arrayList;
                        z12 = z16;
                        z13 = z17;
                        clientUserId = j;
                        str6 = str;
                    } else {
                        if (i31 != 3) {
                            if (this.threadMessageId != 0) {
                                if (ChatObject.isForum(this.currentChat) && this.isTopic) {
                                    z4 = z14;
                                } else {
                                    z4 = z14;
                                }
                                if (this.threadMessageId != messageObject9.getReplyTopMsgId()) {
                                }
                                if (messageObject9.isOut()) {
                                    rotateMotionBackgroundDrawable();
                                }
                                id = messageObject9.getId();
                                if (this.chatMode == 1) {
                                    messageObject4 = (MessageObject) this.messagesDict[0].get(id);
                                    this.messagesDict[0].remove(id);
                                    if (messageObject4 != null) {
                                    }
                                }
                                if (isSecretChat()) {
                                }
                                if (this.chatMode != 1) {
                                    messageObject9.setIsRead();
                                }
                                messageAction = messageObject9.messageOwner.action;
                                chatAvatarContainer = this.avatarContainer;
                                if (chatAvatarContainer != null) {
                                    decryptedMessageAction = messageAction.encryptedAction;
                                    if (decryptedMessageAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                    }
                                }
                                if (messageObject9.type >= 0) {
                                }
                                j = clientUserId;
                                str = str6;
                                z14 = z4;
                                i3 = 1;
                                i29 += i3;
                                arrayList2 = arrayList;
                                z12 = z16;
                                z13 = z17;
                                clientUserId = j;
                                str6 = str;
                            }
                        }
                        z4 = z14;
                        if (messageObject9.isOut()) {
                        }
                        id = messageObject9.getId();
                        if (this.chatMode == 1) {
                        }
                        if (isSecretChat()) {
                        }
                        if (this.chatMode != 1) {
                        }
                        messageAction = messageObject9.messageOwner.action;
                        chatAvatarContainer = this.avatarContainer;
                        if (chatAvatarContainer != null) {
                        }
                        if (messageObject9.type >= 0) {
                        }
                        j = clientUserId;
                        str = str6;
                        z14 = z4;
                        i3 = 1;
                        i29 += i3;
                        arrayList2 = arrayList;
                        z12 = z16;
                        z13 = z17;
                        clientUserId = j;
                        str6 = str;
                    }
                }
                z4 = z14;
                j = clientUserId;
                str = str6;
                z14 = z4;
                i3 = 1;
                i29 += i3;
                arrayList2 = arrayList;
                z12 = z16;
                z13 = z17;
                clientUserId = j;
                str6 = str;
            }
            String str7 = str6;
            boolean z18 = z12;
            boolean z19 = z13;
            boolean z20 = z14;
            if (messageObject8 != null && (message = messageObject8.messageOwner) != null) {
                TLRPC.MessageAction messageAction7 = message.action;
                if (messageAction7 instanceof TLRPC.TL_messageActionSetChatTheme) {
                    setChatThemeEmoticon(((TLRPC.TL_messageActionSetChatTheme) messageAction7).emoticon);
                }
            }
            if (hashMap2 != null) {
                getMessagesController().reloadWebPages(this.dialog_id, hashMap2, this.chatMode);
            }
            if (longSparseArray3 != null) {
                int i42 = 0;
                while (i42 < longSparseArray3.size()) {
                    MessageObject.GroupedMessages groupedMessages5 = (MessageObject.GroupedMessages) longSparseArray3.valueAt(i42);
                    int size3 = groupedMessages5.posArray.size();
                    groupedMessages5.calculate();
                    int size4 = groupedMessages5.posArray.size();
                    if (size4 - size3 <= 0 || this.chatAdapter == null) {
                        i2 = 1;
                    } else {
                        ArrayList arrayList14 = this.messages;
                        ArrayList<MessageObject> arrayList15 = groupedMessages5.messages;
                        i2 = 1;
                        int indexOf2 = arrayList14.indexOf(arrayList15.get(arrayList15.size() - 1));
                        if (indexOf2 >= 0) {
                            this.chatAdapter.notifyItemRangeChanged(indexOf2, size4);
                        }
                    }
                    i42 += i2;
                }
            }
            showProgressView(false);
            ChatActivityAdapter chatActivityAdapter6 = this.chatAdapter;
            if (chatActivityAdapter6 == null) {
                this.scrollToTopOnResume = true;
            }
            if (this.chatListView == null || chatActivityAdapter6 == null) {
                i = 1;
                this.scrollToTopOnResume = true;
            } else {
                int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                if (findFirstVisibleItemPosition == -1) {
                    findFirstVisibleItemPosition = 0;
                }
                View findViewByPosition = this.chatLayoutManager.findViewByPosition(findFirstVisibleItemPosition);
                int bottom = findViewByPosition != null ? findViewByPosition.getBottom() - this.chatListView.getMeasuredHeight() : 0;
                if (z8) {
                    if (findViewByPosition != null) {
                        this.chatLayoutManager.scrollToPositionWithOffset(findFirstVisibleItemPosition + 1, getScrollingOffsetForView(findViewByPosition));
                    }
                } else if ((findFirstVisibleItemPosition != 0 || bottom > AndroidUtilities.dp(5.0f)) && !z11) {
                    int i43 = this.newUnreadMessageCount;
                    if (i43 != 0 && (counterView = this.pagedownButtonCounter) != null && this.prevSetUnreadCount != i43) {
                        this.prevSetUnreadCount = i43;
                        counterView.setCount(i43, true);
                    }
                    this.canShowPagedownButton = true;
                    updatePagedownButtonVisibility(true);
                } else {
                    this.newUnreadMessageCount = 0;
                    if (!this.firstLoading && this.chatMode != 1) {
                        if (this.paused) {
                            this.scrollToTopOnResume = true;
                        } else {
                            this.forceScrollToTop = true;
                            moveScrollToLastMessage(true);
                        }
                    }
                }
                if (this.newMentionsCount == 0 || (simpleTextView = this.mentiondownButtonCounter) == null) {
                    i = 1;
                } else {
                    simpleTextView.setVisibility(0);
                    i = 1;
                    this.mentiondownButtonCounter.setText(String.format(str7, Integer.valueOf(this.newMentionsCount)));
                    showMentionDownButton(true, true);
                }
            }
            z = z18;
            z2 = z19;
            z3 = z20;
        } else {
            int i44 = Integer.MIN_VALUE;
            int i45 = 0;
            z = false;
            z3 = false;
            while (i45 < arrayList.size()) {
                MessageObject messageObject15 = (MessageObject) arrayList2.get(i45);
                if (messageObject15.isOut()) {
                    rotateMotionBackgroundDrawable();
                }
                int i46 = this.chatMode;
                if (i46 == i28) {
                    if (messageObject15.getQuickReplyId() == getQuickReplyId() || TextUtils.equals(messageObject15.getQuickReplyName(), this.quickReplyShortcut)) {
                        str4 = str5;
                    } else {
                        if (messageObject15.messageOwner != null) {
                            str4 = str5;
                        } else {
                            str4 = str5;
                        }
                        i15 = 1;
                    }
                    int id3 = messageObject15.getId();
                    if (messageObject15.isOut() || !this.waitingForSendingMessageLoad) {
                        i16 = 1;
                    } else {
                        this.waitingForSendingMessageLoad = false;
                        i16 = 1;
                        this.chatActivityEnterView.hideTopView(true);
                        ValueAnimator valueAnimator2 = this.changeBoundAnimator;
                        if (valueAnimator2 != null) {
                            valueAnimator2.start();
                        }
                    }
                    if (this.chatMode != i16 && (user2 = this.currentUser) != null && ((user2.bot && messageObject15.isOut()) || this.currentUser.id == clientUserId)) {
                        messageObject15.setIsRead();
                    }
                    messageAction2 = messageObject15.messageOwner.action;
                    chatAvatarContainer2 = this.avatarContainer;
                    if (chatAvatarContainer2 != null && this.currentEncryptedChat != null && (messageAction2 instanceof TLRPC.TL_messageEncryptedAction)) {
                        decryptedMessageAction2 = messageAction2.encryptedAction;
                        if (decryptedMessageAction2 instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                            chatAvatarContainer2.setTime(decryptedMessageAction2.ttl_seconds, true);
                        }
                    }
                    if (!(messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                        migrateToNewChat(messageObject15);
                        return;
                    }
                    TLRPC.Chat chat7 = this.currentChat;
                    if (chat7 != null && chat7.megagroup && ((messageAction2 instanceof TLRPC.TL_messageActionChatAddUser) || (messageAction2 instanceof TLRPC.TL_messageActionChatDeleteUser))) {
                        z3 = true;
                    }
                    if (i45 == 0 && messageObject15.shouldAnimateSending()) {
                        z7 = true;
                        if (this.chatMode != 1) {
                            this.needAnimateToMessage = messageObject15;
                        }
                    } else {
                        z7 = true;
                    }
                    if (messageObject15.isOut() && messageObject15.wasJustSent) {
                        scrollToLastMessage(z7, false);
                        return;
                    }
                    if (messageObject15.type >= 0 && this.messagesDict[0].indexOfKey(id3) < 0 && (((chat3 = this.currentChat) == null || !chat3.creator || ((ChatObject.isChannel(chat3) && !this.currentChat.megagroup) || (!(messageAction2 instanceof TLRPC.TL_messageActionChatCreate) && (!(messageAction2 instanceof TLRPC.TL_messageActionChatEditPhoto) || this.messages.size() >= 2)))) && !(messageAction2 instanceof TLRPC.TL_messageActionChannelMigrateFrom) && !(messageObject15.messageOwner instanceof TLRPC.TL_messageEmpty))) {
                        if (!this.isTopic && this.threadMessageObject != null && messageObject15.isReply() && !(messageObject15.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject15.getReplyAnyMsgId()) {
                            this.threadMessageObject.messageOwner.replies.replies++;
                        }
                        addToPolls(messageObject15, null);
                        messageObject15.checkLayout();
                        i44 = Math.max(i44, messageObject15.messageOwner.date);
                        if (id3 > 0) {
                            min = Math.max(this.last_message_id, id3);
                        } else {
                            if (this.currentEncryptedChat != null) {
                                min = Math.min(this.last_message_id, id3);
                            }
                            if ((this.threadMessageId != 0 || this.isTopic) && messageObject15.messageOwner.mentioned && messageObject15.isContentUnread()) {
                                i17 = 1;
                                this.newMentionsCount++;
                            } else {
                                i17 = 1;
                            }
                            if (!z8) {
                                this.newUnreadMessageCount += i17;
                            }
                            i18 = messageObject15.type;
                            if (i18 != 10 || i18 == 11) {
                                i15 = 1;
                                z = true;
                            }
                        }
                        this.last_message_id = min;
                        if (this.threadMessageId != 0) {
                        }
                        i17 = 1;
                        this.newMentionsCount++;
                        if (!z8) {
                        }
                        i18 = messageObject15.type;
                        if (i18 != 10) {
                        }
                        i15 = 1;
                        z = true;
                    }
                    i15 = 1;
                } else {
                    str4 = str5;
                    if (i46 != 3) {
                        long j3 = this.threadMessageId;
                        if (j3 != 0) {
                            if (j3 != messageObject15.getReplyTopMsgId()) {
                            }
                        }
                        int id32 = messageObject15.getId();
                        if (messageObject15.isOut()) {
                        }
                        i16 = 1;
                        if (this.chatMode != i16) {
                            messageObject15.setIsRead();
                        }
                        messageAction2 = messageObject15.messageOwner.action;
                        chatAvatarContainer2 = this.avatarContainer;
                        if (chatAvatarContainer2 != null) {
                            decryptedMessageAction2 = messageAction2.encryptedAction;
                            if (decryptedMessageAction2 instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                            }
                        }
                        if (!(messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                        }
                    }
                }
                i45 += i15;
                str5 = str4;
                i28 = 5;
            }
            String str8 = str5;
            if (this.newUnreadMessageCount != 0 && (counterView2 = this.pagedownButtonCounter) != null) {
                counterView2.setVisibility(0);
                int i47 = this.prevSetUnreadCount;
                int i48 = this.newUnreadMessageCount;
                if (i47 != i48) {
                    this.prevSetUnreadCount = i48;
                    this.pagedownButtonCounter.setCount(i48, true);
                }
            }
            if (this.newMentionsCount != 0 && (simpleTextView2 = this.mentiondownButtonCounter) != null) {
                simpleTextView2.setVisibility(0);
                this.mentiondownButtonCounter.setText(String.format(str8, Integer.valueOf(this.newMentionsCount)));
                showMentionDownButton(true, true);
            }
            updateVisibleRows();
            z2 = false;
            i = 1;
        }
        if (this.chatMode != i || arrayList.isEmpty()) {
            arrayList4 = arrayList;
        } else {
            arrayList4 = arrayList;
            MessageObject messageObject16 = (MessageObject) arrayList4.get(0);
            final int id4 = messageObject16.getId();
            if (id4 < 0) {
                ChatListItemAnimator chatListItemAnimator2 = this.chatListItemAnimator;
                if (chatListItemAnimator2 != null) {
                    chatListItemAnimator2.setShouldAnimateEnterFromBottom(z2);
                }
                if (z2) {
                    moveScrollToLastMessage(false);
                } else {
                    int indexOf3 = this.messages.indexOf(messageObject16);
                    GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
                    if (gridLayoutManagerFixed == null || indexOf3 <= 0 || (gridLayoutManagerFixed.findViewByPosition(this.chatAdapter.messagesStartRow + indexOf3) == null && this.chatLayoutManager.findViewByPosition((this.chatAdapter.messagesStartRow + indexOf3) - 1) == null)) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda175
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$processNewMessages$183(id4);
                            }
                        });
                    } else {
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(messageObject16), getScrollOffsetForMessage(messageObject16), false);
                    }
                }
            }
        }
        if (this.chatMode == 5) {
            updateBottomOverlay();
        }
        if (!this.messages.isEmpty() && (str3 = this.botUser) != null && str3.length() == 0) {
            this.botUser = null;
            updateBottomOverlay();
        }
        if (z) {
            updateTitle(false);
            checkAndUpdateAvatar();
        }
        if (z3) {
            z6 = true;
            getMessagesController().loadFullChat(this.currentChat.id, 0, true);
        } else {
            z6 = true;
        }
        checkWaitingForReplies();
        updateReplyMessageHeader(z6);
        if (!z8 && (arrayList5 = this.notPushedSponsoredMessages) != null && !arrayList5.isEmpty() && arrayList4 != (arrayList6 = this.notPushedSponsoredMessages)) {
            processNewMessages(arrayList6);
        }
        invalidatePremiumBlocked();
        HintView2 hintView2 = this.savedMessagesTagHint;
        if (hintView2 != null && hintView2.shown()) {
            this.savedMessagesTagHint.hide();
        }
        HintView2 hintView22 = this.botMessageHint;
        if (hintView22 != null && hintView22.shown()) {
            this.botMessageHint.hide();
        }
        HintView2 hintView23 = this.factCheckHint;
        if (hintView23 != null) {
            hintView23.hide();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processRowSelect(View view, boolean z, float f, float f2) {
        MessageObject messageObject;
        int i;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            messageObject = chatMessageCell.getMessageObject();
            chatMessageCell.setLastTouchCoords(f, f2);
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
        }
        int messageType = getMessageType(messageObject);
        if ((messageObject == null || !messageObject.isAnyGift()) && messageType >= 2 && messageType != 20 && messageType != 21) {
            if (messageObject == null || !((i = messageObject.type) == 27 || i == 30)) {
                if (messageObject == null || !messageObject.isWallpaperAction()) {
                    addToSelectedMessages(messageObject, z);
                    updateActionModeTitle();
                    updateVisibleRows();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processSelectedAttach(int i) {
        int checkSelfPermission;
        int checkSelfPermission2;
        TLRPC.TL_chatBannedRights tL_chatBannedRights;
        int checkSelfPermission3;
        int checkSelfPermission4;
        try {
            if (i == 0) {
                int i2 = Build.VERSION.SDK_INT;
                if (i2 >= 23) {
                    checkSelfPermission4 = getParentActivity().checkSelfPermission("android.permission.CAMERA");
                    if (checkSelfPermission4 != 0) {
                        getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
                        return;
                    }
                }
                Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
                File generatePicturePath = AndroidUtilities.generatePicturePath();
                if (generatePicturePath != null) {
                    if (i2 >= 24) {
                        Activity parentActivity = getParentActivity();
                        intent.putExtra("output", FileProvider.getUriForFile(parentActivity, ApplicationLoader.getApplicationId() + ".provider", generatePicturePath));
                        intent.addFlags(2);
                        intent.addFlags(1);
                    } else {
                        intent.putExtra("output", Uri.fromFile(generatePicturePath));
                    }
                    this.currentPicturePath = generatePicturePath.getAbsolutePath();
                }
                startActivityForResult(intent, 0);
            } else if (i == 1) {
                Activity parentActivity2 = getParentActivity();
                int i3 = Build.VERSION.SDK_INT;
                if (i3 >= 33) {
                    checkSelfPermission3 = parentActivity2.checkSelfPermission("android.permission.READ_MEDIA_IMAGES");
                    if (checkSelfPermission3 != 0) {
                        try {
                            getParentActivity().requestPermissions(new String[]{"android.permission.READ_MEDIA_IMAGES", "android.permission.READ_MEDIA_VIDEO"}, 4);
                            return;
                        } catch (Throwable unused) {
                            return;
                        }
                    }
                } else if (i3 >= 23) {
                    checkSelfPermission2 = parentActivity2.checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE");
                    if (checkSelfPermission2 != 0) {
                        try {
                            getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
                            return;
                        } catch (Throwable unused2) {
                            return;
                        }
                    }
                }
                PhotoAlbumPickerActivity photoAlbumPickerActivity = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_ALL, (ChatObject.isChannel(this.currentChat) && (tL_chatBannedRights = this.currentChat.banned_rights) != null && tL_chatBannedRights.send_gifs) ? false : true, true, this);
                TLRPC.Chat chat = this.currentChat;
                if (chat == null || ChatObject.hasAdminRights(chat) || !this.currentChat.slowmode_enabled) {
                    MessageObject messageObject = this.editingMessageObject;
                    photoAlbumPickerActivity.setMaxSelectedPhotos(messageObject != null ? 1 : 0, messageObject == null);
                } else {
                    photoAlbumPickerActivity.setMaxSelectedPhotos(10, true);
                }
                photoAlbumPickerActivity.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() { // from class: org.telegram.ui.ChatActivity.93
                    @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                    public void didSelectPhotos(ArrayList arrayList, boolean z, int i4) {
                    }

                    @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                    public void startPhotoSelectActivity() {
                        try {
                            Intent intent2 = new Intent();
                            intent2.setType("video/*");
                            intent2.setAction("android.intent.action.GET_CONTENT");
                            intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                            Intent intent3 = new Intent("android.intent.action.PICK");
                            intent3.setType("image/*");
                            Intent createChooser = Intent.createChooser(intent3, null);
                            createChooser.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{intent2});
                            ChatActivity.this.startActivityForResult(createChooser, 1);
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                    }
                });
                presentFragment(photoAlbumPickerActivity);
            } else if (i == 2) {
                int i4 = Build.VERSION.SDK_INT;
                if (i4 >= 23) {
                    checkSelfPermission = getParentActivity().checkSelfPermission("android.permission.CAMERA");
                    if (checkSelfPermission != 0) {
                        try {
                            getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
                            return;
                        } catch (Throwable unused3) {
                            return;
                        }
                    }
                }
                Intent intent2 = new Intent("android.media.action.VIDEO_CAPTURE");
                File generateVideoPath = AndroidUtilities.generateVideoPath();
                if (generateVideoPath != null) {
                    if (i4 >= 24) {
                        Activity parentActivity3 = getParentActivity();
                        intent2.putExtra("output", FileProvider.getUriForFile(parentActivity3, ApplicationLoader.getApplicationId() + ".provider", generateVideoPath));
                        intent2.addFlags(2);
                        intent2.addFlags(1);
                    } else {
                        intent2.putExtra("output", Uri.fromFile(generateVideoPath));
                    }
                    intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                    this.currentPicturePath = generateVideoPath.getAbsolutePath();
                }
                startActivityForResult(intent2, 2);
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:321:0x0805, code lost:
        if (r0.exists() != false) goto L315;
     */
    /* JADX WARN: Code restructure failed: missing block: B:412:0x0a20, code lost:
        if (r21.chatMode == 0) goto L407;
     */
    /* JADX WARN: Code restructure failed: missing block: B:417:0x0a34, code lost:
        if (r21.chatMode == 0) goto L407;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v120, types: [org.telegram.ui.ActionBar.BottomSheet, org.telegram.ui.Components.StickersAlert] */
    /* JADX WARN: Type inference failed for: r0v170, types: [org.telegram.tgnet.TLRPC$TL_channels_exportMessageLink] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processSelectedOption(int i) {
        RequestDelegate requestDelegate;
        ConnectionsManager connectionsManager;
        TLRPC.TL_messages_sendScheduledMessages tL_messages_sendScheduledMessages;
        CharSequence messageCaption;
        Bulletin createDownloadBulletin;
        int checkSelfPermission;
        File file;
        AlertDialog.Builder builder;
        DialogInterface.OnDismissListener onDismissListener;
        BaseFragment languageSelectActivity;
        int checkSelfPermission2;
        DialogsActivity dialogsActivity;
        TLRPC.Chat chat;
        MessageObject.GroupedMessages group;
        TLRPC.Message message;
        TLRPC.Chat chat2;
        ArrayList arrayList;
        int checkSelfPermission3;
        AlertDialog.Builder builder2;
        TLRPC.Chat chat3;
        final boolean[] zArr;
        FrameLayout frameLayout;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        ContactAddActivity contactAddActivity;
        AlertDialog alertDialog;
        int i3;
        TLRPC.TL_forumTopic findTopic;
        boolean z = false;
        if (this.selectedObject == null || getParentActivity() == null) {
            return;
        }
        if (i != 100) {
            if (i != 106) {
                if (i != 107) {
                    int i4 = 2;
                    switch (i) {
                        case 0:
                            if (this.selectedObjectGroup != null) {
                                boolean z2 = true;
                                for (int i5 = 0; i5 < this.selectedObjectGroup.messages.size(); i5++) {
                                    if (!getSendMessagesHelper().retrySendMessage(this.selectedObjectGroup.messages.get(i5), false)) {
                                        z2 = false;
                                    }
                                }
                                if (z2) {
                                    break;
                                }
                            } else if (getSendMessagesHelper().retrySendMessage(this.selectedObject, false)) {
                                updateVisibleRows();
                                break;
                            }
                            moveScrollToLastMessage(false);
                            break;
                        case 1:
                            if (getParentActivity() == null) {
                                this.selectedObject = null;
                                this.selectedObjectToEditCaption = null;
                                this.selectedObjectGroup = null;
                                return;
                            }
                            createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup, true);
                            break;
                        case 2:
                            this.forwardingMessage = this.selectedObject;
                            this.forwardingMessageGroup = this.selectedObjectGroup;
                            Bundle bundle = new Bundle();
                            bundle.putBoolean("onlySelect", true);
                            bundle.putInt("dialogsType", 3);
                            bundle.putInt("messagesCount", 1);
                            if (!this.forwardingMessage.isPoll()) {
                                i4 = 0;
                            } else if (!this.forwardingMessage.isPublicPoll()) {
                                i4 = 1;
                            }
                            bundle.putInt("hasPoll", i4);
                            bundle.putBoolean("hasInvoice", this.forwardingMessage.isInvoice());
                            bundle.putBoolean("canSelectTopics", true);
                            dialogsActivity = new DialogsActivity(bundle);
                            dialogsActivity.setDelegate(this);
                            contactAddActivity = dialogsActivity;
                            presentFragment(contactAddActivity);
                            break;
                        case 3:
                            if (this.selectedObject.isDice()) {
                                messageCaption = this.selectedObject.getDiceEmoji();
                            } else {
                                messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                if (messageCaption == null) {
                                    messageCaption = getMessageContent(this.selectedObject, 0L, false);
                                }
                            }
                            AndroidUtilities.addToClipboard(messageCaption);
                            createUndoView();
                            UndoView undoView = this.undoView;
                            if (undoView != null) {
                                undoView.showWithAction(0L, 52, (Runnable) null);
                                break;
                            } else {
                                return;
                            }
                        case 4:
                            int i6 = Build.VERSION.SDK_INT;
                            if (i6 >= 23 && (i6 <= 28 || BuildVars.NO_SCOPED_STORAGE)) {
                                checkSelfPermission = getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE");
                                if (checkSelfPermission != 0) {
                                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                    this.selectedObject = null;
                                    this.selectedObjectGroup = null;
                                    this.selectedObjectToEditCaption = null;
                                    return;
                                }
                            }
                            MessageObject.GroupedMessages groupedMessages2 = this.selectedObjectGroup;
                            if (groupedMessages2 != null) {
                                int size = groupedMessages2.messages.size();
                                boolean z3 = true;
                                boolean z4 = true;
                                for (int i7 = 0; i7 < size; i7++) {
                                    MessageObject messageObject = this.selectedObjectGroup.messages.get(i7);
                                    saveMessageToGallery(messageObject);
                                    z3 &= messageObject.isPhoto();
                                    z4 &= messageObject.isVideo();
                                }
                                createDownloadBulletin = BulletinFactory.of(this).createDownloadBulletin(z3 ? BulletinFactory.FileType.PHOTOS : z4 ? BulletinFactory.FileType.VIDEOS : BulletinFactory.FileType.MEDIA, size, this.themeDelegate);
                            } else {
                                saveMessageToGallery(this.selectedObject);
                                if (getParentActivity() != null) {
                                    createDownloadBulletin = BulletinFactory.of(this).createDownloadBulletin(this.selectedObject.isVideo() ? BulletinFactory.FileType.VIDEO : BulletinFactory.FileType.PHOTO, this.themeDelegate);
                                }
                            }
                            createDownloadBulletin.show();
                            break;
                        case 5:
                            if (!TextUtils.isEmpty(this.selectedObject.messageOwner.attachPath)) {
                                file = new File(this.selectedObject.messageOwner.attachPath);
                                break;
                            }
                            file = null;
                            if (file == null) {
                                File pathToMessage = getFileLoader().getPathToMessage(this.selectedObject.messageOwner);
                                if (pathToMessage.exists()) {
                                    file = pathToMessage;
                                }
                            }
                            if (file != null) {
                                if (file.getName().toLowerCase().endsWith("attheme")) {
                                    Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, this.selectedObject.getDocumentName(), null, true);
                                    if (applyThemeFile != null) {
                                        contactAddActivity = new ThemePreviewActivity(applyThemeFile);
                                        presentFragment(contactAddActivity);
                                        break;
                                    } else {
                                        this.scrollToPositionOnRecreate = -1;
                                        if (getParentActivity() == null) {
                                            this.selectedObject = null;
                                            this.selectedObjectGroup = null;
                                            this.selectedObjectToEditCaption = null;
                                            return;
                                        }
                                        builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                        builder.setTitle(LocaleController.getString(R.string.AppName));
                                        builder.setMessage(LocaleController.getString(R.string.IncorrectTheme));
                                        builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
                                        builder.setDimEnabled(false);
                                        onDismissListener = new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda286
                                            @Override // android.content.DialogInterface.OnDismissListener
                                            public final void onDismiss(DialogInterface dialogInterface) {
                                                ChatActivity.this.lambda$processSelectedOption$270(dialogInterface);
                                            }
                                        };
                                    }
                                } else if (LocaleController.getInstance().applyLanguageFile(file, this.currentAccount)) {
                                    languageSelectActivity = new LanguageSelectActivity();
                                    presentFragment(languageSelectActivity);
                                    break;
                                } else if (getParentActivity() == null) {
                                    this.selectedObject = null;
                                    this.selectedObjectGroup = null;
                                    this.selectedObjectToEditCaption = null;
                                    return;
                                } else {
                                    builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                    builder.setTitle(LocaleController.getString(R.string.AppName));
                                    builder.setMessage(LocaleController.getString(R.string.IncorrectLocalization));
                                    builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
                                    builder.setDimEnabled(false);
                                    onDismissListener = new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda287
                                        @Override // android.content.DialogInterface.OnDismissListener
                                        public final void onDismiss(DialogInterface dialogInterface) {
                                            ChatActivity.this.lambda$processSelectedOption$271(dialogInterface);
                                        }
                                    };
                                }
                                builder.setOnPreDismissListener(onDismissListener);
                                alertDialog = builder.create();
                                showDialog(alertDialog);
                                break;
                            }
                            break;
                        case 6:
                            String str = this.selectedObject.messageOwner.attachPath;
                            if (str != null && str.length() > 0 && !new File(str).exists()) {
                                str = null;
                            }
                            if (str == null || str.length() == 0) {
                                str = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                            }
                            Intent intent = new Intent("android.intent.action.SEND");
                            intent.setType(this.selectedObject.getDocument().mime_type);
                            File file2 = new File(str);
                            try {
                                if (Build.VERSION.SDK_INT >= 24) {
                                    try {
                                        intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), ApplicationLoader.getApplicationId() + ".provider", file2));
                                        intent.setFlags(1);
                                    } catch (Exception unused) {
                                    }
                                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString(R.string.ShareFile)), 500);
                                }
                                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString(R.string.ShareFile)), 500);
                            } catch (Throwable unused2) {
                                break;
                            }
                            intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
                            break;
                        case 7:
                            String str2 = this.selectedObject.messageOwner.attachPath;
                            if (str2 != null && str2.length() > 0 && !new File(str2).exists()) {
                                str2 = null;
                            }
                            if (str2 == null || str2.length() == 0) {
                                str2 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                            }
                            int i8 = Build.VERSION.SDK_INT;
                            if (i8 >= 23 && (i8 <= 28 || BuildVars.NO_SCOPED_STORAGE)) {
                                checkSelfPermission2 = getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE");
                                if (checkSelfPermission2 != 0) {
                                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                    this.selectedObject = null;
                                    this.selectedObjectGroup = null;
                                    this.selectedObjectToEditCaption = null;
                                    return;
                                }
                            }
                            MediaController.saveFile(str2, getParentActivity(), 0, null, null);
                            createDownloadBulletin = BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate);
                            createDownloadBulletin.show();
                            break;
                        case 8:
                            MessageObject messageObject2 = this.selectedObject;
                            if (messageObject2 == null || (message = messageObject2.messageOwner) == null || !message.noforwards) {
                                if (messageObject2 != null && (chat = this.currentChat) != null && ((ChatObject.isNotInChat(chat) && !isThreadChat()) || ((ChatObject.isChannel(this.currentChat) && !ChatObject.canPost(this.currentChat) && !this.currentChat.megagroup) || !ChatObject.canSendMessages(this.currentChat)))) {
                                    MessageObject messageObject3 = this.selectedObject;
                                    if (messageObject3.getGroupId() != 0 && (group = getGroup(messageObject3.getGroupId())) != null) {
                                        messageObject3 = group.captionMessage;
                                    }
                                    this.replyingMessageObject = messageObject3;
                                    Bundle bundle2 = new Bundle();
                                    bundle2.putBoolean("onlySelect", true);
                                    bundle2.putInt("dialogsType", 3);
                                    bundle2.putBoolean("quote", true);
                                    bundle2.putBoolean("reply_to", true);
                                    bundle2.putInt("messagesCount", 1);
                                    bundle2.putBoolean("canSelectTopics", true);
                                    dialogsActivity = new DialogsActivity(bundle2);
                                    dialogsActivity.setDelegate(this);
                                    contactAddActivity = dialogsActivity;
                                    presentFragment(contactAddActivity);
                                    break;
                                } else {
                                    showFieldPanelForReply(this.selectedObject);
                                    break;
                                }
                            } else {
                                return;
                            }
                            break;
                        case 9:
                            ?? stickersAlert = new StickersAlert(getParentActivity(), this, this.selectedObject.getInputStickerSet(), null, (this.bottomOverlayChat.getVisibility() == 0 || !((chat2 = this.currentChat) == null || ChatObject.canSendStickers(chat2))) ? null : this.chatActivityEnterView, this.themeDelegate);
                            stickersAlert.setCalcMandatoryInsets(isKeyboardVisible());
                            stickersAlert.setDimBehind(false);
                            stickersAlert.setOnDismissListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda285
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$processSelectedOption$272();
                                }
                            });
                            alertDialog = stickersAlert;
                            showDialog(alertDialog);
                            break;
                        case 10:
                            int i9 = Build.VERSION.SDK_INT;
                            if (i9 >= 23 && (i9 <= 28 || BuildVars.NO_SCOPED_STORAGE)) {
                                checkSelfPermission3 = getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE");
                                if (checkSelfPermission3 != 0) {
                                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                                    this.selectedObject = null;
                                    this.selectedObjectGroup = null;
                                    this.selectedObjectToEditCaption = null;
                                    return;
                                }
                            }
                            final boolean isMusic = this.selectedObject.isMusic();
                            boolean isDocument = this.selectedObject.isDocument();
                            if (!isMusic && !isDocument) {
                                final boolean isVideo = this.selectedObject.isVideo();
                                final boolean isPhoto = this.selectedObject.isPhoto();
                                final boolean isGif = this.selectedObject.isGif();
                                String documentFileName = FileLoader.getDocumentFileName(this.selectedObject.getDocument());
                                if (TextUtils.isEmpty(documentFileName)) {
                                    documentFileName = this.selectedObject.getFileName();
                                }
                                String str3 = documentFileName;
                                String str4 = this.selectedObject.messageOwner.attachPath;
                                if (str4 != null && str4.length() > 0 && !new File(str4).exists()) {
                                    str4 = null;
                                }
                                if (str4 == null || str4.length() == 0) {
                                    str4 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                                }
                                MediaController.saveFile(str4, getParentActivity(), 2, str3, this.selectedObject.getDocument() != null ? this.selectedObject.getDocument().mime_type : "", new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda283
                                    @Override // org.telegram.messenger.Utilities.Callback
                                    public final void run(Object obj) {
                                        ChatActivity.this.lambda$processSelectedOption$274(isPhoto, isVideo, isGif, (Uri) obj);
                                    }
                                });
                                break;
                            } else {
                                if (this.selectedObjectGroup != null) {
                                    arrayList = new ArrayList(this.selectedObjectGroup.messages);
                                } else {
                                    arrayList = new ArrayList();
                                    arrayList.add(this.selectedObject);
                                }
                                MediaController.saveFilesFromMessages(getParentActivity(), getAccountInstance(), arrayList, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda284
                                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                                    public final void run(int i10) {
                                        ChatActivity.this.lambda$processSelectedOption$273(isMusic, i10);
                                    }
                                });
                                break;
                            }
                            break;
                        case 11:
                            TLRPC.Document document = this.selectedObject.getDocument();
                            getMessagesController().saveGif(this.selectedObject, document);
                            if (!showGifHint() && getParentActivity() != null) {
                                BulletinFactory.of(this).createDownloadBulletin(BulletinFactory.FileType.GIF, this.themeDelegate).show();
                            }
                            this.chatActivityEnterView.addRecentGif(document);
                            break;
                        case 12:
                            MessageObject messageObject4 = this.selectedObjectToEditCaption;
                            if (messageObject4 == null) {
                                messageObject4 = this.selectedObject;
                            }
                            startEditingMessageObject(messageObject4);
                            break;
                        case 13:
                            MessageObject.GroupedMessages groupedMessages3 = this.selectedObjectGroup;
                            final int id = ((groupedMessages3 == null || groupedMessages3.messages.isEmpty()) ? this.selectedObject : this.selectedObjectGroup.messages.get(0)).getId();
                            builder2 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder2.setTitle(LocaleController.getString(R.string.PinMessageAlertTitle));
                            builder2.setDimAlpha(0.5f);
                            builder2.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda297
                                @Override // android.content.DialogInterface.OnDismissListener
                                public final void onDismiss(DialogInterface dialogInterface) {
                                    ChatActivity.this.lambda$processSelectedOption$276(dialogInterface);
                                }
                            });
                            if (this.currentUser != null) {
                                int i10 = this.currentPinnedMessageId;
                                builder2.setMessage(LocaleController.getString((i10 == 0 || id >= i10) ? R.string.PinMessageAlertChat : R.string.PinOldMessageAlert));
                                zArr = new boolean[]{false, false};
                                if (!UserObject.isUserSelf(this.currentUser)) {
                                    frameLayout = new FrameLayout(getParentActivity());
                                    CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                    checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                    checkBoxCell.setText(LocaleController.formatString("PinAlsoFor", R.string.PinAlsoFor, UserObject.getFirstName(this.currentUser)), "", false, false);
                                    checkBoxCell.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16.0f : 8.0f), 0, AndroidUtilities.dp(LocaleController.isRTL ? 8.0f : 16.0f), 0);
                                    frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48, 51));
                                    checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda298
                                        @Override // android.view.View.OnClickListener
                                        public final void onClick(View view) {
                                            ChatActivity.lambda$processSelectedOption$277(zArr, view);
                                        }
                                    });
                                    i2 = 6;
                                    builder2.setCustomViewOffset(i2);
                                    builder2.setView(frameLayout);
                                }
                                builder2.setPositiveButton(LocaleController.getString(R.string.PinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda300
                                    @Override // android.content.DialogInterface.OnClickListener
                                    public final void onClick(DialogInterface dialogInterface, int i11) {
                                        ChatActivity.this.lambda$processSelectedOption$280(id, zArr, dialogInterface, i11);
                                    }
                                });
                            } else {
                                if (!(ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) && ((chat3 = this.currentChat) == null || ChatObject.isChannel(chat3))) {
                                    int i11 = this.currentPinnedMessageId;
                                    builder2.setMessage(LocaleController.getString((i11 == 0 || id >= i11) ? R.string.PinMessageAlertChannel : R.string.PinOldMessageAlert));
                                    zArr = new boolean[]{false, true};
                                } else if (this.pinnedMessageIds.isEmpty() || id >= ((Integer) this.pinnedMessageIds.get(0)).intValue()) {
                                    builder2.setMessage(LocaleController.getString(this.isTopic ? R.string.PinMessageInTopicAlert : R.string.PinMessageAlert));
                                    zArr = new boolean[]{true, true};
                                    frameLayout = new FrameLayout(getParentActivity());
                                    CheckBoxCell checkBoxCell2 = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                    checkBoxCell2.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                    checkBoxCell2.setText(LocaleController.getString(R.string.PinNotify), "", true, false);
                                    checkBoxCell2.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16.0f : 8.0f), 0, AndroidUtilities.dp(LocaleController.isRTL ? 8.0f : 16.0f), 0);
                                    frameLayout.addView(checkBoxCell2, LayoutHelper.createFrame(-1, 48, 51));
                                    checkBoxCell2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda299
                                        @Override // android.view.View.OnClickListener
                                        public final void onClick(View view) {
                                            ChatActivity.lambda$processSelectedOption$278(zArr, view);
                                        }
                                    });
                                    i2 = 9;
                                    builder2.setCustomViewOffset(i2);
                                    builder2.setView(frameLayout);
                                } else {
                                    builder2.setMessage(LocaleController.getString(R.string.PinOldMessageAlert));
                                    zArr = new boolean[]{false, true};
                                }
                                builder2.setPositiveButton(LocaleController.getString(R.string.PinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda300
                                    @Override // android.content.DialogInterface.OnClickListener
                                    public final void onClick(DialogInterface dialogInterface, int i112) {
                                        ChatActivity.this.lambda$processSelectedOption$280(id, zArr, dialogInterface, i112);
                                    }
                                });
                            }
                            builder2.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                            alertDialog = builder2.create();
                            showDialog(alertDialog);
                            break;
                        case 14:
                            MessageObject messageObject5 = (this.pinnedMessageObjects.containsKey(Integer.valueOf(this.selectedObject.getId())) || (groupedMessages = this.selectedObjectGroup) == null || groupedMessages.messages.isEmpty()) ? this.selectedObject : this.selectedObjectGroup.messages.get(0);
                            if (this.chatMode != 2 || this.messages.size() != 2) {
                                unpinMessage(messageObject5);
                                break;
                            } else {
                                lambda$onBackPressed$300();
                                this.chatActivityDelegate.onUnpin(false, false);
                                break;
                            }
                            break;
                        case 15:
                            Bundle bundle3 = new Bundle();
                            bundle3.putLong("user_id", this.selectedObject.messageOwner.media.user_id);
                            bundle3.putString("phone", this.selectedObject.messageOwner.media.phone_number);
                            bundle3.putBoolean("addContact", true);
                            contactAddActivity = new ContactAddActivity(bundle3);
                            presentFragment(contactAddActivity);
                            break;
                        case 16:
                            AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
                            break;
                        case 17:
                            try {
                                Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse("tel:" + this.selectedObject.messageOwner.media.phone_number));
                                intent2.addFlags(268435456);
                                getParentActivity().startActivityForResult(intent2, 500);
                                break;
                            } catch (Exception e) {
                                FileLog.e(e);
                                break;
                            }
                        case 18:
                            TLRPC.User user = this.currentUser;
                            if (user != null) {
                                boolean isVideoCall = this.selectedObject.isVideoCall();
                                TLRPC.UserFull userFull = this.userInfo;
                                VoIPHelper.startCall(user, isVideoCall, userFull != null && userFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                                break;
                            }
                            break;
                        case 19:
                            VoIPHelper.showRateAlert(getParentActivity(), (TLRPC.TL_messageActionPhoneCall) this.selectedObject.messageOwner.action);
                            break;
                        case 20:
                            MediaDataController mediaDataController = getMediaDataController();
                            MessageObject messageObject6 = this.selectedObject;
                            mediaDataController.addRecentSticker(2, messageObject6, messageObject6.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                            break;
                        case 21:
                            MediaDataController mediaDataController2 = getMediaDataController();
                            MessageObject messageObject7 = this.selectedObject;
                            mediaDataController2.addRecentSticker(2, messageObject7, messageObject7.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                            break;
                        case 22:
                            ?? tL_channels_exportMessageLink = new TLRPC.TL_channels_exportMessageLink();
                            MessageObject messageObject8 = this.selectedObject;
                            if (messageObject8 == this.replyingMessageObject && this.isComments) {
                                tL_channels_exportMessageLink.id = this.replyOriginalMessageId;
                                tL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.replyOriginalChat);
                            } else {
                                tL_channels_exportMessageLink.id = messageObject8.getId();
                                tL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.currentChat);
                                tL_channels_exportMessageLink.thread = isReplyChatComment() || this.isTopic;
                            }
                            ConnectionsManager connectionsManager2 = getConnectionsManager();
                            requestDelegate = new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda296
                                @Override // org.telegram.tgnet.RequestDelegate
                                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                    ChatActivity.this.lambda$processSelectedOption$282(tLObject, tL_error);
                                }
                            };
                            tL_messages_sendScheduledMessages = tL_channels_exportMessageLink;
                            connectionsManager = connectionsManager2;
                            connectionsManager.sendRequest(tL_messages_sendScheduledMessages, requestDelegate);
                            break;
                        case 23:
                            if (UserObject.isReplyUser(this.currentUser)) {
                                MessageObject messageObject9 = this.selectedObject;
                                TLRPC.MessageFwdHeader messageFwdHeader = messageObject9.messageOwner.fwd_from;
                                if (messageFwdHeader != null) {
                                    AlertsCreator.showBlockReportSpamReplyAlert(this, messageObject9, MessageObject.getPeerId(messageFwdHeader.from_id), this.themeDelegate, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda295
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            ChatActivity.this.lambda$processSelectedOption$283();
                                        }
                                    });
                                    break;
                                }
                            } else {
                                ReportBottomSheet.openMessage(this, this.selectedObject);
                                break;
                            }
                            break;
                        case 24:
                            if (!this.selectedObject.isEditing() && (!this.selectedObject.isSending() || this.selectedObjectGroup != null)) {
                                if (this.selectedObject.isSending() && this.selectedObjectGroup != null) {
                                    for (int i12 = 0; i12 < this.selectedObjectGroup.messages.size(); i12++) {
                                        getSendMessagesHelper().cancelSendingMessage(new ArrayList<>(this.selectedObjectGroup.messages));
                                    }
                                    break;
                                }
                            } else {
                                getSendMessagesHelper().cancelSendingMessage(this.selectedObject);
                                break;
                            }
                            break;
                        case 25:
                            final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                            final int sendVote = getSendMessagesHelper().sendVote(this.selectedObject, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda293
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.lambda$processSelectedOption$284(alertDialogArr);
                                }
                            });
                            if (sendVote != 0) {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda294
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.this.lambda$processSelectedOption$286(alertDialogArr, sendVote);
                                    }
                                }, 500L);
                                break;
                            }
                            break;
                        case 26:
                            final MessageObject messageObject10 = this.selectedObject;
                            builder2 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder2.setDimEnabled(false);
                            builder2.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda282
                                @Override // android.content.DialogInterface.OnDismissListener
                                public final void onDismiss(DialogInterface dialogInterface) {
                                    ChatActivity.this.lambda$processSelectedOption$287(dialogInterface);
                                }
                            });
                            if (messageObject10.isQuiz()) {
                                builder2.setTitle(LocaleController.getString(R.string.StopQuizAlertTitle));
                                i3 = R.string.StopQuizAlertText;
                            } else {
                                builder2.setTitle(LocaleController.getString(R.string.StopPollAlertTitle));
                                i3 = R.string.StopPollAlertText;
                            }
                            builder2.setMessage(LocaleController.getString(i3));
                            builder2.setPositiveButton(LocaleController.getString(R.string.Stop), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda288
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i13) {
                                    ChatActivity.this.lambda$processSelectedOption$293(messageObject10, dialogInterface, i13);
                                }
                            });
                            builder2.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                            alertDialog = builder2.create();
                            showDialog(alertDialog);
                            break;
                        case 27:
                            MessageObject.GroupedMessages groupedMessages4 = this.selectedObjectGroup;
                            MessageObject findPrimaryMessageObject = groupedMessages4 != null ? groupedMessages4.findPrimaryMessageObject() : this.selectedObject;
                            if (findPrimaryMessageObject != null) {
                                openDiscussionMessageChat(this.currentChat.id, null, findPrimaryMessageObject.getId(), 0L, -1, 0, null);
                                break;
                            }
                            break;
                        case 28:
                            languageSelectActivity = new MessageStatisticActivity(this.selectedObject);
                            presentFragment(languageSelectActivity);
                            break;
                        default:
                            switch (i) {
                                case 31:
                                case 35:
                                    hideAds();
                                    break;
                                case 32:
                                    long topicId = MessageObject.getTopicId(this.currentAccount, this.selectedObject.messageOwner, true);
                                    if (topicId != 0 && (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.id, topicId)) != null) {
                                        ForumUtilities.openTopic(this, this.currentChat.id, findTopic, this.selectedObject.getId());
                                        break;
                                    }
                                    break;
                                case 33:
                                    RevenueSharingAdsInfoBottomSheet.showAlert(this.contentView.getContext(), this, this.resourceProvider);
                                    break;
                                case 34:
                                    ReportBottomSheet.openSponsored(this, this.selectedObject, this.themeDelegate);
                                    break;
                                default:
                                    switch (i) {
                                        case 102:
                                            final MessageObject messageObject11 = this.selectedObject;
                                            final MessageObject.GroupedMessages groupedMessages5 = this.selectedObjectGroup;
                                            AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, messageObject11.messageOwner.date, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda291
                                                @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                                                public final void didSelectDate(boolean z5, int i13) {
                                                    ChatActivity.this.lambda$processSelectedOption$297(groupedMessages5, messageObject11, z5, i13);
                                                }
                                            }, null, this.themeDelegate).setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda292
                                                @Override // android.content.DialogInterface.OnDismissListener
                                                public final void onDismiss(DialogInterface dialogInterface) {
                                                    ChatActivity.this.lambda$processSelectedOption$298(dialogInterface);
                                                }
                                            }).setDimBehind(false);
                                            break;
                                        case 103:
                                            showDialog(new PremiumFeatureBottomSheet(this, 2, true));
                                            break;
                                        case 104:
                                            TLRPC.Peer peer = this.selectedObject.messageOwner.from_id;
                                            long j = peer.user_id;
                                            if (j == 0) {
                                                j = peer.channel_id;
                                                if (j == 0) {
                                                    j = peer.chat_id;
                                                }
                                            }
                                            openUserProfile(j);
                                            break;
                                    }
                            }
                    }
                } else {
                    final MessageObject messageObject12 = this.selectedObject;
                    StarsIntroActivity.showMediaPriceSheet(getContext(), ((TLRPC.TL_messageMediaPaidMedia) messageObject12.messageOwner.media).stars_amount, false, new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda289
                        @Override // org.telegram.messenger.Utilities.Callback2
                        public final void run(Object obj, Object obj2) {
                            ChatActivity.this.lambda$processSelectedOption$275(messageObject12, (Long) obj, (Runnable) obj2);
                        }
                    }, this.themeDelegate);
                }
                this.selectedObject = null;
                this.selectedObjectGroup = null;
                this.selectedObjectToEditCaption = null;
            } else {
                MessageObject.GroupedMessages groupedMessages6 = this.selectedObjectGroup;
                FactCheckController.getInstance(this.currentAccount).openFactCheckEditor(getContext(), getResourceProvider(), groupedMessages6 != null ? groupedMessages6.findPrimaryMessageObject() : this.selectedObject, false);
            }
            this.selectedObject = null;
            this.selectedObjectGroup = null;
            this.selectedObjectToEditCaption = null;
            closeMenu(!z);
        }
        if (!checkSlowMode(this.chatActivityEnterView.getSendButton())) {
            if (getMediaController().isPlayingMessage(this.selectedObject)) {
                getMediaController().cleanupPlayer(true, true);
            }
            final TLRPC.TL_messages_sendScheduledMessages tL_messages_sendScheduledMessages2 = new TLRPC.TL_messages_sendScheduledMessages();
            tL_messages_sendScheduledMessages2.peer = getMessagesController().getInputPeer(this.dialog_id);
            if (this.selectedObjectGroup != null) {
                for (int i13 = 0; i13 < this.selectedObjectGroup.messages.size(); i13++) {
                    tL_messages_sendScheduledMessages2.id.add(Integer.valueOf(this.selectedObjectGroup.messages.get(i13).getId()));
                }
            } else {
                tL_messages_sendScheduledMessages2.id.add(Integer.valueOf(this.selectedObject.getId()));
            }
            ConnectionsManager connectionsManager3 = ConnectionsManager.getInstance(this.currentAccount);
            requestDelegate = new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda290
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.lambda$processSelectedOption$296(tL_messages_sendScheduledMessages2, tLObject, tL_error);
                }
            };
            tL_messages_sendScheduledMessages = tL_messages_sendScheduledMessages2;
            connectionsManager = connectionsManager3;
            connectionsManager.sendRequest(tL_messages_sendScheduledMessages, requestDelegate);
            this.selectedObject = null;
            this.selectedObjectGroup = null;
            this.selectedObjectToEditCaption = null;
            closeMenu(!z);
        }
        final MessageObject messageObject112 = this.selectedObject;
        final MessageObject.GroupedMessages groupedMessages52 = this.selectedObjectGroup;
        AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, messageObject112.messageOwner.date, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda291
            @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
            public final void didSelectDate(boolean z5, int i132) {
                ChatActivity.this.lambda$processSelectedOption$297(groupedMessages52, messageObject112, z5, i132);
            }
        }, null, this.themeDelegate).setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda292
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$298(dialogInterface);
            }
        }).setDimBehind(false);
        z = true;
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.selectedObjectToEditCaption = null;
        closeMenu(!z);
    }

    private void putFilteredDate(int i, MessageObject messageObject) {
        TLRPC.TL_message tL_message = new TLRPC.TL_message();
        tL_message.message = LocaleController.formatDateChat(messageObject.messageOwner.date);
        tL_message.id = 0;
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(messageObject.messageOwner.date * 1000);
        calendar.set(11, 0);
        calendar.set(12, 0);
        calendar.set(13, 0);
        calendar.set(14, 0);
        tL_message.date = (int) (calendar.getTimeInMillis() / 1000);
        MessageObject messageObject2 = new MessageObject(this.currentAccount, tL_message, false, false);
        messageObject2.type = 10;
        messageObject2.contentType = 1;
        messageObject2.isDateObject = true;
        messageObject2.stableId = getStableIdForDateObject(messageObject.dateKeyInt);
        this.chatAdapter.filteredMessages.add(i, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeMessageObject(MessageObject messageObject) {
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf == -1) {
            return;
        }
        this.messages.remove(indexOf);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null || chatActivityAdapter.isFiltered) {
            return;
        }
        chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + indexOf);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeSelectedMessageHighlight() {
        if (this.highlightMessageQuote != null) {
            return;
        }
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.highlightMessageQuoteFirst = false;
        this.highlightMessageQuoteFirstTime = 0L;
        this.highlightMessageQuote = null;
    }

    private void removeUnreadPlane(boolean z) {
        MessageObject messageObject = this.unreadMessageObject;
        if (messageObject != null) {
            if (z) {
                boolean[] zArr = this.forwardEndReached;
                zArr[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(messageObject);
            this.unreadMessageObject = null;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r9v24 */
    /* JADX WARN: Type inference failed for: r9v25, types: [org.telegram.tgnet.tl.TL_stories$StoryItem] */
    private void replaceMessageObjects(ArrayList arrayList, int i, boolean z) {
        ChatActivityAdapter chatActivityAdapter;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int indexOf;
        ArrayList<TLRPC.PhotoSize> arrayList2;
        MessageObject messageObject;
        TLRPC.TL_messageMediaWebPage tL_messageMediaWebPage;
        TLRPC.WebPage webPage;
        TL_stories.StoryItem storyItem;
        TLRPC.User user = null;
        LongSparseArray longSparseArray = null;
        int i3 = 0;
        while (i3 < arrayList.size()) {
            MessageObject messageObject2 = (MessageObject) arrayList.get(i3);
            if (((MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(messageObject2.getId()))) != null) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
            }
            MessageObject messageObject3 = (MessageObject) this.messagesDict[i].get(messageObject2.getId());
            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId()))) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
                if (messageObject2.getId() == this.currentPinnedMessageId) {
                    updatePinnedMessageView(true);
                }
            }
            if (i == 0 && this.repliesMessagesDict.indexOfKey(messageObject2.getId()) >= 0) {
                this.repliesMessagesDict.put(messageObject2.getId(), messageObject2);
            }
            if (messageObject3 != null && (!z || messageObject3.messageOwner.date == messageObject2.messageOwner.date)) {
                if (z) {
                    arrayList.remove(i3);
                    i3--;
                }
                addToPolls(messageObject2, messageObject3);
                if (messageObject2.type >= 0) {
                    MessageObject messageObject4 = messageObject3.replyMessageObject;
                    if (messageObject4 != null) {
                        messageObject2.replyMessageObject = messageObject4;
                        TLRPC.MessageAction messageAction = messageObject2.messageOwner.action;
                        if (messageAction instanceof TLRPC.TL_messageActionGameScore) {
                            messageObject2.generateGameMessageText(user);
                        } else if (messageAction instanceof TLRPC.TL_messageActionPaymentSent) {
                            messageObject2.generatePaymentSentMessageText(user);
                        }
                    }
                    if (messageObject3.isWebpage() && messageObject2.isWebpage() && (webPage = (tL_messageMediaWebPage = (TLRPC.TL_messageMediaWebPage) MessageObject.getMedia(messageObject3.messageOwner)).webpage) != null && "telegram_story".equals(webPage.type)) {
                        int i4 = 0;
                        while (true) {
                            if (i4 >= tL_messageMediaWebPage.webpage.attributes.size()) {
                                storyItem = user;
                                break;
                            }
                            TLRPC.WebPageAttribute webPageAttribute = tL_messageMediaWebPage.webpage.attributes.get(i4);
                            if (webPageAttribute instanceof TLRPC.TL_webPageAttributeStory) {
                                storyItem = ((TLRPC.TL_webPageAttributeStory) webPageAttribute).storyItem;
                                break;
                            }
                            i4++;
                        }
                        if (storyItem != 0) {
                            TLRPC.TL_messageMediaWebPage tL_messageMediaWebPage2 = (TLRPC.TL_messageMediaWebPage) MessageObject.getMedia(messageObject2.messageOwner);
                            int i5 = 0;
                            while (true) {
                                if (i5 >= tL_messageMediaWebPage2.webpage.attributes.size()) {
                                    break;
                                }
                                TLRPC.WebPageAttribute webPageAttribute2 = tL_messageMediaWebPage2.webpage.attributes.get(i5);
                                if (webPageAttribute2 instanceof TLRPC.TL_webPageAttributeStory) {
                                    TLRPC.TL_webPageAttributeStory tL_webPageAttributeStory = (TLRPC.TL_webPageAttributeStory) webPageAttribute2;
                                    if (!(tL_webPageAttributeStory.storyItem instanceof TL_stories.TL_storyItem)) {
                                        tL_webPageAttributeStory.storyItem = storyItem;
                                    }
                                } else {
                                    i5++;
                                }
                            }
                        }
                    }
                    if (!messageObject3.isEditing()) {
                        if (messageObject3.getFileName().equals(messageObject2.getFileName())) {
                            messageObject2.messageOwner.attachPath = messageObject3.messageOwner.attachPath;
                            messageObject2.attachPathExists = messageObject3.attachPathExists;
                            messageObject2.mediaExists = messageObject3.mediaExists;
                        } else {
                            messageObject2.checkMediaExistance();
                        }
                    }
                    this.messagesDict[i].put(messageObject3.getId(), messageObject2);
                } else {
                    this.messagesDict[i].remove(messageObject3.getId());
                }
                int indexOf2 = this.messages.indexOf(messageObject3);
                if (indexOf2 >= 0) {
                    ArrayList arrayList3 = (ArrayList) this.messagesByDays.get(messageObject3.dateKey);
                    int indexOf3 = arrayList3 != null ? arrayList3.indexOf(messageObject3) : -1;
                    if (messageObject3.getGroupId() != 0 && (groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject3.getGroupId())) != null && (indexOf = groupedMessages.messages.indexOf(messageObject3)) >= 0) {
                        if (messageObject3.getGroupId() != messageObject2.getGroupId()) {
                            this.groupedMessagesMap.put(messageObject2.getGroupId(), groupedMessages);
                        }
                        if (messageObject2.isMusic() || messageObject2.isDocument() || !((arrayList2 = messageObject2.photoThumbs) == null || arrayList2.isEmpty())) {
                            groupedMessages.messages.set(indexOf, messageObject2);
                            messageObject3 = messageObject3;
                            MessageObject.GroupedMessagePosition remove = groupedMessages.positions.remove(messageObject3);
                            groupedMessages.positionsArray.remove(messageObject3.getId());
                            if (remove != null) {
                                groupedMessages.positions.put(messageObject2, remove);
                                groupedMessages.positionsArray.put(messageObject2.getId(), remove);
                            }
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                        } else {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            if (indexOf <= 0 || indexOf >= groupedMessages.messages.size() - 1) {
                                messageObject = messageObject3;
                            } else {
                                MessageObject.GroupedMessages groupedMessages2 = new MessageObject.GroupedMessages();
                                groupedMessages2.reversed = this.reversed;
                                messageObject = messageObject3;
                                groupedMessages2.groupId = Utilities.random.nextLong();
                                ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                                ArrayList<MessageObject> arrayList5 = groupedMessages.messages;
                                int i6 = indexOf + 1;
                                arrayList4.addAll(arrayList5.subList(i6, arrayList5.size()));
                                for (int i7 = 0; i7 < groupedMessages2.messages.size(); i7++) {
                                    groupedMessages2.messages.get(i7).localGroupId = groupedMessages2.groupId;
                                    groupedMessages.messages.remove(i6);
                                }
                                longSparseArray.put(groupedMessages2.groupId, groupedMessages2);
                                this.groupedMessagesMap.put(groupedMessages2.groupId, groupedMessages2);
                            }
                            groupedMessages.messages.remove(indexOf);
                            messageObject3 = messageObject;
                        }
                    }
                    if (this.chatMode == 3) {
                        messageObject2.isSaved = true;
                    }
                    if (messageObject2.type >= 0) {
                        messageObject2.copyStableParams(messageObject3);
                        this.messages.set(indexOf2, messageObject2);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        if (chatActivityAdapter2 != null && !chatActivityAdapter2.isFiltered) {
                            chatActivityAdapter2.updateRowAtPosition(chatActivityAdapter2.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.set(indexOf3, messageObject2);
                        }
                    } else {
                        this.messages.remove(indexOf2);
                        ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                        if (chatActivityAdapter3 != null && !chatActivityAdapter3.isFiltered) {
                            chatActivityAdapter3.notifyItemRemoved(chatActivityAdapter3.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.remove(indexOf3);
                            if (arrayList3.isEmpty()) {
                                this.messagesByDays.remove(messageObject3.dateKey);
                                this.messagesByDaysSorted.remove(messageObject3.dateKeyInt);
                                this.messages.remove(indexOf2);
                                int i8 = this.chatAdapter.loadingUpRow;
                                int i9 = this.chatAdapter.loadingDownRow;
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                if (!chatActivityAdapter4.isFiltered) {
                                    chatActivityAdapter4.notifyItemRemoved(chatActivityAdapter4.messagesStartRow + indexOf2);
                                    if (this.messages.isEmpty()) {
                                        if (i8 >= 0) {
                                            i2 = 0;
                                            this.chatAdapter.notifyItemRemoved(0);
                                        } else {
                                            i2 = 0;
                                        }
                                        if (i9 >= 0) {
                                            this.chatAdapter.notifyItemRemoved(i2);
                                        }
                                        updateReplyMessageOwners(messageObject3.getId(), messageObject2);
                                    }
                                }
                            }
                        }
                    }
                }
                updateReplyMessageOwners(messageObject3.getId(), messageObject2);
            }
            i3++;
            user = null;
        }
        if (longSparseArray != null) {
            for (int i10 = 0; i10 < longSparseArray.size(); i10++) {
                MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i10);
                if (groupedMessages3.messages.isEmpty()) {
                    this.groupedMessagesMap.remove(groupedMessages3.groupId);
                } else {
                    groupedMessages3.calculate();
                    ArrayList<MessageObject> arrayList6 = groupedMessages3.messages;
                    int indexOf4 = this.messages.indexOf(arrayList6.get(arrayList6.size() - 1));
                    if (indexOf4 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                        chatActivityAdapter.notifyItemRangeChanged(indexOf4 + chatActivityAdapter.messagesStartRow, groupedMessages3.messages.size());
                        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                        if (chatListItemAnimator != null) {
                            chatListItemAnimator.groupWillChanged(groupedMessages3);
                        }
                    }
                }
            }
        }
        updatePinnedTopicStarterMessage();
    }

    private void requestLinkPreview(TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview, final Utilities.Callback2 callback2) {
        cancelSearchLinks();
        this.linkSearchRequestId = getConnectionsManager().sendRequest(tL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda381
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$requestLinkPreview$126(callback2, tLObject, tL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.linkSearchRequestId, this.classGuid);
    }

    private void requestLinkPreviewCached(final TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview, final Utilities.Callback2 callback2) {
        if (this.lastLinkPreviewResults == null) {
            this.lastLinkPreviewResults = new HashMap();
        }
        TLRPC.WebPage webPage = (TLRPC.WebPage) this.lastLinkPreviewResults.get(tL_messages_getWebPagePreview.message);
        if (webPage != null) {
            callback2.run(Boolean.TRUE, webPage);
        } else {
            requestLinkPreview(tL_messages_getWebPagePreview, new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda367
                @Override // org.telegram.messenger.Utilities.Callback2
                public final void run(Object obj, Object obj2) {
                    ChatActivity.this.lambda$requestLinkPreviewCached$120(tL_messages_getWebPagePreview, callback2, (Boolean) obj, (TLRPC.WebPage) obj2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void resetProgressDialogLoading() {
        this.progressDialogLinkSpan = null;
        this.progressDialogAtMessageId = 0;
        this.progressDialogAtMessageType = -1;
        this.progressDialogBotButtonUrl = null;
        this.progressDialogCurrent = null;
        setPagedownLoading(false, true);
    }

    private void rotateMotionBackgroundDrawable() {
        MotionBackgroundDrawable motionBackgroundDrawable;
        ThemeDelegate themeDelegate = this.themeDelegate;
        if (themeDelegate == null) {
            return;
        }
        Drawable wallpaperDrawable = themeDelegate.getWallpaperDrawable();
        View view = this.fragmentView;
        if (view != null) {
            wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
        }
        if (wallpaperDrawable instanceof ChatBackgroundDrawable) {
            wallpaperDrawable = ((ChatBackgroundDrawable) wallpaperDrawable).getDrawable(true);
        }
        if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
            ((MotionBackgroundDrawable) wallpaperDrawable).switchToNextPosition();
        }
        Drawable themedDrawable = getThemedDrawable("drawableMsgOut");
        if (!(themedDrawable instanceof Theme.MessageDrawable) || (motionBackgroundDrawable = ((Theme.MessageDrawable) themedDrawable).getMotionBackgroundDrawable()) == null) {
            return;
        }
        motionBackgroundDrawable.switchToNextPosition();
    }

    private void runCloseInstantCameraAnimation() {
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView == null) {
            return;
        }
        instantCameraView.cancelBlur();
        InstantCameraView.InstantViewCameraContainer cameraContainer = this.instantCameraView.getCameraContainer();
        AnimatorSet animatorSet = new AnimatorSet();
        ObjectAnimator ofFloat = ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, 0.5f);
        ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, 0.5f);
        Property property = View.ALPHA;
        animatorSet.playTogether(ofFloat, ofFloat2, ObjectAnimator.ofFloat(cameraContainer, property, 0.0f), ObjectAnimator.ofFloat(this.instantCameraView.getSwitchButtonView(), property, 0.0f), ObjectAnimator.ofFloat(this.instantCameraView.getFlashButtonView(), property, 0.0f), ObjectAnimator.ofInt(this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(this.instantCameraView.getMuteImageView(), property, 0.0f));
        animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.143
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                InstantCameraView instantCameraView2 = ChatActivity.this.instantCameraView;
                if (instantCameraView2 != null) {
                    instantCameraView2.setIsMessageTransition(false);
                    ChatActivity.this.instantCameraView.hideCamera(true);
                    ChatActivity.this.instantCameraView.setVisibility(4);
                }
            }
        });
        animatorSet.start();
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String str = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty(str) && !new File(str).exists()) {
            str = null;
        }
        if (TextUtils.isEmpty(str)) {
            str = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(str, getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }

    /* JADX WARN: Removed duplicated region for block: B:93:0x0203  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean saveScrollOnFilterToggle(boolean z, boolean z2) {
        int i;
        int i2;
        int i3;
        int i4;
        MessageObject messageObject;
        int abs;
        MessageObject messageObject2;
        MessageObject messageObject3;
        ArrayList messages = this.chatAdapter.getMessages();
        this.chatListView.getMeasuredHeight();
        ArrayList arrayList = new ArrayList();
        final HashMap hashMap = new HashMap();
        for (int i5 = 0; i5 < this.chatListView.getChildCount(); i5++) {
            View childAt = this.chatListView.getChildAt(i5);
            int measuredHeight = (((int) (this.chatListView.getMeasuredHeight() * 0.97f)) - AndroidUtilities.dp(42.0f)) - childAt.getBottom();
            if (measuredHeight >= 0) {
                hashMap.put(childAt, Integer.valueOf(measuredHeight));
                arrayList.add(childAt);
            }
        }
        Collections.sort(arrayList, Comparator$-CC.comparingInt(new ToIntFunction() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda67
            @Override // j$.util.function.ToIntFunction
            public final int applyAsInt(Object obj) {
                return ((Integer) hashMap.get((View) obj)).intValue();
            }
        }));
        HashSet hashSet = new HashSet();
        HashSet hashSet2 = new HashSet();
        for (int i6 = 0; i6 < messages.size(); i6++) {
            MessageObject messageObject4 = (MessageObject) messages.get(i6);
            if (!messageObject4.isDateObject) {
                hashSet.add(Integer.valueOf(messageObject4.getId()));
            }
            hashSet2.add(Integer.valueOf(messageObject4.stableId));
        }
        int i7 = 0;
        while (true) {
            if (i7 >= arrayList.size()) {
                i = 0;
                i2 = 0;
                break;
            }
            View view = (View) arrayList.get(i7);
            if (view instanceof ChatMessageCell) {
                messageObject3 = ((ChatMessageCell) view).getMessageObject();
            } else if (view instanceof ChatActionCell) {
                messageObject3 = ((ChatActionCell) view).getMessageObject();
            } else {
                continue;
                i7++;
            }
            if (messageObject3 == null) {
                continue;
            } else {
                i3 = messageObject3.getId();
                if (hashSet.contains(Integer.valueOf(i3))) {
                    i2 = getScrollingOffsetForView(view);
                    i = 0;
                    break;
                } else if (hashSet2.contains(Integer.valueOf(messageObject3.stableId))) {
                    i = messageObject3.stableId;
                    i2 = getScrollingOffsetForView(view);
                    break;
                }
            }
            i7++;
        }
        i3 = 0;
        int i8 = -1;
        if (i3 == 0 && i == 0) {
            if (!this.chatAdapter.isFiltered && !z2) {
                for (int i9 = 0; i9 < arrayList.size(); i9++) {
                    View view2 = (View) arrayList.get(i9);
                    if ((view2 instanceof ChatMessageCell) && (messageObject2 = ((ChatMessageCell) view2).getMessageObject()) != null) {
                        int id = messageObject2.getId();
                        this.waitingForLoad.clear();
                        removeSelectedMessageHighlight();
                        this.scrollToMessagePosition = -10000;
                        this.startLoadFromMessageId = id;
                        this.showScrollToMessageError = false;
                        this.createUnreadMessageAfterIdLoading = false;
                        this.postponedScrollIsCanceled = false;
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
                        this.fakePostponedScroll = true;
                        this.postponedScrollMinMessageId = this.minMessageId[0];
                        this.postponedScrollMessageId = id;
                        MessagesController messagesController = getMessagesController();
                        long j = this.dialog_id;
                        int i10 = this.startLoadFromMessageId;
                        int i11 = this.classGuid;
                        int i12 = this.chatMode;
                        long j2 = this.threadMessageId;
                        int i13 = this.replyMaxReadId;
                        int i14 = this.lastLoadIndex;
                        this.lastLoadIndex = i14 + 1;
                        messagesController.loadMessages(j, 0L, false, 50, i10, 0, true, 0, i11, 3, 0, i12, j2, i13, i14, this.isTopic);
                        return false;
                    }
                }
            }
            int i15 = -1;
            for (int i16 = 0; i16 < arrayList.size(); i16++) {
                View view3 = (View) arrayList.get(i16);
                if ((view3 instanceof ChatMessageCell) && (messageObject = ((ChatMessageCell) view3).getMessageObject()) != null) {
                    int id2 = messageObject.getId();
                    int i17 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    int i18 = -1;
                    for (int i19 = 0; i19 < messages.size(); i19++) {
                        MessageObject messageObject5 = (MessageObject) messages.get(i19);
                        if (messageObject5.getId() != 0 && (abs = Math.abs(messageObject5.getId() - id2)) < i17) {
                            i18 = messageObject5.getId();
                            i17 = abs;
                            i15 = i19;
                            i2 = 0;
                        }
                    }
                    if (i18 != -1) {
                        break;
                    }
                }
            }
            i8 = i15;
        }
        if (i != 0) {
            i4 = 0;
            while (i4 < messages.size()) {
                if (((MessageObject) messages.get(i4)).stableId == i) {
                    i8 = i4;
                    break;
                }
                i4++;
            }
            this.chatAdapter.updateRowsSafe();
            if (i8 >= 0) {
                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + i8, i2);
            }
            this.chatAdapter.notifyDataSetChanged(z);
            return true;
        }
        if (i3 != 0) {
            i4 = 0;
            while (i4 < messages.size()) {
                if (((MessageObject) messages.get(i4)).getId() == i3) {
                    i8 = i4;
                    break;
                }
                i4++;
            }
        }
        this.chatAdapter.updateRowsSafe();
        if (i8 >= 0) {
        }
        this.chatAdapter.notifyDataSetChanged(z);
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:36:0x0070  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int scrollOffsetForQuote(MessageObject messageObject) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        CharSequence charSequence;
        int i;
        ChatMessageCell chatMessageCell;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        ChatMessageCell chatMessageCell2;
        int findQuoteStart;
        if (TextUtils.isEmpty(this.highlightMessageQuote) || messageObject == null) {
            ChatMessageCell chatMessageCell3 = this.dummyMessageCell;
            if (chatMessageCell3 != null) {
                chatMessageCell3.computedGroupCaptionY = 0;
                chatMessageCell3.computedCaptionLayout = null;
            }
            return 0;
        }
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages group = getGroup(messageObject.getGroupId());
            ChatMessageCell chatMessageCell4 = this.dummyMessageCell;
            if (chatMessageCell4 == null || (textLayoutBlocks = chatMessageCell4.computedCaptionLayout) == null || group == null || (messageObject = group.captionMessage) == null) {
                if (chatMessageCell4 != null) {
                    chatMessageCell4.computedGroupCaptionY = 0;
                    chatMessageCell4.computedCaptionLayout = null;
                }
                return 0;
            }
            i = chatMessageCell4.computedGroupCaptionY;
        } else if (TextUtils.isEmpty(messageObject.caption) || (chatMessageCell = this.dummyMessageCell) == null || (textLayoutBlocks = chatMessageCell.captionLayout) == null) {
            CharSequence charSequence2 = messageObject.messageText;
            arrayList = messageObject.textLayoutBlocks;
            ChatMessageCell chatMessageCell5 = this.dummyMessageCell;
            if (chatMessageCell5 == null || !chatMessageCell5.linkPreviewAbove) {
                charSequence = charSequence2;
                i = 0;
            } else {
                i = chatMessageCell5.linkPreviewHeight + AndroidUtilities.dp(10.0f);
                charSequence = charSequence2;
            }
            chatMessageCell2 = this.dummyMessageCell;
            if (chatMessageCell2 != null) {
                chatMessageCell2.computedGroupCaptionY = 0;
                chatMessageCell2.computedCaptionLayout = null;
            }
            if (arrayList != null || charSequence == null || (findQuoteStart = MessageObject.findQuoteStart(charSequence.toString(), this.highlightMessageQuote, this.highlightMessageQuoteOffset)) < 0) {
                return 0;
            }
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i2);
                StaticLayout staticLayout = textLayoutBlock.textLayout;
                String charSequence3 = staticLayout.getText().toString();
                int i3 = textLayoutBlock.charactersOffset;
                if (findQuoteStart > i3) {
                    float textYOffset = findQuoteStart - i3 > charSequence3.length() + (-1) ? i + ((int) (textLayoutBlock.textYOffset(arrayList) + textLayoutBlock.padTop + textLayoutBlock.height)) : staticLayout.getLineTop(staticLayout.getLineForOffset(findQuoteStart - textLayoutBlock.charactersOffset)) + i + textLayoutBlock.textYOffset(arrayList) + textLayoutBlock.padTop;
                    if (textYOffset > AndroidUtilities.displaySize.y * (isKeyboardVisible() ? 0.7f : 0.5f)) {
                        return (int) (textYOffset - (AndroidUtilities.displaySize.y * (isKeyboardVisible() ? 0.7f : 0.5f)));
                    }
                    return 0;
                }
            }
            return 0;
        } else {
            i = (int) chatMessageCell.captionY;
        }
        charSequence = messageObject.caption;
        arrayList = textLayoutBlocks.textLayoutBlocks;
        chatMessageCell2 = this.dummyMessageCell;
        if (chatMessageCell2 != null) {
        }
        if (arrayList != null) {
        }
        return 0;
    }

    private void searchUserMessages(TLRPC.User user, TLRPC.Chat chat) {
        String str;
        this.searchingUserMessages = user;
        this.searchingChatMessages = chat;
        if (this.searchItem == null || this.mentionContainer == null) {
            return;
        }
        if (user == null && chat == null) {
            return;
        }
        if (user != null) {
            str = user.first_name;
            if (TextUtils.isEmpty(str)) {
                str = this.searchingUserMessages.last_name;
            }
        } else {
            str = chat.title;
        }
        if (str == null) {
            return;
        }
        if (str.length() > 10) {
            str = str.substring(0, 10);
        }
        this.searchingForUser = false;
        String string = LocaleController.getString(R.string.SearchFrom);
        SpannableString spannableString = new SpannableString(string + " " + str);
        spannableString.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)), string.length() + 1, spannableString.length(), 33);
        this.searchItem.setSearchFieldCaption(spannableString);
        this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
        this.searchItem.setSearchFieldHint(null);
        this.searchItem.clearSearchText();
        MediaDataController mediaDataController = getMediaDataController();
        this.searchingQuery = "";
        mediaDataController.searchMessagesInChat("", this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: sendBotInlineResult */
    public void lambda$createView$36(TLRPC.BotInlineResult botInlineResult, boolean z, int i) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView == null) {
            return;
        }
        long contextBotId = mentionsContainerView.getAdapter().getContextBotId();
        HashMap hashMap = new HashMap();
        hashMap.put("id", botInlineResult.id);
        hashMap.put("query_id", "" + botInlineResult.query_id);
        hashMap.put("bot", "" + contextBotId);
        hashMap.put("bot_name", this.mentionContainer.getAdapter().getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(this, getAccountInstance(), botInlineResult, hashMap, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, z, i, this.quickReplyShortcut, getQuickReplyId());
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
        getMediaDataController().increaseInlineRating(contextBotId);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendPhotosGroup(ArrayList arrayList, boolean z, int i, boolean z2) {
        String str;
        if (!arrayList.isEmpty()) {
            ArrayList arrayList2 = new ArrayList();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) it.next();
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                boolean z3 = photoEntry.isVideo;
                if ((!z3 && (str = photoEntry.imagePath) != null) || (str = photoEntry.path) != null) {
                    sendingMediaInfo.path = str;
                }
                sendingMediaInfo.thumbPath = photoEntry.thumbPath;
                sendingMediaInfo.isVideo = z3;
                CharSequence charSequence = photoEntry.caption;
                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                sendingMediaInfo.entities = photoEntry.entities;
                sendingMediaInfo.masks = photoEntry.stickers;
                sendingMediaInfo.ttl = photoEntry.ttl;
                sendingMediaInfo.videoEditedInfo = photoEntry.editedInfo;
                sendingMediaInfo.canDeleteAfter = photoEntry.canDeleteAfter;
                arrayList2.add(sendingMediaInfo);
                photoEntry.reset();
            }
            fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList2, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, z2, true, null, z, i, this.chatMode, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).updateStickersOrder, null, this.quickReplyShortcut, getQuickReplyId(), 0L, false);
            afterMessageSend();
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setFieldText("");
            }
        }
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Runnable sendSecretMediaDelete(final MessageObject messageObject) {
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.ttl != Integer.MAX_VALUE) {
            return null;
        }
        final long createDeleteShowOnceTask = getMessagesController().createDeleteShowOnceTask(this.dialog_id, messageObject.getId());
        messageObject.forceExpired = true;
        if (messageObject.isOutOwner() || (!messageObject.isRoundOnce() && !messageObject.isVoiceOnce())) {
            ArrayList arrayList = new ArrayList();
            arrayList.add(messageObject);
            updateMessages(arrayList, true);
        }
        return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda329
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$sendSecretMediaDelete$131(createDeleteShowOnceTask, messageObject);
            }
        };
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Runnable sendSecretMessageRead(final MessageObject messageObject, boolean z) {
        int i;
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia()) {
            return null;
        }
        TLRPC.Message message = messageObject.messageOwner;
        if (message.destroyTime != 0 || (i = message.ttl) <= 0) {
            return null;
        }
        if (z) {
            boolean z2 = i != Integer.MAX_VALUE;
            if (i == Integer.MAX_VALUE) {
                i = 0;
            }
            message.destroyTime = getConnectionsManager().getCurrentTime() + i;
            if (this.currentEncryptedChat != null) {
                getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, i);
            } else {
                getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, i, 0L, z2);
            }
            return null;
        }
        return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$sendSecretMessageRead$130(messageObject);
            }
        };
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0064  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0091  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void sendUriAsDocument(Uri uri) {
        String str;
        int indexOf;
        Uri parse;
        String str2;
        String str3;
        if (uri == null) {
            return;
        }
        String uri2 = uri.toString();
        boolean z = true;
        if (uri2.contains("com.google.android.apps.photos.contentprovider")) {
            try {
                str = uri2.split("/1/")[1];
                indexOf = str.indexOf("/ACTUAL");
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (indexOf != -1) {
                parse = Uri.parse(URLDecoder.decode(str.substring(0, indexOf), "UTF-8"));
                String path = AndroidUtilities.getPath(parse);
                if (BuildVars.NO_SCOPED_STORAGE) {
                    str2 = path;
                    str3 = str2;
                } else {
                    if (path == null) {
                        String uri3 = parse.toString();
                        String copyFileToCache = MediaController.copyFileToCache(parse, "file");
                        if (copyFileToCache == null) {
                            showAttachmentError();
                            return;
                        } else {
                            str3 = uri3;
                            str2 = copyFileToCache;
                        }
                    } else {
                        str2 = path;
                        str3 = str2;
                    }
                    z = false;
                }
                fillEditingMediaWithCaption(null, null);
                if (z) {
                    SendMessagesHelper.prepareSendingDocument(getAccountInstance(), str2, str3, null, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, this.editingMessageObject, true, 0, null, this.quickReplyShortcut, getQuickReplyId(), false);
                } else {
                    SendMessagesHelper.prepareSendingDocument(getAccountInstance(), null, null, parse, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, this.editingMessageObject, true, 0, null, this.quickReplyShortcut, getQuickReplyId(), false);
                }
                hideFieldPanel(false);
            }
        }
        parse = uri;
        String path2 = AndroidUtilities.getPath(parse);
        if (BuildVars.NO_SCOPED_STORAGE) {
        }
        fillEditingMediaWithCaption(null, null);
        if (z) {
        }
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setCellSelectionBackground(MessageObject messageObject, ChatMessageCell chatMessageCell, int i, boolean z) {
        MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject);
        if (validGroupedMessage != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= validGroupedMessage.messages.size()) {
                    validGroupedMessage = null;
                    break;
                } else if (this.selectedMessagesIds[i].indexOfKey(validGroupedMessage.messages.get(i2).getId()) < 0) {
                    break;
                } else {
                    i2++;
                }
            }
        }
        chatMessageCell.setDrawSelectionBackground(validGroupedMessage == null);
        chatMessageCell.setChecked(true, validGroupedMessage == null, z);
    }

    private void setChatThemeEmoticon(String str) {
        if (this.themeDelegate == null || this.parentThemeDelegate != null) {
            return;
        }
        ChatThemeController chatThemeController = ChatThemeController.getInstance(this.currentAccount);
        chatThemeController.setDialogTheme(this.dialog_id, str, false);
        if (!TextUtils.isEmpty(str)) {
            chatThemeController.requestChatTheme(str, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda276
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.this.lambda$setChatThemeEmoticon$333((EmojiThemes) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(Throwable th) {
                    ResultCallback.-CC.$default$onError(this, th);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC.TL_error tL_error) {
                    ResultCallback.-CC.$default$onError(this, tL_error);
                }
            });
        }
        TLRPC.WallPaper dialogWallpaper = chatThemeController.getDialogWallpaper(this.dialog_id);
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(themeDelegate.chatTheme, dialogWallpaper, this.openAnimationStartTime != 0, null);
    }

    private void setChildrenEnabled(View view, boolean z) {
        if (view instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) view;
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                setChildrenEnabled(viewGroup.getChildAt(i), z);
            }
        }
        if (view == this.chatListView || view == this.contentView) {
            return;
        }
        view.setEnabled(z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setFilterMessages(boolean z) {
        setFilterMessages(z, false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setFilterMessages(boolean z, boolean z2, boolean z3) {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null || chatActivityAdapter.isFiltered == z) {
            return;
        }
        chatActivityAdapter.isFiltered = z;
        boolean z4 = true;
        createEmptyView(true);
        if (z) {
            updateFilteredMessages(false);
        }
        if (!saveScrollOnFilterToggle(z3, z2)) {
            this.chatAdapter.isFiltered = !z;
        }
        AnimatedTextView animatedTextView = this.searchOtherButton;
        if (animatedTextView != null) {
            animatedTextView.setText(LocaleController.getString(this.chatAdapter.isFiltered ? R.string.SavedTagShowOtherMessages : R.string.SavedTagHideOtherMessages));
        }
        updateSearchUpDownButtonVisibility(true);
        if (this.chatAdapter.isFiltered ? !getMediaDataController().isSearchLoading() || !this.chatAdapter.filteredMessages.isEmpty() : !this.loading || !this.messages.isEmpty() || this.chatAdapter.botInfoRow >= 0) {
            z4 = false;
        }
        showProgressView(z4);
        if (this.chatListView != null) {
            createEmptyView(false);
            if (this.chatAdapter.isFiltered ? getMediaDataController().isSearchLoading() || !this.chatAdapter.filteredMessages.isEmpty() : this.loading || !this.messages.isEmpty() || this.chatAdapter.botInfoRow >= 0) {
                this.emptyViewContainer.setVisibility(8);
                this.chatListView.setEmptyView(null);
                return;
            }
            this.chatListView.setEmptyView(this.emptyViewContainer);
            this.chatListView.checkIfEmpty();
        }
    }

    private void setPagedownLoading(final boolean z, boolean z2) {
        if (!z2 || Math.abs(this.pagedownLoadingT - (z ? 1.0f : 0.0f)) <= 0.01f) {
            if (z) {
                this.pagedownButtonArrow.setScaleX(0.0f);
                this.pagedownButtonArrow.setScaleY(0.0f);
                this.pagedownButtonArrow.setVisibility(8);
                this.pagedownButtonLoading.setVisibility(0);
                return;
            }
            this.pagedownButtonArrow.setScaleX(1.0f);
            this.pagedownButtonArrow.setScaleY(1.0f);
            this.pagedownButtonArrow.setVisibility(0);
            this.pagedownButtonLoading.setVisibility(8);
            return;
        }
        ValueAnimator valueAnimator = this.pagedownAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        final boolean[] zArr = new boolean[1];
        this.pagedownButtonArrow.setVisibility(0);
        ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownLoadingT, z ? 1.0f : 0.0f);
        this.pagedownAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda128
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$setPagedownLoading$103(zArr, z, valueAnimator2);
            }
        });
        this.pagedownAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.82
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                int i = 8;
                if (z) {
                    ChatActivity.this.pagedownButtonArrow.setVisibility(8);
                    i = 0;
                    if (zArr[0]) {
                        return;
                    }
                    ChatActivity.this.pagedownButtonLoadingDrawable.reset();
                }
                ChatActivity.this.pagedownButtonLoading.setVisibility(i);
            }
        });
        this.pagedownAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT);
        this.pagedownAnimator.setDuration(260L);
        this.pagedownAnimator.start();
    }

    private void setPullingDownTransition(boolean z) {
        this.fromPullingDownTransition = z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setScrimView(View view) {
        View view2 = this.scrimView;
        if (view2 == view) {
            return;
        }
        if (view2 != null && (view2 instanceof ChatActionCell)) {
            ((ChatActionCell) view2).setInvalidateWithParent(null);
        }
        this.scrimView = view;
        if (view instanceof ChatActionCell) {
            ((ChatActionCell) view).setInvalidateWithParent(this.fragmentView);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatActivity(ChatActivity chatActivity) {
        this.pullingDownAnimateToActivity = chatActivity;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatProgress(float f) {
        this.pullingDownAnimateProgress = f;
        this.fragmentView.invalidate();
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void share() {
        MessageObject messageObject = null;
        for (int i = 1; i >= 0; i--) {
            if (messageObject == null && this.selectedMessagesIds[i].size() != 0) {
                messageObject = (MessageObject) this.messagesDict[i].get(this.selectedMessagesIds[i].keyAt(0));
            }
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        if (getParentActivity() != null && messageObject != null && ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.getDocument() != null)) {
            File pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(messageObject.getDocument(), null, false, true);
            TLRPC.Message message = messageObject.messageOwner;
            if (message != null && message.attachPath != null && (pathToAttach == null || !pathToAttach.exists())) {
                pathToAttach = new File(messageObject.messageOwner.attachPath);
            }
            if (pathToAttach != null && pathToAttach.exists()) {
                Intent intent = new Intent("android.intent.action.SEND");
                intent.setType((messageObject.isVideo() || messageObject.isRoundVideo()) ? "video/mp4" : messageObject.getMimeType());
                if (Build.VERSION.SDK_INT >= 24) {
                    try {
                        intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), ApplicationLoader.getApplicationId() + ".provider", pathToAttach));
                        intent.setFlags(1);
                    } catch (Exception unused) {
                    }
                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString(R.string.ShareFile)), 500);
                }
                intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(pathToAttach));
                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString(R.string.ShareFile)), 500);
            }
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows();
        updateSelectedMessageReactions();
    }

    private boolean shouldDisplaySwipeToLeftToReplyInForum() {
        return isForumInViewAsMessagesMode() && this.replyingMessageObject == null && !canSendMessageToGeneralTopic();
    }

    private void showAttachmentError() {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnsupportedAttachment), this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showBotMessageHint(final ChatMessageCell chatMessageCell, boolean z) {
        if (getContext() == null || chatMessageCell == null || chatMessageCell.timeLayout == null || chatMessageCell.getPrimaryMessageObject() == null || chatMessageCell.getPrimaryMessageObject().messageOwner == null || chatMessageCell.getPrimaryMessageObject().messageOwner.via_business_bot_id == 0) {
            return;
        }
        if (!z) {
            if (getMessagesController().getMainSettings().getBoolean("bizbothint", false)) {
                return;
            }
            getMessagesController().getMainSettings().edit().putBoolean("bizbothint", true).apply();
            if (this.bizbothint) {
                return;
            }
            this.bizbothint = true;
        }
        final HintView2 hintView2 = this.botMessageHint;
        if (hintView2 != null) {
            if (!z) {
                return;
            }
            hintView2.setOnHiddenListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda246
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$showBotMessageHint$68(hintView2);
                }
            });
            hintView2.hide();
            this.botMessageHint = null;
        }
        HintView2 rounding = new HintView2(getContext(), 3).setMultilineText(true).setTextAlign(Layout.Alignment.ALIGN_NORMAL).setDuration(-1L).setHideByTouch(true).useScale(true).setCloseButton(true).setRounding(8.0f);
        this.botMessageHint = rounding;
        rounding.setText(AndroidUtilities.replaceTags(LocaleController.getString(R.string.MessageBizBot)));
        HintView2 hintView22 = this.botMessageHint;
        hintView22.setMaxWidthPx(HintView2.cutInFancyHalf(hintView22.getText(), this.botMessageHint.getTextPaint()));
        this.contentView.addView(this.botMessageHint, LayoutHelper.createFrame(-1, 120.0f, 55, 16.0f, 0.0f, 16.0f, 0.0f));
        this.contentView.post(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda247
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showBotMessageHint$69(chatMessageCell);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showBusinessLinksDiscardAlert(final Runnable runnable) {
        AlertDialog create = new AlertDialog.Builder(getContext(), getResourceProvider()).setTitle(LocaleController.getString(R.string.BusinessLinkDiscardChangesTitle)).setMessage(LocaleController.getString(R.string.BusinessLinkDiscardChangesMessage)).setPositiveButton(LocaleController.getString(R.string.Discard), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda73
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                runnable.run();
            }
        }).setNegativeButton(LocaleController.getString(R.string.Cancel), null).create();
        showDialog(create);
        TextView textView = (TextView) create.getButton(-1);
        if (textView != null) {
            textView.setTextColor(getThemedColor(Theme.key_text_RedBold));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChatThemeBottomSheet() {
        ChannelColorActivity channelColorActivity;
        TLRPC.Chat chat = this.currentChat;
        if (chat == null) {
            this.chatThemeBottomSheet = new ChatThemeBottomSheet(this, this.themeDelegate);
            this.chatListView.setOnInterceptTouchListener(new RecyclerListView.OnInterceptTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda202
                @Override // org.telegram.ui.Components.RecyclerListView.OnInterceptTouchListener
                public final boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                    boolean lambda$showChatThemeBottomSheet$330;
                    lambda$showChatThemeBottomSheet$330 = ChatActivity.lambda$showChatThemeBottomSheet$330(motionEvent);
                    return lambda$showChatThemeBottomSheet$330;
                }
            });
            setChildrenEnabled(this.contentView, false);
            showDialog(this.chatThemeBottomSheet, new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda203
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$showChatThemeBottomSheet$331(dialogInterface);
                }
            });
            return;
        }
        if (ChatObject.isMegagroup(chat)) {
            if (!ChatObject.hasAdminRights(this.currentChat)) {
                return;
            }
            channelColorActivity = new GroupColorActivity(getDialogId());
        } else if (!ChatObject.canChangeChatInfo(this.currentChat)) {
            return;
        } else {
            channelColorActivity = new ChannelColorActivity(getDialogId());
        }
        presentFragment(channelColorActivity.setOnApplied(this));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChecksHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView == null || checksHintView.getTag() == null) {
            if (this.checksHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                ChecksHintView checksHintView2 = new ChecksHintView(getParentActivity(), this.themeDelegate);
                this.checksHintView = checksHintView2;
                sizeNotifierFrameLayout.addView(checksHintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
                this.checksHintView.setAlpha(0.0f);
                this.checksHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isOutOwner() && messageObject.isSent() && this.checksHintView.showForMessageCell(chatMessageCell, true)) {
                    getMessagesController().removeSuggestion(0L, "NEWCOMER_TICKS");
                    return;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showFloatingDateView(boolean z) {
        ChatActionCell chatActionCell = this.floatingDateView;
        if (chatActionCell == null || this.chatMode == 5) {
            return;
        }
        if (chatActionCell.getTag() == null) {
            AnimatorSet animatorSet = this.floatingDateAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            this.floatingDateView.setTag(1);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.floatingDateAnimation = animatorSet2;
            animatorSet2.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 1.0f));
            this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.91
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                        ChatActivity.this.floatingDateAnimation = null;
                    }
                }
            });
            this.floatingDateAnimation.start();
        }
        if (z) {
            return;
        }
        invalidateMessagesVisiblePart();
        this.hideDateDelay = 1000;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showForwardHint(ChatMessageCell chatMessageCell) {
        View view;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || (view = this.fragmentView) == null) {
            return;
        }
        if (this.forwardHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 1, this.themeDelegate);
            this.forwardHintView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.forwardHintView.setAlpha(0.0f);
            this.forwardHintView.setVisibility(4);
        }
        this.forwardHintView.showForMessageCell(chatMessageCell, true);
    }

    private boolean showGifHint() {
        View view;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
            if (globalMainSettings.getBoolean("gifhint", false)) {
                return false;
            }
            globalMainSettings.edit().putBoolean("gifhint", true).commit();
            if (getParentActivity() != null && (view = this.fragmentView) != null && this.gifHintTextView == null) {
                if (!this.allowContextBotPanelSecond) {
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setOpenGifsTabFirst();
                    }
                    return false;
                }
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return false;
                }
                this.chatActivityEnterView.setOpenGifsTabFirst();
                View view2 = new View(getParentActivity());
                this.emojiButtonRed = view2;
                view2.setBackgroundResource(R.drawable.redcircle);
                int i = indexOfChild + 1;
                sizeNotifierFrameLayout.addView(this.emojiButtonRed, i, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
                this.gifHintTextView = hintView;
                hintView.setText(LocaleController.getString(R.string.TapHereGifs));
                sizeNotifierFrameLayout.addView(this.gifHintTextView, i, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                AnimatorSet animatorSet = new AnimatorSet();
                HintView hintView2 = this.gifHintTextView;
                Property property = View.ALPHA;
                animatorSet.playTogether(ObjectAnimator.ofFloat(hintView2, property, 0.0f, 1.0f), ObjectAnimator.ofFloat(this.emojiButtonRed, property, 0.0f, 1.0f));
                animatorSet.addListener(new 90());
                animatorSet.setDuration(300L);
                animatorSet.start();
                View emojiButton = this.chatActivityEnterView.getEmojiButton();
                if (emojiButton != null) {
                    this.gifHintTextView.showForView(emojiButton, true);
                }
                return true;
            }
        }
        return false;
    }

    private void showGigagroupConvertAlert() {
        TLRPC.ChatFull chatFull = this.chatInfo;
        if (chatFull == null || this.paused) {
            return;
        }
        TLRPC.Chat chat = this.currentChat;
        if (chat.creator && chat.megagroup && !chat.gigagroup && chatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda60
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$182();
                }
            }, 1000L);
        }
    }

    private void showGreetInfo(boolean z) {
        TLRPC.TL_businessIntro tL_businessIntro;
        if (this.emptyViewContent == null) {
            return;
        }
        if (z && this.greetingsInfo == null) {
            ChatActionCell chatActionCell = new ChatActionCell(getContext(), false, getResourceProvider()) { // from class: org.telegram.ui.ChatActivity.141
                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.Cells.ChatActionCell, android.view.ViewGroup, android.view.View
                public void onLayout(boolean z2, int i, int i2, int i3, int i4) {
                    super.onLayout(z2, i, i2, i3, i4);
                    setVisiblePart(getY() + ChatActivity.this.emptyViewContent.getY(), ChatActivity.this.getServiceHeight(this));
                }
            };
            this.greetingsInfo = chatActionCell;
            ScaleStateListAnimator.apply(chatActionCell, 0.02f, 1.2f);
            this.greetingsInfo.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda172
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$showGreetInfo$264(view);
                }
            });
        }
        ChatActionCell chatActionCell2 = this.greetingsInfo;
        if (chatActionCell2 == null) {
            return;
        }
        if (!z) {
            chatActionCell2.setVisibility(8);
            return;
        }
        chatActionCell2.setVisibility(0);
        TLRPC.UserFull userFull = this.userInfo;
        String formatString = LocaleController.formatString((userFull == null || (tL_businessIntro = userFull.business_intro) == null || !TextUtils.isEmpty(tL_businessIntro.title) || !TextUtils.isEmpty(this.userInfo.business_intro.title)) ? R.string.GreetingHow : R.string.GreetingHowSticker, UserObject.getFirstName(this.currentUser));
        int indexOf = formatString.indexOf("**");
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(formatString);
        if (indexOf > 0) {
            formatString = formatString.substring(0, indexOf) + formatString.substring(indexOf + 2);
            int indexOf2 = formatString.indexOf("**");
            if (indexOf2 > 0) {
                formatString = formatString.substring(0, indexOf2) + formatString.substring(indexOf2 + 2);
                spannableStringBuilder = new SpannableStringBuilder(formatString);
                ProfileActivity.ShowDrawable showDrawable = new ProfileActivity.ShowDrawable(formatString.substring(indexOf, indexOf2));
                showDrawable.setTextColor(-1);
                showDrawable.setBackgroundColor(503316480);
                showDrawable.setBounds(0, 0, showDrawable.getIntrinsicWidth(), showDrawable.getIntrinsicHeight());
                spannableStringBuilder.setSpan(new ImageSpan(showDrawable), indexOf, indexOf2, 33);
            }
        }
        this.greetingsInfo.setCustomText(spannableStringBuilder);
        this.greetingsInfo.setOverrideTextMaxWidth(HintView2.cutInFancyHalf(formatString, (TextPaint) getThemedPaint("paintChatActionText")));
        if (this.greetingsInfo.getParent() != null && (!z || this.greetingsInfo.getParent() != this.emptyViewContent)) {
            ((ViewGroup) this.greetingsInfo.getParent()).removeView(this.greetingsInfo);
        }
        if (z) {
            ViewParent parent = this.greetingsInfo.getParent();
            LinearLayout linearLayout = this.emptyViewContent;
            if (parent != linearLayout) {
                linearLayout.addView(this.greetingsInfo, LayoutHelper.createLinear(-1, -2, 80, 0, 10, 0, 0));
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showInfoHint(MessageObject messageObject, CharSequence charSequence, final int i) {
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, charSequence, 9999).setDuration(Math.max(4000, Math.min(((charSequence == null ? 0 : charSequence.length()) / 50) * 1600, 10000))).setOnHideListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showInfoHint$186(i);
            }
        }).show(true);
        this.hintMessageObject = messageObject;
        this.hintMessageType = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:66:0x013c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void showMediaBannedHint() {
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        int indexOfChild;
        HintView hintView;
        CharSequence formatString;
        HintView hintView2;
        int i;
        String string;
        View sendButton;
        View audioVideoButtonContainer;
        if (getParentActivity() != null) {
            if ((this.currentChat == null && this.userInfo == null) || this.fragmentView == null) {
                return;
            }
            HintView hintView3 = this.mediaBanTooltip;
            if ((hintView3 == null || hintView3.getVisibility() != 0) && (indexOfChild = (sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView).indexOfChild(this.chatActivityEnterView)) != -1) {
                try {
                    this.fragmentView.performHapticFeedback(3, 2);
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.mediaBanTooltip == null) {
                    HintView hintView4 = new HintView(getParentActivity(), 9, this.themeDelegate);
                    this.mediaBanTooltip = hintView4;
                    hintView4.setVisibility(8);
                    sizeNotifierFrameLayout.addView(this.mediaBanTooltip, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
                }
                TLRPC.UserFull userFull = this.userInfo;
                if (userFull == null || !userFull.voice_messages_forbidden) {
                    if (ChatObject.canSendVoice(this.currentChat) || ChatObject.canSendRoundVideo(this.currentChat)) {
                        if (ChatObject.isActionBannedByDefault(this.currentChat, 20)) {
                            hintView2 = this.mediaBanTooltip;
                            i = R.string.GlobalAttachVoiceRestricted;
                        } else if (ChatObject.isActionBannedByDefault(this.currentChat, 21)) {
                            hintView2 = this.mediaBanTooltip;
                            i = R.string.GlobalAttachRoundRestricted;
                        } else if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
                            hintView2 = this.mediaBanTooltip;
                            i = R.string.GlobalAttachMediaRestricted;
                        } else {
                            TLRPC.TL_chatBannedRights tL_chatBannedRights = this.currentChat.banned_rights;
                            if (tL_chatBannedRights == null) {
                                return;
                            }
                            if (AndroidUtilities.isBannedForever(tL_chatBannedRights)) {
                                hintView2 = this.mediaBanTooltip;
                                i = R.string.AttachMediaRestrictedForever;
                            } else {
                                hintView = this.mediaBanTooltip;
                                formatString = LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date));
                            }
                        }
                        string = LocaleController.getString(i);
                    } else if (checkCanRemoveRestrictionsByBoosts()) {
                        return;
                    } else {
                        if (this.chatActivityEnterView.isInVideoMode()) {
                            hintView2 = this.mediaBanTooltip;
                            string = ChatObject.getRestrictedErrorText(this.currentChat, 21);
                        } else {
                            hintView2 = this.mediaBanTooltip;
                            string = ChatObject.getRestrictedErrorText(this.currentChat, 20);
                        }
                    }
                    hintView2.setText(string);
                    sendButton = this.chatActivityEnterView.getSendButton();
                    audioVideoButtonContainer = this.chatActivityEnterView.getAudioVideoButtonContainer();
                    if (sendButton.getAlpha() < audioVideoButtonContainer.getAlpha()) {
                        sendButton = audioVideoButtonContainer;
                    }
                    this.mediaBanTooltip.showForView(sendButton, true);
                }
                hintView = this.mediaBanTooltip;
                formatString = AndroidUtilities.replaceTags(LocaleController.formatString(this.chatActivityEnterView.isInVideoMode() ? R.string.VideoMessagesRestrictedByPrivacy : R.string.VoiceMessagesRestrictedByPrivacy, this.currentUser.first_name));
                hintView.setText(formatString);
                sendButton = this.chatActivityEnterView.getSendButton();
                audioVideoButtonContainer = this.chatActivityEnterView.getAudioVideoButtonContainer();
                if (sendButton.getAlpha() < audioVideoButtonContainer.getAlpha()) {
                }
                this.mediaBanTooltip.showForView(sendButton, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMentionDownButton(boolean z, boolean z2) {
        ValueAnimator valueAnimator;
        AnimatorListenerAdapter animatorListenerAdapter;
        FrameLayout frameLayout = this.mentiondownButton;
        if (frameLayout == null) {
            return;
        }
        if (!z) {
            this.returnToMessageId = 0;
            if (frameLayout.getTag() == null) {
                return;
            }
            this.mentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.mentiondownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (!z2) {
                this.mentionsButtonEnterProgress = 0.0f;
                this.mentiondownButton.setVisibility(4);
                return;
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 0.0f);
            this.mentiondownButtonAnimation = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda86
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                    ChatActivity.this.lambda$showMentionDownButton$148(valueAnimator3);
                }
            });
            valueAnimator = this.mentiondownButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.99
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.mentionsButtonEnterProgress = 0.0f;
                    ChatActivity.this.mentiondownButton.setVisibility(4);
                    ChatActivity.this.contentView.invalidate();
                }
            };
        } else if (frameLayout.getTag() != null) {
            return;
        } else {
            ValueAnimator valueAnimator3 = this.mentiondownButtonAnimation;
            if (valueAnimator3 != null) {
                valueAnimator3.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (!z2) {
                this.mentionsButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                return;
            }
            this.mentiondownButton.setVisibility(0);
            this.mentiondownButton.setTag(1);
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 1.0f);
            this.mentiondownButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda85
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator4) {
                    ChatActivity.this.lambda$showMentionDownButton$147(valueAnimator4);
                }
            });
            valueAnimator = this.mentiondownButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.98
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.mentionsButtonEnterProgress = 1.0f;
                    ChatActivity.this.contentView.invalidate();
                }
            };
        }
        valueAnimator.addListener(animatorListenerAdapter);
        this.mentiondownButtonAnimation.setDuration(200L);
        this.mentiondownButtonAnimation.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMessagesSearchListView(final boolean z) {
        FrameLayout frameLayout = this.messagesSearchListContainer;
        if (frameLayout != null) {
            if (!z || frameLayout.getTag() == null) {
                if (z || this.messagesSearchListContainer.getTag() != null) {
                    AnimatorSet animatorSet = this.messagesSearchListViewAnimation;
                    if (animatorSet != null) {
                        animatorSet.cancel();
                        this.messagesSearchListViewAnimation = null;
                    }
                    if (z) {
                        this.messagesSearchListContainer.setVisibility(0);
                    }
                    if (!z && this.chatMode == 7) {
                        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) this.messagesSearchListView.getLayoutManager();
                        Object item = this.messagesSearchAdapter.getItem((linearLayoutManager.findFirstVisibleItemPosition() + linearLayoutManager.findLastVisibleItemPosition()) / 2);
                        Object item2 = this.messagesSearchAdapter.getItem(linearLayoutManager.findFirstVisibleItemPosition());
                        Object item3 = this.messagesSearchAdapter.getItem(linearLayoutManager.findLastVisibleItemPosition());
                        if (item != null && item2 != null && item3 != null) {
                            ArrayList messages = this.chatAdapter.getMessages();
                            int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
                            int i = ((MessageObject) item).messageOwner.id;
                            int i2 = ((MessageObject) item2).messageOwner.id;
                            int i3 = ((MessageObject) item3).messageOwner.id;
                            boolean z2 = false;
                            boolean z3 = false;
                            int i4 = -1;
                            for (int i5 = 0; i5 < messages.size(); i5++) {
                                if (((MessageObject) messages.get(i5)).messageOwner.id == i2) {
                                    int i6 = this.chatAdapter.messagesStartRow + i5;
                                    z2 = findFirstVisibleItemPosition <= i6 && findLastVisibleItemPosition >= i6;
                                    if (z2) {
                                        break;
                                    }
                                }
                                if (((MessageObject) messages.get(i5)).messageOwner.id == i3) {
                                    int i7 = this.chatAdapter.messagesStartRow + i5;
                                    z3 = findFirstVisibleItemPosition <= i7 && findLastVisibleItemPosition >= i7;
                                    if (z3) {
                                        break;
                                    }
                                }
                                if (((MessageObject) messages.get(i5)).messageOwner.id == i) {
                                    i4 = i5;
                                }
                            }
                            if (!z2 && !z3 && i4 != -1) {
                                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + i4, (this.chatListView.getHeight() - getHeightForMessage((MessageObject) messages.get(i4), true)) / 2);
                            }
                        }
                    }
                    this.messagesSearchListContainer.setTag(z ? 1 : null);
                    FrameLayout frameLayout2 = this.messagesSearchListContainer;
                    ChatSearchTabs chatSearchTabs = this.hashtagSearchTabs;
                    int height = (chatSearchTabs == null || !chatSearchTabs.shown()) ? 0 : this.hashtagSearchTabs.getHeight();
                    SearchTagsList searchTagsList = this.actionBarSearchTags;
                    frameLayout2.setPadding(0, height + ((searchTagsList == null || !searchTagsList.shown()) ? 0 : this.actionBarSearchTags.getHeight()), 0, 0);
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.messagesSearchListViewAnimation = animatorSet2;
                    animatorSet2.playTogether(ObjectAnimator.ofFloat(this.messagesSearchListContainer, View.ALPHA, z ? 1.0f : 0.0f));
                    this.messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
                    this.messagesSearchListViewAnimation.setDuration(180L);
                    this.messagesSearchListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.86
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                                if (z) {
                                    return;
                                }
                                ChatActivity.this.messagesSearchListContainer.setVisibility(8);
                            }
                        }
                    });
                    this.messagesSearchListViewAnimation.start();
                    AnimatedTextView animatedTextView = this.searchExpandList;
                    if (animatedTextView != null) {
                        FrameLayout frameLayout3 = this.messagesSearchListContainer;
                        animatedTextView.setText(LocaleController.getString((frameLayout3 == null || frameLayout3.getTag() == null) ? R.string.SearchAsList : R.string.SearchAsChat), true ^ LocaleController.isRTL);
                    }
                    hideHints();
                    updateSearchCountText();
                }
            }
        }
    }

    private void showMultipleReactionsPromo(ChatMessageCell chatMessageCell, ReactionsLayoutInBubble.VisibleReaction visibleReaction, int i) {
        TLRPC.Document findDocument;
        if (SharedConfig.multipleReactionsPromoShowed || chatMessageCell == null || chatMessageCell.getMessageObject() == null || visibleReaction == null || getUserConfig().isPremium() || i != 1) {
            return;
        }
        SharedConfig.setMultipleReactionsPromoShowed(true);
        long j = visibleReaction.documentId;
        if (j == 0) {
            TLRPC.TL_availableReaction tL_availableReaction = MediaDataController.getInstance(this.currentAccount).getReactionsMap().get(visibleReaction.emojicon);
            if (tL_availableReaction == null) {
                return;
            }
            findDocument = tL_availableReaction.center_icon;
        } else {
            findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, j);
        }
        if (findDocument == null) {
            return;
        }
        BulletinFactory.of(this).createEmojiBulletin(findDocument, LocaleController.getString(R.string.ChatMultipleReactionsPromo)).setDuration(5000).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showNoSoundHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        AnimatedFileDrawable animation;
        if (this.scrollingChatListView || SharedConfig.noSoundHintShowed || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.noSoundHintView;
        if (hintView == null || hintView.getTag() == null) {
            if (this.noSoundHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 0, this.themeDelegate);
                this.noSoundHintView = hintView2;
                hintView2.setShowingDuration(10000L);
                sizeNotifierFrameLayout.addView(this.noSoundHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                this.noSoundHintView.setAlpha(0.0f);
                this.noSoundHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isVideo() && (animation = chatMessageCell.getPhotoImage().getAnimation()) != null && animation.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(chatMessageCell, true)) {
                    SharedConfig.setNoSoundHintShowed(true);
                    return;
                }
            }
        }
    }

    private void showPinnedProgress(boolean z) {
        if (z) {
            if (this.updatePinnedProgressRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda51
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showPinnedProgress$142();
                    }
                };
                this.updatePinnedProgressRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 100L);
                return;
            }
            return;
        }
        Runnable runnable2 = this.updatePinnedProgressRunnable;
        if (runnable2 != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable2);
        }
        this.updatePinnedProgressRunnable = null;
        this.pinnedProgressIsShowing = false;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showPollSolution(MessageObject messageObject, TLRPC.PollResults pollResults) {
        CharSequence charSequence;
        if (pollResults == null || TextUtils.isEmpty(pollResults.solution)) {
            return;
        }
        if (pollResults.solution_entities.isEmpty()) {
            charSequence = pollResults.solution;
        } else {
            charSequence = MessageObject.replaceAnimatedEmoji(Emoji.replaceEmoji((CharSequence) new SpannableStringBuilder(pollResults.solution), Theme.chat_msgBotButtonPaint.getFontMetricsInt(), AndroidUtilities.dp(13.0f), false), pollResults.solution_entities, Theme.chat_msgBotButtonPaint.getFontMetricsInt());
            MessageObject.addEntitiesToText(charSequence, pollResults.solution_entities, false, true, true, false);
        }
        showInfoHint(messageObject, charSequence, 0);
    }

    private void showProgressView(boolean z) {
        ViewPropertyAnimator listener;
        if (this.progressView == null) {
            return;
        }
        if (!AndroidUtilities.isTablet() && !this.isComments && this.currentUser == null && getLiteModeChat()) {
            this.animateProgressViewTo = z;
            return;
        }
        if (!this.fragmentOpened || !SharedConfig.animationsEnabled()) {
            this.animateProgressViewTo = z;
            this.progressView.setVisibility(z ? 0 : 4);
        } else if (z == this.animateProgressViewTo) {
        } else {
            this.animateProgressViewTo = z;
            if (z) {
                if (this.progressView.getVisibility() != 0) {
                    this.progressView.setVisibility(0);
                    this.progressView.setAlpha(0.0f);
                    this.progressView.setScaleX(0.3f);
                    this.progressView.setScaleY(0.3f);
                }
                this.progressView.animate().setListener(null).cancel();
                listener = this.progressView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L);
            } else {
                this.progressView.animate().setListener(null).cancel();
                listener = this.progressView.animate().alpha(0.0f).scaleX(0.3f).scaleY(0.3f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.77
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.progressView.setVisibility(4);
                    }
                });
            }
            listener.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showQuickRepliesRemoveAlert() {
        showDialog(new AlertDialog.Builder(getContext(), getResourceProvider()).setTitle(LocaleController.getString(R.string.BusinessRepliesRemoveTitle)).setMessage(LocaleController.getString(R.string.BusinessRepliesRemoveMessage)).setPositiveButton(LocaleController.getString(R.string.Remove), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda82
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$showQuickRepliesRemoveAlert$301(dialogInterface, i);
            }
        }).setNegativeButton(LocaleController.getString(R.string.Cancel), null).create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showScheduledHint() {
        TLRPC.ChatFull chatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((chatFull = this.chatInfo) != null && chatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        if (this.scheduledHintShown || this.scheduledOrNoSoundHintShown || z || SharedConfig.scheduledHintShows >= 3 || this.chatActivityEnterView.isEditingMessage()) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledHintRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledHintRunnable, 4000L);
    }

    private void showScheduledOrNoSoundHint() {
        TLRPC.ChatFull chatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((chatFull = this.chatInfo) != null && chatFull.slowmode_next_send_date > 0 && this.chatMode == 0) || this.chatMode == 6;
        long currentTimeMillis = System.currentTimeMillis() - SharedConfig.scheduledOrNoSoundHintSeenAt;
        long currentTimeMillis2 = System.currentTimeMillis() - SharedConfig.scheduledHintSeenAt;
        if (z || SharedConfig.scheduledOrNoSoundHintShows >= 3 || currentTimeMillis < 86400000 || currentTimeMillis2 < 86400000 || this.chatActivityEnterView.isEditingMessage()) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledOrNoSoundRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledOrNoSoundRunnable, 200L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showSlowModeHint(View view, boolean z, CharSequence charSequence) {
        HintView hintView;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (z || ((hintView = this.slowModeHint) != null && hintView.getVisibility() == 0)) {
            this.slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, charSequence)));
            if (z) {
                this.slowModeHint.showForView(view, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showTagSelector() {
        if (getDialogId() == getUserConfig().getClientUserId() && getUserConfig().isPremium() && this.tagSelector == null) {
            60 r0 = new 60(3, this, getContext(), this.currentAccount, this.themeDelegate);
            this.tagSelector = r0;
            r0.setPadding(AndroidUtilities.dp(4.0f), AndroidUtilities.dp(24.0f), AndroidUtilities.dp(4.0f), AndroidUtilities.dp(0.0f));
            this.tagSelector.setDelegate(new ReactionsContainerLayout.ReactionsContainerDelegate() { // from class: org.telegram.ui.ChatActivity.61
                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                public /* synthetic */ boolean drawBackground() {
                    return ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$drawBackground(this);
                }

                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                public /* synthetic */ void drawRoundRect(Canvas canvas, RectF rectF, float f, float f2, float f3, int i, boolean z) {
                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$drawRoundRect(this, canvas, rectF, f, f2, f3, i, z);
                }

                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                public /* synthetic */ boolean needEnterText() {
                    return ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$needEnterText(this);
                }

                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                public /* synthetic */ void onEmojiWindowDismissed() {
                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$onEmojiWindowDismissed(this);
                }

                /* JADX WARN: Code restructure failed: missing block: B:25:0x00ac, code lost:
                    if (r1 == null) goto L25;
                 */
                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                /*
                    Code decompiled incorrectly, please refer to instructions dump.
                */
                public void onReactionClicked(View view, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2) {
                    TLRPC.Document findDocument;
                    MessageObject messageObject;
                    int i;
                    int i2;
                    HashSet hashSet;
                    boolean z3;
                    TLRPC.Message message;
                    if (ChatActivity.this.tagSelector == null) {
                        return;
                    }
                    if (ChatActivity.this.getDialogId() == ChatActivity.this.getUserConfig().getClientUserId() && !ChatActivity.this.getUserConfig().isPremium()) {
                        new PremiumFeatureBottomSheet(ChatActivity.this, 24, true).show();
                        ChatActivity.this.clearSelectionMode(false);
                        return;
                    }
                    boolean contains = ChatActivity.this.tagSelector.getSelectedReactions().contains(visibleReaction);
                    HashSet hashSet2 = new HashSet();
                    boolean z4 = false;
                    boolean z5 = false;
                    int i3 = 0;
                    int i4 = 0;
                    while (i4 < ChatActivity.this.selectedMessagesIds.length) {
                        boolean z6 = z4;
                        boolean z7 = z5;
                        int i5 = i3;
                        int i6 = 0;
                        while (i6 < ChatActivity.this.selectedMessagesIds[i4].size()) {
                            MessageObject messageObject2 = (MessageObject) ChatActivity.this.selectedMessagesIds[i4].valueAt(i6);
                            if (messageObject2.hasValidGroupId()) {
                                MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject2);
                                if (validGroupedMessage != null && !hashSet2.contains(Long.valueOf(validGroupedMessage.groupId))) {
                                    hashSet2.add(Long.valueOf(validGroupedMessage.groupId));
                                    messageObject2 = validGroupedMessage.findPrimaryMessageObject();
                                }
                                i = i6;
                                i2 = i4;
                                hashSet = hashSet2;
                                z3 = contains;
                                i6 = i + 1;
                                contains = z3;
                                i4 = i2;
                                hashSet2 = hashSet;
                            }
                            MessageObject messageObject3 = messageObject2;
                            if (messageObject3.hasReaction(visibleReaction) == contains) {
                                ChatActivity chatActivity = ChatActivity.this;
                                messageObject = messageObject3;
                                i = i6;
                                i2 = i4;
                                hashSet = hashSet2;
                                z3 = contains;
                                chatActivity.selectReaction(chatActivity.findMessageCell(messageObject3.getId(), false), messageObject3, null, null, 0.0f, 0.0f, visibleReaction, false, false, false, true);
                                if (!z3) {
                                    i5++;
                                }
                            } else {
                                messageObject = messageObject3;
                                i = i6;
                                i2 = i4;
                                hashSet = hashSet2;
                                z3 = contains;
                            }
                            if (messageObject.messageOwner != null) {
                                if (ChatActivity.this.chatAdapter.isFiltered) {
                                    MessageObject messageObject4 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
                                    if (messageObject4 != null && (message = messageObject4.messageOwner) != null) {
                                        message.reactions = messageObject.messageOwner.reactions;
                                    }
                                } else if (!ChatActivity.this.chatAdapter.isFiltered && ChatActivity.this.searchingReaction != null) {
                                    z6 = true;
                                }
                            }
                            if (ChatActivity.this.chatAdapter.isFiltered && !messageObject.hasReaction(ChatActivity.this.searchingReaction)) {
                                MessageObject.GroupedMessages validGroupedMessage2 = ChatActivity.this.getValidGroupedMessage(messageObject);
                                if (validGroupedMessage2 != null) {
                                    for (int i7 = 0; i7 < validGroupedMessage2.messages.size(); i7++) {
                                        ChatActivity.this.getMediaDataController().removeMessageFromResults(validGroupedMessage2.messages.get(i7).getId());
                                    }
                                } else {
                                    ChatActivity.this.getMediaDataController().removeMessageFromResults(messageObject.getId());
                                }
                                if (ChatActivity.this.messagesSearchAdapter != null) {
                                    ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
                                }
                                z6 = true;
                                z7 = true;
                            }
                            i6 = i + 1;
                            contains = z3;
                            i4 = i2;
                            hashSet2 = hashSet;
                        }
                        i4++;
                        z4 = z6;
                        z5 = z7;
                        i3 = i5;
                    }
                    if (z4) {
                        ChatActivity.this.updateFilteredMessages(z5);
                    }
                    ChatActivity.this.clearSelectionMode(true);
                    if (i3 > 0) {
                        long j = visibleReaction.documentId;
                        if (j == 0) {
                            TLRPC.TL_availableReaction tL_availableReaction = MediaDataController.getInstance(UserConfig.selectedAccount).getReactionsMap().get(visibleReaction.emojicon);
                            if (tL_availableReaction == null) {
                                return;
                            }
                            findDocument = tL_availableReaction.activate_animation;
                        } else {
                            findDocument = AnimatedEmojiDrawable.findDocument(UserConfig.selectedAccount, j);
                        }
                        if (findDocument == null) {
                            return;
                        }
                        BulletinFactory.of(ChatActivity.this).createMessagesTaggedBulletin(i3, findDocument, null).show(true);
                    }
                }
            });
            this.tagSelector.setTop(true);
            this.tagSelector.setClipChildren(false);
            this.tagSelector.setClipToPadding(false);
            this.tagSelector.setVisibility(0);
            ReactionsContainerLayout reactionsContainerLayout = this.tagSelector;
            reactionsContainerLayout.setHint(LocaleController.getString(reactionsContainerLayout.getSelectedReactions().isEmpty() ? R.string.SavedTagReactionsSelectedAddHint : R.string.SavedTagReactionsSelectedEditHint));
            this.contentView.addView(this.tagSelector, LayoutHelper.createFrame(-2, 92.5f, 49, 0.0f, 0.0f, 0.0f, 0.0f));
            this.tagSelector.setMessage(null, null, true);
            this.tagSelector.setTranslationY(-AndroidUtilities.dp(12.0f));
            this.tagSelector.setScaleY(0.4f);
            this.tagSelector.setScaleX(0.4f);
            this.tagSelector.animate().scaleY(1.0f).scaleX(1.0f).translationY(0.0f).setDuration(420L).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).start();
            updateSelectedMessageReactions();
            ReactionsContainerLayout reactionsContainerLayout2 = this.tagSelector;
            float f = this.contentPanTranslation;
            SearchTagsList searchTagsList = this.actionBarSearchTags;
            reactionsContainerLayout2.setTranslationY(f + (searchTagsList != null ? searchTagsList.getCurrentHeight() : 0));
        }
    }

    private void showTextSelectionHint(MessageObject messageObject) {
        CharSequence charSequence;
        if (getParentActivity() == null || getMessagesController().isChatNoForwards(messageObject.getChatId())) {
            return;
        }
        TLRPC.Message message = messageObject.messageOwner;
        if (message == null || !message.noforwards) {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
            boolean z = false;
            if (arrayList == null || arrayList.isEmpty()) {
                charSequence = messageObject.caption;
            } else {
                charSequence = messageObject.messageText;
                if (messageObject.textLayoutBlocks.size() > 1) {
                    z = true;
                }
            }
            if (!z && charSequence != null) {
                z = true;
            }
            if (!z || SharedConfig.textSelectionHintShows > 2 || this.textSelectionHintWasShowed || this.lastTouchY > this.chatActivityEnterView.getTop() - AndroidUtilities.dp(60.0f)) {
                return;
            }
            this.textSelectionHintWasShowed = true;
            SharedConfig.increaseTextSelectionHintShowed();
            if (this.textSelectionHint == null) {
                TextSelectionHint textSelectionHint = new TextSelectionHint(getParentActivity(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.88
                    @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                    protected void onDraw(Canvas canvas) {
                        super.onDraw(canvas);
                        updatePosition();
                    }

                    @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                    protected void onMeasure(int i, int i2) {
                        super.onMeasure(i, i2);
                        updatePosition();
                    }

                    public void updatePosition() {
                        int top = ChatActivity.this.chatActivityEnterView.getTop() - ChatActivity.this.contentView.getMeasuredHeight();
                        setTranslationY(top - ((top + (-(getMeasuredHeight() + AndroidUtilities.dp(16.0f)))) * (1.0f - getPrepareProgress())));
                    }
                };
                this.textSelectionHint = textSelectionHint;
                this.contentView.addView(textSelectionHint, LayoutHelper.createFrame(-2, 56.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
            }
            this.textSelectionHint.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showVoiceHint(boolean z, boolean z2) {
        ChatActivityEnterView chatActivityEnterView;
        HintView hintView;
        int i;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if ((z && this.voiceHintTextView == null) || this.chatMode != 0 || (chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getAudioVideoButtonContainer() == null || this.chatActivityEnterView.getAudioVideoButtonContainer().getVisibility() != 0 || isInPreviewMode()) {
            return;
        }
        if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView2 = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.voiceHintTextView = hintView2;
            sizeNotifierFrameLayout.addView(hintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        if (z) {
            this.voiceHintTextView.hide();
            return;
        }
        if (this.chatActivityEnterView.hasRecordVideo()) {
            hintView = this.voiceHintTextView;
            i = z2 ? R.string.HoldToVideo : R.string.HoldToAudio;
        } else {
            hintView = this.voiceHintTextView;
            i = R.string.HoldToAudioOnly;
        }
        hintView.setText(LocaleController.getString(i));
        this.voiceHintTextView.showForView(this.chatActivityEnterView.getAudioVideoButtonContainer(), true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject == null || getParentActivity() == null) {
            return;
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
            this.selectionReactionsOverlay.setHiddenByScroll(true);
        }
        if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
            this.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
        }
        this.mentionContainer.getAdapter().setNeedBotContext(false);
        this.chatActivityEnterView.setVisibility(0);
        showFieldPanelForEdit(true, messageObject);
        updateBottomOverlay();
        checkEditTimer();
        this.chatActivityEnterView.setAllowStickersAndGifs(true, false, false, true);
        updatePinnedMessageView(true);
        updateVisibleRows();
        if (messageObject.scheduled || messageObject.isQuickReply()) {
            this.chatActivityEnterView.showEditDoneProgress(false, true);
            return;
        }
        TLRPC.TL_messages_getMessageEditData tL_messages_getMessageEditData = new TLRPC.TL_messages_getMessageEditData();
        tL_messages_getMessageEditData.peer = getMessagesController().getInputPeer(this.dialog_id);
        tL_messages_getMessageEditData.id = messageObject.getId();
        this.editingMessageObjectReqId = getConnectionsManager().sendRequest(tL_messages_getMessageEditData, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda332
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$startEditingMessageObject$267(tLObject, tL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMessageUnselect() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda61
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startMessageUnselect$139();
            }
        };
        this.unselectRunnable = runnable2;
        AndroidUtilities.runOnUIThread(runnable2, this.highlightMessageQuote != null ? 2500L : 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMultiselect(int i) {
        int i2;
        if (!this.isInsideContainer && (i2 = i - this.chatAdapter.messagesStartRow) >= 0 && i2 < this.messages.size()) {
            MessageObject messageObject = (MessageObject) this.messages.get(i2);
            final boolean z = this.selectedMessagesIds[0].get(messageObject.getId(), null) == null && this.selectedMessagesIds[1].get(messageObject.getId(), null) == null;
            final SparseArray sparseArray = new SparseArray();
            for (int i3 = 0; i3 < this.selectedMessagesIds[0].size(); i3++) {
                sparseArray.put(this.selectedMessagesIds[0].keyAt(i3), (MessageObject) this.selectedMessagesIds[0].valueAt(i3));
            }
            for (int i4 = 0; i4 < this.selectedMessagesIds[1].size(); i4++) {
                sparseArray.put(this.selectedMessagesIds[1].keyAt(i4), (MessageObject) this.selectedMessagesIds[1].valueAt(i4));
            }
            this.chatListView.startMultiselect(i, false, new RecyclerListView.onMultiSelectionChanged() { // from class: org.telegram.ui.ChatActivity.11
                boolean limitReached;

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public boolean canSelect(int i5) {
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                        return false;
                    }
                    MessageObject messageObject2 = (MessageObject) ChatActivity.this.messages.get(i6);
                    if (messageObject2.contentType == 0) {
                        if (z || sparseArray.get(messageObject2.getId(), null) != null) {
                            return z && sparseArray.get(messageObject2.getId(), null) != null;
                        }
                        return true;
                    }
                    return false;
                }

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public int checkPosition(int i5, boolean z2) {
                    MessageObject.GroupedMessages groupedMessages;
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (i6 >= 0 && i6 < ChatActivity.this.messages.size()) {
                        MessageObject messageObject2 = (MessageObject) ChatActivity.this.messages.get(i6);
                        if (messageObject2.contentType == 0 && messageObject2.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject2.getGroupId())) != null) {
                            ArrayList<MessageObject> arrayList = groupedMessages.messages;
                            return ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(arrayList.get(z2 ? 0 : arrayList.size() - 1));
                        }
                    }
                    return i5;
                }

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public void getPaddings(int[] iArr) {
                    ChatActivity chatActivity = ChatActivity.this;
                    iArr[0] = (int) chatActivity.chatListViewPaddingTop;
                    iArr[1] = chatActivity.blurredViewBottomOffset;
                }

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public boolean limitReached() {
                    return this.limitReached;
                }

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public void onSelectionChanged(int i5, boolean z2, float f, float f2) {
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (z) {
                        z2 = !z2;
                    }
                    if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                        return;
                    }
                    MessageObject messageObject2 = (MessageObject) ChatActivity.this.messages.get(i6);
                    if (!z2 || (ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) < 0 && ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) < 0)) {
                        if ((z2 || ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) >= 0) && messageObject2.contentType == 0) {
                            if (!z2 || ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() < 100) {
                                this.limitReached = false;
                            } else {
                                this.limitReached = true;
                            }
                            RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i5);
                            if (findViewHolderForAdapterPosition != null) {
                                View view = findViewHolderForAdapterPosition.itemView;
                                if (view instanceof ChatMessageCell) {
                                    ChatActivity.this.processRowSelect(view, false, f, f2);
                                    return;
                                }
                            }
                            ChatActivity.this.addToSelectedMessages(messageObject2, false);
                            ChatActivity.this.updateActionModeTitle();
                            ChatActivity.this.updateVisibleRows();
                        }
                    }
                }

                @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
                public void scrollBy(int i5) {
                    ChatActivity.this.chatListView.scrollBy(0, i5);
                }
            });
        }
    }

    private void toggleMesagesSearchListView() {
        FrameLayout frameLayout = this.messagesSearchListContainer;
        if (frameLayout != null) {
            showMessagesSearchListView(frameLayout.getTag() == null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void toggleMute(boolean z) {
        if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), false);
            if (z) {
                return;
            }
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        } else if (z) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), true);
        } else {
            BottomSheet createMuteAlert = AlertsCreator.createMuteAlert(this, this.dialog_id, getTopicId(), this.themeDelegate);
            createMuteAlert.setCalcMandatoryInsets(isKeyboardVisible());
            showDialog(createMuteAlert);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void unpinMessage(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        final ArrayList arrayList = new ArrayList();
        arrayList.add(this.selectedObject);
        final ArrayList arrayList2 = new ArrayList();
        arrayList2.add(Integer.valueOf(messageObject.getId()));
        final int i = this.totalPinnedMessagesCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList2, Boolean.FALSE, 0, 0, 0, Integer.valueOf(this.totalPinnedMessagesCount - 1), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = BulletinFactory.createUnpinMessageBulletin(this, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda314
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$268(arrayList2, arrayList, i);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda315
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$269(messageObject);
            }
        }, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateActionModeTitle() {
        if (!isReport()) {
            if (this.actionBar.isActionModeShowed() && this.selectedMessagesCountTextView != null) {
                if (this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
                    return;
                }
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
                return;
            }
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ReportMessages));
            this.bottomOverlayChatText.setAlpha(0.5f);
            this.bottomOverlayChatText.setEnabled(false);
            return;
        }
        this.bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", R.string.ReportMessagesCount, LocaleController.formatPluralString("messages", size, new Object[0])).toUpperCase());
        this.bottomOverlayChatText.setAlpha(1.0f);
        this.bottomOverlayChatText.setEnabled(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBackground() {
        if (this.contentView == null || this.parentThemeDelegate != null) {
            return;
        }
        if ((this.themeDelegate.backgroundDrawable == null || this.contentView.getBackgroundImage() == null) && this.contentView.getBackgroundImage() == null) {
            this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
        }
    }

    private void updateBotButtons() {
        TLRPC.User user;
        boolean z;
        int i;
        if (this.headerItem == null || (user = this.currentUser) == null || this.currentEncryptedChat != null || !user.bot) {
            return;
        }
        boolean z2 = false;
        if (this.botInfo.size() != 0) {
            boolean z3 = false;
            z = false;
            for (int i2 = 0; i2 < this.botInfo.size(); i2++) {
                TL_bots.BotInfo botInfo = (TL_bots.BotInfo) this.botInfo.valueAt(i2);
                while (i < botInfo.commands.size()) {
                    TLRPC.TL_botCommand tL_botCommand = botInfo.commands.get(i);
                    if (tL_botCommand.command.toLowerCase().equals("help")) {
                        z3 = true;
                    } else if (tL_botCommand.command.toLowerCase().equals("settings")) {
                        z = true;
                    }
                    i = (z && z3) ? 0 : i + 1;
                }
            }
            z2 = z3;
        } else {
            z = false;
        }
        if (z2) {
            this.headerItem.showSubItem(30);
        } else {
            this.headerItem.hideSubItem(30);
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (z) {
            actionBarMenuItem.showSubItem(31);
        } else {
            actionBarMenuItem.hideSubItem(31);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBotHelpCellClick(final BotHelpCell botHelpCell) {
        if (!MessagesController.getInstance(this.currentAccount).getTranslateController().isContextTranslateEnabled() || !LanguageDetector.hasSupport()) {
            botHelpCell.setClickable(false);
            return;
        }
        final CharSequence text = botHelpCell.getText();
        LanguageDetector.detectLanguage(text == null ? "" : text.toString(), new LanguageDetector.StringCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda273
            @Override // org.telegram.messenger.LanguageDetector.StringCallback
            public final void run(String str) {
                ChatActivity.this.lambda$updateBotHelpCellClick$337(botHelpCell, text, str);
            }
        }, new LanguageDetector.ExceptionCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda274
            @Override // org.telegram.messenger.LanguageDetector.ExceptionCallback
            public final void run(Exception exc) {
                BotHelpCell.this.setClickable(false);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:143:0x0314  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x0414  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x0431  */
    /* JADX WARN: Removed duplicated region for block: B:211:0x0449  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x070b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateBottomOverlay() {
        UnreadCounterTextView unreadCounterTextView;
        int i;
        boolean z;
        boolean z2;
        UnreadCounterTextView unreadCounterTextView2;
        int i2;
        boolean z3;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        TLRPC.User user;
        TLRPC.User user2;
        TLRPC.TL_forumTopic tL_forumTopic;
        TLRPC.UserFull userFull;
        if (this.bottomOverlayChatText == null || this.chatMode == 1 || getContext() == null) {
            return;
        }
        this.bottomOverlayChatWaitsReply = false;
        this.bottomOverlayLinks = false;
        if (this.chatMode != 0 || getDialogId() == getUserConfig().getClientUserId() || (userFull = this.userInfo) == null || !userFull.contact_require_premium || getUserConfig().isPremium()) {
            if (this.chatMode != 5 || this.messages.size() < getMessagesController().quickReplyMessagesLimit) {
                if (this.chatMode != 3 || getSavedDialogId() == getUserConfig().getClientUserId()) {
                    if (isReport()) {
                        updateActionModeTitle();
                    } else if (this.chatMode == 2) {
                        TLRPC.Chat chat3 = this.currentChat;
                        if (chat3 != null) {
                            z2 = ChatObject.canPinMessages(chat3);
                        } else {
                            TLRPC.UserFull userFull2 = this.userInfo;
                            z2 = userFull2 != null ? userFull2.can_pin_message : false;
                        }
                        if (z2) {
                            this.bottomOverlayChatText.setTag(1);
                            unreadCounterTextView2 = this.bottomOverlayChatText;
                            i2 = R.string.UnpinAllMessages;
                        } else {
                            this.bottomOverlayChatText.setTag(null);
                            unreadCounterTextView2 = this.bottomOverlayChatText;
                            i2 = R.string.HidePinnedMessages;
                        }
                    } else {
                        TLRPC.User user3 = this.currentUser;
                        if (user3 != null && user3.id == UserObject.VERIFY) {
                            if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
                                this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelUnmute), true);
                            } else {
                                this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelMute), false);
                            }
                            this.bottomOverlayChatText.setEnabled(true);
                            showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                        } else if (this.currentChat != null) {
                            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                            long j = notificationsSettings.getLong("dialog_join_requested_time_" + this.dialog_id, -1L);
                            if (ChatObject.isChannel(this.currentChat)) {
                                TLRPC.Chat chat4 = this.currentChat;
                                if (!(chat4 instanceof TLRPC.TL_channelForbidden)) {
                                    if (!ChatObject.isNotInChat(chat4) || (!ChatObject.isForum(this.currentChat) && isThreadChat() && !this.currentChat.join_to_send)) {
                                        if (!shouldDisplaySwipeToLeftToReplyInForum()) {
                                            if (isThreadChat()) {
                                                TLRPC.TL_forumTopic tL_forumTopic2 = this.forumTopic;
                                                if (tL_forumTopic2 != null && tL_forumTopic2.closed) {
                                                    if (!ChatObject.canManageTopic(this.currentAccount, this.currentChat, tL_forumTopic2)) {
                                                        Drawable mutate = getContext().getResources().getDrawable(R.drawable.msg_mini_lock2).mutate();
                                                        mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_windowBackgroundWhiteGrayText), PorterDuff.Mode.MULTIPLY));
                                                        this.bottomOverlayChatText.setTextInfo(mutate, LocaleController.getString(R.string.TopicClosedByAdmin));
                                                        this.bottomOverlayChatText.setEnabled(false);
                                                    }
                                                    z = false;
                                                    showBottomOverlayProgress(false, false);
                                                    if (!z && j > 0) {
                                                        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                                                        edit.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                                                    }
                                                }
                                            } else {
                                                if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
                                                    this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelUnmute), true);
                                                } else {
                                                    this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelMute), false);
                                                }
                                                this.bottomOverlayChatText.setEnabled(true);
                                                showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                                            }
                                            z = false;
                                            if (!z) {
                                                SharedPreferences.Editor edit2 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                                                edit2.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                                            }
                                        }
                                        this.bottomOverlayChatWaitsReply = true;
                                        showBottomOverlayProgress(false, false);
                                        this.bottomOverlayChatText.setTextInfo(LocaleController.getString(R.string.ForumReplyToMessagesInTopic));
                                        this.bottomOverlayChatText.setEnabled(false);
                                        z = false;
                                        if (!z) {
                                        }
                                    } else if (getMessagesController().isJoiningChannel(this.currentChat.id)) {
                                        showBottomOverlayProgress(true, false);
                                        z = false;
                                        if (!z) {
                                        }
                                    } else {
                                        TLRPC.Chat chat5 = this.currentChat;
                                        if (chat5.join_request) {
                                            if (j <= 0 || System.currentTimeMillis() - j >= 120000) {
                                                this.bottomOverlayChatText.setText(LocaleController.getString(ChatObject.isChannelAndNotMegaGroup(this.currentChat) ? R.string.ChannelJoinRequest : R.string.GroupJoinRequest));
                                                this.bottomOverlayChatText.setEnabled(true);
                                            } else {
                                                this.bottomOverlayChatText.setText(LocaleController.getString(ChatObject.isChannelAndNotMegaGroup(this.currentChat) ? R.string.ChannelJoinRequestSent : R.string.GroupJoinRequestSent), true);
                                                this.bottomOverlayChatText.setEnabled(false);
                                            }
                                            z = true;
                                            showBottomOverlayProgress(false, false);
                                            if (!z) {
                                            }
                                        } else {
                                            this.bottomOverlayChatText.setText(LocaleController.getString(ChatObject.isChannelAndNotMegaGroup(chat5) ? R.string.ChannelJoin : R.string.GroupJoin));
                                            this.bottomOverlayChatText.setEnabled(true);
                                            z = false;
                                            showBottomOverlayProgress(false, false);
                                            if (!z) {
                                            }
                                        }
                                    }
                                }
                            }
                            if (!shouldDisplaySwipeToLeftToReplyInForum()) {
                                if (!isThreadChat()) {
                                    this.bottomOverlayChatText.setText(LocaleController.getString(R.string.DeleteThisGroup));
                                    this.bottomOverlayChatText.setEnabled(true);
                                }
                                z = false;
                                if (!z) {
                                }
                            }
                            this.bottomOverlayChatWaitsReply = true;
                            showBottomOverlayProgress(false, false);
                            this.bottomOverlayChatText.setTextInfo(LocaleController.getString(R.string.ForumReplyToMessagesInTopic));
                            this.bottomOverlayChatText.setEnabled(false);
                            z = false;
                            if (!z) {
                            }
                        } else {
                            showBottomOverlayProgress(false, true);
                            if (this.userBlocked) {
                                TextView textView = this.bottomOverlayStartButton;
                                if (textView != null) {
                                    textView.setVisibility(8);
                                }
                                if (this.currentUser.bot) {
                                    unreadCounterTextView = this.bottomOverlayChatText;
                                    i = R.string.BotUnblock;
                                } else {
                                    unreadCounterTextView = this.bottomOverlayChatText;
                                    i = R.string.Unblock;
                                }
                                unreadCounterTextView.setText(LocaleController.getString(i));
                                this.bottomOverlayChatText.setVisibility(0);
                                if (this.botButtons != null) {
                                    this.botButtons = null;
                                    if (this.chatActivityEnterView != null) {
                                        MessageObject messageObject = this.replyingMessageObject;
                                        if (messageObject != null && this.botReplyButtons == messageObject) {
                                            this.botReplyButtons = null;
                                            hideFieldPanel(false);
                                        }
                                        this.chatActivityEnterView.setButtons(this.botButtons, false);
                                    }
                                }
                            } else if (UserObject.isReplyUser(this.currentUser)) {
                                if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
                                    this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelUnmute), true);
                                } else {
                                    this.bottomOverlayChatText.setText(LocaleController.getString(R.string.ChannelMute), false);
                                }
                                showBottomOverlayProgress(false, true);
                            } else {
                                if (this.botUser != null) {
                                    TLRPC.User user4 = this.currentUser;
                                    if (user4.bot && !UserObject.isDeleted(user4)) {
                                        TextView textView2 = this.bottomOverlayStartButton;
                                        if (textView2 != null) {
                                            textView2.setVisibility(0);
                                        }
                                        this.bottomOverlayChatText.setVisibility(8);
                                        this.chatActivityEnterView.hidePopup(false);
                                        if (getParentActivity() != null) {
                                            AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                                        }
                                        if (!this.messages.isEmpty() && this.currentUser != null && this.botUser.length() != 0) {
                                            this.sentBotStart = true;
                                        }
                                    }
                                }
                                this.bottomOverlayChatText.setText(LocaleController.getString(R.string.DeleteThisChat));
                            }
                        }
                    }
                } else if (getSavedDialogId() == UserObject.ANONYMOUS) {
                    z3 = true;
                    chat = this.currentChat;
                    if (chat == null && chat.gigagroup && !isReport() && this.chatMode == 0) {
                        this.bottomOverlayImage.setVisibility(0);
                    } else {
                        this.bottomOverlayImage.setVisibility(4);
                    }
                    if (this.inPreviewMode) {
                        BlurredFrameLayout blurredFrameLayout = this.searchContainer;
                        if (blurredFrameLayout != null) {
                            blurredFrameLayout.setVisibility(4);
                        }
                        this.bottomOverlayChat.setVisibility(4);
                        this.chatActivityEnterView.setFieldFocused(false);
                    } else if (!this.bottomOverlayLinks) {
                        if (this.searchItem != null && this.searchItemVisible) {
                            createSearchContainer();
                            BlurredFrameLayout blurredFrameLayout2 = this.searchContainer;
                            if (blurredFrameLayout2 == null) {
                                return;
                            }
                            blurredFrameLayout2.animate().setListener(null).cancel();
                            if (this.searchContainer.getVisibility() != 0) {
                                this.searchContainer.setVisibility(0);
                                this.searchContainer.setAlpha(0.0f);
                                AnimatedTextView animatedTextView = this.searchCountText;
                                if (animatedTextView != null) {
                                    animatedTextView.setText("", false);
                                }
                            }
                            ViewPropertyAnimator interpolator = this.searchContainer.animate().alpha(1.0f).setDuration(220L).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                            if (this.isInsideContainer) {
                                interpolator.translationY(0.0f);
                            }
                            interpolator.start();
                            ValueAnimator valueAnimator = this.searchExpandAnimator;
                            if (valueAnimator != null) {
                                valueAnimator.removeAllListeners();
                                this.searchExpandAnimator.cancel();
                            }
                            float f = this.searchExpandProgress;
                            if (f != 1.0f) {
                                ValueAnimator ofFloat = ValueAnimator.ofFloat(f, 1.0f);
                                this.searchExpandAnimator = ofFloat;
                                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda168
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                                        ChatActivity.this.lambda$updateBottomOverlay$201(valueAnimator2);
                                    }
                                });
                                this.searchExpandAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.107
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        ChatActivity.this.searchExpandProgress = 1.0f;
                                        ChatActivity.this.chatActivityEnterView.setVisibility(4);
                                        ChatActivity.this.bottomOverlayChat.setVisibility(4);
                                        ChatActivity.this.invalidateChatListViewTopPadding();
                                    }
                                });
                                this.searchExpandAnimator.setDuration(250L);
                                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                                this.searchExpandAnimator.start();
                            } else {
                                this.chatActivityEnterView.setVisibility(4);
                                this.bottomOverlayChat.setVisibility(4);
                                invalidateChatListViewTopPadding();
                            }
                            this.chatActivityEnterView.setFieldFocused(false);
                            if (this.chatActivityEnterView.isTopViewVisible()) {
                                this.topViewWasVisible = 1;
                                this.chatActivityEnterView.hideTopView(false);
                            } else {
                                this.topViewWasVisible = 2;
                            }
                        } else if (this.chatMode == 7) {
                            createSearchContainer();
                            BlurredFrameLayout blurredFrameLayout3 = this.searchContainer;
                            if (blurredFrameLayout3 == null) {
                                return;
                            }
                            if (blurredFrameLayout3.getVisibility() != 0) {
                                this.searchContainer.setVisibility(0);
                            }
                            invalidateChatListViewTopPadding();
                        } else {
                            BlurredFrameLayout blurredFrameLayout4 = this.searchContainer;
                            if (blurredFrameLayout4 != null) {
                                blurredFrameLayout4.animate().setListener(null).cancel();
                                if (this.searchContainer.getVisibility() == 0) {
                                    ViewPropertyAnimator interpolator2 = this.searchContainer.animate().alpha(0.0f).setDuration(220L).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                    if (this.isInsideContainer) {
                                        interpolator2.translationY(AndroidUtilities.dp(51.0f));
                                    }
                                    interpolator2.setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.108
                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationEnd(Animator animator) {
                                            super.onAnimationEnd(animator);
                                            ChatActivity.this.searchContainer.setVisibility(4);
                                        }
                                    }).start();
                                }
                            }
                            this.chatActivityEnterView.setVisibility(0);
                            ValueAnimator valueAnimator2 = this.searchExpandAnimator;
                            if (valueAnimator2 != null) {
                                valueAnimator2.removeAllListeners();
                                this.searchExpandAnimator.cancel();
                            }
                            float f2 = this.searchExpandProgress;
                            if (f2 != 0.0f) {
                                this.searchExpandAnimator = ValueAnimator.ofFloat(f2, 0.0f);
                                invalidateChatListViewTopPadding();
                                this.searchExpandAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda169
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                                        ChatActivity.this.lambda$updateBottomOverlay$202(valueAnimator3);
                                    }
                                });
                                this.searchExpandAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.109
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        ChatActivity.this.searchExpandProgress = 0.0f;
                                        ChatActivity.this.invalidateChatListViewTopPadding();
                                    }
                                });
                                this.searchExpandAnimator.setDuration(250L);
                                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                                this.searchExpandAnimator.start();
                            }
                            if (this.muteItem != null) {
                                TLRPC.Chat chat6 = this.currentChat;
                                if (chat6 == null || !ChatObject.isNotInChat(chat6)) {
                                    this.muteItem.setVisibility(0);
                                    this.muteItemGap.setVisibility(0);
                                } else {
                                    this.muteItem.setVisibility(8);
                                    this.muteItemGap.setVisibility(8);
                                }
                            }
                            if (this.isInsideContainer || z3) {
                                this.bottomOverlayChat.setVisibility(8);
                                this.chatActivityEnterView.setVisibility(8);
                            } else {
                                if (!isReport()) {
                                    if (this.chatMode == 2 || (((chat2 = this.currentChat) != null && (((ChatObject.isNotInChat(chat2) || !ChatObject.canWriteToChat(this.currentChat)) && (this.currentChat.join_to_send || !isThreadChat() || ChatObject.isForum(this.currentChat))) || (!((tL_forumTopic = this.forumTopic) == null || !tL_forumTopic.closed || ChatObject.canManageTopic(this.currentAccount, this.currentChat, tL_forumTopic)) || shouldDisplaySwipeToLeftToReplyInForum()))) || ((user = this.currentUser) != null && (UserObject.isDeleted(user) || this.userBlocked || UserObject.isReplyUser(this.currentUser))))) {
                                        if (this.chatActivityEnterView.isEditingMessage()) {
                                            this.chatActivityEnterView.setVisibility(0);
                                            AndroidUtilities.updateViewShow(this.bottomOverlayChat, false, false, true);
                                            this.bottomOverlayChat.setVisibility(4);
                                            this.chatActivityEnterView.setFieldFocused();
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda170
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatActivity.this.lambda$updateBottomOverlay$203();
                                                }
                                            }, 100L);
                                        } else {
                                            this.bottomOverlayChat.setVisibility(0);
                                            AndroidUtilities.updateViewShow(this.bottomOverlayChat, true, false, true);
                                            this.chatActivityEnterView.setFieldFocused(false);
                                            this.chatActivityEnterView.setVisibility(4);
                                            this.chatActivityEnterView.closeKeyboard();
                                            SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
                                            if (suggestEmojiView != null) {
                                                suggestEmojiView.forceClose();
                                            }
                                        }
                                        ActionBarMenu.LazyItem lazyItem = this.attachItem;
                                        if (lazyItem != null) {
                                            lazyItem.setVisibility(8);
                                        }
                                        ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
                                        if (lazyItem2 != null) {
                                            lazyItem2.setVisibility(8);
                                        }
                                        ActionBarMenuItem actionBarMenuItem = this.headerItem;
                                        if (actionBarMenuItem != null) {
                                            actionBarMenuItem.setVisibility(0);
                                        }
                                    } else if ((this.botUser == null || !this.currentUser.bot) && (((user2 = this.currentUser) == null || user2.id != UserObject.VERIFY) && (this.chatMode != 3 || getSavedDialogId() == getUserConfig().getClientUserId()))) {
                                        this.bottomOverlayChat.setVisibility(4);
                                        this.chatActivityEnterView.setVisibility(0);
                                    }
                                }
                                this.bottomOverlayChat.setVisibility(0);
                                this.chatActivityEnterView.setVisibility(4);
                            }
                            if (this.topViewWasVisible == 1) {
                                this.chatActivityEnterView.showTopView(false, false);
                                this.topViewWasVisible = 0;
                            }
                        }
                        if (this.sentBotStart) {
                            this.bottomOverlayChat.setVisibility(8);
                            this.chatActivityEnterView.setVisibility(0);
                            this.chatActivityEnterView.setBotInfo(this.botInfo);
                        }
                        checkRaiseSensors();
                    } else {
                        this.bottomOverlayChat.setVisibility(0);
                    }
                    this.chatActivityEnterView.setVisibility(4);
                    if (this.sentBotStart) {
                    }
                    checkRaiseSensors();
                } else {
                    this.bottomOverlayChatText.setTag(null);
                    unreadCounterTextView2 = this.bottomOverlayChatText;
                    i2 = this.currentUser != null ? R.string.SavedOpenChat : ChatObject.isChannelAndNotMegaGroup(this.currentChat) ? R.string.SavedOpenChannel : R.string.SavedOpenGroup;
                }
                unreadCounterTextView2.setText(LocaleController.getString(i2));
            } else {
                this.bottomOverlayLinks = true;
                this.bottomOverlayChatText.setVisibility(8);
                this.bottomOverlayLinksText.setVisibility(0);
                this.bottomOverlayLinksText.setText(AndroidUtilities.replaceTags(LocaleController.formatPluralString("BusinessRepliesLimit", getMessagesController().quickReplyMessagesLimit, new Object[0])));
                showBottomOverlayProgress(false, false);
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.hidePopup(false);
                }
            }
            z3 = false;
            chat = this.currentChat;
            if (chat == null) {
            }
            this.bottomOverlayImage.setVisibility(4);
            if (this.inPreviewMode) {
            }
            this.chatActivityEnterView.setVisibility(4);
            if (this.sentBotStart) {
            }
            checkRaiseSensors();
        }
        this.bottomOverlayLinks = true;
        this.bottomOverlayChatText.setVisibility(8);
        this.bottomOverlayLinksText.setVisibility(0);
        this.bottomOverlayLinksText.setText(AndroidUtilities.replaceSingleTag(LocaleController.formatString(R.string.OnlyPremiumCanMessage, UserObject.getFirstName(this.currentUser)), Theme.key_chat_messageLinkIn, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda167
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$updateBottomOverlay$200();
            }
        }));
        showBottomOverlayProgress(false, false);
        z3 = false;
        chat = this.currentChat;
        if (chat == null) {
        }
        this.bottomOverlayImage.setVisibility(4);
        if (this.inPreviewMode) {
        }
        this.chatActivityEnterView.setVisibility(4);
        if (this.sentBotStart) {
        }
        checkRaiseSensors();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBulletinLayout() {
        Bulletin visibleBulletin = Bulletin.getVisibleBulletin();
        if (visibleBulletin == null || this.bulletinDelegate == null) {
            return;
        }
        visibleBulletin.updatePosition();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateChatListViewTopPadding() {
        SearchTagsList searchTagsList;
        ChatSearchTabs chatSearchTabs;
        float f;
        TranslateButton translateButton;
        View childAt;
        int i;
        BlurredFrameLayout blurredFrameLayout;
        ChatActivityEnterView chatActivityEnterView;
        float translationY;
        if (!this.invalidateChatListViewTopPadding || this.chatListView == null) {
            return;
        }
        if (this.fixedKeyboardHeight <= 0 || this.searchExpandProgress != 0.0f) {
            BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
            float max = Math.max(0, (blurredFrameLayout2 == null || blurredFrameLayout2.getVisibility() != 0) ? 0 : this.topChatPanelView.getLayoutParams().height - AndroidUtilities.dp(2.0f));
            float max2 = max + Math.max(-max, this.topChatPanelViewOffset);
            BlurredFrameLayout blurredFrameLayout3 = this.pinnedMessageView;
            float max3 = (blurredFrameLayout3 == null || blurredFrameLayout3.getVisibility() != 0) ? 0.0f : Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
            if (this.actionBarSearchTags != null) {
                max3 = Math.max(max3, searchTagsList.getCurrentHeight());
            }
            if (this.hashtagSearchTabs != null) {
                max3 = Math.max(max3, chatSearchTabs.getCurrentHeight());
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            MessageObject messageObject = null;
            View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
            float max4 = (view == null || view.getVisibility() != 0) ? 0.0f : Math.max(0.0f, (view.getHeight() + this.pendingRequestsDelegate.getViewEnterOffset()) - AndroidUtilities.dp(4.0f));
            float f2 = this.chatListViewPaddingTop;
            float f3 = max2 + max3 + max4;
            this.paddingTopHeight = f3;
            this.chatListViewPaddingVisibleOffset = 0;
            this.chatListViewPaddingTop = AndroidUtilities.dp(4.0f) + this.contentPaddingTop + f3 + this.blurredViewTopOffset + this.contentPanTranslation + this.bottomPanelTranslationY;
            if (this.searchExpandProgress == 0.0f || this.chatActivityEnterView.getVisibility() != 0) {
                f = 0.0f;
            } else {
                float f4 = this.chatListViewPaddingTop;
                f = this.searchExpandProgress * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f));
                this.chatListViewPaddingTop = f4 - f;
            }
            if (this.bottomPanelTranslationY == 0.0f && !this.chatActivityEnterView.panelAnimationInProgress() && (this.contentView.getLayoutParams().height < 0 || (this.contentView.getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()))) {
                this.chatListViewPaddingTop += (this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || this.inBubbleMode) ? this.contentView.getKeyboardHeight() : this.chatActivityEnterView.getEmojiPadding();
            }
            if (!this.inPreviewMode && (chatActivityEnterView = this.chatActivityEnterView) != null) {
                if (chatActivityEnterView.getAnimatedTop() != 0) {
                    translationY = this.chatListViewPaddingTop + ((this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f)) - this.chatActivityEnterView.getAnimatedTop());
                } else if (!this.chatActivityEnterView.panelAnimationInProgress()) {
                    float heightWithTopView = this.chatListViewPaddingTop + (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f));
                    this.chatListViewPaddingTop = heightWithTopView;
                    if (this.chatActivityEnterView.currentTopViewAnimation == null) {
                        translationY = heightWithTopView - this.chatListView.getTranslationY();
                    }
                }
                this.chatListViewPaddingTop = translationY;
            }
            ChatActionCell chatActionCell = this.infoTopView;
            if (chatActionCell != null) {
                chatActionCell.setTranslationY((this.chatListViewPaddingTop - AndroidUtilities.dp(30.0f)) + this.topViewOffset);
                float f5 = this.chatListViewPaddingTop;
                float f6 = this.topViewOffset;
                this.chatListViewPaddingTop = f5 + f6;
                this.chatListViewPaddingVisibleOffset = (int) (this.chatListViewPaddingVisibleOffset + f6);
            }
            ChatActionCell chatActionCell2 = this.floatingDateView;
            if (chatActionCell2 != null) {
                chatActionCell2.setTranslationY((((this.chatListView.getTranslationY() - f) + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
            }
            int measuredHeight = (!this.isInsideContainer || this.chatMode == 7) ? (this.chatListView.getMeasuredHeight() * 2) / 3 : AndroidUtilities.dp(4.0f);
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null && this.chatLayoutManager != null && this.chatAdapter != null) {
                if (recyclerListView.getPaddingTop() != measuredHeight) {
                    for (int i2 = 0; i2 < this.chatListView.getChildCount(); i2++) {
                        View childAt2 = this.chatListView.getChildAt(i2);
                        if (childAt2 instanceof ChatMessageCell) {
                            messageObject = ((ChatMessageCell) childAt2).getMessageObject();
                        } else if (childAt2 instanceof ChatActionCell) {
                            messageObject = ((ChatActionCell) childAt2).getMessageObject();
                        }
                        i = getScrollingOffsetForView(childAt2);
                    }
                    i = 0;
                    this.chatListView.setPadding(0, measuredHeight, 0, AndroidUtilities.dp(3.0f) + this.blurredViewBottomOffset + ((this.isInsideContainer && (blurredFrameLayout = this.searchContainer) != null && blurredFrameLayout.getVisibility() == 0) ? AndroidUtilities.dp(50.0f) : 0));
                    if (messageObject != null) {
                        this.chatAdapter.updateRowsSafe();
                        int indexOf = this.messages.indexOf(messageObject);
                        if (indexOf >= 0) {
                            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf, i);
                        }
                    }
                    invalidateMessagesVisiblePart();
                }
                this.chatListView.setTopGlowOffset((int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f)));
                if (f2 != this.chatListViewPaddingTop) {
                    int childCount = this.chatListView.getChildCount();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= childCount) {
                            break;
                        }
                        if (this.chatListView.getChildAdapterPosition(this.chatListView.getChildAt(i3)) == this.chatAdapter.getItemCount() - 1) {
                            float f7 = this.chatListViewPaddingTop;
                            if (childAt.getTop() > f7) {
                                this.chatListView.scrollBy(0, (int) (childAt.getTop() - f7));
                            }
                        } else {
                            i3++;
                        }
                    }
                }
                if (!isThreadChat() && !this.wasManualScroll && this.unreadMessageObject != null && this.chatListView != null && ((translateButton = this.translateButton) == null || translateButton.getVisibility() != 0)) {
                    this.chatListView.scrollBy(0, (int) (f2 - this.chatListViewPaddingTop));
                }
            }
            this.invalidateChatListViewTopPadding = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateFilteredMessages(boolean z) {
        boolean z2;
        MessageObject.GroupedMessages groupedMessages;
        TLRPC.Message message;
        TLRPC.TL_messageReactions tL_messageReactions;
        MessageObject messageObject;
        ArrayList arrayList = new ArrayList(MediaDataController.getInstance(this.currentAccount).getFoundMessageObjects());
        if (this.filteredMessagesDict == null) {
            this.filteredMessagesDict = new LongSparseArray();
        }
        LongSparseArray longSparseArray = this.filteredMessagesByDays;
        if (longSparseArray == null) {
            this.filteredMessagesByDays = new LongSparseArray();
        } else {
            longSparseArray.clear();
        }
        this.chatAdapter.filteredMessages.clear();
        this.filteredMessagesDict.clear();
        LongSparseArray longSparseArray2 = null;
        LongSparseArray longSparseArray3 = null;
        int i = 0;
        while (true) {
            z2 = true;
            if (i >= arrayList.size()) {
                break;
            }
            MessageObject messageObject2 = (MessageObject) arrayList.get(i);
            int i2 = 0;
            while (true) {
                if (i2 >= this.messages.size()) {
                    messageObject = null;
                    break;
                }
                messageObject = (MessageObject) this.messages.get(i2);
                if (messageObject.getDialogId() == messageObject2.getDialogId() && messageObject.getId() == messageObject2.getId()) {
                    break;
                }
                i2++;
            }
            if (messageObject2.stableId == 0) {
                if (messageObject == null) {
                    messageObject2.checkMediaExistance();
                } else {
                    messageObject2.mediaExists = messageObject.mediaExists;
                    messageObject2.attachPathExists = messageObject.attachPathExists;
                }
            }
            if (messageObject != null) {
                messageObject2.isSaved = messageObject.isSaved;
                if (!this.chatAdapter.isFiltered || messageObject2.stableId == 0) {
                    messageObject2.copyStableParams(messageObject);
                } else {
                    messageObject.copyStableParams(messageObject2);
                }
            } else if (messageObject2.stableId == 0) {
                int i3 = lastStableId;
                lastStableId = i3 + 1;
                messageObject2.stableId = i3;
            }
            messageObject2.isOutOwnerCached = null;
            TLRPC.Message message2 = messageObject2.messageOwner;
            if (message2 != null) {
                message2.out = true;
            }
            messageObject2.isOutOwner();
            if (messageObject2.hasValidGroupId()) {
                MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject2.getGroupIdForUse());
                if (groupedMessages2 == null) {
                    groupedMessages2 = new MessageObject.GroupedMessages();
                    groupedMessages2.reversed = this.reversed;
                    long groupId = messageObject2.getGroupId();
                    groupedMessages2.groupId = groupId;
                    this.groupedMessagesMap.put(groupId, groupedMessages2);
                } else if (longSparseArray2 == null || longSparseArray2.indexOfKey(messageObject2.getGroupId()) < 0) {
                    if (longSparseArray3 == null) {
                        longSparseArray3 = new LongSparseArray();
                    }
                    longSparseArray3.put(messageObject2.getGroupId(), groupedMessages2);
                }
                if (longSparseArray2 == null) {
                    longSparseArray2 = new LongSparseArray();
                }
                longSparseArray2.put(groupedMessages2.groupId, groupedMessages2);
                if (groupedMessages2.getPosition(messageObject2) == null) {
                    int i4 = 0;
                    while (true) {
                        if (i4 >= groupedMessages2.messages.size()) {
                            groupedMessages2.messages.add(messageObject2);
                            break;
                        } else if (groupedMessages2.messages.get(i4).getId() == messageObject2.getId()) {
                            break;
                        } else {
                            i4++;
                        }
                    }
                }
            } else if (messageObject2.getGroupIdForUse() != 0) {
                messageObject2.messageOwner.grouped_id = 0L;
                messageObject2.localSentGroupId = 0L;
            }
            this.chatAdapter.filteredMessages.add(messageObject2);
            this.filteredMessagesDict.put(messageObject2.getId(), messageObject2);
            i++;
        }
        if (longSparseArray2 != null) {
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages) longSparseArray2.valueAt(i5);
                Collections.sort(groupedMessages3.messages, new Comparator() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda56
                    @Override // java.util.Comparator
                    public final int compare(Object obj, Object obj2) {
                        int lambda$updateFilteredMessages$70;
                        lambda$updateFilteredMessages$70 = ChatActivity.lambda$updateFilteredMessages$70((MessageObject) obj, (MessageObject) obj2);
                        return lambda$updateFilteredMessages$70;
                    }
                });
                groupedMessages3.calculate();
            }
        }
        ArrayList arrayList2 = new ArrayList();
        if (this.searchingReaction != null && TextUtils.isEmpty(this.searchingQuery)) {
            for (int i6 = 0; i6 < this.messages.size(); i6++) {
                MessageObject messageObject3 = (MessageObject) this.messages.get(i6);
                if (messageObject3 != null && (message = messageObject3.messageOwner) != null && (tL_messageReactions = message.reactions) != null && tL_messageReactions.reactions_as_tags) {
                    int i7 = 0;
                    while (true) {
                        if (i7 >= messageObject3.messageOwner.reactions.results.size()) {
                            break;
                        } else if (this.searchingReaction.isSame(messageObject3.messageOwner.reactions.results.get(i7).reaction)) {
                            arrayList2.add(messageObject3);
                            break;
                        } else {
                            i7++;
                        }
                    }
                }
            }
        }
        for (int i8 = 0; i8 < arrayList2.size(); i8++) {
            MessageObject messageObject4 = (MessageObject) arrayList2.get(i8);
            if (!this.filteredMessagesDict.containsKey(messageObject4.getId())) {
                messageObject4.isOutOwnerCached = null;
                TLRPC.Message message3 = messageObject4.messageOwner;
                if (message3 != null) {
                    message3.out = true;
                }
                this.chatAdapter.filteredMessages.add(messageObject4);
                this.filteredMessagesDict.put(messageObject4.getId(), messageObject4);
            }
        }
        int i9 = 0;
        while (i9 < this.chatAdapter.filteredMessages.size()) {
            MessageObject messageObject5 = (MessageObject) this.chatAdapter.filteredMessages.get(i9);
            if (messageObject5.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject5.getGroupId())) != null) {
                for (int size = groupedMessages.messages.size() - 1; size >= 0; size--) {
                    MessageObject messageObject6 = groupedMessages.messages.get(size);
                    if (messageObject6 != messageObject5 && !this.filteredMessagesDict.containsKey(messageObject6.getId())) {
                        this.chatAdapter.filteredMessages.add(i9, messageObject6);
                        this.filteredMessagesDict.put(messageObject6.getId(), messageObject6);
                        i9++;
                    }
                }
            }
            i9++;
        }
        Collections.sort(this.chatAdapter.filteredMessages, new Comparator() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda57
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$updateFilteredMessages$71;
                lambda$updateFilteredMessages$71 = ChatActivity.lambda$updateFilteredMessages$71((MessageObject) obj, (MessageObject) obj2);
                return lambda$updateFilteredMessages$71;
            }
        });
        MessageObject messageObject7 = null;
        int i10 = 0;
        while (i10 < this.chatAdapter.filteredMessages.size()) {
            MessageObject messageObject8 = (MessageObject) this.chatAdapter.filteredMessages.get(i10);
            if (this.reversed && messageObject8 != null && i10 == 0) {
                putFilteredDate(i10, messageObject8);
                i10++;
            }
            if (!this.reversed && messageObject7 != null && messageObject8.dateKeyInt != messageObject7.dateKeyInt) {
                putFilteredDate(i10, messageObject7);
                i10++;
            }
            ArrayList arrayList3 = (ArrayList) this.filteredMessagesByDays.get(messageObject8.dateKeyInt);
            if (arrayList3 == null) {
                LongSparseArray longSparseArray4 = this.filteredMessagesByDays;
                long j = messageObject8.dateKeyInt;
                ArrayList arrayList4 = new ArrayList();
                longSparseArray4.put(j, arrayList4);
                arrayList3 = arrayList4;
            }
            arrayList3.add(messageObject8);
            if (this.reversed && messageObject7 != null && messageObject8.dateKeyInt != messageObject7.dateKeyInt) {
                putFilteredDate(i10, messageObject8);
                i10++;
            }
            if (!this.reversed && i10 >= this.chatAdapter.filteredMessages.size() - 1) {
                putFilteredDate(this.chatAdapter.filteredMessages.size(), messageObject8);
                i10++;
            }
            i10++;
            messageObject7 = messageObject8;
        }
        this.chatAdapter.filteredEndReached = MediaDataController.getInstance(this.currentAccount).searchEndReached();
        if (z) {
            this.chatAdapter.updateRowsSafe();
            this.chatAdapter.notifyDataSetChanged(true);
            if (this.chatAdapter.isFiltered ? !getMediaDataController().isSearchLoading() || !this.chatAdapter.filteredMessages.isEmpty() : !this.loading || !this.messages.isEmpty() || this.chatAdapter.botInfoRow >= 0) {
                z2 = false;
            }
            showProgressView(z2);
            if (this.chatListView != null) {
                createEmptyView(false);
                if (this.chatAdapter.isFiltered ? getMediaDataController().isSearchLoading() || !this.chatAdapter.filteredMessages.isEmpty() : this.loading || !this.messages.isEmpty() || this.chatAdapter.botInfoRow >= 0) {
                    this.emptyViewContainer.setVisibility(8);
                    this.chatListView.setEmptyView(null);
                    return;
                }
                this.chatListView.setEmptyView(this.emptyViewContainer);
                this.chatListView.checkIfEmpty();
            }
        }
    }

    private void updateGreetInfo() {
        TLRPC.UserFull userFull;
        showGreetInfo((getDialogId() == getUserConfig().getClientUserId() || (userFull = this.userInfo) == null || userFull.business_intro == null || (userFull.contact_require_premium && !getUserConfig().isPremium())) ? false : true);
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:42:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateInfoTopView(boolean z) {
        CharSequence charSequence;
        View.OnClickListener onClickListener;
        if (this.contentView == null) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        if (this.currentChat != null && this.chatInviterId != 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(this.dialog_id);
            boolean z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
            boolean z3 = notificationsSettings.getBoolean("dialog_bar_report" + this.dialog_id, false);
            boolean z4 = notificationsSettings.getBoolean("dialog_bar_block" + this.dialog_id, false);
            if (z2 && (z3 || z4)) {
                TLRPC.User user = getMessagesController().getUser(Long.valueOf(this.chatInviterId));
                if (user != null) {
                    charSequence = MessageObject.replaceWithLink(LocaleController.getString((!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) ? R.string.ActionUserInvitedToGroup : R.string.ActionUserInvitedToChannel), "un1", user);
                    onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda68
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.this.lambda$updateInfoTopView$93(view);
                        }
                    };
                    if (charSequence == null) {
                        Animator animator = this.infoTopViewAnimator;
                        if (animator != null) {
                            animator.cancel();
                        }
                        if (this.infoTopView == null) {
                            ChatActionCell chatActionCell = new ChatActionCell(this.contentView.getContext(), false, this.themeDelegate);
                            this.infoTopView = chatActionCell;
                            chatActionCell.setCustomText(charSequence);
                            this.infoTopView.setInvalidateColors(true);
                            this.infoTopView.setOnClickListener(onClickListener);
                            this.contentView.addView(this.infoTopView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 0.0f, 0.0f, 0.0f));
                        }
                        if (!z) {
                            this.infoTopView.setTag(1);
                            this.topViewOffset = AndroidUtilities.dp(30.0f);
                            invalidateChatListViewTopPadding();
                            return;
                        } else if (this.infoTopView.getTag() == null) {
                            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                            this.infoTopView.setTag(1);
                            this.infoTopView.setAlpha(0.0f);
                            final ChatActionCell chatActionCell2 = this.infoTopView;
                            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda69
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    ChatActivity.this.lambda$updateInfoTopView$94(chatActionCell2, valueAnimator);
                                }
                            });
                            ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.69
                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator2) {
                                    ChatActivity.this.topViewOffset = AndroidUtilities.dp(30.0f);
                                    ChatActivity.this.invalidateChatListViewTopPadding();
                                }
                            });
                            ofFloat.setDuration(150L);
                            this.infoTopViewAnimator = ofFloat;
                            ofFloat.start();
                            return;
                        } else {
                            return;
                        }
                    }
                    return;
                }
            } else {
                hideInfoView();
            }
        }
        charSequence = null;
        onClickListener = null;
        if (charSequence == null) {
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat == null) {
            SecretMediaViewer secretMediaViewer = SecretMediaViewer.getInstance();
            MessageObject currentMessageObject = secretMediaViewer.getCurrentMessageObject();
            if (currentMessageObject == null || currentMessageObject.isOut()) {
                return;
            }
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, secretMediaViewer.getOpenTime(), secretMediaViewer.getCloseTime(), this.currentUser, null, null, currentMessageObject.getId());
            return;
        }
        ArrayList<Long> arrayList = new ArrayList<>();
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                MessageObject messageObject = childAt instanceof ChatMessageCell ? ((ChatMessageCell) childAt).getMessageObject() : null;
                if (messageObject != null && messageObject.getId() < 0) {
                    long j = messageObject.messageOwner.random_id;
                    if (j != 0) {
                        arrayList.add(Long.valueOf(j));
                    }
                }
            }
        }
        MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, arrayList, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMessageAnimated(final MessageObject messageObject, final boolean z) {
        if (this.chatAdapter == null) {
            return;
        }
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$updateMessageAnimated$265(messageObject, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: updateMessageAnimatedInternal */
    public void lambda$updateMessageAnimated$265(MessageObject messageObject, boolean z) {
        if (this.chatAdapter == null || this.fragmentView == null) {
            return;
        }
        MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
        if (groupedMessages != null) {
            ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
            if (chatListItemAnimator != null) {
                chatListItemAnimator.groupWillChanged(groupedMessages);
            }
            for (int i = 0; i < groupedMessages.messages.size(); i++) {
                groupedMessages.messages.get(i).forceUpdate = true;
                if (z) {
                    groupedMessages.messages.get(i).reactionsChanged = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged(true);
            return;
        }
        MessageObject messageObject2 = (MessageObject) this.messagesDict[0].get(messageObject.getId());
        if (z) {
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
        }
        if (!this.chatAdapter.isFiltered) {
            int indexOf = this.messages.indexOf(messageObject2);
            if (indexOf >= 0) {
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                chatActivityAdapter.notifyItemChanged(chatActivityAdapter.messagesStartRow + indexOf);
                return;
            }
            return;
        }
        LongSparseArray longSparseArray = this.filteredMessagesDict;
        MessageObject messageObject3 = longSparseArray != null ? (MessageObject) longSparseArray.get(messageObject.getId()) : null;
        int indexOf2 = this.chatAdapter.filteredMessages.indexOf(messageObject3);
        if (messageObject3 != null && z) {
            messageObject3.forceUpdate = true;
            messageObject3.reactionsChanged = true;
        }
        if (indexOf2 >= 0) {
            ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
            chatActivityAdapter2.notifyItemChanged(chatActivityAdapter2.messagesStartRow + indexOf2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMessageListAccessibilityVisibility() {
        ActionBarPopupWindow actionBarPopupWindow;
        if (this.currentEncryptedChat != null) {
            return;
        }
        RecyclerListView recyclerListView = this.chatListView;
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        recyclerListView.setImportantForAccessibility(((mentionsContainerView == null || !mentionsContainerView.isOpen()) && ((actionBarPopupWindow = this.scrimPopupWindow) == null || !actionBarPopupWindow.isShowing())) ? 0 : 4);
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0110  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0155 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean updateMessageTranslation(MessageObject messageObject) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject2;
        boolean z;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject3;
        MessageObject messageObject4;
        int i;
        if (messageObject == null || messageObject.messageOwner == null) {
            return false;
        }
        boolean z2 = false;
        for (MessageObject messageObject5 : this.pinnedMessageObjects.values()) {
            if (messageObject5 != null && messageObject5.getId() == messageObject.getId()) {
                TLRPC.Message message = messageObject5.messageOwner;
                TLRPC.Message message2 = messageObject.messageOwner;
                message.translatedText = message2.translatedText;
                message.translatedToLanguage = message2.translatedToLanguage;
                if (messageObject5.updateTranslation(true)) {
                    lambda$updateMessagesVisiblePart$137(true, 1);
                    z2 = true;
                }
            }
        }
        if (this.chatListView == null) {
            return z2;
        }
        ArrayList arrayList = new ArrayList();
        for (int i2 = 0; i2 < this.chatListView.getChildCount(); i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((childAt instanceof ChatMessageCell) && (messageObject2 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null) {
                if (messageObject2.getId() == messageObject.getId()) {
                    TLRPC.Message message3 = messageObject2.messageOwner;
                    TLRPC.Message message4 = messageObject.messageOwner;
                    message3.translatedText = message4.translatedText;
                    message3.translatedToLanguage = message4.translatedToLanguage;
                    if (messageObject2.updateTranslation(false)) {
                        ArrayList arrayList2 = (ArrayList) this.replyMessageOwners.get(messageObject2.getId());
                        if (arrayList2 != null) {
                            updateMessagesReplyTranslation(arrayList2, messageObject);
                        }
                        z = true;
                        groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null && !arrayList.contains(Long.valueOf(groupedMessages.groupId))) {
                            for (i = 0; i < groupedMessages.messages.size(); i++) {
                                MessageObject messageObject6 = groupedMessages.messages.get(i);
                                if (messageObject6 != null && messageObject6.updateTranslation(false)) {
                                    z = true;
                                }
                            }
                            arrayList.add(Long.valueOf(groupedMessages.groupId));
                        }
                        messageObject3 = messageObject2.replyMessageObject;
                        if (messageObject3 != null && messageObject3.getId() == messageObject.getId() && messageObject2.replyMessageObject.getDialogId() == messageObject.getDialogId()) {
                            messageObject4 = messageObject2.replyMessageObject;
                            TLRPC.Message message5 = messageObject4.messageOwner;
                            TLRPC.Message message6 = messageObject.messageOwner;
                            message5.translatedText = message6.translatedText;
                            message5.translatedToLanguage = message6.translatedToLanguage;
                            if (messageObject4.updateTranslation(false)) {
                                z = true;
                            }
                        }
                        if (!z) {
                            messageObject2.forceUpdate = true;
                            chatMessageCell.setMessageObject(messageObject2, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            if (groupedMessages != null) {
                                ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                                if (chatListItemAnimator != null) {
                                    chatListItemAnimator.groupWillChanged(groupedMessages);
                                }
                                for (int i3 = 0; i3 < groupedMessages.messages.size(); i3++) {
                                    groupedMessages.messages.get(i3).forceUpdate = true;
                                }
                                this.chatAdapter.notifyDataSetChanged(true);
                            } else {
                                this.chatAdapter.updateRowAtPosition(this.chatListView.getChildAdapterPosition(childAt));
                            }
                            z2 = true;
                        }
                    }
                }
                z = false;
                groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    while (i < groupedMessages.messages.size()) {
                    }
                    arrayList.add(Long.valueOf(groupedMessages.groupId));
                }
                messageObject3 = messageObject2.replyMessageObject;
                if (messageObject3 != null) {
                    messageObject4 = messageObject2.replyMessageObject;
                    TLRPC.Message message52 = messageObject4.messageOwner;
                    TLRPC.Message message62 = messageObject.messageOwner;
                    message52.translatedText = message62.translatedText;
                    message52.translatedToLanguage = message62.translatedToLanguage;
                    if (messageObject4.updateTranslation(false)) {
                    }
                }
                if (!z) {
                }
            }
        }
        return z2;
    }

    private boolean updateMessagesReplyTranslation(ArrayList arrayList, MessageObject messageObject) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject2;
        MessageObject messageObject3;
        boolean z = false;
        for (int i = 0; i < this.chatListView.getChildCount(); i++) {
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (messageObject2 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && arrayList.contains(Integer.valueOf(messageObject2.getId())) && (messageObject3 = messageObject2.replyMessageObject) != null && messageObject3.getId() == messageObject.getId()) {
                MessageObject messageObject4 = messageObject2.replyMessageObject;
                TLRPC.Message message = messageObject4.messageOwner;
                TLRPC.Message message2 = messageObject.messageOwner;
                message.translatedText = message2.translatedText;
                message.translatedToLanguage = message2.translatedToLanguage;
                if (messageObject4.updateTranslation(false)) {
                    z = true;
                    messageObject2.forceUpdate = true;
                    chatMessageCell.setMessageObject(messageObject2, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    this.chatAdapter.updateRowAtPosition(this.chatListView.getChildAdapterPosition(childAt));
                }
            }
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonVisibility(boolean z) {
        ValueAnimator valueAnimator;
        AnimatorListenerAdapter animatorListenerAdapter;
        if (this.pagedownButton == null) {
            return;
        }
        if (!this.canShowPagedownButton || this.textSelectionHelper.isInSelectionMode() || this.chatActivityEnterView.isRecordingAudioVideo() || this.isInsideContainer || (this.searching && !getMediaDataController().searchResultMessages.isEmpty())) {
            this.returnToMessageId = 0;
            this.newUnreadMessageCount = 0;
            if (this.pagedownButton.getTag() == null) {
                return;
            }
            this.pagedownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.pagedownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            if (!z) {
                this.pagedownButtonEnterProgress = 0.0f;
                this.pagedownButton.setVisibility(4);
                return;
            }
            this.pagedownButton.setVisibility(0);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 0.0f);
            this.pagedownButtonAnimation = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda164
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                    ChatActivity.this.lambda$updatePagedownButtonVisibility$144(valueAnimator3);
                }
            });
            valueAnimator = this.pagedownButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.95
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.pagedownButtonEnterProgress = 0.0f;
                    ChatActivity.this.pagedownButton.setVisibility(4);
                    ChatActivity.this.contentView.invalidate();
                }
            };
        } else {
            if (z && (this.openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < this.openAnimationStartTime + 150)) {
                z = false;
            }
            this.pagedownButtonShowedByScroll = false;
            if (this.pagedownButton.getTag() != null) {
                return;
            }
            ValueAnimator valueAnimator3 = this.pagedownButtonAnimation;
            if (valueAnimator3 != null) {
                valueAnimator3.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            this.pagedownButton.setTag(1);
            if (!z) {
                this.pagedownButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                this.pagedownButton.setVisibility(0);
                return;
            }
            this.pagedownButton.setVisibility(0);
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 1.0f);
            this.pagedownButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda163
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator4) {
                    ChatActivity.this.lambda$updatePagedownButtonVisibility$143(valueAnimator4);
                }
            });
            valueAnimator = this.pagedownButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.94
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.pagedownButtonEnterProgress = 1.0f;
                    ChatActivity.this.contentView.invalidate();
                }
            };
        }
        valueAnimator.addListener(animatorListenerAdapter);
        this.pagedownButtonAnimation.setDuration(200L);
        this.pagedownButtonAnimation.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonsPosition() {
        float animatedTop = this.chatActivityEnterView.getAnimatedTop() + this.chatActivityEnterView.getTranslationY() + (this.chatActivityEnterTopView.getVisibility() == 0 ? this.chatActivityEnterTopView.getTranslationY() : 0.0f);
        FrameLayout frameLayout = this.pagedownButton;
        if (frameLayout != null) {
            frameLayout.setTranslationY((AndroidUtilities.dp(100.0f) * (1.0f - this.pagedownButtonEnterProgress)) + animatedTop);
        }
        FrameLayout frameLayout2 = this.searchUpButton;
        if (frameLayout2 != null) {
            frameLayout2.setTranslationY((animatedTop - (AndroidUtilities.dp(51.33f) * this.searchUpDownEnterProgress)) + (AndroidUtilities.dp(100.0f) * (1.0f - this.searchUpDownEnterProgress)));
        }
        FrameLayout frameLayout3 = this.searchDownButton;
        if (frameLayout3 != null) {
            frameLayout3.setTranslationY((AndroidUtilities.dp(100.0f) * (1.0f - this.searchUpDownEnterProgress)) + animatedTop);
        }
        FrameLayout frameLayout4 = this.mentiondownButton;
        if (frameLayout4 != null) {
            frameLayout4.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.mentionsButtonEnterProgress)) + animatedTop) - ((AndroidUtilities.dp(72.0f) * this.pagedownButtonEnterProgress) * this.mentionsButtonEnterProgress));
        }
        FrameLayout frameLayout5 = this.reactionsMentiondownButton;
        if (frameLayout5 != null) {
            frameLayout5.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.reactionsMentionButtonEnterProgress)) + animatedTop) - ((((AndroidUtilities.dp(50.0f) + (AndroidUtilities.dp(22.0f) * this.pagedownButtonCounter.getEnterProgress())) * this.pagedownButtonEnterProgress) + (AndroidUtilities.dp(72.0f) * this.mentionsButtonEnterProgress)) * this.reactionsMentionButtonEnterProgress));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.setTranslationY(animatedTop);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x0156  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x015a  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x009a  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x00bb  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x00be  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x00ce  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x00e2  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x00e5  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x00f9  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0109  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x011d  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0134  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0144  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0148  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePinnedListButton(boolean z) {
        boolean z2;
        boolean z3;
        final boolean z4;
        ImageView imageView;
        if ((!isThreadChat() || this.isTopic) && this.pinnedListButton != null) {
            boolean z5 = !this.fragmentOpened ? false : z;
            boolean z6 = this.pinnedMessageIds.size() > 1 && !this.pinnedMessageButtonShown;
            boolean z7 = this.pinnedListButton.getTag() != null;
            boolean z8 = this.pinnedProgress.getTag() != null;
            boolean z9 = this.closePinned.getTag() != null;
            boolean z10 = (z6 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            boolean z11 = (!z6 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            final boolean z12 = this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
            if (z7 == z6 && z8 == z12 && z9 == z10) {
                z2 = z5;
            } else {
                AnimatorSet animatorSet = this.pinnedListAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.pinnedListAnimator = null;
                }
                if (z5) {
                    if (z6) {
                        imageView = this.pinnedListButton;
                    } else {
                        if (z10) {
                            imageView = this.closePinned;
                        }
                        if (z12) {
                            this.pinnedProgress.setVisibility(0);
                            this.pinnedProgress.setAlpha(0.0f);
                            this.pinnedProgress.setScaleX(0.4f);
                            this.pinnedProgress.setScaleY(0.4f);
                        }
                        AnimatorSet animatorSet2 = new AnimatorSet();
                        this.pinnedListAnimator = animatorSet2;
                        ImageView imageView2 = this.pinnedListButton;
                        Property property = View.ALPHA;
                        ObjectAnimator ofFloat = ObjectAnimator.ofFloat(imageView2, property, !z11 ? 1.0f : 0.0f);
                        ImageView imageView3 = this.pinnedListButton;
                        Property property2 = View.SCALE_X;
                        ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(imageView3, property2, !z11 ? 1.0f : 0.4f);
                        ImageView imageView4 = this.pinnedListButton;
                        Property property3 = View.SCALE_Y;
                        z2 = z5;
                        z3 = z6;
                        boolean z13 = z10;
                        final boolean z14 = z11;
                        animatorSet2.playTogether(ofFloat, ofFloat2, ObjectAnimator.ofFloat(imageView4, property3, !z11 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.closePinned, property, !z10 ? 1.0f : 0.0f), ObjectAnimator.ofFloat(this.closePinned, property2, !z10 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.closePinned, property3, !z10 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.pinnedProgress, property, z12 ? 0.0f : 1.0f), ObjectAnimator.ofFloat(this.pinnedProgress, property2, z12 ? 0.4f : 1.0f), ObjectAnimator.ofFloat(this.pinnedProgress, property3, z12 ? 0.4f : 1.0f));
                        this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                        this.pinnedListAnimator.setDuration(360L);
                        z4 = z13;
                        this.pinnedListAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.113
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                ChatActivity.this.pinnedListAnimator = null;
                                ChatActivity.this.closePinned.setVisibility(z4 ? 0 : 4);
                                ChatActivity.this.pinnedListButton.setVisibility(z14 ? 0 : 4);
                                ChatActivity.this.pinnedProgress.setVisibility(z12 ? 0 : 4);
                            }
                        });
                        this.pinnedListAnimator.start();
                    }
                    imageView.setVisibility(0);
                    if (z12) {
                    }
                    AnimatorSet animatorSet22 = new AnimatorSet();
                    this.pinnedListAnimator = animatorSet22;
                    ImageView imageView22 = this.pinnedListButton;
                    Property property4 = View.ALPHA;
                    ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(imageView22, property4, !z11 ? 1.0f : 0.0f);
                    ImageView imageView32 = this.pinnedListButton;
                    Property property22 = View.SCALE_X;
                    ObjectAnimator ofFloat22 = ObjectAnimator.ofFloat(imageView32, property22, !z11 ? 1.0f : 0.4f);
                    ImageView imageView42 = this.pinnedListButton;
                    Property property32 = View.SCALE_Y;
                    z2 = z5;
                    z3 = z6;
                    boolean z132 = z10;
                    final boolean z142 = z11;
                    animatorSet22.playTogether(ofFloat3, ofFloat22, ObjectAnimator.ofFloat(imageView42, property32, !z11 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.closePinned, property4, !z10 ? 1.0f : 0.0f), ObjectAnimator.ofFloat(this.closePinned, property22, !z10 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.closePinned, property32, !z10 ? 1.0f : 0.4f), ObjectAnimator.ofFloat(this.pinnedProgress, property4, z12 ? 0.0f : 1.0f), ObjectAnimator.ofFloat(this.pinnedProgress, property22, z12 ? 0.4f : 1.0f), ObjectAnimator.ofFloat(this.pinnedProgress, property32, z12 ? 0.4f : 1.0f));
                    this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    this.pinnedListAnimator.setDuration(360L);
                    z4 = z132;
                    this.pinnedListAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.113
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.pinnedListAnimator = null;
                            ChatActivity.this.closePinned.setVisibility(z4 ? 0 : 4);
                            ChatActivity.this.pinnedListButton.setVisibility(z142 ? 0 : 4);
                            ChatActivity.this.pinnedProgress.setVisibility(z12 ? 0 : 4);
                        }
                    });
                    this.pinnedListAnimator.start();
                } else {
                    z2 = z5;
                    z3 = z6;
                    z4 = z10;
                    boolean z15 = z11;
                    this.closePinned.setAlpha(z4 ? 1.0f : 0.0f);
                    this.closePinned.setScaleX(z4 ? 1.0f : 0.4f);
                    this.closePinned.setScaleY(z4 ? 1.0f : 0.4f);
                    this.closePinned.setVisibility(z4 ? 0 : 4);
                    this.pinnedListButton.setAlpha(z15 ? 1.0f : 0.0f);
                    this.pinnedListButton.setScaleX(z15 ? 1.0f : 0.4f);
                    this.pinnedListButton.setScaleY(z15 ? 1.0f : 0.4f);
                    this.pinnedListButton.setVisibility(z15 ? 0 : 4);
                    this.pinnedProgress.setAlpha(z12 ? 1.0f : 0.0f);
                    this.pinnedProgress.setScaleX(z12 ? 1.0f : 0.4f);
                    this.pinnedProgress.setScaleY(z12 ? 1.0f : 0.4f);
                    this.pinnedProgress.setVisibility(z12 ? 0 : 8);
                }
                this.closePinned.setTag(z4 ? 1 : null);
                this.pinnedListButton.setTag(z3 ? 1 : null);
                this.pinnedProgress.setTag(z12 ? 1 : null);
            }
            if (this.pinnedLineView != null) {
                if (!isThreadChat() || this.isTopic) {
                    this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$-CC.reverseOrder()), this.pinnedMessageIds.size(), z2);
                } else {
                    this.pinnedLineView.set(0, 1, false);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePinnedMessageView(boolean z) {
        lambda$updateMessagesVisiblePart$137(z, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:207:0x043b, code lost:
        if ((r5 instanceof org.telegram.tgnet.TLRPC.TL_peerUser) != false) goto L337;
     */
    /* JADX WARN: Code restructure failed: missing block: B:299:0x05d8, code lost:
        if (r3.messageOwner != null) goto L326;
     */
    /* JADX WARN: Code restructure failed: missing block: B:301:0x05db, code lost:
        r5 = r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:308:0x0605, code lost:
        if (r3.messageOwner != null) goto L326;
     */
    /* JADX WARN: Code restructure failed: missing block: B:309:0x0607, code lost:
        r5 = r3.replaceAnimatedEmoji(r6, r7.getPaint().getFontMetricsInt());
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x00b2, code lost:
        if (((java.lang.Integer) r31.pinnedMessageIds.get(0)).intValue() != r7.getInt("pin_" + r31.dialog_id, 0)) goto L17;
     */
    /* JADX WARN: Removed duplicated region for block: B:184:0x03e5  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x03e7  */
    /* JADX WARN: Removed duplicated region for block: B:263:0x04fb  */
    /* JADX WARN: Removed duplicated region for block: B:283:0x054a  */
    /* JADX WARN: Removed duplicated region for block: B:284:0x0562  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:312:0x0617  */
    /* JADX WARN: Removed duplicated region for block: B:317:0x062c  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0068  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0075  */
    /* JADX WARN: Removed duplicated region for block: B:357:0x07a6  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x07be  */
    /* JADX WARN: Removed duplicated region for block: B:362:0x07ea  */
    /* JADX WARN: Removed duplicated region for block: B:380:0x0881  */
    /* JADX WARN: Removed duplicated region for block: B:383:0x08ac  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x0944  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x0962  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x0a43  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x0b7c  */
    /* JADX WARN: Removed duplicated region for block: B:431:0x0b8e  */
    /* JADX WARN: Removed duplicated region for block: B:446:0x0be6  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x0bf1  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x008f  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x0cab  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x0d5e  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ba  */
    /* JADX WARN: Removed duplicated region for block: B:500:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00d5  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x00dc A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x00dd  */
    /* JADX WARN: Type inference failed for: r5v25 */
    /* JADX WARN: Type inference failed for: r5v26, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r5v34 */
    /* renamed from: updatePinnedMessageView */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateMessagesVisiblePart$137(boolean z, int i) {
        final MessageObject messageObject;
        int i2;
        boolean z2;
        ActionBar actionBar;
        BlurredFrameLayout blurredFrameLayout;
        char c;
        int i3;
        boolean z3;
        PinnedMessageButton pinnedMessageButton;
        TLRPC.PhotoSize photoSize;
        int i4;
        FrameLayout.LayoutParams layoutParams;
        BackupImageView backupImageView;
        int dp;
        boolean z4;
        ?? r5;
        String string;
        int i5;
        boolean z5;
        TLRPC.Message message;
        TLRPC.MessageMedia messageMedia;
        int i6;
        CharSequence charSequence;
        CharSequence replaceEmoji;
        int i7;
        int i8;
        float f;
        float f2;
        NumberTextView numberTextView;
        Integer num;
        float f3;
        final boolean z6;
        char c2;
        float f4;
        boolean z7;
        boolean z8;
        int i9;
        char c3;
        final BackupImageView backupImageView2;
        int i10;
        char c4;
        ObjectAnimator ofFloat;
        int i11;
        int i12;
        int i13;
        char c5;
        TLRPC.Peer peer;
        long j;
        TLRPC.User user;
        Long l;
        TLRPC.Chat chat;
        Long valueOf;
        String str;
        TLRPC.Peer peer2;
        TLRPC.PhotoSize closestPhotoSizeWithSize;
        if (this.currentEncryptedChat != null || this.chatMode != 0) {
            return;
        }
        if (!isThreadChat() || !this.threadMessageVisible) {
            if (!isThreadChat() || this.isTopic) {
                if (this.currentPinnedMessageId != 0 && !this.pinnedMessageIds.isEmpty()) {
                    messageObject = (MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
                    if (messageObject == null) {
                        messageObject = (MessageObject) this.messagesDict[0].get(this.currentPinnedMessageId);
                    }
                    i2 = this.currentPinnedMessageId;
                    final TLRPC.KeyboardButton pinnedButton = pinnedButton(messageObject);
                    this.pinnedMessageButtonShown = pinnedButton != null;
                    SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                    if (this.threadMessageObject != null || this.isTopic) {
                        if ((this.chatInfo == null || this.userInfo != null) && i2 != 0) {
                            if (!this.pinnedMessageIds.isEmpty()) {
                            }
                        }
                        z2 = hidePinnedMessageView(z);
                        if (z2) {
                            checkListViewPaddings();
                            return;
                        }
                        return;
                    }
                    if (!isReport() && ((actionBar = this.actionBar) == null || (!actionBar.isActionModeShowed() && !this.actionBar.isSearchFieldVisible()))) {
                        if (this.pinnedMessageView != null) {
                            createPinnedMessageView();
                        } else {
                            updatePinnedListButton(z);
                        }
                        blurredFrameLayout = this.pinnedMessageView;
                        if (blurredFrameLayout != null) {
                            return;
                        }
                        if (messageObject != null) {
                            if (blurredFrameLayout.getTag() != null) {
                                this.pinnedMessageView.setTag(null);
                                AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                                if (animatorSet != null) {
                                    animatorSet.cancel();
                                    this.pinnedMessageViewAnimator = null;
                                }
                                if (z) {
                                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, 0.0f);
                                    ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity.114
                                        int position = -1;

                                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                        public void onAnimationUpdate(ValueAnimator valueAnimator) {
                                            ChatActivity.this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                                            ChatActivity.this.invalidateChatListViewTopPadding();
                                            ChatActivity.this.invalidateMessagesVisiblePart();
                                        }
                                    });
                                    this.pinnedMessageView.setVisibility(0);
                                    AnimatorSet animatorSet2 = new AnimatorSet();
                                    this.pinnedMessageViewAnimator = animatorSet2;
                                    animatorSet2.playTogether(ofFloat2);
                                    this.pinnedMessageViewAnimator.setDuration(200L);
                                    this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.115
                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationCancel(Animator animator) {
                                            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                                                return;
                                            }
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }

                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationEnd(Animator animator) {
                                            if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                                                return;
                                            }
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }
                                    });
                                    this.pinnedMessageViewAnimator.start();
                                } else {
                                    this.pinnedMessageEnterOffset = 0.0f;
                                    invalidateChatListViewTopPadding();
                                    invalidateMessagesVisiblePart();
                                    this.pinnedMessageView.setVisibility(0);
                                }
                                z3 = true;
                            } else {
                                z3 = false;
                            }
                            int i14 = 0;
                            while (true) {
                                AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
                                if (i14 >= animatorSetArr.length) {
                                    break;
                                }
                                AnimatorSet animatorSet3 = animatorSetArr[i14];
                                if (animatorSet3 != null) {
                                    animatorSet3.cancel();
                                    this.pinnedNextAnimation[i14] = null;
                                }
                                i14++;
                            }
                            this.setPinnedTextTranslationX = false;
                            final TrackingWidthSimpleTextView trackingWidthSimpleTextView = this.pinnedNameTextView[i != 0 ? (char) 1 : (char) 0];
                            final SimpleTextView simpleTextView = this.pinnedMessageTextView[i != 0 ? (char) 1 : (char) 0];
                            final PinnedMessageButton pinnedMessageButton2 = this.pinnedMessageButton[i != 0 ? (char) 1 : (char) 0];
                            pinnedMessageButton2.setVisibility(pinnedButton != null ? 0 : 8);
                            this.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnClickListener(null);
                            this.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnLongClickListener(null);
                            if (pinnedButton == null) {
                                pinnedMessageButton2.setText((CharSequence) null);
                                pinnedMessageButton2.setOnClickListener(null);
                            } else {
                                CharSequence spannableString = new SpannableString(pinnedButton.text);
                                if ((pinnedButton instanceof TLRPC.TL_keyboardButtonBuy) && (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaInvoice)) {
                                    spannableString = StarsIntroActivity.replaceStars(spannableString);
                                }
                                pinnedMessageButton2.setText(Emoji.replaceEmoji(spannableString, pinnedMessageButton2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false));
                                pinnedMessageButton2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda180
                                    @Override // android.view.View.OnClickListener
                                    public final void onClick(View view) {
                                        ChatActivity.this.lambda$updatePinnedMessageView$206(pinnedButton, messageObject, view);
                                    }
                                });
                                pinnedMessageButton2.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda181
                                    @Override // android.view.View.OnLongClickListener
                                    public final boolean onLongClick(View view) {
                                        boolean lambda$updatePinnedMessageView$207;
                                        lambda$updatePinnedMessageView$207 = ChatActivity.this.lambda$updatePinnedMessageView$207(pinnedButton, messageObject, pinnedMessageButton2, view);
                                        return lambda$updatePinnedMessageView$207;
                                    }
                                });
                            }
                            pinnedMessageButton2.measure(View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(28.0f), 1073741824));
                            if (simpleTextView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                                ((ViewGroup.MarginLayoutParams) simpleTextView.getLayoutParams()).rightMargin = pinnedButton == null ? AndroidUtilities.dp(44.0f) : pinnedMessageButton2.getMeasuredWidth() + AndroidUtilities.dp(22.0f);
                            }
                            if (trackingWidthSimpleTextView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                                ((ViewGroup.MarginLayoutParams) trackingWidthSimpleTextView.getLayoutParams()).rightMargin = pinnedButton == null ? AndroidUtilities.dp(44.0f) : AndroidUtilities.dp(22.0f) + pinnedMessageButton2.getMeasuredWidth();
                            }
                            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.pinnedNameTextView[0].getLayoutParams();
                            FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) this.pinnedNameTextView[1].getLayoutParams();
                            FrameLayout.LayoutParams layoutParams4 = (FrameLayout.LayoutParams) this.pinnedCounterTextView.getLayoutParams();
                            FrameLayout.LayoutParams layoutParams5 = (FrameLayout.LayoutParams) this.pinnedMessageTextView[0].getLayoutParams();
                            FrameLayout.LayoutParams layoutParams6 = (FrameLayout.LayoutParams) this.pinnedMessageTextView[1].getLayoutParams();
                            TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(320.0f));
                            boolean z9 = z3;
                            TLRPC.PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(40.0f));
                            TLObject tLObject = messageObject.photoThumbsObject2;
                            if (closestPhotoSizeWithSize2 == null) {
                                if (messageObject.mediaExists) {
                                    closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                                    if (closestPhotoSizeWithSize != null) {
                                        i4 = closestPhotoSizeWithSize.size;
                                        TLRPC.PhotoSize photoSize2 = closestPhotoSizeWithSize;
                                        TLRPC.PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                                        tLObject = messageObject.photoThumbsObject;
                                        pinnedMessageButton = pinnedMessageButton2;
                                        photoSize = closestPhotoSizeWithSize4;
                                        closestPhotoSizeWithSize2 = photoSize2;
                                    }
                                } else {
                                    closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(320.0f));
                                }
                                i4 = 0;
                                TLRPC.PhotoSize photoSize22 = closestPhotoSizeWithSize;
                                TLRPC.PhotoSize closestPhotoSizeWithSize42 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                                tLObject = messageObject.photoThumbsObject;
                                pinnedMessageButton = pinnedMessageButton2;
                                photoSize = closestPhotoSizeWithSize42;
                                closestPhotoSizeWithSize2 = photoSize22;
                            } else {
                                pinnedMessageButton = pinnedMessageButton2;
                                photoSize = closestPhotoSizeWithSize3;
                                i4 = 0;
                            }
                            if (closestPhotoSizeWithSize2 == photoSize) {
                                photoSize = null;
                            }
                            int i15 = layoutParams2.leftMargin;
                            boolean z10 = closestPhotoSizeWithSize2 == null || (closestPhotoSizeWithSize2 instanceof TLRPC.TL_photoSizeEmpty) || (closestPhotoSizeWithSize2.location instanceof TLRPC.TL_fileLocationUnavailable) || messageObject.isAnyKindOfSticker() || messageObject.isSecretMedia();
                            if (z10) {
                                this.pinnedImageLocation = null;
                                this.pinnedImageLocationObject = null;
                                this.pinnedImageHasBlur = false;
                                if (i == 0) {
                                    this.pinnedMessageImageView[0].setImageBitmap(null);
                                    this.pinnedMessageImageView[0].setVisibility(4);
                                }
                                int dp2 = AndroidUtilities.dp(18.0f);
                                layoutParams6.leftMargin = dp2;
                                layoutParams5.leftMargin = dp2;
                                layoutParams4.leftMargin = dp2;
                                layoutParams3.leftMargin = dp2;
                                layoutParams2.leftMargin = dp2;
                            } else {
                                if (messageObject.isRoundVideo()) {
                                    backupImageView = this.pinnedMessageImageView[1];
                                    layoutParams = layoutParams5;
                                    dp = AndroidUtilities.dp(16.0f);
                                } else {
                                    layoutParams = layoutParams5;
                                    backupImageView = this.pinnedMessageImageView[1];
                                    dp = AndroidUtilities.dp(2.0f);
                                }
                                backupImageView.setRoundRadius(dp);
                                this.pinnedImageHasBlur = messageObject.hasMediaSpoilers();
                                this.pinnedImageSize = i4;
                                this.pinnedImageCacheType = 1;
                                this.pinnedImageLocation = closestPhotoSizeWithSize2;
                                this.pinnedImageThumbLocation = photoSize;
                                this.pinnedImageLocationObject = tLObject;
                                FrameLayout.LayoutParams layoutParams7 = layoutParams;
                                this.pinnedMessageImageView[1].setImage(ImageLocation.getForObject(closestPhotoSizeWithSize2, tLObject), "50_50", ImageLocation.getForObject(photoSize, tLObject), "50_50_b", null, i4, 1, messageObject);
                                this.pinnedMessageImageView[1].setVisibility(0);
                                this.pinnedMessageImageView[1].setHasBlur(this.pinnedImageHasBlur);
                                if (i != 0) {
                                    this.pinnedMessageImageView[1].setAlpha(0.0f);
                                }
                                int dp3 = AndroidUtilities.dp(55.0f);
                                layoutParams6.leftMargin = dp3;
                                layoutParams5 = layoutParams7;
                                layoutParams5.leftMargin = dp3;
                                layoutParams4.leftMargin = dp3;
                                layoutParams3.leftMargin = dp3;
                                layoutParams2.leftMargin = dp3;
                            }
                            this.pinnedNameTextView[0].setLayoutParams(layoutParams2);
                            this.pinnedNameTextView[1].setLayoutParams(layoutParams3);
                            this.pinnedCounterTextView.setLayoutParams(layoutParams4);
                            this.pinnedMessageTextView[0].setLayoutParams(layoutParams5);
                            this.pinnedMessageTextView[1].setLayoutParams(layoutParams6);
                            if (this.loadedPinnedMessagesCount != 2) {
                                if (this.pinnedNameTextView[i != 0 ? (char) 0 : (char) 1].getTrackWidth()) {
                                    z4 = false;
                                    this.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                                    trackingWidthSimpleTextView.setTrackWidth(true);
                                    trackingWidthSimpleTextView.setVisibility(0);
                                    if (this.threadMessageId != 0 || this.isTopic) {
                                        if (messageObject.isInvoice() || (message = messageObject.messageOwner) == null || (messageMedia = message.media) == null || messageMedia.title == null) {
                                            if (this.currentPinnedMessageIndex[0] == 0 && this.loadedPinnedMessagesCount == 2) {
                                                string = LocaleController.getString(R.string.PreviousPinnedMessage);
                                                r5 = 1;
                                            } else {
                                                r5 = 1;
                                                string = LocaleController.getString(R.string.PinnedMessage);
                                            }
                                            trackingWidthSimpleTextView.setText(string, r5);
                                            i5 = this.currentPinnedMessageIndex[0];
                                            if (i5 != 0) {
                                                if (this.isTopic) {
                                                    this.pinnedCounterTextView.setNumber(Math.max((int) r5, i5), z && this.pinnedCounterTextView.getTag() == null);
                                                } else {
                                                    int pinnedMessagesCount = getPinnedMessagesCount();
                                                    this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount - 1, Math.max(1, pinnedMessagesCount - this.currentPinnedMessageIndex[0])), z && this.pinnedCounterTextView.getTag() == null);
                                                }
                                                z5 = true;
                                            }
                                        } else {
                                            z5 = false;
                                            trackingWidthSimpleTextView.setTrackWidth(false);
                                            trackingWidthSimpleTextView.setText(messageObject.messageOwner.media.title);
                                            z4 = true;
                                        }
                                        messageObject.updateTranslation(false);
                                        i6 = messageObject.type;
                                        if (i6 == 14) {
                                            charSequence = String.format("%s - %s", messageObject.getMusicAuthor(), messageObject.getMusicTitle());
                                        } else if (i6 == 17) {
                                            String str2 = ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll.question.text;
                                            if (str2.length() > 150) {
                                                str2 = str2.substring(0, 150);
                                            }
                                            charSequence = str2.replace('\n', ' ');
                                        } else {
                                            TLRPC.MessageMedia messageMedia2 = messageObject.messageOwner.media;
                                            if (messageMedia2 instanceof TLRPC.TL_messageMediaGame) {
                                                charSequence = Emoji.replaceEmoji((CharSequence) messageMedia2.game.title, simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                            } else if (TextUtils.isEmpty(messageObject.caption)) {
                                                CharSequence charSequence2 = messageObject.messageText;
                                                if (charSequence2 != null) {
                                                    String charSequence3 = charSequence2.toString();
                                                    if (charSequence3.length() > 150) {
                                                        charSequence3 = charSequence3.substring(0, 150);
                                                    }
                                                    replaceEmoji = Emoji.replaceEmoji((CharSequence) charSequence3.replace('\n', ' '), simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                } else {
                                                    charSequence = null;
                                                }
                                            } else {
                                                String charSequence4 = messageObject.caption.toString();
                                                if (charSequence4.length() > 150) {
                                                    charSequence4 = charSequence4.substring(0, 150);
                                                }
                                                replaceEmoji = Emoji.replaceEmoji((CharSequence) charSequence4.replace('\n', ' '), simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                            }
                                        }
                                        if (charSequence != null) {
                                            if (charSequence instanceof Spannable) {
                                                MediaDataController.addTextStyleRuns(messageObject, (Spannable) charSequence, (int) NotificationCenter.onDatabaseMigration);
                                            }
                                            simpleTextView.setText(AnimatedEmojiSpan.cloneSpans(charSequence));
                                        }
                                        if (i != 0) {
                                            this.pinnedNextAnimation[0] = new AnimatorSet();
                                            this.pinnedNextAnimation[1] = new AnimatorSet();
                                            ArrayList arrayList = new ArrayList();
                                            ArrayList arrayList2 = new ArrayList();
                                            simpleTextView.setVisibility(0);
                                            trackingWidthSimpleTextView.setVisibility(0);
                                            final PinnedMessageButton pinnedMessageButton3 = pinnedMessageButton;
                                            if (pinnedButton != null) {
                                                pinnedMessageButton3.setVisibility(0);
                                            }
                                            if (z5) {
                                                if (this.pinnedCounterTextView.getTag() != null) {
                                                    this.pinnedCounterTextView.setVisibility(0);
                                                    this.pinnedCounterTextView.setAlpha(0.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.ALPHA, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.TRANSLATION_Y, -AndroidUtilities.dp(4.0f), 0.0f));
                                                    numberTextView = this.pinnedCounterTextView;
                                                    num = null;
                                                    numberTextView.setTag(num);
                                                }
                                                if (z4) {
                                                }
                                                if (trackingWidthSimpleTextView == this.pinnedNameTextView[0]) {
                                                }
                                                z6 = false;
                                                c2 = 0;
                                                if (TextUtils.equals(simpleTextView.getText(), this.pinnedMessageTextView[0].getText())) {
                                                }
                                                if (TextUtils.equals(pinnedMessageButton3.getText(), this.pinnedMessageButton[c2].getText())) {
                                                }
                                                i9 = layoutParams2.leftMargin;
                                                if (i9 == i15) {
                                                }
                                                final boolean z11 = z7;
                                                final boolean z12 = z8;
                                                this.pinnedNextAnimation[c3].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.116
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationCancel(Animator animator) {
                                                        ChatActivity.this.pinnedNextAnimation[1] = null;
                                                        ChatActivity.this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                    }

                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (animator.equals(ChatActivity.this.pinnedNextAnimation[1])) {
                                                            if (!z6 && !z11 && backupImageView2 == null) {
                                                                ChatActivity.this.pinnedNextAnimation[1] = null;
                                                                return;
                                                            }
                                                            ChatActivity.this.pinnedNextAnimation[1] = new AnimatorSet();
                                                            ChatActivity.this.pinnedNextAnimation[1].setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                                            ChatActivity.this.pinnedNextAnimation[1].setDuration(360L);
                                                            ArrayList arrayList3 = new ArrayList();
                                                            if (z6) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            if (z11) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            if (z12) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            BackupImageView backupImageView3 = backupImageView2;
                                                            if (backupImageView3 != null) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(backupImageView3, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            ChatActivity.this.pinnedNextAnimation[1].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.116.1
                                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                                public void onAnimationEnd(Animator animator2) {
                                                                    116 r3 = 116.this;
                                                                    if (z6) {
                                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                                    }
                                                                    116 r32 = 116.this;
                                                                    if (z11) {
                                                                        simpleTextView.setTranslationY(0.0f);
                                                                    }
                                                                    116 r33 = 116.this;
                                                                    if (z12) {
                                                                        pinnedMessageButton3.setTranslationY(0.0f);
                                                                    }
                                                                    BackupImageView backupImageView4 = backupImageView2;
                                                                    if (backupImageView4 != null) {
                                                                        backupImageView4.setTranslationY(0.0f);
                                                                    }
                                                                    ChatActivity.this.pinnedNextAnimation[1] = null;
                                                                }
                                                            });
                                                            ChatActivity.this.pinnedNextAnimation[1].playTogether(arrayList3);
                                                            ChatActivity.this.pinnedNextAnimation[1].start();
                                                        }
                                                    }
                                                });
                                                this.pinnedNextAnimation[1].setDuration(360L);
                                                AnimatorSet animatorSet4 = this.pinnedNextAnimation[1];
                                                CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
                                                animatorSet4.setInterpolator(cubicBezierInterpolator);
                                                this.pinnedNextAnimation[1].playTogether(arrayList2);
                                                this.pinnedNextAnimation[0].playTogether(arrayList);
                                                final boolean z13 = z7;
                                                final boolean z14 = z8;
                                                final boolean z15 = z10;
                                                this.pinnedNextAnimation[0].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.117
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (ChatActivity.this.pinnedCounterTextView.getTag() != null) {
                                                            ChatActivity.this.pinnedCounterTextView.setVisibility(4);
                                                            int pinnedMessagesCount2 = ChatActivity.this.getPinnedMessagesCount();
                                                            ChatActivity.this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount2 - 1, Math.max(1, pinnedMessagesCount2 - ChatActivity.this.currentPinnedMessageIndex[0])), false);
                                                        } else {
                                                            ChatActivity.this.pinnedCounterTextView.setAlpha(1.0f);
                                                        }
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationY(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        if (!z13) {
                                                            trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z13) {
                                                            simpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z14) {
                                                            pinnedMessageButton3.setTranslationY(0.0f);
                                                        }
                                                        ChatActivity.this.pinnedNameTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedNameTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1] = ChatActivity.this.pinnedMessageTextView[0];
                                                        ChatActivity.this.pinnedMessageTextView[0] = simpleTextView;
                                                        ChatActivity.this.pinnedMessageTextView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedMessageButton[1] = ChatActivity.this.pinnedMessageButton[0];
                                                        ChatActivity.this.pinnedMessageButton[0] = pinnedMessageButton3;
                                                        ChatActivity.this.pinnedMessageButton[1].setVisibility(4);
                                                        if (trackingWidthSimpleTextView != ChatActivity.this.pinnedNameTextView[0]) {
                                                            ChatActivity.this.pinnedNameTextView[1] = ChatActivity.this.pinnedNameTextView[0];
                                                            ChatActivity.this.pinnedNameTextView[0] = trackingWidthSimpleTextView;
                                                            ChatActivity.this.pinnedNameTextView[1].setVisibility(4);
                                                        }
                                                        if (z15) {
                                                            ChatActivity.this.pinnedMessageImageView[1].setImageBitmap(null);
                                                            ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        }
                                                        BackupImageView backupImageView3 = ChatActivity.this.pinnedMessageImageView[1];
                                                        ChatActivity.this.pinnedMessageImageView[1] = ChatActivity.this.pinnedMessageImageView[0];
                                                        ChatActivity.this.pinnedMessageImageView[0] = backupImageView3;
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedNextAnimation[0] = null;
                                                        ChatActivity.this.setPinnedTextTranslationX = false;
                                                    }
                                                });
                                                this.pinnedNextAnimation[0].setInterpolator(cubicBezierInterpolator);
                                                this.pinnedNextAnimation[0].setDuration(360L);
                                                if (!this.setPinnedTextTranslationX) {
                                                }
                                                i8 = 1;
                                            } else {
                                                if (this.pinnedCounterTextView.getTag() == null) {
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.ALPHA, 1.0f, 0.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedCounterTextView, View.TRANSLATION_Y, 0.0f, -AndroidUtilities.dp(4.0f)));
                                                    numberTextView = this.pinnedCounterTextView;
                                                    num = 1;
                                                    numberTextView.setTag(num);
                                                }
                                                if (z4 || TextUtils.equals(trackingWidthSimpleTextView.getText(), this.pinnedNameTextView[0].getText())) {
                                                    if (trackingWidthSimpleTextView == this.pinnedNameTextView[0]) {
                                                        trackingWidthSimpleTextView.setAlpha(1.0f);
                                                        f3 = 0.0f;
                                                        this.pinnedNameTextView[0].setAlpha(0.0f);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        this.pinnedNameTextView[0].setTranslationY(0.0f);
                                                    } else {
                                                        f3 = 0.0f;
                                                        trackingWidthSimpleTextView.setAlpha(1.0f);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        this.pinnedNameTextView[1].setTranslationY(0.0f);
                                                        this.pinnedNameTextView[1].setAlpha(0.0f);
                                                    }
                                                    z6 = false;
                                                } else {
                                                    trackingWidthSimpleTextView.setAlpha(0.0f);
                                                    Property property = View.ALPHA;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedNameTextView[0], property, 1.0f, 0.0f));
                                                    Property property2 = View.TRANSLATION_Y;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property2, AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f), 0.0f));
                                                    boolean z16 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                                    if (z16) {
                                                        i13 = 2;
                                                        c5 = 0;
                                                        arrayList2.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property2, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                    } else {
                                                        i13 = 2;
                                                        c5 = 0;
                                                        arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property2, AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f), 0.0f));
                                                    }
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView2 = this.pinnedNameTextView[c5];
                                                    float f5 = i == i13 ? -4.0f : 4.0f;
                                                    float[] fArr = new float[i13];
                                                    fArr[c5] = 0.0f;
                                                    fArr[1] = AndroidUtilities.dp(f5);
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView2, property2, fArr));
                                                    z6 = z16;
                                                    f3 = 0.0f;
                                                }
                                                c2 = 0;
                                                if (TextUtils.equals(simpleTextView.getText(), this.pinnedMessageTextView[0].getText())) {
                                                    simpleTextView.setAlpha(f3);
                                                    Property property3 = View.ALPHA;
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView, property3, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageTextView[0], property3, 1.0f, 0.0f));
                                                    boolean z17 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                                    if (z17) {
                                                        i12 = 2;
                                                        arrayList2.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                        c2 = 0;
                                                    } else {
                                                        i12 = 2;
                                                        c2 = 0;
                                                        arrayList.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f), 0.0f));
                                                    }
                                                    SimpleTextView simpleTextView2 = this.pinnedMessageTextView[c2];
                                                    Property property4 = View.TRANSLATION_Y;
                                                    float f6 = i == i12 ? -4.0f : 4.0f;
                                                    z7 = z17;
                                                    float[] fArr2 = new float[i12];
                                                    f4 = 0.0f;
                                                    fArr2[c2] = 0.0f;
                                                    fArr2[1] = AndroidUtilities.dp(f6);
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView2, property4, fArr2));
                                                } else {
                                                    f4 = 0.0f;
                                                    simpleTextView.setAlpha(1.0f);
                                                    this.pinnedMessageTextView[0].setAlpha(0.0f);
                                                    simpleTextView.setTranslationY(0.0f);
                                                    this.pinnedMessageTextView[0].setTranslationY(0.0f);
                                                    z7 = false;
                                                }
                                                if (TextUtils.equals(pinnedMessageButton3.getText(), this.pinnedMessageButton[c2].getText())) {
                                                    pinnedMessageButton3.setAlpha(f4);
                                                    Property property5 = View.ALPHA;
                                                    arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, property5, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageButton[c2], property5, 1.0f, 0.0f));
                                                    boolean z18 = this.forceScrollToFirst && this.loadedPinnedMessagesCount > 5;
                                                    if (z18) {
                                                        i11 = 2;
                                                        arrayList2.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                        c2 = 0;
                                                    } else {
                                                        i11 = 2;
                                                        c2 = 0;
                                                        arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f), 0.0f));
                                                    }
                                                    PinnedMessageButton pinnedMessageButton4 = this.pinnedMessageButton[c2];
                                                    Property property6 = View.TRANSLATION_Y;
                                                    float f7 = i == i11 ? -4.0f : 4.0f;
                                                    z8 = z18;
                                                    float[] fArr3 = new float[i11];
                                                    fArr3[c2] = 0.0f;
                                                    fArr3[1] = AndroidUtilities.dp(f7);
                                                    arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton4, property6, fArr3));
                                                } else {
                                                    pinnedMessageButton3.setAlpha(1.0f);
                                                    this.pinnedMessageButton[c2].setAlpha(f4);
                                                    pinnedMessageButton3.setTranslationY(f4);
                                                    this.pinnedMessageButton[c2].setTranslationY(f4);
                                                    z8 = false;
                                                }
                                                i9 = layoutParams2.leftMargin;
                                                if (i9 == i15) {
                                                    this.setPinnedTextTranslationX = true;
                                                    int i16 = i15 - i9;
                                                    SimpleTextView simpleTextView3 = this.pinnedMessageTextView[c2];
                                                    Property property7 = View.TRANSLATION_X;
                                                    float f8 = i16;
                                                    float[] fArr4 = new float[2];
                                                    fArr4[c2] = f8;
                                                    fArr4[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView3, property7, fArr4));
                                                    SimpleTextView simpleTextView4 = this.pinnedMessageTextView[1];
                                                    float[] fArr5 = new float[2];
                                                    fArr5[c2] = f8;
                                                    fArr5[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView4, property7, fArr5));
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView3 = this.pinnedNameTextView[c2];
                                                    float[] fArr6 = new float[2];
                                                    fArr6[c2] = f8;
                                                    fArr6[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, property7, fArr6));
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView4 = this.pinnedNameTextView[1];
                                                    float[] fArr7 = new float[2];
                                                    fArr7[c2] = f8;
                                                    fArr7[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView4, property7, fArr7));
                                                    NumberTextView numberTextView2 = this.pinnedCounterTextView;
                                                    int i17 = this.pinnedCounterTextViewX;
                                                    float[] fArr8 = new float[2];
                                                    fArr8[c2] = i17 + i16;
                                                    fArr8[1] = i17;
                                                    arrayList.add(ObjectAnimator.ofFloat(numberTextView2, property7, fArr8));
                                                    if (i16 > 0) {
                                                        this.pinnedMessageImageView[c2].setAlpha(1.0f);
                                                        arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[c2], View.ALPHA, 1.0f, 0.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[c2], View.SCALE_X, 1.0f, 0.7f));
                                                        ofFloat = ObjectAnimator.ofFloat(this.pinnedMessageImageView[c2], View.SCALE_Y, 1.0f, 0.7f);
                                                    } else {
                                                        arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.ALPHA, 0.0f, 1.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.SCALE_X, 0.7f, 1.0f));
                                                        ofFloat = ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.SCALE_Y, 0.7f, 1.0f);
                                                    }
                                                    arrayList.add(ofFloat);
                                                    backupImageView2 = null;
                                                    c3 = 1;
                                                } else {
                                                    this.setPinnedTextTranslationX = false;
                                                    simpleTextView.setTranslationX(0.0f);
                                                    this.pinnedMessageTextView[0].setTranslationX(0.0f);
                                                    trackingWidthSimpleTextView.setTranslationX(0.0f);
                                                    this.pinnedNameTextView[0].setTranslationX(0.0f);
                                                    pinnedMessageButton3.setTranslationX(0.0f);
                                                    this.pinnedMessageButton[0].setTranslationX(0.0f);
                                                    this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                                    this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                    if (z10) {
                                                        c3 = 1;
                                                        backupImageView2 = null;
                                                    } else {
                                                        BackupImageView backupImageView3 = this.pinnedMessageImageView[1];
                                                        Property property8 = View.ALPHA;
                                                        arrayList.add(ObjectAnimator.ofFloat(backupImageView3, property8, 0.0f, 1.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[0], property8, 1.0f, 0.0f));
                                                        if (!this.forceScrollToFirst || this.loadedPinnedMessagesCount <= 5) {
                                                            i10 = 2;
                                                            c4 = 0;
                                                            arrayList.add(ObjectAnimator.ofFloat(this.pinnedMessageImageView[1], View.TRANSLATION_Y, AndroidUtilities.dp(i == 2 ? 3.0f : -3.0f), 0.0f));
                                                            backupImageView2 = null;
                                                        } else {
                                                            BackupImageView backupImageView4 = this.pinnedMessageImageView[1];
                                                            i10 = 2;
                                                            arrayList2.add(ObjectAnimator.ofFloat(backupImageView4, View.TRANSLATION_Y, AndroidUtilities.dp(3.0f), AndroidUtilities.dp(-2.0f)));
                                                            backupImageView2 = backupImageView4;
                                                            c4 = 0;
                                                        }
                                                        BackupImageView backupImageView5 = this.pinnedMessageImageView[c4];
                                                        Property property9 = View.TRANSLATION_Y;
                                                        float f9 = i == i10 ? -3.0f : 3.0f;
                                                        float[] fArr9 = new float[i10];
                                                        fArr9[c4] = 0.0f;
                                                        c3 = 1;
                                                        fArr9[1] = AndroidUtilities.dp(f9);
                                                        arrayList.add(ObjectAnimator.ofFloat(backupImageView5, property9, fArr9));
                                                    }
                                                }
                                                final boolean z112 = z7;
                                                final boolean z122 = z8;
                                                this.pinnedNextAnimation[c3].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.116
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationCancel(Animator animator) {
                                                        ChatActivity.this.pinnedNextAnimation[1] = null;
                                                        ChatActivity.this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                    }

                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (animator.equals(ChatActivity.this.pinnedNextAnimation[1])) {
                                                            if (!z6 && !z112 && backupImageView2 == null) {
                                                                ChatActivity.this.pinnedNextAnimation[1] = null;
                                                                return;
                                                            }
                                                            ChatActivity.this.pinnedNextAnimation[1] = new AnimatorSet();
                                                            ChatActivity.this.pinnedNextAnimation[1].setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                                            ChatActivity.this.pinnedNextAnimation[1].setDuration(360L);
                                                            ArrayList arrayList3 = new ArrayList();
                                                            if (z6) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            if (z112) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            if (z122) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            BackupImageView backupImageView32 = backupImageView2;
                                                            if (backupImageView32 != null) {
                                                                arrayList3.add(ObjectAnimator.ofFloat(backupImageView32, View.TRANSLATION_Y, 0.0f));
                                                            }
                                                            ChatActivity.this.pinnedNextAnimation[1].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.116.1
                                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                                public void onAnimationEnd(Animator animator2) {
                                                                    116 r3 = 116.this;
                                                                    if (z6) {
                                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                                    }
                                                                    116 r32 = 116.this;
                                                                    if (z112) {
                                                                        simpleTextView.setTranslationY(0.0f);
                                                                    }
                                                                    116 r33 = 116.this;
                                                                    if (z122) {
                                                                        pinnedMessageButton3.setTranslationY(0.0f);
                                                                    }
                                                                    BackupImageView backupImageView42 = backupImageView2;
                                                                    if (backupImageView42 != null) {
                                                                        backupImageView42.setTranslationY(0.0f);
                                                                    }
                                                                    ChatActivity.this.pinnedNextAnimation[1] = null;
                                                                }
                                                            });
                                                            ChatActivity.this.pinnedNextAnimation[1].playTogether(arrayList3);
                                                            ChatActivity.this.pinnedNextAnimation[1].start();
                                                        }
                                                    }
                                                });
                                                this.pinnedNextAnimation[1].setDuration(360L);
                                                AnimatorSet animatorSet42 = this.pinnedNextAnimation[1];
                                                CubicBezierInterpolator cubicBezierInterpolator2 = CubicBezierInterpolator.EASE_OUT_QUINT;
                                                animatorSet42.setInterpolator(cubicBezierInterpolator2);
                                                this.pinnedNextAnimation[1].playTogether(arrayList2);
                                                this.pinnedNextAnimation[0].playTogether(arrayList);
                                                final boolean z132 = z7;
                                                final boolean z142 = z8;
                                                final boolean z152 = z10;
                                                this.pinnedNextAnimation[0].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.117
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (ChatActivity.this.pinnedCounterTextView.getTag() != null) {
                                                            ChatActivity.this.pinnedCounterTextView.setVisibility(4);
                                                            int pinnedMessagesCount2 = ChatActivity.this.getPinnedMessagesCount();
                                                            ChatActivity.this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount2 - 1, Math.max(1, pinnedMessagesCount2 - ChatActivity.this.currentPinnedMessageIndex[0])), false);
                                                        } else {
                                                            ChatActivity.this.pinnedCounterTextView.setAlpha(1.0f);
                                                        }
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationY(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        if (!z132) {
                                                            trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z132) {
                                                            simpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z142) {
                                                            pinnedMessageButton3.setTranslationY(0.0f);
                                                        }
                                                        ChatActivity.this.pinnedNameTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedNameTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1] = ChatActivity.this.pinnedMessageTextView[0];
                                                        ChatActivity.this.pinnedMessageTextView[0] = simpleTextView;
                                                        ChatActivity.this.pinnedMessageTextView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedMessageButton[1] = ChatActivity.this.pinnedMessageButton[0];
                                                        ChatActivity.this.pinnedMessageButton[0] = pinnedMessageButton3;
                                                        ChatActivity.this.pinnedMessageButton[1].setVisibility(4);
                                                        if (trackingWidthSimpleTextView != ChatActivity.this.pinnedNameTextView[0]) {
                                                            ChatActivity.this.pinnedNameTextView[1] = ChatActivity.this.pinnedNameTextView[0];
                                                            ChatActivity.this.pinnedNameTextView[0] = trackingWidthSimpleTextView;
                                                            ChatActivity.this.pinnedNameTextView[1].setVisibility(4);
                                                        }
                                                        if (z152) {
                                                            ChatActivity.this.pinnedMessageImageView[1].setImageBitmap(null);
                                                            ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        }
                                                        BackupImageView backupImageView32 = ChatActivity.this.pinnedMessageImageView[1];
                                                        ChatActivity.this.pinnedMessageImageView[1] = ChatActivity.this.pinnedMessageImageView[0];
                                                        ChatActivity.this.pinnedMessageImageView[0] = backupImageView32;
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedNextAnimation[0] = null;
                                                        ChatActivity.this.setPinnedTextTranslationX = false;
                                                    }
                                                });
                                                this.pinnedNextAnimation[0].setInterpolator(cubicBezierInterpolator2);
                                                this.pinnedNextAnimation[0].setDuration(360L);
                                                if (!this.setPinnedTextTranslationX) {
                                                    this.pinnedNextAnimation[0].start();
                                                    this.pinnedNextAnimation[1].start();
                                                }
                                                i8 = 1;
                                            }
                                        } else {
                                            NumberTextView numberTextView3 = this.pinnedCounterTextView;
                                            if (numberTextView3 != null) {
                                                if (!z5 || this.currentPinnedMessageIndex[0] == 0) {
                                                    if (numberTextView3.getTag() == null) {
                                                        f = 0.0f;
                                                        this.pinnedCounterTextView.setAlpha(0.0f);
                                                        this.pinnedCounterTextView.setVisibility(4);
                                                        this.pinnedCounterTextView.setTag(1);
                                                        this.pinnedCounterTextView.setTranslationY(f);
                                                        this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                                        NumberTextView numberTextView4 = this.pinnedCounterTextView;
                                                        if (z4) {
                                                            i7 = 0;
                                                            if (this.currentPinnedMessageIndex[0] != 0) {
                                                                f2 = 1.0f;
                                                                numberTextView4.setAlpha(f2);
                                                            }
                                                        } else {
                                                            i7 = 0;
                                                        }
                                                        f2 = 0.0f;
                                                        numberTextView4.setAlpha(f2);
                                                    }
                                                } else if (numberTextView3.getTag() != null) {
                                                    this.pinnedCounterTextView.setVisibility(0);
                                                    this.pinnedCounterTextView.setAlpha(1.0f);
                                                    this.pinnedCounterTextView.setTag(null);
                                                }
                                                f = 0.0f;
                                                this.pinnedCounterTextView.setTranslationY(f);
                                                this.pinnedCounterTextView.setTranslationX(this.pinnedCounterTextViewX);
                                                NumberTextView numberTextView42 = this.pinnedCounterTextView;
                                                if (z4) {
                                                }
                                                f2 = 0.0f;
                                                numberTextView42.setAlpha(f2);
                                            } else {
                                                i7 = 0;
                                            }
                                            simpleTextView.setVisibility(i7);
                                            simpleTextView.setAlpha(1.0f);
                                            simpleTextView.setTranslationX(0.0f);
                                            simpleTextView.setTranslationY(0.0f);
                                            trackingWidthSimpleTextView.setVisibility(i7);
                                            trackingWidthSimpleTextView.setAlpha(1.0f);
                                            trackingWidthSimpleTextView.setTranslationX(0.0f);
                                            trackingWidthSimpleTextView.setTranslationY(0.0f);
                                            this.pinnedMessageTextView[1].setVisibility(4);
                                            this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                            this.pinnedMessageTextView[1].setTranslationY(0.0f);
                                            this.pinnedMessageButton[1].setVisibility(4);
                                            this.pinnedMessageButton[1].setTranslationX(0.0f);
                                            this.pinnedMessageButton[1].setTranslationY(0.0f);
                                            this.pinnedNameTextView[1].setVisibility(4);
                                            this.pinnedNameTextView[1].setTranslationX(0.0f);
                                            this.pinnedNameTextView[1].setTranslationY(0.0f);
                                            this.pinnedMessageImageView[0].setVisibility(4);
                                            BackupImageView[] backupImageViewArr = this.pinnedMessageImageView;
                                            BackupImageView backupImageView6 = backupImageViewArr[1];
                                            backupImageViewArr[1] = backupImageViewArr[0];
                                            backupImageViewArr[0] = backupImageView6;
                                            if (backupImageView6 != null) {
                                                backupImageView6.setAlpha(1.0f);
                                                this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                this.pinnedMessageImageView[0].setTranslationY(0.0f);
                                            }
                                            i8 = 1;
                                            BackupImageView backupImageView7 = this.pinnedMessageImageView[1];
                                            if (backupImageView7 != null) {
                                                backupImageView7.setAlpha(1.0f);
                                                this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                            }
                                        }
                                        if (isThreadChat() || this.isTopic) {
                                            this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$-CC.reverseOrder()), this.pinnedMessageIds.size(), z);
                                        } else {
                                            this.pinnedLineView.set(0, i8, false);
                                        }
                                        z2 = z9;
                                    } else {
                                        MessagesController messagesController = getMessagesController();
                                        MessageObject messageObject2 = this.threadMessageObject;
                                        TLRPC.MessageFwdHeader messageFwdHeader = messageObject2.messageOwner.fwd_from;
                                        if (messageFwdHeader != null && (peer2 = messageFwdHeader.saved_from_peer) != null) {
                                            long j2 = peer2.user_id;
                                            if (j2 != 0) {
                                                peer = messageFwdHeader.from_id;
                                                if (!(peer instanceof TLRPC.TL_peerUser)) {
                                                    valueOf = Long.valueOf(j2);
                                                    user = messagesController.getUser(valueOf);
                                                    chat = null;
                                                }
                                            } else if (peer2.channel_id != 0) {
                                                if (messageObject2.isSavedFromMegagroup()) {
                                                    peer = messageFwdHeader.from_id;
                                                }
                                                peer = messageFwdHeader.saved_from_peer;
                                                j = peer.channel_id;
                                                l = Long.valueOf(j);
                                                chat = messagesController.getChat(l);
                                                user = null;
                                            } else {
                                                long j3 = peer2.chat_id;
                                                if (j3 != 0) {
                                                    peer = messageFwdHeader.from_id;
                                                    if (!(peer instanceof TLRPC.TL_peerUser)) {
                                                        if (peer instanceof TLRPC.TL_peerChat) {
                                                            j = peer.chat_id;
                                                            l = Long.valueOf(j);
                                                            chat = messagesController.getChat(l);
                                                            user = null;
                                                        } else {
                                                            if (!(peer instanceof TLRPC.TL_peerChannel)) {
                                                                l = Long.valueOf(j3);
                                                                chat = messagesController.getChat(l);
                                                                user = null;
                                                            }
                                                            j = peer.channel_id;
                                                            l = Long.valueOf(j);
                                                            chat = messagesController.getChat(l);
                                                            user = null;
                                                        }
                                                    }
                                                }
                                                user = null;
                                                chat = null;
                                            }
                                            valueOf = Long.valueOf(peer.user_id);
                                            user = messagesController.getUser(valueOf);
                                            chat = null;
                                        } else if (messageObject2.isFromUser()) {
                                            peer = this.threadMessageObject.messageOwner.from_id;
                                            valueOf = Long.valueOf(peer.user_id);
                                            user = messagesController.getUser(valueOf);
                                            chat = null;
                                        } else {
                                            TLRPC.Message message2 = this.threadMessageObject.messageOwner;
                                            TLRPC.Peer peer3 = message2.from_id;
                                            if (peer3 instanceof TLRPC.TL_peerChannel) {
                                                j = peer3.channel_id;
                                            } else if (peer3 instanceof TLRPC.TL_peerChat) {
                                                j = peer3.chat_id;
                                            } else {
                                                if (message2.post) {
                                                    peer = message2.peer_id;
                                                    j = peer.channel_id;
                                                }
                                                user = null;
                                                chat = null;
                                            }
                                            l = Long.valueOf(j);
                                            chat = messagesController.getChat(l);
                                            user = null;
                                        }
                                        if (user != null) {
                                            str = ContactsController.formatName(user.first_name, user.last_name);
                                        } else if (chat != null) {
                                            str = chat.title;
                                        }
                                        trackingWidthSimpleTextView.setText(str);
                                    }
                                    z5 = false;
                                    messageObject.updateTranslation(false);
                                    i6 = messageObject.type;
                                    if (i6 == 14) {
                                    }
                                    if (charSequence != null) {
                                    }
                                    if (i != 0) {
                                    }
                                    if (isThreadChat()) {
                                    }
                                    this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$-CC.reverseOrder()), this.pinnedMessageIds.size(), z);
                                    z2 = z9;
                                }
                            }
                            z4 = true;
                            this.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                            trackingWidthSimpleTextView.setTrackWidth(true);
                            trackingWidthSimpleTextView.setVisibility(0);
                            if (this.threadMessageId != 0) {
                            }
                            if (messageObject.isInvoice()) {
                            }
                            if (this.currentPinnedMessageIndex[0] == 0) {
                            }
                            r5 = 1;
                            string = LocaleController.getString(R.string.PinnedMessage);
                            trackingWidthSimpleTextView.setText(string, r5);
                            i5 = this.currentPinnedMessageIndex[0];
                            if (i5 != 0) {
                            }
                            z5 = false;
                            messageObject.updateTranslation(false);
                            i6 = messageObject.type;
                            if (i6 == 14) {
                            }
                            if (charSequence != null) {
                            }
                            if (i != 0) {
                            }
                            if (isThreadChat()) {
                            }
                            this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$-CC.reverseOrder()), this.pinnedMessageIds.size(), z);
                            z2 = z9;
                        } else {
                            NumberTextView numberTextView5 = this.pinnedCounterTextView;
                            if (numberTextView5 != null) {
                                if (this.loadedPinnedMessagesCount != 2) {
                                    c = 0;
                                    if (this.currentPinnedMessageIndex[0] != 0) {
                                        i3 = 0;
                                        numberTextView5.setVisibility(i3);
                                        this.pinnedCounterTextView.setAlpha((this.loadedPinnedMessagesCount != 2 || this.currentPinnedMessageIndex[c] == 0) ? 0.0f : 1.0f);
                                    }
                                } else {
                                    c = 0;
                                }
                                i3 = 4;
                                numberTextView5.setVisibility(i3);
                                this.pinnedCounterTextView.setAlpha((this.loadedPinnedMessagesCount != 2 || this.currentPinnedMessageIndex[c] == 0) ? 0.0f : 1.0f);
                            }
                            this.pinnedImageLocation = null;
                            this.pinnedImageLocationObject = null;
                            z2 = hidePinnedMessageView(z);
                            if (this.loadingPinnedMessages.indexOfKey(i2) < 0) {
                                this.loadingPinnedMessages.put(i2, Boolean.TRUE);
                                ArrayList<Integer> arrayList3 = new ArrayList<>();
                                arrayList3.add(Integer.valueOf(i2));
                                getMediaDataController().loadPinnedMessages(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, arrayList3, true);
                            }
                        }
                        if (z2) {
                        }
                    }
                    z2 = hidePinnedMessageView(z);
                    if (z2) {
                    }
                }
            } else if (!this.threadMessageVisible) {
                messageObject = this.threadMessageObject;
                i2 = (int) this.threadMessageId;
                final TLRPC.KeyboardButton pinnedButton2 = pinnedButton(messageObject);
                this.pinnedMessageButtonShown = pinnedButton2 != null;
                SharedPreferences notificationsSettings2 = MessagesController.getNotificationsSettings(this.currentAccount);
                if (this.threadMessageObject != null) {
                }
                if (this.chatInfo == null) {
                }
                if (!this.pinnedMessageIds.isEmpty()) {
                }
                if (!isReport()) {
                    if (this.pinnedMessageView != null) {
                    }
                    blurredFrameLayout = this.pinnedMessageView;
                    if (blurredFrameLayout != null) {
                    }
                }
                z2 = hidePinnedMessageView(z);
                if (z2) {
                }
            }
        }
        messageObject = null;
        i2 = 0;
        final TLRPC.KeyboardButton pinnedButton22 = pinnedButton(messageObject);
        this.pinnedMessageButtonShown = pinnedButton22 != null;
        SharedPreferences notificationsSettings22 = MessagesController.getNotificationsSettings(this.currentAccount);
        if (this.threadMessageObject != null) {
        }
        if (this.chatInfo == null) {
        }
        if (!this.pinnedMessageIds.isEmpty()) {
        }
        if (!isReport()) {
        }
        z2 = hidePinnedMessageView(z);
        if (z2) {
        }
    }

    private void updatePinnedTopicStarterMessage() {
        TLRPC.Message message;
        TLRPC.TL_forumTopic tL_forumTopic;
        MessageObject messageObject = (this.isTopic && !this.pinnedMessageObjects.isEmpty() && this.pinnedMessageIds.size() == 1 && ((long) ((Integer) this.pinnedMessageIds.get(0)).intValue()) == getTopicId() + 1) ? (MessageObject) this.pinnedMessageObjects.get(this.pinnedMessageIds.get(0)) : null;
        this.topicStarterMessageObject = messageObject;
        if (!this.isTopic || messageObject == null || (message = messageObject.messageOwner) == null || (tL_forumTopic = this.forumTopic) == null || MessageObject.peersEqual(tL_forumTopic.from_id, message.from_id) || MessageObject.peersEqual(this.currentChat, this.topicStarterMessageObject.messageOwner.from_id)) {
            return;
        }
        this.topicStarterMessageObject = null;
    }

    private void updateReactionsMentionButton(boolean z) {
        float f;
        ValueAnimator valueAnimator;
        AnimatorListenerAdapter animatorListenerAdapter;
        if (this.reactionsMentiondownButtonCounter == null || getParentActivity() == null) {
            return;
        }
        int i = this.reactionsMentionCount;
        boolean z2 = i > 0 && this.chatMode == 0;
        this.reactionsMentiondownButtonCounter.setCount(i, z);
        if (z2 && this.reactionsMentiondownButton.getTag() == null) {
            this.reactionsMentiondownButton.setTag(1);
            ValueAnimator valueAnimator2 = this.reactionsMentionButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            f = 1.0f;
            if (!z) {
                this.reactionsMentiondownButton.setVisibility(0);
                this.reactionsMentionButtonEnterProgress = f;
                this.contentView.invalidate();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 1.0f);
            this.reactionsMentionButtonAnimation = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda89
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                    ChatActivity.this.lambda$updateReactionsMentionButton$91(valueAnimator3);
                }
            });
            valueAnimator = this.reactionsMentionButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.66
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.reactionsMentionButtonEnterProgress = 1.0f;
                    ChatActivity.this.contentView.invalidate();
                }
            };
            valueAnimator.addListener(animatorListenerAdapter);
            this.reactionsMentionButtonAnimation.setDuration(200L);
            this.reactionsMentionButtonAnimation.start();
        } else if (z2 || this.reactionsMentiondownButton.getTag() == null) {
        } else {
            this.reactionsMentiondownButton.setTag(null);
            ValueAnimator valueAnimator3 = this.reactionsMentionButtonAnimation;
            if (valueAnimator3 != null) {
                valueAnimator3.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            f = 0.0f;
            if (!z) {
                this.reactionsMentiondownButton.setVisibility(4);
                this.reactionsMentionButtonEnterProgress = f;
                this.contentView.invalidate();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 0.0f);
            this.reactionsMentionButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda90
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator4) {
                    ChatActivity.this.lambda$updateReactionsMentionButton$92(valueAnimator4);
                }
            });
            valueAnimator = this.reactionsMentionButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.67
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.reactionsMentiondownButton.setVisibility(4);
                    ChatActivity.this.reactionsMentionButtonEnterProgress = 0.0f;
                    ChatActivity.this.contentView.invalidate();
                }
            };
            valueAnimator.addListener(animatorListenerAdapter);
            this.reactionsMentionButtonAnimation.setDuration(200L);
            this.reactionsMentionButtonAnimation.start();
        }
    }

    private void updateReplyMessageOwners(int i, MessageObject messageObject) {
        ArrayList arrayList = (ArrayList) this.replyMessageOwners.get(i);
        if (arrayList == null) {
            return;
        }
        MessageObject messageObject2 = messageObject == null ? new MessageObject(this.currentAccount, new TLRPC.TL_messageEmpty(), false, false) : null;
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject messageObject3 = (MessageObject) this.messagesDict[0].get(((Integer) arrayList.get(i2)).intValue());
            if (messageObject3 != null) {
                if (messageObject == null) {
                    messageObject3.replyMessageObject = messageObject2;
                } else {
                    messageObject3.replyMessageObject = messageObject;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (chatActivityAdapter != null) {
                    chatActivityAdapter.updateRowWithMessageObject(messageObject3, true, false);
                }
            }
        }
        if (messageObject == null) {
            this.replyMessageOwners.remove(i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateScheduledInterface(boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateScheduleButton(z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSearchButtons(int i, int i2, int i3) {
        FrameLayout frameLayout = this.searchUpButton;
        if (frameLayout != null) {
            frameLayout.setEnabled(((this.reversed ? 2 : 1) & i) != 0);
            this.searchUpButtonArrow.setAlpha(this.searchUpButton.isEnabled() ? 1.0f : 0.5f);
        }
        FrameLayout frameLayout2 = this.searchDownButton;
        if (frameLayout2 != null) {
            frameLayout2.setEnabled((i & (this.reversed ? 1 : 2)) != 0);
            this.searchDownButtonArrow.setAlpha(this.searchDownButton.isEnabled() ? 1.0f : 0.5f);
        }
        this.searchLastCount = i3;
        this.searchLastIndex = i2;
        updateSearchCountText();
        AnimatedTextView animatedTextView = this.searchExpandList;
        if (animatedTextView != null) {
            animatedTextView.setClickable(i3 > 0);
            this.searchExpandList.animate().alpha(i3 > 0 ? 1.0f : 0.5f).start();
        }
    }

    private void updateSearchCountText() {
        String formatPluralString;
        AnimatedTextView animatedTextView = this.searchCountText;
        if (animatedTextView != null) {
            boolean z = !LocaleController.isRTL;
            int i = this.searchLastCount;
            if (i < 0) {
                formatPluralString = "";
            } else if (i == 0) {
                formatPluralString = LocaleController.getString(R.string.NoResult);
            } else if (this.searchingFiltered) {
                formatPluralString = LocaleController.formatPluralString("TaggedMessages", i, new Object[0]);
            } else if (this.chatMode == 7 || this.messagesSearchListContainer.getTag() != null) {
                animatedTextView = this.searchCountText;
                int i2 = this.searchLastCount;
                formatPluralString = LocaleController.formatPluralString("SearchMessagesResultCount", i2, LocaleController.formatNumber(i2, ' '));
            } else {
                animatedTextView = this.searchCountText;
                formatPluralString = LocaleController.formatString(R.string.Of, Integer.valueOf(this.searchLastIndex + 1), Integer.valueOf(this.searchLastCount));
            }
            animatedTextView.setText(formatPluralString, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSearchListEmptyView() {
        String str = this.searchingHashtag;
        if (str != null) {
            this.hashtagSearchEmptyView.subtitle.setText(LocaleController.formatString(R.string.HashtagSearchEmptyViewFilteredSubtitle, str));
            this.messagesSearchListView.setEmptyView(this.hashtagSearchEmptyView);
            return;
        }
        this.messagesSearchListView.setEmptyView(null);
        this.hashtagSearchEmptyView.setVisibility(8);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSearchUpDownButtonVisibility(boolean z) {
        ValueAnimator valueAnimator;
        AnimatorListenerAdapter animatorListenerAdapter;
        if (this.searchUpButton == null || this.searchDownButton == null) {
            return;
        }
        if ((getMediaDataController().searchResultMessages.isEmpty() || !this.searching || this.searchingFiltered) && !(this.chatMode == 7 && this.searchType == 2 && !this.messages.isEmpty())) {
            this.returnToMessageId = 0;
            if (this.searchUpButton.getTag() == null) {
                return;
            }
            this.searchUpButton.setTag(null);
            ValueAnimator valueAnimator2 = this.searchUpButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.searchUpButtonAnimation.cancel();
                this.searchUpButtonAnimation = null;
            }
            if (!z) {
                this.searchUpDownEnterProgress = 0.0f;
                this.searchUpButton.setVisibility(4);
                this.searchDownButton.setVisibility(4);
                return;
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchUpDownEnterProgress, 0.0f);
            this.searchUpButtonAnimation = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda88
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                    ChatActivity.this.lambda$updateSearchUpDownButtonVisibility$146(valueAnimator3);
                }
            });
            valueAnimator = this.searchUpButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.97
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.searchUpDownEnterProgress = 0.0f;
                    ChatActivity.this.searchUpButton.setVisibility(4);
                    ChatActivity.this.searchDownButton.setVisibility(4);
                    ChatActivity.this.contentView.invalidate();
                }
            };
        } else if (this.searchUpButton.getTag() != null) {
            return;
        } else {
            ValueAnimator valueAnimator3 = this.searchUpButtonAnimation;
            if (valueAnimator3 != null) {
                valueAnimator3.removeAllListeners();
                this.searchUpButtonAnimation.cancel();
                this.searchUpButtonAnimation = null;
            }
            if (!z) {
                this.searchUpDownEnterProgress = 1.0f;
                this.contentView.invalidate();
                return;
            }
            this.searchUpButton.setVisibility(0);
            this.searchDownButton.setVisibility(0);
            this.searchUpButton.setTag(1);
            ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.searchUpDownEnterProgress, 1.0f);
            this.searchUpButtonAnimation = ofFloat2;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda87
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator4) {
                    ChatActivity.this.lambda$updateSearchUpDownButtonVisibility$145(valueAnimator4);
                }
            });
            valueAnimator = this.searchUpButtonAnimation;
            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.96
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.searchUpDownEnterProgress = 1.0f;
                    ChatActivity.this.contentView.invalidate();
                }
            };
        }
        valueAnimator.addListener(animatorListenerAdapter);
        this.searchUpButtonAnimation.setDuration(200L);
        this.searchUpButtonAnimation.start();
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x004d, code lost:
        if (r2 != null) goto L24;
     */
    /* JADX WARN: Code restructure failed: missing block: B:45:0x0189, code lost:
        if (r2 != null) goto L24;
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x018b, code lost:
        r2.forceClose();
     */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0175  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateSecretStatus() {
        ChatActivityEnterView chatActivityEnterView;
        TextView textView;
        CharSequence replaceTags;
        TextView textView2;
        String formatString;
        int i;
        AnimatorSet animatorSet;
        SuggestEmojiView suggestEmojiView;
        boolean z = true;
        if (this.bottomOverlay == null) {
            return;
        }
        this.bottomOverlayText.setBackground(null);
        this.bottomOverlayText.setOnClickListener(null);
        if (this.chatMode == 3 && getSavedDialogId() == UserObject.ANONYMOUS) {
            this.bottomOverlayText.setText(LocaleController.getString(R.string.AuthorHiddenDescription));
            this.bottomOverlay.setVisibility(0);
            AnimatorSet animatorSet2 = this.mentionListAnimation;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                this.mentionListAnimation = null;
            }
            this.mentionContainer.setVisibility(8);
            this.mentionContainer.setTag(null);
            updateMessageListAccessibilityVisibility();
            suggestEmojiView = this.suggestEmojiPanel;
        } else {
            TLRPC.Chat chat = this.currentChat;
            if (chat != null && !ChatObject.canSendMessages(chat) && !ChatObject.canSendAnyMedia(this.currentChat)) {
                TLRPC.Chat chat2 = this.currentChat;
                if (!chat2.gigagroup && (!ChatObject.isChannel(chat2) || this.currentChat.megagroup)) {
                    TLRPC.Chat chat3 = this.currentChat;
                    TLRPC.TL_chatBannedRights tL_chatBannedRights = chat3.default_banned_rights;
                    if (tL_chatBannedRights == null || !tL_chatBannedRights.send_messages) {
                        if (AndroidUtilities.isBannedForever(chat3.banned_rights)) {
                            textView2 = this.bottomOverlayText;
                            i = R.string.SendMessageRestrictedForever;
                        } else {
                            textView2 = this.bottomOverlayText;
                            formatString = LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date));
                            textView2.setText(formatString);
                            this.bottomOverlay.setVisibility(0);
                            animatorSet = this.mentionListAnimation;
                            if (animatorSet != null) {
                                animatorSet.cancel();
                                this.mentionListAnimation = null;
                            }
                            this.mentionContainer.setVisibility(8);
                            this.mentionContainer.setTag(null);
                            updateMessageListAccessibilityVisibility();
                            suggestEmojiView = this.suggestEmojiPanel;
                        }
                    } else if (ChatObject.isPossibleRemoveChatRestrictionsByBoosts(chat3)) {
                        Drawable mutate = ContextCompat.getDrawable(getContext(), R.drawable.filled_limit_boost).mutate();
                        int i2 = Theme.key_featuredStickers_addButton;
                        DrawableCompat.setTint(mutate, getThemedColor(i2));
                        mutate.setBounds(0, 0, AndroidUtilities.dp(14.0f), AndroidUtilities.dp(14.0f));
                        CombinedDrawable combinedDrawable = new CombinedDrawable(null, mutate, AndroidUtilities.dp(-6.0f), AndroidUtilities.dp(-6.0f));
                        combinedDrawable.setIconSize(AndroidUtilities.dp(14.0f), AndroidUtilities.dp(14.0f));
                        combinedDrawable.setCustomSize(AndroidUtilities.dp(14.0f), AndroidUtilities.dp(14.0f));
                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder("d " + LocaleController.getString(R.string.BoostingBoostToSendMessages));
                        spannableStringBuilder.setSpan(new ForegroundColorSpan(getThemedColor(i2)), 0, spannableStringBuilder.length(), 33);
                        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder.length(), 33);
                        spannableStringBuilder.setSpan(new ImageSpan(combinedDrawable, 1), 0, 1, 33);
                        this.bottomOverlayText.setBackground(Theme.createSelectorWithBackgroundDrawable(Theme.getColor(Theme.key_windowBackgroundWhite), Theme.getColor(Theme.key_listSelector)));
                        this.bottomOverlayText.setText(spannableStringBuilder);
                        this.bottomOverlayText.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda58
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.this.lambda$updateSecretStatus$149(view);
                            }
                        });
                        this.bottomOverlay.setVisibility(0);
                        animatorSet = this.mentionListAnimation;
                        if (animatorSet != null) {
                        }
                        this.mentionContainer.setVisibility(8);
                        this.mentionContainer.setTag(null);
                        updateMessageListAccessibilityVisibility();
                        suggestEmojiView = this.suggestEmojiPanel;
                    } else {
                        textView2 = this.bottomOverlayText;
                        i = R.string.GlobalSendMessageRestricted;
                    }
                    formatString = LocaleController.getString(i);
                    textView2.setText(formatString);
                    this.bottomOverlay.setVisibility(0);
                    animatorSet = this.mentionListAnimation;
                    if (animatorSet != null) {
                    }
                    this.mentionContainer.setVisibility(8);
                    this.mentionContainer.setTag(null);
                    updateMessageListAccessibilityVisibility();
                    suggestEmojiView = this.suggestEmojiPanel;
                }
            }
            createEmptyView(false);
            TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
            if (encryptedChat == null || this.bigEmptyView == null) {
                this.bottomOverlay.setVisibility(4);
                if (this.suggestEmojiPanel == null || (chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.hasText()) {
                    return;
                }
                this.suggestEmojiPanel.fireUpdate();
                return;
            }
            if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
                textView = this.bottomOverlayText;
                replaceTags = LocaleController.getString(R.string.EncryptionProcessing);
            } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
                textView = this.bottomOverlayText;
                int i3 = R.string.AwaitingEncryption;
                replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", i3, "<b>" + this.currentUser.first_name + "</b>"));
            } else {
                if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
                    this.bottomOverlayText.setText(LocaleController.getString(R.string.EncryptionRejected));
                    this.bottomOverlay.setVisibility(0);
                    this.chatActivityEnterView.setVisibility(4);
                    this.chatActivityEnterView.setFieldText("");
                    getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, false);
                } else {
                    if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
                        this.bottomOverlay.setVisibility(4);
                        if (!this.inPreviewMode && !this.isInsideContainer && this.chatMode != 3) {
                            this.chatActivityEnterView.setVisibility(0);
                        }
                    }
                    z = false;
                }
                checkRaiseSensors();
                checkActionBarMenu(false);
            }
            textView.setText(replaceTags);
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
            checkRaiseSensors();
            checkActionBarMenu(false);
        }
        if (this.inPreviewMode) {
            this.bottomOverlay.setVisibility(4);
        }
        if (z) {
            this.chatActivityEnterView.hidePopup(false);
            if (getParentActivity() != null) {
                AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
            }
        }
    }

    private void updateSelectedMessageReactions() {
        boolean z;
        if (getDialogId() == getUserConfig().getClientUserId()) {
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            for (int i = 0; i < this.selectedMessagesIds.length; i++) {
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    MessageObject messageObject = (MessageObject) this.selectedMessagesIds[i].valueAt(i2);
                    if (messageObject.hasValidGroupId()) {
                        MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject);
                        MessageObject.GroupedMessagePosition position = validGroupedMessage != null ? validGroupedMessage.getPosition(messageObject) : null;
                        if (position != null) {
                            if (!position.last) {
                            }
                        }
                    }
                    arrayList.add(messageObject);
                }
            }
            ReactionsContainerLayout reactionsContainerLayout = this.tagSelector;
            if (reactionsContainerLayout != null) {
                reactionsContainerLayout.setSelectedReactionsInclusive(arrayList);
                z = !this.tagSelector.getSelectedReactions().isEmpty();
                this.tagSelector.setHint(LocaleController.getString(!z ? R.string.SavedTagReactionsSelectedAddHint : R.string.SavedTagReactionsSelectedEditHint));
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda53
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$updateSelectedMessageReactions$151();
                    }
                }, 120L);
            } else {
                z = !ReactionsContainerLayout.getInclusiveReactions(arrayList).isEmpty();
            }
            ActionBarMenuItem item = this.actionBar.createActionMode().getItem(28);
            if (item != null) {
                item.setIcon(z ? R.drawable.menu_tag_edit : R.drawable.menu_tag_plus, true);
            }
        }
        if (this.selectionReactionsOverlay != null) {
            ArrayList arrayList2 = new ArrayList();
            SparseArray sparseArray = this.selectedMessagesIds[0];
            for (int i3 = 0; i3 < sparseArray.size(); i3++) {
                arrayList2.add((MessageObject) sparseArray.valueAt(i3));
            }
            SparseArray sparseArray2 = this.selectedMessagesIds[1];
            for (int i4 = 0; i4 < sparseArray2.size(); i4++) {
                arrayList2.add((MessageObject) sparseArray2.valueAt(i4));
            }
            this.selectionReactionsOverlay.setSelectedMessages(arrayList2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTitleIcons() {
        updateTitleIcons(false);
    }

    private void updateTitleIcons(boolean z) {
        ActionBarMenuItem.Item item;
        ActionBarMenuItem.Item item2;
        int i;
        if (this.avatarContainer == null || this.chatMode != 0) {
            return;
        }
        boolean isDialogMuted = getMessagesController().isDialogMuted(this.dialog_id, getTopicId());
        if (z) {
            isDialogMuted = !isDialogMuted;
        }
        this.avatarContainer.setTitleIcons(this.currentEncryptedChat != null ? getThemedDrawable("drawableLockIcon") : null, (UserObject.isReplyUser(this.currentUser) || (isThreadChat() && !this.isTopic) || !isDialogMuted) ? null : getThemedDrawable("drawableMuteIcon"));
        if (!z && (item = this.muteItem) != null) {
            if (isDialogMuted) {
                item.setRightIconVisibility(8);
                this.muteItem.setText(LocaleController.getString(R.string.Unmute));
                item2 = this.muteItem;
                i = R.drawable.msg_mute;
            } else {
                item.setRightIconVisibility(0);
                if (getMessagesController().isDialogNotificationsSoundEnabled(this.dialog_id, getTopicId())) {
                    this.muteItem.setText(LocaleController.getString(R.string.Mute));
                    item2 = this.muteItem;
                    i = R.drawable.msg_unmute;
                } else {
                    this.muteItem.setText(LocaleController.getString(R.string.Mute));
                    item2 = this.muteItem;
                    i = R.drawable.msg_silent;
                }
            }
            item2.setIcon(i);
        }
        ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = this.chatNotificationsPopupWrapper;
        if (chatNotificationsPopupWrapper != null) {
            chatNotificationsPopupWrapper.lambda$update$11(this.dialog_id, getTopicId(), null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:186:0x0468, code lost:
        if (r0 != null) goto L309;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x05a2, code lost:
        if (r0 != null) goto L309;
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x05a4, code lost:
        r0.setVisibility(8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x05e4, code lost:
        if (android.os.Build.VERSION.SDK_INT >= 21) goto L361;
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x0642, code lost:
        if (android.os.Build.VERSION.SDK_INT >= 21) goto L361;
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x0644, code lost:
        org.telegram.ui.ActionBar.Theme.setSelectorDrawableColor(r37.reportSpamButton.getBackground(), 436207615 & getThemedColor(r3), true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x0653, code lost:
        r37.reportSpamButton.setTag(java.lang.Integer.valueOf(r3));
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x01d4, code lost:
        if (getMessagesController().getTranslateController().isTranslateDialogHidden(getDialogId()) == false) goto L50;
     */
    /* JADX WARN: Code restructure failed: missing block: B:61:0x01f7, code lost:
        if (r0.getInt("dialog_show_translate_count" + r12, 5) <= 0) goto L50;
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x01f9, code lost:
        r27 = true;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:102:0x02b2  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x02c0  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x02dc  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x02ee  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x02fb  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0308  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x0315  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x032b  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x032f A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0339  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x034b  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x034e  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0413  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x045e  */
    /* JADX WARN: Removed duplicated region for block: B:254:0x0630  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x0660  */
    /* JADX WARN: Removed duplicated region for block: B:264:0x0668  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x0675  */
    /* JADX WARN: Removed duplicated region for block: B:297:0x06ba A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:313:0x0715  */
    /* JADX WARN: Removed duplicated region for block: B:316:0x0755  */
    /* JADX WARN: Removed duplicated region for block: B:319:0x0766  */
    /* JADX WARN: Removed duplicated region for block: B:323:0x07ab  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x07b2  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x07b9  */
    /* JADX WARN: Removed duplicated region for block: B:332:0x07bf A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:339:0x07d1 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:340:0x07d2  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01b2  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x01d7  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0227  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0230  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0234 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x023a  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0249 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:95:0x025c A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:97:0x025f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateTopPanel(boolean z) {
        long j;
        boolean z2;
        TLRPC.EmojiStatus emojiStatus;
        boolean z3;
        boolean z4;
        boolean z5;
        AnimatorSet animatorSet;
        TLRPC.EmojiStatus emojiStatus2;
        boolean z6;
        TextView textView;
        TextView textView2;
        TranslateButton translateButton;
        BusinessBotButton businessBotButton;
        ImageView imageView;
        TLRPC.User user;
        TextView textView3;
        int i;
        TextView textView4;
        int i2;
        ActionBarMenuItem.Item item;
        TextView textView5;
        boolean z7;
        TextView textView6;
        LinkSpanDrawable.LinksTextView linksTextView;
        View view;
        View view2;
        AnimatorSet animatorSet2;
        AnimatorListenerAdapter animatorListenerAdapter;
        View view3;
        Long l;
        long j2;
        int indexOf;
        int indexOf2;
        TextView textView7;
        TextView textView8;
        TextView textView9;
        TextView textView10;
        TranslateButton translateButton2;
        BusinessBotButton businessBotButton2;
        TLRPC.TL_forumTopic tL_forumTopic;
        if (this.chatMode != 0) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        long j3 = this.dialog_id;
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat != null) {
            z2 = (encryptedChat.admin_id == getUserConfig().getClientUserId() || getContactsController().isLoadingContacts() || getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) != null) ? false : true;
            long j4 = this.currentUser.id;
            int i3 = notificationsSettings.getInt("dialog_bar_vis3" + j4, 0);
            if (z2 && (i3 == 1 || i3 == 3)) {
                z2 = false;
            }
            j = j4;
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(j3);
            j = j3;
            z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
        }
        boolean z8 = notificationsSettings.getBoolean("dialog_bar_share" + j, false);
        boolean z9 = notificationsSettings.getBoolean("dialog_bar_report" + j, false);
        boolean z10 = notificationsSettings.getBoolean("dialog_bar_block" + j, false);
        boolean z11 = notificationsSettings.getBoolean("dialog_bar_add" + j, false);
        boolean z12 = notificationsSettings.getBoolean("dialog_bar_archived" + this.dialog_id, false);
        boolean z13 = notificationsSettings.getBoolean("dialog_bar_location" + j, false);
        final String string = notificationsSettings.getString("dialog_bar_chat_with_admin_title" + j, null);
        final boolean z14 = notificationsSettings.getBoolean("dialog_bar_chat_with_channel" + j, false);
        final int i4 = notificationsSettings.getInt("dialog_bar_chat_with_date" + j, 0);
        boolean z15 = notificationsSettings.getBoolean("dialog_bar_invite" + j, false);
        if (this.currentUser != null && ((z9 || z10) && !getMessagesController().premiumFeaturesBlocked())) {
            TLRPC.EmojiStatus emojiStatus3 = this.currentUser.emoji_status;
            if ((emojiStatus3 instanceof TLRPC.TL_emojiStatus) || ((emojiStatus3 instanceof TLRPC.TL_emojiStatusUntil) && ((TLRPC.TL_emojiStatusUntil) emojiStatus3).until > ((int) (System.currentTimeMillis() / 1000)))) {
                emojiStatus = this.currentUser.emoji_status;
                z3 = isInPreviewMode() && (tL_forumTopic = this.forumTopic) != null && tL_forumTopic.closed && !tL_forumTopic.hidden && ChatObject.canManageTopic(this.currentAccount, this.currentChat, tL_forumTopic);
                if (getUserConfig().isPremium()) {
                    if (!getMessagesController().premiumFeaturesBlocked()) {
                    }
                    z4 = false;
                } else {
                    if (getMessagesController().getTranslateController().isDialogTranslatable(getDialogId())) {
                    }
                    z4 = false;
                }
                if (this.currentEncryptedChat == null && getUserConfig().isPremium()) {
                    if (notificationsSettings.getLong("dialog_botid" + j, 0L) != 0) {
                        z5 = true;
                        if (z3) {
                            this.shownRestartTopic = true;
                        }
                        if (!z4 || z5) {
                            this.shownTranslateTopic = true;
                        }
                        boolean z16 = ((z3 && !this.shownRestartTopic) || z9 || z10 || z13) ? false : true;
                        if (!z2 || z9 || z10 || z13 || z4 || z5 || z16) {
                            createTopPanel();
                            if (this.topChatPanelView == null) {
                                return;
                            }
                        }
                        if (z5) {
                            createBizBotButton();
                            BusinessBotButton businessBotButton3 = this.bizBotButton;
                            if (businessBotButton3 != null) {
                                animatorSet = 0;
                                businessBotButton3.set(j, notificationsSettings.getLong("dialog_botid" + j, 0L), notificationsSettings.getString("dialog_boturl" + j, null), notificationsSettings.getInt("dialog_botflags" + j, 0));
                                if (z4) {
                                    createTranslateButton();
                                    TranslateButton translateButton3 = this.translateButton;
                                    if (translateButton3 != null) {
                                        translateButton3.updateText();
                                    }
                                }
                                if ((!this.shownTranslateTopic || this.shownRestartTopic) && !z2) {
                                    emojiStatus2 = animatorSet;
                                    z8 = false;
                                    z9 = false;
                                    z10 = false;
                                    z6 = true;
                                    z11 = false;
                                    z12 = false;
                                    z13 = false;
                                    z15 = false;
                                } else {
                                    emojiStatus2 = emojiStatus;
                                    z6 = z2;
                                }
                                textView = this.reportSpamButton;
                                int i5 = 8;
                                if (textView != null) {
                                    textView.setVisibility((z9 || z10 || z13) ? 0 : 8);
                                }
                                textView2 = this.restartTopicButton;
                                if (textView2 != null) {
                                    textView2.setVisibility(z16 ? 0 : 8);
                                }
                                translateButton = this.translateButton;
                                if (translateButton != null) {
                                    translateButton.setVisibility(z4 ? 0 : 8);
                                }
                                businessBotButton = this.bizBotButton;
                                if (businessBotButton != null) {
                                    businessBotButton.setVisibility(z5 ? 0 : 8);
                                }
                                imageView = this.closeReportSpam;
                                if (imageView != null) {
                                    imageView.setVisibility((z16 || !((!z4 && !z5) || z9 || z10 || z13)) ? 8 : 0);
                                }
                                if (!z3) {
                                    this.shownRestartTopic = false;
                                }
                                if (!z4 && !z5) {
                                    this.shownTranslateTopic = false;
                                }
                                this.addToContactsButtonArchive = false;
                                user = this.currentUser == null ? getMessagesController().getUser(Long.valueOf(this.currentUser.id)) : animatorSet;
                                if (user != null || TextUtils.isEmpty(string)) {
                                    if (!z15) {
                                        createTopPanel();
                                        if (this.topChatPanelView == null) {
                                            return;
                                        }
                                        this.addToContactsButton.setVisibility(0);
                                        this.addToContactsButton.setText(LocaleController.getString(R.string.GroupAddMembers));
                                        this.addToContactsButton.setTag(4);
                                        TextView textView11 = this.addToContactsButton;
                                        int i6 = Theme.key_chat_addContact;
                                        textView11.setTextColor(getThemedColor(i6));
                                        if (Build.VERSION.SDK_INT >= 21) {
                                            Theme.setSelectorDrawableColor(this.addToContactsButton.getBackground(), 436207615 & getThemedColor(i6), true);
                                        }
                                        this.reportSpamButton.setTag(Integer.valueOf(i6));
                                    } else if (user != null) {
                                        if (UserObject.isReplyUser(user)) {
                                            textView5 = this.addToContactsButton;
                                        } else {
                                            boolean z17 = user.contact;
                                            if (!z17 && !user.self && z11) {
                                                createTopPanel();
                                                if (this.topChatPanelView == null) {
                                                    return;
                                                }
                                                this.addContactItem.setVisibility(0);
                                                this.addContactItem.setText(LocaleController.getString(R.string.AddToContacts));
                                                this.addToContactsButton.setVisibility(0);
                                                if (z12) {
                                                    this.addToContactsButtonArchive = true;
                                                    this.addToContactsButton.setText(LocaleController.getString(R.string.Unarchive).toUpperCase());
                                                    this.addToContactsButton.setTag(3);
                                                } else if (this.reportSpamButton.getVisibility() == 0) {
                                                    this.addToContactsButton.setText(LocaleController.getString(R.string.AddContactChat));
                                                } else {
                                                    TextPaint paint = this.addToContactsButton.getPaint();
                                                    int i7 = R.string.AddContactFullChat;
                                                    this.addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", i7, TextUtils.ellipsize(UserObject.getFirstName(user), this.addToContactsButton.getPaint(), (getContext().getResources().getDisplayMetrics().widthPixels - paint.measureText(LocaleController.formatString(i7, ""))) - AndroidUtilities.dp(128.0f), TextUtils.TruncateAt.MIDDLE)).toUpperCase());
                                                }
                                                this.addToContactsButton.setTag(animatorSet);
                                            } else if (!z8 || user.self) {
                                                if (z17 || UserObject.isService(user.id) || user.self || z6 || this.addContactItem == null) {
                                                    ActionBarMenuItem.Item item2 = this.addContactItem;
                                                    if (item2 != null) {
                                                        item2.setVisibility(8);
                                                    }
                                                } else {
                                                    createTopPanel();
                                                    if (this.topChatPanelView == null) {
                                                        return;
                                                    }
                                                    this.addContactItem.setVisibility(0);
                                                    this.addContactItem.setText(LocaleController.getString(R.string.ShareMyContactInfo));
                                                    this.addToContactsButton.setTag(2);
                                                }
                                                textView5 = this.addToContactsButton;
                                            } else {
                                                createTopPanel();
                                                if (this.topChatPanelView == null) {
                                                    return;
                                                }
                                                this.addContactItem.setVisibility(0);
                                                this.addToContactsButton.setVisibility(0);
                                                this.addContactItem.setText(LocaleController.getString(R.string.ShareMyContactInfo));
                                                this.addToContactsButton.setText(LocaleController.getString(R.string.ShareMyPhone).toUpperCase());
                                                this.addToContactsButton.setTag(1);
                                            }
                                            this.addToContactsButton.setVisibility(0);
                                            TextView textView12 = this.reportSpamButton;
                                            if (textView12 != null) {
                                                textView12.setText(LocaleController.getString(R.string.ReportSpamUser));
                                            }
                                        }
                                    } else if (z13) {
                                        createTopPanel();
                                        if (this.topChatPanelView == null) {
                                            return;
                                        }
                                        this.reportSpamButton.setText(LocaleController.getString(R.string.ReportSpamLocation));
                                        this.reportSpamButton.setTag(R.id.object_tag, 1);
                                        TextView textView13 = this.reportSpamButton;
                                        i2 = Theme.key_chat_addContact;
                                        textView13.setTextColor(getThemedColor(i2));
                                    } else {
                                        if (z12) {
                                            createTopPanel();
                                            if (this.topChatPanelView == null) {
                                                return;
                                            }
                                            this.addToContactsButtonArchive = true;
                                            this.addToContactsButton.setText(LocaleController.getString(R.string.Unarchive).toUpperCase());
                                            this.addToContactsButton.setTag(3);
                                            this.addToContactsButton.setVisibility(0);
                                            textView3 = this.reportSpamButton;
                                            i = R.string.ReportSpam;
                                        } else {
                                            TextView textView14 = this.addToContactsButton;
                                            if (textView14 != null) {
                                                textView14.setVisibility(8);
                                            }
                                            textView3 = this.reportSpamButton;
                                            if (textView3 != null) {
                                                i = R.string.ReportSpamAndLeave;
                                            }
                                            textView4 = this.reportSpamButton;
                                            if (textView4 != null) {
                                                textView4.setTag(R.id.object_tag, animatorSet);
                                                TextView textView15 = this.reportSpamButton;
                                                i2 = Theme.key_text_RedBold;
                                                textView15.setTextColor(getThemedColor(i2));
                                            }
                                            item = this.addContactItem;
                                            if (item != null) {
                                                item.setVisibility(8);
                                            }
                                        }
                                        textView3.setText(LocaleController.getString(i));
                                        textView4 = this.reportSpamButton;
                                        if (textView4 != null) {
                                        }
                                        item = this.addContactItem;
                                        if (item != null) {
                                        }
                                    }
                                    z7 = false;
                                } else {
                                    createTopPanel();
                                    if (this.topChatPanelView == null) {
                                        return;
                                    }
                                    if (this.chatWithAdminTextView == null) {
                                        TextView textView16 = new TextView(getContext());
                                        this.chatWithAdminTextView = textView16;
                                        textView16.setGravity(16);
                                        this.chatWithAdminTextView.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(46.0f), 0);
                                        this.chatWithAdminTextView.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_listSelector), 2));
                                        this.topChatPanelView.addView(this.chatWithAdminTextView, 0, LayoutHelper.createFrame(-1, 48.0f, 0, 0.0f, 0.0f, 0.0f, 1.0f));
                                        this.chatWithAdminTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
                                        this.chatWithAdminTextView.setTextSize(1, 14.0f);
                                        final TLRPC.User user2 = user;
                                        this.chatWithAdminTextView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.118
                                            @Override // android.view.View.OnClickListener
                                            public void onClick(View view4) {
                                                AlertsCreator.showChatWithAdmin(ChatActivity.this, user2, string, z14, i4);
                                            }
                                        });
                                    }
                                    String formatString = z14 ? LocaleController.formatString("ChatWithGroupAdmin", R.string.ChatWithGroupAdmin, user.first_name, string) : LocaleController.formatString("ChatWithChannelAdmin", R.string.ChatWithChannelAdmin, user.first_name, string);
                                    this.reportSpamButton.setVisibility(8);
                                    this.addToContactsButton.setVisibility(8);
                                    this.chatWithAdminTextView.setText(AndroidUtilities.replaceTags(formatString));
                                    z7 = true;
                                }
                                textView6 = this.chatWithAdminTextView;
                                if (textView6 != null) {
                                    textView6.setVisibility(z7 ? 0 : 8);
                                }
                                if (!this.userBlocked || (((textView7 = this.addToContactsButton) == null || textView7.getVisibility() == 8) && (((textView8 = this.reportSpamButton) == null || textView8.getVisibility() == 8) && (((textView9 = this.chatWithAdminTextView) == null || textView9.getVisibility() == 8) && (((textView10 = this.restartTopicButton) == null || textView10.getVisibility() == 8) && (((translateButton2 = this.translateButton) == null || translateButton2.getVisibility() == 8) && ((businessBotButton2 = this.bizBotButton) == null || businessBotButton2.getVisibility() == 8))))))) {
                                    z6 = false;
                                }
                                int dp = AndroidUtilities.dp(50.0f);
                                if (emojiStatus2 == null && z6) {
                                    createTopPanel();
                                    if (this.topChatPanelView == null) {
                                        return;
                                    }
                                    this.emojiStatusSpamHint.setVisibility(0);
                                    this.topViewSeparator1.setVisibility(0);
                                    this.topViewSeparator2.setVisibility(0);
                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString(R.string.ReportSpamUserEmojiStatusHint));
                                    SpannableString spannableString = new SpannableString("x");
                                    TLRPC.EmojiStatus emojiStatus4 = this.currentUser.emoji_status;
                                    if (emojiStatus4 instanceof TLRPC.TL_emojiStatus) {
                                        j2 = ((TLRPC.TL_emojiStatus) emojiStatus4).document_id;
                                    } else if (!(emojiStatus4 instanceof TLRPC.TL_emojiStatusUntil) || ((TLRPC.TL_emojiStatusUntil) emojiStatus4).until <= ((int) (System.currentTimeMillis() / 1000))) {
                                        l = animatorSet;
                                        if (l != null) {
                                            AnimatedEmojiSpan animatedEmojiSpan = new AnimatedEmojiSpan(l.longValue(), this.emojiStatusSpamHint.getPaint().getFontMetricsInt());
                                            animatedEmojiSpan.full = false;
                                            spannableString.setSpan(animatedEmojiSpan, 0, spannableString.length(), 33);
                                        }
                                        SpannableString spannableString2 = new SpannableString(LocaleController.getString(R.string.TelegramPremium));
                                        spannableString2.setSpan(new ClickableSpan() { // from class: org.telegram.ui.ChatActivity.119
                                            @Override // android.text.style.ClickableSpan
                                            public void onClick(View view4) {
                                                ChatActivity.this.presentFragment(new PremiumPreviewFragment(null));
                                            }

                                            @Override // android.text.style.ClickableSpan, android.text.style.CharacterStyle
                                            public void updateDrawState(TextPaint textPaint) {
                                                super.updateDrawState(textPaint);
                                                textPaint.setUnderlineText(false);
                                            }
                                        }, 0, spannableString2.length(), 33);
                                        indexOf = spannableStringBuilder.toString().indexOf("%1$s");
                                        if (indexOf >= 0) {
                                            spannableStringBuilder.replace(indexOf, indexOf + 4, (CharSequence) spannableString);
                                        }
                                        indexOf2 = spannableStringBuilder.toString().indexOf("%2$s");
                                        if (indexOf2 >= 0) {
                                            spannableStringBuilder.replace(indexOf2, indexOf2 + 4, (CharSequence) spannableString2);
                                        }
                                        this.emojiStatusSpamHint.setText(spannableStringBuilder);
                                        this.emojiStatusSpamHint.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x - AndroidUtilities.dp(50.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(99999, Integer.MIN_VALUE));
                                        int dp2 = dp + AndroidUtilities.dp(4.0f);
                                        this.emojiStatusSpamHint.setTranslationY(dp2);
                                        dp = dp2 + AndroidUtilities.dp(10.0f) + this.emojiStatusSpamHint.getMeasuredHeight();
                                    } else {
                                        j2 = ((TLRPC.TL_emojiStatusUntil) this.currentUser.emoji_status).document_id;
                                    }
                                    l = Long.valueOf(j2);
                                    if (l != null) {
                                    }
                                    SpannableString spannableString22 = new SpannableString(LocaleController.getString(R.string.TelegramPremium));
                                    spannableString22.setSpan(new ClickableSpan() { // from class: org.telegram.ui.ChatActivity.119
                                        @Override // android.text.style.ClickableSpan
                                        public void onClick(View view4) {
                                            ChatActivity.this.presentFragment(new PremiumPreviewFragment(null));
                                        }

                                        @Override // android.text.style.ClickableSpan, android.text.style.CharacterStyle
                                        public void updateDrawState(TextPaint textPaint) {
                                            super.updateDrawState(textPaint);
                                            textPaint.setUnderlineText(false);
                                        }
                                    }, 0, spannableString22.length(), 33);
                                    indexOf = spannableStringBuilder.toString().indexOf("%1$s");
                                    if (indexOf >= 0) {
                                    }
                                    indexOf2 = spannableStringBuilder.toString().indexOf("%2$s");
                                    if (indexOf2 >= 0) {
                                    }
                                    this.emojiStatusSpamHint.setText(spannableStringBuilder);
                                    this.emojiStatusSpamHint.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x - AndroidUtilities.dp(50.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(99999, Integer.MIN_VALUE));
                                    int dp22 = dp + AndroidUtilities.dp(4.0f);
                                    this.emojiStatusSpamHint.setTranslationY(dp22);
                                    dp = dp22 + AndroidUtilities.dp(10.0f) + this.emojiStatusSpamHint.getMeasuredHeight();
                                } else {
                                    linksTextView = this.emojiStatusSpamHint;
                                    if (linksTextView != null) {
                                        linksTextView.setVisibility(8);
                                    }
                                    view = this.topViewSeparator1;
                                    if (view != null) {
                                        view.setVisibility(8);
                                    }
                                    view2 = this.topViewSeparator2;
                                    if (view2 != null) {
                                        view2.setVisibility(8);
                                    }
                                }
                                float f = 0.0f;
                                if (!z4 || z5) {
                                    createTopPanel();
                                    if (this.topChatPanelView != null) {
                                        return;
                                    }
                                    if (this.restartTopicButton.getVisibility() == 0 || this.reportSpamButton.getVisibility() == 0 || this.addToContactsButton.getVisibility() == 0 || !(user == null || TextUtils.isEmpty(string))) {
                                        this.topViewSeparator3.setVisibility(0);
                                    } else {
                                        dp -= AndroidUtilities.dp(48.0f);
                                        this.topViewSeparator3.setVisibility(8);
                                    }
                                    if (z4) {
                                        dp += AndroidUtilities.dp(36.0f);
                                    }
                                    if (z5) {
                                        dp += AndroidUtilities.dp(48.0f);
                                    }
                                    BusinessBotButton businessBotButton4 = this.bizBotButton;
                                    if (businessBotButton4 != null) {
                                        businessBotButton4.setTranslationY(AndroidUtilities.dp((z5 && z4) ? -36.0f : 0.0f));
                                    }
                                } else {
                                    View view4 = this.topViewSeparator3;
                                    if (view4 != null) {
                                        view4.setVisibility(8);
                                    }
                                }
                                View view5 = this.topViewSeparator1;
                                if (view5 != null) {
                                    View view6 = this.topViewSeparator3;
                                    if ((view6 != null && view6.getVisibility() == 0) || ((view3 = this.topViewSeparator2) != null && view3.getVisibility() == 0)) {
                                        i5 = 0;
                                    }
                                    view5.setVisibility(i5);
                                }
                                BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
                                if (blurredFrameLayout != null) {
                                    blurredFrameLayout.getLayoutParams().height = dp;
                                }
                                if (!z6) {
                                    BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
                                    if (blurredFrameLayout2 != null && blurredFrameLayout2.getTag() == null) {
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("hide spam button");
                                        }
                                        this.topChatPanelView.setTag(1);
                                        AnimatorSet animatorSet3 = this.reportSpamViewAnimator;
                                        if (animatorSet3 != null) {
                                            animatorSet3.cancel();
                                            this.reportSpamViewAnimator = animatorSet;
                                        }
                                        if (z) {
                                            this.reportSpamViewAnimator = new AnimatorSet();
                                            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.topChatPanelViewOffset, -dp);
                                            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda166
                                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                                    ChatActivity.this.lambda$updateTopPanel$209(valueAnimator);
                                                }
                                            });
                                            this.reportSpamViewAnimator.playTogether(ofFloat);
                                            this.reportSpamViewAnimator.setDuration(200L);
                                            animatorSet2 = this.reportSpamViewAnimator;
                                            animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.121
                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                public void onAnimationCancel(Animator animator) {
                                                    if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                                        return;
                                                    }
                                                    ChatActivity.this.reportSpamViewAnimator = null;
                                                }

                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                public void onAnimationEnd(Animator animator) {
                                                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                                        ChatActivity.this.topChatPanelView.setVisibility(8);
                                                        ChatActivity.this.reportSpamViewAnimator = null;
                                                    }
                                                    ChatActivity.this.invalidateChatListViewTopPadding();
                                                    ChatActivity.this.invalidateMessagesVisiblePart();
                                                }
                                            };
                                            animatorSet2.addListener(animatorListenerAdapter);
                                            this.reportSpamViewAnimator.start();
                                        } else {
                                            f = -dp;
                                            this.topChatPanelViewOffset = f;
                                            invalidateChatListViewTopPadding();
                                            invalidateMessagesVisiblePart();
                                        }
                                    }
                                    checkListViewPaddings();
                                    return;
                                }
                                createTopPanel();
                                BlurredFrameLayout blurredFrameLayout3 = this.topChatPanelView;
                                if (blurredFrameLayout3 == null) {
                                    return;
                                }
                                if (blurredFrameLayout3.getTag() != null) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("show spam button");
                                    }
                                    this.topChatPanelView.setTag(animatorSet);
                                    this.topChatPanelView.setVisibility(0);
                                    AnimatorSet animatorSet4 = this.reportSpamViewAnimator;
                                    if (animatorSet4 != null) {
                                        animatorSet4.cancel();
                                        this.reportSpamViewAnimator = animatorSet;
                                    }
                                    if (z) {
                                        this.reportSpamViewAnimator = new AnimatorSet();
                                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.topChatPanelViewOffset, 0.0f);
                                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda165
                                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                                ChatActivity.this.lambda$updateTopPanel$208(valueAnimator);
                                            }
                                        });
                                        this.reportSpamViewAnimator.playTogether(ofFloat2);
                                        this.reportSpamViewAnimator.setDuration(200L);
                                        animatorSet2 = this.reportSpamViewAnimator;
                                        animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.120
                                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                            public void onAnimationCancel(Animator animator) {
                                                if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                                    return;
                                                }
                                                ChatActivity.this.reportSpamViewAnimator = null;
                                            }

                                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                            public void onAnimationEnd(Animator animator) {
                                                if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                                    return;
                                                }
                                                ChatActivity.this.reportSpamViewAnimator = null;
                                            }
                                        };
                                        animatorSet2.addListener(animatorListenerAdapter);
                                        this.reportSpamViewAnimator.start();
                                    }
                                    this.topChatPanelViewOffset = f;
                                    invalidateChatListViewTopPadding();
                                    invalidateMessagesVisiblePart();
                                }
                                checkListViewPaddings();
                                return;
                            }
                        }
                        animatorSet = 0;
                        if (z4) {
                        }
                        if (this.shownTranslateTopic) {
                        }
                        emojiStatus2 = animatorSet;
                        z8 = false;
                        z9 = false;
                        z10 = false;
                        z6 = true;
                        z11 = false;
                        z12 = false;
                        z13 = false;
                        z15 = false;
                        textView = this.reportSpamButton;
                        int i52 = 8;
                        if (textView != null) {
                        }
                        textView2 = this.restartTopicButton;
                        if (textView2 != null) {
                        }
                        translateButton = this.translateButton;
                        if (translateButton != null) {
                        }
                        businessBotButton = this.bizBotButton;
                        if (businessBotButton != null) {
                        }
                        imageView = this.closeReportSpam;
                        if (imageView != null) {
                        }
                        if (!z3) {
                        }
                        if (!z4) {
                            this.shownTranslateTopic = false;
                        }
                        this.addToContactsButtonArchive = false;
                        if (this.currentUser == null) {
                        }
                        if (user != null) {
                        }
                        if (!z15) {
                        }
                        z7 = false;
                        textView6 = this.chatWithAdminTextView;
                        if (textView6 != null) {
                        }
                        if (!this.userBlocked) {
                        }
                        z6 = false;
                        int dp3 = AndroidUtilities.dp(50.0f);
                        if (emojiStatus2 == null) {
                        }
                        linksTextView = this.emojiStatusSpamHint;
                        if (linksTextView != null) {
                        }
                        view = this.topViewSeparator1;
                        if (view != null) {
                        }
                        view2 = this.topViewSeparator2;
                        if (view2 != null) {
                        }
                        float f2 = 0.0f;
                        if (z4) {
                        }
                        createTopPanel();
                        if (this.topChatPanelView != null) {
                        }
                    }
                }
                z5 = false;
                if (z3) {
                }
                if (!z4) {
                }
                this.shownTranslateTopic = true;
                if (z3) {
                }
                if (!z2) {
                }
                createTopPanel();
                if (this.topChatPanelView == null) {
                }
                if (z5) {
                }
                animatorSet = 0;
                if (z4) {
                }
                if (this.shownTranslateTopic) {
                }
                emojiStatus2 = animatorSet;
                z8 = false;
                z9 = false;
                z10 = false;
                z6 = true;
                z11 = false;
                z12 = false;
                z13 = false;
                z15 = false;
                textView = this.reportSpamButton;
                int i522 = 8;
                if (textView != null) {
                }
                textView2 = this.restartTopicButton;
                if (textView2 != null) {
                }
                translateButton = this.translateButton;
                if (translateButton != null) {
                }
                businessBotButton = this.bizBotButton;
                if (businessBotButton != null) {
                }
                imageView = this.closeReportSpam;
                if (imageView != null) {
                }
                if (!z3) {
                }
                if (!z4) {
                }
                this.addToContactsButtonArchive = false;
                if (this.currentUser == null) {
                }
                if (user != null) {
                }
                if (!z15) {
                }
                z7 = false;
                textView6 = this.chatWithAdminTextView;
                if (textView6 != null) {
                }
                if (!this.userBlocked) {
                }
                z6 = false;
                int dp32 = AndroidUtilities.dp(50.0f);
                if (emojiStatus2 == null) {
                }
                linksTextView = this.emojiStatusSpamHint;
                if (linksTextView != null) {
                }
                view = this.topViewSeparator1;
                if (view != null) {
                }
                view2 = this.topViewSeparator2;
                if (view2 != null) {
                }
                float f22 = 0.0f;
                if (z4) {
                }
                createTopPanel();
                if (this.topChatPanelView != null) {
                }
            }
        }
        emojiStatus = null;
        if (isInPreviewMode()) {
        }
        if (getUserConfig().isPremium()) {
        }
        if (this.currentEncryptedChat == null) {
            if (notificationsSettings.getLong("dialog_botid" + j, 0L) != 0) {
            }
        }
        z5 = false;
        if (z3) {
        }
        if (!z4) {
        }
        this.shownTranslateTopic = true;
        if (z3) {
        }
        if (!z2) {
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
        }
        if (z5) {
        }
        animatorSet = 0;
        if (z4) {
        }
        if (this.shownTranslateTopic) {
        }
        emojiStatus2 = animatorSet;
        z8 = false;
        z9 = false;
        z10 = false;
        z6 = true;
        z11 = false;
        z12 = false;
        z13 = false;
        z15 = false;
        textView = this.reportSpamButton;
        int i5222 = 8;
        if (textView != null) {
        }
        textView2 = this.restartTopicButton;
        if (textView2 != null) {
        }
        translateButton = this.translateButton;
        if (translateButton != null) {
        }
        businessBotButton = this.bizBotButton;
        if (businessBotButton != null) {
        }
        imageView = this.closeReportSpam;
        if (imageView != null) {
        }
        if (!z3) {
        }
        if (!z4) {
        }
        this.addToContactsButtonArchive = false;
        if (this.currentUser == null) {
        }
        if (user != null) {
        }
        if (!z15) {
        }
        z7 = false;
        textView6 = this.chatWithAdminTextView;
        if (textView6 != null) {
        }
        if (!this.userBlocked) {
        }
        z6 = false;
        int dp322 = AndroidUtilities.dp(50.0f);
        if (emojiStatus2 == null) {
        }
        linksTextView = this.emojiStatusSpamHint;
        if (linksTextView != null) {
        }
        view = this.topViewSeparator1;
        if (view != null) {
        }
        view2 = this.topViewSeparator2;
        if (view2 != null) {
        }
        float f222 = 0.0f;
        if (z4) {
        }
        createTopPanel();
        if (this.topChatPanelView != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTopicButtons() {
        TLRPC.TL_forumTopic tL_forumTopic;
        ActionBarMenuItem.Item item = this.closeTopicItem;
        if (item != null) {
            TLRPC.Chat chat = this.currentChat;
            item.setVisibility((chat == null || !ChatObject.canManageTopic(this.currentAccount, chat, this.forumTopic) || (tL_forumTopic = this.forumTopic) == null || tL_forumTopic.closed) ? 8 : 0);
        }
    }

    private void updateTopicHeader() {
        TLRPC.TL_forumTopic tL_forumTopic;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && (tL_forumTopic = this.forumTopic) != null) {
            chatAvatarContainer.setTitle(tL_forumTopic.title);
        }
        updateTopicTitleIcon();
    }

    private void updateTopicTitleIcon() {
        ChatAvatarContainer chatAvatarContainer;
        if (this.forumTopic == null || (chatAvatarContainer = this.avatarContainer) == null) {
            return;
        }
        chatAvatarContainer.getAvatarImageView().setVisibility(0);
        ForumUtilities.setTopicIcon(this.avatarContainer.getAvatarImageView(), this.forumTopic, true, true, this.themeDelegate);
    }

    private void updateTranslateItemVisibility() {
        ActionBarMenuItem.Item item = this.translateItem;
        if (item == null) {
            return;
        }
        item.setVisibility((getMessagesController().getTranslateController().isTranslateDialogHidden(getDialogId()) && getMessagesController().getTranslateController().isDialogTranslatable(getDialogId())) ? 0 : 8);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateVisibleRows() {
        updateVisibleRows(false);
    }

    private void updateVisibleRows(Utilities.CallbackReturn callbackReturn) {
        int i;
        int i2;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        if (!this.wasManualScroll && this.unreadMessageObject != null) {
            int childCount = recyclerListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    MessageObject messageObject2 = this.unreadMessageObject;
                    if (messageObject == messageObject2) {
                        if (this.messages.indexOf(messageObject2) >= 0) {
                            i = this.chatAdapter.messagesStartRow + this.messages.indexOf(this.unreadMessageObject);
                            i2 = getScrollingOffsetForView(childAt);
                        }
                    }
                }
                i3++;
            }
        }
        i = -1;
        i2 = 0;
        int childCount2 = this.chatListView.getChildCount();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditingMessageObject();
        }
        for (int i4 = 0; i4 < childCount2; i4++) {
            View childAt2 = this.chatListView.getChildAt(i4);
            if (childAt2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (((Boolean) callbackReturn.run(messageObject3)).booleanValue()) {
                    messageObject3.forceUpdate = true;
                    chatMessageCell.setMessageObject(messageObject3, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    this.chatAdapter.updateRowAtPosition(this.chatListView.getChildAdapterPosition(chatMessageCell));
                }
            }
        }
        if (i != -1) {
            this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
        }
    }

    private void updateVisibleRows(boolean z) {
        int i;
        int i2;
        boolean z2;
        boolean z3;
        String str;
        String str2;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        boolean z4 = false;
        if (!this.wasManualScroll && this.unreadMessageObject != null) {
            int childCount = recyclerListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    MessageObject messageObject2 = this.unreadMessageObject;
                    if (messageObject == messageObject2) {
                        if (this.messages.indexOf(messageObject2) >= 0) {
                            i = this.chatAdapter.messagesStartRow + this.messages.indexOf(this.unreadMessageObject);
                            i2 = getScrollingOffsetForView(childAt);
                        }
                    }
                }
                i3++;
            }
        }
        i = -1;
        i2 = 0;
        int childCount2 = this.chatListView.getChildCount();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditingMessageObject();
        }
        TLRPC.ChatFull chatFull = this.chatInfo;
        long j = 0;
        long j2 = chatFull != null ? chatFull.linked_chat_id : 0L;
        int i4 = 0;
        while (i4 < childCount2) {
            View childAt2 = this.chatListView.getChildAt(i4);
            if (childAt2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (this.actionBar.isActionModeShowed() || isReport()) {
                    this.highlightMessageQuoteFirst = z4;
                    this.highlightMessageQuoteFirstTime = j;
                    this.highlightMessageQuote = null;
                    ArrayList arrayList = this.threadMessageObjects;
                    chatMessageCell.setCheckBoxVisible(arrayList == null || !arrayList.contains(messageObject3), true);
                    int i5 = messageObject3.getDialogId() == this.dialog_id ? 0 : 1;
                    if (this.selectedMessagesIds[i5].indexOfKey(messageObject3.getId()) >= 0) {
                        setCellSelectionBackground(messageObject3, chatMessageCell, i5, true);
                        z2 = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(z4);
                        chatMessageCell.setChecked(z4, z4, true);
                        z2 = false;
                    }
                    z3 = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(z4);
                    chatMessageCell.setCheckBoxVisible(z4, true);
                    chatMessageCell.setChecked(z4, z4, true);
                    z2 = false;
                    z3 = false;
                }
                if ((!chatMessageCell.getMessageObject().deleted || chatMessageCell.linkedChatId != j2) && !z) {
                    chatMessageCell.setIsUpdating(true);
                    TLRPC.ChatFull chatFull2 = this.chatInfo;
                    chatMessageCell.linkedChatId = chatFull2 != null ? chatFull2.linked_chat_id : 0L;
                    chatMessageCell.setMessageObject(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    chatMessageCell.setIsUpdating(false);
                }
                if (chatMessageCell != this.scrimView) {
                    chatMessageCell.setCheckPressed(!z3, z3 && z2);
                }
                chatMessageCell.setHighlighted((this.highlightMessageId == Integer.MAX_VALUE || messageObject3 == null || messageObject3.getId() != this.highlightMessageId) ? false : true);
                if (this.highlightMessageId != Integer.MAX_VALUE) {
                    startMessageUnselect();
                }
                if (chatMessageCell.isHighlighted() && this.highlightMessageQuote != null) {
                    long currentTimeMillis = System.currentTimeMillis();
                    if (!chatMessageCell.setHighlightedText(this.highlightMessageQuote, true, this.highlightMessageQuoteOffset, this.highlightMessageQuoteFirst || currentTimeMillis - this.highlightMessageQuoteFirstTime < 200) && this.showNoQuoteAlert) {
                        showNoQuoteFound();
                    }
                    if (this.highlightMessageQuoteFirst) {
                        this.highlightMessageQuoteFirstTime = currentTimeMillis;
                    }
                    this.highlightMessageQuoteFirst = false;
                    this.showNoQuoteAlert = false;
                } else if (this.chatMode != 7 || this.searchingHashtag == null || (str2 = this.searchingQuery) == null) {
                    if (this.searchItem != null && this.searchItemVisible) {
                        if (getMediaDataController().isMessageFound(messageObject3.getId(), messageObject3.getDialogId() == this.mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
                            str = getMediaDataController().getLastSearchQuery();
                            chatMessageCell.setHighlightedText(str);
                        }
                    }
                    str = null;
                    chatMessageCell.setHighlightedText(str);
                } else {
                    chatMessageCell.setHighlightedText(str2);
                }
                chatMessageCell.setSpoilersSuppressed(this.chatListView.getScrollState() != 0);
            } else if (childAt2 instanceof ChatActionCell) {
                ChatActionCell chatActionCell = (ChatActionCell) childAt2;
                if (!z) {
                    chatActionCell.setMessageObject(chatActionCell.getMessageObject());
                }
                chatActionCell.setSpoilersSuppressed(this.chatListView.getScrollState() != 0);
            }
            i4++;
            z4 = false;
            j = 0;
        }
        if (i != -1) {
            this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
        }
    }

    private void updateVisibleWallpaperActions() {
        MessageObject messageObject;
        if (this.chatListView == null || this.chatAdapter == null) {
            return;
        }
        for (int i = 0; i < this.chatListView.getChildCount(); i++) {
            View childAt = this.chatListView.getChildAt(i);
            int childAdapterPosition = this.chatListView.getChildAdapterPosition(childAt) - this.chatAdapter.messagesStartRow;
            if ((childAt instanceof ChatActionCell) && childAdapterPosition >= 0 && childAdapterPosition < this.messages.size() && (messageObject = (MessageObject) this.messages.get(childAdapterPosition)) != null && messageObject.isWallpaperForBoth()) {
                ((ChatActionCell) childAt).setMessageObject(messageObject, true);
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean allowFinishFragmentInsteadOfRemoveFromStack() {
        return !this.inPreviewMode;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    protected boolean allowPresentFragment() {
        return !this.inPreviewMode;
    }

    public boolean allowSendGifs() {
        TLRPC.TL_chatBannedRights tL_chatBannedRights;
        return (ChatObject.isChannel(this.currentChat) && (tL_chatBannedRights = this.currentChat.banned_rights) != null && tL_chatBannedRights.send_gifs) ? false : true;
    }

    public void applyChatLinkMessageMaybe() {
        ArrayList<TLRPC.MessageEntity> arrayList;
        if (this.chatActivityEnterView == null || this.chatMode != 0 || this.resolvedChatLink == null) {
            return;
        }
        CharSequence applyMessageEntities = ChatActivityEnterView.applyMessageEntities((UserConfig.getInstance(this.currentAccount).isPremium() || UserConfig.getInstance(this.currentAccount).getClientUserId() == this.dialog_id || (arrayList = this.resolvedChatLink.entities) == null) ? this.resolvedChatLink.entities : (ArrayList) Collection$-EL.stream(arrayList).filter(new Predicate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda280
            @Override // j$.util.function.Predicate
            public /* synthetic */ Predicate and(Predicate predicate) {
                return Predicate.-CC.$default$and(this, predicate);
            }

            @Override // j$.util.function.Predicate
            public /* synthetic */ Predicate negate() {
                return Predicate.-CC.$default$negate(this);
            }

            @Override // j$.util.function.Predicate
            public /* synthetic */ Predicate or(Predicate predicate) {
                return Predicate.-CC.$default$or(this, predicate);
            }

            @Override // j$.util.function.Predicate
            public final boolean test(Object obj) {
                boolean lambda$applyChatLinkMessageMaybe$213;
                lambda$applyChatLinkMessageMaybe$213 = ChatActivity.this.lambda$applyChatLinkMessageMaybe$213((TLRPC.MessageEntity) obj);
                return lambda$applyChatLinkMessageMaybe$213;
            }
        }).collect(Collectors.toCollection(new ChatActivity$$ExternalSyntheticLambda281())), this.resolvedChatLink.message, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt());
        if (applyMessageEntities != null && applyMessageEntities.length() > 0 && applyMessageEntities.charAt(0) == '@') {
            applyMessageEntities = TextUtils.concat(" ", applyMessageEntities);
        }
        this.chatActivityEnterView.setFieldText(applyMessageEntities, true, true);
        this.resolvedChatLink = null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v12, types: [org.telegram.ui.Components.ChatActivityEnterView] */
    /* JADX WARN: Type inference failed for: r8v10, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r8v11, types: [android.text.SpannableStringBuilder, android.text.Spannable, android.text.Editable] */
    /* JADX WARN: Type inference failed for: r8v9, types: [java.lang.String] */
    public void applyDraftMaybe(boolean z) {
        TLRPC.DraftMessage draft;
        Long l;
        ?? r8;
        TextStyleSpan textStyleSpan;
        Paint.FontMetricsInt fontMetricsInt;
        TLRPC.TL_forumTopic findTopic;
        MessageObject messageObject;
        TLRPC.InputReplyTo inputReplyTo;
        if (this.chatActivityEnterView != null) {
            int i = this.chatMode;
            if (i == 0 || (i == 3 && getUserConfig().getClientUserId() == getSavedDialogId())) {
                if (isForumInViewAsMessagesMode()) {
                    Pair<Long, TLRPC.DraftMessage> oneThreadDraft = getMediaDataController().getOneThreadDraft(this.dialog_id);
                    if (oneThreadDraft != null) {
                        l = (Long) oneThreadDraft.first;
                        draft = (TLRPC.DraftMessage) oneThreadDraft.second;
                    } else {
                        draft = null;
                        l = null;
                    }
                } else {
                    draft = getMediaDataController().getDraft(this.dialog_id, this.chatMode == 3 ? 0L : this.threadMessageId);
                    l = null;
                }
                MediaDataController.DraftVoice draftVoice = MediaDataController.getInstance(this.currentAccount).getDraftVoice(this.dialog_id, getTopicId());
                TLRPC.Message draftMessage = (draft == null || (inputReplyTo = draft.reply_to) == null || inputReplyTo.reply_to_msg_id == 0) ? null : getMediaDataController().getDraftMessage(this.dialog_id, l != null ? l.longValue() : this.threadMessageId);
                if (this.chatActivityEnterView.getFieldText() == null || (this.chatMode == 0 && getUserConfig().getClientUserId() == getDialogId() && draft != null && this.appliedDraftDate < draft.date)) {
                    if (draftVoice != null) {
                        this.chatActivityEnterView.setVoiceDraft(draftVoice);
                    } else if (draft != null) {
                        this.appliedDraftDate = draft.date;
                        this.chatActivityEnterView.setWebPage(null, !draft.no_webpage);
                        if (draft.entities.isEmpty()) {
                            r8 = draft.message;
                        } else {
                            r8 = SpannableStringBuilder.valueOf(draft.message);
                            MediaDataController.sortEntities(draft.entities);
                            for (int i2 = 0; i2 < draft.entities.size(); i2++) {
                                TLRPC.MessageEntity messageEntity = draft.entities.get(i2);
                                boolean z2 = messageEntity instanceof TLRPC.TL_inputMessageEntityMentionName;
                                if (z2 || (messageEntity instanceof TLRPC.TL_messageEntityMentionName)) {
                                    long j = z2 ? ((TLRPC.TL_inputMessageEntityMentionName) messageEntity).user_id.user_id : ((TLRPC.TL_messageEntityMentionName) messageEntity).user_id;
                                    if (messageEntity.offset + messageEntity.length < r8.length() && r8.charAt(messageEntity.offset + messageEntity.length) == ' ') {
                                        messageEntity.length++;
                                    }
                                    URLSpanUserMention uRLSpanUserMention = new URLSpanUserMention("" + j, 3);
                                    int i3 = messageEntity.offset;
                                    r8.setSpan(uRLSpanUserMention, i3, messageEntity.length + i3, 33);
                                } else {
                                    if ((messageEntity instanceof TLRPC.TL_messageEntityCode) || (messageEntity instanceof TLRPC.TL_messageEntityPre)) {
                                        TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
                                        textStyleRun.flags |= 4;
                                        textStyleSpan = new TextStyleSpan(textStyleRun);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityBold) {
                                        TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
                                        textStyleRun2.flags |= 1;
                                        textStyleSpan = new TextStyleSpan(textStyleRun2);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityItalic) {
                                        TextStyleSpan.TextStyleRun textStyleRun3 = new TextStyleSpan.TextStyleRun();
                                        textStyleRun3.flags |= 2;
                                        textStyleSpan = new TextStyleSpan(textStyleRun3);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityStrike) {
                                        TextStyleSpan.TextStyleRun textStyleRun4 = new TextStyleSpan.TextStyleRun();
                                        textStyleRun4.flags |= 8;
                                        textStyleSpan = new TextStyleSpan(textStyleRun4);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityUnderline) {
                                        TextStyleSpan.TextStyleRun textStyleRun5 = new TextStyleSpan.TextStyleRun();
                                        textStyleRun5.flags |= 16;
                                        textStyleSpan = new TextStyleSpan(textStyleRun5);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityTextUrl) {
                                        URLSpanReplacement uRLSpanReplacement = new URLSpanReplacement(messageEntity.url);
                                        int i4 = messageEntity.offset;
                                        r8.setSpan(uRLSpanReplacement, i4, messageEntity.length + i4, 33);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntitySpoiler) {
                                        TextStyleSpan.TextStyleRun textStyleRun6 = new TextStyleSpan.TextStyleRun();
                                        textStyleRun6.flags |= 256;
                                        textStyleSpan = new TextStyleSpan(textStyleRun6);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityBlockquote) {
                                        int i5 = messageEntity.offset;
                                        QuoteSpan.putQuoteToEditable(r8, i5, messageEntity.length + i5, messageEntity.collapsed);
                                    } else if (messageEntity instanceof TLRPC.TL_messageEntityCustomEmoji) {
                                        try {
                                            fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                                        } catch (Exception e) {
                                            FileLog.e((Throwable) e, false);
                                            fontMetricsInt = null;
                                        }
                                        TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji = (TLRPC.TL_messageEntityCustomEmoji) messageEntity;
                                        AnimatedEmojiSpan animatedEmojiSpan = tL_messageEntityCustomEmoji.document != null ? new AnimatedEmojiSpan(tL_messageEntityCustomEmoji.document, fontMetricsInt) : new AnimatedEmojiSpan(tL_messageEntityCustomEmoji.document_id, fontMetricsInt);
                                        int i6 = messageEntity.offset;
                                        r8.setSpan(animatedEmojiSpan, i6, messageEntity.length + i6, 33);
                                    }
                                    int i7 = messageEntity.offset;
                                    MediaDataController.addStyleToText(textStyleSpan, i7, messageEntity.length + i7, r8, true);
                                }
                            }
                        }
                        this.chatActivityEnterView.setFieldText(r8, true, true);
                        if (getArguments().getBoolean("hasUrl", false)) {
                            this.chatActivityEnterView.setSelection(draft.message.indexOf(10) + 1);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda74
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$applyDraftMaybe$214();
                                }
                            }, 700L);
                        }
                        this.chatActivityEnterView.setEffectId(draft.effect);
                    }
                } else if (z && draft == null) {
                    this.chatActivityEnterView.setFieldText("");
                    this.chatActivityEnterView.setEffectId(0L);
                    hideFieldPanel(true);
                }
                MessageObject messageObject2 = this.replyingMessageObject;
                if (messageObject2 == null || this.threadMessageObject == messageObject2) {
                    if (draftMessage != null && ((messageObject = this.threadMessageObject) == null || messageObject.getId() != draftMessage.id)) {
                        MessageObject messageObject3 = new MessageObject(this.currentAccount, draftMessage, (AbstractMap<Long, TLRPC.User>) getMessagesController().getUsers(), false, false);
                        this.replyingMessageObject = messageObject3;
                        TLRPC.InputReplyTo inputReplyTo2 = draft.reply_to;
                        if (inputReplyTo2 != null) {
                            int i8 = inputReplyTo2.flags;
                            if ((i8 & 4) != 0) {
                                this.replyingQuote = ReplyQuote.from(messageObject3, inputReplyTo2.quote_text, (i8 & 16) != 0 ? inputReplyTo2.quote_offset : -1);
                            }
                        }
                        checkNewMessagesOnQuoteEdit(false);
                        ReplyQuote replyQuote = this.replyingQuote;
                        if (replyQuote != null) {
                            showFieldPanelForReplyQuote(this.replyingMessageObject, replyQuote);
                        } else {
                            showFieldPanelForReply(this.replyingMessageObject);
                        }
                    } else if (l == null || l.longValue() == 0 || this.currentChat == null || (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.id, l.longValue())) == null || findTopic.topicStartMessage == null) {
                        return;
                    } else {
                        MessageObject messageObject4 = new MessageObject(this.currentAccount, findTopic.topicStartMessage, (AbstractMap<Long, TLRPC.User>) getMessagesController().getUsers(), false, false);
                        this.replyingMessageObject = messageObject4;
                        messageObject4.replyToForumTopic = findTopic;
                        showFieldPanelForReply(messageObject4);
                    }
                    updateBottomOverlay();
                }
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean canBeginSlide() {
        return !(this.chatMode == 5 && (this.messages.isEmpty() || this.threadMessageId == 0)) && this.swipeBackEnabled && this.chatActivityEnterView.swipeToBackEnabled() && this.pullingDownOffset == 0.0f;
    }

    public boolean canScheduleMessage() {
        if (this.chatMode == 5) {
            return false;
        }
        if ((!getMessagesController().isForum(getDialogId()) || this.isTopic) && this.currentEncryptedChat == null) {
            BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
            if (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) {
                return !isThreadChat() || this.isTopic;
            }
            return false;
        }
        return false;
    }

    public boolean canSendMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0);
    }

    public void checkAdjustResize() {
        if (this.isInsideContainer) {
            return;
        }
        if (isReport()) {
            AndroidUtilities.requestAdjustNothing(getParentActivity(), this.classGuid);
        } else {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public void checkAndUpdateAvatar() {
        if (this.isTopic) {
            return;
        }
        if (this.currentUser != null) {
            TLRPC.User user = getMessagesController().getUser(Long.valueOf(this.currentUser.id));
            if (user == null) {
                return;
            }
            this.currentUser = user;
        } else if (this.currentChat != null) {
            TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id));
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.checkAndUpdateAvatar();
        }
    }

    public boolean checkCanRemoveRestrictionsByBoosts() {
        boolean isPossibleRemoveChatRestrictionsByBoosts = ChatObject.isPossibleRemoveChatRestrictionsByBoosts(this.chatInfo);
        if (isPossibleRemoveChatRestrictionsByBoosts) {
            AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
            LimitReachedBottomSheet.openBoostsForRemoveRestrictions(this, this.boostsStatus, this.canApplyBoosts, this.dialog_id, false);
        }
        return isPossibleRemoveChatRestrictionsByBoosts;
    }

    public void checkEditLinkRemoved(CharSequence charSequence) {
        TLRPC.WebPage webPage;
        TLRPC.Message message;
        TLRPC.MessageMedia messageMedia;
        TLRPC.WebPage webPage2;
        MessageObject messageObject = this.editingMessageObject;
        boolean z = (messageObject == null || (message = messageObject.messageOwner) == null || (messageMedia = message.media) == null || (webPage2 = messageMedia.webpage) == null || (webPage2 instanceof TLRPC.TL_webPageEmpty) || !messageMedia.manual) ? false : true;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messageObject == null) {
            return;
        }
        int i = messageObject.type;
        if ((i == 0 || i == 19) && (webPage = this.foundWebPage) != null && !messagePreviewParams.hasLink(charSequence, webPage.url) && z) {
            this.foundWebPage = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setWebPage(null, true);
            }
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 != null) {
                int i2 = this.currentAccount;
                CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                MessageObject messageObject2 = this.replyingMessageObject;
                messagePreviewParams2.updateLink(i2, null, fieldText, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
            }
            editResetMediaManual();
            fallbackFieldPanel();
        }
    }

    public boolean checkRecordLocked(final boolean z) {
        int i;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString(R.string.DiscardVideoMessageTitle));
            i = R.string.DiscardVideoMessageDescription;
        } else {
            builder.setTitle(LocaleController.getString(R.string.DiscardVoiceMessageTitle));
            i = R.string.DiscardVoiceMessageDescription;
        }
        builder.setMessage(LocaleController.getString(i));
        builder.setPositiveButton(LocaleController.getString(R.string.DiscardVoiceMessageAction), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda174
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$checkRecordLocked$299(z, dialogInterface, i2);
            }
        });
        builder.setNegativeButton(LocaleController.getString(R.string.Continue), null);
        showDialog(builder.create());
        return true;
    }

    public boolean checkSlowMode(View view) {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            showSlowModeHint(view, true, slowModeTimer);
            return true;
        }
        return false;
    }

    public boolean checkSlowModeAlert() {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString(R.string.Slowmode)).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, slowModeTimer))).setPositiveButton(LocaleController.getString(R.string.OK), null).show();
            return false;
        }
        return true;
    }

    public void clearSearch() {
        SearchItemListener searchItemListener = this.searchItemListener;
        if (searchItemListener != null) {
            searchItemListener.onSearchCollapse();
        }
        this.searching = false;
        this.searchItemVisible = false;
        updateBottomOverlay();
        updateSearchUpDownButtonVisibility(true);
    }

    public void clearSelectionMode() {
        clearSelectionMode(false);
    }

    public void clearSelectionMode(boolean z) {
        for (int i = 1; i >= 0; i--) {
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows(z);
        updateSelectedMessageReactions();
    }

    public void closeMenu() {
        closeMenu(true);
    }

    /* JADX WARN: Removed duplicated region for block: B:183:0x051c  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x0577  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x057a  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x05bb  */
    /* JADX WARN: Removed duplicated region for block: B:213:0x05de  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x0613  */
    /* JADX WARN: Removed duplicated region for block: B:232:0x0648  */
    /* JADX WARN: Removed duplicated region for block: B:235:0x065e  */
    /* JADX WARN: Removed duplicated region for block: B:347:0x090e  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x0970  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x09f7  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x0ac1  */
    /* JADX WARN: Removed duplicated region for block: B:359:0x0b64  */
    /* JADX WARN: Removed duplicated region for block: B:360:0x0b81  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x0c50  */
    /* JADX WARN: Removed duplicated region for block: B:364:0x0c6d  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x0d8f  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x0def  */
    /* JADX WARN: Removed duplicated region for block: B:376:0x0df1  */
    /* JADX WARN: Removed duplicated region for block: B:379:0x0e09  */
    /* JADX WARN: Removed duplicated region for block: B:380:0x0e0c  */
    /* JADX WARN: Removed duplicated region for block: B:383:0x0e41  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x0e60  */
    /* JADX WARN: Removed duplicated region for block: B:387:0x0f97  */
    /* JADX WARN: Removed duplicated region for block: B:388:0x0fb6  */
    /* JADX WARN: Removed duplicated region for block: B:391:0x10b4  */
    /* JADX WARN: Removed duplicated region for block: B:392:0x10d3  */
    /* JADX WARN: Removed duplicated region for block: B:395:0x113c  */
    /* JADX WARN: Removed duplicated region for block: B:400:0x11fe  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x1200  */
    /* JADX WARN: Removed duplicated region for block: B:409:0x136a  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x136d  */
    /* JADX WARN: Removed duplicated region for block: B:413:0x138e  */
    /* JADX WARN: Removed duplicated region for block: B:415:0x1399  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x13af  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x13f2  */
    /* JADX WARN: Removed duplicated region for block: B:442:0x142f  */
    /* JADX WARN: Removed duplicated region for block: B:445:0x145a  */
    /* JADX WARN: Removed duplicated region for block: B:448:0x14d9  */
    /* JADX WARN: Removed duplicated region for block: B:461:0x162a  */
    /* JADX WARN: Removed duplicated region for block: B:491:0x18f8  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x1956  */
    /* JADX WARN: Removed duplicated region for block: B:507:0x19fc  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x1a16  */
    /* JADX WARN: Removed duplicated region for block: B:516:0x1a78  */
    /* JADX WARN: Removed duplicated region for block: B:519:0x1a83  */
    /* JADX WARN: Removed duplicated region for block: B:520:0x1a92  */
    /* JADX WARN: Removed duplicated region for block: B:523:0x1ad0  */
    /* JADX WARN: Removed duplicated region for block: B:525:0x1adb  */
    /* JADX WARN: Removed duplicated region for block: B:530:0x1b01  */
    /* JADX WARN: Removed duplicated region for block: B:534:0x1b3f  */
    /* JADX WARN: Removed duplicated region for block: B:535:0x1b48  */
    /* JADX WARN: Removed duplicated region for block: B:538:0x1be9  */
    /* JADX WARN: Removed duplicated region for block: B:541:0x1c3c  */
    /* JADX WARN: Removed duplicated region for block: B:544:0x1c74  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public View createView(final Context context) {
        ArrayList arrayList;
        int i;
        int i2;
        int i3;
        float f;
        ActionBarMenu actionBarMenu;
        CharSequence charSequence;
        MentionsContainerView mentionsContainerView;
        CharSequence charSequence2;
        TLRPC.Chat chat;
        int i4;
        Drawable createCircleDrawable;
        Drawable createCircleDrawable2;
        Drawable createCircleDrawable3;
        Drawable createCircleDrawable4;
        Drawable createCircleDrawable5;
        ChatActivityEnterView chatActivityEnterView;
        ChatActivityEnterView.ChatActivityEnterViewDelegate chatActivityEnterViewDelegate;
        TLRPC.ChatFull chatFull;
        String str;
        int i5;
        TLRPC.User user;
        int i6;
        int i7;
        boolean z;
        TextSelectionHelper.TextSelectionOverlay overlayView;
        MessageObject messageObject;
        boolean z2;
        int i8;
        ChatActivityEnterView chatActivityEnterView2;
        TLRPC.TL_forumTopic tL_forumTopic;
        int i9;
        ActionBarMenu actionBarMenu2;
        TLRPC.UserFull userFull;
        TLRPC.Chat chat2;
        TLRPC.User user2;
        TLRPC.User user3;
        ActionBarMenuItem actionBarMenuItem;
        int i10;
        int i11;
        int i12;
        MessageObject messageObject2;
        Timer create = Timer.create("ChatActivity.createView");
        if (this.textSelectionHelper == null) {
            ArrayList arrayList2 = textSelectionHelpersCache;
            if (arrayList2 == null || arrayList2.isEmpty()) {
                Timer.Task start = Timer.start(create, "new ChatActivityTextSelectionHelper");
                this.textSelectionHelper = new ChatActivityTextSelectionHelper();
                Timer.done(start);
            } else {
                this.textSelectionHelper = (ChatActivityTextSelectionHelper) textSelectionHelpersCache.remove(0);
            }
            this.textSelectionHelper.setChatActivity(this);
        }
        if (isReport()) {
            this.actionBar.setBackgroundColor(getThemedColor(Theme.key_actionBarActionModeDefault));
            ActionBar actionBar = this.actionBar;
            int i13 = Theme.key_actionBarActionModeDefaultIcon;
            actionBar.setItemsColor(getThemedColor(i13), false);
            this.actionBar.setItemsBackgroundColor(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), false);
            this.actionBar.setTitleColor(getThemedColor(i13));
            this.actionBar.setSubtitleColor(getThemedColor(i13));
        }
        if (this.isInsideContainer) {
            this.actionBar.setVisibility(8);
        }
        this.actionBarBackgroundPaint.setColor(getThemedColor(Theme.key_actionBarDefault));
        this.sharedResources = new ChatMessageSharedResources(context);
        LongSparseArray longSparseArray = chatMessageCellsCache;
        ArrayList arrayList3 = (ArrayList) longSparseArray.get(this.currentAccount);
        if (arrayList3 == null) {
            arrayList = new ArrayList();
            longSparseArray.put(this.currentAccount, arrayList);
        } else {
            arrayList = arrayList3;
        }
        if (arrayList.size() < 10) {
            int size = 15 - arrayList.size();
            Timer.Task start2 = Timer.start(create, "create ChatMessageCell n=" + size);
            int i14 = 0;
            while (i14 < size) {
                ArrayList arrayList4 = arrayList;
                arrayList4.add(new ChatMessageCell(context, this.currentAccount, true, this.sharedResources, this.themeDelegate));
                i14++;
                arrayList = arrayList4;
                size = size;
            }
            i = 8;
            i2 = 40;
            Timer.done(start2);
        } else {
            i = 8;
            i2 = 40;
        }
        for (int i15 = 1; i15 >= 0; i15--) {
            this.selectedMessagesIds[i15].clear();
            this.selectedMessagesCanCopyIds[i15].clear();
            this.selectedMessagesCanStarIds[i15].clear();
        }
        this.scheduledOrNoSoundHint = null;
        this.scheduledHint = null;
        this.infoTopView = null;
        this.aspectRatioFrameLayout = null;
        this.videoTextureView = null;
        this.mediaBanTooltip = null;
        this.noSoundHintView = null;
        this.forwardHintView = null;
        this.checksHintView = null;
        this.textSelectionHint = null;
        this.emojiButtonRed = null;
        this.gifHintTextView = null;
        this.emojiHintTextView = null;
        this.pollHintView = null;
        this.timerHintView = null;
        this.videoPlayerContainer = null;
        this.voiceHintTextView = null;
        this.blurredView = null;
        this.dummyMessageCell = null;
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canForwardMessagesCount = 0;
        this.cantSaveMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.hasOwnBackground = true;
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            try {
                if (chatAttachAlert.isShowing()) {
                    this.chatAttachAlert.dismiss();
                }
            } catch (Exception unused) {
            }
            this.chatAttachAlert.onDestroy();
            this.chatAttachAlert = null;
        }
        Theme.createChatResources(context, false);
        this.actionBar.setAddToContainer(false);
        if (this.inPreviewMode) {
            this.actionBar.setBackButtonDrawable(null);
        } else {
            this.actionBar.setBackButtonDrawable(new BackDrawable(isReport()));
        }
        this.actionBar.setActionBarMenuOnItemClick(new 13(context));
        ImageView backButton = this.actionBar.getBackButton();
        backButton.setOnTouchListener(new 14(backButton));
        this.actionBar.setInterceptTouchEventListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda95
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view, MotionEvent motionEvent) {
                boolean lambda$createView$18;
                lambda$createView$18 = ChatActivity.this.lambda$createView$18(view, motionEvent);
                return lambda$createView$18;
            }
        });
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer2 = new ChatAvatarContainer(context, this, this.currentEncryptedChat != null, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.15
            @Override // org.telegram.ui.Components.ChatAvatarContainer
            protected boolean canSearch() {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.isInsideContainer && !chatActivity.isInPreviewMode() && !((BaseFragment) ChatActivity.this).inBubbleMode) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    if (chatActivity2.searchItem != null && !chatActivity2.searching && (!ChatActivity.this.isThreadChat() || ChatActivity.this.isTopic)) {
                        return true;
                    }
                }
                return false;
            }

            @Override // org.telegram.ui.Components.ChatAvatarContainer
            protected void openSearch() {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.lambda$openSearchWithText$303(chatActivity.isSupportedTags() ? "" : null);
            }

            @Override // org.telegram.ui.Components.ChatAvatarContainer
            protected boolean useAnimatedSubtitle() {
                return ChatActivity.this.chatMode == 3;
            }
        };
        this.avatarContainer = chatAvatarContainer2;
        chatAvatarContainer2.allowShorterStatus = true;
        chatAvatarContainer2.premiumIconHiddable = true;
        chatAvatarContainer2.allowDrawStories = this.dialog_id < 0 && !this.isTopic;
        chatAvatarContainer2.setClipChildren(false);
        AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, true, 1.0f, false);
        updateTopicTitleIcon();
        if (this.inPreviewMode || this.inBubbleMode || this.isInsideContainer) {
            this.avatarContainer.setOccupyStatusBar(false);
        }
        if (isReport()) {
            this.actionBar.setTitle(this.reportTitle);
            this.actionBar.setSubtitle(LocaleController.getString(R.string.ReportSelectMessages));
        } else {
            final int i16 = this.startLoadFromDate;
            if (i16 != 0) {
                this.actionBar.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda103
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createView$19(i16, view);
                    }
                });
                this.actionBar.setTitle(LocaleController.formatDateChat(this.startLoadFromDate, false));
                this.actionBar.setSubtitle(LocaleController.getString(R.string.Loading));
                TLRPC.TL_messages_getHistory tL_messages_getHistory = new TLRPC.TL_messages_getHistory();
                tL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tL_messages_getHistory.offset_date = this.startLoadFromDate;
                tL_messages_getHistory.limit = 1;
                tL_messages_getHistory.add_offset = -1;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda113
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        ChatActivity.this.lambda$createView$23(tLObject, tL_error);
                    }
                }), this.classGuid);
            } else {
                this.actionBar.addView(this.avatarContainer, 0, LayoutHelper.createFrame(-2, -1.0f, 51, this.inPreviewMode ? this.chatMode == 2 ? 10 : 0 : 56.0f, 0.0f, 40.0f, 0.0f));
            }
        }
        ActionBarMenu createMenu = this.actionBar.createMenu();
        if (this.chatMode == 5 && !QuickRepliesController.isSpecial(this.quickReplyShortcut)) {
            createMenu.addItem(64, R.drawable.group_edit).setContentDescription(LocaleController.getString(R.string.Edit));
        }
        if (this.currentEncryptedChat == null && (((i12 = this.chatMode) == 0 || i12 == 3) && !isReport())) {
            ActionBarMenuItem addItem = createMenu.addItem(i2, isSupportedTags() ? R.drawable.navbar_search_tag : R.drawable.ic_ab_search);
            this.searchIconItem = addItem;
            int i17 = R.string.Search;
            addItem.setContentDescription(LocaleController.getString(i17));
            ActionBarMenuItem addItem2 = createMenu.addItem(-1, R.drawable.ic_ab_search, this.themeDelegate);
            this.searchItem = addItem2;
            addItem2.setIsSearchField(true);
            this.searchItem.setActionBarMenuItemSearchListener(getSearchItemListener());
            ActionBarMenuItem actionBarMenuItem2 = this.searchItem;
            if (isSupportedTags()) {
                i17 = R.string.SavedTagSearchHint;
            }
            actionBarMenuItem2.setSearchFieldHint(LocaleController.getString(i17));
            if (this.chatMode == 3 || ((this.threadMessageId == 0 && !UserObject.isReplyUser(this.currentUser)) || ((messageObject2 = this.threadMessageObject) != null && messageObject2.getRepliesCount() < 10))) {
                this.searchItem.setVisibility(i);
            } else {
                this.searchItem.setVisibility(0);
            }
            this.searchItemVisible = false;
        }
        if (this.chatMode == 0 && ((this.threadMessageId == 0 || this.isTopic) && !UserObject.isReplyUser(this.currentUser) && !isReport() && this.currentUser != null)) {
            ActionBarMenu.LazyItem lazilyAddItem = createMenu.lazilyAddItem(32, R.drawable.ic_call, this.themeDelegate);
            this.audioCallIconItem = lazilyAddItem;
            lazilyAddItem.setContentDescription(LocaleController.getString(R.string.Call));
            TLRPC.UserFull userFull2 = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull2 == null || !userFull2.phone_calls_available) {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(i);
            } else {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            }
            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
            if (chatAvatarContainer3 != null) {
                chatAvatarContainer3.setTitleExpand(this.showAudioCallAsIcon);
            }
        }
        int i18 = R.drawable.ic_ab_other;
        ActionBarMenu.LazyItem lazilyAddItem2 = createMenu.lazilyAddItem(-3, i18, this.themeDelegate);
        this.editTextItem = lazilyAddItem2;
        int i19 = R.string.AccDescrMoreOptions;
        lazilyAddItem2.setContentDescription(LocaleController.getString(i19));
        this.editTextItem.setTag(null);
        this.editTextItem.setVisibility(i);
        if (this.chatMode != 0 || (!(this.threadMessageId == 0 || this.isTopic) || UserObject.isReplyUser(this.currentUser) || isReport())) {
            i3 = 32;
            f = 1.0f;
            if (this.chatMode == 6) {
                actionBarMenu = createMenu;
                ActionBarMenuItem addItem3 = actionBarMenu.addItem(-2, i18, this.themeDelegate);
                this.headerItem = addItem3;
                addItem3.setContentDescription(LocaleController.getString(i19));
                this.headerItem.lazilyAddSubItem(65, R.drawable.msg_copy, LocaleController.getString(R.string.Copy));
                this.headerItem.lazilyAddSubItem(66, R.drawable.msg_share, LocaleController.getString(R.string.LinkActionShare));
                this.headerItem.lazilyAddSubItem(67, R.drawable.msg_edit, LocaleController.getString(R.string.Rename));
                ActionBarMenuItem.Item lazilyAddSubItem = this.headerItem.lazilyAddSubItem(68, R.drawable.msg_delete, LocaleController.getString(R.string.Delete));
                int i20 = Theme.key_text_RedRegular;
                lazilyAddSubItem.setColors(Theme.getColor(i20), Theme.getColor(i20));
            } else {
                actionBarMenu = createMenu;
            }
        } else {
            TLRPC.UserFull userFull3 = this.currentUser != null ? getMessagesController().getUserFull(this.currentUser.id) : null;
            ActionBarMenuItem addItem4 = createMenu.addItem(-2, i18, this.themeDelegate);
            this.headerItem = addItem4;
            addItem4.setContentDescription(LocaleController.getString(i19));
            TLRPC.User user4 = this.currentUser;
            if (user4 != null && user4.self && this.chatMode != 3) {
                this.savedChatsItem = this.headerItem.lazilyAddSubItem(59, R.drawable.msg_topics, LocaleController.getString(R.string.SavedViewAsChats));
                this.savedChatsGap = this.headerItem.lazilyAddColoredGap();
                this.savedChatsItem.setVisibility(getMessagesController().getSavedMessagesController().hasDialogs() ? 0 : 8);
                this.savedChatsGap.setVisibility(getMessagesController().getSavedMessagesController().hasDialogs() ? 0 : 8);
            } else if (this.chatMode != 3 && (user4 == null || !user4.self)) {
                i3 = 32;
                i9 = 3;
                actionBarMenu2 = createMenu;
                userFull = userFull3;
                f = 1.0f;
                ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = new ChatNotificationsPopupWrapper(context, this.currentAccount, this.headerItem.getPopupLayout().getSwipeBack(), false, false, new ChatNotificationsPopupWrapper.Callback() { // from class: org.telegram.ui.ChatActivity.16
                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void dismiss() {
                        ChatActivity.this.headerItem.toggleSubMenu();
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void muteFor(int i21) {
                        ChatActivity chatActivity;
                        Theme.ResourcesProvider resourceProvider;
                        int i22;
                        ChatActivity chatActivity2 = ChatActivity.this;
                        if (i21 == 0) {
                            if (chatActivity2.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId())) {
                                ChatActivity.this.toggleMute(true);
                            }
                            if (!BulletinFactory.canShowBulletin(ChatActivity.this)) {
                                return;
                            }
                            chatActivity = ChatActivity.this;
                            resourceProvider = chatActivity.getResourceProvider();
                            i22 = 4;
                        } else {
                            chatActivity2.getNotificationsController().muteUntil(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), i21);
                            if (!BulletinFactory.canShowBulletin(ChatActivity.this)) {
                                return;
                            }
                            chatActivity = ChatActivity.this;
                            resourceProvider = chatActivity.getResourceProvider();
                            i22 = 5;
                        }
                        BulletinFactory.createMuteBulletin(chatActivity, i22, i21, resourceProvider).show();
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public /* synthetic */ void openExceptions() {
                        ChatNotificationsPopupWrapper.Callback.-CC.$default$openExceptions(this);
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void showCustomize() {
                        if (ChatActivity.this.dialog_id == 0 || ChatActivity.this.chatMode == 3) {
                            return;
                        }
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.currentUser != null) {
                            chatActivity.getMessagesController().putUser(ChatActivity.this.currentUser, true);
                        }
                        Bundle bundle = new Bundle();
                        bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                        if (ChatActivity.this.getTopicId() != 0) {
                            bundle.putLong("topic_id", ChatActivity.this.getTopicId());
                        }
                        ChatActivity chatActivity2 = ChatActivity.this;
                        chatActivity2.presentFragment(new ProfileNotificationsActivity(bundle, chatActivity2.themeDelegate));
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void toggleMute() {
                        ChatActivity.this.toggleMute(true);
                        ChatActivity chatActivity = ChatActivity.this;
                        BulletinFactory.createMuteBulletin(chatActivity, chatActivity.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), ChatActivity.this.themeDelegate).show();
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void toggleSound() {
                        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount);
                        boolean z3 = notificationsSettings.getBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), true);
                        boolean z4 = !z3 ? 1 : 0;
                        SharedPreferences.Editor edit = notificationsSettings.edit();
                        edit.putBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), z4).apply();
                        if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            BulletinFactory.createSoundEnabledBulletin(chatActivity, z3 ? 1 : 0, chatActivity.getResourceProvider()).show();
                        }
                        ChatActivity.this.updateTitleIcons();
                    }
                }, getResourceProvider());
                this.chatNotificationsPopupWrapper = chatNotificationsPopupWrapper;
                ActionBarMenuItem.Item lazilyAddSwipeBackItem = this.headerItem.lazilyAddSwipeBackItem(R.drawable.msg_mute, null, null, chatNotificationsPopupWrapper.windowLayout);
                this.muteItem = lazilyAddSwipeBackItem;
                lazilyAddSwipeBackItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda121
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createView$25(view);
                    }
                });
                this.muteItemGap = this.headerItem.lazilyAddColoredGap();
                if (this.currentUser != null && this.chatMode != i9) {
                    this.headerItem.lazilyAddSubItem(i3, R.drawable.msg_callback, LocaleController.getString(R.string.Call));
                    this.headerItem.lazilyAddSubItem(33, R.drawable.msg_videocall, LocaleController.getString(R.string.VideoCall));
                    if (userFull == null && userFull.phone_calls_available) {
                        this.headerItem.showSubItem(i3);
                        if (userFull.video_calls_available) {
                            this.headerItem.showSubItem(33);
                        }
                    } else {
                        this.headerItem.hideSubItem(i3);
                    }
                    this.headerItem.hideSubItem(33);
                }
                if (this.searchItem != null) {
                    this.headerItem.lazilyAddSubItem(40, R.drawable.msg_search, LocaleController.getString(R.string.Search));
                }
                if (ChatObject.isBoostSupported(this.currentChat) && (getUserConfig().isPremium() || ChatObject.isBoosted(this.chatInfo) || ChatObject.hasAdminRights(this.currentChat))) {
                    int i21 = R.raw.boosts;
                    this.headerItem.lazilyAddSubItem(29, new RLottieDrawable(i21, "" + i21, AndroidUtilities.dp(24.0f), AndroidUtilities.dp(24.0f)), LocaleController.getString(!ChatObject.isChannelAndNotMegaGroup(this.currentChat) ? R.string.BoostingBoostChannelMenu : R.string.BoostingBoostGroupMenu));
                }
                this.translateItem = this.headerItem.lazilyAddSubItem(62, R.drawable.msg_translate, LocaleController.getString(R.string.TranslateMessage));
                updateTranslateItemVisibility();
                chat2 = this.currentChat;
                if (chat2 != null && !chat2.creator && !ChatObject.hasAdminRights(chat2)) {
                    this.headerItem.lazilyAddSubItem(21, R.drawable.msg_report, LocaleController.getString(R.string.ReportChat));
                }
                user2 = this.currentUser;
                if (user2 != null) {
                    long j = user2.id;
                    if (j != UserObject.VERIFY && j != UserObject.REPLY_BOT) {
                        this.addContactItem = this.headerItem.lazilyAddSubItem(17, R.drawable.msg_addcontact, LocaleController.getString(R.string.AddToContacts));
                    }
                }
                if (this.currentEncryptedChat != null) {
                    this.timeItem2 = this.headerItem.lazilyAddSubItem(13, R.drawable.msg_autodelete, LocaleController.getString(R.string.SetTimer));
                }
                if (this.currentChat != null && !this.isTopic) {
                    this.viewAsTopics = this.headerItem.lazilyAddSubItem(59, R.drawable.msg_topics, LocaleController.getString(R.string.TopicViewAsTopics));
                }
                if (this.themeDelegate.isThemeChangeAvailable(true)) {
                    this.headerItem.lazilyAddSubItem(27, R.drawable.msg_background, LocaleController.getString(R.string.SetWallpapers));
                }
                user3 = this.currentUser;
                if (user3 == null && user3.self && getDialogId() != UserObject.VERIFY) {
                    this.headerItem.lazilyAddSubItem(24, R.drawable.msg_home, LocaleController.getString(R.string.AddShortcut));
                }
                if (!this.isTopic) {
                    this.clearHistoryItem = this.headerItem.lazilyAddSubItem(15, R.drawable.msg_clear, LocaleController.getString(R.string.ClearHistory));
                }
                if (!this.isTopic) {
                    if (ChatObject.isChannel(this.currentChat)) {
                        TLRPC.Chat chat3 = this.currentChat;
                        if (!chat3.creator) {
                            if (!ChatObject.isNotInChat(chat3)) {
                                if (this.currentChat.megagroup) {
                                    actionBarMenuItem = this.headerItem;
                                    i10 = R.drawable.msg_leave;
                                    i11 = R.string.LeaveMegaMenu;
                                } else {
                                    actionBarMenuItem = this.headerItem;
                                    i10 = R.drawable.msg_leave;
                                    i11 = R.string.LeaveChannelMenu;
                                }
                                actionBarMenuItem.lazilyAddSubItem(16, i10, LocaleController.getString(i11));
                            }
                            actionBarMenu = actionBarMenu2;
                        }
                    }
                    if (!ChatObject.isChannel(this.currentChat) && getDialogId() != UserObject.VERIFY) {
                        if (this.currentChat != null) {
                            actionBarMenuItem = this.headerItem;
                            i10 = R.drawable.msg_leave;
                            i11 = R.string.DeleteAndExit;
                            actionBarMenuItem.lazilyAddSubItem(16, i10, LocaleController.getString(i11));
                            actionBarMenu = actionBarMenu2;
                        } else {
                            TLRPC.User user5 = this.currentUser;
                            if (user5 == null || !user5.bot) {
                                this.headerItem.lazilyAddSubItem(16, R.drawable.msg_delete, LocaleController.getString(R.string.DeleteChatUser));
                            } else {
                                this.headerItem.lazilyAddSubItem(31, R.drawable.msg_settings_old, LocaleController.getString(R.string.BotSettings));
                                this.headerItem.lazilyAddSubItem(30, R.drawable.msg_help, LocaleController.getString(R.string.BotHelp));
                                if (!MessagesController.isSupportUser(this.currentUser)) {
                                    ActionBarMenuItem.Item lazilyAddSubItem2 = this.headerItem.lazilyAddSubItem(21, R.drawable.msg_report, LocaleController.getString(R.string.ReportBot));
                                    int i22 = Theme.key_text_RedRegular;
                                    lazilyAddSubItem2.setColors(getThemedColor(i22), getThemedColor(i22));
                                }
                                ActionBarMenuItem.Item lazilyAddSubItem3 = this.headerItem.lazilyAddSubItem(16, R.drawable.msg_block2, LocaleController.getString(R.string.DeleteAndBlock));
                                int i23 = Theme.key_text_RedRegular;
                                lazilyAddSubItem3.setColors(getThemedColor(i23), getThemedColor(i23));
                                updateBotButtons();
                            }
                            actionBarMenu = actionBarMenu2;
                        }
                    }
                }
                actionBarMenu = actionBarMenu2;
            }
            actionBarMenu2 = createMenu;
            userFull = userFull3;
            i9 = 3;
            i3 = 32;
            f = 1.0f;
            if (this.currentUser != null) {
                this.headerItem.lazilyAddSubItem(i3, R.drawable.msg_callback, LocaleController.getString(R.string.Call));
                this.headerItem.lazilyAddSubItem(33, R.drawable.msg_videocall, LocaleController.getString(R.string.VideoCall));
                if (userFull == null) {
                }
                this.headerItem.hideSubItem(i3);
                this.headerItem.hideSubItem(33);
            }
            if (this.searchItem != null) {
            }
            if (ChatObject.isBoostSupported(this.currentChat)) {
                int i212 = R.raw.boosts;
                this.headerItem.lazilyAddSubItem(29, new RLottieDrawable(i212, "" + i212, AndroidUtilities.dp(24.0f), AndroidUtilities.dp(24.0f)), LocaleController.getString(!ChatObject.isChannelAndNotMegaGroup(this.currentChat) ? R.string.BoostingBoostChannelMenu : R.string.BoostingBoostGroupMenu));
            }
            this.translateItem = this.headerItem.lazilyAddSubItem(62, R.drawable.msg_translate, LocaleController.getString(R.string.TranslateMessage));
            updateTranslateItemVisibility();
            chat2 = this.currentChat;
            if (chat2 != null) {
                this.headerItem.lazilyAddSubItem(21, R.drawable.msg_report, LocaleController.getString(R.string.ReportChat));
            }
            user2 = this.currentUser;
            if (user2 != null) {
            }
            if (this.currentEncryptedChat != null) {
            }
            if (this.currentChat != null) {
                this.viewAsTopics = this.headerItem.lazilyAddSubItem(59, R.drawable.msg_topics, LocaleController.getString(R.string.TopicViewAsTopics));
            }
            if (this.themeDelegate.isThemeChangeAvailable(true)) {
            }
            user3 = this.currentUser;
            if (user3 == null) {
            }
            if (!this.isTopic) {
            }
            if (!this.isTopic) {
            }
            actionBarMenu = actionBarMenu2;
        }
        if (ChatObject.isForum(this.currentChat) && this.isTopic && getParentLayout() != null && getParentLayout().getFragmentStack() != null && this.chatMode == 0) {
            int i24 = 0;
            while (true) {
                if (i24 >= getParentLayout().getFragmentStack().size()) {
                    this.openForumItem = this.headerItem.lazilyAddSubItem(61, R.drawable.msg_discussion, LocaleController.getString(R.string.OpenAllTopics));
                    break;
                }
                BaseFragment baseFragment = (BaseFragment) getParentLayout().getFragmentStack().get(i24);
                if ((baseFragment instanceof TopicsFragment) && ((TopicsFragment) baseFragment).getDialogId() == this.dialog_id) {
                    break;
                }
                i24++;
            }
        }
        if (this.currentChat != null && this.forumTopic != null && this.chatMode == 0) {
            ActionBarMenuItem.Item lazilyAddSubItem4 = this.headerItem.lazilyAddSubItem(60, R.drawable.msg_topic_close, LocaleController.getString(R.string.CloseTopic));
            this.closeTopicItem = lazilyAddSubItem4;
            TLRPC.Chat chat4 = this.currentChat;
            lazilyAddSubItem4.setVisibility((chat4 == null || !ChatObject.canManageTopic(this.currentAccount, chat4, this.forumTopic) || (tL_forumTopic = this.forumTopic) == null || tL_forumTopic.closed) ? 8 : 0);
        }
        actionBarMenu.setVisibility(this.inMenuMode ? 8 : 0);
        updateTitle(false);
        this.avatarContainer.updateOnlineCount();
        this.avatarContainer.updateSubtitle();
        updateTitleIcons();
        if (this.chatMode == 0 && ((!isThreadChat() || this.isTopic) && !isReport())) {
            ActionBarMenu.LazyItem lazilyAddItem3 = actionBarMenu.lazilyAddItem(14, R.drawable.ic_ab_other, this.themeDelegate);
            this.attachItem = lazilyAddItem3;
            lazilyAddItem3.setOverrideMenuClick(true);
            this.attachItem.setAllowCloseAnimation(false);
            this.attachItem.setContentDescription(LocaleController.getString(R.string.AccDescrMoreOptions));
            this.attachItem.setVisibility(8);
        }
        if (this.inPreviewMode) {
            ActionBarMenuItem actionBarMenuItem3 = this.headerItem;
            if (actionBarMenuItem3 != null) {
                actionBarMenuItem3.setAlpha(0.0f);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setAlpha(0.0f);
            }
        }
        this.actionModeViews.clear();
        this.selectedMessagesCountTextView = null;
        checkActionBarMenu(false);
        this.scrimPaint = new Paint();
        ChatActivityFragmentView chatActivityFragmentView = new ChatActivityFragmentView(context, this.parentLayout);
        this.contentView = chatActivityFragmentView;
        this.fragmentView = chatActivityFragmentView;
        chatActivityFragmentView.needBlur = true;
        chatActivityFragmentView.needBlurBottom = true;
        if (this.inBubbleMode || this.isInsideContainer) {
            chatActivityFragmentView.setOccupyStatusBar(false);
        }
        updateBackground();
        this.emptyViewContainer = null;
        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        if (chatActivityEnterView3 != null) {
            chatActivityEnterView3.onDestroy();
            if (!this.chatActivityEnterView.isEditingMessage()) {
                charSequence = this.chatActivityEnterView.getFieldText();
                mentionsContainerView = this.mentionContainer;
                if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                    this.mentionContainer.getAdapter().onDestroy();
                }
                17 r0 = new 17(context, this.themeDelegate);
                this.chatListView = r0;
                if (this.currentEncryptedChat != null) {
                    r0.setImportantForAccessibility(4);
                }
                this.chatListView.setHideIfEmpty(false);
                this.chatListView.setAccessibilityEnabled(false);
                this.chatListView.setNestedScrollingEnabled(false);
                this.chatListView.setInstantClick(true);
                this.chatListView.setDisableHighlightState(true);
                this.chatListView.setTag(1);
                this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
                RecyclerListView recyclerListView = this.chatListView;
                ChatActivityAdapter chatActivityAdapter = new ChatActivityAdapter(context);
                this.chatAdapter = chatActivityAdapter;
                recyclerListView.setAdapter(chatActivityAdapter);
                this.chatListView.setClipToPadding(false);
                this.chatListView.setAnimateEmptyView(true, 1);
                this.chatListView.setScrollBarStyle(ConnectionsManager.FileTypeVideo);
                this.chatListViewPaddingTop = 0.0f;
                this.paddingTopHeight = 0.0f;
                invalidateChatListViewTopPadding();
                if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
                    18 r02 = new 18(this, this.chatListView, this.themeDelegate);
                    this.chatListItemAnimator = r02;
                    r02.setOnSnapMessage(new Utilities.Callback0Return() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda122
                        @Override // org.telegram.messenger.Utilities.Callback0Return
                        public final Object run() {
                            return Boolean.valueOf(ChatActivity.this.supportsThanosEffect());
                        }
                    }, new Utilities.Callback0Return() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda123
                        @Override // org.telegram.messenger.Utilities.Callback0Return
                        public final Object run() {
                            return ChatActivity.this.getChatThanosEffect();
                        }
                    });
                }
                charSequence2 = charSequence;
                19 r2 = new 19(context, 1000, 1, !this.reversed);
                this.chatLayoutManager = r2;
                r2.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() { // from class: org.telegram.ui.ChatActivity.20
                    @Override // androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
                    public int getSpanSize(int i25) {
                        int i26;
                        MessageObject messageObject3;
                        MessageObject.GroupedMessages validGroupedMessage;
                        if (i25 < ChatActivity.this.chatAdapter.messagesStartRow || i25 >= ChatActivity.this.chatAdapter.messagesEndRow || (i26 = i25 - ChatActivity.this.chatAdapter.messagesStartRow) < 0 || i26 >= ChatActivity.this.chatAdapter.getMessages().size() || (validGroupedMessage = ChatActivity.this.getValidGroupedMessage((messageObject3 = (MessageObject) ChatActivity.this.chatAdapter.getMessages().get(i26)))) == null) {
                            return 1000;
                        }
                        return validGroupedMessage.getPosition(messageObject3).spanSize;
                    }
                });
                this.chatListView.setLayoutManager(this.chatLayoutManager);
                this.chatListView.addItemDecoration(new RecyclerView.ItemDecoration() { // from class: org.telegram.ui.ChatActivity.21
                    @Override // androidx.recyclerview.widget.RecyclerView.ItemDecoration
                    public void getItemOffsets(Rect rect, View view, RecyclerView recyclerView, RecyclerView.State state) {
                        ChatMessageCell chatMessageCell;
                        MessageObject.GroupedMessages currentMessagesGroup;
                        MessageObject.GroupedMessagePosition currentPosition;
                        int i25 = 0;
                        rect.bottom = 0;
                        if (!(view instanceof ChatMessageCell) || (currentMessagesGroup = (chatMessageCell = (ChatMessageCell) view).getCurrentMessagesGroup()) == null || (currentPosition = chatMessageCell.getCurrentPosition()) == null || currentPosition.siblingHeights == null) {
                            return;
                        }
                        Point point = AndroidUtilities.displaySize;
                        float max = Math.max(point.x, point.y) * 0.5f;
                        int extraInsetHeight = chatMessageCell.getExtraInsetHeight();
                        int i26 = 0;
                        while (true) {
                            float[] fArr = currentPosition.siblingHeights;
                            if (i26 >= fArr.length) {
                                break;
                            }
                            extraInsetHeight += (int) Math.ceil(fArr[i26] * max);
                            i26++;
                        }
                        int round = extraInsetHeight + ((currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f));
                        int size2 = currentMessagesGroup.posArray.size();
                        while (true) {
                            if (i25 < size2) {
                                MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(i25);
                                byte b = groupedMessagePosition.minY;
                                byte b2 = currentPosition.minY;
                                if (b == b2 && ((groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || b != b2 || groupedMessagePosition.maxY != currentPosition.maxY) && b == b2)) {
                                    round -= ((int) Math.ceil(max * groupedMessagePosition.ph)) - AndroidUtilities.dp(4.0f);
                                    break;
                                }
                                i25++;
                            } else {
                                break;
                            }
                        }
                        rect.bottom = -round;
                    }
                });
                this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
                this.chatListView.setOnItemClickListener(this.onItemClickListener);
                this.chatListView.setOnScrollListener(new 22());
                this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
                if (getDialogId() != getUserConfig().getClientUserId()) {
                    ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = new ChatSelectionReactionMenuOverlay(this, context);
                    this.selectionReactionsOverlay = chatSelectionReactionMenuOverlay;
                    this.contentView.addView(chatSelectionReactionMenuOverlay, LayoutHelper.createFrame(-1, -1.0f));
                }
                ClippingImageView clippingImageView = new ClippingImageView(context);
                this.animatingImageView = clippingImageView;
                clippingImageView.setVisibility(8);
                this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
                FrameLayout frameLayout = new FrameLayout(context);
                this.progressView = frameLayout;
                frameLayout.setVisibility(4);
                this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
                View view = new View(context) { // from class: org.telegram.ui.ChatActivity.23
                    private final RectF rect = new RectF();

                    private void applyServiceShaderMatrix(int i25, int i26, float f2, float f3) {
                        ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                        if (themeDelegate != null) {
                            themeDelegate.applyServiceShaderMatrix(i25, i26, f2, f3);
                        } else {
                            Theme.applyServiceShaderMatrix(i25, i26, f2, f3);
                        }
                    }

                    public void applyServiceShaderMatrix() {
                        applyServiceShaderMatrix(getMeasuredWidth(), ChatActivity.this.getServiceHeight(this), getX(), ChatActivity.this.getServiceTop(this));
                    }

                    @Override // android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        this.rect.set(0.0f, 0.0f, getWidth(), getHeight());
                        applyServiceShaderMatrix();
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f), ChatActivity.this.getThemedPaint("paintChatActionBackground"));
                        ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                        if (themeDelegate == null ? Theme.hasGradientService() : themeDelegate.hasGradientService()) {
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f), ChatActivity.this.getThemedPaint("paintChatActionBackgroundDarken"));
                        }
                        super.dispatchDraw(canvas);
                    }
                };
                this.progressView2 = view;
                this.progressView.addView(view, LayoutHelper.createFrame(36, 36, 17));
                RadialProgressView radialProgressView = new RadialProgressView(context, this.themeDelegate);
                this.progressBar = radialProgressView;
                radialProgressView.setSize(AndroidUtilities.dp(28.0f));
                this.progressBar.setProgressColor(getThemedColor(Theme.key_chat_serviceText));
                this.progressView.addView(this.progressBar, LayoutHelper.createFrame(i3, i3, 17));
                ChatActionCell chatActionCell = new ChatActionCell(context, false, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.24
                    @Override // org.telegram.ui.Cells.ChatActionCell
                    public boolean isFloating() {
                        return true;
                    }

                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public void onDraw(Canvas canvas) {
                        if (ChatActivity.this.scrimBlurBitmap != null) {
                            return;
                        }
                        float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - getY()) - AndroidUtilities.dp(4.0f);
                        if (y <= 0.0f) {
                            super.onDraw(canvas);
                        } else if (y < getMeasuredHeight()) {
                            canvas.save();
                            canvas.clipRect(0.0f, y, getMeasuredWidth(), getMeasuredHeight());
                            super.onDraw(canvas);
                            canvas.restore();
                        }
                    }

                    @Override // android.view.ViewGroup
                    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                        if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                            return false;
                        }
                        return super.onInterceptTouchEvent(motionEvent);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public boolean onTouchEvent(MotionEvent motionEvent) {
                        if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                            return false;
                        }
                        return super.onTouchEvent(motionEvent);
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f2) {
                        if (getTranslationY() != f2) {
                            invalidate();
                        }
                        super.setTranslationY(f2);
                    }
                };
                this.floatingDateView = chatActionCell;
                chatActionCell.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
                this.floatingDateView.setAlpha(0.0f);
                this.floatingDateView.setImportantForAccessibility(2);
                this.floatingDateView.setInvalidateColors(true);
                this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                this.floatingDateView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda124
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$26(view2);
                    }
                });
                chat = this.currentChat;
                if (chat != null) {
                    ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = new ChatActivityMemberRequestsDelegate(this, this.contentView, chat, new ChatActivityMemberRequestsDelegate.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda125
                        @Override // org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate.Callback
                        public final void onEnterOffsetChanged() {
                            ChatActivity.this.invalidateChatListViewTopPadding();
                        }
                    });
                    this.pendingRequestsDelegate = chatActivityMemberRequestsDelegate;
                    chatActivityMemberRequestsDelegate.setChatInfo(this.chatInfo, false);
                    this.contentView.addView(this.pendingRequestsDelegate.getView(), -1, this.pendingRequestsDelegate.getViewHeight());
                }
                this.pinnedMessageView = null;
                this.undoView = null;
                this.topUndoView = null;
                this.topChatPanelView = null;
                this.reportSpamButton = null;
                this.emojiStatusSpamHint = null;
                this.topViewSeparator1 = null;
                this.topViewSeparator2 = null;
                this.topViewSeparator3 = null;
                this.addToContactsButton = null;
                this.restartTopicButton = null;
                this.closeReportSpam = null;
                this.translateButton = null;
                this.bizBotButton = null;
                FrameLayout frameLayout2 = new FrameLayout(context);
                this.pagedownButton = frameLayout2;
                frameLayout2.setVisibility(4);
                this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                this.pagedownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda126
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$27(view2);
                    }
                });
                ScaleStateListAnimator.apply(this.pagedownButton, 0.13f, 2.0f);
                FrameLayout frameLayout3 = new FrameLayout(context);
                this.searchUpButton = frameLayout3;
                frameLayout3.setVisibility(4);
                this.contentView.addView(this.searchUpButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                ImageView imageView = new ImageView(context);
                imageView.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                i4 = Build.VERSION.SDK_INT;
                if (i4 < 21) {
                    imageView.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.25
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Resources resources = context.getResources();
                int i25 = R.drawable.pagedown_shadow;
                Drawable mutate = resources.getDrawable(i25).mutate();
                PorterDuff.Mode mode = PorterDuff.Mode.MULTIPLY;
                mutate.setColorFilter(new PorterDuffColorFilter(-16777216, mode));
                CombinedDrawable combinedDrawable = new CombinedDrawable(mutate, createCircleDrawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                imageView.setBackground(combinedDrawable);
                this.searchUpButton.addView(imageView, LayoutHelper.createFrame(46, 46, 81));
                this.searchUpButton.setContentDescription(LocaleController.getString(R.string.AccDescrSearchNext));
                ImageView imageView2 = new ImageView(context);
                this.searchUpButtonArrow = imageView2;
                imageView2.setScaleY(-1.0f);
                ImageView imageView3 = this.searchUpButtonArrow;
                int i26 = R.drawable.pagedown;
                imageView3.setImageResource(i26);
                ImageView imageView4 = this.searchUpButtonArrow;
                ImageView.ScaleType scaleType = ImageView.ScaleType.CENTER;
                imageView4.setScaleType(scaleType);
                ImageView imageView5 = this.searchUpButtonArrow;
                int i27 = Theme.key_chat_goDownButtonIcon;
                imageView5.setColorFilter(new PorterDuffColorFilter(getThemedColor(i27), mode));
                this.searchUpButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.searchUpButton.addView(this.searchUpButtonArrow, LayoutHelper.createFrame(46, 46, 81));
                ScaleStateListAnimator.apply(this.searchUpButton, 0.12f, 2.0f);
                FrameLayout frameLayout4 = new FrameLayout(context);
                this.searchDownButton = frameLayout4;
                frameLayout4.setVisibility(4);
                this.contentView.addView(this.searchDownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                ImageView imageView6 = new ImageView(context);
                imageView6.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i4 < 21) {
                    imageView6.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.26
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable2 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable2 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate2 = context.getResources().getDrawable(i25).mutate();
                mutate2.setColorFilter(new PorterDuffColorFilter(-16777216, mode));
                CombinedDrawable combinedDrawable2 = new CombinedDrawable(mutate2, createCircleDrawable2, 0, 0);
                combinedDrawable2.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                imageView6.setBackground(combinedDrawable2);
                this.searchDownButton.addView(imageView6, LayoutHelper.createFrame(46, 46, 81));
                this.searchDownButton.setContentDescription(LocaleController.getString(R.string.AccDescrSearchPrev));
                ImageView imageView7 = new ImageView(context);
                this.searchDownButtonArrow = imageView7;
                imageView7.setImageResource(i26);
                this.searchDownButtonArrow.setScaleType(scaleType);
                this.searchDownButtonArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor(i27), mode));
                this.searchDownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.searchDownButton.addView(this.searchDownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
                ScaleStateListAnimator.apply(this.searchDownButton, 0.12f, 2.0f);
                this.searchUpButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda96
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$28(view2);
                    }
                });
                this.searchDownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda97
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$29(view2);
                    }
                });
                FrameLayout frameLayout5 = new FrameLayout(context);
                this.mentiondownButton = frameLayout5;
                frameLayout5.setVisibility(4);
                this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                this.mentiondownButton.setOnClickListener(new 27());
                this.mentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda98
                    @Override // android.view.View.OnLongClickListener
                    public final boolean onLongClick(View view2) {
                        boolean lambda$createView$32;
                        lambda$createView$32 = ChatActivity.this.lambda$createView$32(view2);
                        return lambda$createView$32;
                    }
                });
                updateMessageListAccessibilityVisibility();
                FrameLayout frameLayout6 = new FrameLayout(context);
                this.reactionsMentiondownButton = frameLayout6;
                this.contentView.addView(frameLayout6, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                this.mentionContainer = new MentionsContainerView(context, this.dialog_id, this.threadMessageId, this, this.contentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.28
                    private boolean wasAtTop = true;

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected boolean canOpen() {
                        return ChatActivity.this.bottomOverlay.getVisibility() != 0 || ChatActivity.this.searchingForUser;
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                        if (getAlpha() <= 0.0f) {
                            return false;
                        }
                        return super.dispatchTouchEvent(motionEvent);
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onClose() {
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onContextClick(TLRPC.BotInlineResult botInlineResult) {
                        if (ChatActivity.this.getParentActivity() == null || botInlineResult.content == null) {
                            return;
                        }
                        if (!botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && !botInlineResult.type.equals("web_player_video")) {
                            ChatActivity.this.processExternalUrl(0, botInlineResult.content.url, null, null, false, false);
                            return;
                        }
                        int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(botInlineResult);
                        ChatActivity chatActivity = ChatActivity.this;
                        PhotoViewer.PhotoViewerProvider photoViewerProvider = chatActivity.botContextProvider;
                        String str2 = botInlineResult.title;
                        if (str2 == null) {
                            str2 = "";
                        }
                        String str3 = str2;
                        String str4 = botInlineResult.description;
                        String str5 = botInlineResult.content.url;
                        EmbedBottomSheet.show(chatActivity, null, photoViewerProvider, str3, str4, str5, str5, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1], ChatActivity.this.isKeyboardVisible());
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onContextSearch(boolean z3) {
                        ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView4 != null) {
                            chatActivityEnterView4.setCaption(getAdapter().getBotCaption());
                            ChatActivity.this.chatActivityEnterView.showContextProgress(z3);
                        }
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onOpen() {
                        if (ChatActivity.this.allowStickersPanel && ((!getAdapter().isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond) && ChatActivity.this.currentEncryptedChat != null && getAdapter().isBotContext())) {
                            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                            if (!globalMainSettings.getBoolean("secretbot", false)) {
                                AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                builder.setTitle(LocaleController.getString(R.string.AppName));
                                builder.setMessage(LocaleController.getString(R.string.SecretChatContextBotAlert));
                                builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
                                ChatActivity.this.showDialog(builder.create());
                                globalMainSettings.edit().putBoolean("secretbot", true).commit();
                            }
                        }
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onScrolled(boolean z3, boolean z4) {
                        if (this.wasAtTop != z3) {
                            AndroidUtilities.updateViewShow(ChatActivity.this.suggestEmojiPanel, !ChatActivity.this.isInPreviewMode() && z3, false, true);
                            this.wasAtTop = z3;
                        }
                    }
                };
                if (isInPreviewMode()) {
                    this.mentionContainer.setAlpha(0.0f);
                }
                this.contentView.addView(this.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
                this.contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.ChatActivity.29
                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void addToFavoriteSelected(String str2) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$addToFavoriteSelected(this, str2);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean can() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean canDeleteSticker(TLRPC.Document document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canDeleteSticker(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean canEditSticker() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canEditSticker(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean canSchedule() {
                        return ChatActivity.this.canScheduleMessage();
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ Boolean canSetAsStatus(TLRPC.Document document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void copyEmoji(TLRPC.Document document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void deleteSticker(TLRPC.Document document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$deleteSticker(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void editSticker(TLRPC.Document document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$editSticker(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public long getDialogId() {
                        return ChatActivity.this.dialog_id;
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ String getQuery(boolean z3) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z3);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void gifAddedOrDeleted() {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean isInScheduleMode() {
                        return ChatActivity.this.chatMode == 1;
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean isPhotoEditor() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isPhotoEditor(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean isReplacedSticker() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isReplacedSticker(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean isSettingIntroSticker() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isSettingIntroSticker(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean isStickerEditor() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isStickerEditor(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needCopy(TLRPC.Document document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needMenu() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needOpen() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needRemove() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needRemoveFromRecent(TLRPC.Document document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean needSend(int i28) {
                        return true;
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void newStickerPackSelected(CharSequence charSequence3, String str2, Utilities.Callback callback) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$newStickerPackSelected(this, charSequence3, str2, callback);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public void openSet(TLRPC.InputStickerSet inputStickerSet, boolean z3) {
                        if (inputStickerSet == null || ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        TLRPC.TL_inputStickerSetID tL_inputStickerSetID = new TLRPC.TL_inputStickerSetID();
                        tL_inputStickerSetID.access_hash = inputStickerSet.access_hash;
                        tL_inputStickerSetID.id = inputStickerSet.id;
                        Activity parentActivity = ChatActivity.this.getParentActivity();
                        ChatActivity chatActivity = ChatActivity.this;
                        StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
                        stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                        stickersAlert.setClearsInputField(z3);
                        ChatActivity.this.showDialog(stickersAlert);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void removeFromRecent(TLRPC.Document document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void resetTouch() {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void sendEmoji(TLRPC.Document document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void sendGif(Object obj, Object obj2, boolean z3, int i28) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj, obj2, z3, i28);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void sendSticker() {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendSticker(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public void sendSticker(TLRPC.Document document, String str2, Object obj, boolean z3, int i28) {
                        ChatActivity.this.chatActivityEnterView.lambda$onStickerSelected$68(document, str2, obj, null, true, z3, i28);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void setAsEmojiStatus(TLRPC.Document document, Integer num) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, document, num);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void setIntroSticker(String str2) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setIntroSticker(this, str2);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void stickerSetSelected(TLRPC.StickerSet stickerSet, String str2) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$stickerSetSelected(this, stickerSet, str2);
                    }
                };
                this.mentionContainer.getListView().setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda99
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view2, MotionEvent motionEvent) {
                        boolean lambda$createView$33;
                        lambda$createView$33 = ChatActivity.this.lambda$createView$33(view2, motionEvent);
                        return lambda$createView$33;
                    }
                });
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
                }
                this.mentionContainer.getAdapter().setParentFragment(this);
                this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
                this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
                this.mentionContainer.getAdapter().setNeedBotContext(true);
                this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
                MentionsContainerView.MentionsListView listView = this.mentionContainer.getListView();
                RecyclerListView.OnItemClickListener onItemClickListener = new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda100
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                    public final void onItemClick(View view2, int i28) {
                        ChatActivity.this.lambda$createView$37(view2, i28);
                    }
                };
                this.mentionsOnItemClickListener = onItemClickListener;
                listView.setOnItemClickListener(onItemClickListener);
                this.mentionContainer.getListView().setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda101
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener
                    public final boolean onItemClick(View view2, int i28) {
                        boolean lambda$createView$39;
                        lambda$createView$39 = ChatActivity.this.lambda$createView$39(view2, i28);
                        return lambda$createView$39;
                    }
                });
                ImageView imageView8 = new ImageView(context);
                this.pagedownButtonImage = imageView8;
                imageView8.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i4 < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.30
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable3 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable3 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate3 = context.getResources().getDrawable(i25).mutate();
                mutate3.setColorFilter(new PorterDuffColorFilter(-16777216, mode));
                CombinedDrawable combinedDrawable3 = new CombinedDrawable(mutate3, createCircleDrawable3, 0, 0);
                combinedDrawable3.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.pagedownButtonImage.setBackground(combinedDrawable3);
                this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
                this.pagedownButton.setContentDescription(LocaleController.getString(R.string.AccDescrPageDown));
                ImageView imageView9 = new ImageView(context);
                this.pagedownButtonArrow = imageView9;
                imageView9.setImageResource(i26);
                this.pagedownButtonArrow.setScaleType(scaleType);
                this.pagedownButtonArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor(i27), mode));
                this.pagedownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.pagedownButtonArrow.setPivotX(AndroidUtilities.dp(23.0f));
                this.pagedownButtonArrow.setPivotY(AndroidUtilities.dp(33.0f));
                this.pagedownButton.addView(this.pagedownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
                this.pagedownButtonLoading = new ImageView(context);
                CircularProgressDrawable circularProgressDrawable = new CircularProgressDrawable(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(1.7f), getThemedColor(i27));
                this.pagedownButtonLoadingDrawable = circularProgressDrawable;
                circularProgressDrawable.setAngleOffset(90.0f);
                this.pagedownButtonLoading.setImageDrawable(this.pagedownButtonLoadingDrawable);
                this.pagedownButtonLoading.setAlpha(0.0f);
                this.pagedownButtonLoading.setVisibility(8);
                this.pagedownButton.addView(this.pagedownButtonLoading, LayoutHelper.createFrame(46, 46, 81));
                CounterView counterView = new CounterView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.31
                    @Override // android.view.View
                    public void invalidate() {
                        if (isInOutAnimation()) {
                            ChatActivity.this.contentView.invalidate();
                        }
                        super.invalidate();
                    }
                };
                this.pagedownButtonCounter = counterView;
                counterView.setReverse(true);
                this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
                ImageView imageView10 = new ImageView(context);
                this.mentiondownButtonImage = imageView10;
                imageView10.setImageResource(R.drawable.mentionbutton);
                this.mentiondownButtonImage.setScaleType(scaleType);
                this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i27), mode));
                this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i4 < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.32
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable4 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable4 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate4 = context.getResources().getDrawable(i25).mutate();
                mutate4.setColorFilter(new PorterDuffColorFilter(-16777216, mode));
                CombinedDrawable combinedDrawable4 = new CombinedDrawable(mutate4, createCircleDrawable4, 0, 0);
                combinedDrawable4.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable4);
                this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                SimpleTextView simpleTextView = new SimpleTextView(context);
                this.mentiondownButtonCounter = simpleTextView;
                simpleTextView.setVisibility(4);
                this.mentiondownButtonCounter.setTypeface(AndroidUtilities.bold());
                this.mentiondownButtonCounter.setTextSize(13);
                this.mentiondownButtonCounter.setTextColor(getThemedColor(Theme.key_chat_goDownButtonCounter));
                this.mentiondownButtonCounter.setGravity(17);
                this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor(Theme.key_chat_goDownButtonCounterBackground)));
                this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(f), AndroidUtilities.dp(8.0f), 0);
                this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
                this.mentiondownButton.setContentDescription(LocaleController.getString(R.string.AccDescrMentionDown));
                this.reactionsMentiondownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda102
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$41(view2);
                    }
                });
                this.reactionsMentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
                    @Override // android.view.View.OnLongClickListener
                    public final boolean onLongClick(View view2) {
                        boolean lambda$createView$44;
                        lambda$createView$44 = ChatActivity.this.lambda$createView$44(view2);
                        return lambda$createView$44;
                    }
                });
                this.reactionsMentiondownButton.setVisibility(4);
                ImageView imageView11 = new ImageView(context);
                this.reactionsMentiondownButtonImage = imageView11;
                imageView11.setImageResource(R.drawable.reactionbutton);
                this.reactionsMentiondownButtonImage.setScaleType(scaleType);
                this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i27), mode));
                if (i4 < 21) {
                    this.reactionsMentiondownButtonImage.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.33
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable5 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable5 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate5 = context.getResources().getDrawable(i25).mutate();
                mutate5.setColorFilter(new PorterDuffColorFilter(-16777216, mode));
                CombinedDrawable combinedDrawable5 = new CombinedDrawable(mutate5, createCircleDrawable5, 0, 0);
                combinedDrawable5.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable5);
                this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                CounterView counterView2 = new CounterView(context, this.themeDelegate);
                this.reactionsMentiondownButtonCounter = counterView2;
                this.reactionsMentiondownButton.addView(counterView2, LayoutHelper.createFrame(-1, 28, 51));
                this.reactionsMentiondownButton.setContentDescription(LocaleController.getString(R.string.AccDescrReactionMentionDown));
                if (!this.isInsideContainer) {
                    this.fragmentLocationContextView = new FragmentContextView(context, this, true, this.themeDelegate);
                    this.fragmentContextView = new FragmentContextView(context, this, false, this.themeDelegate);
                    this.contentView.addView(this.fragmentLocationContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    this.contentView.addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    this.fragmentContextView.setAdditionalContextView(this.fragmentLocationContextView);
                    this.fragmentLocationContextView.setAdditionalContextView(this.fragmentContextView);
                    this.fragmentContextView.setEnabled(!this.inPreviewMode);
                    this.fragmentLocationContextView.setEnabled(!this.inPreviewMode);
                    if (this.chatMode != 0) {
                        this.fragmentContextView.setSupportsCalls(false);
                    }
                }
                FrameLayout frameLayout7 = new FrameLayout(context);
                this.messagesSearchListContainer = frameLayout7;
                frameLayout7.setBackgroundColor(getThemedColor(Theme.key_windowBackgroundWhite));
                this.messagesSearchListContainer.setVisibility(8);
                this.messagesSearchListContainer.setAlpha(0.0f);
                this.contentView.addView(this.messagesSearchListContainer, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
                this.messagesSearchListView = new RecyclerListView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.34
                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
                    public void onAttachedToWindow() {
                        super.onAttachedToWindow();
                        if (ChatActivity.this.messagesSearchAdapter != null) {
                            ChatActivity.this.messagesSearchAdapter.attach();
                        }
                    }

                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
                    public void onDetachedFromWindow() {
                        super.onDetachedFromWindow();
                        if (ChatActivity.this.messagesSearchAdapter != null) {
                            ChatActivity.this.messagesSearchAdapter.detach();
                        }
                    }
                };
                final LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context);
                linearLayoutManager.setOrientation(1);
                this.messagesSearchListView.setLayoutManager(linearLayoutManager);
                RecyclerListView recyclerListView2 = this.messagesSearchListView;
                MessagesSearchAdapter messagesSearchAdapter = new MessagesSearchAdapter(context, this.themeDelegate, this.searchType, this.dialog_id != getUserConfig().getClientUserId());
                this.messagesSearchAdapter = messagesSearchAdapter;
                recyclerListView2.setAdapter(messagesSearchAdapter);
                checkHashtagStories(true);
                DefaultItemAnimator defaultItemAnimator = new DefaultItemAnimator();
                defaultItemAnimator.setSupportsChangeAnimations(false);
                defaultItemAnimator.setDelayAnimations(false);
                defaultItemAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                defaultItemAnimator.setDurations(350L);
                this.messagesSearchListView.setItemAnimator(defaultItemAnimator);
                this.messagesSearchListContainer.addView(this.messagesSearchListView, -1, -1);
                this.messagesSearchListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda105
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                    public final void onItemClick(View view2, int i28) {
                        ChatActivity.this.lambda$createView$48(view2, i28);
                    }
                });
                this.messagesSearchListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.35
                    @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
                    public void onScrolled(RecyclerView recyclerView, int i28, int i29) {
                        if (recyclerView.getScrollState() == 1) {
                            AndroidUtilities.hideKeyboard(ChatActivity.this.contentView);
                        }
                        int findLastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();
                        if ((findLastVisibleItemPosition == -1 ? 0 : findLastVisibleItemPosition) <= 0 || findLastVisibleItemPosition <= ChatActivity.this.messagesSearchAdapter.loadedCount - 5) {
                            return;
                        }
                        if (ChatActivity.this.chatMode != 7) {
                            ChatActivity.this.getMediaDataController().loadMoreSearchMessages(true);
                        } else if (ChatActivity.this.loading || ChatActivity.this.endReached[0]) {
                        } else {
                            ChatActivity.this.loading = true;
                            ChatActivity.this.waitingForLoad.add(Integer.valueOf(ChatActivity.this.lastLoadIndex));
                            HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).searchHashtag(ChatActivity.this.searchingHashtag, ((BaseFragment) ChatActivity.this).classGuid, ChatActivity.this.searchType, ChatActivity.access$24208(ChatActivity.this));
                        }
                    }
                });
                FlickerLoadingView flickerLoadingView = new FlickerLoadingView(context, this.themeDelegate);
                this.hashtagLoadingView = flickerLoadingView;
                flickerLoadingView.setViewType(7);
                StickerEmptyView stickerEmptyView = new StickerEmptyView(getContext(), this.hashtagLoadingView, 1);
                this.hashtagSearchEmptyView = stickerEmptyView;
                stickerEmptyView.setClickable(true);
                this.hashtagSearchEmptyView.title.setText(LocaleController.getString(R.string.NoResult));
                this.hashtagSearchEmptyView.setVisibility(8);
                this.hashtagSearchEmptyView.addView(this.hashtagLoadingView, 0);
                this.hashtagSearchEmptyView.showProgress(true, false);
                this.messagesSearchListContainer.addView(this.hashtagSearchEmptyView, new FrameLayout.LayoutParams(-1, -1, 17));
                if (this.parentThemeDelegate == null && !this.isInsideContainer) {
                    ViewPagerFixed viewPagerFixed = new ViewPagerFixed(context, this.resourceProvider) { // from class: org.telegram.ui.ChatActivity.36
                        @Override // android.widget.FrameLayout, android.view.View
                        protected void onMeasure(int i28, int i29) {
                            super.onMeasure(i28, i29);
                            for (int i30 = 0; i30 < getChildCount(); i30++) {
                                View childAt = getChildAt(i30);
                                if (childAt instanceof ChatActivityContainer) {
                                    ((ChatActivityContainer) childAt).chatActivity.contentView.setPadding(0, ((BaseFragment) ChatActivity.this).actionBar.getHeight() + ChatActivity.this.hashtagSearchTabs.getHeight(), 0, 0);
                                }
                            }
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed
                        protected void onTabAnimationUpdate(boolean z3) {
                            super.onTabAnimationUpdate(z3);
                            ChatActivity.this.contentView.invalidateBlur();
                            ChatActivity.this.contentView.updateBlurContent();
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed
                        protected void onTabScrollEnd(int i28) {
                            super.onTabScrollEnd(i28);
                            if (i28 == 0 && ChatActivity.this.requestClearSearchPages) {
                                ChatActivity.this.requestClearSearchPages = false;
                                ChatActivity.this.searchViewPager.clearViews();
                            }
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed, android.view.View
                        public boolean onTouchEvent(MotionEvent motionEvent) {
                            return false;
                        }
                    };
                    this.searchViewPager = viewPagerFixed;
                    viewPagerFixed.setAdapter(new ViewPagerFixed.Adapter() { // from class: org.telegram.ui.ChatActivity.37
                        @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                        public void bindView(View view2, int i28, int i29) {
                            if (view2 instanceof ChatActivityContainer) {
                                ((ChatActivityContainer) view2).chatActivity.updateSearchingHashtag(ChatActivity.this.searchingHashtag);
                            }
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                        public View createView(int i28) {
                            if (i28 == 0) {
                                return new FirstViewPage(context);
                            }
                            Bundle bundle = new Bundle();
                            bundle.putInt("chatMode", 7);
                            bundle.putInt("searchType", i28);
                            bundle.putString("searchHashtag", ChatActivity.this.searchingHashtag);
                            ChatActivityContainer chatActivityContainer = new ChatActivityContainer(context, ChatActivity.this.getParentLayout(), bundle) { // from class: org.telegram.ui.ChatActivity.37.1
                                boolean activityCreated = false;

                                @Override // org.telegram.ui.ChatActivityContainer
                                protected void initChatActivity() {
                                    if (this.activityCreated) {
                                        return;
                                    }
                                    this.activityCreated = true;
                                    super.initChatActivity();
                                }
                            };
                            chatActivityContainer.chatActivity.parentThemeDelegate = ChatActivity.this.themeDelegate;
                            chatActivityContainer.chatActivity.parentChatActivity = ChatActivity.this;
                            chatActivityContainer.chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.37.2
                                @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                                public /* synthetic */ void onUnpin(boolean z3, boolean z4) {
                                    ChatActivityDelegate.-CC.$default$onUnpin(this, z3, z4);
                                }

                                @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                                public void openHashtagSearch(String str2) {
                                    ChatActivity.this.lambda$openHashtagSearch$304(str2);
                                }

                                @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                                public /* synthetic */ void openReplyMessage(int i29) {
                                    ChatActivityDelegate.-CC.$default$openReplyMessage(this, i29);
                                }
                            };
                            return chatActivityContainer;
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                        public int getItemCount() {
                            return 3;
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                        public String getItemTitle(int i28) {
                            return LocaleController.getString(i28 != 1 ? i28 != 2 ? R.string.SearchThisChat : R.string.SearchPublicPosts : R.string.SearchMyMessages);
                        }

                        @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                        public int getItemViewType(int i28) {
                            return i28;
                        }
                    });
                    this.searchViewPager.setAllowDisallowInterceptTouch(false);
                    this.contentView.addView(this.searchViewPager, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                    ChatSearchTabs chatSearchTabs = new ChatSearchTabs(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.38
                        @Override // org.telegram.ui.Components.ChatSearchTabs
                        protected void onShownUpdate(boolean z3) {
                            setBackgroundColor(((BaseFragment) ChatActivity.this).actionBar.getBackgroundColor());
                            if (ChatActivity.this.tagSelector != null) {
                                ChatActivity.this.tagSelector.setTranslationY(ChatActivity.this.contentPanTranslation + getCurrentHeight());
                            }
                            if (!z3) {
                                ChatActivity.this.invalidateChatListViewTopPadding();
                                return;
                            }
                            ChatActivity.this.invalidateChatListViewTopPadding = true;
                            ChatActivity.this.updateChatListViewTopPadding();
                        }
                    };
                    this.hashtagSearchTabs = chatSearchTabs;
                    chatSearchTabs.setVisibility(8);
                    this.hashtagSearchTabs.setTabs(this.searchViewPager.createTabsView(true, 8));
                    this.contentView.addView(this.hashtagSearchTabs, LayoutHelper.createFrame(-1, 40, 55));
                }
                this.contentView.addView(this.actionBar);
                View view2 = new View(context);
                this.overlayView = view2;
                view2.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda106
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view3, MotionEvent motionEvent) {
                        boolean lambda$createView$49;
                        lambda$createView$49 = ChatActivity.this.lambda$createView$49(view3, motionEvent);
                        return lambda$createView$49;
                    }
                });
                this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
                this.overlayView.setVisibility(8);
                this.contentView.setClipChildren(false);
                this.instantCameraView = null;
                BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.39
                    private Rect blurBounds = new Rect();

                    @Override // android.view.View
                    public void onDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        this.blurBounds.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                        ChatActivity.this.contentView.drawBlurRect(canvas, getY(), this.blurBounds, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
                    }
                };
                this.bottomMessagesActionContainer = blurredFrameLayout;
                blurredFrameLayout.drawBlur = false;
                blurredFrameLayout.isTopView = false;
                blurredFrameLayout.setVisibility(4);
                this.bottomMessagesActionContainer.setWillNotDraw(false);
                this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
                this.bottomMessagesActionContainer.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda107
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view3, MotionEvent motionEvent) {
                        boolean lambda$createView$50;
                        lambda$createView$50 = ChatActivity.lambda$createView$50(view3, motionEvent);
                        return lambda$createView$50;
                    }
                });
                this.replyButton = null;
                this.forwardButton = null;
                40 r4 = new 40(getParentActivity(), this.contentView, this, this.chatMode == 6, this.themeDelegate);
                this.chatActivityEnterView = r4;
                r4.getEditField().adaptiveCreateLinkDialog = true;
                if (this.chatMode != 6) {
                    chatActivityEnterView = this.chatActivityEnterView;
                    chatActivityEnterViewDelegate = new ChatActivityEnterView.ChatActivityEnterViewDelegate() { // from class: org.telegram.ui.ChatActivity.41
                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void bottomPanelTranslationYChanged(float f2) {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$bottomPanelTranslationYChanged(this, f2);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ boolean checkCanRemoveRestrictionsByBoosts() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$checkCanRemoveRestrictionsByBoosts(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void didPressAttachButton() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ int getContentViewHeight() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getContentViewHeight(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ ReplyQuote getReplyQuote() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getReplyQuote(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ TL_stories.StoryItem getReplyToStory() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getReplyToStory(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ TLRPC.TL_channels_sendAsPeers getSendAsPeers() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getSendAsPeers(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ boolean hasForwardingMessages() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$hasForwardingMessages(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ boolean hasScheduledMessages() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$hasScheduledMessages(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ int measureKeyboardHeight() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$measureKeyboardHeight(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void needChangeVideoPreviewState(int i28, float f2) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void needSendTyping() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void needShowMediaBanHint() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void needStartRecordAudio(int i28) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void needStartRecordVideo(int i28, boolean z3, int i29, int i30, long j2) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onAttachButtonHidden() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onAttachButtonShow() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onAudioVideoInterfaceUpdated() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void onContextMenuClose() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onContextMenuClose(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void onContextMenuOpen() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onContextMenuOpen(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void onEditTextScroll() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onEditTextScroll(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void onKeyboardRequested() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onKeyboardRequested(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onMessageEditEnd(boolean z3) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onMessageSend(CharSequence charSequence3, boolean z3, int i28) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onPreAudioVideoRecord() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onSendLongClick() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onStickersExpandedChange() {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onStickersTab(boolean z3) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onSwitchRecordMode(boolean z3) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onTextChanged(CharSequence charSequence3, boolean z3, boolean z4) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onTextSelectionChanged(int i28, int i29) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onTextSpansChanged(CharSequence charSequence3) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void onTrendingStickersShowed(boolean z3) {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onTrendingStickersShowed(this, z3);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onUpdateSlowModeButton(View view3, boolean z3, CharSequence charSequence3) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void onWindowSizeChanged(int i28) {
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ boolean onceVoiceAvailable() {
                            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$onceVoiceAvailable(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void openScheduledMessages() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$openScheduledMessages(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void prepareMessageSending() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$prepareMessageSending(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public /* synthetic */ void scrollToSendingMessage() {
                            ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$scrollToSendingMessage(this);
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
                        public void toggleVideoRecordingPause() {
                        }
                    };
                } else {
                    chatActivityEnterView = this.chatActivityEnterView;
                    chatActivityEnterViewDelegate = new ChatActivityEnterViewDelegate();
                }
                chatActivityEnterView.setDelegate(chatActivityEnterViewDelegate);
                this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
                chatFull = this.chatInfo;
                if (chatFull != null) {
                    this.chatActivityEnterView.setChatInfo(chatFull);
                }
                this.chatActivityEnterView.setId(1000);
                this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, this.hasQuickReplies, false);
                this.chatActivityEnterView.updateBotWebView(false);
                this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
                ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
                chatActivityEnterView4.setAllowStickersAndGifs(true, true, encryptedChat != null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 46);
                str = this.textToSet;
                if (str != null) {
                    this.chatActivityEnterView.setFieldText(str);
                    this.textToSet = null;
                }
                if (!this.inPreviewMode || this.isInsideContainer) {
                    this.chatActivityEnterView.setVisibility(4);
                }
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.chatActivityEnterView.setBotInfo(this.botInfo, false);
                }
                this.contentView.addView(this.chatActivityEnterView, LayoutHelper.createFrame(-1, -2, 83));
                if (this.chatMode != 6) {
                    this.chatActivityEnterView.checkChannelRights();
                }
                this.chatActivityEnterTopView = new ChatActivityEnterTopView(context) { // from class: org.telegram.ui.ChatActivity.42
                    @Override // android.view.View
                    public boolean hasOverlappingRendering() {
                        return false;
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f2) {
                        super.setTranslationY(f2);
                        ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView5 != null) {
                            chatActivityEnterView5.invalidate();
                        }
                        if (getVisibility() != 8) {
                            ChatActivity.this.hideHints(true);
                            if (ChatActivity.this.chatListView != null) {
                                ChatActivity.this.chatListView.setTranslationY(f2);
                            }
                            if (ChatActivity.this.progressView != null) {
                                ChatActivity.this.progressView.setTranslationY(f2);
                            }
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                            View view3 = ChatActivity.this.fragmentView;
                            if (view3 != null) {
                                view3.invalidate();
                            }
                        }
                    }

                    @Override // android.view.View
                    public void setVisibility(int i28) {
                        super.setVisibility(i28);
                        if (i28 == 8) {
                            if (ChatActivity.this.chatListView != null) {
                                ChatActivity.this.chatListView.setTranslationY(0.0f);
                            }
                            if (ChatActivity.this.progressView != null) {
                                ChatActivity.this.progressView.setTranslationY(0.0f);
                            }
                        }
                    }
                };
                View view3 = new View(context);
                this.replyLineView = view3;
                view3.setBackgroundColor(getThemedColor(Theme.key_chat_replyPanelLine));
                this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
                if (this.chatMode == 6) {
                    this.chatActivityEnterView.setEditingBusinessLink(this.businessLink);
                }
                final FrameLayout frameLayout8 = new FrameLayout(context);
                this.chatActivityEnterTopView.addReplyView(frameLayout8, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
                frameLayout8.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda108
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$51(view4);
                    }
                });
                frameLayout8.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda109
                    @Override // android.view.View.OnLongClickListener
                    public final boolean onLongClick(View view4) {
                        boolean lambda$createView$52;
                        lambda$createView$52 = ChatActivity.this.lambda$createView$52(view4);
                        return lambda$createView$52;
                    }
                });
                ImageView imageView12 = new ImageView(context);
                this.replyIconImageView = imageView12;
                imageView12.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelIcons), mode));
                this.replyIconImageView.setScaleType(scaleType);
                frameLayout8.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
                ImageView imageView13 = new ImageView(context);
                this.replyCloseImageView = imageView13;
                imageView13.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelClose), mode));
                this.replyCloseImageView.setImageResource(R.drawable.input_clear);
                this.replyCloseImageView.setScaleType(scaleType);
                if (i4 >= 21) {
                    this.replyCloseImageView.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615, 1, AndroidUtilities.dp(18.0f)));
                }
                this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                this.replyCloseImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$53(view4);
                    }
                });
                SimpleTextView simpleTextView2 = new SimpleTextView(context);
                this.replyNameTextView = simpleTextView2;
                simpleTextView2.setTextSize(14);
                this.replyNameTextView.setTextColor(getThemedColor(Theme.key_chat_replyPanelName));
                this.replyNameTextView.setTypeface(AndroidUtilities.bold());
                frameLayout8.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView3 = new SimpleTextView(context);
                this.replyObjectTextView = simpleTextView3;
                simpleTextView3.setTextSize(14);
                SimpleTextView simpleTextView4 = this.replyObjectTextView;
                int i28 = Theme.key_windowBackgroundWhiteGrayText;
                simpleTextView4.setTextColor(getThemedColor(i28));
                frameLayout8.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView5 = new SimpleTextView(context);
                this.replyObjectHintTextView = simpleTextView5;
                simpleTextView5.setTextSize(14);
                this.replyObjectHintTextView.setTextColor(getThemedColor(i28));
                this.replyObjectHintTextView.setText(LocaleController.getString(R.string.TapForForwardingOptions));
                this.replyObjectHintTextView.setAlpha(0.0f);
                frameLayout8.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                final SpoilerEffect spoilerEffect = new SpoilerEffect();
                BackupImageView backupImageView = new BackupImageView(context) { // from class: org.telegram.ui.ChatActivity.43
                    Path path = new Path();

                    @Override // android.view.View
                    public void draw(Canvas canvas) {
                        super.draw(canvas);
                        if (ChatActivity.this.replyImageHasMediaSpoiler) {
                            this.path.rewind();
                            RectF rectF = AndroidUtilities.rectTmp;
                            rectF.set(this.imageReceiver.getImageX(), this.imageReceiver.getImageY(), this.imageReceiver.getImageX2(), this.imageReceiver.getImageY2());
                            this.path.addRoundRect(rectF, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Path.Direction.CW);
                            canvas.save();
                            canvas.clipPath(this.path);
                            spoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                            spoilerEffect.setBounds((int) this.imageReceiver.getImageX(), (int) this.imageReceiver.getImageY(), (int) this.imageReceiver.getImageX2(), (int) this.imageReceiver.getImageY2());
                            spoilerEffect.draw(canvas);
                            invalidate();
                            canvas.restore();
                        }
                    }
                };
                this.replyImageView = backupImageView;
                backupImageView.setRoundRadius(AndroidUtilities.dp(2.0f));
                frameLayout8.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                ChatActivityFragmentView chatActivityFragmentView2 = this.contentView;
                SuggestEmojiView suggestEmojiView = new SuggestEmojiView(context, this.currentAccount, this.chatActivityEnterView, this.themeDelegate);
                this.suggestEmojiPanel = suggestEmojiView;
                chatActivityFragmentView2.addView(suggestEmojiView, LayoutHelper.createFrame(-1, (int) NotificationCenter.audioRouteChanged, 83));
                this.suggestEmojiPanel.setVisibility((this.allowStickersPanel || isInPreviewMode() || ((chatActivityEnterView2 = this.chatActivityEnterView) != null && chatActivityEnterView2.isStickersExpanded())) ? 8 : 0);
                ChatActivityEnterTopView.EditView editView = new ChatActivityEnterTopView.EditView(context);
                editView.setMotionEventSplittingEnabled(false);
                editView.setOrientation(0);
                editView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda111
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$54(view4);
                    }
                });
                this.chatActivityEnterTopView.addEditView(editView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
                i5 = 0;
                while (i5 < 2) {
                    final boolean z3 = i5 == 0;
                    final ChatActivityEnterTopView.EditViewButton editViewButton = new ChatActivityEnterTopView.EditViewButton(context) { // from class: org.telegram.ui.ChatActivity.44
                        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
                        public void setEditButton(boolean z4) {
                            super.setEditButton(z4);
                            if (z3) {
                                getTextView().setMaxWidth(z4 ? AndroidUtilities.dp(116.0f) : ConnectionsManager.DEFAULT_DATACENTER_ID);
                            }
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
                        public void updateColors() {
                            int dp = z3 ? AndroidUtilities.dp(14.0f) : 0;
                            ChatActivity chatActivity = ChatActivity.this;
                            int i29 = Theme.key_chat_replyPanelName;
                            setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i29) & 436207615, dp, 0));
                            getImageView().setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(i29), PorterDuff.Mode.MULTIPLY));
                            getTextView().setTextColor(ChatActivity.this.getThemedColor(i29));
                        }
                    };
                    editViewButton.setOrientation(0);
                    ViewHelper.setPadding(editViewButton, 10.0f, 0.0f, 10.0f, 0.0f);
                    editView.addButton(editViewButton, LayoutHelper.createLinear(-2, -1));
                    ImageView imageView14 = new ImageView(context);
                    imageView14.setScaleType(ImageView.ScaleType.CENTER);
                    imageView14.setImageResource(z3 ? R.drawable.msg_photoeditor : R.drawable.msg_replace);
                    editViewButton.addImageView(imageView14, LayoutHelper.createLinear(24, -1));
                    editViewButton.addView(new Space(context), LayoutHelper.createLinear(10, -1));
                    TextView textView = new TextView(context);
                    textView.setMaxLines(1);
                    textView.setSingleLine(true);
                    textView.setTextSize(1, 14.0f);
                    textView.setTypeface(AndroidUtilities.bold());
                    textView.setGravity(19);
                    textView.setEllipsize(TextUtils.TruncateAt.END);
                    editViewButton.addTextView(textView, LayoutHelper.createLinear(-2, -1));
                    editViewButton.updateColors();
                    editViewButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda112
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view4) {
                            ChatActivity.this.lambda$createView$55(editViewButton, frameLayout8, view4);
                        }
                    });
                    i5++;
                }
                this.searchContainer = null;
                FrameLayout frameLayout9 = new FrameLayout(context) { // from class: org.telegram.ui.ChatActivity.45
                    @Override // android.view.View
                    public void onDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                    }
                };
                this.bottomOverlay = frameLayout9;
                frameLayout9.setWillNotDraw(false);
                this.bottomOverlay.setVisibility(4);
                this.bottomOverlay.setFocusable(true);
                this.bottomOverlay.setFocusableInTouchMode(true);
                this.bottomOverlay.setClickable(true);
                this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                TextView textView2 = new TextView(context);
                this.bottomOverlayText = textView2;
                textView2.setTextSize(1, 14.0f);
                this.bottomOverlayText.setGravity(17);
                this.bottomOverlayText.setMaxLines(2);
                this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
                this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
                this.bottomOverlayText.setTextColor(getThemedColor(Theme.key_chat_secretChatStatusText));
                this.bottomOverlayText.setPadding(AndroidUtilities.dp(24.0f), 0, AndroidUtilities.dp(24.0f), 0);
                this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-1, -1.0f, 17, 0.0f, 0.0f, 0.0f, 0.0f));
                BlurredFrameLayout blurredFrameLayout2 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.46
                    private Rect blurBounds = new Rect();

                    @Override // org.telegram.ui.Components.BlurredFrameLayout, android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        if (SharedConfig.chatBlurEnabled()) {
                            if (this.backgroundPaint == null) {
                                this.backgroundPaint = new Paint();
                            }
                            this.backgroundPaint.setColor(ChatActivity.this.getThemedColor(Theme.key_chat_messagePanelBackground));
                            this.blurBounds.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                            ChatActivity.this.contentView.drawBlurRect(canvas, getY(), this.blurBounds, this.backgroundPaint, false);
                        } else {
                            canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                        }
                        super.dispatchDraw(canvas);
                    }

                    @Override // android.widget.FrameLayout, android.view.View
                    protected void onMeasure(int i29, int i30) {
                        ((FrameLayout.LayoutParams) ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = View.MeasureSpec.getSize(i29);
                        super.onMeasure(i29, i30);
                    }
                };
                this.bottomOverlayChat = blurredFrameLayout2;
                blurredFrameLayout2.isTopView = false;
                blurredFrameLayout2.drawBlur = false;
                blurredFrameLayout2.setWillNotDraw(false);
                this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
                this.bottomOverlayChat.setVisibility(4);
                this.bottomOverlayChat.setClipChildren(false);
                this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                TextView textView3 = new TextView(context) { // from class: org.telegram.ui.ChatActivity.47
                    CellFlickerDrawable cellFlickerDrawable;

                    @Override // android.widget.TextView, android.view.View
                    protected void onDraw(Canvas canvas) {
                        super.onDraw(canvas);
                        if (this.cellFlickerDrawable == null) {
                            CellFlickerDrawable cellFlickerDrawable = new CellFlickerDrawable();
                            this.cellFlickerDrawable = cellFlickerDrawable;
                            cellFlickerDrawable.drawFrame = false;
                            cellFlickerDrawable.repeatProgress = 2.0f;
                        }
                        this.cellFlickerDrawable.setParentWidth(getMeasuredWidth());
                        RectF rectF = AndroidUtilities.rectTmp;
                        rectF.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                        this.cellFlickerDrawable.draw(canvas, rectF, AndroidUtilities.dp(4.0f), null);
                        invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int i29) {
                        super.setVisibility(i29);
                        ChatActivity.this.bottomOverlayChat.getLayoutParams().height = AndroidUtilities.dp(i29 == 0 ? 67.0f : 51.0f);
                    }
                };
                this.bottomOverlayStartButton = textView3;
                textView3.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(Theme.key_featuredStickers_addButton), 8.0f));
                this.bottomOverlayStartButton.setTextColor(getThemedColor(Theme.key_featuredStickers_buttonText));
                this.bottomOverlayStartButton.setText(LocaleController.getString(R.string.BotStart));
                this.bottomOverlayStartButton.setTextSize(1, 16.0f);
                this.bottomOverlayStartButton.setGravity(17);
                this.bottomOverlayStartButton.setTypeface(AndroidUtilities.bold());
                this.bottomOverlayStartButton.setVisibility(8);
                this.bottomOverlayStartButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda114
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$56(view4);
                    }
                });
                this.bottomOverlayChat.addView(this.bottomOverlayStartButton, LayoutHelper.createFrame(-1, -1.0f, 17, 8.0f, 8.0f, 8.0f, 8.0f));
                user = this.currentUser;
                if (user != null || !user.bot || user.id == UserObject.VERIFY || UserObject.isDeleted(user) || UserObject.isReplyUser(this.currentUser) || isInScheduleMode() || (i8 = this.chatMode) == 2) {
                    i6 = 3;
                } else {
                    i6 = 3;
                    if (i8 != 3 && !isReport()) {
                        this.bottomOverlayStartButton.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(0);
                    }
                }
                LinkSpanDrawable.LinksTextView linksTextView = new LinkSpanDrawable.LinksTextView(context, this.themeDelegate);
                this.bottomOverlayLinksText = linksTextView;
                linksTextView.setVisibility(8);
                this.bottomOverlayLinksText.setTextColor(getThemedColor(Theme.key_graySectionText));
                this.bottomOverlayLinksText.setGravity(17);
                this.bottomOverlayLinksText.setTextAlignment(4);
                this.bottomOverlayLinksText.setTextSize(1, 13.0f);
                this.bottomOverlayChat.addView(this.bottomOverlayLinksText, LayoutHelper.createFrame(-1, -2.0f, 17, 0.0f, 0.0f, 0.0f, 0.0f));
                UnreadCounterTextView unreadCounterTextView = new UnreadCounterTextView(context) { // from class: org.telegram.ui.ChatActivity.48
                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected Theme.ResourcesProvider getResourceProvider() {
                        return ChatActivity.this.themeDelegate;
                    }

                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected float getTopOffset() {
                        return -AndroidUtilities.dp(2.0f);
                    }

                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected boolean isTouchFullWidth() {
                        return ChatActivity.this.botInfo != null;
                    }
                };
                this.bottomOverlayChatText = unreadCounterTextView;
                this.bottomOverlayChat.addView(unreadCounterTextView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayChatText.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda115
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$63(context, view4);
                    }
                });
                RadialProgressView radialProgressView2 = new RadialProgressView(context, this.themeDelegate);
                this.bottomOverlayProgress = radialProgressView2;
                radialProgressView2.setSize(AndroidUtilities.dp(22.0f));
                RadialProgressView radialProgressView3 = this.bottomOverlayProgress;
                int i29 = Theme.key_chat_fieldOverlayText;
                radialProgressView3.setProgressColor(getThemedColor(i29));
                this.bottomOverlayProgress.setVisibility(4);
                this.bottomOverlayProgress.setScaleX(0.1f);
                this.bottomOverlayProgress.setScaleY(0.1f);
                this.bottomOverlayProgress.setAlpha(1.0f);
                this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
                this.bottomOverlayImage = new ImageView(context);
                int themedColor = getThemedColor(i29);
                this.bottomOverlayImage.setImageResource(R.drawable.msg_help);
                this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY));
                this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
                i7 = Build.VERSION.SDK_INT;
                if (i7 >= 21) {
                    this.bottomOverlayImage.setBackgroundDrawable(Theme.createSelectorDrawable(Color.argb(24, Color.red(themedColor), Color.green(themedColor), Color.blue(themedColor)), 1));
                }
                this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayImage.setContentDescription(LocaleController.getString(R.string.SettingsHelp));
                this.bottomOverlayImage.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda116
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$64(view4);
                    }
                });
                ChatActivityFragmentView chatActivityFragmentView3 = this.contentView;
                MessageEnterTransitionContainer messageEnterTransitionContainer = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
                this.messageEnterTransitionContainer = messageEnterTransitionContainer;
                chatActivityFragmentView3.addView(messageEnterTransitionContainer);
                if (this.currentChat != null) {
                    HintView hintView = new HintView(getParentActivity(), 2, this.themeDelegate);
                    this.slowModeHint = hintView;
                    hintView.setAlpha(0.0f);
                    this.slowModeHint.setVisibility(4);
                    this.contentView.addView(this.slowModeHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                }
                this.chatAdapter.updateRowsSafe();
                if (this.loading || !this.messages.isEmpty()) {
                    z = false;
                    showProgressView(false);
                    createEmptyView(false);
                    this.chatListView.setEmptyView(this.emptyViewContainer);
                } else {
                    showProgressView(this.chatAdapter.botInfoRow < 0);
                    this.chatListView.setEmptyView(null);
                    z = false;
                }
                checkBotKeyboard();
                updateBottomOverlay();
                updateSecretStatus();
                updateTopPanel(z);
                updatePinnedMessageView(z);
                updateInfoTopView(z);
                RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager) { // from class: org.telegram.ui.ChatActivity.49
                    @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper
                    public void setScrollDirection(int i30) {
                        if (ChatActivity.this.reversed) {
                            if (i30 == 0) {
                                i30 = 1;
                            } else if (i30 == 1) {
                                i30 = 0;
                            }
                        }
                        super.setScrollDirection(i30);
                    }
                };
                this.chatScrollHelper = recyclerAnimationScrollHelper;
                recyclerAnimationScrollHelper.setScrollListener(new RecyclerAnimationScrollHelper.ScrollListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda117
                    @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.ScrollListener
                    public final void onScroll() {
                        ChatActivity.this.invalidateMessagesVisiblePart();
                    }
                });
                this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
                this.flagSecure = new FlagSecureReason(getParentActivity().getWindow(), new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda118
                    @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
                    public final boolean run() {
                        boolean lambda$createView$65;
                        lambda$createView$65 = ChatActivity.this.lambda$createView$65();
                        return lambda$createView$65;
                    }
                });
                if (charSequence2 != null) {
                    this.chatActivityEnterView.setFieldText(charSequence2);
                }
                fixLayoutInternal();
                this.textSelectionHelper.setCallback(new TextSelectionHelper.Callback() { // from class: org.telegram.ui.ChatActivity.50
                    @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
                    public void onStateChanged(boolean z4) {
                        ChatActivity.this.swipeBackEnabled = !z4;
                        if (z4) {
                            if (ChatActivity.this.slidingView != null) {
                                ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                                ChatActivity.this.slidingView = null;
                            }
                            ChatActivity.this.maybeStartTrackingSlidingView = false;
                            ChatActivity.this.startedTrackingSlidingView = false;
                            if (ChatActivity.this.textSelectionHint != null) {
                                ChatActivity.this.textSelectionHint.hide();
                            }
                        }
                        ChatActivity.this.updatePagedownButtonVisibility(true);
                    }

                    @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
                    public void onTextCopied() {
                        if (((BaseFragment) ChatActivity.this).actionBar != null && ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                            ChatActivity.this.clearSelectionMode();
                        }
                        ChatActivity.this.createUndoView();
                        ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                    }
                });
                overlayView = this.textSelectionHelper.getOverlayView(context);
                if (overlayView != null) {
                    if (overlayView.getParent() instanceof ViewGroup) {
                        ((ViewGroup) overlayView.getParent()).removeView(overlayView);
                    }
                    this.contentView.addView(overlayView);
                }
                this.textSelectionHelper.setParentView(this.chatListView);
                HashtagHistoryView hashtagHistoryView = new HashtagHistoryView(context, this.resourceProvider, this.currentAccount) { // from class: org.telegram.ui.ChatActivity.51
                    @Override // org.telegram.ui.Components.HashtagHistoryView
                    protected void onClick(String str2) {
                        ChatActivity.this.lambda$openHashtagSearch$304(str2);
                    }

                    @Override // org.telegram.ui.Components.HashtagHistoryView
                    protected void onScrolled(RecyclerView recyclerView, int i30, int i31) {
                        super.onScrolled(recyclerView, i30, i31);
                        if (recyclerView.getScrollState() == 1) {
                            AndroidUtilities.hideKeyboard(ChatActivity.this.contentView);
                        }
                    }
                };
                this.hashtagHistoryView = hashtagHistoryView;
                hashtagHistoryView.setVisibility(8);
                this.hashtagHistoryView.setAlpha(0.0f);
                this.contentView.addView(this.hashtagHistoryView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 40.0f, 0.0f, 0.0f));
                ChatActivityFragmentView chatActivityFragmentView4 = this.contentView;
                FireworksOverlay fireworksOverlay = new FireworksOverlay(context);
                this.fireworksOverlay = fireworksOverlay;
                chatActivityFragmentView4.addView(fireworksOverlay, LayoutHelper.createFrame(-1, -1.0f));
                checkInstantSearch();
                messageObject = this.replyingMessageObject;
                if (messageObject != null) {
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject, this.replyingQuote);
                }
                PinchToZoomHelper pinchToZoomHelper = new PinchToZoomHelper(i7 < 21 ? (ViewGroup) getParentActivity().getWindow().getDecorView() : this.contentView, this.contentView) { // from class: org.telegram.ui.ChatActivity.52
                    @Override // org.telegram.ui.PinchToZoomHelper
                    protected void drawOverlays(Canvas canvas, float f2, float f3, float f4, float f5, float f6) {
                        if (f2 > 0.0f) {
                            View child = getChild();
                            if (child instanceof ChatMessageCell) {
                                ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                                RectF rectF = AndroidUtilities.rectTmp;
                                rectF.set(f3, (int) Math.max(f5, f4), chatMessageCell.getMeasuredWidth() + f3, (int) Math.min(f6, chatMessageCell.getMeasuredHeight() + f4));
                                canvas.saveLayerAlpha(rectF, (int) (f2 * 255.0f), 31);
                                canvas.translate(f3, f4);
                                chatMessageCell.drawFromPinchToZoom = true;
                                chatMessageCell.drawOverlays(canvas);
                                if (chatMessageCell.shouldDrawTimeOnMedia() && chatMessageCell.getCurrentMessagesGroup() == null) {
                                    chatMessageCell.drawTime(canvas, 1.0f, false);
                                }
                                chatMessageCell.drawFromPinchToZoom = false;
                                canvas.restore();
                            }
                        }
                    }
                };
                this.pinchToZoomHelper = pinchToZoomHelper;
                pinchToZoomHelper.setCallback(new PinchToZoomHelper.Callback() { // from class: org.telegram.ui.ChatActivity.53
                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public TextureView getCurrentTextureView() {
                        return ChatActivity.this.videoTextureView;
                    }

                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public void onZoomFinished(MessageObject messageObject3) {
                        if (messageObject3 == null) {
                            return;
                        }
                        if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                            for (int i30 = 0; i30 < ChatActivity.this.chatListView.getChildCount(); i30++) {
                                if (ChatActivity.this.chatListView.getChildAt(i30) instanceof ChatMessageCell) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i30);
                                    if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                        AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                        if (animation.isRunning()) {
                                            animation.stop();
                                        }
                                        Bitmap animatedBitmap = animation.getAnimatedBitmap();
                                        if (animatedBitmap != null) {
                                            try {
                                                Bitmap videoBitmap = ChatActivity.this.pinchToZoomHelper.getVideoBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                                new Canvas(animatedBitmap).drawBitmap(videoBitmap, 0.0f, 0.0f, (Paint) null);
                                                videoBitmap.recycle();
                                            } catch (Throwable th) {
                                                FileLog.e(th);
                                            }
                                        }
                                    }
                                }
                            }
                            ChatActivity.this.createTextureView(true);
                            MediaController.getInstance().setTextureView(ChatActivity.this.videoTextureView, ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
                        }
                        ChatActivity.this.chatListView.invalidate();
                    }

                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public void onZoomStarted(MessageObject messageObject3) {
                        ChatActivity.this.chatListView.cancelClickRunnables(true);
                        ChatActivity.this.chatListView.stopScroll();
                        if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            chatActivity.contentView.removeView(chatActivity.videoPlayerContainer);
                            ChatActivity.this.videoPlayerContainer = null;
                            ChatActivity.this.videoTextureView = null;
                            ChatActivity.this.aspectRatioFrameLayout = null;
                        }
                        for (int i30 = 0; i30 < ChatActivity.this.chatListView.getChildCount(); i30++) {
                            if (ChatActivity.this.chatListView.getChildAt(i30) instanceof ChatMessageCell) {
                                ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i30);
                                if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                    chatMessageCell.getPhotoImage().setVisible(false, true);
                                }
                            }
                        }
                    }
                });
                this.pinchToZoomHelper.setClipBoundsListener(new PinchToZoomHelper.ClipBoundsListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda119
                    @Override // org.telegram.ui.PinchToZoomHelper.ClipBoundsListener
                    public final void getClipTopBottom(float[] fArr) {
                        ChatActivity.this.lambda$createView$66(fArr);
                    }
                });
                this.emojiAnimationsOverlay = new EmojiAnimationsOverlay(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId) { // from class: org.telegram.ui.ChatActivity.54
                    @Override // org.telegram.ui.EmojiAnimationsOverlay
                    public void onAllEffectsEnd() {
                        ChatActivity.this.updateMessagesVisiblePart(false);
                    }
                };
                this.actionBar.setDrawBlurBackground(this.contentView);
                if (this.isTopic) {
                    z2 = false;
                    TLRPC.Dialog dialog = (TLRPC.Dialog) getMessagesController().dialogs_dict.get(this.dialog_id);
                    if (dialog != null) {
                        this.reactionsMentionCount = dialog.unread_reactions_count;
                    }
                    if (getDialogId() == getUserConfig().getClientUserId() && this.chatMode != i6) {
                        HintView2 hintView2 = new HintView2(context, 1);
                        this.savedMessagesHint = hintView2;
                        hintView2.setMultilineText(true);
                        HintView2 hintView22 = this.savedMessagesHint;
                        Layout.Alignment alignment = Layout.Alignment.ALIGN_CENTER;
                        hintView22.setTextAlign(alignment);
                        this.savedMessagesHint.setText(AndroidUtilities.replaceTags(LocaleController.getString(R.string.SavedMessagesHint)));
                        HintView2 hintView23 = this.savedMessagesHint;
                        hintView23.setMaxWidthPx(HintView2.cutInFancyHalf(hintView23.getText(), this.savedMessagesHint.getTextPaint()));
                        if (AndroidUtilities.isTablet()) {
                            this.savedMessagesHint.setJoint(0.5f, 0.0f);
                        } else {
                            this.savedMessagesHint.setJoint(0.0f, 77.0f);
                        }
                        this.savedMessagesHint.setCloseButton(true);
                        this.savedMessagesHint.setOnHiddenListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda120
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$createView$67();
                            }
                        });
                        this.savedMessagesHint.setDuration(-1L);
                        this.savedMessagesHint.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), 0);
                        this.contentView.addView(this.savedMessagesHint, LayoutHelper.createFrame(-1, 120.0f, 55, 0.0f, -8.0f, 0.0f, 0.0f));
                        HintView2 rounding = new HintView2(context, 1).setMultilineText(true).setTextAlign(alignment).setDuration(-1L).setHideByTouch(true).useScale(true).setCloseButton(true).setJointPx(1.0f, -AndroidUtilities.dp(56.0f)).setRounding(8.0f);
                        this.savedMessagesSearchHint = rounding;
                        rounding.setText(LocaleController.getString(R.string.SavedTagSearchTooltipHint));
                        this.contentView.addView(this.savedMessagesSearchHint, LayoutHelper.createFrame(-1, 120.0f, 55, 16.0f, -8.0f, 16.0f, 0.0f));
                        if (getUserConfig().isPremium()) {
                            HintView2 rounding2 = new HintView2(context, i6).setMultilineText(true).setTextAlign(alignment).setDuration(-1L).setHideByTouch(true).useScale(true).setCloseButton(true).setRounding(8.0f);
                            this.savedMessagesTagHint = rounding2;
                            rounding2.setText(LocaleController.getString(R.string.SavedTagLongpressHint));
                            this.contentView.addView(this.savedMessagesTagHint, LayoutHelper.createFrame(-1, 120.0f, 55, 16.0f, 0.0f, 16.0f, 0.0f));
                        }
                    }
                    if (getDialogId() == getUserConfig().getClientUserId()) {
                        SearchTagsList searchTagsList = new SearchTagsList(context, this, this.contentView, this.currentAccount, getSavedDialogId(), this.themeDelegate, true) { // from class: org.telegram.ui.ChatActivity.55
                            @Override // org.telegram.ui.Components.SearchTagsList
                            protected void onShownUpdate(boolean z4) {
                                setBackgroundColor(((BaseFragment) ChatActivity.this).actionBar.getBackgroundColor());
                                if (ChatActivity.this.tagSelector != null) {
                                    ChatActivity.this.tagSelector.setTranslationY(ChatActivity.this.contentPanTranslation + getCurrentHeight());
                                }
                                if (z4) {
                                    ChatActivity.this.invalidateChatListViewTopPadding = true;
                                    ChatActivity.this.updateChatListViewTopPadding();
                                }
                            }

                            @Override // org.telegram.ui.Components.SearchTagsList
                            protected boolean setFilter(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
                                ChatActivity chatActivity = ChatActivity.this;
                                chatActivity.searchingReaction = visibleReaction;
                                chatActivity.searchingFiltered = visibleReaction != null;
                                if (visibleReaction == null) {
                                    ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
                                    ChatActivity.this.setFilterMessages(false);
                                    ChatActivity.this.updateSearchButtons(0, 0, -1);
                                }
                                ChatActivity.this.updateSearchUpDownButtonVisibility(true);
                                ChatActivity.this.updatePagedownButtonVisibility(true);
                                ChatActivity chatActivity2 = ChatActivity.this;
                                chatActivity2.searchingQuery = chatActivity2.searchItem.getSearchField().getText().toString();
                                ChatActivity.this.getMediaDataController().searchMessagesInChat(ChatActivity.this.searchingQuery, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ((BaseFragment) ChatActivity.this).classGuid, 0, ChatActivity.this.threadMessageId, false, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages, (TextUtils.isEmpty(ChatActivity.this.searchingQuery) && ChatActivity.this.searchingReaction == null) ? false : true, ChatActivity.this.searchingReaction);
                                AndroidUtilities.hideKeyboard(ChatActivity.this.searchItem.getSearchField());
                                return true;
                            }

                            @Override // org.telegram.ui.Components.SearchTagsList
                            public void updateTags(boolean z4) {
                                super.updateTags(z4);
                                ActionBarMenuItem actionBarMenuItem4 = ChatActivity.this.searchItem;
                                show(actionBarMenuItem4 != null && actionBarMenuItem4.isSearchFieldVisible() && hasFilters() && ChatActivity.this.searchingHashtag == null);
                            }
                        };
                        this.actionBarSearchTags = searchTagsList;
                        searchTagsList.setVisibility(8);
                        this.actionBarSearchTags.attach();
                        this.contentView.addView(this.actionBarSearchTags, LayoutHelper.createFrame(-1, 40, 55));
                    }
                    if (this.chatMode == 7) {
                        this.messagesSearchListContainer.setVisibility(0);
                        this.messagesSearchListContainer.setAlpha(1.0f);
                        this.messagesSearchListContainer.setTag(1);
                        this.searchExpandList.setText(LocaleController.getString(R.string.SearchAsChat), false);
                        updateSearchListEmptyView();
                    }
                    Timer.finish(create);
                    return this.fragmentView;
                }
                this.reactionsMentionCount = this.forumTopic.unread_reactions_count;
                z2 = false;
                updateReactionsMentionButton(z2);
                if (getDialogId() == getUserConfig().getClientUserId()) {
                    HintView2 hintView24 = new HintView2(context, 1);
                    this.savedMessagesHint = hintView24;
                    hintView24.setMultilineText(true);
                    HintView2 hintView222 = this.savedMessagesHint;
                    Layout.Alignment alignment2 = Layout.Alignment.ALIGN_CENTER;
                    hintView222.setTextAlign(alignment2);
                    this.savedMessagesHint.setText(AndroidUtilities.replaceTags(LocaleController.getString(R.string.SavedMessagesHint)));
                    HintView2 hintView232 = this.savedMessagesHint;
                    hintView232.setMaxWidthPx(HintView2.cutInFancyHalf(hintView232.getText(), this.savedMessagesHint.getTextPaint()));
                    if (AndroidUtilities.isTablet()) {
                    }
                    this.savedMessagesHint.setCloseButton(true);
                    this.savedMessagesHint.setOnHiddenListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda120
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$createView$67();
                        }
                    });
                    this.savedMessagesHint.setDuration(-1L);
                    this.savedMessagesHint.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), 0);
                    this.contentView.addView(this.savedMessagesHint, LayoutHelper.createFrame(-1, 120.0f, 55, 0.0f, -8.0f, 0.0f, 0.0f));
                    HintView2 rounding3 = new HintView2(context, 1).setMultilineText(true).setTextAlign(alignment2).setDuration(-1L).setHideByTouch(true).useScale(true).setCloseButton(true).setJointPx(1.0f, -AndroidUtilities.dp(56.0f)).setRounding(8.0f);
                    this.savedMessagesSearchHint = rounding3;
                    rounding3.setText(LocaleController.getString(R.string.SavedTagSearchTooltipHint));
                    this.contentView.addView(this.savedMessagesSearchHint, LayoutHelper.createFrame(-1, 120.0f, 55, 16.0f, -8.0f, 16.0f, 0.0f));
                    if (getUserConfig().isPremium()) {
                    }
                }
                if (getDialogId() == getUserConfig().getClientUserId()) {
                }
                if (this.chatMode == 7) {
                }
                Timer.finish(create);
                return this.fragmentView;
            }
        }
        charSequence = null;
        mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        17 r03 = new 17(context, this.themeDelegate);
        this.chatListView = r03;
        if (this.currentEncryptedChat != null) {
        }
        this.chatListView.setHideIfEmpty(false);
        this.chatListView.setAccessibilityEnabled(false);
        this.chatListView.setNestedScrollingEnabled(false);
        this.chatListView.setInstantClick(true);
        this.chatListView.setDisableHighlightState(true);
        this.chatListView.setTag(1);
        this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
        RecyclerListView recyclerListView3 = this.chatListView;
        ChatActivityAdapter chatActivityAdapter2 = new ChatActivityAdapter(context);
        this.chatAdapter = chatActivityAdapter2;
        recyclerListView3.setAdapter(chatActivityAdapter2);
        this.chatListView.setClipToPadding(false);
        this.chatListView.setAnimateEmptyView(true, 1);
        this.chatListView.setScrollBarStyle(ConnectionsManager.FileTypeVideo);
        this.chatListViewPaddingTop = 0.0f;
        this.paddingTopHeight = 0.0f;
        invalidateChatListViewTopPadding();
        if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
        }
        charSequence2 = charSequence;
        19 r22 = new 19(context, 1000, 1, !this.reversed);
        this.chatLayoutManager = r22;
        r22.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() { // from class: org.telegram.ui.ChatActivity.20
            @Override // androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
            public int getSpanSize(int i252) {
                int i262;
                MessageObject messageObject3;
                MessageObject.GroupedMessages validGroupedMessage;
                if (i252 < ChatActivity.this.chatAdapter.messagesStartRow || i252 >= ChatActivity.this.chatAdapter.messagesEndRow || (i262 = i252 - ChatActivity.this.chatAdapter.messagesStartRow) < 0 || i262 >= ChatActivity.this.chatAdapter.getMessages().size() || (validGroupedMessage = ChatActivity.this.getValidGroupedMessage((messageObject3 = (MessageObject) ChatActivity.this.chatAdapter.getMessages().get(i262)))) == null) {
                    return 1000;
                }
                return validGroupedMessage.getPosition(messageObject3).spanSize;
            }
        });
        this.chatListView.setLayoutManager(this.chatLayoutManager);
        this.chatListView.addItemDecoration(new RecyclerView.ItemDecoration() { // from class: org.telegram.ui.ChatActivity.21
            @Override // androidx.recyclerview.widget.RecyclerView.ItemDecoration
            public void getItemOffsets(Rect rect, View view4, RecyclerView recyclerView, RecyclerView.State state) {
                ChatMessageCell chatMessageCell;
                MessageObject.GroupedMessages currentMessagesGroup;
                MessageObject.GroupedMessagePosition currentPosition;
                int i252 = 0;
                rect.bottom = 0;
                if (!(view4 instanceof ChatMessageCell) || (currentMessagesGroup = (chatMessageCell = (ChatMessageCell) view4).getCurrentMessagesGroup()) == null || (currentPosition = chatMessageCell.getCurrentPosition()) == null || currentPosition.siblingHeights == null) {
                    return;
                }
                Point point = AndroidUtilities.displaySize;
                float max = Math.max(point.x, point.y) * 0.5f;
                int extraInsetHeight = chatMessageCell.getExtraInsetHeight();
                int i262 = 0;
                while (true) {
                    float[] fArr = currentPosition.siblingHeights;
                    if (i262 >= fArr.length) {
                        break;
                    }
                    extraInsetHeight += (int) Math.ceil(fArr[i262] * max);
                    i262++;
                }
                int round = extraInsetHeight + ((currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f));
                int size2 = currentMessagesGroup.posArray.size();
                while (true) {
                    if (i252 < size2) {
                        MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(i252);
                        byte b = groupedMessagePosition.minY;
                        byte b2 = currentPosition.minY;
                        if (b == b2 && ((groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || b != b2 || groupedMessagePosition.maxY != currentPosition.maxY) && b == b2)) {
                            round -= ((int) Math.ceil(max * groupedMessagePosition.ph)) - AndroidUtilities.dp(4.0f);
                            break;
                        }
                        i252++;
                    } else {
                        break;
                    }
                }
                rect.bottom = -round;
            }
        });
        this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
        this.chatListView.setOnItemClickListener(this.onItemClickListener);
        this.chatListView.setOnScrollListener(new 22());
        this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
        if (getDialogId() != getUserConfig().getClientUserId()) {
        }
        ClippingImageView clippingImageView2 = new ClippingImageView(context);
        this.animatingImageView = clippingImageView2;
        clippingImageView2.setVisibility(8);
        this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
        FrameLayout frameLayout10 = new FrameLayout(context);
        this.progressView = frameLayout10;
        frameLayout10.setVisibility(4);
        this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
        View view4 = new View(context) { // from class: org.telegram.ui.ChatActivity.23
            private final RectF rect = new RectF();

            private void applyServiceShaderMatrix(int i252, int i262, float f2, float f3) {
                ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                if (themeDelegate != null) {
                    themeDelegate.applyServiceShaderMatrix(i252, i262, f2, f3);
                } else {
                    Theme.applyServiceShaderMatrix(i252, i262, f2, f3);
                }
            }

            public void applyServiceShaderMatrix() {
                applyServiceShaderMatrix(getMeasuredWidth(), ChatActivity.this.getServiceHeight(this), getX(), ChatActivity.this.getServiceTop(this));
            }

            @Override // android.view.View
            protected void dispatchDraw(Canvas canvas) {
                this.rect.set(0.0f, 0.0f, getWidth(), getHeight());
                applyServiceShaderMatrix();
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f), ChatActivity.this.getThemedPaint("paintChatActionBackground"));
                ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                if (themeDelegate == null ? Theme.hasGradientService() : themeDelegate.hasGradientService()) {
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f), ChatActivity.this.getThemedPaint("paintChatActionBackgroundDarken"));
                }
                super.dispatchDraw(canvas);
            }
        };
        this.progressView2 = view4;
        this.progressView.addView(view4, LayoutHelper.createFrame(36, 36, 17));
        RadialProgressView radialProgressView4 = new RadialProgressView(context, this.themeDelegate);
        this.progressBar = radialProgressView4;
        radialProgressView4.setSize(AndroidUtilities.dp(28.0f));
        this.progressBar.setProgressColor(getThemedColor(Theme.key_chat_serviceText));
        this.progressView.addView(this.progressBar, LayoutHelper.createFrame(i3, i3, 17));
        ChatActionCell chatActionCell2 = new ChatActionCell(context, false, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.24
            @Override // org.telegram.ui.Cells.ChatActionCell
            public boolean isFloating() {
                return true;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
            public void onDraw(Canvas canvas) {
                if (ChatActivity.this.scrimBlurBitmap != null) {
                    return;
                }
                float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - getY()) - AndroidUtilities.dp(4.0f);
                if (y <= 0.0f) {
                    super.onDraw(canvas);
                } else if (y < getMeasuredHeight()) {
                    canvas.save();
                    canvas.clipRect(0.0f, y, getMeasuredWidth(), getMeasuredHeight());
                    super.onDraw(canvas);
                    canvas.restore();
                }
            }

            @Override // android.view.ViewGroup
            public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                    return false;
                }
                return super.onInterceptTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
            public boolean onTouchEvent(MotionEvent motionEvent) {
                if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isReport()) {
                    return false;
                }
                return super.onTouchEvent(motionEvent);
            }

            @Override // android.view.View
            public void setTranslationY(float f2) {
                if (getTranslationY() != f2) {
                    invalidate();
                }
                super.setTranslationY(f2);
            }
        };
        this.floatingDateView = chatActionCell2;
        chatActionCell2.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
        this.floatingDateView.setAlpha(0.0f);
        this.floatingDateView.setImportantForAccessibility(2);
        this.floatingDateView.setInvalidateColors(true);
        this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
        this.floatingDateView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda124
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$26(view22);
            }
        });
        chat = this.currentChat;
        if (chat != null) {
        }
        this.pinnedMessageView = null;
        this.undoView = null;
        this.topUndoView = null;
        this.topChatPanelView = null;
        this.reportSpamButton = null;
        this.emojiStatusSpamHint = null;
        this.topViewSeparator1 = null;
        this.topViewSeparator2 = null;
        this.topViewSeparator3 = null;
        this.addToContactsButton = null;
        this.restartTopicButton = null;
        this.closeReportSpam = null;
        this.translateButton = null;
        this.bizBotButton = null;
        FrameLayout frameLayout22 = new FrameLayout(context);
        this.pagedownButton = frameLayout22;
        frameLayout22.setVisibility(4);
        this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        this.pagedownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda126
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$27(view22);
            }
        });
        ScaleStateListAnimator.apply(this.pagedownButton, 0.13f, 2.0f);
        FrameLayout frameLayout32 = new FrameLayout(context);
        this.searchUpButton = frameLayout32;
        frameLayout32.setVisibility(4);
        this.contentView.addView(this.searchUpButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        ImageView imageView15 = new ImageView(context);
        imageView15.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        i4 = Build.VERSION.SDK_INT;
        if (i4 < 21) {
        }
        Resources resources2 = context.getResources();
        int i252 = R.drawable.pagedown_shadow;
        Drawable mutate6 = resources2.getDrawable(i252).mutate();
        PorterDuff.Mode mode2 = PorterDuff.Mode.MULTIPLY;
        mutate6.setColorFilter(new PorterDuffColorFilter(-16777216, mode2));
        CombinedDrawable combinedDrawable6 = new CombinedDrawable(mutate6, createCircleDrawable, 0, 0);
        combinedDrawable6.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        imageView15.setBackground(combinedDrawable6);
        this.searchUpButton.addView(imageView15, LayoutHelper.createFrame(46, 46, 81));
        this.searchUpButton.setContentDescription(LocaleController.getString(R.string.AccDescrSearchNext));
        ImageView imageView22 = new ImageView(context);
        this.searchUpButtonArrow = imageView22;
        imageView22.setScaleY(-1.0f);
        ImageView imageView32 = this.searchUpButtonArrow;
        int i262 = R.drawable.pagedown;
        imageView32.setImageResource(i262);
        ImageView imageView42 = this.searchUpButtonArrow;
        ImageView.ScaleType scaleType2 = ImageView.ScaleType.CENTER;
        imageView42.setScaleType(scaleType2);
        ImageView imageView52 = this.searchUpButtonArrow;
        int i272 = Theme.key_chat_goDownButtonIcon;
        imageView52.setColorFilter(new PorterDuffColorFilter(getThemedColor(i272), mode2));
        this.searchUpButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.searchUpButton.addView(this.searchUpButtonArrow, LayoutHelper.createFrame(46, 46, 81));
        ScaleStateListAnimator.apply(this.searchUpButton, 0.12f, 2.0f);
        FrameLayout frameLayout42 = new FrameLayout(context);
        this.searchDownButton = frameLayout42;
        frameLayout42.setVisibility(4);
        this.contentView.addView(this.searchDownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        ImageView imageView62 = new ImageView(context);
        imageView62.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i4 < 21) {
        }
        Drawable mutate22 = context.getResources().getDrawable(i252).mutate();
        mutate22.setColorFilter(new PorterDuffColorFilter(-16777216, mode2));
        CombinedDrawable combinedDrawable22 = new CombinedDrawable(mutate22, createCircleDrawable2, 0, 0);
        combinedDrawable22.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        imageView62.setBackground(combinedDrawable22);
        this.searchDownButton.addView(imageView62, LayoutHelper.createFrame(46, 46, 81));
        this.searchDownButton.setContentDescription(LocaleController.getString(R.string.AccDescrSearchPrev));
        ImageView imageView72 = new ImageView(context);
        this.searchDownButtonArrow = imageView72;
        imageView72.setImageResource(i262);
        this.searchDownButtonArrow.setScaleType(scaleType2);
        this.searchDownButtonArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor(i272), mode2));
        this.searchDownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.searchDownButton.addView(this.searchDownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
        ScaleStateListAnimator.apply(this.searchDownButton, 0.12f, 2.0f);
        this.searchUpButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda96
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$28(view22);
            }
        });
        this.searchDownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda97
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$29(view22);
            }
        });
        FrameLayout frameLayout52 = new FrameLayout(context);
        this.mentiondownButton = frameLayout52;
        frameLayout52.setVisibility(4);
        this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        this.mentiondownButton.setOnClickListener(new 27());
        this.mentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda98
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view22) {
                boolean lambda$createView$32;
                lambda$createView$32 = ChatActivity.this.lambda$createView$32(view22);
                return lambda$createView$32;
            }
        });
        updateMessageListAccessibilityVisibility();
        FrameLayout frameLayout62 = new FrameLayout(context);
        this.reactionsMentiondownButton = frameLayout62;
        this.contentView.addView(frameLayout62, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        this.mentionContainer = new MentionsContainerView(context, this.dialog_id, this.threadMessageId, this, this.contentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.28
            private boolean wasAtTop = true;

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected boolean canOpen() {
                return ChatActivity.this.bottomOverlay.getVisibility() != 0 || ChatActivity.this.searchingForUser;
            }

            @Override // android.view.ViewGroup, android.view.View
            public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                if (getAlpha() <= 0.0f) {
                    return false;
                }
                return super.dispatchTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onClose() {
                ChatActivity.this.updateMessageListAccessibilityVisibility();
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onContextClick(TLRPC.BotInlineResult botInlineResult) {
                if (ChatActivity.this.getParentActivity() == null || botInlineResult.content == null) {
                    return;
                }
                if (!botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && !botInlineResult.type.equals("web_player_video")) {
                    ChatActivity.this.processExternalUrl(0, botInlineResult.content.url, null, null, false, false);
                    return;
                }
                int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(botInlineResult);
                ChatActivity chatActivity = ChatActivity.this;
                PhotoViewer.PhotoViewerProvider photoViewerProvider = chatActivity.botContextProvider;
                String str2 = botInlineResult.title;
                if (str2 == null) {
                    str2 = "";
                }
                String str3 = str2;
                String str4 = botInlineResult.description;
                String str5 = botInlineResult.content.url;
                EmbedBottomSheet.show(chatActivity, null, photoViewerProvider, str3, str4, str5, str5, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1], ChatActivity.this.isKeyboardVisible());
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onContextSearch(boolean z32) {
                ChatActivityEnterView chatActivityEnterView42 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView42 != null) {
                    chatActivityEnterView42.setCaption(getAdapter().getBotCaption());
                    ChatActivity.this.chatActivityEnterView.showContextProgress(z32);
                }
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onOpen() {
                if (ChatActivity.this.allowStickersPanel && ((!getAdapter().isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond) && ChatActivity.this.currentEncryptedChat != null && getAdapter().isBotContext())) {
                    SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                    if (!globalMainSettings.getBoolean("secretbot", false)) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                        builder.setTitle(LocaleController.getString(R.string.AppName));
                        builder.setMessage(LocaleController.getString(R.string.SecretChatContextBotAlert));
                        builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
                        ChatActivity.this.showDialog(builder.create());
                        globalMainSettings.edit().putBoolean("secretbot", true).commit();
                    }
                }
                ChatActivity.this.updateMessageListAccessibilityVisibility();
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onScrolled(boolean z32, boolean z4) {
                if (this.wasAtTop != z32) {
                    AndroidUtilities.updateViewShow(ChatActivity.this.suggestEmojiPanel, !ChatActivity.this.isInPreviewMode() && z32, false, true);
                    this.wasAtTop = z32;
                }
            }
        };
        if (isInPreviewMode()) {
        }
        this.contentView.addView(this.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
        this.contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.ChatActivity.29
            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void addToFavoriteSelected(String str2) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$addToFavoriteSelected(this, str2);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean can() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean canDeleteSticker(TLRPC.Document document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canDeleteSticker(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean canEditSticker() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canEditSticker(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean canSchedule() {
                return ChatActivity.this.canScheduleMessage();
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ Boolean canSetAsStatus(TLRPC.Document document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void copyEmoji(TLRPC.Document document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void deleteSticker(TLRPC.Document document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$deleteSticker(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void editSticker(TLRPC.Document document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$editSticker(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public long getDialogId() {
                return ChatActivity.this.dialog_id;
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ String getQuery(boolean z32) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z32);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void gifAddedOrDeleted() {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean isInScheduleMode() {
                return ChatActivity.this.chatMode == 1;
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean isPhotoEditor() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isPhotoEditor(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean isReplacedSticker() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isReplacedSticker(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean isSettingIntroSticker() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isSettingIntroSticker(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean isStickerEditor() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isStickerEditor(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needCopy(TLRPC.Document document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needMenu() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needOpen() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needRemove() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needRemoveFromRecent(TLRPC.Document document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean needSend(int i282) {
                return true;
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void newStickerPackSelected(CharSequence charSequence3, String str2, Utilities.Callback callback) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$newStickerPackSelected(this, charSequence3, str2, callback);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public void openSet(TLRPC.InputStickerSet inputStickerSet, boolean z32) {
                if (inputStickerSet == null || ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                TLRPC.TL_inputStickerSetID tL_inputStickerSetID = new TLRPC.TL_inputStickerSetID();
                tL_inputStickerSetID.access_hash = inputStickerSet.access_hash;
                tL_inputStickerSetID.id = inputStickerSet.id;
                Activity parentActivity = ChatActivity.this.getParentActivity();
                ChatActivity chatActivity = ChatActivity.this;
                StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
                stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                stickersAlert.setClearsInputField(z32);
                ChatActivity.this.showDialog(stickersAlert);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void removeFromRecent(TLRPC.Document document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void resetTouch() {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void sendEmoji(TLRPC.Document document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void sendGif(Object obj, Object obj2, boolean z32, int i282) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj, obj2, z32, i282);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void sendSticker() {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendSticker(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public void sendSticker(TLRPC.Document document, String str2, Object obj, boolean z32, int i282) {
                ChatActivity.this.chatActivityEnterView.lambda$onStickerSelected$68(document, str2, obj, null, true, z32, i282);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void setAsEmojiStatus(TLRPC.Document document, Integer num) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, document, num);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void setIntroSticker(String str2) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setIntroSticker(this, str2);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void stickerSetSelected(TLRPC.StickerSet stickerSet, String str2) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$stickerSetSelected(this, stickerSet, str2);
            }
        };
        this.mentionContainer.getListView().setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda99
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view22, MotionEvent motionEvent) {
                boolean lambda$createView$33;
                lambda$createView$33 = ChatActivity.this.lambda$createView$33(view22, motionEvent);
                return lambda$createView$33;
            }
        });
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
        this.mentionContainer.getAdapter().setParentFragment(this);
        this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
        this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
        this.mentionContainer.getAdapter().setNeedBotContext(true);
        this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
        MentionsContainerView.MentionsListView listView2 = this.mentionContainer.getListView();
        RecyclerListView.OnItemClickListener onItemClickListener2 = new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda100
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view22, int i282) {
                ChatActivity.this.lambda$createView$37(view22, i282);
            }
        };
        this.mentionsOnItemClickListener = onItemClickListener2;
        listView2.setOnItemClickListener(onItemClickListener2);
        this.mentionContainer.getListView().setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda101
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener
            public final boolean onItemClick(View view22, int i282) {
                boolean lambda$createView$39;
                lambda$createView$39 = ChatActivity.this.lambda$createView$39(view22, i282);
                return lambda$createView$39;
            }
        });
        ImageView imageView82 = new ImageView(context);
        this.pagedownButtonImage = imageView82;
        imageView82.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i4 < 21) {
        }
        Drawable mutate32 = context.getResources().getDrawable(i252).mutate();
        mutate32.setColorFilter(new PorterDuffColorFilter(-16777216, mode2));
        CombinedDrawable combinedDrawable32 = new CombinedDrawable(mutate32, createCircleDrawable3, 0, 0);
        combinedDrawable32.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.pagedownButtonImage.setBackground(combinedDrawable32);
        this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
        this.pagedownButton.setContentDescription(LocaleController.getString(R.string.AccDescrPageDown));
        ImageView imageView92 = new ImageView(context);
        this.pagedownButtonArrow = imageView92;
        imageView92.setImageResource(i262);
        this.pagedownButtonArrow.setScaleType(scaleType2);
        this.pagedownButtonArrow.setColorFilter(new PorterDuffColorFilter(getThemedColor(i272), mode2));
        this.pagedownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.pagedownButtonArrow.setPivotX(AndroidUtilities.dp(23.0f));
        this.pagedownButtonArrow.setPivotY(AndroidUtilities.dp(33.0f));
        this.pagedownButton.addView(this.pagedownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
        this.pagedownButtonLoading = new ImageView(context);
        CircularProgressDrawable circularProgressDrawable2 = new CircularProgressDrawable(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(1.7f), getThemedColor(i272));
        this.pagedownButtonLoadingDrawable = circularProgressDrawable2;
        circularProgressDrawable2.setAngleOffset(90.0f);
        this.pagedownButtonLoading.setImageDrawable(this.pagedownButtonLoadingDrawable);
        this.pagedownButtonLoading.setAlpha(0.0f);
        this.pagedownButtonLoading.setVisibility(8);
        this.pagedownButton.addView(this.pagedownButtonLoading, LayoutHelper.createFrame(46, 46, 81));
        CounterView counterView3 = new CounterView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.31
            @Override // android.view.View
            public void invalidate() {
                if (isInOutAnimation()) {
                    ChatActivity.this.contentView.invalidate();
                }
                super.invalidate();
            }
        };
        this.pagedownButtonCounter = counterView3;
        counterView3.setReverse(true);
        this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
        ImageView imageView102 = new ImageView(context);
        this.mentiondownButtonImage = imageView102;
        imageView102.setImageResource(R.drawable.mentionbutton);
        this.mentiondownButtonImage.setScaleType(scaleType2);
        this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i272), mode2));
        this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i4 < 21) {
        }
        Drawable mutate42 = context.getResources().getDrawable(i252).mutate();
        mutate42.setColorFilter(new PorterDuffColorFilter(-16777216, mode2));
        CombinedDrawable combinedDrawable42 = new CombinedDrawable(mutate42, createCircleDrawable4, 0, 0);
        combinedDrawable42.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable42);
        this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        SimpleTextView simpleTextView6 = new SimpleTextView(context);
        this.mentiondownButtonCounter = simpleTextView6;
        simpleTextView6.setVisibility(4);
        this.mentiondownButtonCounter.setTypeface(AndroidUtilities.bold());
        this.mentiondownButtonCounter.setTextSize(13);
        this.mentiondownButtonCounter.setTextColor(getThemedColor(Theme.key_chat_goDownButtonCounter));
        this.mentiondownButtonCounter.setGravity(17);
        this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor(Theme.key_chat_goDownButtonCounterBackground)));
        this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(f), AndroidUtilities.dp(8.0f), 0);
        this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
        this.mentiondownButton.setContentDescription(LocaleController.getString(R.string.AccDescrMentionDown));
        this.reactionsMentiondownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda102
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$41(view22);
            }
        });
        this.reactionsMentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view22) {
                boolean lambda$createView$44;
                lambda$createView$44 = ChatActivity.this.lambda$createView$44(view22);
                return lambda$createView$44;
            }
        });
        this.reactionsMentiondownButton.setVisibility(4);
        ImageView imageView112 = new ImageView(context);
        this.reactionsMentiondownButtonImage = imageView112;
        imageView112.setImageResource(R.drawable.reactionbutton);
        this.reactionsMentiondownButtonImage.setScaleType(scaleType2);
        this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i272), mode2));
        if (i4 < 21) {
        }
        Drawable mutate52 = context.getResources().getDrawable(i252).mutate();
        mutate52.setColorFilter(new PorterDuffColorFilter(-16777216, mode2));
        CombinedDrawable combinedDrawable52 = new CombinedDrawable(mutate52, createCircleDrawable5, 0, 0);
        combinedDrawable52.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable52);
        this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        CounterView counterView22 = new CounterView(context, this.themeDelegate);
        this.reactionsMentiondownButtonCounter = counterView22;
        this.reactionsMentiondownButton.addView(counterView22, LayoutHelper.createFrame(-1, 28, 51));
        this.reactionsMentiondownButton.setContentDescription(LocaleController.getString(R.string.AccDescrReactionMentionDown));
        if (!this.isInsideContainer) {
        }
        FrameLayout frameLayout72 = new FrameLayout(context);
        this.messagesSearchListContainer = frameLayout72;
        frameLayout72.setBackgroundColor(getThemedColor(Theme.key_windowBackgroundWhite));
        this.messagesSearchListContainer.setVisibility(8);
        this.messagesSearchListContainer.setAlpha(0.0f);
        this.contentView.addView(this.messagesSearchListContainer, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
        this.messagesSearchListView = new RecyclerListView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.34
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
            public void onAttachedToWindow() {
                super.onAttachedToWindow();
                if (ChatActivity.this.messagesSearchAdapter != null) {
                    ChatActivity.this.messagesSearchAdapter.attach();
                }
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
            public void onDetachedFromWindow() {
                super.onDetachedFromWindow();
                if (ChatActivity.this.messagesSearchAdapter != null) {
                    ChatActivity.this.messagesSearchAdapter.detach();
                }
            }
        };
        final LinearLayoutManager linearLayoutManager2 = new LinearLayoutManager(context);
        linearLayoutManager2.setOrientation(1);
        this.messagesSearchListView.setLayoutManager(linearLayoutManager2);
        RecyclerListView recyclerListView22 = this.messagesSearchListView;
        MessagesSearchAdapter messagesSearchAdapter2 = new MessagesSearchAdapter(context, this.themeDelegate, this.searchType, this.dialog_id != getUserConfig().getClientUserId());
        this.messagesSearchAdapter = messagesSearchAdapter2;
        recyclerListView22.setAdapter(messagesSearchAdapter2);
        checkHashtagStories(true);
        DefaultItemAnimator defaultItemAnimator2 = new DefaultItemAnimator();
        defaultItemAnimator2.setSupportsChangeAnimations(false);
        defaultItemAnimator2.setDelayAnimations(false);
        defaultItemAnimator2.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        defaultItemAnimator2.setDurations(350L);
        this.messagesSearchListView.setItemAnimator(defaultItemAnimator2);
        this.messagesSearchListContainer.addView(this.messagesSearchListView, -1, -1);
        this.messagesSearchListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda105
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view22, int i282) {
                ChatActivity.this.lambda$createView$48(view22, i282);
            }
        });
        this.messagesSearchListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.35
            @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
            public void onScrolled(RecyclerView recyclerView, int i282, int i292) {
                if (recyclerView.getScrollState() == 1) {
                    AndroidUtilities.hideKeyboard(ChatActivity.this.contentView);
                }
                int findLastVisibleItemPosition = linearLayoutManager2.findLastVisibleItemPosition();
                if ((findLastVisibleItemPosition == -1 ? 0 : findLastVisibleItemPosition) <= 0 || findLastVisibleItemPosition <= ChatActivity.this.messagesSearchAdapter.loadedCount - 5) {
                    return;
                }
                if (ChatActivity.this.chatMode != 7) {
                    ChatActivity.this.getMediaDataController().loadMoreSearchMessages(true);
                } else if (ChatActivity.this.loading || ChatActivity.this.endReached[0]) {
                } else {
                    ChatActivity.this.loading = true;
                    ChatActivity.this.waitingForLoad.add(Integer.valueOf(ChatActivity.this.lastLoadIndex));
                    HashtagSearchController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).searchHashtag(ChatActivity.this.searchingHashtag, ((BaseFragment) ChatActivity.this).classGuid, ChatActivity.this.searchType, ChatActivity.access$24208(ChatActivity.this));
                }
            }
        });
        FlickerLoadingView flickerLoadingView2 = new FlickerLoadingView(context, this.themeDelegate);
        this.hashtagLoadingView = flickerLoadingView2;
        flickerLoadingView2.setViewType(7);
        StickerEmptyView stickerEmptyView2 = new StickerEmptyView(getContext(), this.hashtagLoadingView, 1);
        this.hashtagSearchEmptyView = stickerEmptyView2;
        stickerEmptyView2.setClickable(true);
        this.hashtagSearchEmptyView.title.setText(LocaleController.getString(R.string.NoResult));
        this.hashtagSearchEmptyView.setVisibility(8);
        this.hashtagSearchEmptyView.addView(this.hashtagLoadingView, 0);
        this.hashtagSearchEmptyView.showProgress(true, false);
        this.messagesSearchListContainer.addView(this.hashtagSearchEmptyView, new FrameLayout.LayoutParams(-1, -1, 17));
        if (this.parentThemeDelegate == null) {
            ViewPagerFixed viewPagerFixed2 = new ViewPagerFixed(context, this.resourceProvider) { // from class: org.telegram.ui.ChatActivity.36
                @Override // android.widget.FrameLayout, android.view.View
                protected void onMeasure(int i282, int i292) {
                    super.onMeasure(i282, i292);
                    for (int i30 = 0; i30 < getChildCount(); i30++) {
                        View childAt = getChildAt(i30);
                        if (childAt instanceof ChatActivityContainer) {
                            ((ChatActivityContainer) childAt).chatActivity.contentView.setPadding(0, ((BaseFragment) ChatActivity.this).actionBar.getHeight() + ChatActivity.this.hashtagSearchTabs.getHeight(), 0, 0);
                        }
                    }
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed
                protected void onTabAnimationUpdate(boolean z32) {
                    super.onTabAnimationUpdate(z32);
                    ChatActivity.this.contentView.invalidateBlur();
                    ChatActivity.this.contentView.updateBlurContent();
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed
                protected void onTabScrollEnd(int i282) {
                    super.onTabScrollEnd(i282);
                    if (i282 == 0 && ChatActivity.this.requestClearSearchPages) {
                        ChatActivity.this.requestClearSearchPages = false;
                        ChatActivity.this.searchViewPager.clearViews();
                    }
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed, android.view.View
                public boolean onTouchEvent(MotionEvent motionEvent) {
                    return false;
                }
            };
            this.searchViewPager = viewPagerFixed2;
            viewPagerFixed2.setAdapter(new ViewPagerFixed.Adapter() { // from class: org.telegram.ui.ChatActivity.37
                @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                public void bindView(View view22, int i282, int i292) {
                    if (view22 instanceof ChatActivityContainer) {
                        ((ChatActivityContainer) view22).chatActivity.updateSearchingHashtag(ChatActivity.this.searchingHashtag);
                    }
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                public View createView(int i282) {
                    if (i282 == 0) {
                        return new FirstViewPage(context);
                    }
                    Bundle bundle = new Bundle();
                    bundle.putInt("chatMode", 7);
                    bundle.putInt("searchType", i282);
                    bundle.putString("searchHashtag", ChatActivity.this.searchingHashtag);
                    ChatActivityContainer chatActivityContainer = new ChatActivityContainer(context, ChatActivity.this.getParentLayout(), bundle) { // from class: org.telegram.ui.ChatActivity.37.1
                        boolean activityCreated = false;

                        @Override // org.telegram.ui.ChatActivityContainer
                        protected void initChatActivity() {
                            if (this.activityCreated) {
                                return;
                            }
                            this.activityCreated = true;
                            super.initChatActivity();
                        }
                    };
                    chatActivityContainer.chatActivity.parentThemeDelegate = ChatActivity.this.themeDelegate;
                    chatActivityContainer.chatActivity.parentChatActivity = ChatActivity.this;
                    chatActivityContainer.chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.37.2
                        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                        public /* synthetic */ void onUnpin(boolean z32, boolean z4) {
                            ChatActivityDelegate.-CC.$default$onUnpin(this, z32, z4);
                        }

                        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                        public void openHashtagSearch(String str2) {
                            ChatActivity.this.lambda$openHashtagSearch$304(str2);
                        }

                        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
                        public /* synthetic */ void openReplyMessage(int i292) {
                            ChatActivityDelegate.-CC.$default$openReplyMessage(this, i292);
                        }
                    };
                    return chatActivityContainer;
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                public int getItemCount() {
                    return 3;
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                public String getItemTitle(int i282) {
                    return LocaleController.getString(i282 != 1 ? i282 != 2 ? R.string.SearchThisChat : R.string.SearchPublicPosts : R.string.SearchMyMessages);
                }

                @Override // org.telegram.ui.Components.ViewPagerFixed.Adapter
                public int getItemViewType(int i282) {
                    return i282;
                }
            });
            this.searchViewPager.setAllowDisallowInterceptTouch(false);
            this.contentView.addView(this.searchViewPager, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
            ChatSearchTabs chatSearchTabs2 = new ChatSearchTabs(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.38
                @Override // org.telegram.ui.Components.ChatSearchTabs
                protected void onShownUpdate(boolean z32) {
                    setBackgroundColor(((BaseFragment) ChatActivity.this).actionBar.getBackgroundColor());
                    if (ChatActivity.this.tagSelector != null) {
                        ChatActivity.this.tagSelector.setTranslationY(ChatActivity.this.contentPanTranslation + getCurrentHeight());
                    }
                    if (!z32) {
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        return;
                    }
                    ChatActivity.this.invalidateChatListViewTopPadding = true;
                    ChatActivity.this.updateChatListViewTopPadding();
                }
            };
            this.hashtagSearchTabs = chatSearchTabs2;
            chatSearchTabs2.setVisibility(8);
            this.hashtagSearchTabs.setTabs(this.searchViewPager.createTabsView(true, 8));
            this.contentView.addView(this.hashtagSearchTabs, LayoutHelper.createFrame(-1, 40, 55));
        }
        this.contentView.addView(this.actionBar);
        View view22 = new View(context);
        this.overlayView = view22;
        view22.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda106
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view32, MotionEvent motionEvent) {
                boolean lambda$createView$49;
                lambda$createView$49 = ChatActivity.this.lambda$createView$49(view32, motionEvent);
                return lambda$createView$49;
            }
        });
        this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
        this.overlayView.setVisibility(8);
        this.contentView.setClipChildren(false);
        this.instantCameraView = null;
        BlurredFrameLayout blurredFrameLayout3 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.39
            private Rect blurBounds = new Rect();

            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                this.blurBounds.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), this.blurBounds, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
            }
        };
        this.bottomMessagesActionContainer = blurredFrameLayout3;
        blurredFrameLayout3.drawBlur = false;
        blurredFrameLayout3.isTopView = false;
        blurredFrameLayout3.setVisibility(4);
        this.bottomMessagesActionContainer.setWillNotDraw(false);
        this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
        this.bottomMessagesActionContainer.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda107
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view32, MotionEvent motionEvent) {
                boolean lambda$createView$50;
                lambda$createView$50 = ChatActivity.lambda$createView$50(view32, motionEvent);
                return lambda$createView$50;
            }
        });
        this.replyButton = null;
        this.forwardButton = null;
        40 r42 = new 40(getParentActivity(), this.contentView, this, this.chatMode == 6, this.themeDelegate);
        this.chatActivityEnterView = r42;
        r42.getEditField().adaptiveCreateLinkDialog = true;
        if (this.chatMode != 6) {
        }
        chatActivityEnterView.setDelegate(chatActivityEnterViewDelegate);
        this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
        chatFull = this.chatInfo;
        if (chatFull != null) {
        }
        this.chatActivityEnterView.setId(1000);
        this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, this.hasQuickReplies, false);
        this.chatActivityEnterView.updateBotWebView(false);
        this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
        ChatActivityEnterView chatActivityEnterView42 = this.chatActivityEnterView;
        TLRPC.EncryptedChat encryptedChat2 = this.currentEncryptedChat;
        chatActivityEnterView42.setAllowStickersAndGifs(true, true, encryptedChat2 != null || AndroidUtilities.getPeerLayerVersion(encryptedChat2.layer) >= 46);
        str = this.textToSet;
        if (str != null) {
        }
        if (!this.inPreviewMode) {
        }
        this.chatActivityEnterView.setVisibility(4);
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.chatActivityEnterView.setBotInfo(this.botInfo, false);
        this.contentView.addView(this.chatActivityEnterView, LayoutHelper.createFrame(-1, -2, 83));
        if (this.chatMode != 6) {
        }
        this.chatActivityEnterTopView = new ChatActivityEnterTopView(context) { // from class: org.telegram.ui.ChatActivity.42
            @Override // android.view.View
            public boolean hasOverlappingRendering() {
                return false;
            }

            @Override // android.view.View
            public void setTranslationY(float f2) {
                super.setTranslationY(f2);
                ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView5 != null) {
                    chatActivityEnterView5.invalidate();
                }
                if (getVisibility() != 8) {
                    ChatActivity.this.hideHints(true);
                    if (ChatActivity.this.chatListView != null) {
                        ChatActivity.this.chatListView.setTranslationY(f2);
                    }
                    if (ChatActivity.this.progressView != null) {
                        ChatActivity.this.progressView.setTranslationY(f2);
                    }
                    ChatActivity.this.invalidateChatListViewTopPadding();
                    ChatActivity.this.invalidateMessagesVisiblePart();
                    View view32 = ChatActivity.this.fragmentView;
                    if (view32 != null) {
                        view32.invalidate();
                    }
                }
            }

            @Override // android.view.View
            public void setVisibility(int i282) {
                super.setVisibility(i282);
                if (i282 == 8) {
                    if (ChatActivity.this.chatListView != null) {
                        ChatActivity.this.chatListView.setTranslationY(0.0f);
                    }
                    if (ChatActivity.this.progressView != null) {
                        ChatActivity.this.progressView.setTranslationY(0.0f);
                    }
                }
            }
        };
        View view32 = new View(context);
        this.replyLineView = view32;
        view32.setBackgroundColor(getThemedColor(Theme.key_chat_replyPanelLine));
        this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
        if (this.chatMode == 6) {
        }
        final FrameLayout frameLayout82 = new FrameLayout(context);
        this.chatActivityEnterTopView.addReplyView(frameLayout82, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
        frameLayout82.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda108
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$51(view42);
            }
        });
        frameLayout82.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda109
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view42) {
                boolean lambda$createView$52;
                lambda$createView$52 = ChatActivity.this.lambda$createView$52(view42);
                return lambda$createView$52;
            }
        });
        ImageView imageView122 = new ImageView(context);
        this.replyIconImageView = imageView122;
        imageView122.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelIcons), mode2));
        this.replyIconImageView.setScaleType(scaleType2);
        frameLayout82.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
        ImageView imageView132 = new ImageView(context);
        this.replyCloseImageView = imageView132;
        imageView132.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelClose), mode2));
        this.replyCloseImageView.setImageResource(R.drawable.input_clear);
        this.replyCloseImageView.setScaleType(scaleType2);
        if (i4 >= 21) {
        }
        this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
        this.replyCloseImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$53(view42);
            }
        });
        SimpleTextView simpleTextView22 = new SimpleTextView(context);
        this.replyNameTextView = simpleTextView22;
        simpleTextView22.setTextSize(14);
        this.replyNameTextView.setTextColor(getThemedColor(Theme.key_chat_replyPanelName));
        this.replyNameTextView.setTypeface(AndroidUtilities.bold());
        frameLayout82.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView32 = new SimpleTextView(context);
        this.replyObjectTextView = simpleTextView32;
        simpleTextView32.setTextSize(14);
        SimpleTextView simpleTextView42 = this.replyObjectTextView;
        int i282 = Theme.key_windowBackgroundWhiteGrayText;
        simpleTextView42.setTextColor(getThemedColor(i282));
        frameLayout82.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView52 = new SimpleTextView(context);
        this.replyObjectHintTextView = simpleTextView52;
        simpleTextView52.setTextSize(14);
        this.replyObjectHintTextView.setTextColor(getThemedColor(i282));
        this.replyObjectHintTextView.setText(LocaleController.getString(R.string.TapForForwardingOptions));
        this.replyObjectHintTextView.setAlpha(0.0f);
        frameLayout82.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        final SpoilerEffect spoilerEffect2 = new SpoilerEffect();
        BackupImageView backupImageView2 = new BackupImageView(context) { // from class: org.telegram.ui.ChatActivity.43
            Path path = new Path();

            @Override // android.view.View
            public void draw(Canvas canvas) {
                super.draw(canvas);
                if (ChatActivity.this.replyImageHasMediaSpoiler) {
                    this.path.rewind();
                    RectF rectF = AndroidUtilities.rectTmp;
                    rectF.set(this.imageReceiver.getImageX(), this.imageReceiver.getImageY(), this.imageReceiver.getImageX2(), this.imageReceiver.getImageY2());
                    this.path.addRoundRect(rectF, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Path.Direction.CW);
                    canvas.save();
                    canvas.clipPath(this.path);
                    spoilerEffect2.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                    spoilerEffect2.setBounds((int) this.imageReceiver.getImageX(), (int) this.imageReceiver.getImageY(), (int) this.imageReceiver.getImageX2(), (int) this.imageReceiver.getImageY2());
                    spoilerEffect2.draw(canvas);
                    invalidate();
                    canvas.restore();
                }
            }
        };
        this.replyImageView = backupImageView2;
        backupImageView2.setRoundRadius(AndroidUtilities.dp(2.0f));
        frameLayout82.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        ChatActivityFragmentView chatActivityFragmentView22 = this.contentView;
        SuggestEmojiView suggestEmojiView2 = new SuggestEmojiView(context, this.currentAccount, this.chatActivityEnterView, this.themeDelegate);
        this.suggestEmojiPanel = suggestEmojiView2;
        chatActivityFragmentView22.addView(suggestEmojiView2, LayoutHelper.createFrame(-1, (int) NotificationCenter.audioRouteChanged, 83));
        this.suggestEmojiPanel.setVisibility((this.allowStickersPanel || isInPreviewMode() || ((chatActivityEnterView2 = this.chatActivityEnterView) != null && chatActivityEnterView2.isStickersExpanded())) ? 8 : 0);
        ChatActivityEnterTopView.EditView editView2 = new ChatActivityEnterTopView.EditView(context);
        editView2.setMotionEventSplittingEnabled(false);
        editView2.setOrientation(0);
        editView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda111
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$54(view42);
            }
        });
        this.chatActivityEnterTopView.addEditView(editView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
        i5 = 0;
        while (i5 < 2) {
        }
        this.searchContainer = null;
        FrameLayout frameLayout92 = new FrameLayout(context) { // from class: org.telegram.ui.ChatActivity.45
            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
            }
        };
        this.bottomOverlay = frameLayout92;
        frameLayout92.setWillNotDraw(false);
        this.bottomOverlay.setVisibility(4);
        this.bottomOverlay.setFocusable(true);
        this.bottomOverlay.setFocusableInTouchMode(true);
        this.bottomOverlay.setClickable(true);
        this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
        TextView textView22 = new TextView(context);
        this.bottomOverlayText = textView22;
        textView22.setTextSize(1, 14.0f);
        this.bottomOverlayText.setGravity(17);
        this.bottomOverlayText.setMaxLines(2);
        this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
        this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
        this.bottomOverlayText.setTextColor(getThemedColor(Theme.key_chat_secretChatStatusText));
        this.bottomOverlayText.setPadding(AndroidUtilities.dp(24.0f), 0, AndroidUtilities.dp(24.0f), 0);
        this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-1, -1.0f, 17, 0.0f, 0.0f, 0.0f, 0.0f));
        BlurredFrameLayout blurredFrameLayout22 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.46
            private Rect blurBounds = new Rect();

            @Override // org.telegram.ui.Components.BlurredFrameLayout, android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                if (SharedConfig.chatBlurEnabled()) {
                    if (this.backgroundPaint == null) {
                        this.backgroundPaint = new Paint();
                    }
                    this.backgroundPaint.setColor(ChatActivity.this.getThemedColor(Theme.key_chat_messagePanelBackground));
                    this.blurBounds.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                    ChatActivity.this.contentView.drawBlurRect(canvas, getY(), this.blurBounds, this.backgroundPaint, false);
                } else {
                    canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                }
                super.dispatchDraw(canvas);
            }

            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i292, int i30) {
                ((FrameLayout.LayoutParams) ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = View.MeasureSpec.getSize(i292);
                super.onMeasure(i292, i30);
            }
        };
        this.bottomOverlayChat = blurredFrameLayout22;
        blurredFrameLayout22.isTopView = false;
        blurredFrameLayout22.drawBlur = false;
        blurredFrameLayout22.setWillNotDraw(false);
        this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
        this.bottomOverlayChat.setVisibility(4);
        this.bottomOverlayChat.setClipChildren(false);
        this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
        TextView textView32 = new TextView(context) { // from class: org.telegram.ui.ChatActivity.47
            CellFlickerDrawable cellFlickerDrawable;

            @Override // android.widget.TextView, android.view.View
            protected void onDraw(Canvas canvas) {
                super.onDraw(canvas);
                if (this.cellFlickerDrawable == null) {
                    CellFlickerDrawable cellFlickerDrawable = new CellFlickerDrawable();
                    this.cellFlickerDrawable = cellFlickerDrawable;
                    cellFlickerDrawable.drawFrame = false;
                    cellFlickerDrawable.repeatProgress = 2.0f;
                }
                this.cellFlickerDrawable.setParentWidth(getMeasuredWidth());
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                this.cellFlickerDrawable.draw(canvas, rectF, AndroidUtilities.dp(4.0f), null);
                invalidate();
            }

            @Override // android.view.View
            public void setVisibility(int i292) {
                super.setVisibility(i292);
                ChatActivity.this.bottomOverlayChat.getLayoutParams().height = AndroidUtilities.dp(i292 == 0 ? 67.0f : 51.0f);
            }
        };
        this.bottomOverlayStartButton = textView32;
        textView32.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(Theme.key_featuredStickers_addButton), 8.0f));
        this.bottomOverlayStartButton.setTextColor(getThemedColor(Theme.key_featuredStickers_buttonText));
        this.bottomOverlayStartButton.setText(LocaleController.getString(R.string.BotStart));
        this.bottomOverlayStartButton.setTextSize(1, 16.0f);
        this.bottomOverlayStartButton.setGravity(17);
        this.bottomOverlayStartButton.setTypeface(AndroidUtilities.bold());
        this.bottomOverlayStartButton.setVisibility(8);
        this.bottomOverlayStartButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda114
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$56(view42);
            }
        });
        this.bottomOverlayChat.addView(this.bottomOverlayStartButton, LayoutHelper.createFrame(-1, -1.0f, 17, 8.0f, 8.0f, 8.0f, 8.0f));
        user = this.currentUser;
        if (user != null) {
        }
        i6 = 3;
        LinkSpanDrawable.LinksTextView linksTextView2 = new LinkSpanDrawable.LinksTextView(context, this.themeDelegate);
        this.bottomOverlayLinksText = linksTextView2;
        linksTextView2.setVisibility(8);
        this.bottomOverlayLinksText.setTextColor(getThemedColor(Theme.key_graySectionText));
        this.bottomOverlayLinksText.setGravity(17);
        this.bottomOverlayLinksText.setTextAlignment(4);
        this.bottomOverlayLinksText.setTextSize(1, 13.0f);
        this.bottomOverlayChat.addView(this.bottomOverlayLinksText, LayoutHelper.createFrame(-1, -2.0f, 17, 0.0f, 0.0f, 0.0f, 0.0f));
        UnreadCounterTextView unreadCounterTextView2 = new UnreadCounterTextView(context) { // from class: org.telegram.ui.ChatActivity.48
            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected Theme.ResourcesProvider getResourceProvider() {
                return ChatActivity.this.themeDelegate;
            }

            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected float getTopOffset() {
                return -AndroidUtilities.dp(2.0f);
            }

            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected boolean isTouchFullWidth() {
                return ChatActivity.this.botInfo != null;
            }
        };
        this.bottomOverlayChatText = unreadCounterTextView2;
        this.bottomOverlayChat.addView(unreadCounterTextView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayChatText.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda115
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$63(context, view42);
            }
        });
        RadialProgressView radialProgressView22 = new RadialProgressView(context, this.themeDelegate);
        this.bottomOverlayProgress = radialProgressView22;
        radialProgressView22.setSize(AndroidUtilities.dp(22.0f));
        RadialProgressView radialProgressView32 = this.bottomOverlayProgress;
        int i292 = Theme.key_chat_fieldOverlayText;
        radialProgressView32.setProgressColor(getThemedColor(i292));
        this.bottomOverlayProgress.setVisibility(4);
        this.bottomOverlayProgress.setScaleX(0.1f);
        this.bottomOverlayProgress.setScaleY(0.1f);
        this.bottomOverlayProgress.setAlpha(1.0f);
        this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
        this.bottomOverlayImage = new ImageView(context);
        int themedColor2 = getThemedColor(i292);
        this.bottomOverlayImage.setImageResource(R.drawable.msg_help);
        this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor2, PorterDuff.Mode.MULTIPLY));
        this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
        i7 = Build.VERSION.SDK_INT;
        if (i7 >= 21) {
        }
        this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayImage.setContentDescription(LocaleController.getString(R.string.SettingsHelp));
        this.bottomOverlayImage.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda116
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$64(view42);
            }
        });
        ChatActivityFragmentView chatActivityFragmentView32 = this.contentView;
        MessageEnterTransitionContainer messageEnterTransitionContainer2 = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
        this.messageEnterTransitionContainer = messageEnterTransitionContainer2;
        chatActivityFragmentView32.addView(messageEnterTransitionContainer2);
        if (this.currentChat != null) {
        }
        this.chatAdapter.updateRowsSafe();
        if (this.loading) {
        }
        z = false;
        showProgressView(false);
        createEmptyView(false);
        this.chatListView.setEmptyView(this.emptyViewContainer);
        checkBotKeyboard();
        updateBottomOverlay();
        updateSecretStatus();
        updateTopPanel(z);
        updatePinnedMessageView(z);
        updateInfoTopView(z);
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper2 = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager) { // from class: org.telegram.ui.ChatActivity.49
            @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper
            public void setScrollDirection(int i30) {
                if (ChatActivity.this.reversed) {
                    if (i30 == 0) {
                        i30 = 1;
                    } else if (i30 == 1) {
                        i30 = 0;
                    }
                }
                super.setScrollDirection(i30);
            }
        };
        this.chatScrollHelper = recyclerAnimationScrollHelper2;
        recyclerAnimationScrollHelper2.setScrollListener(new RecyclerAnimationScrollHelper.ScrollListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda117
            @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.ScrollListener
            public final void onScroll() {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        });
        this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
        this.flagSecure = new FlagSecureReason(getParentActivity().getWindow(), new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda118
            @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
            public final boolean run() {
                boolean lambda$createView$65;
                lambda$createView$65 = ChatActivity.this.lambda$createView$65();
                return lambda$createView$65;
            }
        });
        if (charSequence2 != null) {
        }
        fixLayoutInternal();
        this.textSelectionHelper.setCallback(new TextSelectionHelper.Callback() { // from class: org.telegram.ui.ChatActivity.50
            @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
            public void onStateChanged(boolean z4) {
                ChatActivity.this.swipeBackEnabled = !z4;
                if (z4) {
                    if (ChatActivity.this.slidingView != null) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    ChatActivity.this.maybeStartTrackingSlidingView = false;
                    ChatActivity.this.startedTrackingSlidingView = false;
                    if (ChatActivity.this.textSelectionHint != null) {
                        ChatActivity.this.textSelectionHint.hide();
                    }
                }
                ChatActivity.this.updatePagedownButtonVisibility(true);
            }

            @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
            public void onTextCopied() {
                if (((BaseFragment) ChatActivity.this).actionBar != null && ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                    ChatActivity.this.clearSelectionMode();
                }
                ChatActivity.this.createUndoView();
                ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
            }
        });
        overlayView = this.textSelectionHelper.getOverlayView(context);
        if (overlayView != null) {
        }
        this.textSelectionHelper.setParentView(this.chatListView);
        HashtagHistoryView hashtagHistoryView2 = new HashtagHistoryView(context, this.resourceProvider, this.currentAccount) { // from class: org.telegram.ui.ChatActivity.51
            @Override // org.telegram.ui.Components.HashtagHistoryView
            protected void onClick(String str2) {
                ChatActivity.this.lambda$openHashtagSearch$304(str2);
            }

            @Override // org.telegram.ui.Components.HashtagHistoryView
            protected void onScrolled(RecyclerView recyclerView, int i30, int i31) {
                super.onScrolled(recyclerView, i30, i31);
                if (recyclerView.getScrollState() == 1) {
                    AndroidUtilities.hideKeyboard(ChatActivity.this.contentView);
                }
            }
        };
        this.hashtagHistoryView = hashtagHistoryView2;
        hashtagHistoryView2.setVisibility(8);
        this.hashtagHistoryView.setAlpha(0.0f);
        this.contentView.addView(this.hashtagHistoryView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 40.0f, 0.0f, 0.0f));
        ChatActivityFragmentView chatActivityFragmentView42 = this.contentView;
        FireworksOverlay fireworksOverlay2 = new FireworksOverlay(context);
        this.fireworksOverlay = fireworksOverlay2;
        chatActivityFragmentView42.addView(fireworksOverlay2, LayoutHelper.createFrame(-1, -1.0f));
        checkInstantSearch();
        messageObject = this.replyingMessageObject;
        if (messageObject != null) {
        }
        PinchToZoomHelper pinchToZoomHelper2 = new PinchToZoomHelper(i7 < 21 ? (ViewGroup) getParentActivity().getWindow().getDecorView() : this.contentView, this.contentView) { // from class: org.telegram.ui.ChatActivity.52
            @Override // org.telegram.ui.PinchToZoomHelper
            protected void drawOverlays(Canvas canvas, float f2, float f3, float f4, float f5, float f6) {
                if (f2 > 0.0f) {
                    View child = getChild();
                    if (child instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                        RectF rectF = AndroidUtilities.rectTmp;
                        rectF.set(f3, (int) Math.max(f5, f4), chatMessageCell.getMeasuredWidth() + f3, (int) Math.min(f6, chatMessageCell.getMeasuredHeight() + f4));
                        canvas.saveLayerAlpha(rectF, (int) (f2 * 255.0f), 31);
                        canvas.translate(f3, f4);
                        chatMessageCell.drawFromPinchToZoom = true;
                        chatMessageCell.drawOverlays(canvas);
                        if (chatMessageCell.shouldDrawTimeOnMedia() && chatMessageCell.getCurrentMessagesGroup() == null) {
                            chatMessageCell.drawTime(canvas, 1.0f, false);
                        }
                        chatMessageCell.drawFromPinchToZoom = false;
                        canvas.restore();
                    }
                }
            }
        };
        this.pinchToZoomHelper = pinchToZoomHelper2;
        pinchToZoomHelper2.setCallback(new PinchToZoomHelper.Callback() { // from class: org.telegram.ui.ChatActivity.53
            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public TextureView getCurrentTextureView() {
                return ChatActivity.this.videoTextureView;
            }

            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public void onZoomFinished(MessageObject messageObject3) {
                if (messageObject3 == null) {
                    return;
                }
                if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                    for (int i30 = 0; i30 < ChatActivity.this.chatListView.getChildCount(); i30++) {
                        if (ChatActivity.this.chatListView.getChildAt(i30) instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i30);
                            if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                if (animation.isRunning()) {
                                    animation.stop();
                                }
                                Bitmap animatedBitmap = animation.getAnimatedBitmap();
                                if (animatedBitmap != null) {
                                    try {
                                        Bitmap videoBitmap = ChatActivity.this.pinchToZoomHelper.getVideoBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                        new Canvas(animatedBitmap).drawBitmap(videoBitmap, 0.0f, 0.0f, (Paint) null);
                                        videoBitmap.recycle();
                                    } catch (Throwable th) {
                                        FileLog.e(th);
                                    }
                                }
                            }
                        }
                    }
                    ChatActivity.this.createTextureView(true);
                    MediaController.getInstance().setTextureView(ChatActivity.this.videoTextureView, ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
                }
                ChatActivity.this.chatListView.invalidate();
            }

            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public void onZoomStarted(MessageObject messageObject3) {
                ChatActivity.this.chatListView.cancelClickRunnables(true);
                ChatActivity.this.chatListView.stopScroll();
                if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.contentView.removeView(chatActivity.videoPlayerContainer);
                    ChatActivity.this.videoPlayerContainer = null;
                    ChatActivity.this.videoTextureView = null;
                    ChatActivity.this.aspectRatioFrameLayout = null;
                }
                for (int i30 = 0; i30 < ChatActivity.this.chatListView.getChildCount(); i30++) {
                    if (ChatActivity.this.chatListView.getChildAt(i30) instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i30);
                        if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                            chatMessageCell.getPhotoImage().setVisible(false, true);
                        }
                    }
                }
            }
        });
        this.pinchToZoomHelper.setClipBoundsListener(new PinchToZoomHelper.ClipBoundsListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda119
            @Override // org.telegram.ui.PinchToZoomHelper.ClipBoundsListener
            public final void getClipTopBottom(float[] fArr) {
                ChatActivity.this.lambda$createView$66(fArr);
            }
        });
        this.emojiAnimationsOverlay = new EmojiAnimationsOverlay(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId) { // from class: org.telegram.ui.ChatActivity.54
            @Override // org.telegram.ui.EmojiAnimationsOverlay
            public void onAllEffectsEnd() {
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
        };
        this.actionBar.setDrawBlurBackground(this.contentView);
        if (this.isTopic) {
        }
        updateReactionsMentionButton(z2);
        if (getDialogId() == getUserConfig().getClientUserId()) {
        }
        if (getDialogId() == getUserConfig().getClientUserId()) {
        }
        if (this.chatMode == 7) {
        }
        Timer.finish(create);
        return this.fragmentView;
    }

    public void deleteHistory(final int i, final int i2, final boolean z) {
        this.chatAdapter.frozenMessages.clear();
        for (int i3 = 0; i3 < this.messages.size(); i3++) {
            MessageObject messageObject = (MessageObject) this.messages.get(i3);
            int i4 = messageObject.messageOwner.date;
            if (i4 <= i || i4 >= i2) {
                this.chatAdapter.frozenMessages.add(messageObject);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        if (this.chatAdapter.frozenMessages.isEmpty()) {
            showProgressView(true);
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = true;
        chatActivityAdapter.notifyDataSetChanged(true);
        UndoView undoView = getUndoView();
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 81, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda337
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$3(i, i2, z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda338
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$4();
            }
        });
    }

    public void didLongPressCard(final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final String str) {
        final Browser.Progress makeProgressForLink = makeProgressForLink(chatMessageCell, characterStyle);
        TLRPC.TL_payments_getBankCardData tL_payments_getBankCardData = new TLRPC.TL_payments_getBankCardData();
        tL_payments_getBankCardData.number = str;
        final int sendRequest = getConnectionsManager().sendRequest(tL_payments_getBankCardData, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda91
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$didLongPressCard$349(makeProgressForLink, chatMessageCell, str, characterStyle, tLObject, tL_error);
            }
        }, null, null, 0, getMessagesController().webFileDatacenterId, 1, true);
        makeProgressForLink.onCancel(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressCard$350(sendRequest);
            }
        });
        makeProgressForLink.init();
    }

    public void didLongPressCopyButton(final String str) {
        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
        builder.setTitle(str);
        builder.setTitleMultipleLines(true);
        builder.setItems(new CharSequence[]{LocaleController.getString(R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda343
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$didLongPressCopyButton$365(str, dialogInterface, i);
            }
        });
        showDialog(builder.create());
    }

    public void didLongPressLink(final ChatMessageCell chatMessageCell, final MessageObject messageObject, final CharacterStyle characterStyle, final String str) {
        String str2;
        ScrimOptions scrimOptions;
        final boolean z;
        ChatMessageCell chatMessageCell2;
        CharacterStyle characterStyle2;
        SpannableString spannableString;
        String str3;
        TLRPC.WebPage webPage;
        ItemOptions makeOptions = ItemOptions.makeOptions((BaseFragment) this, (View) chatMessageCell, true);
        ScrimOptions scrimOptions2 = new ScrimOptions(getContext(), this.themeDelegate);
        makeOptions.setOnDismiss(new ChatActivity$$ExternalSyntheticLambda32(scrimOptions2));
        boolean z2 = (!SharedConfig.inappBrowser || str.startsWith("video?") || Browser.isInternalUri(Uri.parse(str), null)) ? false : true;
        boolean z3 = str.startsWith("#") || str.startsWith("$");
        boolean startsWith = str.startsWith("mailto:");
        if (startsWith) {
            str2 = "mailto:";
            scrimOptions = scrimOptions2;
            z = startsWith;
        } else {
            scrimOptions = scrimOptions2;
            z = startsWith;
            str2 = "mailto:";
            final boolean z4 = z2;
            final boolean z5 = z3;
            makeOptions.add(R.drawable.msg_openin, LocaleController.getString((!z2 || z3) ? R.string.Open : R.string.OpenInTelegramBrowser), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda33
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressLink$342(str, characterStyle, messageObject, chatMessageCell, z4, z5);
                }
            });
        }
        if ((z2 && !z3) || z) {
            makeOptions.add(R.drawable.msg_language, LocaleController.getString(R.string.OpenInSystemBrowser), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda34
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressLink$343(str);
                }
            });
        }
        TLRPC.MessageMedia media = MessageObject.getMedia(messageObject);
        if ((media instanceof TLRPC.TL_messageMediaWebPage) && (webPage = media.webpage) != null && webPage.cached_page != null && TextUtils.equals(webPage.url, str)) {
            makeOptions.add(R.drawable.menu_instant_view, LocaleController.getString(R.string.OpenInstantView), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda35
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$didLongPressLink$344(messageObject);
                }
            });
        }
        makeOptions.add(R.drawable.msg_copy, LocaleController.getString(z ? R.string.CopyMail : R.string.CopyLink), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressLink$345(str, messageObject, z);
            }
        });
        ScrimOptions scrimOptions3 = scrimOptions;
        scrimOptions3.setItemOptions(makeOptions);
        if (str.startsWith(str2)) {
            spannableString = new SpannableString(str.substring(7));
            characterStyle2 = characterStyle;
            spannableString.setSpan(characterStyle2, 0, spannableString.length(), 33);
            chatMessageCell2 = chatMessageCell;
        } else {
            chatMessageCell2 = chatMessageCell;
            characterStyle2 = characterStyle;
            if (characterStyle2 instanceof URLSpanReplacement) {
                String url = ((URLSpanReplacement) characterStyle2).getURL();
                try {
                    try {
                        Uri parse = Uri.parse(url);
                        url = Browser.replaceHostname(parse, Browser.IDN_toUnicode(parse.getHost()), null);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e, false);
                    }
                    str3 = URLDecoder.decode(url.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e2) {
                    FileLog.e(e2);
                    str3 = url;
                }
                if (str3.length() > 204) {
                    str3 = str3.substring(0, NotificationCenter.groupPackUpdated) + "…";
                }
                SpannableString spannableString2 = new SpannableString(str3);
                spannableString2.setSpan(characterStyle2, 0, spannableString2.length(), 33);
                scrimOptions3.setScrim(chatMessageCell2, characterStyle2, spannableString2);
                showDialog(scrimOptions3);
            }
            spannableString = null;
        }
        scrimOptions3.setScrim(chatMessageCell2, characterStyle2, spannableString);
        showDialog(scrimOptions3);
    }

    public void didLongPressUsername(final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final String str) {
        final Browser.Progress makeProgressForLink = makeProgressForLink(chatMessageCell, characterStyle);
        final TLObject userOrChat = getMessagesController().getUserOrChat(str);
        final Utilities.Callback2 callback2 = new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda222
            @Override // org.telegram.messenger.Utilities.Callback2
            public final void run(Object obj, Object obj2) {
                ChatActivity.this.lambda$didLongPressUsername$355(makeProgressForLink, chatMessageCell, str, characterStyle, (TLObject) obj, (Boolean) obj2);
            }
        };
        TLRPC.TL_account_checkUsername tL_account_checkUsername = new TLRPC.TL_account_checkUsername();
        tL_account_checkUsername.username = str;
        final int sendRequest = getConnectionsManager().sendRequest(tL_account_checkUsername, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda223
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$didLongPressUsername$360(userOrChat, callback2, str, makeProgressForLink, tLObject, tL_error);
            }
        });
        makeProgressForLink.onCancel(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didLongPressUsername$361(sendRequest);
            }
        });
        makeProgressForLink.init();
    }

    public void didPressPhoneNumber(final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final String str) {
        final Browser.Progress makeProgressForLink = makeProgressForLink(chatMessageCell, characterStyle);
        final TLRPC.TL_contact tL_contact = getContactsController().contactsByPhone.get(PhoneFormat.stripExceptNumbers(str));
        final Utilities.Callback callback = new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda63
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                ChatActivity.this.lambda$didPressPhoneNumber$379(chatMessageCell, str, tL_contact, characterStyle, (TLRPC.User) obj);
            }
        };
        if (tL_contact != null) {
            TLRPC.User user = getMessagesController().getUser(Long.valueOf(tL_contact.user_id));
            if (user != null) {
                callback.run(user);
                return;
            } else {
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda64
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$didPressPhoneNumber$381(tL_contact, callback);
                    }
                });
                return;
            }
        }
        TLRPC.TL_contacts_resolvePhone tL_contacts_resolvePhone = new TLRPC.TL_contacts_resolvePhone();
        tL_contacts_resolvePhone.phone = PhoneFormat.stripExceptNumbers(str);
        final int sendRequest = getConnectionsManager().sendRequest(tL_contacts_resolvePhone, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda65
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$didPressPhoneNumber$383(makeProgressForLink, callback, tLObject, tL_error);
            }
        });
        makeProgressForLink.onCancel(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda66
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didPressPhoneNumber$384(sendRequest);
            }
        });
        makeProgressForLink.init();
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 3846
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:59)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int r71, int r72, java.lang.Object... r73) {
        /*
            Method dump skipped, instructions count: 17150
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
    public boolean didSelectDialogs(DialogsActivity dialogsActivity, ArrayList arrayList, CharSequence charSequence, boolean z, boolean z2, int i, TopicsFragment topicsFragment) {
        String str;
        MessageObject messageObject;
        ChatActivityEnterView chatActivityEnterView;
        ChatActivityEnterView chatActivityEnterView2;
        MessageObject messageObject2;
        if (((this.messagePreviewParams == null && (!dialogsActivity.isQuote || this.replyingMessageObject == null)) || (dialogsActivity.isQuote && this.replyingMessageObject == null)) && this.forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            return false;
        }
        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
        MessageObject messageObject3 = this.forwardingMessage;
        if (messageObject3 != null) {
            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
            if (groupedMessages != null) {
                arrayList2.addAll(groupedMessages.messages);
            } else {
                arrayList2.add(messageObject3);
            }
        } else {
            for (int i2 = 1; i2 >= 0; i2--) {
                ArrayList arrayList3 = new ArrayList();
                for (int i3 = 0; i3 < this.selectedMessagesIds[i2].size(); i3++) {
                    arrayList3.add(Integer.valueOf(this.selectedMessagesIds[i2].keyAt(i3)));
                }
                Collections.sort(arrayList3);
                for (int i4 = 0; i4 < arrayList3.size(); i4++) {
                    MessageObject messageObject4 = (MessageObject) this.selectedMessagesIds[i2].get(((Integer) arrayList3.get(i4)).intValue());
                    if (messageObject4 != null) {
                        arrayList2.add(messageObject4);
                    }
                }
            }
        }
        for (int i5 = 0; i5 < arrayList.size(); i5++) {
            TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(-((MessagesStorage.TopicKey) arrayList.get(i5)).dialogId));
            if (chat != null) {
                for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                    int canSendMessageToChat = SendMessagesHelper.canSendMessageToChat(chat, arrayList2.get(i6));
                    if (canSendMessageToChat != 0) {
                        AlertsCreator.showSendMediaAlert(canSendMessageToChat, dialogsActivity, null);
                        return false;
                    }
                }
                continue;
            }
        }
        if (this.forwardingMessage != null) {
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        } else {
            for (int i7 = 1; i7 >= 0; i7--) {
                this.selectedMessagesCanCopyIds[i7].clear();
                this.selectedMessagesCanStarIds[i7].clear();
                this.selectedMessagesIds[i7].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
        }
        if (dialogsActivity.isQuote || (arrayList.size() <= 1 && ((MessagesStorage.TopicKey) arrayList.get(0)).dialogId != getUserConfig().getClientUserId() && charSequence == null && i == 0 && z2)) {
            MessagesStorage.TopicKey topicKey = (MessagesStorage.TopicKey) arrayList.get(0);
            long j = topicKey.dialogId;
            if (j == this.dialog_id && getTopicId() == topicKey.topicId && this.chatMode != 2) {
                ArrayList arrayList4 = new ArrayList(getParentLayout().getFragmentStack());
                if (arrayList4.isEmpty() || arrayList4.get(arrayList4.size() - 1) != dialogsActivity) {
                    int indexOf = arrayList4.indexOf(dialogsActivity);
                    if (indexOf > 0) {
                        while (indexOf < arrayList4.size()) {
                            if (indexOf == arrayList4.size() - 1) {
                                ((BaseFragment) arrayList4.get(indexOf)).finishFragment();
                            } else {
                                dialogsActivity.removeSelfFromStack();
                            }
                            indexOf++;
                        }
                    }
                } else {
                    dialogsActivity.finishFragment();
                }
                moveScrollToLastMessage(false);
                if (!dialogsActivity.isQuote || (messageObject2 = this.replyingMessageObject) == null) {
                    showFieldPanelForForward(true, arrayList2);
                } else {
                    showFieldPanelForReplyQuote(messageObject2, this.replyingQuote);
                }
                if (AndroidUtilities.isTablet()) {
                    hideActionMode();
                    updatePinnedMessageView(true);
                }
                updateVisibleRows();
                if (this.keyboardWasVisible && (chatActivityEnterView2 = this.chatActivityEnterView) != null) {
                    chatActivityEnterView2.openKeyboardInternal();
                    this.chatActivityEnterView.freezeEmojiView(false);
                    this.keyboardWasVisible = false;
                }
            } else {
                Bundle bundle = new Bundle();
                bundle.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
                if (DialogObject.isEncryptedDialog(j)) {
                    bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j));
                } else {
                    if (DialogObject.isUserDialog(j)) {
                        str = "user_id";
                    } else {
                        j = -j;
                        str = "chat_id";
                    }
                    bundle.putLong(str, j);
                    if (!getMessagesController().checkCanOpenChat(bundle, dialogsActivity)) {
                        return true;
                    }
                }
                bundle.putBoolean("historyPreloaded", false);
                addToPulledDialogsMyself();
                ChatActivity chatActivity = new ChatActivity(bundle);
                if (topicKey.topicId != 0) {
                    ForumUtilities.applyTopic(chatActivity, topicKey);
                    dialogsActivity.removeSelfFromStack();
                }
                if (presentFragment(chatActivity, true)) {
                    if (!dialogsActivity.isQuote || this.replyingMessageObject == null) {
                        chatActivity.showFieldPanelForForward(true, arrayList2);
                    } else {
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null && (chatActivityEnterView = chatActivity.chatActivityEnterView) != null) {
                            chatActivityEnterView.setFieldText(chatActivityEnterView3.getFieldText());
                        }
                        MessageObject.GroupedMessages groupedMessages2 = this.replyingQuoteGroup;
                        if (groupedMessages2 == null) {
                            MessageObject messageObject5 = this.replyingMessageObject;
                            if (messageObject5 != null) {
                                groupedMessages2 = getGroup(messageObject5.getGroupId());
                            }
                            messageObject = this.replyingTopMessage;
                            if (messageObject == null || (messageObject = this.threadMessageObject) != null) {
                                chatActivity.replyingTopMessage = messageObject;
                            }
                            chatActivity.showFieldPanelForReplyQuote(this.replyingMessageObject, this.replyingQuote);
                        }
                        chatActivity.replyingQuoteGroup = groupedMessages2;
                        messageObject = this.replyingTopMessage;
                        if (messageObject == null) {
                        }
                        chatActivity.replyingTopMessage = messageObject;
                        chatActivity.showFieldPanelForReplyQuote(this.replyingMessageObject, this.replyingQuote);
                    }
                    if (chatActivity.getDialogId() == getDialogId() && !AndroidUtilities.isTablet()) {
                        removeSelfFromStack();
                    }
                } else {
                    dialogsActivity.finishFragment();
                }
            }
        } else {
            this.messagePreviewParams = null;
            hideFieldPanel(false);
            for (int i8 = 0; i8 < arrayList.size(); i8++) {
                long j2 = ((MessagesStorage.TopicKey) arrayList.get(i8)).dialogId;
                if (charSequence != null) {
                    SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(charSequence.toString(), j2, null, null, null, true, null, null, null, z2, i, null, false);
                    of.quick_reply_shortcut = this.quickReplyShortcut;
                    of.quick_reply_shortcut_id = getQuickReplyId();
                    getSendMessagesHelper().sendMessage(of);
                }
                getSendMessagesHelper().sendMessage(arrayList2, j2, false, false, z2, i);
            }
            dialogsActivity.finishFragment();
            createUndoView();
            if (this.undoView != null) {
                if (arrayList.size() != 1) {
                    this.undoView.showWithAction(0L, 53, Integer.valueOf(arrayList2.size()), Integer.valueOf(arrayList.size()), (Runnable) null, (Runnable) null);
                } else if (!BulletinFactory.of(this).showForwardedBulletinWithTag(((MessagesStorage.TopicKey) arrayList.get(0)).dialogId, arrayList2.size())) {
                    this.undoView.showWithAction(((MessagesStorage.TopicKey) arrayList.get(0)).dialogId, 53, Integer.valueOf(arrayList2.size()));
                }
            }
        }
        return true;
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectFiles(ArrayList arrayList, String str, ArrayList arrayList2, boolean z, int i, long j, boolean z2) {
        String str2;
        fillEditingMediaWithCaption(str, null);
        if (checkSlowModeAlert()) {
            if (arrayList2.isEmpty() || TextUtils.isEmpty(str)) {
                str2 = str;
            } else {
                SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(str, this.dialog_id, null, null, null, true, null, null, null, true, 0, null, false);
                of.quick_reply_shortcut = this.quickReplyShortcut;
                of.quick_reply_shortcut_id = getQuickReplyId();
                of.invert_media = z2;
                SendMessagesHelper.getInstance(this.currentAccount).sendMessage(of);
                str2 = null;
            }
            getSendMessagesHelper().sendMessage(arrayList2, this.dialog_id, false, false, true, 0);
            SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), arrayList, arrayList, null, str2, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, this.editingMessageObject, z, i, null, this.quickReplyShortcut, getQuickReplyId(), j, z2);
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.LocationActivity.LocationActivityDelegate
    public void didSelectLocation(TLRPC.MessageMedia messageMedia, int i, boolean z, int i2) {
        SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(messageMedia, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, z, i2);
        of.quick_reply_shortcut = this.quickReplyShortcut;
        of.quick_reply_shortcut_id = getQuickReplyId();
        getSendMessagesHelper().sendMessage(of);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        if (i == 0 || i == 1) {
            afterMessageSend();
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectPhotos(ArrayList arrayList, boolean z, int i) {
        fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities);
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, true, false, this.editingMessageObject, z, i, this.chatMode, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).updateStickersOrder, null, this.quickReplyShortcut, getQuickReplyId(), 0L, false);
        afterMessageSend();
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    public void didSelectSearchPhotos(ArrayList arrayList, boolean z, int i) {
        int i2;
        ChatActivity chatActivity = this;
        if (!arrayList.isEmpty() && checkSlowModeAlert()) {
            int i3 = 0;
            while (true) {
                if (i3 < arrayList.size()) {
                    SendMessagesHelper.SendingMediaInfo sendingMediaInfo = (SendMessagesHelper.SendingMediaInfo) arrayList.get(i3);
                    if (sendingMediaInfo.inlineResult == null && sendingMediaInfo.videoEditedInfo == null) {
                        break;
                    }
                    i3++;
                } else if (!TextUtils.isEmpty(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption)) {
                    SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, chatActivity.dialog_id, chatActivity.replyingMessageObject, getThreadMessage(), null, false, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities, null, null, z, i, null, false);
                    of.quick_reply_shortcut = chatActivity.quickReplyShortcut;
                    of.quick_reply_shortcut_id = getQuickReplyId();
                    SendMessagesHelper.getInstance(chatActivity.currentAccount).sendMessage(of);
                }
            }
            int i4 = 0;
            while (i4 < arrayList.size()) {
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo2 = (SendMessagesHelper.SendingMediaInfo) arrayList.get(i4);
                if (sendingMediaInfo2.inlineResult == null || sendingMediaInfo2.videoEditedInfo != null) {
                    i2 = i4;
                } else {
                    int i5 = i4;
                    SendMessagesHelper.prepareSendingBotContextResult(this, getAccountInstance(), sendingMediaInfo2.inlineResult, sendingMediaInfo2.params, chatActivity.dialog_id, chatActivity.replyingMessageObject, getThreadMessage(), null, chatActivity.replyingQuote, z, i, chatActivity.quickReplyShortcut, getQuickReplyId());
                    arrayList.remove(i5);
                    i2 = i5 - 1;
                }
                i4 = i2 + 1;
                chatActivity = this;
            }
            if (arrayList.isEmpty()) {
                return;
            }
            fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, false, true, this.editingMessageObject, z, i, this.chatMode, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).updateStickersOrder, null, this.quickReplyShortcut, getQuickReplyId(), 0L, false);
            afterMessageSend();
            if (i != 0) {
                if (this.scheduledMessagesCount == -1) {
                    this.scheduledMessagesCount = 0;
                }
                this.scheduledMessagesCount += arrayList.size();
                updateScheduledInterface(true);
            }
        }
    }

    public void dimBehindView(boolean z) {
        dimBehindView(z ? 0.2f : 0.0f, false, true);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void dismissCurrentDialog() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert == null || this.visibleDialog != chatAttachAlert) {
            super.dismissCurrentDialog();
            return;
        }
        chatAttachAlert.getPhotoLayout().closeCamera(false);
        this.chatAttachAlert.dismissInternal();
        this.chatAttachAlert.getPhotoLayout().hideCamera(true);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean dismissDialogOnPause(Dialog dialog) {
        return (dialog == this.chatAttachAlert || dialog == this.chatThemeBottomSheet || (dialog instanceof BotWebViewSheet) || !super.dismissDialogOnPause(dialog)) ? false : true;
    }

    /* renamed from: doOnIdle */
    public void lambda$openDiscussionMessageChat$316(Runnable runnable) {
        NotificationCenter.getInstance(this.currentAccount).doOnIdle(runnable);
    }

    /* JADX WARN: Code restructure failed: missing block: B:14:0x0031, code lost:
        if (r4.findItem(16908321) != null) goto L9;
     */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean extendActionMode(Menu menu) {
        if (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) {
            if (this.chatActivityEnterView.getSelectionLength() != 0) {
            }
            return true;
        } else if (PhotoViewer.getInstance().getSelectionLength() == 0 || menu.findItem(16908321) == null) {
            return true;
        }
        fillActionModeMenu(menu, this.currentEncryptedChat, true);
        return true;
    }

    public void fallbackFieldPanel() {
        MessagePreviewParams.Messages messages;
        TLRPC.WebPage webPage = this.foundWebPage;
        if (webPage != null) {
            showFieldPanelForWebPage(true, webPage, false);
            return;
        }
        ReplyQuote replyQuote = this.replyingQuote;
        if (replyQuote != null) {
            showFieldPanelForReplyQuote(this.replyingMessageObject, replyQuote);
            return;
        }
        MessageObject messageObject = this.replyingMessageObject;
        if (messageObject != null && messageObject != this.threadMessageObject) {
            showFieldPanelForReply(messageObject);
            return;
        }
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams != null && (messages = messagePreviewParams.forwardMessages) != null) {
            showFieldPanelForForward(true, messages.messages);
            return;
        }
        MessageObject messageObject2 = this.editingMessageObject;
        if (messageObject2 != null) {
            showFieldPanelForEdit(true, messageObject2);
        } else {
            showFieldPanelForWebPage(false, null, true);
        }
    }

    public ChatMessageCell findMessageCell(int i, boolean z) {
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return null;
        }
        int childCount = recyclerListView.getChildCount();
        for (int i2 = 0; i2 < childCount; i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((this.chatListView.getChildAt(i2) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i2)).getMessageObject().getId() == i) {
                if (z) {
                    if (childAt.getY() + childAt.getMeasuredHeight() < (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f) || childAt.getY() > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        return null;
                    }
                }
                return (ChatMessageCell) this.chatListView.getChildAt(i2);
            }
        }
        return null;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    /* renamed from: finishFragment */
    public void lambda$onBackPressed$300() {
        super.finishFragment();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
    }

    public void forceEmptyHistory() {
        this.forceHistoryEmpty = true;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public ChatAvatarContainer getAvatarContainer() {
        return this.avatarContainer;
    }

    public ChatActivityEnterView getChatActivityEnterView() {
        return this.chatActivityEnterView;
    }

    public ChatActivityEnterView getChatActivityEnterViewForStickers() {
        TLRPC.Chat chat;
        if (this.bottomOverlayChat.getVisibility() == 0 || !((chat = this.currentChat) == null || ChatObject.canSendStickers(chat))) {
            return null;
        }
        return this.chatActivityEnterView;
    }

    public RecyclerListView getChatListView() {
        return this.chatListView;
    }

    public float getChatListViewPadding() {
        return this.chatListViewPaddingTop;
    }

    public int getChatMode() {
        return this.chatMode;
    }

    public ThanosEffect getChatThanosEffect() {
        if (LiteMode.isEnabled(65536) && ThanosEffect.supports()) {
            if (this.chatListThanosEffect == null) {
                if (getContext() == null || !ThanosEffect.supports() || this.chatListView == null || this.contentView == null) {
                    return null;
                }
                ThanosEffect thanosEffect = new ThanosEffect(getContext(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda219
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$getChatThanosEffect$339(r2);
                    }
                });
                this.chatListThanosEffect = thanosEffect;
                final ThanosEffect[] thanosEffectArr = {thanosEffect};
                ChatActivityFragmentView chatActivityFragmentView = this.contentView;
                chatActivityFragmentView.addView(thanosEffect, chatActivityFragmentView.indexOfChild(this.chatListView) + 1, LayoutHelper.createFrame(-1, -1.0f));
            }
            return this.chatListThanosEffect;
        }
        return null;
    }

    public float getClipBottom() {
        return (this.fragmentView.getBottom() - this.chatListView.getBottom()) + (((this.fragmentTransition == null || (this.fromPullingDownTransition && !this.toPullingDownTransition)) && !this.isInsideContainer) ? this.blurredViewBottomOffset : 0);
    }

    public float getClipTop() {
        return this.chatListView.getY() + (((this.fragmentTransition == null || (this.fromPullingDownTransition && !this.toPullingDownTransition)) && !this.isInsideContainer) ? (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f) : 0.0f);
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public SizeNotifierFrameLayout getContentView() {
        return this.contentView;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public TLRPC.Chat getCurrentChat() {
        return this.currentChat;
    }

    public TLRPC.ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }

    public TLRPC.EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public TLRPC.User getCurrentUser() {
        return this.currentUser;
    }

    public TLRPC.UserFull getCurrentUserInfo() {
        return this.userInfo;
    }

    public int getDialogFilterId() {
        return this.dialogFilterId;
    }

    public int getDialogFolderId() {
        return this.dialogFolderId;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface, org.telegram.ui.Components.InstantCameraView.Delegate
    public long getDialogId() {
        return this.dialog_id;
    }

    public String getFilterQuery() {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null || !chatActivityAdapter.isFiltered) {
            return null;
        }
        return this.searchingQuery;
    }

    public ReactionsLayoutInBubble.VisibleReaction getFilterTag() {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null || !chatActivityAdapter.isFiltered) {
            return null;
        }
        return this.searchingReaction;
    }

    public ArrayList getFilteredMessages() {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            return chatActivityAdapter.filteredMessages;
        }
        return null;
    }

    public FragmentContextView getFragmentContextView() {
        return this.fragmentContextView;
    }

    public MessageObject.GroupedMessages getGroup(long j) {
        return (MessageObject.GroupedMessages) this.groupedMessagesMap.get(j);
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public ChatObject.Call getGroupCall() {
        ChatObject.Call call;
        if (this.chatMode == 0 && (call = this.groupCall) != null && (call.call instanceof TLRPC.TL_groupCall)) {
            return call;
        }
        return null;
    }

    public long getInlineReturn() {
        return this.inlineReturn;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public long getMergeDialogId() {
        return this.mergeDialogId;
    }

    public int getOtherSameChatsDiff() {
        INavigationLayout iNavigationLayout = this.parentLayout;
        int i = 0;
        if (iNavigationLayout == null || iNavigationLayout.getFragmentStack() == null) {
            return 0;
        }
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        if (indexOf == -1) {
            indexOf = this.parentLayout.getFragmentStack().size();
        }
        while (true) {
            if (i >= this.parentLayout.getFragmentStack().size()) {
                i = indexOf;
                break;
            }
            BaseFragment baseFragment = (BaseFragment) this.parentLayout.getFragmentStack().get(i);
            if (baseFragment != this && (baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.dialog_id) {
                break;
            }
            i++;
        }
        return i - indexOf;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getPreviewHeight() {
        return (this.chatMode == 2 && this.messages.size() == 2) ? getHeightForMessage((MessageObject) this.messages.get(0), false) + AndroidUtilities.dp(80.0f) + ActionBar.getCurrentActionBarHeight() : super.getPreviewHeight();
    }

    public float getPullingDownOffset() {
        return this.pullingDownOffset;
    }

    public int getQuickReplyId() {
        if (this.chatMode == 5) {
            return (int) this.threadMessageId;
        }
        return 0;
    }

    public MessageObject getReplyMessage() {
        return this.replyingMessageObject;
    }

    public SimpleTextView getReplyNameTextView() {
        return this.replyNameTextView;
    }

    public SimpleTextView getReplyObjectTextView() {
        return this.replyObjectTextView;
    }

    public ReplyQuote getReplyQuote() {
        return this.replyingQuote;
    }

    public MessageObject getReplyTopMessage() {
        return this.replyingTopMessage;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Theme.ResourcesProvider getResourceProvider() {
        return this.themeDelegate;
    }

    public long getSavedDialogId() {
        if (this.chatMode == 3) {
            return this.threadMessageId;
        }
        return 0L;
    }

    public int getServiceHeight(View view) {
        return this.contentView.getBackgroundSizeY();
    }

    public StarReactionsOverlay getStarReactionsOverlay() {
        if (this.starReactionsOverlay == null) {
            this.starReactionsOverlay = new StarReactionsOverlay(this);
        }
        FrameLayout layoutContainer = getLayoutContainer();
        if (layoutContainer == null) {
            return null;
        }
        if (this.starReactionsOverlay.getParent() != layoutContainer) {
            AndroidUtilities.removeFromParent(this.starReactionsOverlay);
            layoutContainer.addView(this.starReactionsOverlay, LayoutHelper.createFrame(-1, -1.0f));
        } else if (layoutContainer.indexOfChild(this.starReactionsOverlay) < layoutContainer.indexOfChild(this.fragmentView)) {
            this.starReactionsOverlay.bringToFront();
        }
        return this.starReactionsOverlay;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public ArrayList getThemeDescriptions() {
        ThemeDescription themeDescription;
        if (this.forceDisallowRedrawThemeDescriptions) {
            return null;
        }
        if (this.isPauseOnThemePreview) {
            this.isPauseOnThemePreview = false;
            return null;
        }
        ThemeDescription.ThemeDescriptionDelegate themeDescriptionDelegate = new ThemeDescription.ThemeDescriptionDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda178
            @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public final void didSetColor() {
                ChatActivity.this.lambda$getThemeDescriptions$328();
            }

            @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public /* synthetic */ void onAnimationProgress(float f) {
                ThemeDescription.ThemeDescriptionDelegate.-CC.$default$onAnimationProgress(this, f);
            }
        };
        ArrayList arrayList = new ArrayList();
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to1));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to2));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to3));
        arrayList.add(new ThemeDescription(this.messagesSearchListContainer, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite));
        if (isReport()) {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
            ActionBar actionBar = this.actionBar;
            int i = ThemeDescription.FLAG_AB_ITEMSCOLOR;
            int i2 = Theme.key_actionBarActionModeDefaultIcon;
            arrayList.add(new ThemeDescription(actionBar, i, null, null, null, null, i2));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, i2));
            themeDescription = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, i2);
        } else {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
            themeDescription = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultSubtitle);
        }
        arrayList.add(themeDescription);
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuBackground));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItem));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItemIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault));
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer != null ? chatAvatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        SimpleTextView titleTextView = chatAvatarContainer2 != null ? chatAvatarContainer2.getTitleTextView() : null;
        int i3 = ThemeDescription.FLAG_IMAGECOLOR;
        int i4 = Theme.key_actionBarDefaultSubtitle;
        arrayList.add(new ThemeDescription(titleTextView, i3, null, null, null, null, i4));
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer3 != null ? chatAvatarContainer3.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_status, (Object) null));
        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer4 != null ? chatAvatarContainer4.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i4, (Object) null));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch));
        ActionBar actionBar2 = this.actionBar;
        int i5 = ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER;
        int i6 = Theme.key_actionBarDefaultSearchPlaceholder;
        arrayList.add(new ThemeDescription(actionBar2, i5, null, null, null, null, i6));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, i6));
        ActionBar actionBar3 = this.actionBar;
        int i7 = ThemeDescription.FLAG_AB_AM_ITEMSCOLOR;
        int i8 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(actionBar3, i7, null, null, null, null, i8));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
        arrayList.add(new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i8));
        ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer5 != null ? chatAvatarContainer5.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon));
        ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer6 != null ? chatAvatarContainer6.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink));
        Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
        Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
        Theme.MessageDrawable messageDrawable3 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
        Theme.MessageDrawable messageDrawable4 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
        Theme.MessageDrawable messageDrawable5 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
        Theme.MessageDrawable messageDrawable6 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{messageDrawable, messageDrawable2}, null, Theme.key_chat_inBubble));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{(Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected"), (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected")}, null, Theme.key_chat_inBubbleSelected));
        if (messageDrawable != null) {
            Drawable[] shadowDrawables = messageDrawable.getShadowDrawables();
            int i9 = Theme.key_chat_inBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables, null, i9));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable2.getShadowDrawables(), null, i9));
            Drawable[] shadowDrawables2 = messageDrawable3.getShadowDrawables();
            int i10 = Theme.key_chat_outBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables2, null, i10));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable4.getShadowDrawables(), null, i10));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubble));
        if (!this.themeDelegate.isThemeChangeAvailable(false)) {
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient1));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient2));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient3));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleGradientSelectedOverlay));
        Paint themedPaint = getThemedPaint("paintChatActionText");
        int i11 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, themedPaint, null, null, i11));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint("paintChatActionText"), null, null, Theme.key_chat_serviceLink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_botCardDrawable, getThemedDrawable("drawableShareIcon"), getThemedDrawable("drawableReplyIcon"), getThemedDrawable("drawableBotInline"), getThemedDrawable("drawableBotLink"), getThemedDrawable("drawable_botInvite"), getThemedDrawable("drawableGoIcon"), getThemedDrawable("drawableCommentSticker")}, null, Theme.key_chat_serviceIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkIn, (Object) null));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkOut, (Object) null));
        Drawable[] drawableArr = {Theme.chat_msgNoSoundDrawable};
        int i12 = Theme.key_chat_mediaTimeText;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr, null, i12));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheck")}, null, Theme.key_chat_outSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckSelected")}, null, Theme.key_chat_outSentCheckSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckRead"), getThemedDrawable("drawableMsgOutHalfCheck")}, null, Theme.key_chat_outSentCheckRead));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckReadSelected"), getThemedDrawable("drawableMsgOutHalfCheckSelected")}, null, Theme.key_chat_outSentCheckReadSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgStickerHalfCheck"), getThemedDrawable("drawableMsgStickerCheck"), getThemedDrawable("drawableMsgStickerClock"), getThemedDrawable("drawableMsgStickerViews"), getThemedDrawable("drawableMsgStickerReplies"), getThemedDrawable("drawableMsgStickerPinned")}, null, i11));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViews"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinned")}, null, Theme.key_chat_outViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViewsSelected"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinnedSelected")}, null, Theme.key_chat_outViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable, Theme.chat_msgInRepliesDrawable, Theme.chat_msgInPinnedDrawable}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable, Theme.chat_msgInRepliesSelectedDrawable, Theme.chat_msgInPinnedSelectedDrawable}, null, Theme.key_chat_inViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable, Theme.chat_msgMediaRepliesDrawable, Theme.chat_msgMediaPinnedDrawable}, null, Theme.key_chat_mediaViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenu")}, null, Theme.key_chat_outMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenuSelected")}, null, Theme.key_chat_outMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu));
        Drawable[] drawableArr2 = {getThemedDrawable("drawableMsgOutInstant")};
        int i13 = Theme.key_chat_outInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr2, null, i13));
        Drawable[] drawableArr3 = {Theme.chat_msgInInstantDrawable, Theme.chat_commentDrawable, Theme.chat_commentArrowDrawable};
        int i14 = Theme.key_chat_inInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr3, null, i14));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudio"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i13));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudioSelected"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i13));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallDrawable, null, i14));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallSelectedDrawable, null, Theme.key_chat_inInstantSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable}, null, Theme.key_chat_outGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownRedDrawable}, null, Theme.key_fill_RedNormal));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_chat_inGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, themeDescriptionDelegate, Theme.key_chat_selectedBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatBotButton"), null, null, Theme.key_chat_botButtonText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatTimeBackground"), null, null, Theme.key_chat_mediaTimeBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText));
        int i15 = Theme.key_chat_inReplyLine;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i15));
        int i16 = Theme.key_chat_outReplyLine;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i16));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i12));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_outUrlPaint, null, null, i16));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, i15));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLocationBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[0]}, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[1]}, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[0]}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[1]}, null, Theme.key_chat_outViews));
        if (!this.themeDelegate.isThemeChangeAvailable(false)) {
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, Theme.key_chats_unreadCounter));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{Theme.dialogs_namePaint[0], Theme.dialogs_namePaint[1], Theme.dialogs_searchNamePaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_name));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{Theme.dialogs_nameEncryptedPaint[0], Theme.dialogs_nameEncryptedPaint[1], Theme.dialogs_searchNameEncryptedPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_secretName));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, Theme.key_chats_secretIcon));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable, Theme.dialogs_fakeDrawable}, null, Theme.key_chats_draft));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint[1], null, null, Theme.key_chats_message_threeLines));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messageNamePaint, null, null, Theme.key_chats_nameMessage_threeLines));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_nameMessage));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_attachMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, Theme.dialogs_messagePrintingPaint, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_actionMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_timePaint, null, null, Theme.key_chats_date));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkDrawable}, null, Theme.key_chats_sentCheck));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkReadDrawable, Theme.dialogs_halfCheckDrawable}, null, Theme.key_chats_sentReadCheck));
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        Paint themedPaint2 = getThemedPaint("paintChatComposeBackground");
        int i17 = Theme.key_chat_messagePanelBackground;
        arrayList.add(new ThemeDescription(mentionsContainerView, 0, null, themedPaint2, null, null, i17));
        MentionsContainerView mentionsContainerView2 = this.mentionContainer;
        Drawable[] drawableArr4 = {Theme.chat_composeShadowDrawable};
        int i18 = Theme.key_chat_messagePanelShadow;
        arrayList.add(new ThemeDescription(mentionsContainerView2, 0, null, null, drawableArr4, null, i18));
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowRoundDrawable}, null, i17));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i17));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i18));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i17));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i18));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i17));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i18));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i17));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i18));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i17));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i18));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelText));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_CURSORCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCursor));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelHint));
        int i19 = Theme.key_chat_messagePanelSend;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, 24, null, i19));
        int i20 = Theme.key_chat_messagePanelIcons;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        int i21 = Theme.key_listSelector;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        int i22 = Theme.key_chat_recordedVoiceDot;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoTimelineView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        int i23 = Theme.key_chat_messagePanelVoicePressed;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_messagePanelVoiceLock));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceLockShadow));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordTime));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        int i24 = Theme.key_chat_recordVoiceCancel;
        arrayList.add(new ThemeDescription(chatActivityEnterView, 0, null, null, null, null, i24));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceDuration));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, i24));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCancelInlineBot));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgress));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgressInner));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_emojiPanelNewTrending));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_recordedVoicePlayPause));
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView2 != null ? chatActivityEnterView2.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackground));
        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView3 != null ? chatActivityEnterView3.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelShadowLine));
        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView4 != null ? chatActivityEnterView4.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelEmptyText));
        ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView5 != null ? chatActivityEnterView5.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIcon));
        ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView6 != null ? chatActivityEnterView6.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIconSelected));
        ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView7 != null ? chatActivityEnterView7.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelector));
        ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView8 != null ? chatActivityEnterView8.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackspace));
        ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView9 != null ? chatActivityEnterView9.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingTitle));
        ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView10 != null ? chatActivityEnterView10.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingDescription));
        ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView11 != null ? chatActivityEnterView11.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiBottomPanelIcon));
        ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView12 != null ? chatActivityEnterView12.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiSearchIcon));
        ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView13 != null ? chatActivityEnterView13.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerSetNameHighlight));
        ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView14 != null ? chatActivityEnterView14.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelectorLine));
        ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
        if (chatActivityEnterView15 != null) {
            TrendingStickersAlert trendingStickersAlert = chatActivityEnterView15.getTrendingStickersAlert();
            if (trendingStickersAlert != null) {
                arrayList.addAll(trendingStickersAlert.getThemeDescriptions());
            }
            arrayList.add(new ThemeDescription((View) null, 0, (Class[]) null, (String[]) null, (Paint[]) null, new Drawable[]{this.chatActivityEnterView.getStickersArrowDrawable()}, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        }
        int i25 = 0;
        while (i25 < 2) {
            UndoView undoView = i25 == 0 ? this.undoView : this.topUndoView;
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_undo_background));
            int i26 = Theme.key_undo_cancelColor;
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i26));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i26));
            int i27 = Theme.key_undo_infoColor;
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i27));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i27));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i26));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i27));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i27));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i27));
            i25++;
        }
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPlayPause));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerTitle));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPerformer));
        int i28 = Theme.key_inappPlayerClose;
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"subtitleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i28));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i28));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallText));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_topPanelLine));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_windowBackgroundWhite));
        arrayList.add(new ThemeDescription(this.pinnedCounterTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        for (int i29 = 0; i29 < 2; i29++) {
            arrayList.add(new ThemeDescription(this.pinnedNameTextView[i29], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
            arrayList.add(new ThemeDescription(this.pinnedMessageTextView[i29], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        }
        arrayList.add(new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        arrayList.add(new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        ImageView imageView = this.closePinned;
        int i30 = ThemeDescription.FLAG_IMAGECOLOR;
        int i31 = Theme.key_chat_topPanelClose;
        arrayList.add(new ThemeDescription(imageView, i30, null, null, null, null, i31));
        arrayList.add(new ThemeDescription(this.pinnedListButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i31));
        arrayList.add(new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i31));
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        int i32 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i33 = Theme.key_chat_topPanelBackground;
        arrayList.add(new ThemeDescription(blurredFrameLayout, i32, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i33));
        TextView textView = this.addToContactsButton;
        int i34 = ThemeDescription.FLAG_TEXTCOLOR;
        int i35 = Theme.key_chat_addContact;
        arrayList.add(new ThemeDescription(textView, i34, null, null, null, null, i35));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_text_RedBold));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, i35));
        arrayList.add(new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine));
        SimpleTextView simpleTextView = this.replyNameTextView;
        int i36 = ThemeDescription.FLAG_TEXTCOLOR;
        int i37 = Theme.key_chat_replyPanelName;
        arrayList.add(new ThemeDescription(simpleTextView, i36, null, null, null, null, i37));
        SimpleTextView simpleTextView2 = this.replyObjectTextView;
        int i38 = ThemeDescription.FLAG_TEXTCOLOR;
        int i39 = Theme.key_windowBackgroundWhiteGrayText;
        arrayList.add(new ThemeDescription(simpleTextView2, i38, null, null, null, null, i39));
        arrayList.add(new ThemeDescription(this.replyObjectHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i39));
        arrayList.add(new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons));
        arrayList.add(new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i37));
        ImageView imageView2 = this.searchCalendarButton;
        int i40 = ThemeDescription.FLAG_IMAGECOLOR;
        int i41 = Theme.key_chat_searchPanelIcons;
        arrayList.add(new ThemeDescription(imageView2, i40, null, null, null, null, i41));
        int i42 = Theme.key_actionBarActionModeDefaultSelector;
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i42));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i42));
        int i43 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i42));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i42));
        arrayList.add(new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText));
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        int i44 = Theme.key_chat_fieldOverlayText;
        arrayList.add(new ThemeDescription(unreadCounterTextView, 0, null, null, null, null, i44));
        UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
        int i45 = Theme.key_chat_goDownButtonCounterBackground;
        arrayList.add(new ThemeDescription(unreadCounterTextView2, 0, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_messagePanelBackground));
        arrayList.add(new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, i44));
        arrayList.add(new ThemeDescription(this.bottomOverlayImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i44));
        ChatBigEmptyView chatBigEmptyView = this.bigEmptyView;
        int i46 = ThemeDescription.FLAG_TEXTCOLOR;
        int i47 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(chatBigEmptyView, i46, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartBackground));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartArrowIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartText));
        View view = this.progressView2;
        int i48 = ThemeDescription.FLAG_SERVICEBACKGROUND;
        int i49 = Theme.key_chat_serviceBackground;
        arrayList.add(new ThemeDescription(view, i48, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i49));
        if (this.mentionContainer != null) {
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_botSwitchToInlineText));
            int i50 = Theme.key_windowBackgroundWhiteBlackText;
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i50));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteGrayText3));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, Theme.key_chat_inlineResultIcon));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, i50));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider));
        }
        HintView hintView = this.gifHintTextView;
        int i51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i52 = Theme.key_chat_gifSaveHintBackground;
        arrayList.add(new ThemeDescription(hintView, i51, null, null, null, null, i52));
        HintView hintView2 = this.gifHintTextView;
        int i53 = ThemeDescription.FLAG_TEXTCOLOR;
        int i54 = Theme.key_chat_gifSaveHintText;
        arrayList.add(new ThemeDescription(hintView2, i53, null, null, null, null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i52));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i52));
        arrayList.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i45));
        CounterView counterView = this.pagedownButtonCounter;
        int i55 = ThemeDescription.FLAG_TEXTCOLOR;
        int i56 = Theme.key_chat_goDownButtonCounter;
        arrayList.add(new ThemeDescription(counterView, i55, null, null, null, null, i56));
        ImageView imageView3 = this.pagedownButtonImage;
        int i57 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i58 = Theme.key_chat_goDownButton;
        arrayList.add(new ThemeDescription(imageView3, i57, null, null, null, null, i58));
        ImageView imageView4 = this.pagedownButtonImage;
        int i59 = ThemeDescription.FLAG_IMAGECOLOR;
        int i60 = Theme.key_chat_goDownButtonIcon;
        arrayList.add(new ThemeDescription(imageView4, i59, null, null, null, null, i60));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i56));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i58));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i60));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i49));
        int i61 = Theme.key_chat_attachIcon;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollText));
        arrayList.add(new ThemeDescription(null, 0, null, null, new Drawable[]{Theme.chat_attachEmptyDrawable}, null, Theme.key_chat_attachEmptyImage));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPhotoBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogTextGray2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogScrollGlow));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogGrayLine));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogCameraIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogButtonSelector));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteLinkSelection));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_TextSelectionCursor));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient3));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonText));
        int i62 = Theme.key_chat_inReactionButtonTextSelected;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i62));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i62));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_BlurAlpha));
        ChatActivityEnterView chatActivityEnterView16 = this.chatActivityEnterView;
        if (chatActivityEnterView16 != null && chatActivityEnterView16.botCommandsMenuContainer != null) {
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"description"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteBlackText));
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"command"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i39));
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        if (chatActivityMemberRequestsDelegate != null) {
            chatActivityMemberRequestsDelegate.fillThemeDescriptions(arrayList);
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            ((ThemeDescription) it.next()).resourcesProvider = this.themeDelegate;
        }
        return arrayList;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Drawable getThemedDrawable(String str) {
        Drawable drawable = this.themeDelegate.getDrawable(str);
        return drawable != null ? drawable : super.getThemedDrawable(str);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Paint getThemedPaint(String str) {
        Paint paint = this.themeDelegate.getPaint(str);
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public long getThreadId() {
        return this.threadMessageId;
    }

    public MessageObject getThreadMessage() {
        return this.threadMessageObject;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public long getTopicId() {
        int i;
        if (this.isTopic || (i = this.chatMode) == 3 || i == 5) {
            return this.threadMessageId;
        }
        return 0L;
    }

    public UndoView getUndoView() {
        createUndoView();
        return this.undoView;
    }

    public MessageObject.GroupedMessages getValidGroupedMessage(MessageObject messageObject) {
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
            if (groupedMessages == null || (groupedMessages.messages.size() > 1 && groupedMessages.getPosition(messageObject) != null)) {
                return groupedMessages;
            }
            return null;
        }
        return null;
    }

    public boolean groupEmojiPackHintWasVisible() {
        boolean z;
        HintView2 hintView2 = this.groupEmojiPackHint;
        if (hintView2 != null) {
            if (hintView2.shown()) {
                this.groupEmojiPackHint.hide();
            }
            z = true;
        } else {
            z = false;
        }
        this.groupEmojiPackHint = null;
        return z;
    }

    public boolean hasReportSpam() {
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        return (blurredFrameLayout == null || blurredFrameLayout.getTag() != null || this.reportSpamButton.getVisibility() == 8) ? false : true;
    }

    public void hideFieldPanel(boolean z) {
        showFieldPanel(false, null, null, null, null, true, 0, null, false, z);
    }

    public void hideFieldPanel(boolean z, int i, boolean z2) {
        showFieldPanel(false, null, null, null, null, z, i, null, false, z2);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean hideKeyboardOnShow() {
        MessageObject messageObject = this.threadMessageObject;
        if (messageObject != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
            return false;
        }
        return super.hideKeyboardOnShow();
    }

    public void hitSearch() {
        this.searchWas = true;
        boolean z = false;
        updateSearchButtons(0, 0, -1);
        getMediaDataController().searchMessagesInChat(this.searchingQuery, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        z = (TextUtils.isEmpty(this.searchingQuery) && this.searchingReaction == null) ? true : true;
        this.searching = z;
        this.searchItemVisible = z;
        updateBottomOverlay();
        updateSearchUpDownButtonVisibility(true);
    }

    public void invalidateMessagesVisiblePart() {
        this.invalidateMessagesVisiblePart = true;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    public boolean isEditingMessageMedia() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return (chatAttachAlert == null || chatAttachAlert.getEditingMessageObject() == null) ? false : true;
    }

    public boolean isFiltered() {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        return chatActivityAdapter != null && chatActivityAdapter.isFiltered;
    }

    public boolean isForumInViewAsMessagesMode() {
        return ChatObject.isForum(this.currentChat) && !this.isTopic;
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public boolean isInScheduleMode() {
        return this.chatMode == 1;
    }

    public boolean isKeyboardVisible() {
        return this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isLightStatusBar() {
        if (isReport()) {
            Theme.ResourcesProvider resourceProvider = getResourceProvider();
            return ColorUtils.calculateLuminance(resourceProvider != null ? resourceProvider.getColorOrDefault(Theme.key_actionBarActionModeDefault) : Theme.getColor(Theme.key_actionBarActionModeDefault, null, true)) > 0.699999988079071d;
        }
        ActionBar actionBar = this.actionBar;
        return actionBar == null ? !Theme.isCurrentThemeDark() : AndroidUtilities.computePerceivedBrightness(actionBar.getBackgroundColor()) > 0.721f;
    }

    public boolean isReplyChatComment() {
        return this.threadMessageObject != null && this.isComments;
    }

    public boolean isReport() {
        return !TextUtils.isEmpty(this.reportTitle);
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isSwipeBackEnabled(MotionEvent motionEvent) {
        if (!(this.chatMode == 5 && (this.messages.isEmpty() || this.threadMessageId == 0)) && this.swipeBackEnabled) {
            MessagePreviewView messagePreviewView = this.forwardingPreviewView;
            return messagePreviewView == null || !messagePreviewView.isShowing();
        }
        return false;
    }

    public boolean isThreadChat() {
        return this.threadMessageObject != null;
    }

    public void jumpToDate(int i) {
        int i2;
        TLRPC.Message message;
        if (this.messages.isEmpty()) {
            return;
        }
        ArrayList arrayList = this.messages;
        MessageObject messageObject = (MessageObject) arrayList.get(arrayList.size() - 1);
        if ((((MessageObject) this.messages.get(0)).messageOwner.date >= i && messageObject.messageOwner.date <= i) || (messageObject.messageOwner.date >= i && this.endReached[0])) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = (MessageObject) this.messages.get(size);
                if (messageObject2.messageOwner.date >= i && messageObject2.getId() != 0) {
                    scrollToMessageId(messageObject2.getId(), 0, false, messageObject2.getDialogId() == this.mergeDialogId ? 1 : 0, true, 0);
                    return;
                }
            }
        } else if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
            int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
            while (true) {
                if (findFirstVisibleItemPosition > findLastVisibleItemPosition) {
                    i2 = -1;
                    break;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (findFirstVisibleItemPosition < chatActivityAdapter.messagesStartRow || findFirstVisibleItemPosition >= chatActivityAdapter.messagesEndRow || (message = ((MessageObject) this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow)).messageOwner) == null) {
                    findFirstVisibleItemPosition++;
                } else {
                    int i3 = message.date < i ? 1 : 0;
                    if (isSecretChat()) {
                        i3 ^= 1;
                    }
                    i2 = i3 ^ 1;
                }
            }
            this.chatScrollHelper.setScrollDirection(i2);
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            int i4 = this.lastLoadIndex;
            this.postponedScrollToLastMessageQueryIndex = i4;
            this.fakePostponedScroll = false;
            this.waitingForLoad.add(Integer.valueOf(i4));
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i5 = this.classGuid;
            int i6 = this.chatMode;
            long j3 = this.threadMessageId;
            int i7 = this.replyMaxReadId;
            int i8 = this.lastLoadIndex;
            this.lastLoadIndex = i8 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, i, true, 0, i5, 4, 0, i6, j3, i7, i8, this.isTopic);
            this.floatingDateView.setAlpha(0.0f);
            this.floatingDateView.setTag(null);
        }
    }

    public void logSponsoredClicked(MessageObject messageObject, boolean z, boolean z2) {
        if (messageObject == null || !messageObject.isSponsored()) {
            return;
        }
        TLRPC.TL_channels_clickSponsoredMessage tL_channels_clickSponsoredMessage = new TLRPC.TL_channels_clickSponsoredMessage();
        tL_channels_clickSponsoredMessage.random_id = messageObject.sponsoredId;
        tL_channels_clickSponsoredMessage.channel = getMessagesController().getInputChannel(-getDialogId());
        tL_channels_clickSponsoredMessage.media = z;
        tL_channels_clickSponsoredMessage.fullscreen = z2;
        getConnectionsManager().sendRequest(tL_channels_clickSponsoredMessage, null);
    }

    public boolean maybePlayVisibleVideo() {
        AnimatedFileDrawable animatedFileDrawable;
        MessageObject messageObject;
        ImageReceiver photoImage;
        AnimatedFileDrawable animation;
        ChatMessageCell messageCell;
        if (this.chatListView == null) {
            return false;
        }
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject == null || playingMessageObject.isVideo()) {
            HintView hintView = this.noSoundHintView;
            if (hintView == null || hintView.getTag() == null || (messageCell = this.noSoundHintView.getMessageCell()) == null) {
                animatedFileDrawable = null;
                messageObject = null;
            } else {
                ImageReceiver photoImage2 = messageCell.getPhotoImage();
                animatedFileDrawable = photoImage2.getAnimation();
                if (animatedFileDrawable != null) {
                    messageObject = messageCell.getMessageObject();
                    this.scrollToVideo = ((float) messageCell.getTop()) + photoImage2.getImageY2() > ((float) this.chatListView.getMeasuredHeight());
                } else {
                    messageObject = null;
                }
            }
            if (messageObject == null) {
                int childCount = this.chatListView.getChildCount();
                int i = 0;
                while (true) {
                    if (i >= childCount) {
                        break;
                    }
                    View childAt = this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject messageObject2 = chatMessageCell.getMessageObject();
                        boolean isRoundVideo = messageObject2.isRoundVideo();
                        if (!messageObject2.isRoundOnce() && !messageObject2.isVoiceOnce() && ((messageObject2.isVideo() || isRoundVideo) && messageObject2.videoEditedInfo == null && (animation = (photoImage = chatMessageCell.getPhotoImage()).getAnimation()) != null)) {
                            float top = childAt.getTop() + photoImage.getImageY();
                            float imageHeight = photoImage.getImageHeight() + top;
                            if (imageHeight >= 0.0f && top <= this.chatListView.getMeasuredHeight()) {
                                if (messageObject != null && top < 0.0f) {
                                    break;
                                }
                                this.scrollToVideo = top < 0.0f || imageHeight > ((float) this.chatListView.getMeasuredHeight());
                                if (top >= 0.0f && imageHeight <= this.chatListView.getMeasuredHeight()) {
                                    messageObject = messageObject2;
                                    animatedFileDrawable = animation;
                                    break;
                                }
                                messageObject = messageObject2;
                                animatedFileDrawable = animation;
                            }
                        }
                    }
                    i++;
                }
            }
            if (messageObject == null || MediaController.getInstance().isPlayingMessage(messageObject)) {
                return false;
            }
            hideHints(true);
            if (messageObject.isRoundVideo()) {
                boolean playMessage = MediaController.getInstance().playMessage(messageObject);
                MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return playMessage;
            }
            SharedConfig.setNoSoundHintShowed(true);
            messageObject.audioProgress = animatedFileDrawable.getCurrentProgress();
            messageObject.audioProgressMs = animatedFileDrawable.getCurrentProgressMs();
            animatedFileDrawable.stop();
            if (PhotoViewer.isPlayingMessageInPip(messageObject)) {
                PhotoViewer.getPipInstance().destroyPhotoViewer();
            }
            return MediaController.getInstance().playMessage(messageObject);
        }
        return false;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean needDelayOpenAnimation() {
        if (this.chatMode != 1 && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = (BaseFragment) getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).isKeyboardVisible()) {
                return false;
            }
        }
        return this.firstLoading;
    }

    public boolean needEnterText() {
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
        return isKeyboardVisible;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onActivityResultFragment(int i, int i2, Intent intent) {
        String str;
        if (i2 == -1) {
            if (i == 0 || i == 2) {
                createChatAttachView();
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.getPhotoLayout().onActivityResultFragment(i, intent, this.currentPicturePath);
                }
                this.currentPicturePath = null;
                return;
            }
            if (i == 1) {
                if (intent == null || intent.getData() == null) {
                    showAttachmentError();
                    return;
                }
                final Uri data = intent.getData();
                if (data.toString().contains(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                    try {
                        str = AndroidUtilities.getPath(data);
                    } catch (Exception e) {
                        FileLog.e(e);
                        str = null;
                    }
                    if (str == null) {
                        showAttachmentError();
                    }
                    if (this.paused) {
                        this.startVideoEdit = str;
                    } else {
                        openVideoEditor(str, null);
                    }
                } else if (this.editingMessageObject == null && this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda28
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i3) {
                            ChatActivity.this.lambda$onActivityResultFragment$152(data, z, i3);
                        }
                    }, this.themeDelegate);
                } else {
                    fillEditingMediaWithCaption(null, null);
                    SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, data, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.replyingQuote, null, null, null, null, 0, this.editingMessageObject, true, 0, this.chatMode, this.quickReplyShortcut, getQuickReplyId());
                }
            } else if (i != 21) {
                return;
            } else {
                if (intent == null) {
                    showAttachmentError();
                    return;
                }
                if (intent.getData() != null) {
                    sendUriAsDocument(intent.getData());
                } else if (intent.getClipData() != null) {
                    ClipData clipData = intent.getClipData();
                    for (int i3 = 0; i3 < clipData.getItemCount(); i3++) {
                        sendUriAsDocument(clipData.getItemAt(i3).getUri());
                    }
                } else {
                    showAttachmentError();
                }
                ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.dismiss();
                }
            }
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean onBackPressed() {
        Bulletin visibleBulletin = Bulletin.getVisibleBulletin();
        if (visibleBulletin != null && (visibleBulletin.getLayout() instanceof Bulletin.LottieLayoutWithReactions)) {
            ((Bulletin.LottieLayoutWithReactions) visibleBulletin.getLayout()).hideReactionsDialog();
            visibleBulletin.hide();
            return false;
        }
        SecretVoicePlayer secretVoicePlayer = this.secretVoicePlayer;
        if (secretVoicePlayer != null && secretVoicePlayer.isShown()) {
            this.secretVoicePlayer.dismiss();
            return false;
        } else if (closeSheet()) {
            return false;
        } else {
            ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
            if (chatSelectionReactionMenuOverlay == null || chatSelectionReactionMenuOverlay.onBackPressed()) {
                if (ContentPreviewViewer.getInstance().isVisible()) {
                    ContentPreviewViewer.getInstance().closeWithMenu();
                    return false;
                }
                MessagePreviewView messagePreviewView = this.forwardingPreviewView;
                if (messagePreviewView != null && messagePreviewView.isShowing()) {
                    this.forwardingPreviewView.dismiss(true);
                    return false;
                } else if (this.messagesSearchListContainer.getTag() != null) {
                    showMessagesSearchListView(false);
                    return false;
                } else if (this.scrimPopupWindow != null) {
                    closeMenu();
                    return false;
                } else if (checkRecordLocked(false)) {
                    return false;
                } else {
                    if (this.textSelectionHelper.isInSelectionMode()) {
                        this.textSelectionHelper.clear();
                        return false;
                    }
                    ActionBar actionBar = this.actionBar;
                    if (actionBar != null && actionBar.isActionModeShowed()) {
                        clearSelectionMode();
                        return false;
                    }
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    if (chatActivityEnterView == null || !chatActivityEnterView.isPopupShowing()) {
                        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                        if (chatActivityEnterView2 != null && chatActivityEnterView2.hasBotWebView() && this.chatActivityEnterView.botCommandsMenuIsShowing() && this.chatActivityEnterView.onBotWebViewBackPressed()) {
                            return false;
                        }
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null && chatActivityEnterView3.botCommandsMenuIsShowing()) {
                            this.chatActivityEnterView.hideBotCommands();
                            return false;
                        }
                        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                        if (chatActivityEnterView4 == null || !chatActivityEnterView4.closeCreationLinkDialog()) {
                            if (this.chatMode == 6 && BusinessLinksActivity.closeRenameAlert()) {
                                return false;
                            }
                            ChatActivity chatActivity = this.backToPreviousFragment;
                            if (chatActivity != null) {
                                INavigationLayout iNavigationLayout = this.parentLayout;
                                iNavigationLayout.addFragmentToStack(chatActivity, iNavigationLayout.getFragmentStack().size() - 1);
                                this.backToPreviousFragment = null;
                            }
                            InstantCameraView instantCameraView = this.instantCameraView;
                            if (instantCameraView != null) {
                                instantCameraView.cancel(false);
                            }
                            if (this.chatMode == 5 && !"hello".equalsIgnoreCase(this.quickReplyShortcut) && !"away".equalsIgnoreCase(this.quickReplyShortcut) && (this.messages.isEmpty() || this.threadMessageId == 0)) {
                                showQuickRepliesRemoveAlert();
                                return false;
                            } else if (this.chatMode == 6 && this.chatActivityEnterView.businessLinkHasChanges()) {
                                showBusinessLinksDiscardAlert(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda26
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.this.lambda$onBackPressed$300();
                                    }
                                });
                                return false;
                            } else {
                                return true;
                            }
                        }
                        return false;
                    }
                    return !this.chatActivityEnterView.hidePopup(true);
                }
            }
            return false;
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyHidden() {
        hideTagSelector();
        if (!getMessagesController().premiumFeaturesBlocked() && getMessagesController().transcribeAudioTrialWeeklyNumber <= 0 && !getMessagesController().didPressTranscribeButtonEnough() && !getUserConfig().isPremium() && this.messages != null) {
            for (int i = 0; i < this.messages.size(); i++) {
                MessageObject messageObject = (MessageObject) this.messages.get(i);
                if (messageObject != null && !messageObject.isOutOwner() && ((messageObject.isVoice() || messageObject.isRoundVideo()) && !messageObject.isUnread() && (messageObject.isContentUnread() || ChatObject.isChannelAndNotMegaGroup(this.currentChat)))) {
                    TranscribeButton.showOffTranscribe(messageObject, false);
                }
            }
        }
        this.isFullyVisible = false;
        hideUndoViews();
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
        }
        TranscribeButton.resetVideoTranscriptionsOpen();
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.flagSecure.detach();
        super.onBecomeFullyHidden();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyVisible() {
        this.isFullyVisible = true;
        super.onBecomeFullyVisible();
        if (this.showCloseChatDialogLater) {
            showDialog(this.closeChatDialog);
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
        if (this.keyboardWasVisible) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboardInternal();
                this.chatActivityEnterView.freezeEmojiView(false);
            }
            this.keyboardWasVisible = false;
        }
        if (this.savedMessagesHint != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda192
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.checkSavedMessagesHint();
                }
            }, 600L);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBeginSlide() {
        super.onBeginSlide();
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay == null || !chatSelectionReactionMenuOverlay.isVisible()) {
            return;
        }
        this.selectionReactionsOverlay.setHiddenByScroll(true);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onConfigurationChanged(Configuration configuration) {
        MessageObject playingMessageObject;
        fixLayout();
        Dialog dialog = this.visibleDialog;
        if (dialog instanceof DatePickerDialog) {
            dialog.dismiss();
        }
        closeMenu();
        if (AndroidUtilities.isTablet()) {
            return;
        }
        if (configuration.orientation != 2) {
            if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
                PhotoViewer.getInstance().injectVideoPlayerToMediaController();
                PhotoViewer.getInstance().closePhoto(false, true);
            }
        } else if ((PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || !playingMessageObject.isVideo()) {
        } else {
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            MediaController.getInstance().cleanupPlayer(true, true, false, true);
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i = playingMessageObject.type;
            if (photoViewer.openPhoto(playingMessageObject, i != 0 ? this.dialog_id : 0L, i != 0 ? this.mergeDialogId : 0L, i != 0 ? getTopicId() : 0L, this.photoViewerProvider, false)) {
                PhotoViewer.getInstance().setParentChatActivity(this);
            }
            hideHints(false);
            MediaController.getInstance().resetGoingToShowMessageObject();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public AnimatorSet onCustomTransitionAnimation(boolean z, Runnable runnable) {
        ValueAnimator ofFloat;
        if (z && this.fromPullingDownTransition && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = (BaseFragment) getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if (baseFragment instanceof ChatActivity) {
                this.wasManualScroll = true;
                final ChatActivity chatActivity = (ChatActivity) baseFragment;
                chatActivity.setTransitionToChatActivity(this);
                this.fragmentView.setAlpha(0.0f);
                this.contentView.setSkipBackgroundDrawing(true);
                this.avatarContainer.setTranslationY(AndroidUtilities.dp(8.0f));
                this.avatarContainer.getAvatarImageView().setAlpha(0.0f);
                this.avatarContainer.getAvatarImageView().setTranslationY(-AndroidUtilities.dp(8.0f));
                this.toPullingDownTransition = true;
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                FrameLayout frameLayout = this.bottomOverlay;
                if (frameLayout != null) {
                    frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                int measuredHeight = chatActivityEnterView2 == null ? 0 : chatActivityEnterView2.getMeasuredHeight();
                FrameLayout frameLayout2 = this.bottomOverlay;
                int max = Math.max(measuredHeight, frameLayout2 == null ? 0 : frameLayout2.getMeasuredHeight());
                ChatActivityEnterView chatActivityEnterView3 = chatActivity.chatActivityEnterView;
                int measuredHeight2 = chatActivityEnterView3 == null ? 0 : chatActivityEnterView3.getMeasuredHeight();
                FrameLayout frameLayout3 = this.bottomOverlay;
                this.pullingBottomOffset = -(Math.max(measuredHeight2, frameLayout3 == null ? 0 : frameLayout3.getMeasuredHeight()) - max);
                final boolean z2 = chatActivity.fragmentContextView.getMeasuredHeight() != this.fragmentContextView.getMeasuredHeight();
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda309
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.this.lambda$onCustomTransitionAnimation$329(chatActivity, z2, valueAnimator);
                    }
                });
                updateChatListViewTopPadding();
                AnimatorSet animatorSet = new AnimatorSet();
                this.fragmentTransition = animatorSet;
                animatorSet.addListener(new 149(chatActivity, runnable));
                this.fragmentTransition.setDuration(300L);
                this.fragmentTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
                this.fragmentTransition.playTogether(ofFloat2);
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
                return this.fragmentTransition;
            }
        }
        if (!this.switchFromTopics || getParentLayout() == null || getParentLayout().getFragmentStack().size() <= 1) {
            return null;
        }
        BaseFragment baseFragment2 = (BaseFragment) getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
        if (baseFragment2 instanceof TopicsFragment) {
            float[] fArr = {1.0f, 0.0f};
            if (z) {
                // fill-array-data instruction
                fArr[0] = 0.0f;
                fArr[1] = 1.0f;
                ofFloat = ValueAnimator.ofFloat(fArr);
            } else {
                ofFloat = ValueAnimator.ofFloat(fArr);
            }
            baseFragment2.getFragmentView().getWidth();
            this.switchingFromTopicsProgress = z ? 0.0f : 1.0f;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity.150
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.switchingFromTopicsProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                    ChatActivity.this.contentView.invalidate();
                }
            });
            this.switchingFromTopics = true;
            ActionBar actionBar = this.actionBar;
            if (actionBar != null) {
                actionBar.invalidate();
            }
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.invalidate();
            }
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.fragmentTransition = animatorSet2;
            animatorSet2.addListener(new 151(z, runnable));
            this.fragmentTransition.setDuration(150L);
            this.fragmentTransition.playTogether(ofFloat);
            if (z) {
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
            } else {
                this.fragmentTransition.start();
            }
            return this.fragmentTransition;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onDialogDismiss(Dialog dialog) {
        Dialog dialog2 = this.closeChatDialog;
        if (dialog2 == null || dialog != dialog2) {
            return;
        }
        getMessagesController().deleteDialog(this.dialog_id, 0);
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null || iNavigationLayout.getFragmentStack().isEmpty() || this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) == this) {
            lambda$onBackPressed$300();
            return;
        }
        removeSelfFromStack();
        ((BaseFragment) this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1)).finishFragment();
    }

    public void onEditTextDialogClose(boolean z, boolean z2) {
        if (this.openKeyboardOnAttachMenuClose) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda76
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onEditTextDialogClose$106();
                }
            }, 50L);
            if (z2) {
                this.openKeyboardOnAttachMenuClose = false;
            }
        }
        if (!z || this.isInsideContainer) {
            return;
        }
        AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
    }

    /* JADX WARN: Code restructure failed: missing block: B:104:0x0351, code lost:
        if (r0 != null) goto L34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x07fe, code lost:
        if (r31.highlightMessageId == r31.startLoadFromMessageId) goto L84;
     */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0475  */
    /* JADX WARN: Type inference failed for: r10v13 */
    /* JADX WARN: Type inference failed for: r10v15 */
    /* JADX WARN: Type inference failed for: r10v18 */
    /* JADX WARN: Type inference failed for: r10v19 */
    /* JADX WARN: Type inference failed for: r10v20 */
    /* JADX WARN: Type inference failed for: r10v21 */
    /* JADX WARN: Type inference failed for: r10v22 */
    /* JADX WARN: Type inference failed for: r10v23 */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onFragmentCreate() {
        final long j;
        int i;
        long j2;
        int i2;
        TLRPC.Chat chat;
        NotificationCenter notificationCenter;
        int i3;
        boolean z;
        long j3;
        QuickRepliesController.QuickReply findReply;
        final long j4 = this.arguments.getLong("chat_id", 0L);
        long j5 = this.arguments.getLong("user_id", 0L);
        final int i4 = this.arguments.getInt("enc_id", 0);
        this.dialogFolderId = this.arguments.getInt("dialog_folder_id", 0);
        this.dialogFilterId = this.arguments.getInt("dialog_filter_id", 0);
        this.chatMode = this.arguments.getInt("chatMode", 0);
        this.quickReplyShortcut = this.arguments.getString("quick_reply", null);
        this.voiceChatHash = this.arguments.getString("voicechat", null);
        this.openVideoChat = this.arguments.getBoolean("videochat", false);
        this.livestream = !TextUtils.isEmpty(this.arguments.getString("livestream", null));
        this.attachMenuBotToOpen = this.arguments.getString("attach_bot", null);
        this.attachMenuBotStartCommand = this.arguments.getString("attach_bot_start_command", null);
        this.inlineReturn = this.arguments.getLong("inline_return", 0L);
        String string = this.arguments.getString("inline_query");
        this.textToSet = this.arguments.getString("start_text");
        this.premiumInvoiceBot = this.arguments.getBoolean("premium_bot", false);
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        this.startReplyTo = this.arguments.getInt("reply_to", 0);
        this.startLoadFromDate = this.arguments.getInt("start_from_date", 0);
        this.startFromVideoTimestamp = this.arguments.getInt("video_timestamp", -1);
        this.threadUnreadMessagesCount = this.arguments.getInt("unread_count", 0);
        if (this.startFromVideoTimestamp >= 0) {
            this.startFromVideoMessageId = this.startLoadFromMessageId;
        }
        this.reportTitle = this.arguments.getString("reportTitle", null);
        this.reportOption = this.arguments.getByteArray("reportOption");
        this.pulled = this.arguments.getBoolean("pulled", false);
        this.historyPreloaded = this.arguments.getBoolean("historyPreloaded", false);
        int i5 = this.highlightMessageId;
        if (i5 != 0 && i5 != Integer.MAX_VALUE) {
            this.startLoadFromMessageId = i5;
        }
        this.migrated_to = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        this.needRemovePreviousSameChatActivity = this.arguments.getBoolean("need_remove_previous_same_chat_activity", true);
        this.justCreatedChat = this.arguments.getBoolean("just_created_chat", false);
        if (this.quickReplyShortcut != null && (findReply = QuickRepliesController.getInstance(this.currentAccount).findReply(this.quickReplyShortcut)) != null) {
            setQuickReplyId(findReply.id);
        }
        if (j4 != 0) {
            TLRPC.Chat chat2 = getMessagesController().getChat(Long.valueOf(j4));
            this.currentChat = chat2;
            if (chat2 == null) {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = getMessagesStorage();
                DispatchQueue storageQueue = messagesStorage.getStorageQueue();
                j = j5;
                z = false;
                storageQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda184
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$9(messagesStorage, j4, countDownLatch);
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.currentChat == null) {
                    return false;
                }
                getMessagesController().putChat(this.currentChat, true);
                j3 = j4;
            } else {
                j = j5;
                z = false;
                j3 = j4;
            }
            this.dialog_id = -j3;
            if (ChatObject.isChannel(this.currentChat)) {
                if (!ChatObject.isNotInChat(this.currentChat) || isThreadChat() || isInScheduleMode()) {
                    getMessagesController().startShortPoll(this.currentChat, this.classGuid, z);
                } else {
                    this.waitingForGetDifference = true;
                    getMessagesController().startShortPoll(this.currentChat, this.classGuid, z, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda185
                        @Override // androidx.core.util.Consumer
                        public final void accept(Object obj) {
                            ChatActivity.this.lambda$onFragmentCreate$10((Boolean) obj);
                        }
                    });
                }
            }
            i = 0;
        } else {
            j = j5;
            i = 0;
            i = 0;
            i = 0;
            i = 0;
            i = 0;
            i = 0;
            i = 0;
            if (j != 0) {
                TLRPC.User user = getMessagesController().getUser(Long.valueOf(j));
                this.currentUser = user;
                if (user == null) {
                    final MessagesStorage messagesStorage2 = getMessagesStorage();
                    final CountDownLatch countDownLatch2 = new CountDownLatch(1);
                    messagesStorage2.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda186
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$11(messagesStorage2, j, countDownLatch2);
                        }
                    });
                    try {
                        countDownLatch2.await();
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    getMessagesController().putUser(this.currentUser, true);
                }
                this.dialog_id = j;
                String string2 = this.arguments.getString("botUser");
                this.botUser = string2;
                if (string != null) {
                    getMessagesController().sendBotStart(this.currentUser, string);
                } else if (this.premiumInvoiceBot && !TextUtils.isEmpty(string2)) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                    this.botUser = null;
                    this.premiumInvoiceBot = false;
                }
                this.hasQuickReplies = false;
                TLRPC.User user2 = this.currentUser;
                if (user2 != null && this.chatMode == 0 && !user2.bot) {
                    QuickRepliesController.getInstance(this.currentAccount).load();
                }
            } else if (i4 != 0) {
                this.currentEncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(i4));
                final MessagesStorage messagesStorage3 = getMessagesStorage();
                if (this.currentEncryptedChat == null) {
                    final CountDownLatch countDownLatch3 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda187
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$12(messagesStorage3, i4, countDownLatch3);
                        }
                    });
                    try {
                        countDownLatch3.await();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                    if (this.currentEncryptedChat == null) {
                        return false;
                    }
                    getMessagesController().putEncryptedChat(this.currentEncryptedChat, true);
                }
                TLRPC.User user3 = getMessagesController().getUser(Long.valueOf(this.currentEncryptedChat.user_id));
                this.currentUser = user3;
                if (user3 == null) {
                    final CountDownLatch countDownLatch4 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda188
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$13(messagesStorage3, countDownLatch4);
                        }
                    });
                    try {
                        countDownLatch4.await();
                    } catch (Exception e4) {
                        FileLog.e(e4);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    getMessagesController().putUser(this.currentUser, true);
                }
                this.dialog_id = DialogObject.makeEncryptedDialogId(i4);
                int[] iArr = this.maxMessageId;
                iArr[1] = Integer.MIN_VALUE;
                iArr[0] = Integer.MIN_VALUE;
                int[] iArr2 = this.minMessageId;
                iArr2[1] = Integer.MAX_VALUE;
                iArr2[0] = Integer.MAX_VALUE;
            } else {
                int i6 = this.chatMode;
                if (i6 != 6) {
                    if (i6 == 7) {
                        this.searchType = this.arguments.getInt("searchType", 0);
                        String string3 = this.arguments.getString("searchHashtag", null);
                        this.searchingHashtag = string3;
                        this.searchingQuery = string3;
                        if (this.searchType != 0) {
                        }
                    }
                    return false;
                }
                String string4 = this.arguments.getString("business_link");
                if (string4 == null) {
                    return false;
                }
                TLRPC.TL_businessChatLink findLink = BusinessLinksController.getInstance(this.currentAccount).findLink(string4);
                this.businessLink = findLink;
                if (findLink == null) {
                    return false;
                }
                forceEmptyHistory();
            }
        }
        this.dialog_id_Long = Long.valueOf(this.dialog_id);
        this.transitionAnimationGlobalIndex = NotificationCenter.getGlobalInstance().setAnimationInProgress(this.transitionAnimationGlobalIndex, new int[i]);
        if (this.currentUser != null && Build.VERSION.SDK_INT < 23) {
            MediaController.getInstance().startMediaObserver();
        }
        getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        if (this.chatMode != 1) {
            int i7 = (this.threadMessageId > 0L ? 1 : (this.threadMessageId == 0L ? 0 : -1));
            NotificationCenter notificationCenter2 = getNotificationCenter();
            if (i7 == 0) {
                notificationCenter2.addObserver(this, NotificationCenter.screenshotTook);
                getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
                getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
                getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                getNotificationCenter().addObserver(this, NotificationCenter.commentsRead);
                getNotificationCenter().addObserver(this, NotificationCenter.changeRepliesCounter);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadChatInviter);
                notificationCenter = getNotificationCenter();
                i3 = NotificationCenter.groupCallUpdated;
            } else {
                notificationCenter2.addObserver(this, NotificationCenter.threadMessagesRead);
                if (this.isTopic) {
                    getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                    notificationCenter = getNotificationCenter();
                    i3 = NotificationCenter.didLoadPinnedMessages;
                }
                getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
                getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
                getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
                getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
                getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
                getNotificationCenter().addObserver(this, NotificationCenter.availableEffectsUpdate);
                getNotificationCenter().addObserver(this, NotificationCenter.starReactionAnonymousUpdate);
                if (this.currentEncryptedChat != null) {
                    getNotificationCenter().addObserver(this, NotificationCenter.didVerifyMessagesStickers);
                }
            }
            notificationCenter.addObserver(this, i3);
            getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
            getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
            getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
            getNotificationCenter().addObserver(this, NotificationCenter.availableEffectsUpdate);
            getNotificationCenter().addObserver(this, NotificationCenter.starReactionAnonymousUpdate);
            if (this.currentEncryptedChat != null) {
            }
        }
        getNotificationCenter().addObserver(this, NotificationCenter.premiumFloodWaitReceived);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        if (this.chatMode != 2) {
            getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
        }
        if (this.chatMode == 0) {
            getNotificationCenter().addObserver(this, NotificationCenter.didLoadSponsoredMessages);
        }
        getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.groupRestrictionsUnlockedByBoosts);
        getNotificationCenter().addObserver(this, NotificationCenter.customStickerCreated);
        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.topicsDidLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.chatWasBoostedByUser);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().addObserver(this, NotificationCenter.savedReactionTagsUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.updateAllMessages);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslating);
        getNotificationCenter().addObserver(this, NotificationCenter.onReceivedChannelDifference);
        getNotificationCenter().addObserver(this, NotificationCenter.storiesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRecommendationsLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.updateTranscriptionLock);
        getNotificationCenter().addObserver(this, NotificationCenter.savedMessagesDialogsUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.quickRepliesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.quickRepliesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.factCheckLoaded);
        if (this.chatMode == 6) {
            getNotificationCenter().addObserver(this, NotificationCenter.businessLinksUpdated);
        }
        if (this.chatMode == 7) {
            getNotificationCenter().addObserver(this, NotificationCenter.hashtagSearchUpdated);
        }
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.attach();
        }
        super.onFragmentCreate();
        if (this.chatMode == 2) {
            ArrayList arrayList = new ArrayList();
            int size = this.pinnedMessageIds.size();
            for (int i8 = 0; i8 < size; i8++) {
                MessageObject messageObject = (MessageObject) this.pinnedMessageObjects.get((Integer) this.pinnedMessageIds.get(i8));
                if (messageObject != null) {
                    MessageObject messageObject2 = new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, i);
                    messageObject2.replyMessageObject = messageObject.replyMessageObject;
                    messageObject2.mediaExists = messageObject.mediaExists;
                    messageObject2.attachPathExists = messageObject.attachPathExists;
                    arrayList.add(messageObject2);
                }
            }
            int i9 = this.lastLoadIndex;
            this.lastLoadIndex = i9 + 1;
            this.waitingForLoad.add(Integer.valueOf(i9));
            NotificationCenter notificationCenter3 = getNotificationCenter();
            int i10 = NotificationCenter.messagesDidLoad;
            Long valueOf = Long.valueOf(this.dialog_id);
            Integer valueOf2 = Integer.valueOf(arrayList.size());
            Integer valueOf3 = Integer.valueOf(this.last_message_id);
            Integer valueOf4 = Integer.valueOf(this.classGuid);
            Integer valueOf5 = Integer.valueOf(i9);
            Object obj = this.pinnedMessageIds.get(i);
            j2 = j;
            i2 = 15;
            Object[] objArr = new Object[15];
            objArr[i] = valueOf;
            objArr[1] = valueOf2;
            objArr[2] = arrayList;
            objArr[3] = Boolean.FALSE;
            objArr[4] = 0;
            objArr[5] = valueOf3;
            objArr[6] = 0;
            objArr[7] = 0;
            objArr[8] = 2;
            objArr[9] = Boolean.TRUE;
            objArr[10] = valueOf4;
            objArr[11] = valueOf5;
            objArr[12] = obj;
            objArr[13] = 0;
            objArr[14] = 2;
            notificationCenter3.lambda$postNotificationNameOnUIThread$1(i10, objArr);
        } else {
            j2 = j;
            i2 = 15;
            if (!this.forceHistoryEmpty) {
                this.loading = true;
            }
        }
        if (!isThreadChat() || this.isTopic) {
            getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, true);
            int i11 = this.chatMode;
            if (i11 == 0 || i11 == 3) {
                if (this.currentEncryptedChat == null) {
                    getMediaDataController().loadBotKeyboard(MessagesStorage.TopicKey.of(this.dialog_id, getTopicId()));
                }
                getMessagesController().loadPeerSettings(this.currentUser, this.currentChat);
                if (this.startLoadFromMessageId == 0) {
                    SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                    int i12 = notificationsSettings.getInt("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i);
                    if (i12 != 0) {
                        this.wasManualScroll = true;
                        this.loadingFromOldPosition = true;
                        this.startLoadFromMessageOffset = notificationsSettings.getInt("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i);
                        this.startLoadFromMessageId = i12;
                    }
                } else {
                    this.showScrollToMessageError = true;
                    this.needSelectFromMessageId = true;
                }
            }
            this.loadInfo = i;
            if (this.currentChat != null) {
                this.chatInfo = getMessagesController().getChatFull(this.currentChat.id);
                this.groupCall = getMessagesController().getGroupCall(this.currentChat.id, true);
                if (ChatObject.isChannel(this.currentChat) && !getMessagesController().isChannelAdminsLoaded(this.currentChat.id)) {
                    getMessagesController().loadChannelAdmins(this.currentChat.id, true);
                }
                fillInviterId(i);
                if (this.chatMode != 2) {
                    MessagesStorage messagesStorage4 = getMessagesStorage();
                    TLRPC.Chat chat3 = this.currentChat;
                    messagesStorage4.loadChatInfo(chat3.id, ChatObject.isChannel(chat3), null, true, false, this.startLoadFromMessageId);
                }
                if (this.chatMode == 0 && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && this.chatInfo.migrated_from_chat_id != 0 && !isThreadChat()) {
                    TLRPC.ChatFull chatFull = this.chatInfo;
                    this.mergeDialogId = -chatFull.migrated_from_chat_id;
                    this.maxMessageId[1] = chatFull.migrated_from_max_id;
                }
                this.loadInfo = this.chatInfo == null;
                checkGroupCallJoin(i);
                gotChatInfo();
            } else if (this.currentUser != null) {
                if (this.chatMode != 2) {
                    getMessagesController().loadUserInfo(this.currentUser, true, this.classGuid, this.startLoadFromMessageId);
                }
                this.loadInfo = this.userInfo == null;
            }
            if (this.forceHistoryEmpty) {
                boolean[] zArr = this.endReached;
                zArr[1] = true;
                zArr[i] = true;
                boolean[] zArr2 = this.forwardEndReached;
                zArr2[1] = true;
                zArr2[i] = true;
                this.firstLoading = i;
                this.loading = i;
                checkDispatchHideSkeletons(i);
            }
            if (this.chatMode != 2 && !this.forceHistoryEmpty) {
                if (SharedConfig.deviceIsHigh()) {
                    i2 = (!isThreadChat() || this.isTopic) ? 25 : 30;
                } else if (isThreadChat() && !this.isTopic) {
                    i2 = 20;
                }
                this.initialMessagesSize = i2;
                if (!this.waitingForGetDifference) {
                    firstLoadMessages();
                }
            }
            if (this.chatMode == 0) {
                if (j2 != 0 && this.currentUser.bot) {
                    final long j6 = j2;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda189
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$14(j6);
                        }
                    });
                } else if (this.chatInfo instanceof TLRPC.TL_chatFull) {
                    for (int i13 = 0; i13 < this.chatInfo.participants.participants.size(); i13++) {
                        TLRPC.User user4 = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i13).user_id));
                        if (user4 != null && user4.bot) {
                            getMediaDataController().loadBotInfo(user4.id, -this.chatInfo.id, true, this.classGuid);
                        }
                    }
                }
                if (AndroidUtilities.isTablet() && !this.isComments) {
                    NotificationCenter notificationCenter4 = getNotificationCenter();
                    int i14 = NotificationCenter.openedChatChanged;
                    Long valueOf6 = Long.valueOf(this.dialog_id);
                    Long valueOf7 = Long.valueOf(getTopicId());
                    Object[] objArr2 = new Object[3];
                    objArr2[i] = valueOf6;
                    objArr2[1] = valueOf7;
                    objArr2[2] = Boolean.FALSE;
                    notificationCenter4.lambda$postNotificationNameOnUIThread$1(i14, objArr2);
                }
                TLRPC.User user5 = this.currentUser;
                if (user5 != null && !UserObject.isReplyUser(user5)) {
                    this.userBlocked = getMessagesController().blockePeers.indexOfKey(this.currentUser.id) >= 0;
                }
                TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
                if (encryptedChat != null && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                    getSecretChatHelper().sendNotifyLayerMessage(this.currentEncryptedChat, null);
                }
            }
            TLRPC.ChatFull chatFull2 = this.chatInfo;
            if (chatFull2 != null && chatFull2.linked_chat_id != 0 && (chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id))) != null && chat.megagroup) {
                getMessagesController().startShortPoll(chat, this.classGuid, i, null);
            }
            ThemeDelegate themeDelegate = this.parentThemeDelegate;
            if (themeDelegate == null) {
                themeDelegate = new ThemeDelegate();
            }
            this.themeDelegate = themeDelegate;
            if (themeDelegate.isThemeChangeAvailable(i)) {
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.needSetDayNightTheme);
            }
            TLRPC.ChatInvite chatInvite = this.chatInvite;
            if (chatInvite != null) {
                int currentTime = chatInvite.expires - getConnectionsManager().getCurrentTime();
                if (currentTime < 0) {
                    currentTime = 10;
                }
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda190
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$17();
                    }
                };
                this.chatInviteRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, currentTime * 1000);
            }
            if (this.isTopic) {
                getMessagesController().getTopicsController().getTopicRepliesCount(this.dialog_id, getTopicId());
            }
            if (this.chatMode != 6) {
                getMessagesController().getSavedMessagesController().preloadDialogs(i);
            }
            if (this.chatMode == 3) {
                getMessagesController().getSavedMessagesController().checkSavedDialogCount(getTopicId());
            }
            return true;
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        ContentPreviewViewer.getInstance().clearDelegate(this.contentPreviewViewerDelegate);
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
        getNotificationCenter().onAnimationFinish(this.scrollAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollCallbackAnimationIndex);
        hideUndoViews();
        Runnable runnable = this.chatInviteRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.chatInviteRunnable = null;
        }
        getNotificationCenter().removePostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, false);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.premiumFloodWaitReceived);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.threadMessagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.commentsRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.changeRepliesCounter);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupRestrictionsUnlockedByBoosts);
        getNotificationCenter().removeObserver(this, NotificationCenter.customStickerCreated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadChatInviter);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupCallUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateMessagesViews);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadPinnedMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.topicsDidLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatWasBoostedByUser);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().removeObserver(this, NotificationCenter.savedReactionTagsUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateAllMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSponsoredMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslating);
        getNotificationCenter().removeObserver(this, NotificationCenter.onReceivedChannelDifference);
        getNotificationCenter().removeObserver(this, NotificationCenter.storiesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRecommendationsLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateTranscriptionLock);
        getNotificationCenter().removeObserver(this, NotificationCenter.savedMessagesDialogsUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.quickRepliesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.quickRepliesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.availableEffectsUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.starReactionAnonymousUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.factCheckLoaded);
        if (this.chatMode == 6) {
            getNotificationCenter().removeObserver(this, NotificationCenter.businessLinksUpdated);
        }
        if (this.chatMode == 7) {
            getNotificationCenter().removeObserver(this, NotificationCenter.hashtagSearchUpdated);
        }
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.detach();
        }
        if (this.currentEncryptedChat != null) {
            getNotificationCenter().removeObserver(this, NotificationCenter.didVerifyMessagesStickers);
        }
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.needSetDayNightTheme);
        if (this.chatMode == 0 && AndroidUtilities.isTablet()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Long.valueOf(getTopicId()), Boolean.TRUE);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.detach();
        }
        if (this.currentUser != null) {
            getMessagesController().cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            getMessagesController().startShortPoll(this.currentChat, this.classGuid, true);
            TLRPC.ChatFull chatFull = this.chatInfo;
            if (chatFull != null && chatFull.linked_chat_id != 0) {
                getMessagesController().startShortPoll(getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id)), this.classGuid, true);
            }
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.onDestroy();
        }
        PinchToZoomHelper pinchToZoomHelper = this.pinchToZoomHelper;
        if (pinchToZoomHelper != null) {
            pinchToZoomHelper.clear();
        }
        this.chatThemeBottomSheet = null;
        INavigationLayout parentLayout = getParentLayout();
        if (parentLayout != null && parentLayout.getFragmentStack() != null) {
            BackButtonMenu.clearPulledDialogs(this, parentLayout.getFragmentStack().indexOf(this) - (!replacingChatActivity ? 1 : 0));
        }
        replacingChatActivity = false;
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.chatMessagesMetadataController.onFragmentDestroy();
        ProfileBirthdayEffect.BirthdayEffectFetcher birthdayEffectFetcher = this.birthdayAssetsFetcher;
        if (birthdayEffectFetcher != null) {
            birthdayEffectFetcher.detach(true);
            this.birthdayAssetsFetcher = null;
        }
        StarReactionsOverlay starReactionsOverlay = this.starReactionsOverlay;
        if (starReactionsOverlay != null) {
            starReactionsOverlay.setMessageCell(null);
            AndroidUtilities.removeFromParent(this.starReactionsOverlay);
            this.starReactionsOverlay = null;
        }
    }

    @Override // org.telegram.ui.Components.FloatingDebug.FloatingDebugProvider
    public List onGetDebugItems() {
        ArrayList arrayList = new ArrayList();
        if (ChatObject.isChannel(this.currentChat)) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugShareAlert)));
            int i = this.shareAlertDebugMode;
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.formatString(R.string.DebugShareAlertSwitchDialogsMode, LocaleController.getString(i != 1 ? i != 2 ? R.string.DebugShareAlertDialogsModeNormal : R.string.DebugShareAlertDialogsModeMore : R.string.DebugShareAlertDialogsModeLess)), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda363
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$5();
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugShareAlertTopicsSlowMotion), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda364
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$6();
                }
            }));
        }
        if (this.currentUser == null) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletons)));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletonsLightOverlayAlpha), 0.0f, 255.0f, new AnimationProperties.FloatProperty("") { // from class: org.telegram.ui.ChatActivity.5
                @Override // android.util.Property
                public Object get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
                }

                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    int unused = ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA = (int) f;
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletonsSaturation), 1.0f, 10.0f, new AnimationProperties.FloatProperty("") { // from class: org.telegram.ui.ChatActivity.6
                @Override // android.util.Property
                public Object get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_SATURATION);
                }

                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    float unused = ChatActivity.SKELETON_SATURATION = f;
                    ChatActivity.this.skeletonColorMatrix.setSaturation(f);
                    ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                }
            }));
        }
        return arrayList;
    }

    public void onListItemAnimatorTick() {
        invalidateMessagesVisiblePart();
        if (this.scrimView != null) {
            this.fragmentView.invalidate();
        }
    }

    public void onPageDownClicked() {
        int i;
        boolean z;
        int i2;
        int i3;
        boolean z2;
        this.wasManualScroll = true;
        this.textSelectionHelper.cancelTextSelectionRunnable();
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$onPageDownClicked$88();
            }
        };
        int i4 = this.createUnreadMessageAfterId;
        if (i4 != 0) {
            i = this.returnToLoadIndex;
            z = true;
            i2 = 0;
            i3 = 0;
            z2 = false;
        } else {
            i4 = this.returnToMessageId;
            if (i4 <= 0) {
                scrollToLastMessage(false, true, runnable);
                if (this.pinnedMessageIds.isEmpty()) {
                    return;
                }
                this.forceScrollToFirst = true;
                this.forceNextPinnedMessageId = ((Integer) this.pinnedMessageIds.get(0)).intValue();
                return;
            }
            i = this.returnToLoadIndex;
            z = true;
            i2 = 0;
            i3 = 0;
            z2 = true;
        }
        scrollToMessageId(i4, i3, z2, i, z, i2, runnable);
    }

    /* JADX WARN: Removed duplicated region for block: B:110:0x01b8  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x01cb  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x020c  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x0217  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0225  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x0240  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x0266  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x029f  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0202 A[EDGE_INSN: B:178:0x0202->B:134:0x0202 ?: BREAK  , SYNTHETIC] */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onPause() {
        MessageObject messageObject;
        CharSequence charSequence;
        boolean z;
        long j;
        long j2;
        TLRPC.TL_forumTopic tL_forumTopic;
        int i;
        boolean z2;
        RecyclerListView.Holder holder;
        int i2;
        MessageObject messageObject2;
        int i3;
        int i4;
        View view;
        int i5;
        MessageObject messageObject3;
        BlurredFrameLayout blurredFrameLayout;
        super.onPause();
        int i6 = 0;
        scrolling = false;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
        getMessagesController().markDialogAsReadNow(this.dialog_id, this.threadMessageId);
        MediaController.getInstance().stopRaiseToEarSensors(this, true, true);
        this.paused = true;
        this.wasPaused = true;
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(0L, 0L);
        }
        Bulletin.removeDelegate(this);
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, false);
        TLRPC.Message message = null;
        if (this.ignoreAttachOnPause || this.chatActivityEnterView == null || (blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() == 0) {
            messageObject = null;
            charSequence = null;
            z = true;
        } else {
            this.chatActivityEnterView.onPause();
            messageObject = this.replyingMessageObject;
            charSequence = AndroidUtilities.getTrimmedString(this.chatActivityEnterView.getDraftMessage());
            z = this.chatActivityEnterView.isMessageWebPageSearchEnabled();
            this.chatActivityEnterView.setFieldFocused(false);
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            if (this.ignoreAttachOnPause) {
                this.ignoreAttachOnPause = false;
            } else {
                chatAttachAlert.onPause();
            }
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.onPause();
        }
        int i7 = this.chatMode;
        if (i7 == 0 || (i7 == 3 && getUserConfig().getClientUserId() == getSavedDialogId())) {
            if (this.ignoreDraft) {
                charSequence = null;
            }
            CharSequence[] charSequenceArr = {charSequence};
            MediaDataController mediaDataController = getMediaDataController();
            TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
            ArrayList<TLRPC.MessageEntity> entities = mediaDataController.getEntities(charSequenceArr, encryptedChat == null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101);
            if (this.chatMode == 3) {
                j2 = 0;
            } else {
                if (!ChatObject.isForum(this.currentChat) || this.isTopic || messageObject == null) {
                    j = this.threadMessageId;
                } else {
                    j = messageObject.replyToForumTopic != null ? tL_forumTopic.id : MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, ChatObject.isForum(this.currentChat));
                }
                j2 = j;
            }
            MediaDataController mediaDataController2 = getMediaDataController();
            long j3 = this.dialog_id;
            CharSequence charSequence2 = charSequenceArr[0];
            if (messageObject != null && !messageObject.isTopicMainMessage && messageObject.replyToForumTopic == null && !this.ignoreDraft) {
                message = messageObject.messageOwner;
            }
            TLRPC.Message message2 = message;
            ReplyQuote replyQuote = this.replyingQuote;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            mediaDataController2.saveDraft(j3, j2, charSequence2, entities, message2, replyQuote, chatActivityEnterView != null ? chatActivityEnterView.getEffectId() : 0L, !z, false);
            getMessagesController().lambda$sendTyping$164(0, this.dialog_id, this.threadMessageId);
        }
        int i8 = this.chatMode;
        if (i8 == 0 || i8 == 3) {
            if (!this.pausedOnLastMessage && !this.firstLoading && (!isThreadChat() || this.isTopic)) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                if (this.chatLayoutManager != null) {
                    int i9 = 0;
                    while (true) {
                        if (i9 >= this.chatListView.getChildCount()) {
                            z2 = false;
                            break;
                        } else if ((this.chatListView.getChildAt(i9) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i9)).getMessageObject().isSponsored()) {
                            z2 = true;
                            break;
                        } else {
                            i9++;
                        }
                    }
                    int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                    if (findFirstVisibleItemPosition != 0 && !z2 && (holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition)) != null) {
                        View view2 = holder.itemView;
                        if (view2 instanceof ChatMessageCell) {
                            messageObject2 = ((ChatMessageCell) view2).getMessageObject();
                        } else if (view2 instanceof ChatActionCell) {
                            messageObject2 = ((ChatActionCell) view2).getMessageObject();
                        } else {
                            i2 = 0;
                            if (i2 == 0) {
                                holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition + 1);
                            }
                            i3 = findFirstVisibleItemPosition - 1;
                            int i10 = 0;
                            boolean z3 = false;
                            while (true) {
                                i4 = this.chatAdapter.messagesStartRow;
                                if (i3 < i4) {
                                    break;
                                }
                                int i11 = i3 - i4;
                                if (i11 >= 0 && i11 < this.messages.size()) {
                                    MessageObject messageObject4 = (MessageObject) this.messages.get(i11);
                                    if (messageObject4.getId() != 0) {
                                        if ((!messageObject4.isOut() || messageObject4.messageOwner.from_scheduled) && messageObject4.isUnread()) {
                                            z3 = true;
                                        }
                                        if (i10 > 2) {
                                            break;
                                        }
                                        i10++;
                                    } else {
                                        continue;
                                    }
                                }
                                i3--;
                            }
                            if (holder != null && !z3) {
                                view = holder.itemView;
                                if (!(view instanceof ChatMessageCell)) {
                                    messageObject3 = ((ChatMessageCell) view).getMessageObject();
                                } else if (view instanceof ChatActionCell) {
                                    messageObject3 = ((ChatActionCell) view).getMessageObject();
                                } else {
                                    i5 = 0;
                                    if ((i5 > 0 && this.currentEncryptedChat == null) || (i5 < 0 && this.currentEncryptedChat != null)) {
                                        int bottom = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("save offset = " + bottom + " for mid " + i5);
                                        }
                                        i = bottom;
                                        i6 = i5;
                                        if (i6 != 0) {
                                            edit.putInt("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i6);
                                            edit.putInt("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i);
                                        } else {
                                            this.pausedOnLastMessage = true;
                                            edit.remove("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()));
                                            edit.remove("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()));
                                        }
                                        edit.commit();
                                    }
                                }
                                i5 = messageObject3.getId();
                                if (i5 > 0) {
                                    int bottom2 = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                    if (BuildVars.LOGS_ENABLED) {
                                    }
                                    i = bottom2;
                                    i6 = i5;
                                    if (i6 != 0) {
                                    }
                                    edit.commit();
                                }
                                int bottom22 = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                if (BuildVars.LOGS_ENABLED) {
                                }
                                i = bottom22;
                                i6 = i5;
                                if (i6 != 0) {
                                }
                                edit.commit();
                            }
                        }
                        i2 = messageObject2.getId();
                        if (i2 == 0) {
                        }
                        i3 = findFirstVisibleItemPosition - 1;
                        int i102 = 0;
                        boolean z32 = false;
                        while (true) {
                            i4 = this.chatAdapter.messagesStartRow;
                            if (i3 < i4) {
                            }
                            i3--;
                        }
                        if (holder != null) {
                            view = holder.itemView;
                            if (!(view instanceof ChatMessageCell)) {
                            }
                            i5 = messageObject3.getId();
                            if (i5 > 0) {
                            }
                            int bottom222 = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                            if (BuildVars.LOGS_ENABLED) {
                            }
                            i = bottom222;
                            i6 = i5;
                            if (i6 != 0) {
                            }
                            edit.commit();
                        }
                    }
                }
                i = 0;
                if (i6 != 0) {
                }
                edit.commit();
            }
            if (this.currentUser != null) {
                this.chatLeaveTime = System.currentTimeMillis();
                updateInformationForScreenshotDetector();
            }
            hideUndoViews();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.endAnimations();
        }
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = this.chatScrollHelper;
        if (recyclerAnimationScrollHelper != null) {
            recyclerAnimationScrollHelper.cancel();
        }
        if (AvatarPreviewer.hasVisibleInstance()) {
            AvatarPreviewer.getInstance().close();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRemoveFromParent() {
        this.removingFromParent = true;
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject == null || !playingMessageObject.isVideo()) {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        } else {
            MediaController.getInstance().cleanupPlayer(true, true);
        }
        StarReactionsOverlay starReactionsOverlay = this.starReactionsOverlay;
        if (starReactionsOverlay != null) {
            starReactionsOverlay.setMessageCell(null);
            AndroidUtilities.removeFromParent(this.starReactionsOverlay);
            this.starReactionsOverlay = null;
        }
        super.onRemoveFromParent();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRequestPermissionsResultFragment(int i, String[] strArr, int[] iArr) {
        ChatAttachAlert chatAttachAlert;
        ChatAttachAlert chatAttachAlert2;
        ChatAttachAlert chatAttachAlert3;
        boolean z;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        if (i == 4) {
            ChatAttachAlert chatAttachAlert4 = this.chatAttachAlert;
            if (chatAttachAlert4 != null) {
                chatAttachAlert4.getPhotoLayout().checkStorage();
            }
            ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
            if (chatThemeBottomSheet == null || (chatAttachAlert3 = chatThemeBottomSheet.chatAttachAlert) == null) {
                return;
            }
        } else if ((i == 5 || i == 30) && (chatAttachAlert = this.chatAttachAlert) != null) {
            chatAttachAlert.onRequestPermissionsResultFragment(i, strArr, iArr);
            return;
        } else {
            boolean z2 = true;
            if ((i != 17 && i != 18) || (chatAttachAlert2 = this.chatAttachAlert) == null) {
                if (i == 21) {
                    if (getParentActivity() == null || iArr == null || iArr.length == 0 || iArr[0] == 0) {
                        return;
                    }
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setTitle(LocaleController.getString(R.string.AppName));
                    builder.setMessage(LocaleController.getString(R.string.PermissionNoAudioVideoWithHint));
                    builder.setNegativeButton(LocaleController.getString(R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda27
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.lambda$onRequestPermissionsResultFragment$150(dialogInterface, i2);
                        }
                    });
                    builder.setPositiveButton(LocaleController.getString(R.string.OK), null);
                    builder.show();
                    return;
                } else if (i == 19 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                    processSelectedAttach(0);
                    return;
                } else if (i == 20 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                    processSelectedAttach(2);
                    return;
                } else if (((i == 101 || i == 102) && this.currentUser != null) || (i == 103 && this.currentChat != null)) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= iArr.length) {
                            z = true;
                            break;
                        } else if (iArr[i2] != 0) {
                            z = false;
                            break;
                        } else {
                            i2++;
                        }
                    }
                    if (iArr.length <= 0 || !z) {
                        VoIPHelper.permissionDenied(getParentActivity(), null, i);
                        return;
                    } else if (i == 103) {
                        VoIPHelper.startCall(this.currentChat, null, null, this.createGroupCall, getParentActivity(), this, getAccountInstance());
                        return;
                    } else {
                        TLRPC.User user = this.currentUser;
                        boolean z3 = i == 102;
                        TLRPC.UserFull userFull = this.userInfo;
                        VoIPHelper.startCall(user, z3, userFull != null && userFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                        return;
                    }
                } else {
                    return;
                }
            }
            chatAttachAlert2.getPhotoLayout().checkCamera((iArr.length <= 0 || iArr[0] != 0) ? false : false);
            chatAttachAlert3 = this.chatAttachAlert;
        }
        chatAttachAlert3.getPhotoLayout().checkStorage();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onResume() {
        ChatActivityEnterView chatActivityEnterView;
        MessageObject messageObject;
        boolean z;
        BackupImageView backupImageView;
        super.onResume();
        checkShowBlur(false);
        this.activityResumeTime = System.currentTimeMillis();
        if (this.openImport && getSendMessagesHelper().getImportingHistory(this.dialog_id) != null) {
            ImportingAlert importingAlert = new ImportingAlert(getParentActivity(), null, this, this.themeDelegate);
            importingAlert.setOnHideListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda54
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$onResume$211(dialogInterface);
                }
            });
            showDialog(importingAlert);
            this.openImport = false;
        }
        checkAdjustResize();
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.onResume();
        }
        checkChecksHint();
        Bulletin.Delegate delegate = new Bulletin.Delegate() { // from class: org.telegram.ui.ChatActivity.122
            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public boolean allowLayoutChanges() {
                return false;
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ boolean bottomOffsetAnimated() {
                return Bulletin.Delegate.-CC.$default$bottomOffsetAnimated(this);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ boolean clipWithGradient(int i) {
                return Bulletin.Delegate.-CC.$default$clipWithGradient(this, i);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public int getBottomOffset(int i) {
                int i2 = 0;
                if (i == 1) {
                    return 0;
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && chatActivityEnterView2.getVisibility() == 0) {
                    i2 = ((ChatActivity.this.contentView.getKeyboardHeight() >= AndroidUtilities.dp(20.0f) || !ChatActivity.this.chatActivityEnterView.isPopupShowing()) && !ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) ? ChatActivity.this.chatActivityEnterView.getHeight() : ChatActivity.this.chatActivityEnterView.getHeight() + ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                } else if (!ChatActivity.this.isInsideContainer) {
                    i2 = AndroidUtilities.dp(51.0f);
                }
                if (ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    i2 = (int) (i2 + (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding()));
                }
                return ((int) (i2 + ChatActivity.this.contentPanTranslation)) - AndroidUtilities.dp(1.5f);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public int getTopOffset(int i) {
                return Math.max(AndroidUtilities.statusBarHeight + ActionBar.getCurrentActionBarHeight(), ((BaseFragment) ChatActivity.this).actionBar != null ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() + ((BaseFragment) ChatActivity.this).actionBar.getTop() : 0) + Math.max(0, ChatActivity.this.contentPaddingTop);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onBottomOffsetChange(float f) {
                Bulletin.Delegate.-CC.$default$onBottomOffsetChange(this, f);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onHide(Bulletin bulletin) {
                Bulletin.Delegate.-CC.$default$onHide(this, bulletin);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onShow(Bulletin bulletin) {
                Bulletin.Delegate.-CC.$default$onShow(this, bulletin);
            }
        };
        this.bulletinDelegate = delegate;
        Bulletin.addDelegate(this, delegate);
        checkActionBarMenu(false);
        TLRPC.PhotoSize photoSize = this.replyImageLocation;
        if (photoSize != null && (backupImageView = this.replyImageView) != null) {
            backupImageView.setImage(ImageLocation.getForObject(photoSize, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
        }
        if (this.pinnedImageLocation != null && this.pinnedMessageImageView != null) {
            this.pinnedMessageImageView[0].setImage(ImageLocation.getForObject(this.pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, (MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)));
            this.pinnedMessageImageView[0].setHasBlur(this.pinnedImageHasBlur);
        }
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(this.dialog_id, getTopicId());
        }
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, true);
        if (this.scrollToTopOnResume) {
            if (!this.scrollToTopUnReadOnResume || (messageObject = this.scrollToMessage) == null) {
                moveScrollToLastMessage(false);
            } else if (this.chatListView != null) {
                int i = this.scrollToMessagePosition;
                if (i == -9000) {
                    i = getScrollOffsetForMessage(messageObject);
                } else if (i == -10000) {
                    i = -AndroidUtilities.dp(11.0f);
                } else {
                    z = true;
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                }
                z = false;
                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        applyChatLinkMessageMaybe();
        BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
        if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() != 0 && !this.actionBar.isSearchFieldVisible() && this.chatMode != 7 && !BaseFragment.hasSheets(this)) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda55
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onResume$212();
                }
            });
        }
        if (this.chatListView != null && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
        updateTitle(false);
        showGigagroupConvertAlert();
        if (this.pullingDownOffset != 0.0f) {
            this.pullingDownOffset = 0.0f;
            this.chatListView.invalidate();
        }
        this.flagSecure.attach();
        StarReactionsOverlay starReactionsOverlay = this.starReactionsOverlay;
        if (starReactionsOverlay != null) {
            starReactionsOverlay.bringToFront();
        }
    }

    protected void onSearchLoadingUpdate(boolean z) {
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationEnd(boolean z, boolean z2) {
        String string;
        int i;
        SharedPreferences.Editor putBoolean;
        MessageObject messageObject;
        INavigationLayout iNavigationLayout;
        Bulletin bulletin;
        super.onTransitionAnimationEnd(z, z2);
        if (z && z2 && this.showPinBulletin && (bulletin = this.pinBulletin) != null) {
            bulletin.show();
            this.showPinBulletin = false;
        }
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        this.fixedKeyboardHeight = -1;
        if (z) {
            checkShowBlur(false);
            this.openAnimationEnded = true;
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
            checkGroupCallJoin(this.lastCallCheckFromServer);
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                TLRPC.Chat chat = this.currentChat;
                boolean z3 = (chat == null || !ChatObject.isChannel(chat) || this.currentChat.megagroup) ? false : true;
                SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                String str = z3 ? "needShowRoundHintChannel2" : "needShowRoundHint2";
                int i2 = globalMainSettings.getInt(str, 0);
                if (i2 < 3 && Utilities.random.nextFloat() <= 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    globalMainSettings.edit().putInt(str, i2 + 1).commit();
                }
            }
            if (!z2 && (iNavigationLayout = this.parentLayout) != null && this.needRemovePreviousSameChatActivity) {
                int size = iNavigationLayout.getFragmentStack().size() - 1;
                int i3 = 0;
                while (true) {
                    if (i3 >= size) {
                        break;
                    }
                    BaseFragment baseFragment = (BaseFragment) this.parentLayout.getFragmentStack().get(i3);
                    if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                        ChatActivity chatActivity = (ChatActivity) baseFragment;
                        if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && chatActivity.getTopicId() == getTopicId() && chatActivity.getChatMode() == getChatMode() && chatActivity.threadMessageId == this.threadMessageId && chatActivity.isReport() == isReport()) {
                            baseFragment.removeSelfFromStack();
                            break;
                        }
                    }
                    i3++;
                }
            }
            showScheduledOrNoSoundHint();
            if (!z2 && this.firstOpen) {
                if (this.chatActivityEnterView != null && (((messageObject = this.threadMessageObject) != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat) && !this.isTopic) || this.chatMode == 6)) {
                    this.chatActivityEnterView.setFieldFocused();
                    this.chatActivityEnterView.openKeyboard();
                }
                if (getMessagesController().isPromoDialog(this.dialog_id, true)) {
                    int i4 = getMessagesController().promoDialogType;
                    SharedPreferences globalNotificationsSettings = MessagesController.getGlobalNotificationsSettings();
                    if (i4 == MessagesController.PROMO_TYPE_PROXY) {
                        if (AndroidUtilities.getPrefIntOrLong(globalNotificationsSettings, "proxychannel", 0L) != this.dialog_id) {
                            i = R.string.UseProxySponsorInfo;
                            string = LocaleController.getString(i);
                        }
                        string = null;
                    } else {
                        if (i4 == MessagesController.PROMO_TYPE_PSA) {
                            String str2 = getMessagesController().promoPsaType;
                            if (!globalNotificationsSettings.getBoolean(str2 + "_shown", false)) {
                                string = LocaleController.getString("PsaInfo_" + str2);
                                if (TextUtils.isEmpty(string)) {
                                    i = R.string.PsaInfoDefault;
                                    string = LocaleController.getString(i);
                                }
                            }
                        }
                        string = null;
                    }
                    if (!TextUtils.isEmpty(string)) {
                        checkTopUndoView();
                        if (this.topUndoView != null) {
                            if (i4 == MessagesController.PROMO_TYPE_PROXY) {
                                putBoolean = globalNotificationsSettings.edit().putLong("proxychannel", this.dialog_id);
                            } else {
                                if (i4 == MessagesController.PROMO_TYPE_PSA) {
                                    String str3 = getMessagesController().promoPsaType;
                                    putBoolean = globalNotificationsSettings.edit().putBoolean(str3 + "_shown", true);
                                }
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                                MessageObject.addLinks(false, spannableStringBuilder);
                                this.topUndoView.showWithAction(0L, 18, spannableStringBuilder, null, null);
                            }
                            putBoolean.commit();
                            SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(string);
                            MessageObject.addLinks(false, spannableStringBuilder2);
                            this.topUndoView.showWithAction(0L, 18, spannableStringBuilder2, null, null);
                        }
                    }
                }
                this.firstOpen = false;
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            if (chatActivityMemberRequestsDelegate != null && z2) {
                chatActivityMemberRequestsDelegate.onBackToScreen();
            }
            updateMessagesVisiblePart(false);
        } else {
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
        }
        this.contentView.invalidate();
        if (!TextUtils.isEmpty(this.attachMenuBotToOpen)) {
            openAttachBotLayout(this.attachMenuBotToOpen);
            this.attachMenuBotToOpen = null;
        }
        checkGroupEmojiPackHint();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationStart(boolean z, boolean z2) {
        int[] iArr;
        super.onTransitionAnimationStart(z, z2);
        this.startMs = System.currentTimeMillis();
        if (z) {
            if (!this.fragmentOpened) {
                this.fragmentOpened = true;
                updateMessagesVisiblePart(false);
            }
            iArr = this.transitionAnimationIndex == 0 ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.messagesDidLoad} : new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog};
            this.openAnimationEnded = false;
            if (!z2) {
                this.openAnimationStartTime = SystemClock.elapsedRealtime();
            }
        } else {
            iArr = UserObject.isUserSelf(this.currentUser) ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.mediaDidLoad} : null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.onBeginHide();
            }
        }
        checkShowBlur(true);
        this.transitionAnimationIndex = getNotificationCenter().setAnimationInProgress(this.transitionAnimationIndex, iArr);
    }

    public void openAttachBotLayout(long j, String str, boolean z) {
        openAttachMenu();
        createChatAttachView();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.showBotLayout(j, str, z, false);
        }
    }

    public void openAttachBotLayout(String str) {
        TLRPC.TL_contacts_resolveUsername tL_contacts_resolveUsername = new TLRPC.TL_contacts_resolveUsername();
        tL_contacts_resolveUsername.username = str;
        getConnectionsManager().sendRequest(tL_contacts_resolveUsername, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda191
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$199(tLObject, tL_error);
            }
        });
    }

    public void openAttachMenuForCreatingSticker() {
        ContentPreviewViewer.getInstance().setStickerSetForCustomSticker(null);
        if (getParentActivity() == null) {
            return;
        }
        createChatAttachView();
        this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
        int i = Build.VERSION.SDK_INT;
        if (i == 21 || i == 22) {
            this.chatActivityEnterView.closeKeyboard();
        }
        this.chatAttachAlert.setMaxSelectedPhotos(1, false);
        this.chatAttachAlert.setOpenWithFrontFaceCamera(true);
        this.chatAttachAlert.enableStickerMode(null);
        this.chatAttachAlert.init();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        chatAttachAlert.parentThemeDelegate = this.themeDelegate;
        if (this.visibleDialog != null) {
            chatAttachAlert.show();
        } else {
            showDialog(chatAttachAlert);
        }
    }

    /* renamed from: openHashtagSearch */
    public void lambda$openHashtagSearch$304(final String str) {
        boolean z;
        ActionBarMenuItem actionBarMenuItem;
        if (str.isEmpty()) {
            return;
        }
        if (str.startsWith("#") || str.startsWith("$")) {
            HintView2 hintView2 = this.savedMessagesHint;
            if (hintView2 == null || !hintView2.shown()) {
                z = false;
            } else {
                this.savedMessagesHint.hide();
                z = true;
            }
            HintView2 hintView22 = this.savedMessagesSearchHint;
            if (hintView22 != null && hintView22.shown()) {
                this.savedMessagesSearchHint.hide();
                z = true;
            }
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda310
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$openHashtagSearch$304(str);
                    }
                }, 200L);
                return;
            }
            this.searchingHashtag = str;
            this.searchingQuery = str;
            checkHashtagStories(true);
            if (!this.actionBar.isSearchFieldVisible()) {
                AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
                ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
                if (actionBarMenuItem2 != null) {
                    actionBarMenuItem2.setVisibility(8);
                }
                ActionBarMenu.LazyItem lazyItem = this.attachItem;
                if (lazyItem != null) {
                    lazyItem.setVisibility(8);
                }
                ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
                if (lazyItem2 != null) {
                    lazyItem2.setVisibility(8);
                }
                if ((this.threadMessageId == 0 || this.chatMode == 3) && (actionBarMenuItem = this.searchItem) != null) {
                    actionBarMenuItem.setVisibility(0);
                }
                ActionBarMenuItem actionBarMenuItem3 = this.searchIconItem;
                if (actionBarMenuItem3 != null && this.showSearchAsIcon) {
                    actionBarMenuItem3.setVisibility(8);
                }
                ActionBarMenu.LazyItem lazyItem3 = this.audioCallIconItem;
                if (lazyItem3 != null && this.showAudioCallAsIcon) {
                    lazyItem3.setVisibility(8);
                }
                this.searchItemVisible = true;
                updateSearchButtons(0, 0, -1);
                updateBottomOverlay();
            }
            SearchTagsList searchTagsList = this.actionBarSearchTags;
            if (searchTagsList != null && searchTagsList.shown()) {
                this.actionBarSearchTags.show(false);
            }
            ImageView imageView = this.searchUserButton;
            if (imageView != null) {
                imageView.setVisibility(8);
            }
            if (ChatObject.isChannelAndNotMegaGroup(this.currentChat) && ChatObject.isPublic(this.currentChat) && this.searchingHashtag != null) {
                this.defaultSearchPage = 2;
            } else {
                this.defaultSearchPage = 0;
            }
            this.openSearchKeyboard = false;
            ActionBarMenuItem actionBarMenuItem4 = this.searchItem;
            if (actionBarMenuItem4 != null) {
                this.preventReopenSearchWithText = true;
                actionBarMenuItem4.openSearch(false);
                this.preventReopenSearchWithText = false;
            }
            if (this.searchItem != null) {
                SpannableString spannableString = str.startsWith("$") ? new SpannableString("$") : new SpannableString("#");
                spannableString.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_windowBackgroundWhiteGrayText)), 0, 1, 33);
                this.searchItem.setSearchFieldCaption(spannableString);
                this.searchItem.setSearchFieldText(str.substring(1), false);
                this.searchItem.setSearchFieldHint(LocaleController.getString(R.string.SearchHashtagsHint));
            }
            getMediaDataController().searchMessagesInChat(this.searchingQuery, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, false, this.searchingUserMessages, this.searchingChatMessages, false, this.searchingReaction);
            updatePinnedMessageView(true);
            this.hashtagSearchEmptyView.showProgress(true);
            showMessagesSearchListView(true);
            ChatSearchTabs chatSearchTabs = this.hashtagSearchTabs;
            if (chatSearchTabs != null) {
                chatSearchTabs.show(true);
                this.messagesSearchListContainer.setPadding(0, this.hashtagSearchTabs.getLayoutParams().height, 0, 0);
                updateSearchListEmptyView();
            }
            HashtagSearchController.getInstance(this.currentAccount).clearSearchResults();
            HashtagSearchController.getInstance(this.currentAccount).putToHistory(this.searchingHashtag);
            this.hashtagHistoryView.update();
            View currentView = this.searchViewPager.getCurrentView();
            HashtagSearchController.getInstance(this.currentAccount).clearSearchResults();
            if (currentView instanceof ChatActivityContainer) {
                ((ChatActivityContainer) currentView).chatActivity.updateSearchingHashtag(this.searchingHashtag);
            }
        }
    }

    void openPhotoViewerForMessage(ChatMessageCell chatMessageCell, MessageObject messageObject) {
        ChatMessageCell chatMessageCell2;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        if (chatMessageCell == null) {
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getMessageObject().equals(messageObject)) {
                        break;
                    }
                }
            }
        }
        chatMessageCell2 = chatMessageCell;
        if (messageObject.isVideo()) {
            sendSecretMessageRead(messageObject, true);
        }
        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (chatMessageCell2 != null && playingMessageObject != null && playingMessageObject.isVideo()) {
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            if (playingMessageObject.equals(messageObject) && (animation = chatMessageCell2.getPhotoImage().getAnimation()) != null && this.videoTextureView != null && this.videoPlayerContainer.getTag() != null && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                try {
                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                    bitmap.recycle();
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }
            MediaController.getInstance().cleanupPlayer(true, true, false, playingMessageObject.equals(messageObject));
        }
        if (this.chatMode == 1 && (messageObject.isVideo() || messageObject.type == 1)) {
            PhotoViewer.getInstance().setParentChatActivity(this);
            ArrayList arrayList = new ArrayList();
            int size = this.messages.size();
            for (int i2 = 0; i2 < size; i2++) {
                MessageObject messageObject2 = (MessageObject) this.messages.get(i2);
                if (messageObject2.isVideo() || messageObject2.type == 1) {
                    arrayList.add(0, messageObject2);
                }
            }
            PhotoViewer.getInstance().openPhoto(arrayList, arrayList.indexOf(messageObject), this.dialog_id, 0L, getTopicId(), this.photoViewerProvider);
        } else {
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i3 = messageObject.type;
            photoViewer.openPhoto(messageObject, this, i3 != 0 ? this.dialog_id : 0L, i3 != 0 ? this.mergeDialogId : 0L, i3 != 0 ? getTopicId() : 0L, this.photoViewerProvider);
        }
        hideHints(false);
        MediaController.getInstance().resetGoingToShowMessageObject();
    }

    public boolean openPhotosEditor(ArrayList arrayList, CharSequence charSequence) {
        String str;
        final ArrayList arrayList2 = new ArrayList();
        int i = 0;
        while (true) {
            String str2 = null;
            if (i >= arrayList.size()) {
                break;
            }
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo = (SendMessagesHelper.SendingMediaInfo) arrayList.get(i);
            String str3 = sendingMediaInfo.path;
            if (str3 != null) {
                str = str3;
            } else {
                if (sendingMediaInfo.uri != null) {
                    try {
                        File generatePicturePath = AndroidUtilities.generatePicturePath(isSecretChat(), "");
                        InputStream openInputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(sendingMediaInfo.uri);
                        FileOutputStream fileOutputStream = new FileOutputStream(generatePicturePath);
                        byte[] bArr = new byte[LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM];
                        while (true) {
                            int read = openInputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                            fileOutputStream.flush();
                        }
                        openInputStream.close();
                        fileOutputStream.close();
                        str2 = generatePicturePath.getAbsolutePath();
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                str = str2;
            }
            if (str != null) {
                Pair<Integer, Integer> imageOrientation = AndroidUtilities.getImageOrientation(str);
                MediaController.PhotoEntry orientation = new MediaController.PhotoEntry(0, 0, 0L, str, ((Integer) imageOrientation.first).intValue(), sendingMediaInfo.isVideo, 0, 0, 0L).setOrientation(imageOrientation);
                if (i == arrayList.size() - 1 && charSequence != null) {
                    orientation.caption = charSequence;
                }
                arrayList2.add(orientation);
            }
            i++;
        }
        if (arrayList2.isEmpty()) {
            return false;
        }
        if (getParentActivity() != null) {
            final boolean[] zArr = new boolean[arrayList2.size()];
            Arrays.fill(zArr, true);
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            PhotoViewer.getInstance().openPhotoForSelect(new ArrayList(arrayList2), arrayList2.size() - 1, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.104
                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i2) {
                    return null;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean isPhotoChecked(int i2) {
                    return zArr[i2];
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i2, VideoEditedInfo videoEditedInfo, boolean z, int i3, boolean z2) {
                    for (int size = arrayList2.size() - 1; size >= 0; size--) {
                        if (!zArr[size]) {
                            arrayList2.remove(size);
                        }
                    }
                    ChatActivity.this.sendPhotosGroup(arrayList2, z, i3, z2);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public int setPhotoChecked(int i2, VideoEditedInfo videoEditedInfo) {
                    return i2;
                }
            }, this);
        } else {
            fillEditingMediaWithCaption(charSequence, null);
            sendPhotosGroup(arrayList2, false, 0, false);
            afterMessageSend();
        }
        return true;
    }

    public void openPollCreate(Boolean bool) {
        PollCreateActivity pollCreateActivity = new PollCreateActivity(this, bool);
        pollCreateActivity.setDelegate(new PollCreateActivity.PollCreateActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda316
            @Override // org.telegram.ui.PollCreateActivity.PollCreateActivityDelegate
            public final void sendPoll(TLRPC.TL_messageMediaPoll tL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
                ChatActivity.this.lambda$openPollCreate$112(tL_messageMediaPoll, hashMap, z, i);
            }
        });
        presentFragment(pollCreateActivity);
    }

    /* renamed from: openSearchWithText */
    public void lambda$openSearchWithText$303(final String str) {
        boolean z;
        ActionBarMenuItem actionBarMenuItem;
        HintView2 hintView2 = this.savedMessagesHint;
        if (hintView2 == null || !hintView2.shown()) {
            z = false;
        } else {
            this.savedMessagesHint.hide();
            z = true;
        }
        HintView2 hintView22 = this.savedMessagesSearchHint;
        if (hintView22 != null && hintView22.shown()) {
            this.savedMessagesSearchHint.hide();
            z = true;
        }
        if (z) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda270
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$openSearchWithText$303(str);
                }
            }, 200L);
            return;
        }
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            if ((this.threadMessageId == 0 || this.chatMode == 3) && (actionBarMenuItem = this.searchItem) != null) {
                actionBarMenuItem.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.searchIconItem;
            if (actionBarMenuItem3 != null && this.showSearchAsIcon) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem3 = this.audioCallIconItem;
            if (lazyItem3 != null && this.showAudioCallAsIcon) {
                lazyItem3.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if ((this.threadMessageId == 0 || this.isTopic || this.chatMode == 3) && !UserObject.isReplyUser(this.currentUser)) {
            boolean z2 = str == null;
            this.openSearchKeyboard = z2;
            ActionBarMenuItem actionBarMenuItem4 = this.searchItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.openSearch(z2);
            }
        }
        ActionBarMenuItem actionBarMenuItem5 = this.searchItem;
        if (actionBarMenuItem5 != null) {
            actionBarMenuItem5.setSearchFieldText(str, false);
        }
        MediaDataController mediaDataController = getMediaDataController();
        String str2 = str == null ? "" : str;
        this.searchingQuery = str2;
        mediaDataController.searchMessagesInChat(str2, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, false, this.searchingUserMessages, this.searchingChatMessages, !TextUtils.isEmpty(str), this.searchingReaction);
        updatePinnedMessageView(true);
    }

    public void openVCard(TLRPC.User user, String str, String str2, String str3, String str4) {
        File file;
        if (user != null) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", user.id);
            bundle.putBoolean("show_add_to_contacts", true);
            bundle.putString("vcard", str2);
            bundle.putString("vcard_phone", str);
            bundle.putString("vcard_first_name", str3);
            bundle.putString("vcard_last_name", str4);
            presentFragment(new ProfileActivity(bundle));
            return;
        }
        try {
            if (TextUtils.isEmpty(str2)) {
                file = null;
            } else {
                File sharingDirectory = AndroidUtilities.getSharingDirectory();
                sharingDirectory.mkdirs();
                File file2 = new File(sharingDirectory, "vcard.vcf");
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file2));
                bufferedWriter.write(str2);
                bufferedWriter.close();
                file = file2;
            }
            showDialog(new PhonebookShareAlert(this, null, user, null, file, PhoneFormat.stripExceptNumbers(str), str3, str4, this.themeDelegate));
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void openVideoEditor(String str, String str2) {
        if (getParentActivity() == null) {
            fillEditingMediaWithCaption(str2, null);
            SendMessagesHelper.prepareSendingVideo(getAccountInstance(), str, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, null, 0, this.editingMessageObject, true, 0, false, false, null, this.quickReplyShortcut, getQuickReplyId(), 0L);
            afterMessageSend();
            return;
        }
        final Bitmap createVideoThumbnail = SendMessagesHelper.createVideoThumbnail(str, 1);
        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
        final ArrayList arrayList = new ArrayList();
        MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, str, 0, true, 0, 0, 0L);
        photoEntry.caption = str2;
        arrayList.add(photoEntry);
        PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.103
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canCaptureMorePhotos() {
                return false;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canScrollAway() {
                return false;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i) {
                return new ImageReceiver.BitmapHolder(createVideoThumbnail, (String) null, 0);
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                ChatActivity.this.sendMedia((MediaController.PhotoEntry) arrayList.get(0), videoEditedInfo, z, i2, z2);
            }
        }, this);
    }

    public void openedInstantly() {
        this.fragmentOpened = true;
        this.fragmentBeginToShow = true;
        this.fragmentTransition = null;
        this.contentView.invalidate();
        this.contentView.setSkipBackgroundDrawing(false);
        this.toPullingDownTransition = false;
        this.fragmentView.setAlpha(1.0f);
        this.avatarContainer.setTranslationY(0.0f);
        this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
        this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
        this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public boolean openedWithLivestream() {
        return this.livestream;
    }

    public void performHistoryClear(final boolean z, boolean z2) {
        this.clearingHistory = true;
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda326
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$107(z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda327
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$108();
            }
        });
        this.chatAdapter.notifyDataSetChanged();
    }

    public boolean playFirstUnreadVoiceMessage() {
        int checkSelfPermission;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordingAudioVideo()) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject = (MessageObject) this.messages.get(size);
                if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                    MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                    return true;
                }
            }
            if (Build.VERSION.SDK_INT < 23 || getParentActivity() == null) {
                return false;
            }
            checkSelfPermission = getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO");
            if (checkSelfPermission != 0) {
                getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
                return true;
            }
            return false;
        }
        return true;
    }

    public void processInlineBotContextPM(TLRPC.TL_inlineBotSwitchPM tL_inlineBotSwitchPM) {
        MentionsContainerView mentionsContainerView;
        TLRPC.User contextBotUser;
        if (tL_inlineBotSwitchPM == null || (mentionsContainerView = this.mentionContainer) == null || (contextBotUser = mentionsContainerView.getAdapter().getContextBotUser()) == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        long j = this.dialog_id;
        if (j == contextBotUser.id) {
            this.inlineReturn = j;
            getMessagesController().sendBotStart(this.currentUser, tL_inlineBotSwitchPM.start_param);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", contextBotUser.id);
        bundle.putString("inline_query", tL_inlineBotSwitchPM.start_param);
        bundle.putLong("inline_return", this.dialog_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    public void processInlineBotWebView(final TLRPC.TL_inlineBotWebView tL_inlineBotWebView) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda330
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processInlineBotWebView$104(tL_inlineBotWebView);
            }
        };
        if (this.approved) {
            runnable.run();
        } else {
            WebAppDisclaimerAlert.show(getContext(), new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda331
                @Override // com.google.android.exoplayer2.util.Consumer
                public final void accept(Object obj) {
                    ChatActivity.this.lambda$processInlineBotWebView$105(runnable, (Boolean) obj);
                }
            }, null, null);
        }
    }

    public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline tL_keyboardButtonSwitchInline) {
        long j;
        String str;
        if (this.inlineReturn == 0 || tL_keyboardButtonSwitchInline.same_peer || this.parentLayout == null) {
            return false;
        }
        String str2 = "@" + this.currentUser.username + " " + tL_keyboardButtonSwitchInline.query;
        if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(str2);
        } else {
            getMediaDataController().saveDraft(this.inlineReturn, 0, str2, null, null, false, 0L);
            if (this.parentLayout.getFragmentStack().size() > 1) {
                BaseFragment baseFragment = (BaseFragment) this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 2);
                if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.inlineReturn) {
                    lambda$onBackPressed$300();
                } else {
                    Bundle bundle = new Bundle();
                    if (DialogObject.isEncryptedDialog(this.inlineReturn)) {
                        bundle.putInt("enc_id", DialogObject.getEncryptedChatId(this.inlineReturn));
                    } else {
                        if (DialogObject.isUserDialog(this.inlineReturn)) {
                            j = this.inlineReturn;
                            str = "user_id";
                        } else {
                            j = -this.inlineReturn;
                            str = "chat_id";
                        }
                        bundle.putLong(str, j);
                    }
                    addToPulledDialogsMyself();
                    presentFragment(new ChatActivity(bundle), true);
                }
            }
        }
        return true;
    }

    public void removeFromSponsored(MessageObject messageObject) {
        MessagesController.SponsoredMessagesInfo sponsoredMessages = getMessagesController().getSponsoredMessages(this.dialog_id);
        if (sponsoredMessages != null) {
            sponsoredMessages.messages.remove(messageObject);
        }
    }

    public void removeKeyboardPositionBeforeTransition() {
        if (this.fixedKeyboardHeight > 0) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda311
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$removeKeyboardPositionBeforeTransition$187();
                }
            };
            this.cancelFixedPositionRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, 200L);
        }
    }

    public void removeMessageWithThanos(MessageObject messageObject) {
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf == -1) {
            return;
        }
        this.messages.remove(indexOf);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null || chatActivityAdapter.isFiltered) {
            return;
        }
        chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + indexOf, true);
    }

    public void restartSticker(ChatMessageCell chatMessageCell) {
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC.Document document = messageObject.getDocument();
        if (!messageObject.isAnimatedAnimatedEmoji()) {
            setupStickerVibrationAndSound(chatMessageCell);
        }
        if (!messageObject.isAnimatedEmoji()) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation != null) {
            lottieAnimation.restart();
        }
    }

    public void restoreSelfArgs(Bundle bundle) {
        this.currentPicturePath = bundle.getString("path");
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveKeyboardPositionBeforeTransition() {
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        this.fixedKeyboardHeight = (chatActivityEnterView == null || this.contentView == null || chatActivityEnterView.getAdjustPanLayoutHelper() == null || this.chatActivityEnterView.getAdjustPanLayoutHelper().animationInProgress()) ? -1 : this.contentView.getKeyboardHeight();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveSelfArgs(Bundle bundle) {
        String str = this.currentPicturePath;
        if (str != null) {
            bundle.putString("path", str);
        }
    }

    public void scrollToLastMessage(boolean z, boolean z2) {
        scrollToLastMessage(z, z2, null);
    }

    public void scrollToLastMessage(boolean z, final boolean z2, Runnable runnable) {
        ArrayList arrayList;
        int i;
        if (this.chatListView.isFastScrollAnimationRunning()) {
            return;
        }
        final int i2 = 0;
        this.forceNextPinnedMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceScrollToFirst = false;
        this.chatScrollHelper.setScrollDirection(0);
        if (!this.forwardEndReached[0] || this.first_unread_id != 0 || this.startLoadFromMessageId != 0) {
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            if (runnable != null) {
                runnable.run();
            } else {
                resetProgressDialogLoading();
                AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
                this.progressDialog = alertDialog2;
                alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
                this.progressDialog.showDelayed(1000L);
            }
            this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
            this.fakePostponedScroll = false;
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            this.waitingForLoad.clear();
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda197
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$scrollToLastMessage$134();
                }
            }, 0L);
            return;
        }
        setPagedownLoading(false, true);
        if (this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
            this.canShowPagedownButton = false;
            updatePagedownButtonVisibility(true);
            removeSelectedMessageHighlight();
            updateVisibleRows();
            return;
        }
        this.chatAdapter.updateRowsSafe();
        this.chatScrollHelperCallback.scrollTo = null;
        if (z) {
            while (i2 < this.messages.size() && ((MessageObject) this.messages.get(i2)).isSponsored()) {
                i2++;
            }
        }
        if (z2 && (arrayList = this.messages) != null && arrayList.size() > 0 && this.messages.get(i2) != null) {
            long groupId = ((MessageObject) this.messages.get(i2)).getGroupId();
            while (groupId != 0 && (i = i2 + 1) < this.messages.size() && groupId == ((MessageObject) this.messages.get(i)).getGroupId()) {
                i2 = i;
            }
        }
        ArrayList arrayList2 = this.messages;
        if (arrayList2 != null && arrayList2.size() > 0) {
            i2 = Math.min(i2, this.messages.size() - 1);
        }
        new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda196
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$scrollToLastMessage$132(i2, z2);
            }
        }.run();
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public void scrollToMessageId(int i, int i2, boolean z, int i3, boolean z2, int i4) {
        scrollToMessageId(i, i2, z, i3, z2, i4, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:56:0x00d0, code lost:
        if (isSecretChat() != false) goto L26;
     */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01cc A[LOOP:0: B:80:0x013d->B:105:0x01cc, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0219  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x02ee  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x018d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0059  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x00e1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void scrollToMessageId(int i, int i2, boolean z, int i3, boolean z2, int i4, Runnable runnable) {
        Object obj;
        MessageObject messageObject;
        int i5;
        int i6;
        int i7;
        boolean z3;
        int i8;
        MessageObject messageObject2;
        MessageObject findPrimaryMessageObject;
        int i9 = i;
        if (this.waitingForGetDifference) {
            return;
        }
        if (i9 == 0 || NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress() || getParentActivity() == null) {
            if (NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress()) {
                this.nextScrollToMessageId = i9;
                this.nextScrollFromMessageId = i2;
                this.nextScrollSelect = z;
                this.nextScrollLoadIndex = i3;
                this.nextScrollForce = z2;
                this.nextScrollForcePinnedMessageId = i4;
                NotificationCenter.getInstance(this.currentAccount).doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$scrollToMessageId$140();
                    }
                });
                return;
            }
            return;
        }
        this.forceNextPinnedMessageId = Math.abs(i4);
        this.forceScrollToFirst = i4 > 0;
        this.wasManualScroll = true;
        if (this.chatAdapter.isFiltered) {
            LongSparseArray longSparseArray = this.filteredMessagesDict;
            if (longSparseArray == null) {
                messageObject = null;
                if (i2 == 0) {
                    i7 = i2 < i9 ? 1 : 0;
                    if (isSecretChat()) {
                        i6 = 0;
                        i7 ^= 1;
                        i5 = i7 ^ 1;
                    } else {
                        i6 = 0;
                        i5 = i7 ^ 1;
                    }
                } else {
                    if (this.chatAdapter.getMessages().size() > 0) {
                        if (isThreadChat() && i9 == this.threadMessageId) {
                            i5 = 1;
                            i6 = 0;
                        } else {
                            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
                            for (int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition(); findFirstVisibleItemPosition <= findLastVisibleItemPosition; findFirstVisibleItemPosition++) {
                                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                                if (findFirstVisibleItemPosition >= chatActivityAdapter.messagesStartRow && findFirstVisibleItemPosition < chatActivityAdapter.messagesEndRow) {
                                    MessageObject messageObject3 = (MessageObject) this.chatAdapter.getMessages().get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow);
                                    if (messageObject3.getId() != 0 && !messageObject3.isSponsored()) {
                                        i6 = findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow;
                                        i7 = messageObject3.getId() < i9 ? 1 : 0;
                                    }
                                }
                            }
                        }
                    }
                    i5 = -1;
                    i6 = 0;
                }
                this.chatScrollHelper.setScrollDirection(i5);
                if (messageObject != null) {
                    MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId());
                    if (messageObject.getGroupId() != 0 && groupedMessages != null && (findPrimaryMessageObject = groupedMessages.findPrimaryMessageObject()) != null) {
                        messageObject = findPrimaryMessageObject;
                    }
                    int indexOf = this.chatAdapter.getMessages().indexOf(messageObject);
                    if (indexOf != -1) {
                        if (i6 > 0) {
                            i5 = i6 > indexOf ? 0 : 1;
                            this.chatScrollHelper.setScrollDirection(i5);
                        }
                        removeSelectedMessageHighlight();
                        if (z) {
                            this.highlightMessageId = i9;
                        }
                        this.chatAdapter.updateRowsSafe();
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        int indexOf2 = chatActivityAdapter2.messagesStartRow + chatActivityAdapter2.getMessages().indexOf(messageObject);
                        updateVisibleRows();
                        int childCount = this.chatListView.getChildCount();
                        int i10 = 0;
                        boolean z4 = false;
                        int i11 = 0;
                        while (true) {
                            if (i10 >= childCount) {
                                break;
                            }
                            View childAt = this.chatListView.getChildAt(i10);
                            if (childAt instanceof ChatMessageCell) {
                                MessageObject messageObject4 = ((ChatMessageCell) childAt).getMessageObject();
                                if (messageObject4 != null) {
                                    i8 = childCount;
                                    if (messageObject4.getId() == messageObject.getId()) {
                                        childAt.sendAccessibilityEvent(8);
                                        i11 = scrollOffsetForQuote(messageObject4);
                                        z4 = true;
                                    }
                                } else {
                                    i8 = childCount;
                                }
                                if (z4) {
                                    i10++;
                                    childCount = i8;
                                } else {
                                    int top = (int) ((childAt.getTop() - this.chatListViewPaddingTop) - (getScrollOffsetForMessage(childAt.getHeight()) - i11));
                                    int computeVerticalScrollRange = (this.chatListView.computeVerticalScrollRange() - this.chatListView.computeVerticalScrollOffset()) - this.chatListView.computeVerticalScrollExtent();
                                    if (computeVerticalScrollRange < 0) {
                                        computeVerticalScrollRange = 0;
                                    }
                                    if (top > computeVerticalScrollRange) {
                                        top = computeVerticalScrollRange;
                                    }
                                    if (top != 0) {
                                        this.scrollByTouch = false;
                                        this.chatListView.smoothScrollBy(0, top);
                                        this.chatListView.setOverScrollMode(2);
                                    }
                                }
                            } else {
                                i8 = childCount;
                                if ((childAt instanceof ChatActionCell) && (messageObject2 = ((ChatActionCell) childAt).getMessageObject()) != null && messageObject2.getId() == messageObject.getId()) {
                                    childAt.sendAccessibilityEvent(8);
                                    z4 = true;
                                }
                                if (z4) {
                                }
                            }
                        }
                        if (!z4) {
                            int scrollOffsetForMessage = getScrollOffsetForMessage(messageObject);
                            this.chatScrollHelperCallback.scrollTo = messageObject;
                            this.chatScrollHelperCallback.lastBottom = false;
                            this.chatScrollHelperCallback.lastItemOffset = scrollOffsetForMessage;
                            this.chatScrollHelperCallback.lastPadding = (int) this.chatListViewPaddingTop;
                            this.chatScrollHelper.setScrollDirection(i5);
                            this.chatScrollHelper.scrollToPosition(this.chatScrollHelperCallback.position = indexOf2, this.chatScrollHelperCallback.offset = scrollOffsetForMessage, this.chatScrollHelperCallback.bottom = false, true);
                            this.canShowPagedownButton = true;
                            updatePagedownButtonVisibility(true);
                        }
                        z3 = false;
                        if (z3) {
                            if (isThreadChat() && i9 == this.threadMessageId) {
                                this.scrollToThreadMessage = true;
                                i9 = 1;
                            }
                            AlertDialog alertDialog = this.progressDialog;
                            if (alertDialog != null) {
                                alertDialog.dismiss();
                            }
                            showPinnedProgress(this.forceNextPinnedMessageId != 0);
                            if (runnable != null) {
                                runnable.run();
                            } else if (this.forceNextPinnedMessageId == 0) {
                                AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
                                this.progressDialog = alertDialog2;
                                alertDialog2.setOnShowListener(new DialogInterface.OnShowListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda46
                                    @Override // android.content.DialogInterface.OnShowListener
                                    public final void onShow(DialogInterface dialogInterface) {
                                        ChatActivity.this.lambda$scrollToMessageId$141(dialogInterface);
                                    }
                                });
                                this.progressDialog.setOnCancelListener(this.postponedScrollCancelListener);
                                this.progressDialog.showDelayed(400L);
                            }
                            this.waitingForLoad.clear();
                            removeSelectedMessageHighlight();
                            this.scrollToMessagePosition = -10000;
                            this.startLoadFromMessageId = i9;
                            this.showScrollToMessageError = !z2;
                            if (i9 == this.createUnreadMessageAfterId) {
                                this.createUnreadMessageAfterIdLoading = true;
                            }
                            this.postponedScrollIsCanceled = false;
                            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                            this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
                            this.fakePostponedScroll = false;
                            this.postponedScrollMinMessageId = this.minMessageId[0];
                            this.postponedScrollMessageId = i9;
                            MessagesController messagesController = getMessagesController();
                            long j = i3 == 0 ? this.dialog_id : this.mergeDialogId;
                            int i12 = ((!isThreadChat() || this.isTopic) && !AndroidUtilities.isTablet()) ? 20 : 30;
                            int i13 = this.startLoadFromMessageId;
                            int i14 = this.classGuid;
                            int i15 = this.chatMode;
                            long j2 = this.threadMessageId;
                            int i16 = this.replyMaxReadId;
                            int i17 = this.lastLoadIndex;
                            this.lastLoadIndex = i17 + 1;
                            messagesController.loadMessages(j, 0L, false, i12, i13, 0, true, 0, i14, 3, 0, i15, j2, i16, i17, this.isTopic);
                        } else {
                            View childAt2 = this.chatListView.getChildAt(0);
                            if (childAt2 != null && childAt2.getTop() <= 0) {
                                showFloatingDateView(false);
                            }
                        }
                        this.returnToMessageId = i2;
                        this.returnToLoadIndex = i3;
                        this.needSelectFromMessageId = z;
                    }
                }
                z3 = true;
                if (z3) {
                }
                this.returnToMessageId = i2;
                this.returnToLoadIndex = i3;
                this.needSelectFromMessageId = z;
            }
            obj = longSparseArray.get(i9);
        } else {
            obj = this.messagesDict[i3].get(i9);
        }
        messageObject = (MessageObject) obj;
        if (i2 == 0) {
        }
        this.chatScrollHelper.setScrollDirection(i5);
        if (messageObject != null) {
        }
        z3 = true;
        if (z3) {
        }
        this.returnToMessageId = i2;
        this.returnToLoadIndex = i3;
        this.needSelectFromMessageId = z;
    }

    /* JADX WARN: Removed duplicated region for block: B:53:0x00b0 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:81:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void searchLinks(final CharSequence charSequence, final boolean z) {
        TLRPC.WebPage webPage;
        boolean z2;
        String str;
        char c;
        MessagePreviewParams messagePreviewParams;
        if (this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview != 0) {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject == null || (messageObject.isWebpage() && !(this.editingMessageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPagePending))) {
                TLRPC.Chat chat = this.currentChat;
                if (chat != null && !ChatObject.canSendEmbed(chat)) {
                    if (this.foundWebPage != null) {
                        this.foundWebPage = null;
                        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.setWebPage(null, true);
                        }
                        fallbackFieldPanel();
                        editResetMediaManual();
                        return;
                    }
                    return;
                }
                checkEditLinkRemoved(charSequence);
                if (z && (webPage = this.foundWebPage) != null) {
                    String str2 = webPage.url;
                    if (str2 != null) {
                        int indexOf = TextUtils.indexOf(charSequence, str2);
                        boolean z3 = false;
                        TLRPC.WebPage webPage2 = this.foundWebPage;
                        if (indexOf == -1) {
                            String str3 = webPage2.display_url;
                            if (str3 != null) {
                                indexOf = TextUtils.indexOf(charSequence, str3);
                                z2 = indexOf != -1 && this.foundWebPage.display_url.length() + indexOf == charSequence.length();
                                if (indexOf != -1 && !z2) {
                                    str = this.foundWebPage.display_url;
                                    boolean z4 = z2;
                                    c = charSequence.charAt(str.length() + indexOf);
                                    z3 = z4;
                                    if (indexOf != -1 && (z3 || c == ' ' || c == ',' || c == '.' || c == '!' || c == '/')) {
                                        messagePreviewParams = this.messagePreviewParams;
                                        if (messagePreviewParams == null) {
                                            int i = this.currentAccount;
                                            TLRPC.WebPage webPage3 = this.foundWebPage;
                                            CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                                            MessageObject messageObject2 = this.replyingMessageObject;
                                            messagePreviewParams.updateLink(i, webPage3, fieldText, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
                                            return;
                                        }
                                        return;
                                    }
                                }
                                z3 = z2;
                            }
                            c = 0;
                            if (indexOf != -1) {
                                messagePreviewParams = this.messagePreviewParams;
                                if (messagePreviewParams == null) {
                                }
                            }
                        } else {
                            z2 = webPage2.url.length() + indexOf == charSequence.length();
                            if (!z2) {
                                str = this.foundWebPage.url;
                                boolean z42 = z2;
                                c = charSequence.charAt(str.length() + indexOf);
                                z3 = z42;
                                if (indexOf != -1) {
                                }
                            }
                            z3 = z2;
                            c = 0;
                            if (indexOf != -1) {
                            }
                        }
                    }
                    this.pendingLinkSearchString = null;
                    this.foundUrls = null;
                    this.foundWebPage = null;
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setWebPage(null, true);
                    }
                    fallbackFieldPanel();
                    editResetMediaManual();
                }
                final MessagesController messagesController = getMessagesController();
                Utilities.searchQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda195
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$searchLinks$119(charSequence, messagesController, z);
                    }
                });
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:105:0x021d  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x025f  */
    /* JADX WARN: Removed duplicated region for block: B:118:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void selectReaction(ChatMessageCell chatMessageCell, MessageObject messageObject, ReactionsContainerLayout reactionsContainerLayout, View view, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2, boolean z3, boolean z4) {
        int i;
        String str;
        TLRPC.Message message;
        TLRPC.TL_messageReactions tL_messageReactions;
        TLRPC.TL_messageReactions tL_messageReactions2;
        if (isInScheduleMode() || messageObject == null) {
            return;
        }
        int i2 = 2;
        if (visibleReaction != null && visibleReaction.isStar) {
            closeMenu();
            ChatMessageCell findMessageCell = chatMessageCell == null ? findMessageCell(messageObject.getId(), true) : chatMessageCell;
            if (z2) {
                if (findMessageCell != null) {
                    findMessageCell.performHapticFeedback(0);
                }
                TLRPC.Message message2 = messageObject.messageOwner;
                ArrayList<TLRPC.MessageReactor> arrayList = (message2 == null || (tL_messageReactions2 = message2.reactions) == null) ? null : tL_messageReactions2.top_reactors;
                long j = -StarsController.MessageId.from(messageObject).did;
                TLRPC.ChatFull chatFull = getMessagesController().getChatFull(j);
                if (chatFull != null && !chatFull.paid_reactions_available && (arrayList == null || arrayList.isEmpty())) {
                    TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(j));
                    BulletinFactory.of(this).createSimpleBulletin(R.raw.stars_topup, AndroidUtilities.replaceTags(LocaleController.formatString(R.string.StarsReactionsDisabled, chat != null ? chat.title : ""))).show(true);
                    return;
                }
                StarsController.getInstance(this.currentAccount).commitPaidReaction();
                StarsReactionsSheet starsReactionsSheet = new StarsReactionsSheet(getContext(), this.currentAccount, this.dialog_id, this, messageObject, arrayList, chatFull == null || chatFull.paid_reactions_available, this.themeDelegate);
                starsReactionsSheet.setMessageCell(this, messageObject.getId(), findMessageCell);
                starsReactionsSheet.show();
                return;
            }
            View view2 = this.fragmentView;
            if (view2 != null) {
                try {
                    view2.performHapticFeedback(3, 1);
                } catch (Exception unused) {
                }
            }
            long j2 = -StarsController.MessageId.from(messageObject).did;
            TLRPC.ChatFull chatFull2 = getMessagesController().getChatFull(j2);
            if (chatFull2 != null && !chatFull2.paid_reactions_available) {
                TLRPC.Chat chat2 = getMessagesController().getChat(Long.valueOf(j2));
                BulletinFactory.of(this).createSimpleBulletin(R.raw.stars_topup, AndroidUtilities.replaceTags(LocaleController.formatString(R.string.StarsReactionsDisabled, chat2 != null ? chat2.title : ""))).show(true);
                return;
            }
            StarsController.PendingPaidReactions sendPaidReaction = StarsController.getInstance(this.currentAccount).sendPaidReaction(messageObject, this, 1L, true, true, null);
            if (sendPaidReaction == null || findMessageCell == null) {
                return;
            }
            StarReactionsOverlay starReactionsOverlay = getStarReactionsOverlay();
            starReactionsOverlay.setMessageCell(findMessageCell);
            sendPaidReaction.setOverlay(starReactionsOverlay);
            starReactionsOverlay.show();
            int[] iArr = new int[2];
            int[] iArr2 = new int[2];
            findMessageCell.getLocationInWindow(iArr);
            starReactionsOverlay.getLocationInWindow(iArr2);
            starReactionsOverlay.tap((iArr[0] - iArr2[0]) + f, (iArr[1] - iArr2[1]) + f2, false, true);
        } else if (getDialogId() == getUserConfig().getClientUserId() && !getUserConfig().isPremium() && (message = messageObject.messageOwner) != null && ((tL_messageReactions = message.reactions) == null || tL_messageReactions.reactions_as_tags || tL_messageReactions.results.isEmpty())) {
            new PremiumFeatureBottomSheet(this, 24, true).show();
        } else {
            ReactionsEffectOverlay.removeCurrent(false);
            int size = messageObject.getChoosenReactions().size();
            boolean selectReaction = messageObject.selectReaction(visibleReaction, z2, z);
            int id = messageObject.getId();
            if (this.groupedMessagesMap.get(messageObject.getGroupId()) != null) {
                MessageObject findMessageWithFlags = ((MessageObject.GroupedMessages) this.groupedMessagesMap.get(messageObject.getGroupId())).findMessageWithFlags(messageObject.shouldDrawReactionsInLayout() ? 9 : 10);
                if (findMessageWithFlags != null) {
                    id = findMessageWithFlags.getId();
                }
            }
            int i3 = id;
            if (selectReaction) {
                ChatMessageCell findMessageCell2 = findMessageCell(i3, true);
                showMultipleReactionsPromo(findMessageCell2, visibleReaction, size);
                if (!z) {
                    int i4 = this.currentAccount;
                    if (reactionsContainerLayout == null) {
                        i2 = 1;
                    } else if (z2) {
                        i2 = 0;
                    }
                    i = i3;
                    ReactionsEffectOverlay.show(this, reactionsContainerLayout, findMessageCell2, view, f, f2, visibleReaction, i4, i2);
                    if (selectReaction && (str = visibleReaction.emojicon) != null) {
                        AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, str));
                    }
                    ArrayList<ReactionsLayoutInBubble.VisibleReaction> arrayList2 = new ArrayList<>();
                    arrayList2.addAll(messageObject.getChoosenReactions());
                    SendMessagesHelper sendMessagesHelper = getSendMessagesHelper();
                    ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = selectReaction ? visibleReaction : null;
                    142 r8 = new 142(z4, z, i, selectReaction, reactionsContainerLayout, f, f2, visibleReaction, messageObject);
                    this.updateReactionRunnable = r8;
                    sendMessagesHelper.sendReaction(messageObject, arrayList2, visibleReaction2, z2, z3, this, r8);
                    if (!z || z4) {
                        updateMessageAnimated(messageObject, true);
                        this.updateReactionRunnable.run();
                    }
                    if (z4) {
                        AndroidUtilities.runOnUIThread(this.updateReactionRunnable, 50L);
                        return;
                    }
                    return;
                }
            }
            i = i3;
            if (selectReaction) {
                AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, str));
            }
            ArrayList<ReactionsLayoutInBubble.VisibleReaction> arrayList22 = new ArrayList<>();
            arrayList22.addAll(messageObject.getChoosenReactions());
            SendMessagesHelper sendMessagesHelper2 = getSendMessagesHelper();
            if (selectReaction) {
            }
            142 r82 = new 142(z4, z, i, selectReaction, reactionsContainerLayout, f, f2, visibleReaction, messageObject);
            this.updateReactionRunnable = r82;
            sendMessagesHelper2.sendReaction(messageObject, arrayList22, visibleReaction2, z2, z3, this, r82);
            if (!z) {
            }
            updateMessageAnimated(messageObject, true);
            this.updateReactionRunnable.run();
            if (z4) {
            }
        }
    }

    public void sendAnimatedEmoji(TLRPC.Document document, boolean z, int i) {
        String findAnimatedEmojiEmoticon;
        if (document == null || (findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(document, null)) == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC.TL_messageEntityCustomEmoji tL_messageEntityCustomEmoji = new TLRPC.TL_messageEntityCustomEmoji();
        tL_messageEntityCustomEmoji.document = document;
        tL_messageEntityCustomEmoji.document_id = document.id;
        tL_messageEntityCustomEmoji.offset = 0;
        tL_messageEntityCustomEmoji.length = findAnimatedEmojiEmoticon.length();
        arrayList.add(tL_messageEntityCustomEmoji);
        SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, arrayList, null, null, z, i, null, false);
        of.quick_reply_shortcut = this.quickReplyShortcut;
        of.quick_reply_shortcut_id = getQuickReplyId();
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(of);
        afterMessageSend();
    }

    public void sendAudio(ArrayList arrayList, CharSequence charSequence, boolean z, int i, long j, boolean z2) {
        if (checkSlowModeAlert()) {
            fillEditingMediaWithCaption(charSequence, null);
            SendMessagesHelper.prepareSendingAudioDocuments(getAccountInstance(), arrayList, charSequence != null ? charSequence : null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z, i, this.editingMessageObject, this.quickReplyShortcut, getQuickReplyId(), j, z2);
            afterMessageSend();
        }
    }

    public void sendContact(TLRPC.User user, boolean z, int i, long j, boolean z2) {
        if (checkSlowModeAlert()) {
            SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(user, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, z, i);
            of.quick_reply_shortcut = this.quickReplyShortcut;
            of.quick_reply_shortcut_id = getQuickReplyId();
            of.effect_id = j;
            of.invert_media = z2;
            getSendMessagesHelper().sendMessage(of);
            afterMessageSend();
        }
    }

    public void sendContacts(ArrayList arrayList, String str, boolean z, int i, long j, boolean z2) {
        long j2;
        if (checkSlowModeAlert()) {
            if (TextUtils.isEmpty(str)) {
                j2 = j;
            } else {
                SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(str, this.dialog_id, null, null, null, true, null, null, null, true, 0, null, false);
                of.quick_reply_shortcut = this.quickReplyShortcut;
                of.quick_reply_shortcut_id = getQuickReplyId();
                of.effect_id = j;
                of.invert_media = z2;
                SendMessagesHelper.getInstance(this.currentAccount).sendMessage(of);
                j2 = 0;
            }
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                SendMessagesHelper.SendMessageParams of2 = SendMessagesHelper.SendMessageParams.of((TLRPC.User) it.next(), this.dialog_id, (MessageObject) null, (MessageObject) null, (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, z, i);
                of2.quick_reply_shortcut = this.quickReplyShortcut;
                of2.quick_reply_shortcut_id = getQuickReplyId();
                of2.effect_id = j2;
                of2.invert_media = z2;
                getSendMessagesHelper().sendMessage(of2);
                j2 = 0;
            }
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean z, int i, boolean z2) {
        AccountInstance accountInstance;
        String str;
        if (photoEntry == null) {
            return;
        }
        if (videoEditedInfo != null && videoEditedInfo.roundVideo) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda221
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$sendMedia$306();
                }
            };
            this.closeInstantCameraAnimation = runnable;
            AndroidUtilities.runOnUIThread(runnable, 3000L);
        }
        fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
        if (photoEntry.isVideo) {
            SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2, photoEntry.hasSpoiler, photoEntry.caption, this.quickReplyShortcut, getQuickReplyId(), photoEntry.effectId);
        } else {
            if (photoEntry.imagePath != null) {
                accountInstance = getAccountInstance();
                str = photoEntry.imagePath;
            } else if (photoEntry.path != null) {
                accountInstance = getAccountInstance();
                str = photoEntry.path;
            }
            SendMessagesHelper.prepareSendingPhoto(accountInstance, str, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, 0, z2, photoEntry.caption, this.quickReplyShortcut, getQuickReplyId(), photoEntry.effectId);
        }
        afterMessageSend();
    }

    public void sendPoll(TLRPC.TL_messageMediaPoll tL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
        if (checkSlowModeAlert()) {
            SendMessagesHelper.SendMessageParams of = SendMessagesHelper.SendMessageParams.of(tL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) hashMap, z, i);
            of.quick_reply_shortcut = this.quickReplyShortcut;
            of.quick_reply_shortcut_id = getQuickReplyId();
            getSendMessagesHelper().sendMessage(of);
            afterMessageSend();
        }
    }

    public void setBotUser(String str) {
        if (this.inlineReturn != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
            return;
        }
        this.sentBotStart = true;
        MessagesController messagesController = getMessagesController();
        TLRPC.User user = this.currentUser;
        this.botUser = str;
        messagesController.sendBotStart(user, str);
        updateBottomOverlay();
    }

    public void setChatInvite(TLRPC.ChatInvite chatInvite) {
        this.chatInvite = chatInvite;
    }

    public void setHighlightMessageId(int i) {
        this.highlightMessageId = i;
    }

    public void setHighlightQuote(int i, String str, int i2) {
        this.highlightMessageId = i;
        this.highlightMessageQuoteFirst = true;
        this.highlightMessageQuoteFirstTime = 0L;
        this.highlightMessageQuote = str;
        this.highlightMessageQuoteOffset = i2;
        this.showNoQuoteAlert = true;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void setIgnoreAttachOnPause(boolean z) {
        this.ignoreAttachOnPause = z;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInMenuMode(boolean z) {
        super.setInMenuMode(z);
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.createMenu().setVisibility(this.inMenuMode ? 8 : 0);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInPreviewMode(boolean z) {
        TLRPC.Message message;
        ChatActivityEnterView chatActivityEnterView;
        super.setInPreviewMode(z);
        int i = 8;
        boolean z2 = false;
        if (this.currentUser != null && this.audioCallIconItem != null) {
            TLRPC.UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull == null || !userFull.phone_calls_available) {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            } else {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            }
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.setOccupyStatusBar(!z);
            this.avatarContainer.setTitleExpand(this.showAudioCallAsIcon);
            this.avatarContainer.setLayoutParams(LayoutHelper.createFrame(-2, -1.0f, 51, z ? this.chatMode == 2 ? 10 : 0 : 56.0f, 0.0f, 40.0f, 0.0f));
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.setVisibility(!z ? 0 : 4);
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            if (this.allowStickersPanel && !z && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isStickersExpanded())) {
                i = 0;
            }
            suggestEmojiView.setVisibility(i);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.animate().alpha((this.chatActivityEnterView.isStickersExpanded() || isInPreviewMode()) ? 0.0f : 1.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
        }
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.setBackButtonDrawable(!z ? new BackDrawable(false) : null);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(!z ? 1.0f : 0.0f);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setAlpha(z ? 0.0f : 1.0f);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                boolean z3 = childAt instanceof ChatMessageCell;
                MessageObject messageObject = z3 ? ((ChatMessageCell) childAt).getMessageObject() : childAt instanceof ChatActionCell ? ((ChatActionCell) childAt).getMessageObject() : null;
                if (messageObject != null && (message = messageObject.messageOwner) != null && message.media_unread && message.mentioned) {
                    if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                        int i3 = this.newMentionsCount - 1;
                        this.newMentionsCount = i3;
                        if (i3 <= 0) {
                            this.newMentionsCount = 0;
                            this.hasAllMentionsLocal = true;
                            showMentionDownButton(false, true);
                        } else {
                            this.mentiondownButtonCounter.setText(String.format(Locale.US, "%d", Integer.valueOf(i3)));
                        }
                        getMessagesController().markMentionMessageAsRead(messageObject.getId(), ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, this.dialog_id);
                        messageObject.setContentIsRead();
                    }
                    if (z3) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.setHighlighted(false);
                        chatMessageCell.setHighlightedAnimated();
                    }
                }
            }
            this.chatListView.setItemAnimator(null);
        }
        updateBottomOverlay();
        updateSecretStatus();
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.setEnabled((z || this.isInsideContainer) ? false : true);
        }
        FragmentContextView fragmentContextView2 = this.fragmentLocationContextView;
        if (fragmentContextView2 != null) {
            if (!z && !this.isInsideContainer) {
                z2 = true;
            }
            fragmentContextView2.setEnabled(z2);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setEnabled(!isInPreviewMode());
        }
    }

    public void setNextChannels(ArrayList arrayList) {
        this.nextChannels = arrayList;
    }

    public void setOpenImport() {
        this.openImport = true;
    }

    public void setPreloadedSticker(TLRPC.Document document, boolean z) {
        this.preloadedGreetingsSticker = document;
        this.forceHistoryEmpty = z;
    }

    public void setQuickReplyId(long j) {
        this.threadMessageId = j;
        TLRPC.TL_message tL_message = new TLRPC.TL_message();
        tL_message.id = (int) j;
        this.quickReplyMessage = new MessageObject(this.currentAccount, tL_message, false, false);
    }

    public void setResolvedChatLink(TLRPC.TL_account_resolvedBusinessChatLinks tL_account_resolvedBusinessChatLinks) {
        this.resolvedChatLink = tL_account_resolvedBusinessChatLinks;
    }

    public void setSavedDialog(long j) {
        this.threadMessageId = j;
    }

    public void setSearchQuery(String str) {
        ActionBarMenuItem actionBarMenuItem = this.searchItem;
        if (actionBarMenuItem != null) {
            this.searchingQuery = str;
            actionBarMenuItem.setSearchFieldText(str, false);
        }
    }

    public void setSwitchFromTopics(boolean z) {
        this.switchFromTopics = z;
    }

    public void setTagFilter(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.setChosen(visibleReaction, true);
        }
        boolean z = (TextUtils.isEmpty(this.searchingQuery) && this.searchingReaction == null) ? false : true;
        this.searching = z;
        this.searchItemVisible = z;
        updateBottomOverlay();
        updateSearchUpDownButtonVisibility(true);
    }

    public void setThreadMessages(ArrayList arrayList, TLRPC.Chat chat, int i, int i2, int i3, TLRPC.TL_forumTopic tL_forumTopic) {
        this.forumTopic = tL_forumTopic;
        this.threadMessageObjects = arrayList;
        MessageObject messageObject = (MessageObject) arrayList.get(arrayList.size() - 1);
        this.threadMessageObject = messageObject;
        this.replyingMessageObject = messageObject;
        this.threadMaxInboxReadId = i2;
        this.threadMaxOutboxReadId = i3;
        this.replyMaxReadId = Math.max(1, i2);
        this.threadMessageId = this.threadMessageObject.getId();
        this.replyOriginalMessageId = i;
        this.replyOriginalChat = chat;
        boolean z = tL_forumTopic != null;
        this.isTopic = z;
        MessageObject messageObject2 = this.replyingMessageObject;
        TLRPC.MessageFwdHeader messageFwdHeader = messageObject2.messageOwner.fwd_from;
        this.isComments = (messageFwdHeader == null || messageFwdHeader.channel_post == 0 || z) ? false : true;
        if (z) {
            messageObject2.isTopicMainMessage = true;
        }
        updatePinnedTopicStarterMessage();
        updateTopPanel(false);
        updateBottomOverlay();
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x00b7  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00c0 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:43:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setupStickerVibrationAndSound(ChatMessageCell chatMessageCell) {
        HashMap hashMap;
        int i;
        MessagesController.EmojiSound emojiSound;
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC.Document document = messageObject.getDocument();
        boolean isAnimatedEmoji = messageObject.isAnimatedEmoji();
        if (!isAnimatedEmoji) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation == null || !isAnimatedEmoji) {
            return;
        }
        String unwrapEmoji = EmojiAnimationsOverlay.unwrapEmoji(messageObject.getStickerEmoji());
        if (!EmojiData.isHeartEmoji(unwrapEmoji)) {
            if (!EmojiData.isPeachEmoji(unwrapEmoji)) {
                if (EmojiData.isCofinEmoji(unwrapEmoji)) {
                    hashMap = new HashMap();
                    hashMap.put(24, 0);
                    i = 36;
                }
                if (messageObject.isAnimatedAnimatedEmoji()) {
                }
                if (lottieAnimation.isRunning()) {
                    return;
                }
                return;
            }
            hashMap = new HashMap();
            hashMap.put(34, 1);
            lottieAnimation.setVibrationPattern(hashMap);
            if (messageObject.isAnimatedAnimatedEmoji()) {
                lottieAnimation.resetVibrationAfterRestart(true);
            }
            if (lottieAnimation.isRunning() || unwrapEmoji == null || (emojiSound = getMessagesController().emojiSounds.get(unwrapEmoji.replace("️", ""))) == null) {
                return;
            }
            getMediaController().playEmojiSound(getAccountInstance(), unwrapEmoji, emojiSound, false);
            return;
        }
        hashMap = new HashMap();
        hashMap.put(1, 1);
        hashMap.put(13, 0);
        hashMap.put(59, 1);
        hashMap.put(71, 0);
        hashMap.put(128, 1);
        i = NotificationCenter.filePreparingStarted;
        hashMap.put(Integer.valueOf(i), 0);
        lottieAnimation.setVibrationPattern(hashMap);
        if (messageObject.isAnimatedAnimatedEmoji()) {
        }
        if (lottieAnimation.isRunning()) {
        }
    }

    public void shakeContent() {
        AndroidUtilities.shakeViewSpring(getChatListView(), 5.0f);
        BotWebViewVibrationEffect.APP_ERROR.vibrate();
        ChatActivityEnterView chatActivityEnterView = getChatActivityEnterView();
        for (int i = 0; i < chatActivityEnterView.getChildCount(); i++) {
            AndroidUtilities.shakeViewSpring(chatActivityEnterView.getChildAt(i), 5.0f);
        }
        ActionBar actionBar = getActionBar();
        for (int i2 = 0; i2 < actionBar.getChildCount(); i2++) {
            AndroidUtilities.shakeViewSpring(actionBar.getChildAt(i2), 5.0f);
        }
    }

    public void shareMyContact(final int i, final MessageObject messageObject) {
        int i2;
        CharSequence charSequence;
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString(R.string.ShareYouPhoneNumberTitle));
        TLRPC.User user = this.currentUser;
        if (user == null) {
            i2 = R.string.AreYouSureShareMyContactInfo;
        } else if (!user.bot) {
            int i3 = R.string.AreYouSureShareMyContactInfoUser;
            PhoneFormat phoneFormat = PhoneFormat.getInstance();
            String format = phoneFormat.format("+" + getUserConfig().getCurrentUser().phone);
            TLRPC.User user2 = this.currentUser;
            charSequence = AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", i3, format, ContactsController.formatName(user2.first_name, user2.last_name)));
            builder.setMessage(charSequence);
            builder.setPositiveButton(LocaleController.getString(R.string.ShareContact), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda353
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i4) {
                    ChatActivity.this.lambda$shareMyContact$110(i, messageObject, dialogInterface, i4);
                }
            });
            builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
            showDialog(builder.create());
        } else {
            i2 = R.string.AreYouSureShareMyContactInfoBot;
        }
        charSequence = LocaleController.getString(i2);
        builder.setMessage(charSequence);
        builder.setPositiveButton(LocaleController.getString(R.string.ShareContact), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda353
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i4) {
                ChatActivity.this.lambda$shareMyContact$110(i, messageObject, dialogInterface, i4);
            }
        });
        builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
        showDialog(builder.create());
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public boolean shouldShowImport() {
        return this.openImport;
    }

    public void showAlert(String str, String str2) {
        createAlertView();
        FrameLayout frameLayout = this.alertView;
        if (frameLayout == null || str == null || str2 == null) {
            return;
        }
        if (frameLayout.getTag() != null) {
            this.alertView.setTag(null);
            AnimatorSet animatorSet = this.alertViewAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.alertViewAnimator = null;
            }
            if (this.alertView.getVisibility() != 0) {
                this.alertViewEnterProgress = 0.0f;
                invalidateChatListViewTopPadding();
            }
            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.alertViewEnterProgress, 1.0f);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda84
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$showAlert$204(valueAnimator);
                }
            });
            this.alertViewAnimator.playTogether(ofFloat);
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.110
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewEnterProgress = 1.0f;
                    ChatActivity.this.invalidateChatListViewTopPadding();
                    ChatActivity.this.alertViewAnimator = null;
                }
            });
            this.alertViewAnimator.start();
        }
        this.alertNameTextView.setText(str);
        this.alertTextView.setText(Emoji.replaceEmoji((CharSequence) str2.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
        Runnable runnable = this.hideAlertViewRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        111 r5 = new 111();
        this.hideAlertViewRunnable = r5;
        AndroidUtilities.runOnUIThread(r5, 3000L);
    }

    public void showBottomOverlayProgress(final boolean z, boolean z2) {
        if (!z || this.bottomOverlayProgress.getTag() == null) {
            if (z || this.bottomOverlayProgress.getTag() != null) {
                AnimatorSet animatorSet = this.bottomOverlayAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.bottomOverlayAnimation = null;
                }
                this.bottomOverlayProgress.setTag(z ? 1 : null);
                float f = 0.0f;
                float f2 = 0.1f;
                if (!z2) {
                    this.bottomOverlayProgress.setVisibility(z ? 0 : 4);
                    this.bottomOverlayProgress.setScaleX(z ? 1.0f : 0.1f);
                    this.bottomOverlayProgress.setScaleY(z ? 1.0f : 0.1f);
                    this.bottomOverlayProgress.setAlpha(1.0f);
                    this.bottomOverlayChatText.setVisibility((z || this.bottomOverlayLinks) ? 4 : 0);
                    this.bottomOverlayLinksText.setVisibility((z || !this.bottomOverlayLinks) ? 4 : 0);
                    this.bottomOverlayChatText.setScaleX((z || this.bottomOverlayLinks) ? 0.1f : 1.0f);
                    this.bottomOverlayLinksText.setScaleX((z || !this.bottomOverlayLinks) ? 0.1f : 1.0f);
                    this.bottomOverlayChatText.setScaleY((z || this.bottomOverlayLinks) ? 0.1f : 1.0f);
                    LinkSpanDrawable.LinksTextView linksTextView = this.bottomOverlayLinksText;
                    if (!z && this.bottomOverlayLinks) {
                        f2 = 1.0f;
                    }
                    linksTextView.setScaleY(f2);
                    this.bottomOverlayChatText.setAlpha((z || this.bottomOverlayLinks) ? 0.0f : 1.0f);
                    LinkSpanDrawable.LinksTextView linksTextView2 = this.bottomOverlayLinksText;
                    if (!z && this.bottomOverlayLinks) {
                        f = 1.0f;
                    }
                    linksTextView2.setAlpha(f);
                    return;
                }
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.bottomOverlayAnimation = animatorSet2;
                if (z) {
                    this.bottomOverlayProgress.setVisibility(0);
                    AnimatorSet animatorSet3 = this.bottomOverlayAnimation;
                    UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
                    Property property = View.SCALE_X;
                    ObjectAnimator ofFloat = ObjectAnimator.ofFloat(unreadCounterTextView, property, 0.1f);
                    UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
                    Property property2 = View.SCALE_Y;
                    ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(unreadCounterTextView2, property2, 0.1f);
                    UnreadCounterTextView unreadCounterTextView3 = this.bottomOverlayChatText;
                    Property property3 = View.ALPHA;
                    animatorSet3.playTogether(ofFloat, ofFloat2, ObjectAnimator.ofFloat(unreadCounterTextView3, property3, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, property, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, property2, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, property3, 1.0f));
                    this.bottomOverlayAnimation.setStartDelay(200L);
                } else {
                    Object obj = this.bottomOverlayLinks ? this.bottomOverlayLinksText : this.bottomOverlayChatText;
                    RadialProgressView radialProgressView = this.bottomOverlayProgress;
                    Property property4 = View.SCALE_X;
                    ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(radialProgressView, property4, 0.1f);
                    RadialProgressView radialProgressView2 = this.bottomOverlayProgress;
                    Property property5 = View.SCALE_Y;
                    ObjectAnimator ofFloat4 = ObjectAnimator.ofFloat(radialProgressView2, property5, 0.1f);
                    RadialProgressView radialProgressView3 = this.bottomOverlayProgress;
                    Property property6 = View.ALPHA;
                    animatorSet2.playTogether(ofFloat3, ofFloat4, ObjectAnimator.ofFloat(radialProgressView3, property6, 0.0f), ObjectAnimator.ofFloat(obj, property4, 1.0f), ObjectAnimator.ofFloat(obj, property5, 1.0f), ObjectAnimator.ofFloat(obj, property6, 1.0f));
                }
                this.bottomOverlayAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.83
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.bottomOverlayAnimation = null;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                            return;
                        }
                        (!z ? ChatActivity.this.bottomOverlayProgress : ChatActivity.this.bottomOverlayLinks ? ChatActivity.this.bottomOverlayLinksText : ChatActivity.this.bottomOverlayChatText).setVisibility(4);
                    }
                });
                this.bottomOverlayAnimation.setDuration(150L);
                this.bottomOverlayAnimation.start();
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:204:0x03f3, code lost:
        if (r3 == null) goto L227;
     */
    /* JADX WARN: Code restructure failed: missing block: B:206:0x03f6, code lost:
        r13 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x0418, code lost:
        if (r3 == null) goto L227;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x041a, code lost:
        r32.replyNameTextView.setText(org.telegram.messenger.Emoji.replaceEmoji(org.telegram.messenger.AndroidUtilities.replaceCharSequence("%s", r4, r13), r32.replyNameTextView.getPaint().getFontMetricsInt(), false));
        r32.replyIconImageView.setContentDescription(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.AccDescrReplying));
        r32.replyCloseImageView.setContentDescription(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.AccDescrCancelReply));
        r32.replyObjectHintTextView.setText(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.TapForReplyOptions));
        r3 = !org.telegram.messenger.SharedConfig.replyingOptionsHintShown;
        r4 = r0.messageOwner;
     */
    /* JADX WARN: Code restructure failed: missing block: B:220:0x0459, code lost:
        if (r4 == null) goto L281;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x045b, code lost:
        r4 = r4.entities;
     */
    /* JADX WARN: Code restructure failed: missing block: B:222:0x045e, code lost:
        r4 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x045f, code lost:
        r5 = r32.replyingQuote;
     */
    /* JADX WARN: Code restructure failed: missing block: B:224:0x0461, code lost:
        if (r5 == null) goto L247;
     */
    /* JADX WARN: Code restructure failed: missing block: B:226:0x0465, code lost:
        if (r5.outdated == false) goto L243;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x0467, code lost:
        r2 = new android.text.SpannableStringBuilder(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.QuoteOutdated));
        r2.setSpan(new org.telegram.ui.Components.TypefaceSpan(org.telegram.messenger.AndroidUtilities.getTypeface(org.telegram.messenger.AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM_ITALIC)), 0, r2.length(), 33);
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x0486, code lost:
        r5 = null;
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x0489, code lost:
        r2 = new android.text.SpannableStringBuilder(r32.replyingQuote.getText());
        r4 = r32.replyingQuote.getEntities();
        r2 = org.telegram.messenger.AndroidUtilities.replaceNewLines(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:230:0x049e, code lost:
        if (r4 == null) goto L246;
     */
    /* JADX WARN: Code restructure failed: missing block: B:231:0x04a0, code lost:
        r2 = org.telegram.messenger.MessageObject.replaceAnimatedEmoji(r2, r4, r32.replyObjectTextView.getPaint().getFontMetricsInt());
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x04ae, code lost:
        r2 = org.telegram.messenger.Emoji.replaceEmoji(r2, r32.replyObjectTextView.getPaint().getFontMetricsInt(), org.telegram.messenger.AndroidUtilities.dp(14.0f), false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:234:0x04c7, code lost:
        if (android.text.TextUtils.isEmpty(r2) != false) goto L250;
     */
    /* JADX WARN: Code restructure failed: missing block: B:235:0x04c9, code lost:
        r5 = r2;
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:237:0x04d0, code lost:
        if (org.telegram.messenger.MessageObject.isTopicActionMessage(r34) == false) goto L256;
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x04d2, code lost:
        org.telegram.ui.Components.Forum.ForumUtilities.applyTopicToMessage(r34);
        r2 = r0.messageTextForReply;
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x04d7, code lost:
        if (r2 == 0) goto L254;
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x04da, code lost:
        r2 = r0.messageTextShort;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x04dc, code lost:
        org.telegram.ui.Components.AnimatedEmojiSpan.applyFontMetricsForString(r2, r32.replyObjectTextView.getPaint());
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x04e6, code lost:
        r2 = r0.replyToForumTopic;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x04e8, code lost:
        if (r2 == null) goto L259;
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x04ea, code lost:
        r2 = org.telegram.ui.Components.Forum.ForumUtilities.getTopicSpannedName(r2, r32.replyObjectTextView.getPaint(), false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x04f5, code lost:
        r2 = r0.messageOwner.media;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x04fb, code lost:
        if ((r2 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaGame) == false) goto L262;
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x04fd, code lost:
        r2 = org.telegram.messenger.Emoji.replaceEmoji((java.lang.CharSequence) r2.game.title, r32.replyObjectTextView.getPaint().getFontMetricsInt(), org.telegram.messenger.AndroidUtilities.dp(14.0f), false);
        r5 = r0.messageOwner.media.game.title;
        r2 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x051e, code lost:
        r2 = r0.messageText;
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x0520, code lost:
        if (r2 != null) goto L267;
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x0524, code lost:
        if (r0.caption == null) goto L266;
     */
    /* JADX WARN: Code restructure failed: missing block: B:254:0x0527, code lost:
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x0529, code lost:
        r5 = r0.caption;
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x052b, code lost:
        if (r5 == null) goto L280;
     */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x052d, code lost:
        r2 = r5.toString();
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x0532, code lost:
        r2 = r2.toString();
     */
    /* JADX WARN: Code restructure failed: missing block: B:260:0x053c, code lost:
        if (r2.length() <= 150) goto L279;
     */
    /* JADX WARN: Code restructure failed: missing block: B:261:0x053e, code lost:
        r5 = r2.subSequence(0, 150);
     */
    /* JADX WARN: Code restructure failed: missing block: B:262:0x0543, code lost:
        r5 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:263:0x0544, code lost:
        r5 = org.telegram.messenger.AndroidUtilities.replaceNewLines(r5);
        r7 = r0.messageOwner;
     */
    /* JADX WARN: Code restructure failed: missing block: B:264:0x054a, code lost:
        if (r7 == null) goto L278;
     */
    /* JADX WARN: Code restructure failed: missing block: B:265:0x054c, code lost:
        r7 = r7.entities;
     */
    /* JADX WARN: Code restructure failed: missing block: B:266:0x054e, code lost:
        if (r7 == null) goto L278;
     */
    /* JADX WARN: Code restructure failed: missing block: B:267:0x0550, code lost:
        r5 = org.telegram.messenger.MessageObject.replaceAnimatedEmoji(r5, r7, r32.replyObjectTextView.getPaint().getFontMetricsInt());
     */
    /* JADX WARN: Code restructure failed: missing block: B:268:0x055e, code lost:
        r5 = org.telegram.messenger.Emoji.replaceEmoji(r5, r32.replyObjectTextView.getPaint().getFontMetricsInt(), org.telegram.messenger.AndroidUtilities.dp(14.0f), false);
        r5 = r2;
        r2 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:269:0x0577, code lost:
        if (r2 == null) goto L242;
     */
    /* JADX WARN: Code restructure failed: missing block: B:271:0x057b, code lost:
        if ((r2 instanceof android.text.Spannable) == false) goto L241;
     */
    /* JADX WARN: Code restructure failed: missing block: B:272:0x057d, code lost:
        if (r5 == null) goto L241;
     */
    /* JADX WARN: Code restructure failed: missing block: B:273:0x057f, code lost:
        org.telegram.messenger.MediaDataController.addTextStyleRuns(r4, r5, r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:274:0x0585, code lost:
        r32.replyObjectTextView.setText(org.telegram.ui.Components.AnimatedEmojiSpan.cloneSpans(r2));
     */
    /* JADX WARN: Code restructure failed: missing block: B:275:0x058e, code lost:
        updateBottomOverlay();
     */
    /* JADX WARN: Code restructure failed: missing block: B:378:0x07bb, code lost:
        if (r36.size() == 1) goto L450;
     */
    /* JADX WARN: Code restructure failed: missing block: B:393:0x07f5, code lost:
        if (r36.size() == 1) goto L450;
     */
    /* JADX WARN: Code restructure failed: missing block: B:394:0x07f7, code lost:
        r0 = (org.telegram.messenger.MessageObject) r36.get(0);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02a8  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x0308  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x031f  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x03ca  */
    /* JADX WARN: Removed duplicated region for block: B:201:0x03e0  */
    /* JADX WARN: Removed duplicated region for block: B:203:0x03e6  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x03f8  */
    /* JADX WARN: Removed duplicated region for block: B:514:0x0a47  */
    /* JADX WARN: Removed duplicated region for block: B:536:0x0acc  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0111  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x011f  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x012d  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0139  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x013b  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0142  */
    /* JADX WARN: Type inference failed for: r2v72, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v73, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v74, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v76, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v85, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v87, types: [android.text.SpannableStringBuilder, java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r4v93, types: [org.telegram.ui.ChatActivity$ReplyQuote] */
    /* JADX WARN: Type inference failed for: r5v39, types: [java.lang.CharSequence] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void showFieldPanel(boolean z, MessageObject messageObject, MessageObject messageObject2, ArrayList arrayList, TLRPC.WebPage webPage, boolean z2, int i, ReplyQuote replyQuote, boolean z3, boolean z4) {
        StringBuilder sb;
        long j;
        String str;
        String formatPluralString;
        CharSequence replaceEmoji;
        SimpleTextView simpleTextView;
        boolean z5;
        int i2;
        int i3;
        StringBuilder sb2;
        TLRPC.Chat chat;
        TLRPC.User user;
        String str2;
        String str3;
        String str4;
        long j2;
        MessageObject messageObject3;
        MessageObject.GroupedMessages groupedMessages;
        TLRPC.User user2;
        TLRPC.Chat chat2;
        SpannableStringBuilder spannableStringBuilder;
        TLRPC.User user3;
        ImageView imageView;
        int i4;
        String string;
        TLRPC.Peer peer;
        TLRPC.TL_forumTopic findTopic;
        TLRPC.PhotoSize photoSize;
        int i5;
        TLRPC.PhotoSize photoSize2;
        TLObject tLObject;
        float f;
        BackupImageView backupImageView;
        float f2;
        SimpleTextView simpleTextView2;
        int i6;
        SimpleTextView simpleTextView3;
        CharSequence cloneSpans;
        TLRPC.MessageMedia messageMedia;
        TLRPC.WebPage webPage2;
        String string2;
        String str5;
        int i7;
        MessageObject messageObject4 = messageObject;
        boolean z6 = false;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        CharSequence charSequence = "";
        if (!z) {
            this.fieldPanelShown = 0;
            if (this.replyingMessageObject == null && this.messagePreviewParams == null && this.foundWebPage == null && this.editingMessageObject == null && !chatActivityEnterView.isTopViewVisible()) {
                this.messagePreviewParams = null;
                return;
            }
            MessageObject messageObject5 = this.replyingMessageObject;
            if (messageObject5 != null && (messageObject5.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply)) {
                SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
                if (this.isTopic) {
                    sb = new StringBuilder();
                    sb.append(this.dialog_id);
                    sb.append("_");
                    j = getTopicId();
                } else {
                    sb = new StringBuilder();
                    sb.append("");
                    j = this.dialog_id;
                }
                sb.append(j);
                String sb3 = sb.toString();
                mainSettings.edit().putInt("answered_" + sb3, this.replyingMessageObject.getId()).commit();
            }
            if (this.foundWebPage != null) {
                this.foundWebPage = null;
                this.chatActivityEnterView.setWebPage(null, !z3);
            }
            MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
            if (messagePreviewParams != null && messagePreviewParams.forwardMessages != null) {
                this.forbidForwardingWithDismiss = false;
                ArrayList<MessageObject> arrayList2 = new ArrayList<>();
                MessagePreviewParams.Messages messages = this.messagePreviewParams.forwardMessages;
                if (messages != null) {
                    messages.getSelectedMessages(arrayList2);
                }
                MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
                forwardMessages(arrayList2, messagePreviewParams2.hideForwardSendersName, messagePreviewParams2.hideCaption, z2, (i == 0 || i == 2147483646) ? i : i + 1);
            }
            if (this.forwardingPreviewView == null) {
                this.messagePreviewParams = null;
            }
            this.chatActivityEnterView.setForceShowSendButton(false, z4);
            if (!this.waitingForSendingMessageLoad) {
                this.chatActivityEnterView.hideTopView(z4);
            }
            this.chatActivityEnterView.setReplyingMessageObject(this.threadMessageObject, null);
            this.chatActivityEnterView.setEditingMessageObject(null, null, false);
            this.topViewWasVisible = 0;
            this.replyingMessageObject = this.threadMessageObject;
            this.replyingQuote = null;
            this.editingMessageObject = null;
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
            updateBottomOverlay();
        } else if (messageObject4 == null && arrayList == null && messageObject2 == null && webPage == null) {
            this.messagePreviewParams = null;
            return;
        } else {
            hideHints(false);
            if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
                this.actionBar.closeSearchField(false);
                this.chatActivityEnterView.setFieldFocused();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda80
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showFieldPanel$128();
                    }
                }, 100L);
            }
            this.chatActivityEnterTopView.setEditMode(false);
            if (messageObject2 != null) {
                this.fieldPanelShown = 1;
                this.forbidForwardingWithDismiss = false;
                MessagePreviewParams messagePreviewParams3 = this.messagePreviewParams;
                if (messagePreviewParams3 != null) {
                    messagePreviewParams3.updateForward(null, this.dialog_id);
                    this.messagePreviewParams.updateReply(null, null, this.dialog_id, null);
                }
                if (this.threadMessageId == 0 || this.isTopic) {
                    if (this.isTopic) {
                        this.replyingMessageObject = this.threadMessageObject;
                    } else {
                        this.replyingMessageObject = null;
                    }
                    this.replyingQuote = null;
                    this.chatActivityEnterView.setReplyingMessageObject(null, null);
                    updateBottomOverlay();
                }
                boolean z7 = this.editingMessageObject == null;
                this.editingMessageObject = messageObject2;
                boolean isMediaEmpty = messageObject2.isMediaEmpty();
                this.chatActivityEnterView.setEditingMessageObject(messageObject2, getValidGroupedMessage(messageObject2), !isMediaEmpty);
                this.chatActivityEnterView.setForceShowSendButton(false, false);
                boolean canEditMedia = messageObject2.canEditMedia();
                this.replyCloseImageView.setContentDescription(LocaleController.getString(R.string.AccDescrCancelEdit));
                if (isMediaEmpty || !canEditMedia) {
                    this.replyIconImageView.setImageResource(R.drawable.group_edit);
                    this.replyIconImageView.setContentDescription(LocaleController.getString(R.string.AccDescrEditing));
                    if (isMediaEmpty) {
                        simpleTextView2 = this.replyNameTextView;
                        i6 = R.string.EditMessage;
                    } else {
                        simpleTextView2 = this.replyNameTextView;
                        i6 = R.string.EditCaption;
                    }
                    simpleTextView2.setText(LocaleController.getString(i6));
                    if (canEditMedia) {
                        simpleTextView3 = this.replyObjectTextView;
                        cloneSpans = LocaleController.getString(R.string.EditMessageMedia);
                    } else {
                        CharSequence charSequence2 = messageObject2.messageText;
                        if (charSequence2 != null || messageObject2.caption != null) {
                            CharSequence charSequence3 = messageObject2.caption;
                            if (charSequence3 != null) {
                                charSequence2 = charSequence3;
                            }
                            if (charSequence2.length() > 150) {
                                charSequence2 = charSequence2.subSequence(0, 150);
                            }
                            Spannable spannableStringBuilder2 = new SpannableStringBuilder(Emoji.replaceEmoji(AndroidUtilities.replaceNewLines(charSequence2), this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            MediaDataController.addTextStyleRuns(messageObject2, spannableStringBuilder2);
                            TLRPC.Message message = messageObject2.messageOwner;
                            if (message != null) {
                                spannableStringBuilder2 = MessageObject.replaceAnimatedEmoji(spannableStringBuilder2, message.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                            simpleTextView3 = this.replyObjectTextView;
                            cloneSpans = AnimatedEmojiSpan.cloneSpans(spannableStringBuilder2);
                        }
                    }
                    simpleTextView3.setText(cloneSpans);
                } else {
                    if (messageObject2.isPhoto()) {
                        str5 = LocaleController.getString(R.string.EditMessageEditPhoto);
                        i7 = R.string.EditMessageReplacePhoto;
                    } else if (messageObject2.isVideo()) {
                        str5 = LocaleController.getString(R.string.EditMessageEditVideo);
                        i7 = R.string.EditMessageReplaceVideo;
                    } else {
                        string2 = LocaleController.getString(messageObject2.isGif() ? R.string.EditMessageReplaceGif : messageObject2.isMusic() ? R.string.EditMessageReplaceAudio : R.string.EditMessageReplaceFile);
                        str5 = null;
                        ChatActivityEnterTopView.EditViewButton[] buttons = this.chatActivityEnterTopView.getEditView().getButtons();
                        buttons[0].setEditButton(str5 == null);
                        buttons[0].getTextView().setText(str5 == null ? str5 : string2);
                        buttons[0].getImageView().setImageResource(str5 == null ? R.drawable.msg_photoeditor : R.drawable.msg_replace);
                        buttons[1].setVisibility(str5 == null ? 0 : 8);
                        if (str5 != null) {
                            buttons[1].getTextView().setText(string2);
                        }
                        this.chatActivityEnterTopView.setEditMode(true);
                    }
                    string2 = LocaleController.getString(i7);
                    ChatActivityEnterTopView.EditViewButton[] buttons2 = this.chatActivityEnterTopView.getEditView().getButtons();
                    buttons2[0].setEditButton(str5 == null);
                    buttons2[0].getTextView().setText(str5 == null ? str5 : string2);
                    buttons2[0].getImageView().setImageResource(str5 == null ? R.drawable.msg_photoeditor : R.drawable.msg_replace);
                    buttons2[1].setVisibility(str5 == null ? 0 : 8);
                    if (str5 != null) {
                    }
                    this.chatActivityEnterTopView.setEditMode(true);
                }
                if (z7) {
                    TLRPC.Message message2 = messageObject2.messageOwner;
                    if (message2 != null && (messageMedia = message2.media) != null && (webPage2 = messageMedia.webpage) != null) {
                        this.foundWebPage = webPage2;
                        this.chatActivityEnterView.setWebPage(webPage2, false);
                        showFieldPanelForWebPage(true, this.foundWebPage, false);
                        return;
                    }
                    this.foundWebPage = null;
                    MessagePreviewParams messagePreviewParams4 = this.messagePreviewParams;
                    if (messagePreviewParams4 != null) {
                        int i8 = this.currentAccount;
                        CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                        MessageObject messageObject6 = this.replyingMessageObject;
                        if (messageObject6 == this.threadMessageObject) {
                            messageObject6 = null;
                        }
                        messagePreviewParams4.updateLink(i8, null, fieldText, messageObject6, this.replyingQuote, this.editingMessageObject);
                    }
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setWebPage(null, false);
                    }
                }
            } else {
                String str6 = " ";
                if (messageObject4 != null) {
                    this.editingMessageObject = null;
                    if (isForumInViewAsMessagesMode()) {
                        long topicId = MessageObject.getTopicId(this.currentAccount, messageObject4.messageOwner, true);
                        if (topicId != 0 && (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.id, topicId)) != null && findTopic.topicStartMessage != null) {
                            messageObject3 = new MessageObject(this.currentAccount, findTopic.topicStartMessage, false, false);
                            messageObject3.isTopicMainMessage = true;
                            messageObject3.replyToForumTopic = findTopic;
                            this.replyingMessageObject = messageObject4;
                            this.replyingQuote = replyQuote;
                            if (replyQuote != null && replyQuote.getText() == null) {
                                this.replyingQuote = null;
                            }
                            this.chatActivityEnterView.setReplyingMessageObject(messageObject4, replyQuote, messageObject3);
                            this.chatActivityEnterView.setEditingMessageObject(null, null, false);
                            this.forbidForwardingWithDismiss = false;
                            if (this.messagePreviewParams == null) {
                                MessagePreviewParams messagePreviewParams5 = new MessagePreviewParams(this.currentEncryptedChat != null, getMessagesController().isChatNoForwards(this.currentChat));
                                this.messagePreviewParams = messagePreviewParams5;
                                messagePreviewParams5.attach(this.forwardingPreviewView);
                            }
                            MessagePreviewParams messagePreviewParams6 = this.messagePreviewParams;
                            MessageObject messageObject7 = this.replyingMessageObject;
                            groupedMessages = this.replyingQuoteGroup;
                            if (groupedMessages == null) {
                                groupedMessages = getGroup(messageObject7.getGroupId());
                            }
                            messagePreviewParams6.updateReply(messageObject7, groupedMessages, this.dialog_id, this.replyingQuote);
                            if (this.messagePreviewParams.isEmpty() && this.editingMessageObject == null) {
                                this.messagePreviewParams = null;
                            }
                            this.fieldPanelShown = 2;
                            String restrictionReason = MessagesController.getInstance(this.currentAccount).getRestrictionReason(messageObject4.messageOwner.restriction_reason);
                            this.chatActivityEnterView.setForceShowSendButton(false, false);
                            CharSequence peerNameWithIcon = (messageObject.isForwarded() || messageObject.getDialogId() == this.dialog_id || (peer = messageObject4.messageOwner.fwd_from.from_id) == null) ? null : MessageObject.peerNameWithIcon(this.currentAccount, peer);
                            if (this.currentEncryptedChat == null) {
                                user3 = messageObject.isOutOwner() ? getUserConfig().getCurrentUser() : this.currentUser;
                            } else {
                                if (peerNameWithIcon == null && messageObject.isFromUser()) {
                                    int i9 = (messageObject4.messageOwner.from_id.channel_id > 0L ? 1 : (messageObject4.messageOwner.from_id.channel_id == 0L ? 0 : -1));
                                    MessagesController messagesController = getMessagesController();
                                    TLRPC.Peer peer2 = messageObject4.messageOwner.from_id;
                                    if (i9 != 0) {
                                        chat2 = messagesController.getChat(Long.valueOf(peer2.channel_id));
                                        if (chat2 == null) {
                                            return;
                                        }
                                        spannableStringBuilder = new SpannableStringBuilder(ChatObject.isChannelAndNotMegaGroup(chat2) ? MessageObject.channelSpan() : MessageObject.groupSpan());
                                    } else {
                                        user3 = messagesController.getUser(Long.valueOf(peer2.user_id));
                                        if (user3 == null) {
                                            return;
                                        }
                                    }
                                } else {
                                    if (peerNameWithIcon == null) {
                                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup && messageObject.isForwardedChannelPost()) {
                                            chat2 = getMessagesController().getChat(Long.valueOf(messageObject4.messageOwner.fwd_from.from_id.channel_id));
                                        } else {
                                            long senderId = messageObject.getSenderId();
                                            if (senderId < 0) {
                                                chat2 = getMessagesController().getChat(Long.valueOf(-senderId));
                                            } else {
                                                user2 = getMessagesController().getUser(Long.valueOf(senderId));
                                                chat2 = null;
                                                if (chat2 != null && user2 == null) {
                                                    return;
                                                }
                                                if (chat2 == null) {
                                                    spannableStringBuilder = new SpannableStringBuilder(ChatObject.isChannelAndNotMegaGroup(chat2) ? MessageObject.channelSpan() : MessageObject.groupSpan());
                                                } else {
                                                    peerNameWithIcon = UserObject.getUserName(user2);
                                                }
                                            }
                                        }
                                        user2 = null;
                                        if (chat2 != null) {
                                        }
                                        if (chat2 == null) {
                                        }
                                    }
                                    if (replyQuote == null) {
                                        this.replyIconImageView.setImageResource(R.drawable.filled_reply_quote);
                                        string = LocaleController.getString(R.string.ReplyToQuote);
                                    } else {
                                        MessagePreviewParams messagePreviewParams7 = this.messagePreviewParams;
                                        if (messagePreviewParams7 == null || messagePreviewParams7.hasSecretMessages || this.chatMode == 5) {
                                            imageView = this.replyIconImageView;
                                            i4 = R.drawable.ic_ab_reply;
                                        } else {
                                            imageView = this.replyIconImageView;
                                            i4 = R.drawable.filled_reply_settings;
                                        }
                                        imageView.setImageResource(i4);
                                        string = LocaleController.getString(R.string.ReplyTo);
                                    }
                                }
                                peerNameWithIcon = spannableStringBuilder.append((CharSequence) " ").append((CharSequence) chat2.title);
                                if (replyQuote == null) {
                                }
                            }
                            peerNameWithIcon = UserObject.getUserName(user3);
                            if (replyQuote == null) {
                            }
                        }
                    }
                    messageObject3 = null;
                    this.replyingMessageObject = messageObject4;
                    this.replyingQuote = replyQuote;
                    if (replyQuote != null) {
                        this.replyingQuote = null;
                    }
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject4, replyQuote, messageObject3);
                    this.chatActivityEnterView.setEditingMessageObject(null, null, false);
                    this.forbidForwardingWithDismiss = false;
                    if (this.messagePreviewParams == null) {
                    }
                    MessagePreviewParams messagePreviewParams62 = this.messagePreviewParams;
                    MessageObject messageObject72 = this.replyingMessageObject;
                    groupedMessages = this.replyingQuoteGroup;
                    if (groupedMessages == null) {
                    }
                    messagePreviewParams62.updateReply(messageObject72, groupedMessages, this.dialog_id, this.replyingQuote);
                    if (this.messagePreviewParams.isEmpty()) {
                        this.messagePreviewParams = null;
                    }
                    this.fieldPanelShown = 2;
                    String restrictionReason2 = MessagesController.getInstance(this.currentAccount).getRestrictionReason(messageObject4.messageOwner.restriction_reason);
                    this.chatActivityEnterView.setForceShowSendButton(false, false);
                    if (messageObject.isForwarded()) {
                    }
                    if (this.currentEncryptedChat == null) {
                    }
                    peerNameWithIcon = UserObject.getUserName(user3);
                    if (replyQuote == null) {
                    }
                } else if (arrayList == null) {
                    this.fieldPanelShown = 4;
                    this.replyIconImageView.setImageResource(R.drawable.filled_link);
                    if (this.messagePreviewParams == null) {
                        MessagePreviewParams messagePreviewParams8 = new MessagePreviewParams(this.currentEncryptedChat != null, getMessagesController().isChatNoForwards(this.currentChat));
                        this.messagePreviewParams = messagePreviewParams8;
                        messagePreviewParams8.attach(this.forwardingPreviewView);
                    }
                    MessagePreviewParams messagePreviewParams9 = this.messagePreviewParams;
                    int i10 = this.currentAccount;
                    TLRPC.WebPage webPage3 = this.foundWebPage;
                    CharSequence fieldText2 = this.chatActivityEnterView.getFieldText();
                    MessageObject messageObject8 = this.replyingMessageObject;
                    messagePreviewParams9.updateLink(i10, webPage3, fieldText2, messageObject8 == this.threadMessageObject ? null : messageObject8, this.replyingQuote, this.editingMessageObject);
                    if (this.messagePreviewParams.isEmpty() && this.editingMessageObject == null) {
                        this.messagePreviewParams = null;
                    }
                    if (webPage instanceof TLRPC.TL_webPagePending) {
                        this.replyNameTextView.setText(LocaleController.getString(R.string.GettingLinkInfo));
                        this.replyObjectTextView.setText(this.pendingLinkSearchString);
                    } else {
                        String str7 = webPage.site_name;
                        if (str7 == null && (str7 = webPage.title) == null) {
                            this.replyNameTextView.setText(LocaleController.getString(R.string.LinkPreview));
                        } else {
                            this.replyNameTextView.setText(str7);
                        }
                        String str8 = webPage.title;
                        if (str8 == null && (str8 = webPage.description) == null && (str8 = webPage.author) == null) {
                            this.replyObjectTextView.setText(webPage.display_url);
                        } else {
                            this.replyObjectTextView.setText(str8);
                        }
                        this.chatActivityEnterView.setWebPage(webPage, true);
                    }
                } else if (arrayList.isEmpty()) {
                    return;
                } else {
                    this.fieldPanelShown = 3;
                    if (this.messagePreviewParams == null) {
                        MessagePreviewParams messagePreviewParams10 = new MessagePreviewParams(this.currentEncryptedChat != null, getMessagesController().isChatNoForwards(this.currentChat));
                        this.messagePreviewParams = messagePreviewParams10;
                        messagePreviewParams10.attach(this.forwardingPreviewView);
                    }
                    this.messagePreviewParams.updateForward(arrayList, this.dialog_id);
                    if (this.messagePreviewParams.isEmpty() && this.editingMessageObject == null) {
                        this.messagePreviewParams = null;
                    }
                    this.editingMessageObject = null;
                    this.chatActivityEnterView.setEditingMessageObject(null, null, false);
                    this.forbidForwardingWithDismiss = false;
                    this.chatActivityEnterView.setForceShowSendButton(true, false);
                    ArrayList arrayList3 = new ArrayList();
                    this.replyIconImageView.setImageResource(R.drawable.filled_forward);
                    this.replyIconImageView.setContentDescription(LocaleController.getString(R.string.AccDescrForwarding));
                    this.replyCloseImageView.setContentDescription(LocaleController.getString(R.string.AccDescrCancelForward));
                    MessageObject messageObject9 = (MessageObject) arrayList.get(0);
                    if (messageObject9.isFromUser()) {
                        arrayList3.add(Long.valueOf(messageObject9.messageOwner.from_id.user_id));
                        str = "";
                    } else {
                        str = "";
                        TLRPC.Chat chat3 = getMessagesController().getChat(Long.valueOf(messageObject9.messageOwner.peer_id.channel_id));
                        arrayList3.add(Long.valueOf(-((ChatObject.isChannel(chat3) && chat3.megagroup && messageObject9.isForwardedChannelPost()) ? messageObject9.messageOwner.fwd_from.from_id : messageObject9.messageOwner.peer_id).channel_id));
                    }
                    int i11 = (messageObject9.isAnimatedEmoji() || messageObject9.isDice()) ? 0 : messageObject9.type;
                    int i12 = 1;
                    while (i12 < arrayList.size()) {
                        MessageObject messageObject10 = (MessageObject) arrayList.get(i12);
                        if (messageObject10.isFromUser()) {
                            j2 = messageObject10.messageOwner.from_id.user_id;
                            str4 = str6;
                        } else {
                            str4 = str6;
                            TLRPC.Chat chat4 = getMessagesController().getChat(Long.valueOf(messageObject10.messageOwner.peer_id.channel_id));
                            j2 = -((ChatObject.isChannel(chat4) && chat4.megagroup && messageObject10.isForwardedChannelPost()) ? messageObject10.messageOwner.fwd_from.from_id : messageObject10.messageOwner.peer_id).channel_id;
                        }
                        if (!arrayList3.contains(Long.valueOf(j2))) {
                            arrayList3.add(Long.valueOf(j2));
                        }
                        if (((MessageObject) arrayList.get(i12)).type != i11) {
                            i11 = -1;
                        }
                        i12++;
                        str6 = str4;
                    }
                    String str9 = str6;
                    StringBuilder sb4 = new StringBuilder();
                    int i13 = 0;
                    int i14 = 0;
                    while (true) {
                        if (i13 >= arrayList3.size()) {
                            break;
                        }
                        Long l = (Long) arrayList3.get(i13);
                        int i15 = (l.longValue() > 0L ? 1 : (l.longValue() == 0L ? 0 : -1));
                        MessagesController messagesController2 = getMessagesController();
                        if (i15 > 0) {
                            user = messagesController2.getUser(l);
                            sb2 = sb4;
                            chat = null;
                        } else {
                            sb2 = sb4;
                            chat = messagesController2.getChat(Long.valueOf(-l.longValue()));
                            user = null;
                        }
                        if (user == null && chat == null) {
                            sb4 = sb2;
                            str2 = str9;
                        } else {
                            if (arrayList3.size() != 1) {
                                sb4 = sb2;
                                if (arrayList3.size() != 2 && sb4.length() != 0) {
                                    sb4.append(str9);
                                    sb4.append(LocaleController.formatPluralString("AndOther", arrayList3.size() - 1, new Object[0]));
                                    i14++;
                                    break;
                                }
                                str2 = str9;
                                if (sb4.length() > 0) {
                                    sb4.append(", ");
                                }
                                if (user != null) {
                                    if (!TextUtils.isEmpty(user.first_name)) {
                                        str3 = user.first_name;
                                    } else if (TextUtils.isEmpty(user.last_name)) {
                                        sb4.append(str2);
                                    } else {
                                        str3 = user.last_name;
                                    }
                                    sb4.append(str3);
                                }
                                str3 = chat.title;
                                sb4.append(str3);
                            } else if (user != null) {
                                sb4 = sb2;
                                sb4.append(UserObject.getUserName(user));
                                str2 = str9;
                            } else {
                                sb4 = sb2;
                                str2 = str9;
                                str3 = chat.title;
                                sb4.append(str3);
                            }
                            i14++;
                        }
                        i13++;
                        str9 = str2;
                    }
                    this.formwardingNameText = sb4;
                    if (i11 == -1 || i11 == 0 || i11 == 10 || i11 == 11 || i11 == 19) {
                        formatPluralString = LocaleController.formatPluralString("PreviewForwardMessagesCount", arrayList.size(), new Object[0]);
                    } else if (i11 == 1) {
                        formatPluralString = LocaleController.formatPluralString("PreviewForwardPhoto", arrayList.size(), new Object[0]);
                    } else {
                        if (i11 == 26) {
                            i3 = R.string.BoostingGiveaway;
                        } else if (i11 == 28) {
                            i3 = R.string.BoostingGiveawayResults;
                        } else if (i11 == 4) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardLocation", arrayList.size(), new Object[0]);
                        } else if (i11 == 3) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardVideo", arrayList.size(), new Object[0]);
                        } else if (i11 == 12) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardContact", arrayList.size(), new Object[0]);
                        } else if (i11 == 2) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardAudio", arrayList.size(), new Object[0]);
                        } else if (i11 == 5) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardRound", arrayList.size(), new Object[0]);
                        } else if (i11 == 14) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardMusic", arrayList.size(), new Object[0]);
                        } else if (i11 == 13 || i11 == 15) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardSticker", arrayList.size(), new Object[0]);
                        } else if (i11 == 17) {
                            formatPluralString = LocaleController.formatPluralString("PreviewForwardPoll", arrayList.size(), new Object[0]);
                        } else if (i11 == 8 || i11 == 9) {
                            if ((i11 == 9) & (arrayList.size() == 1)) {
                                messageObject4 = (MessageObject) arrayList.get(0);
                            }
                            if (arrayList.size() == 1 && i11 == 8) {
                                i2 = R.string.AttachGif;
                                formatPluralString = LocaleController.getString(i2);
                            } else {
                                formatPluralString = LocaleController.formatPluralString("PreviewForwardFile", arrayList.size(), new Object[0]);
                            }
                        } else if (i11 != 23) {
                            formatPluralString = str;
                        } else if (arrayList.size() == 1) {
                            i2 = R.string.Story;
                            formatPluralString = LocaleController.getString(i2);
                        } else {
                            formatPluralString = LocaleController.formatPluralString("Stories", arrayList.size(), new Object[0]);
                        }
                        formatPluralString = LocaleController.getString(i3);
                    }
                    this.replyNameTextView.setText(formatPluralString);
                    MessagePreviewParams messagePreviewParams11 = this.messagePreviewParams;
                    if (messagePreviewParams11 != null && messagePreviewParams11.hideForwardSendersName) {
                        simpleTextView = this.replyObjectTextView;
                        replaceEmoji = LocaleController.getString(R.string.HiddenSendersNameDescription);
                    } else if ((i11 == -1 || i11 == 0 || i11 == 10 || i11 == 11 || i11 == 19) && arrayList.size() == 1 && ((MessageObject) arrayList.get(0)).messageText != null) {
                        MessageObject messageObject11 = (MessageObject) arrayList.get(0);
                        CharSequence spannableStringBuilder3 = new SpannableStringBuilder(messageObject11.messageText.toString());
                        if (spannableStringBuilder3.length() > 150) {
                            spannableStringBuilder3 = spannableStringBuilder3.subSequence(0, 150);
                        }
                        replaceEmoji = Emoji.replaceEmoji(spannableStringBuilder3, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        if (replaceEmoji instanceof Spannable) {
                            MediaDataController.addTextStyleRuns(messageObject11.messageOwner.entities, messageObject11.messageText, (Spannable) replaceEmoji);
                            TLRPC.Message message3 = messageObject11.messageOwner;
                            if (message3 != null) {
                                replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, message3.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                        }
                        if (i14 == 1) {
                            replaceEmoji = TextUtils.concat(sb4, ": ", replaceEmoji);
                        }
                        simpleTextView = this.replyObjectTextView;
                    } else {
                        simpleTextView = this.replyObjectTextView;
                        replaceEmoji = LocaleController.formatString("ForwardingFromNames", R.string.ForwardingFromNames, sb4);
                    }
                    simpleTextView.setText(replaceEmoji);
                    this.replyObjectHintTextView.setText(LocaleController.getString(R.string.TapForForwardingOptions));
                    z5 = !SharedConfig.forwardingOptionsHintShown;
                }
                if (messageObject4 == null) {
                    messageObject4 = (messageObject2 == null || this.chatActivityEnterTopView.isEditMode()) ? null : messageObject2;
                }
                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
                FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
                FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
                if (messageObject4 == null && TextUtils.isEmpty(MessagesController.getInstance(this.currentAccount).getRestrictionReason(messageObject4.messageOwner.restriction_reason))) {
                    photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, 320);
                    photoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, AndroidUtilities.dp(40.0f));
                    TLObject tLObject2 = messageObject4.photoThumbsObject2;
                    if (photoSize == null) {
                        if (messageObject4.mediaExists) {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.getPhotoSize());
                            if (photoSize != null) {
                                i5 = photoSize.size;
                                photoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.dp(40.0f));
                                tLObject = messageObject4.photoThumbsObject;
                            }
                        } else {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, 320);
                        }
                        i5 = 0;
                        photoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.dp(40.0f));
                        tLObject = messageObject4.photoThumbsObject;
                    } else {
                        tLObject = tLObject2;
                        i5 = 0;
                    }
                } else {
                    photoSize = null;
                    i5 = 0;
                    photoSize2 = null;
                    tLObject = null;
                }
                if (photoSize == photoSize2) {
                    photoSize2 = null;
                }
                if (photoSize != null || (photoSize instanceof TLRPC.TL_photoSizeEmpty) || (photoSize.location instanceof TLRPC.TL_fileLocationUnavailable) || messageObject4.isAnyKindOfSticker() || messageObject4.isSecretMedia() || messageObject4.isWebpageDocument() || this.forwardingPreviewView != null) {
                    this.replyImageView.setImageBitmap(null);
                    this.replyImageLocation = null;
                    this.replyImageLocationObject = null;
                    this.replyImageView.setVisibility(4);
                    f = 52.0f;
                } else {
                    if (messageObject4.isRoundVideo()) {
                        backupImageView = this.replyImageView;
                        f2 = 17.0f;
                    } else {
                        backupImageView = this.replyImageView;
                        f2 = 2.0f;
                    }
                    backupImageView.setRoundRadius(AndroidUtilities.dp(f2));
                    this.replyImageSize = i5;
                    this.replyImageCacheType = 1;
                    this.replyImageLocation = photoSize;
                    this.replyImageThumbLocation = photoSize2;
                    this.replyImageLocationObject = tLObject;
                    this.replyImageHasMediaSpoiler = messageObject4.hasMediaSpoilers();
                    this.replyImageView.setImage(ImageLocation.getForObject(this.replyImageLocation, tLObject), this.replyImageHasMediaSpoiler ? "5_5_b" : "50_50", ImageLocation.getForObject(photoSize2, tLObject), this.replyImageHasMediaSpoiler ? "5_5_b" : "50_50_b", null, i5, 1, messageObject4);
                    this.replyImageView.setVisibility(0);
                    f = 96.0f;
                }
                int dp = AndroidUtilities.dp(f);
                layoutParams3.leftMargin = dp;
                layoutParams2.leftMargin = dp;
                layoutParams.leftMargin = dp;
                this.replyNameTextView.setLayoutParams(layoutParams);
                this.replyObjectTextView.setLayoutParams(layoutParams2);
                this.replyObjectTextView.setLayoutParams(layoutParams3);
                this.chatActivityEnterView.showTopView(true, false);
                z6 = z5;
            }
            z5 = false;
            if (messageObject4 == null) {
            }
            FrameLayout.LayoutParams layoutParams4 = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
            FrameLayout.LayoutParams layoutParams22 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
            FrameLayout.LayoutParams layoutParams32 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
            if (messageObject4 == null) {
            }
            photoSize = null;
            i5 = 0;
            photoSize2 = null;
            tLObject = null;
            if (photoSize == photoSize2) {
            }
            if (photoSize != null) {
            }
            this.replyImageView.setImageBitmap(null);
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
            this.replyImageView.setVisibility(4);
            f = 52.0f;
            int dp2 = AndroidUtilities.dp(f);
            layoutParams32.leftMargin = dp2;
            layoutParams22.leftMargin = dp2;
            layoutParams4.leftMargin = dp2;
            this.replyNameTextView.setLayoutParams(layoutParams4);
            this.replyObjectTextView.setLayoutParams(layoutParams22);
            this.replyObjectTextView.setLayoutParams(layoutParams32);
            this.chatActivityEnterView.showTopView(true, false);
            z6 = z5;
        }
        Runnable runnable = this.tapForForwardingOptionsHitRunnable;
        if (z6) {
            if (runnable == null) {
                Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda81
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showFieldPanel$129();
                    }
                };
                this.tapForForwardingOptionsHitRunnable = runnable2;
                AndroidUtilities.runOnUIThread(runnable2, 6000L);
                return;
            }
            return;
        }
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.tapForForwardingOptionsHitRunnable = null;
        }
        this.replyObjectTextView.setAlpha(1.0f);
        this.replyObjectHintTextView.setAlpha(0.0f);
    }

    public void showFieldPanelForEdit(boolean z, MessageObject messageObject) {
        showFieldPanel(z, null, messageObject, null, null, true, 0, null, false, true);
    }

    public void showFieldPanelForForward(boolean z, ArrayList arrayList) {
        showFieldPanel(z, null, null, arrayList, null, true, 0, null, false, true);
    }

    public void showFieldPanelForReply(MessageObject messageObject) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, null, false, true);
    }

    public void showFieldPanelForReplyQuote(MessageObject messageObject, ReplyQuote replyQuote) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, replyQuote, false, true);
    }

    public void showFieldPanelForWebPage(boolean z, TLRPC.WebPage webPage, boolean z2) {
        showFieldPanel(z, null, null, null, webPage, true, 0, null, z2, true);
    }

    public void showNoQuoteFound() {
        BulletinFactory.of(this).createSimpleBulletin(R.raw.error, LocaleController.getString(R.string.QuoteNotFound)).show(true);
    }

    public void showOpenGameAlert(final TLRPC.TL_game tL_game, final MessageObject messageObject, final String str, boolean z, final long j) {
        String str2;
        TLRPC.User user = getMessagesController().getUser(Long.valueOf(j));
        str2 = "";
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString(R.string.AppName));
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, user != null ? ContactsController.formatName(user.first_name, user.last_name) : ""));
            builder.setPositiveButton(LocaleController.getString(R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda44
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$showOpenGameAlert$307(tL_game, messageObject, str, j, dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
            showDialog(builder.create());
            return;
        }
        String publicUsername = UserObject.getPublicUsername(user);
        if (Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            if (this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) == this) {
                presentFragment(new WebviewActivity(str, (user == null || TextUtils.isEmpty(publicUsername)) ? "" : publicUsername, tL_game.title, tL_game.short_name, messageObject));
                return;
            }
            return;
        }
        Activity parentActivity = getParentActivity();
        String str3 = tL_game.short_name;
        if (user != null && publicUsername != null) {
            str2 = publicUsername;
        }
        WebviewActivity.openGameInBrowser(str, messageObject, parentActivity, str3, str2);
    }

    public void showPremiumFloodWaitBulletin(final boolean z) {
        long currentTimeMillis = System.currentTimeMillis();
        if (currentTimeMillis - ConnectionsManager.lastPremiumFloodWaitShown < MessagesController.getInstance(this.currentAccount).uploadPremiumSpeedupNotifyPeriod * 1000) {
            return;
        }
        ConnectionsManager.lastPremiumFloodWaitShown = currentTimeMillis;
        if (UserConfig.getInstance(this.currentAccount).isPremium() || MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked()) {
            return;
        }
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        double round = Math.round((z ? messagesController.uploadPremiumSpeedupUpload : messagesController.uploadPremiumSpeedupDownload) * 10.0f);
        Double.isNaN(round);
        SpannableString spannableString = new SpannableString(Double.toString(round / 10.0d).replaceAll("\\.0$", ""));
        spannableString.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableString.length(), 33);
        if (hasStoryViewer()) {
            return;
        }
        BulletinFactory.of(this).createSimpleBulletin(R.raw.speed_limit, LocaleController.getString(z ? R.string.UploadSpeedLimited : R.string.DownloadSpeedLimited), AndroidUtilities.replaceCharSequence("%d", AndroidUtilities.premiumText(LocaleController.getString(z ? R.string.UploadSpeedLimitedMessage : R.string.DownloadSpeedLimitedMessage), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda243
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showPremiumFloodWaitBulletin$341(z);
            }
        }), spannableString)).setDuration(8000).show(true);
    }

    public void showQuoteMessageUpdate() {
        if (this.quoteMessageUpdateAlert != null) {
            return;
        }
        this.quoteMessageUpdateAlert = new AlertDialog.Builder(getContext(), getResourceProvider()).setTitle(LocaleController.getString(R.string.UpdatedQuoteTitle)).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(R.string.UpdatedQuoteMessage, this.replyingMessageObject != null ? getMessagesController().getFullName(this.replyingMessageObject.getSenderId()) : ""))).setPositiveButton(LocaleController.getString(R.string.Edit), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda204
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$175(dialogInterface, i);
            }
        }).setNegativeButton(LocaleController.getString(R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda205
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$176(dialogInterface, i);
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda206
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$177(dialogInterface);
            }
        }).show();
    }

    public void showRequestUrlAlert(final TLRPC.TL_urlAuthResultRequest tL_urlAuthResultRequest, final TLRPC.TL_messages_requestUrlAuth tL_messages_requestUrlAuth, final String str, final boolean z) {
        int i = 2;
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString(R.string.OpenUrlTitle));
        String string = LocaleController.getString(R.string.OpenUrlAlert2);
        int indexOf = string.indexOf("%");
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(String.format(string, str));
        if (indexOf >= 0) {
            spannableStringBuilder.setSpan(new URLSpan(str), indexOf, str.length() + indexOf, 33);
        }
        builder.setMessage(spannableStringBuilder);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString(R.string.Cancel), null);
        final CheckBoxCell[] checkBoxCellArr = new CheckBoxCell[2];
        LinearLayout linearLayout = new LinearLayout(getParentActivity());
        linearLayout.setOrientation(1);
        TLRPC.User currentUser = getUserConfig().getCurrentUser();
        int i2 = 0;
        while (true) {
            if (i2 >= (tL_urlAuthResultRequest.request_write_access ? 2 : 1)) {
                builder.setView(linearLayout);
                builder.setPositiveButton(LocaleController.getString(R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda1
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i3) {
                        ChatActivity.this.lambda$showRequestUrlAlert$323(checkBoxCellArr, str, tL_messages_requestUrlAuth, tL_urlAuthResultRequest, z, dialogInterface, i3);
                    }
                });
                showDialog(builder.create());
                return;
            }
            CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 5, this.themeDelegate);
            checkBoxCellArr[i2] = checkBoxCell;
            checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
            checkBoxCellArr[i2].setMultiline(true);
            checkBoxCellArr[i2].setTag(Integer.valueOf(i2));
            if (i2 == 0) {
                int i3 = R.string.OpenUrlOption1;
                String str2 = tL_urlAuthResultRequest.domain;
                String formatName = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
                Object[] objArr = new Object[i];
                objArr[0] = str2;
                objArr[1] = formatName;
                SpannableStringBuilder replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", i3, objArr));
                int indexOf2 = TextUtils.indexOf(replaceTags, tL_urlAuthResultRequest.domain);
                if (indexOf2 >= 0) {
                    replaceTags.setSpan(new URLSpan(""), indexOf2, tL_urlAuthResultRequest.domain.length() + indexOf2, 33);
                }
                checkBoxCellArr[i2].setText(replaceTags, "", true, false);
            } else {
                checkBoxCellArr[i2].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, UserObject.getFirstName(tL_urlAuthResultRequest.bot))), "", true, false);
            }
            checkBoxCellArr[i2].setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
            linearLayout.addView(checkBoxCellArr[i2], LayoutHelper.createLinear(-1, -2));
            checkBoxCellArr[i2].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.lambda$showRequestUrlAlert$318(checkBoxCellArr, view);
                }
            });
            i2++;
            i = 2;
        }
    }

    public void showTimerHint() {
        if (getParentActivity() == null || this.fragmentView == null || this.chatInfo == null) {
            return;
        }
        if (this.timerHintView == null) {
            HintView hintView = new HintView(getParentActivity(), 7, true, this.themeDelegate);
            this.timerHintView = hintView;
            hintView.setAlpha(0.0f);
            this.timerHintView.setVisibility(4);
            this.timerHintView.setShowingDuration(4000L);
            this.contentView.addView(this.timerHintView, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        int i = this.chatInfo.ttl_period;
        this.timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", R.string.AutoDeleteSetInfo, i > 86400 ? LocaleController.formatPluralString("Days", i / 86400, new Object[0]) : i >= 3600 ? LocaleController.formatPluralString("Hours", i / 3600, new Object[0]) : i >= 60 ? LocaleController.formatPluralString("Minutes", i / 60, new Object[0]) : LocaleController.formatPluralString("Seconds", i, new Object[0])));
        this.timerHintView.showForView(this.avatarContainer.getTimeItem(), true);
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void startDocumentSelectActivity() {
        try {
            Intent intent = new Intent("android.intent.action.GET_CONTENT");
            intent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
            intent.setType("*/*");
            startActivityForResult(intent, 21);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public /* synthetic */ void startMusicSelectActivity() {
        ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate.-CC.$default$startMusicSelectActivity(this);
    }

    public boolean supportsThanosEffect() {
        return ThanosEffect.supports() && LiteMode.isEnabled(65536);
    }

    public void updateMessages(ArrayList arrayList, boolean z) {
        for (int i = 0; i < arrayList.size(); i++) {
            this.chatAdapter.updateRowWithMessageObject((MessageObject) arrayList.get(i), false, z);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:111:0x01f9, code lost:
        if (((r12.getMeasuredHeight() * ((r5 == null || r5.getCurrentPosition() == null) ? 0.8f : 1.0f)) + r7) < r2) goto L84;
     */
    /* JADX WARN: Code restructure failed: missing block: B:42:0x00e9, code lost:
        if (r10 != r11) goto L351;
     */
    /* JADX WARN: Code restructure failed: missing block: B:547:0x0a20, code lost:
        if (r59.pinnedMessageIds.isEmpty() == false) goto L566;
     */
    /* JADX WARN: Code restructure failed: missing block: B:647:0x0b92, code lost:
        if (r0 >= 0) goto L532;
     */
    /* JADX WARN: Removed duplicated region for block: B:116:0x020a  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0264  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x026b  */
    /* JADX WARN: Removed duplicated region for block: B:203:0x046c  */
    /* JADX WARN: Removed duplicated region for block: B:213:0x0487  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x048e  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x04d9  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x04e6  */
    /* JADX WARN: Removed duplicated region for block: B:243:0x04ee  */
    /* JADX WARN: Removed duplicated region for block: B:264:0x054e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:315:0x0629  */
    /* JADX WARN: Removed duplicated region for block: B:323:0x063d  */
    /* JADX WARN: Removed duplicated region for block: B:352:0x0693  */
    /* JADX WARN: Removed duplicated region for block: B:357:0x06a1  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x0763  */
    /* JADX WARN: Removed duplicated region for block: B:399:0x0775  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00ff  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0108  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x010f  */
    /* JADX WARN: Removed duplicated region for block: B:551:0x0a28  */
    /* JADX WARN: Removed duplicated region for block: B:561:0x0a4a  */
    /* JADX WARN: Removed duplicated region for block: B:567:0x0a5c  */
    /* JADX WARN: Removed duplicated region for block: B:578:0x0a7a  */
    /* JADX WARN: Removed duplicated region for block: B:581:0x0a96  */
    /* JADX WARN: Removed duplicated region for block: B:591:0x0ab0  */
    /* JADX WARN: Removed duplicated region for block: B:610:0x0b18  */
    /* JADX WARN: Removed duplicated region for block: B:614:0x0b26  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x013b  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x0bf2  */
    /* JADX WARN: Removed duplicated region for block: B:672:0x0c1f  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:689:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0198  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x019b  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x01a4  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01d0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateMessagesVisiblePart(boolean z) {
        int indexOf;
        int i;
        int i2;
        int i3;
        int i4;
        BlurredFrameLayout blurredFrameLayout;
        Runnable runnable;
        ChatActionCell chatActionCell;
        View view;
        int i5;
        int i6;
        int i7;
        int i8;
        boolean z2;
        Object obj;
        Object obj2;
        TLRPC.Message message;
        boolean z3;
        boolean z4;
        boolean z5;
        ChatMessageCell chatMessageCell;
        boolean z6;
        float f;
        float f2;
        MessageObject messageObject;
        float f3;
        ChatMessageCell chatMessageCell2;
        boolean z7;
        int i9;
        int i10;
        int i11;
        int i12;
        int i13;
        int i14;
        boolean z8;
        boolean z9;
        int measuredHeight;
        int keyboardHeight;
        boolean z10;
        boolean z11;
        boolean z12;
        MessageObject messageObject2;
        boolean z13;
        int i15;
        int i16;
        boolean z14;
        ChatMessageCell chatMessageCell3;
        MessageObject messageObject3;
        boolean z15;
        ChatListItemAnimator chatListItemAnimator;
        ChatMessageCell chatMessageCell4;
        ChatListItemAnimator chatListItemAnimator2;
        boolean z16;
        int i17 = -1;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null || this.fragmentView == null) {
            return;
        }
        int childCount = recyclerListView.getChildCount();
        int measuredHeight2 = this.chatListView.getMeasuredHeight();
        boolean z17 = this.threadMessageVisible;
        int i18 = this.currentPinnedMessageId;
        this.threadMessageVisible = this.firstLoading;
        long j = this.threadMessageId;
        Integer valueOf = (j == 0 || this.currentChat == null) ? getMessagesController().dialogs_read_inbox_max.get(this.dialog_id_Long) : Integer.valueOf(this.replyMaxReadId);
        if (valueOf == null) {
            valueOf = 0;
        }
        Integer num = valueOf;
        int heightWithKeyboard = (this.contentView.getHeightWithKeyboard() - ((this.inPreviewMode || this.isInsideContainer) ? 0 : AndroidUtilities.dp(48.0f))) - this.chatListView.getTop();
        this.pollsToCheck.clear();
        float f4 = this.chatListViewPaddingTop;
        long currentTimeMillis = System.currentTimeMillis();
        boolean z18 = SharedConfig.chatBlurEnabled() && Color.alpha(Theme.getColor(Theme.key_chat_BlurAlpha)) != 255;
        MessageObject messageObject4 = this.isTopic ? this.topicStarterMessageObject : this.threadMessageObject;
        float f5 = f4 - this.chatListViewPaddingVisibleOffset;
        float measuredHeight3 = this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset;
        boolean z19 = !UserConfig.getInstance(this.currentAccount).isPremium();
        int i19 = -1;
        int i20 = 0;
        boolean z20 = false;
        int i21 = -1;
        int i22 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i23 = Integer.MIN_VALUE;
        int i24 = Integer.MIN_VALUE;
        MessageObject messageObject5 = null;
        View view2 = null;
        View view3 = null;
        View view4 = null;
        int i25 = Integer.MIN_VALUE;
        int i26 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i27 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        while (i20 < childCount) {
            View childAt = this.chatListView.getChildAt(i20);
            int childAdapterPosition = this.chatListView.getChildAdapterPosition(childAt);
            if (childAdapterPosition >= 0) {
                if (childAdapterPosition > i19 || i19 == i17) {
                    i19 = childAdapterPosition;
                }
                if (childAdapterPosition >= i21) {
                }
                int i28 = i19;
                int y = (int) childAt.getY();
                int measuredHeight4 = y + childAt.getMeasuredHeight();
                int i29 = i20;
                z4 = childAt instanceof ChatMessageCell;
                if (z4) {
                    z5 = z4;
                    chatMessageCell = null;
                } else {
                    z5 = z4;
                    chatMessageCell = (ChatMessageCell) childAt;
                }
                int i30 = i18;
                if (chatMessageCell == null) {
                    if (y >= f4 || measuredHeight4 <= f4) {
                        z6 = z17;
                        if (measuredHeight4 <= this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset || y >= this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                            z16 = false;
                            chatMessageCell.isBlurred = z16;
                        }
                    } else {
                        z6 = z17;
                    }
                    z16 = true;
                    chatMessageCell.isBlurred = z16;
                } else {
                    z6 = z17;
                }
                f = measuredHeight4;
                if (f > f5) {
                    float f6 = y;
                    if (f6 <= measuredHeight3) {
                        if (chatMessageCell != null) {
                            i9 = i28;
                            i10 = childAdapterPosition;
                            chatMessageCell.setVisibleOnScreen(true, f5 - f6, f - measuredHeight3);
                            if (z19) {
                                if (chatMessageCell.checkLoadCaughtPremiumFloodWait()) {
                                    showPremiumFloodWaitBulletin(false);
                                } else if (chatMessageCell.checkUploadCaughtPremiumFloodWait()) {
                                    showPremiumFloodWaitBulletin(true);
                                }
                                z9 = false;
                                int i31 = y < 0 ? 0 : -y;
                                measuredHeight = childAt.getMeasuredHeight();
                                if (measuredHeight > measuredHeight2) {
                                    measuredHeight = i31 + measuredHeight2;
                                }
                                keyboardHeight = this.contentView.getKeyboardHeight();
                                if ((keyboardHeight < AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()) || this.chatActivityEnterView.panelAnimationInProgress()) {
                                    keyboardHeight = this.chatActivityEnterView.getEmojiPadding();
                                }
                                if (!BaseFragment.hasSheets(this)) {
                                    TLRPC.Chat chat = this.currentChat;
                                    if (chat != null && ChatObject.isChannelAndNotMegaGroup(chat)) {
                                        if (childAt.getMeasuredHeight() > 0) {
                                        }
                                    }
                                    z10 = true;
                                    float serviceTop = getServiceTop(childAt);
                                    float f7 = measuredHeight3;
                                    int serviceHeight = getServiceHeight(childAt);
                                    if (chatMessageCell == null) {
                                        final MessageObject messageObject6 = chatMessageCell.getMessageObject();
                                        i11 = childCount;
                                        i12 = measuredHeight2;
                                        if (messageObject6.getDialogId() == this.dialog_id) {
                                            i16 = i24;
                                            if (messageObject6.getId() > i16) {
                                                i24 = messageObject6.getId();
                                                messageObject5 = messageObject6;
                                                chatMessageCell.setParentBounds((((SharedConfig.chatBlurEnabled() || !this.contentView.DRAW_USING_RENDERNODE()) ? this.chatListViewPaddingTop : 0.0f) - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset);
                                                chatMessageCell.setVisiblePart(i31, measuredHeight - i31, heightWithKeyboard, keyboardHeight, ((childAt.getY() + (!isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY()) - ((1.0f - this.contentPanTranslationT) * this.chatListViewPaddingTop), this.contentView.getMeasuredWidth(), this.contentView.getBackgroundSizeY(), this.blurredViewTopOffset, this.blurredViewBottomOffset);
                                                markSponsoredAsRead(messageObject6);
                                                if (!this.threadMessageVisible && messageObject4 != null && ((messageObject6 == messageObject4 || (this.isTopic && messageObject6.getId() == messageObject4.getId())) && chatMessageCell.getBottom() > this.chatListViewPaddingTop)) {
                                                    this.threadMessageVisible = true;
                                                }
                                                if (this.videoPlayerContainer == null && ((messageObject6.isVideo() || messageObject6.isRoundVideo()) && !messageObject6.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject6))) {
                                                    ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                                    if (f6 + photoImage.getImageY2() < 0.0f) {
                                                        z14 = false;
                                                    } else {
                                                        this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                                                        this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                                                        this.fragmentView.invalidate();
                                                        this.videoPlayerContainer.invalidate();
                                                        z14 = true;
                                                    }
                                                } else {
                                                    z14 = z20;
                                                }
                                                if (this.startFromVideoTimestamp >= 0 && this.fragmentOpened && !this.chatListView.isFastScrollAnimationRunning() && this.startFromVideoMessageId == messageObject6.getId() && (messageObject6.isVideo() || messageObject6.isRoundVideo() || messageObject6.isVoice() || messageObject6.isMusic())) {
                                                    messageObject6.forceSeekTo = this.startFromVideoTimestamp / ((float) messageObject6.getDuration());
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda38
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            ChatActivity.this.lambda$updateMessagesVisiblePart$135(messageObject6);
                                                        }
                                                    }, 40L);
                                                    this.startFromVideoTimestamp = -1;
                                                }
                                                if (this.fragmentOpened || !this.openAnimationEnded || (((chatListItemAnimator2 = this.chatListItemAnimator) != null && chatListItemAnimator2.isRunning()) || !chatMessageCell.checkUnreadReactions(f4, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset))) {
                                                    messageObject = messageObject4;
                                                    f3 = f4;
                                                    chatMessageCell3 = chatMessageCell;
                                                    messageObject3 = messageObject6;
                                                    i13 = i29;
                                                    z11 = z5;
                                                    i14 = i30;
                                                    z8 = z6;
                                                    f2 = f7;
                                                } else {
                                                    this.reactionsMentionCount--;
                                                    getMessagesStorage().markMessageReactionsAsRead(getDialogId(), getTopicId(), chatMessageCell.getMessageObject().getId(), true);
                                                    if (this.reactionsMentionCount <= 0) {
                                                        getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
                                                    }
                                                    if (this.reactionsMentionCount >= 0) {
                                                        TLRPC.MessagePeerReaction randomUnreadReaction = chatMessageCell.getMessageObject().getRandomUnreadReaction();
                                                        if (randomUnreadReaction != null) {
                                                            f2 = f7;
                                                            messageObject = messageObject4;
                                                            f3 = f4;
                                                            chatMessageCell3 = chatMessageCell;
                                                            i13 = i29;
                                                            z11 = z5;
                                                            i14 = i30;
                                                            messageObject3 = messageObject6;
                                                            z8 = z6;
                                                            ReactionsEffectOverlay.show(this, null, chatMessageCell, null, 0.0f, 0.0f, ReactionsLayoutInBubble.VisibleReaction.fromTL(randomUnreadReaction.reaction), this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
                                                            ReactionsEffectOverlay.startAnimation();
                                                        } else {
                                                            messageObject = messageObject4;
                                                            f3 = f4;
                                                            chatMessageCell3 = chatMessageCell;
                                                            messageObject3 = messageObject6;
                                                            i13 = i29;
                                                            z11 = z5;
                                                            i14 = i30;
                                                            z8 = z6;
                                                            f2 = f7;
                                                        }
                                                        chatMessageCell3.markReactionsAsRead();
                                                    } else {
                                                        messageObject = messageObject4;
                                                        f3 = f4;
                                                        chatMessageCell3 = chatMessageCell;
                                                        messageObject3 = messageObject6;
                                                        i13 = i29;
                                                        z11 = z5;
                                                        i14 = i30;
                                                        z8 = z6;
                                                        f2 = f7;
                                                        this.reactionsMentionCount = 0;
                                                    }
                                                    updateReactionsMentionButton(true);
                                                }
                                                getDownloadController().checkUnviewedDownloads(chatMessageCell3.getId(), this.dialog_id);
                                                if (messageObject3.getEffect() != null) {
                                                    messageObject2 = messageObject3;
                                                    TLRPC.MessageMedia messageMedia = messageObject2.messageOwner.media;
                                                    if ((messageMedia == null || messageMedia.nopremium) && (!messageObject2.isAnimatedEmojiStickerSingle() || this.dialog_id <= 0)) {
                                                        z15 = false;
                                                        chatListItemAnimator = this.chatListItemAnimator;
                                                        if (!(chatListItemAnimator == null && chatListItemAnimator.isRunning()) && ((!messageObject2.isOutOwner() || messageObject2.forcePlayEffect) && z15 && !messageObject2.messageOwner.premiumEffectWasPlayed && ((messageObject2.isPremiumSticker() || chatMessageCell3.getEffect() != null || messageObject2.isAnimatedEmojiStickerSingle()) && this.emojiAnimationsOverlay.isIdle()))) {
                                                            chatMessageCell4 = chatMessageCell3;
                                                            if (this.emojiAnimationsOverlay.checkPosition(chatMessageCell4, this.chatListViewPaddingTop, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset)) {
                                                                this.emojiAnimationsOverlay.onTapItem(chatMessageCell4, this, false);
                                                                z12 = z14;
                                                            }
                                                        } else {
                                                            chatMessageCell4 = chatMessageCell3;
                                                        }
                                                        if (messageObject2.isAnimatedAnimatedEmoji()) {
                                                            this.emojiAnimationsOverlay.preloadAnimation(chatMessageCell4);
                                                        }
                                                        z12 = z14;
                                                    }
                                                } else {
                                                    messageObject2 = messageObject3;
                                                }
                                                z15 = true;
                                                chatListItemAnimator = this.chatListItemAnimator;
                                                if (chatListItemAnimator == null) {
                                                }
                                                chatMessageCell4 = chatMessageCell3;
                                                if (this.emojiAnimationsOverlay.checkPosition(chatMessageCell4, this.chatListViewPaddingTop, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset)) {
                                                }
                                                if (messageObject2.isAnimatedAnimatedEmoji()) {
                                                }
                                                z12 = z14;
                                            }
                                        } else {
                                            i16 = i24;
                                        }
                                        i24 = i16;
                                        chatMessageCell.setParentBounds((((SharedConfig.chatBlurEnabled() || !this.contentView.DRAW_USING_RENDERNODE()) ? this.chatListViewPaddingTop : 0.0f) - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset);
                                        chatMessageCell.setVisiblePart(i31, measuredHeight - i31, heightWithKeyboard, keyboardHeight, ((childAt.getY() + (!isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY()) - ((1.0f - this.contentPanTranslationT) * this.chatListViewPaddingTop), this.contentView.getMeasuredWidth(), this.contentView.getBackgroundSizeY(), this.blurredViewTopOffset, this.blurredViewBottomOffset);
                                        markSponsoredAsRead(messageObject6);
                                        if (!this.threadMessageVisible) {
                                            this.threadMessageVisible = true;
                                        }
                                        if (this.videoPlayerContainer == null) {
                                        }
                                        z14 = z20;
                                        if (this.startFromVideoTimestamp >= 0) {
                                            messageObject6.forceSeekTo = this.startFromVideoTimestamp / ((float) messageObject6.getDuration());
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda38
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatActivity.this.lambda$updateMessagesVisiblePart$135(messageObject6);
                                                }
                                            }, 40L);
                                            this.startFromVideoTimestamp = -1;
                                        }
                                        if (this.fragmentOpened) {
                                        }
                                        messageObject = messageObject4;
                                        f3 = f4;
                                        chatMessageCell3 = chatMessageCell;
                                        messageObject3 = messageObject6;
                                        i13 = i29;
                                        z11 = z5;
                                        i14 = i30;
                                        z8 = z6;
                                        f2 = f7;
                                        getDownloadController().checkUnviewedDownloads(chatMessageCell3.getId(), this.dialog_id);
                                        if (messageObject3.getEffect() != null) {
                                        }
                                        z15 = true;
                                        chatListItemAnimator = this.chatListItemAnimator;
                                        if (chatListItemAnimator == null) {
                                        }
                                        chatMessageCell4 = chatMessageCell3;
                                        if (this.emojiAnimationsOverlay.checkPosition(chatMessageCell4, this.chatListViewPaddingTop, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset)) {
                                        }
                                        if (messageObject2.isAnimatedAnimatedEmoji()) {
                                        }
                                        z12 = z14;
                                    } else {
                                        messageObject = messageObject4;
                                        f3 = f4;
                                        i11 = childCount;
                                        i12 = measuredHeight2;
                                        int i32 = i24;
                                        i13 = i29;
                                        z11 = z5;
                                        i14 = i30;
                                        z8 = z6;
                                        f2 = f7;
                                        if (childAt instanceof ChatActionCell) {
                                            ChatActionCell chatActionCell2 = (ChatActionCell) childAt;
                                            MessageObject messageObject7 = chatActionCell2.getMessageObject();
                                            if (messageObject7 != null) {
                                                z13 = z20;
                                                if (messageObject7.getDialogId() == this.dialog_id && messageObject7.getId() > i32) {
                                                    i24 = Math.max(i32, messageObject7.getId());
                                                    chatActionCell2.setVisiblePart(serviceTop, serviceHeight);
                                                    messageObject2 = messageObject7;
                                                    z12 = z13;
                                                }
                                            } else {
                                                z13 = z20;
                                            }
                                            i24 = i32;
                                            chatActionCell2.setVisiblePart(serviceTop, serviceHeight);
                                            messageObject2 = messageObject7;
                                            z12 = z13;
                                        } else {
                                            boolean z21 = z20;
                                            if (childAt instanceof BotHelpCell) {
                                                childAt.invalidate();
                                            } else if (childAt instanceof ChatLoadingCell) {
                                                ((ChatLoadingCell) childAt).setVisiblePart(serviceTop, serviceHeight);
                                            }
                                            z12 = z21;
                                            i24 = i32;
                                            messageObject2 = null;
                                        }
                                    }
                                    if (this.chatMode != 1 || messageObject2 == null) {
                                        i22 = i22;
                                        i25 = i25;
                                        i23 = i23;
                                    } else {
                                        int id = messageObject2.getId();
                                        if ((isThreadChat() || !z10 || ((messageObject2.isOut() || !messageObject2.isUnread()) && (!messageObject2.messageOwner.from_scheduled || id <= num.intValue()))) && (!isThreadChat() || id <= 0 || id <= num.intValue() || id <= this.replyMaxReadId)) {
                                            i22 = i22;
                                            i25 = i25;
                                            i23 = i23;
                                        } else {
                                            MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject2);
                                            if (validGroupedMessage != null) {
                                                Iterator<MessageObject> it = validGroupedMessage.messages.iterator();
                                                int i33 = i22;
                                                int i34 = i23;
                                                int i35 = i25;
                                                while (it.hasNext()) {
                                                    MessageObject next = it.next();
                                                    int id2 = next.getId();
                                                    if (id2 > 0) {
                                                        i35 = Math.max(i35, id2);
                                                    }
                                                    if (id2 < 0 && !isThreadChat()) {
                                                        i33 = Math.min(i33, id2);
                                                    }
                                                    i34 = Math.max(i34, next.messageOwner.date);
                                                }
                                                i22 = i33;
                                                i23 = i34;
                                                i25 = i35;
                                            } else {
                                                if (id > 0) {
                                                    i25 = Math.max(i25, messageObject2.getId());
                                                }
                                                i22 = (id >= 0 || isThreadChat()) ? i22 : Math.min(i22, messageObject2.getId());
                                                i23 = Math.max(i23, messageObject2.messageOwner.date);
                                            }
                                        }
                                        if (messageObject2.type == 17 && messageObject2.getId() > 0) {
                                            this.pollsToCheck.add(messageObject2);
                                        }
                                    }
                                    if (f > f3) {
                                        if ((childAt instanceof ChatActionCell) && messageObject2 != null && messageObject2.isDateObject) {
                                            childAt.setAlpha(0.0f);
                                        }
                                        z7 = z12;
                                        z19 = z9;
                                    } else {
                                        int bottom = childAt.getBottom();
                                        int i36 = i26;
                                        if (bottom < i36) {
                                            if (z11 || (childAt instanceof ChatActionCell)) {
                                                view4 = childAt;
                                            }
                                            i26 = bottom;
                                            view3 = childAt;
                                        } else {
                                            i26 = i36;
                                        }
                                        ChatListItemAnimator chatListItemAnimator3 = this.chatListItemAnimator;
                                        if ((chatListItemAnimator3 == null || !(chatListItemAnimator3.willRemoved(childAt) || this.chatListItemAnimator.willAddedFromAlpha(childAt))) && (childAt instanceof ChatActionCell) && messageObject2 != null && messageObject2.isDateObject) {
                                            if (childAt.getAlpha() != 1.0f) {
                                                childAt.setAlpha(1.0f);
                                            }
                                            i15 = i27;
                                            if (bottom < i15) {
                                                i27 = bottom;
                                                z7 = z12;
                                                z19 = z9;
                                                view2 = childAt;
                                            }
                                        } else {
                                            i15 = i27;
                                        }
                                        z7 = z12;
                                        z19 = z9;
                                        i27 = i15;
                                    }
                                    i20 = i13 + 1;
                                    z20 = z7;
                                    measuredHeight3 = f2;
                                    messageObject4 = messageObject;
                                    f4 = f3;
                                    i19 = i9;
                                    i21 = i10;
                                    childCount = i11;
                                    measuredHeight2 = i12;
                                    i18 = i14;
                                    z17 = z8;
                                    i17 = -1;
                                }
                                z10 = false;
                                float serviceTop2 = getServiceTop(childAt);
                                float f72 = measuredHeight3;
                                int serviceHeight2 = getServiceHeight(childAt);
                                if (chatMessageCell == null) {
                                }
                                if (this.chatMode != 1) {
                                }
                                i22 = i22;
                                i25 = i25;
                                i23 = i23;
                                if (f > f3) {
                                }
                                i20 = i13 + 1;
                                z20 = z7;
                                measuredHeight3 = f2;
                                messageObject4 = messageObject;
                                f4 = f3;
                                i19 = i9;
                                i21 = i10;
                                childCount = i11;
                                measuredHeight2 = i12;
                                i18 = i14;
                                z17 = z8;
                                i17 = -1;
                            }
                        } else {
                            i9 = i28;
                            i10 = childAdapterPosition;
                        }
                        z9 = z19;
                        if (y < 0) {
                        }
                        measuredHeight = childAt.getMeasuredHeight();
                        if (measuredHeight > measuredHeight2) {
                        }
                        keyboardHeight = this.contentView.getKeyboardHeight();
                        if (keyboardHeight < AndroidUtilities.dp(20.0f)) {
                            keyboardHeight = this.chatActivityEnterView.getEmojiPadding();
                            if (!BaseFragment.hasSheets(this)) {
                            }
                            z10 = false;
                            float serviceTop22 = getServiceTop(childAt);
                            float f722 = measuredHeight3;
                            int serviceHeight22 = getServiceHeight(childAt);
                            if (chatMessageCell == null) {
                            }
                            if (this.chatMode != 1) {
                            }
                            i22 = i22;
                            i25 = i25;
                            i23 = i23;
                            if (f > f3) {
                            }
                            i20 = i13 + 1;
                            z20 = z7;
                            measuredHeight3 = f2;
                            messageObject4 = messageObject;
                            f4 = f3;
                            i19 = i9;
                            i21 = i10;
                            childCount = i11;
                            measuredHeight2 = i12;
                            i18 = i14;
                            z17 = z8;
                            i17 = -1;
                        }
                        keyboardHeight = this.chatActivityEnterView.getEmojiPadding();
                        if (!BaseFragment.hasSheets(this)) {
                        }
                        z10 = false;
                        float serviceTop222 = getServiceTop(childAt);
                        float f7222 = measuredHeight3;
                        int serviceHeight222 = getServiceHeight(childAt);
                        if (chatMessageCell == null) {
                        }
                        if (this.chatMode != 1) {
                        }
                        i22 = i22;
                        i25 = i25;
                        i23 = i23;
                        if (f > f3) {
                        }
                        i20 = i13 + 1;
                        z20 = z7;
                        measuredHeight3 = f2;
                        messageObject4 = messageObject;
                        f4 = f3;
                        i19 = i9;
                        i21 = i10;
                        childCount = i11;
                        measuredHeight2 = i12;
                        i18 = i14;
                        z17 = z8;
                        i17 = -1;
                    }
                }
                f2 = measuredHeight3;
                messageObject = messageObject4;
                f3 = f4;
                chatMessageCell2 = chatMessageCell;
                z7 = z20;
                i9 = i28;
                i10 = childAdapterPosition;
                i11 = childCount;
                i12 = measuredHeight2;
                int i37 = i22;
                int i38 = i23;
                int i39 = i24;
                int i40 = i25;
                int i41 = i26;
                int i42 = i27;
                i13 = i29;
                i14 = i30;
                z8 = z6;
                if (chatMessageCell2 != null) {
                    if (z18) {
                        chatMessageCell2.setVisibleOnScreen(false, 0.0f, 0.0f);
                    } else {
                        chatMessageCell2.setVisibleOnScreen(true, 0.0f, 0.0f);
                        i22 = i37;
                        i25 = i40;
                        i23 = i38;
                        i26 = i41;
                        i27 = i42;
                        i24 = i39;
                        i20 = i13 + 1;
                        z20 = z7;
                        measuredHeight3 = f2;
                        messageObject4 = messageObject;
                        f4 = f3;
                        i19 = i9;
                        i21 = i10;
                        childCount = i11;
                        measuredHeight2 = i12;
                        i18 = i14;
                        z17 = z8;
                        i17 = -1;
                    }
                }
                i22 = i37;
                i25 = i40;
                i23 = i38;
                i26 = i41;
                i27 = i42;
                i24 = i39;
                i20 = i13 + 1;
                z20 = z7;
                measuredHeight3 = f2;
                messageObject4 = messageObject;
                f4 = f3;
                i19 = i9;
                i21 = i10;
                childCount = i11;
                measuredHeight2 = i12;
                i18 = i14;
                z17 = z8;
                i17 = -1;
            }
            childAdapterPosition = i21;
            int i282 = i19;
            int y2 = (int) childAt.getY();
            int measuredHeight42 = y2 + childAt.getMeasuredHeight();
            int i292 = i20;
            z4 = childAt instanceof ChatMessageCell;
            if (z4) {
            }
            int i302 = i18;
            if (chatMessageCell == null) {
            }
            f = measuredHeight42;
            if (f > f5) {
            }
            f2 = measuredHeight3;
            messageObject = messageObject4;
            f3 = f4;
            chatMessageCell2 = chatMessageCell;
            z7 = z20;
            i9 = i282;
            i10 = childAdapterPosition;
            i11 = childCount;
            i12 = measuredHeight2;
            int i372 = i22;
            int i382 = i23;
            int i392 = i24;
            int i402 = i25;
            int i412 = i26;
            int i422 = i27;
            i13 = i292;
            i14 = i302;
            z8 = z6;
            if (chatMessageCell2 != null) {
            }
            i22 = i372;
            i25 = i402;
            i23 = i382;
            i26 = i412;
            i27 = i422;
            i24 = i392;
            i20 = i13 + 1;
            z20 = z7;
            measuredHeight3 = f2;
            messageObject4 = messageObject;
            f4 = f3;
            i19 = i9;
            i21 = i10;
            childCount = i11;
            measuredHeight2 = i12;
            i18 = i14;
            z17 = z8;
            i17 = -1;
        }
        float f8 = f4;
        int i43 = i18;
        boolean z22 = z17;
        int i44 = i22;
        int i45 = i23;
        int i46 = i24;
        int i47 = i25;
        boolean z23 = z20;
        this.currentPinnedMessageId = 0;
        if (!this.pinnedMessageIds.isEmpty() || (this.isTopic && this.maxPinnedMessageId != 0)) {
            if (i46 == Integer.MIN_VALUE) {
                int i48 = this.startLoadFromMessageId;
                if (i48 != 0) {
                    i = i48;
                } else {
                    if (!this.pinnedMessageIds.isEmpty()) {
                        i = ((Integer) this.pinnedMessageIds.get(0)).intValue() + 1;
                    }
                    i = i46;
                }
                ArrayList arrayList = this.pinnedMessageIds;
                i2 = this.forceNextPinnedMessageId;
                if (i2 == 0) {
                    i2 = i;
                }
                this.currentPinnedMessageId = findClosest(arrayList, i2, this.currentPinnedMessageIndex).intValue();
                if (!this.inMenuMode && !this.loadingPinnedMessagesList && !this.pinnedEndReached && (this.isTopic || (!this.pinnedMessageIds.isEmpty() && this.currentPinnedMessageIndex[0] > this.pinnedMessageIds.size() - 2))) {
                    getMediaDataController().loadPinnedMessages(this.dialog_id, this.maxPinnedMessageId, 0);
                    this.loadingPinnedMessagesList = true;
                }
            } else {
                if (i46 < 0 && (indexOf = this.messages.indexOf(messageObject5)) >= 0) {
                    int i49 = indexOf - 1;
                    while (true) {
                        if (i49 < 0) {
                            i = i46;
                            break;
                        }
                        MessageObject messageObject8 = (MessageObject) this.messages.get(i49);
                        if (messageObject8.getId() > 0) {
                            i = messageObject8.getId();
                            break;
                        }
                        i49--;
                    }
                    if (i < 0) {
                        int i50 = indexOf + 1;
                        int size = this.messages.size();
                        while (true) {
                            if (i50 >= size) {
                                break;
                            }
                            MessageObject messageObject9 = (MessageObject) this.messages.get(i50);
                            if (messageObject9.getId() > 0) {
                                i = messageObject9.getId();
                                break;
                            }
                            i50++;
                        }
                    }
                    ArrayList arrayList2 = this.pinnedMessageIds;
                    i2 = this.forceNextPinnedMessageId;
                    if (i2 == 0) {
                    }
                    this.currentPinnedMessageId = findClosest(arrayList2, i2, this.currentPinnedMessageIndex).intValue();
                    if (!this.inMenuMode) {
                        getMediaDataController().loadPinnedMessages(this.dialog_id, this.maxPinnedMessageId, 0);
                        this.loadingPinnedMessagesList = true;
                    }
                }
                i = i46;
                ArrayList arrayList22 = this.pinnedMessageIds;
                i2 = this.forceNextPinnedMessageId;
                if (i2 == 0) {
                }
                this.currentPinnedMessageId = findClosest(arrayList22, i2, this.currentPinnedMessageIndex).intValue();
                if (!this.inMenuMode) {
                }
            }
        }
        getMessagesController().addToPollsQueue(this.dialog_id, this.pollsToCheck);
        this.chatMessagesMetadataController.checkMessages(this.chatAdapter, i19, i21, currentTimeMillis);
        if (this.videoPlayerContainer != null) {
            MediaController mediaController = MediaController.getInstance();
            if (z23) {
                z3 = true;
            } else {
                MessageObject playingMessageObject = mediaController.getPlayingMessageObject();
                if (playingMessageObject != null) {
                    if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                        MediaController.getInstance().cleanupPlayer(true, true);
                    } else {
                        this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
                        this.fragmentView.invalidate();
                        if ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && this.checkTextureViewPosition && !this.chatListView.isFastScrollAnimationRunning()) {
                            mediaController = MediaController.getInstance();
                            z3 = false;
                        }
                    }
                }
            }
            mediaController.setCurrentVideoVisible(z3);
        }
        View view5 = view4;
        if (view5 != null) {
            MessageObject messageObject10 = view5 instanceof ChatMessageCell ? ((ChatMessageCell) view5).getMessageObject() : ((ChatActionCell) view5).getMessageObject();
            if (messageObject10 != null && (message = messageObject10.messageOwner) != null) {
                this.floatingDateView.setCustomDate(message.date, this.chatMode == 1, true);
            }
        }
        this.currentFloatingDateOnScreen = false;
        View view6 = view3;
        this.currentFloatingTopIsNotMessage = ((view6 instanceof ChatMessageCell) || (view6 instanceof ChatActionCell)) ? false : true;
        View view7 = view2;
        if (view7 != null) {
            if (view7.getY() > f8 || this.currentFloatingTopIsNotMessage) {
                if (view7.getAlpha() != 1.0f) {
                    view7.setAlpha(1.0f);
                }
                if (this.chatListView.getChildAdapterPosition(view7) == this.chatAdapter.messagesStartRow + (this.reversed ? 0 : this.messages.size() - 1)) {
                    if (view7.getAlpha() != 1.0f) {
                        view7.setAlpha(1.0f);
                    }
                    AnimatorSet animatorSet = this.floatingDateAnimation;
                    if (animatorSet != null) {
                        animatorSet.cancel();
                        obj = null;
                        this.floatingDateAnimation = null;
                    } else {
                        obj = null;
                    }
                    this.floatingDateView.setTag(obj);
                    this.floatingDateView.setAlpha(0.0f);
                    this.currentFloatingDateOnScreen = false;
                } else {
                    hideFloatingDateView(!this.currentFloatingTopIsNotMessage);
                }
                z2 = false;
            } else {
                if (view7.getAlpha() != 0.0f) {
                    view7.setAlpha(0.0f);
                }
                z2 = true;
            }
            float y3 = (view7.getY() + view7.getMeasuredHeight()) - f8;
            if (y3 <= this.floatingDateView.getMeasuredHeight() || y3 >= this.floatingDateView.getMeasuredHeight() * 2) {
                this.floatingDateViewOffset = 0.0f;
            } else {
                if (this.chatListView.getChildAdapterPosition(view7) == this.chatAdapter.messagesStartRow + (this.reversed ? 0 : this.messages.size() - 1)) {
                    if (view7.getAlpha() != 1.0f) {
                        view7.setAlpha(1.0f);
                    }
                    AnimatorSet animatorSet2 = this.floatingDateAnimation;
                    if (animatorSet2 != null) {
                        animatorSet2.cancel();
                        obj2 = null;
                        this.floatingDateAnimation = null;
                    } else {
                        obj2 = null;
                    }
                    this.floatingDateView.setTag(obj2);
                    this.floatingDateView.setAlpha(0.0f);
                    z2 = false;
                } else {
                    this.floatingDateViewOffset = ((-this.floatingDateView.getMeasuredHeight()) * 2) + y3;
                }
            }
            if (this.chatMode == 5) {
                z2 = false;
            }
            if (z2) {
                AnimatorSet animatorSet3 = this.floatingDateAnimation;
                if (animatorSet3 != null) {
                    animatorSet3.cancel();
                    this.floatingDateAnimation = null;
                }
                if (this.floatingDateView.getTag() == null) {
                    this.floatingDateView.setTag(1);
                }
                if (this.floatingDateView.getAlpha() != 1.0f) {
                    this.floatingDateView.setAlpha(1.0f);
                }
                this.currentFloatingDateOnScreen = true;
            }
        } else {
            hideFloatingDateView(true);
            this.floatingDateViewOffset = 0.0f;
        }
        if (!isThreadChat() || (this.isTopic && !pinnedOnlyStarterMessage())) {
            int i51 = this.currentPinnedMessageId;
            if (i51 != 0) {
                MessageObject messageObject11 = (MessageObject) this.pinnedMessageObjects.get(Integer.valueOf(i51));
                if (messageObject11 == null) {
                    messageObject11 = (MessageObject) this.messagesDict[0].get(this.currentPinnedMessageId);
                }
                if (messageObject11 == null) {
                    if (this.loadingPinnedMessages.indexOfKey(this.currentPinnedMessageId) < 0) {
                        this.loadingPinnedMessages.put(this.currentPinnedMessageId, Boolean.TRUE);
                        ArrayList<Integer> arrayList3 = new ArrayList<>();
                        arrayList3.add(Integer.valueOf(this.currentPinnedMessageId));
                        getMediaDataController().loadPinnedMessages(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, arrayList3, true);
                    }
                    i3 = i43;
                    this.currentPinnedMessageId = i3;
                    final boolean z24 = (!this.fromPullingDownTransition && this.fragmentView.getVisibility() == 0) || (this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
                    i4 = this.currentPinnedMessageId;
                    if (i3 != i4) {
                        final int i52 = i3 == 0 ? 0 : i3 > i4 ? 1 : 2;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda40
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$updateMessagesVisiblePart$137(z24, i52);
                            }
                        });
                    } else if (!this.isTopic || i4 == 0 || ((blurredFrameLayout = this.pinnedMessageView) != null && blurredFrameLayout.getTag() == null)) {
                        updatePinnedListButton(z24);
                    } else {
                        runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda41
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$updateMessagesVisiblePart$138(z24);
                            }
                        };
                        AndroidUtilities.runOnUIThread(runnable);
                    }
                    chatActionCell = this.floatingDateView;
                    if (chatActionCell != null) {
                        chatActionCell.setTranslationY(((this.chatListView.getTranslationY() + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
                    }
                    invalidateChatListViewTopPadding();
                    if (!this.firstLoading && !this.paused && !this.inPreviewMode && this.chatMode == 0 && !getMessagesController().ignoreSetOnline) {
                        int i53 = 0;
                        if (i47 != Integer.MIN_VALUE) {
                            i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            if (i44 == Integer.MAX_VALUE) {
                                if (!this.firstUnreadSent && this.currentEncryptedChat == null && this.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                                    this.newUnreadMessageCount = 0;
                                    if (z) {
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda42
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                ChatActivity.this.inlineUpdate2();
                                            }
                                        });
                                    } else {
                                        inlineUpdate2();
                                    }
                                    MessagesController messagesController = getMessagesController();
                                    long j2 = this.dialog_id;
                                    int i54 = this.minMessageId[0];
                                    messagesController.markDialogAsRead(j2, i54, i54, this.maxDate[0], false, j, 0, true, 0);
                                    if (this.isTopic && this.replyOriginalChat != null) {
                                        getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, Math.max(i47, this.replyMaxReadId), 0, true);
                                    }
                                    this.firstUnreadSent = true;
                                }
                                if (j != 0 && i47 > 0 && this.replyMaxReadId != i47 && this.replyOriginalChat != null) {
                                    this.replyMaxReadId = i47;
                                    getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, this.replyMaxReadId, this.newUnreadMessageCount, true);
                                    if (!this.isTopic) {
                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.commentsRead, Long.valueOf(this.replyOriginalChat.id), Integer.valueOf(this.replyOriginalMessageId), Integer.valueOf(this.replyMaxReadId));
                                    }
                                }
                            }
                        } else {
                            i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        }
                        i6 = 0;
                        i7 = 0;
                        while (i6 < this.messages.size()) {
                            MessageObject messageObject12 = (MessageObject) this.messages.get(i6);
                            int id3 = messageObject12.getId();
                            if (i47 != Integer.MIN_VALUE && id3 > 0 && id3 <= i47 && ((messageObject12.messageOwner.from_scheduled && id3 > num.intValue()) || (messageObject12.isUnread() && !messageObject12.isOut()))) {
                                if (messageObject12.messageOwner.from_scheduled) {
                                    i53++;
                                } else {
                                    messageObject12.setIsRead();
                                }
                                i7++;
                            }
                            if (i44 == i5 || id3 >= 0 || id3 < i44 || !messageObject12.isUnread()) {
                                i8 = 1;
                            } else {
                                messageObject12.setIsRead();
                                i8 = 1;
                                i7++;
                            }
                            i6 += i8;
                        }
                        if ((this.forwardEndReached[0] || i47 != this.minMessageId[0]) && i44 != this.minMessageId[0]) {
                            int i55 = this.newUnreadMessageCount - i7;
                            this.newUnreadMessageCount = i55;
                        }
                        this.newUnreadMessageCount = 0;
                        if (z) {
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda43
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.inlineUpdate1();
                                }
                            });
                        } else {
                            inlineUpdate1();
                        }
                        MessagesController messagesController2 = getMessagesController();
                        long j3 = this.dialog_id;
                        int i56 = this.minMessageId[0];
                        messagesController2.markDialogAsRead(j3, i47, i44, i45, false, j, i7, i47 == i56 || i44 == i56, i53);
                        this.firstUnreadSent = true;
                        if (j != 0) {
                            this.replyMaxReadId = i47;
                            getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, this.replyMaxReadId, this.newUnreadMessageCount, true);
                            if (!this.isTopic) {
                            }
                        }
                    }
                    view = this.progressView2;
                    if (view == null) {
                        view.invalidate();
                        return;
                    }
                    return;
                }
                i3 = i43;
                if (this.fromPullingDownTransition) {
                }
                i4 = this.currentPinnedMessageId;
                if (i3 != i4) {
                }
                chatActionCell = this.floatingDateView;
                if (chatActionCell != null) {
                }
                invalidateChatListViewTopPadding();
                if (!this.firstLoading) {
                    int i532 = 0;
                    if (i47 != Integer.MIN_VALUE) {
                    }
                    i6 = 0;
                    i7 = 0;
                    while (i6 < this.messages.size()) {
                    }
                    if (this.forwardEndReached[0]) {
                    }
                    int i552 = this.newUnreadMessageCount - i7;
                    this.newUnreadMessageCount = i552;
                }
                view = this.progressView2;
                if (view == null) {
                }
            } else {
                i3 = i43;
                if (i3 != 0) {
                }
                if (this.fromPullingDownTransition) {
                }
                i4 = this.currentPinnedMessageId;
                if (i3 != i4) {
                }
                chatActionCell = this.floatingDateView;
                if (chatActionCell != null) {
                }
                invalidateChatListViewTopPadding();
                if (!this.firstLoading) {
                }
                view = this.progressView2;
                if (view == null) {
                }
            }
        } else {
            if (z22 != this.threadMessageVisible) {
                runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$updateMessagesVisiblePart$136();
                    }
                };
                AndroidUtilities.runOnUIThread(runnable);
            }
            chatActionCell = this.floatingDateView;
            if (chatActionCell != null) {
            }
            invalidateChatListViewTopPadding();
            if (!this.firstLoading) {
            }
            view = this.progressView2;
            if (view == null) {
            }
        }
    }

    public void updateReplyMessageHeader(boolean z) {
        String formatPluralString;
        if (this.chatMode == 3) {
            return;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && this.threadMessageId != 0) {
            if (this.isTopic) {
                updateTopicHeader();
            } else {
                if (this.isComments) {
                    MessageObject messageObject = this.threadMessageObject;
                    if (messageObject == null || !messageObject.hasReplies()) {
                        chatAvatarContainer = this.avatarContainer;
                        formatPluralString = LocaleController.getString(R.string.CommentsTitle);
                    } else {
                        chatAvatarContainer = this.avatarContainer;
                        formatPluralString = LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]);
                    }
                } else {
                    MessageObject messageObject2 = this.threadMessageObject;
                    if (messageObject2 != null) {
                        formatPluralString = LocaleController.formatPluralString("Replies", messageObject2.getRepliesCount(), new Object[0]);
                    }
                }
                chatAvatarContainer.setTitle(formatPluralString);
            }
        }
        if (this.replyMessageHeaderObject == null) {
            return;
        }
        String string = LocaleController.getString(this.threadMessageObject.getRepliesCount() == 0 ? this.isComments ? R.string.NoComments : R.string.NoReplies : R.string.DiscussionStarted);
        MessageObject messageObject3 = this.replyMessageHeaderObject;
        messageObject3.messageOwner.message = string;
        messageObject3.messageText = string;
        if (z) {
            this.chatAdapter.updateRowWithMessageObject(messageObject3, true, false);
        }
    }

    protected void updateSearchingHashtag(String str) {
        if (this.chatMode == 7 && !TextUtils.equals(this.searchingHashtag, str)) {
            showMessagesSearchListView(true);
            this.searchingHashtag = str;
            this.searchingQuery = str;
            checkHashtagStories(false);
            clearChatData(true);
            this.startMessageAppearTransitionMs = 0L;
            this.firstMessagesLoaded = false;
            HashtagSearchController.getInstance(this.currentAccount).clearSearchResults(this.searchType);
            this.messagesSearchAdapter.notifyDataSetChanged();
            updateSearchListEmptyView();
            this.hashtagSearchEmptyView.showProgress(true);
            firstLoadMessages();
        }
    }

    public void updateTextureViewPosition(boolean z, boolean z2) {
        boolean z3;
        MessageObject playingMessageObject;
        if (this.fragmentView == null || this.paused) {
            return;
        }
        int childCount = this.chatListView.getChildCount();
        int i = 0;
        while (true) {
            if (i >= childCount) {
                z3 = false;
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && !messageObject.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject))) {
                    ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.videoPlayerContainer.getLayoutParams();
                    if (messageObject.isRoundVideo()) {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, null);
                        int i2 = layoutParams.width;
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        if (i2 != i3 || layoutParams.height != i3) {
                            layoutParams.height = i3;
                            layoutParams.width = i3;
                            this.aspectRatioFrameLayout.setResizeMode(0);
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        float f = (AndroidUtilities.roundPlayingMessageSize + (AndroidUtilities.roundMessageInset * 2)) / AndroidUtilities.roundPlayingMessageSize;
                        float imageWidth = chatMessageCell.getPhotoImage().getImageWidth() / AndroidUtilities.roundPlayingMessageSize;
                        if (this.videoPlayerContainer.getScaleX() != imageWidth) {
                            this.videoPlayerContainer.invalidate();
                            this.fragmentView.invalidate();
                        }
                        this.videoPlayerContainer.setPivotX(0.0f);
                        this.videoPlayerContainer.setPivotY(0.0f);
                        this.videoPlayerContainer.setScaleX(imageWidth);
                        this.videoPlayerContainer.setScaleY(imageWidth);
                        this.videoTextureView.setScaleX(f);
                        this.videoTextureView.setScaleY(f);
                    } else {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, photoImage);
                        if (layoutParams.width != photoImage.getImageWidth() || layoutParams.height != photoImage.getImageHeight()) {
                            this.aspectRatioFrameLayout.setResizeMode(3);
                            layoutParams.width = (int) photoImage.getImageWidth();
                            layoutParams.height = (int) photoImage.getImageHeight();
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        this.videoTextureView.setScaleX(1.0f);
                        this.videoTextureView.setScaleY(1.0f);
                    }
                    this.fragmentView.invalidate();
                    this.videoPlayerContainer.invalidate();
                    z3 = true;
                }
            }
            i++;
        }
        if (!z || this.videoPlayerContainer == null || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || playingMessageObject.eventId != 0) {
            return;
        }
        if (z3) {
            MediaController.getInstance().setCurrentVideoVisible(true);
            if (playingMessageObject.isRoundVideo() || this.scrollToVideo) {
                return;
            }
            this.chatListView.invalidate();
        } else if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
            this.fragmentView.invalidate();
            if (playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) {
                if (this.checkTextureViewPosition || PipRoundVideoView.getInstance() != null) {
                    MediaController.getInstance().setCurrentVideoVisible(false);
                } else if (z2) {
                    scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true, 0);
                }
            }
        }
    }

    public void updateTitle(boolean z) {
        ChatAvatarContainer chatAvatarContainer;
        int i;
        String formatPluralString;
        TLRPC.Chat chat;
        if (this.avatarContainer == null) {
            return;
        }
        int i2 = this.chatMode;
        if (i2 == 5) {
            if ("hello".equalsIgnoreCase(this.quickReplyShortcut)) {
                chatAvatarContainer = this.avatarContainer;
                i = R.string.BusinessGreet;
            } else if ("away".equalsIgnoreCase(this.quickReplyShortcut)) {
                chatAvatarContainer = this.avatarContainer;
                i = R.string.BusinessAway;
            } else {
                chatAvatarContainer = this.avatarContainer;
                formatPluralString = this.quickReplyShortcut;
                chatAvatarContainer.setTitle(formatPluralString);
            }
            formatPluralString = LocaleController.getString(i);
            chatAvatarContainer.setTitle(formatPluralString);
        } else if (i2 != 6) {
            TLRPC.User user = null;
            if (i2 == 3) {
                long j = this.threadMessageId;
                int i3 = (j > 0L ? 1 : (j == 0L ? 0 : -1));
                MessagesController messagesController = getMessagesController();
                if (i3 > 0) {
                    user = messagesController.getUser(Long.valueOf(j));
                    chat = null;
                } else {
                    chat = messagesController.getChat(Long.valueOf(-j));
                }
                if (!UserObject.isReplyUser(user)) {
                    if (!UserObject.isAnonymous(user)) {
                        if (UserObject.isUserSelf(user)) {
                            chatAvatarContainer = this.avatarContainer;
                            i = R.string.MyNotes;
                            formatPluralString = LocaleController.getString(i);
                        } else if (user != null) {
                            chatAvatarContainer = this.avatarContainer;
                            formatPluralString = AndroidUtilities.removeDiacritics(UserObject.getUserName(user));
                        } else if (chat != null) {
                            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                            formatPluralString = AndroidUtilities.removeDiacritics(chat.title);
                            chatAvatarContainer = chatAvatarContainer2;
                        } else {
                            chatAvatarContainer = this.avatarContainer;
                            formatPluralString = "";
                        }
                    }
                    chatAvatarContainer = this.avatarContainer;
                    i = R.string.AnonymousForward;
                    formatPluralString = LocaleController.getString(i);
                }
                chatAvatarContainer = this.avatarContainer;
                i = R.string.RepliesTitle;
                formatPluralString = LocaleController.getString(i);
            } else if (!isThreadChat()) {
                if (!UserObject.isReplyUser(this.currentUser)) {
                    if (!UserObject.isAnonymous(this.currentUser)) {
                        int i4 = this.chatMode;
                        if (i4 == 1) {
                            if (UserObject.isUserSelf(this.currentUser)) {
                                chatAvatarContainer = this.avatarContainer;
                                i = R.string.Reminders;
                            } else {
                                chatAvatarContainer = this.avatarContainer;
                                i = R.string.ScheduledMessages;
                            }
                        } else if (i4 == 2) {
                            chatAvatarContainer = this.avatarContainer;
                            formatPluralString = LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[0]);
                        } else {
                            TLRPC.Chat chat2 = this.currentChat;
                            if (chat2 != null) {
                                ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                                String removeDiacritics = AndroidUtilities.removeDiacritics(chat2.title);
                                TLRPC.Chat chat3 = this.currentChat;
                                chatAvatarContainer3.setTitle(removeDiacritics, chat3.scam, chat3.fake, chat3.verified, false, chat3.emoji_status, z);
                            } else {
                                TLRPC.User user2 = this.currentUser;
                                if (user2 != null) {
                                    if (user2.self) {
                                        chatAvatarContainer = this.avatarContainer;
                                        i = R.string.SavedMessages;
                                    } else if (MessagesController.isSupportUser(user2) || getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) != null || (getContactsController().contactsDict.size() == 0 && getContactsController().isLoadingContacts())) {
                                        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
                                        String removeDiacritics2 = AndroidUtilities.removeDiacritics(UserObject.getUserName(this.currentUser));
                                        TLRPC.User user3 = this.currentUser;
                                        chatAvatarContainer4.setTitle(removeDiacritics2, user3.scam, user3.fake, user3.verified, getMessagesController().isPremiumUser(this.currentUser), MessagesController.isSupportUser(this.currentUser) ? null : this.currentUser.emoji_status, z);
                                    } else if (TextUtils.isEmpty(this.currentUser.phone)) {
                                        ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
                                        String removeDiacritics3 = AndroidUtilities.removeDiacritics(UserObject.getUserName(this.currentUser));
                                        TLRPC.User user4 = this.currentUser;
                                        chatAvatarContainer5.setTitle(removeDiacritics3, user4.scam, user4.fake, user4.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                                    } else {
                                        ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
                                        String format = PhoneFormat.getInstance().format("+" + this.currentUser.phone);
                                        TLRPC.User user5 = this.currentUser;
                                        chatAvatarContainer6.setTitle(format, user5.scam, user5.fake, user5.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                                    }
                                }
                            }
                        }
                        formatPluralString = LocaleController.getString(i);
                    }
                    chatAvatarContainer = this.avatarContainer;
                    i = R.string.AnonymousForward;
                    formatPluralString = LocaleController.getString(i);
                }
                chatAvatarContainer = this.avatarContainer;
                i = R.string.RepliesTitle;
                formatPluralString = LocaleController.getString(i);
            } else if (this.isTopic) {
                updateTopicHeader();
            } else if (!this.isComments) {
                chatAvatarContainer = this.avatarContainer;
                formatPluralString = LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]);
            } else if (this.threadMessageObject.hasReplies()) {
                chatAvatarContainer = this.avatarContainer;
                formatPluralString = LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]);
            } else {
                chatAvatarContainer = this.avatarContainer;
                i = R.string.CommentsTitle;
                formatPluralString = LocaleController.getString(i);
            }
            chatAvatarContainer.setTitle(formatPluralString);
        } else if (TextUtils.isEmpty(this.businessLink.title)) {
            chatAvatarContainer = this.avatarContainer;
            i = R.string.BusinessLink;
            formatPluralString = LocaleController.getString(i);
            chatAvatarContainer.setTitle(formatPluralString);
        } else {
            chatAvatarContainer = this.avatarContainer;
            formatPluralString = this.businessLink.title;
            chatAvatarContainer.setTitle(formatPluralString);
        }
        setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }
}

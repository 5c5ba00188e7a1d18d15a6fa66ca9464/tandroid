package org.telegram.ui.Cells;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.LeadingMarginSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.StateSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewStructure;
import android.view.Window;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeProvider;
import android.view.animation.OvershootInterpolator;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.ColorUtils;
import androidx.core.math.MathUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.ChatMessageSharedResources;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DocumentObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FlagSecureReason;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.R;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.SvgHelper;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.video.VideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatPhoto;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DocumentAttribute;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GeoPoint;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageExtendedMedia;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessagePeerReaction;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$PageBlock;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PhoneCallDiscardReason;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollAnswer;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_availableEffect;
import org.telegram.tgnet.TLRPC$TL_channelAdminLogEvent;
import org.telegram.tgnet.TLRPC$TL_channelAdminLogEventActionEditMessage;
import org.telegram.tgnet.TLRPC$TL_documentAttributeAudio;
import org.telegram.tgnet.TLRPC$TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC$TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC$TL_factCheck;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestGeoLocation;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestPeer;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonWebView;
import org.telegram.tgnet.TLRPC$TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageExtendedMediaPreview;
import org.telegram.tgnet.TLRPC$TL_messageMediaContact;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaGeoLive;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveaway;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveawayResults;
import org.telegram.tgnet.TLRPC$TL_messageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaVenue;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_page;
import org.telegram.tgnet.TLRPC$TL_pageBlockCollage;
import org.telegram.tgnet.TLRPC$TL_pageBlockSlideshow;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerColor;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoSize;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_photoStrippedSize;
import org.telegram.tgnet.TLRPC$TL_pollAnswerVoters;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_webDocument;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStickerSet;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStory;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeTheme;
import org.telegram.tgnet.TLRPC$ThemeSettings;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebDocument;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$WebPageAttribute;
import org.telegram.tgnet.tl.TL_stories$StoryItem;
import org.telegram.tgnet.tl.TL_stories$TL_storyItemDeleted;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.AvatarSpan;
import org.telegram.ui.Cells.BaseCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedFloat;
import org.telegram.ui.Components.AnimatedNumberLayout;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AudioVisualizerDrawable;
import org.telegram.ui.Components.AvatarDrawable;
import org.telegram.ui.Components.BackgroundGradientDrawable;
import org.telegram.ui.Components.ButtonBounce;
import org.telegram.ui.Components.CheckBoxBase;
import org.telegram.ui.Components.ClipRoundedDrawable;
import org.telegram.ui.Components.ColoredImageSpan;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EmptyStubSpan;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.Forum.MessageTopicButton;
import org.telegram.ui.Components.ForwardBackground;
import org.telegram.ui.Components.InfiniteProgress;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.LoadingDrawable;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.MsgClockDrawable;
import org.telegram.ui.Components.Point;
import org.telegram.ui.Components.Premium.boosts.BoostCounterSpan;
import org.telegram.ui.Components.Premium.boosts.cells.msg.GiveawayMessageCell;
import org.telegram.ui.Components.Premium.boosts.cells.msg.GiveawayResultsMessageCell;
import org.telegram.ui.Components.QuoteHighlight;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgress2;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ReplyMessageLine;
import org.telegram.ui.Components.RoundVideoPlayingDrawable;
import org.telegram.ui.Components.SeekBar;
import org.telegram.ui.Components.SeekBarAccessibilityDelegate;
import org.telegram.ui.Components.SeekBarWaveform;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.SlotsDrawable;
import org.telegram.ui.Components.StaticLayoutEx;
import org.telegram.ui.Components.StickerSetLinkIcon;
import org.telegram.ui.Components.Text;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.TimerParticles;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanBrowser;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.Components.spoilers.SpoilerEffect2;
import org.telegram.ui.GradientClip;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.SecretMediaViewer;
import org.telegram.ui.Stars.StarsIntroActivity;
import org.telegram.ui.Stories.StoriesUtilities;
import org.telegram.ui.Stories.StoryViewer;
import org.telegram.ui.Stories.recorder.CaptionContainerView;
import org.telegram.ui.Stories.recorder.DominantColors;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes4.dex */
public class ChatMessageCell extends BaseCell implements SeekBar.SeekBarDelegate, ImageReceiver.ImageReceiverDelegate, DownloadController.FileDownloadProgressListener, TextSelectionHelper.SelectableView, NotificationCenter.NotificationCenterDelegate {
    private static float[] radii = new float[8];
    private final boolean ALPHA_PROPERTY_WORKAROUND;
    public Property<ChatMessageCell, Float> ANIMATION_OFFSET_X;
    private int TAG;
    CharSequence accessibilityText;
    private boolean accessibilityTextContentUnread;
    private long accessibilityTextFileSize;
    private boolean accessibilityTextUnread;
    private SparseArray<Rect> accessibilityVirtualViewBounds;
    private int[] adaptiveEmojiColor;
    private ColorFilter[] adaptiveEmojiColorFilter;
    private int addedCaptionHeight;
    private boolean addedForTest;
    private int additionalTimeOffsetY;
    private StaticLayout adminLayout;
    private boolean allowAssistant;
    private float alphaInternal;
    private int animateFromStatusDrawableParams;
    private boolean animatePollAnswer;
    private boolean animatePollAnswerAlpha;
    private boolean animatePollAvatars;
    private int animateToStatusDrawableParams;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiDescriptionStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiPollQuestion;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiReplyStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiStack;
    private int animatingDrawVideoImageButton;
    private float animatingDrawVideoImageButtonProgress;
    private float animatingLoadingProgressProgress;
    private int animatingNoSound;
    private boolean animatingNoSoundPlaying;
    private float animatingNoSoundProgress;
    private float animationOffsetX;
    private boolean animationRunning;
    private boolean attachedToWindow;
    private StaticLayout authorLayout;
    private int authorLayoutLeft;
    private int authorLayoutWidth;
    private boolean autoPlayingMedia;
    private int availableTimeWidth;
    protected AvatarDrawable avatarDrawable;
    private ImageReceiver avatarImage;
    private boolean avatarPressed;
    private Theme.MessageDrawable.PathDrawParams backgroundCacheParams;
    private MessageBackgroundDrawable backgroundDrawable;
    private int backgroundDrawableBottom;
    private int backgroundDrawableLeft;
    private int backgroundDrawableRight;
    private int backgroundDrawableTop;
    private int backgroundHeight;
    private int backgroundWidth;
    private ImageReceiver blurredPhotoImage;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private RectF boostCounterBounds;
    private Drawable boostCounterLayoutSelector;
    private boolean boostCounterPressed;
    private int boostCounterSelectorColor;
    private BoostCounterSpan boostCounterSpan;
    private Path botButtonPath;
    private float[] botButtonRadii;
    private ArrayList<BotButton> botButtons;
    private HashMap<String, BotButton> botButtonsByData;
    private HashMap<String, BotButton> botButtonsByPosition;
    private String botButtonsLayout;
    private boolean bottomNearToSet;
    private int buttonPressed;
    private int buttonState;
    private int buttonX;
    private int buttonY;
    private final boolean canDrawBackgroundInParent;
    private boolean canStreamVideo;
    public boolean captionAbove;
    private int captionFullWidth;
    private int captionHeight;
    public MessageObject.TextLayoutBlocks captionLayout;
    private int captionOffsetX;
    private int captionWidth;
    private float captionX;
    public float captionY;
    public ChannelRecommendationsCell channelRecommendationsCell;
    private CheckBoxBase checkBox;
    private boolean checkBoxAnimationInProgress;
    private float checkBoxAnimationProgress;
    public int checkBoxTranslation;
    private boolean checkBoxVisible;
    private boolean checkOnlyButtonPressed;
    public int childPosition;
    private GradientClip clip;
    private Paint clipPaint;
    public boolean clipToGroupBounds;
    private ButtonBounce closeSponsoredBounce;
    private RectF closeSponsoredBounds;
    private String closeTimeText;
    private int closeTimeWidth;
    private int commentArrowX;
    private AvatarDrawable[] commentAvatarDrawables;
    private ImageReceiver[] commentAvatarImages;
    private boolean[] commentAvatarImagesVisible;
    private boolean commentButtonPressed;
    private Rect commentButtonRect;
    private boolean commentDrawUnread;
    private StaticLayout commentLayout;
    private LoadingDrawable commentLoading;
    private AnimatedNumberLayout commentNumberLayout;
    private int commentNumberWidth;
    private InfiniteProgress commentProgress;
    private float commentProgressAlpha;
    private long commentProgressLastUpadteTime;
    private int commentUnreadX;
    private int commentWidth;
    private int commentX;
    public MessageObject.TextLayoutBlocks computedCaptionLayout;
    public int computedGroupCaptionY;
    private AvatarDrawable contactAvatarDrawable;
    public ButtonBounce contactBounce;
    private ArrayList<InstantViewButton> contactButtons;
    public ReplyMessageLine contactLine;
    private boolean contactPressed;
    private RectF contactRect;
    private float controlsAlpha;
    public final int currentAccount;
    public Theme.MessageDrawable currentBackgroundDrawable;
    private Theme.MessageDrawable currentBackgroundSelectedDrawable;
    private CharSequence currentCaption;
    private TLRPC$Chat currentChat;
    private int currentFocusedVirtualView;
    private TLRPC$Chat currentForwardChannel;
    private String currentForwardName;
    private String currentForwardNameString;
    private TLRPC$User currentForwardUser;
    private int currentMapProvider;
    private MessageObject currentMessageObject;
    private MessageObject.GroupedMessages currentMessagesGroup;
    private Object currentNameStatus;
    public AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable currentNameStatusDrawable;
    private String currentNameString;
    private TLRPC$FileLocation currentPhoto;
    private String currentPhotoFilter;
    private String currentPhotoFilterThumb;
    private ImageLocation currentPhotoLocation;
    private TLRPC$PhotoSize currentPhotoObject;
    private TLRPC$PhotoSize currentPhotoObjectThumb;
    private BitmapDrawable currentPhotoObjectThumbStripped;
    private ImageLocation currentPhotoThumbLocation;
    private MessageObject.GroupedMessagePosition currentPosition;
    private String currentRepliesString;
    private TLRPC$PhotoSize currentReplyPhoto;
    private float currentSelectedBackgroundAlpha;
    private CharSequence currentTimeString;
    private String currentUnlockString;
    private String currentUrl;
    private TLRPC$User currentUser;
    private TLRPC$User currentViaBotUser;
    private String currentViewsString;
    private WebFile currentWebFile;
    private ChatMessageCellDelegate delegate;
    private RectF deleteProgressRect;
    private StaticLayout descriptionLayout;
    private int descriptionLayoutLeft;
    private int descriptionLayoutWidth;
    private int descriptionX;
    private int descriptionY;
    private Runnable diceFinishCallback;
    private boolean disallowLongPress;
    public boolean doNotDraw;
    private StaticLayout docTitleLayout;
    private int docTitleOffsetX;
    private int docTitleWidth;
    private TLRPC$Document documentAttach;
    private int documentAttachType;
    private boolean drawBackground;
    private boolean drawCommentButton;
    private boolean drawCommentNumber;
    private boolean drawContact;
    private boolean drawContactAdd;
    private boolean drawContactSendMessage;
    private boolean drawContactView;
    public boolean drawForBlur;
    private boolean drawForwardedName;
    public boolean drawFromPinchToZoom;
    private boolean drawImageButton;
    private boolean drawInstantView;
    public int drawInstantViewType;
    private boolean drawMediaCheckBox;
    private boolean drawName;
    private boolean drawNameLayout;
    public boolean drawPhotoImage;
    public boolean drawPinnedBottom;
    public boolean drawPinnedTop;
    private boolean drawRadialCheckBackground;
    private boolean drawSelectionBackground;
    private int drawSideButton;
    private int drawSideButton2;
    private boolean drawTime;
    private float drawTimeX;
    private float drawTimeY;
    private boolean drawTopic;
    private boolean drawVideoImageButton;
    private boolean drawVideoSize;
    public boolean drawingToBitmap;
    private int drawnContactButtonsFlag;
    private Paint drillHolePaint;
    private Path drillHolePath;
    private StaticLayout durationLayout;
    private int durationWidth;
    private boolean edited;
    private AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable effectDrawable;
    private ButtonBounce effectDrawableBounce;
    private long effectId;
    private int effectMessageId;
    boolean enterTransitionInProgress;
    public ExpiredStoryView expiredStoryView;
    private Drawable factCheckArrow;
    private int factCheckArrowColor;
    private ButtonBounce factCheckBounce;
    private int factCheckHeight;
    private boolean factCheckLarge;
    public ReplyMessageLine factCheckLine;
    private LinkSpanDrawable.LinkCollector factCheckLinks;
    private boolean factCheckPressed;
    private StaticLayout factCheckText2Layout;
    private int factCheckText2LayoutLeft;
    private StaticLayout factCheckTextLayout;
    private int factCheckTextLayoutHeight;
    private boolean factCheckTextLayoutLastLineEnd;
    private int factCheckTextLayoutLeft;
    private Text factCheckTitle;
    private Text factCheckWhat;
    private ButtonBounce factCheckWhatBounce;
    private boolean factCheckWhatPressed;
    private int factCheckWidth;
    private int factCheckY;
    private ColorMatrixColorFilter fancyBlurFilter;
    private boolean firstCircleLength;
    private int firstVisibleBlockNum;
    private boolean fitPhotoImage;
    private FlagSecureReason flagSecure;
    private boolean flipImage;
    private boolean forceNotDrawTime;
    private Drawable foreverDrawable;
    private int foreverDrawableColor;
    private AvatarSpan forwardAvatar;
    private ForwardBackground forwardBg;
    private boolean forwardBotPressed;
    private int forwardHeight;
    private int forwardNameCenterX;
    private final float[] forwardNameOffsetX;
    private boolean forwardNamePressed;
    private float forwardNameX;
    private int forwardNameY;
    private final StaticLayout[] forwardedNameLayout;
    private int forwardedNameWidth;
    private boolean frozen;
    private boolean fullyDraw;
    private boolean gamePreviewPressed;
    public final GiveawayMessageCell giveawayMessageCell;
    public final GiveawayResultsMessageCell giveawayResultsMessageCell;
    private Drawable gradientDrawable;
    private LinearGradient gradientShader;
    public GroupMedia groupMedia;
    private boolean groupPhotoInvisible;
    private MessageObject.GroupedMessages groupedMessagesToSet;
    private boolean hadLongPress;
    public boolean hasDiscussion;
    private boolean hasEmbed;
    private boolean hasFactCheck;
    private boolean hasGamePreview;
    private boolean hasInvoicePreview;
    private boolean hasInvoicePrice;
    private boolean hasLinkPreview;
    private int hasMiniProgress;
    private boolean hasNewLineForTime;
    private boolean hasOldCaptionPreview;
    private boolean hasPsaHint;
    public boolean hasReplyQuote;
    private int highlightCaptionToSetEnd;
    private int highlightCaptionToSetStart;
    private LinkPath highlightPath;
    private long highlightPathStart;
    private int highlightProgress;
    private boolean highlightedQuote;
    private float hintButtonProgress;
    private boolean hintButtonVisible;
    private int imageBackgroundColor;
    private int imageBackgroundGradientColor1;
    private int imageBackgroundGradientColor2;
    private int imageBackgroundGradientColor3;
    private int imageBackgroundGradientRotation;
    private float imageBackgroundIntensity;
    private int imageBackgroundSideColor;
    private int imageBackgroundSideWidth;
    private boolean imageDrawn;
    private boolean imagePressed;
    boolean imageReceiversAttachState;
    boolean imageReceiversVisibleState;
    private boolean inLayout;
    private StaticLayout infoLayout;
    private int infoWidth;
    private int infoX;
    private ButtonBounce instantButtonBounce;
    private LoadingDrawable instantButtonLoading;
    private boolean instantButtonPressed;
    private RectF instantButtonRect;
    public Drawable instantDrawable;
    public int instantDrawableColor;
    private Paint instantLinkArrowPaint;
    private Path instantLinkArrowPath;
    private boolean instantPressed;
    private int instantTextLeftX;
    private boolean instantTextNewLine;
    private int instantTextX;
    public String instantViewButtonText;
    private StaticLayout instantViewLayout;
    private float instantViewLayoutLeft;
    private float instantViewLayoutWidth;
    private int instantWidth;
    private Runnable invalidateListener;
    private Runnable invalidateRunnable;
    private boolean invalidateSpoilersParent;
    private boolean invalidatesParent;
    public boolean isAvatarVisible;
    public boolean isBlurred;
    public boolean isBot;
    public boolean isChat;
    private boolean isCheckPressed;
    public boolean isForum;
    public boolean isForumGeneral;
    private boolean isHighlighted;
    private boolean isHighlightedAnimated;
    private boolean isMedia;
    public boolean isMegagroup;
    public boolean isPinned;
    public boolean isPinnedChat;
    private boolean isPlayingRound;
    private boolean isPressed;
    public boolean isRepliesChat;
    public boolean isReplyQuote;
    private boolean isRoundVideo;
    public boolean isSavedChat;
    public boolean isSavedPreviewChat;
    private boolean isSmallImage;
    private boolean isSpoilerRevealing;
    public boolean isThreadChat;
    private boolean isThreadPost;
    private boolean isTitleLabelPressed;
    private boolean isUpdating;
    private int keyboardHeight;
    private long lastAnimationTime;
    private long lastCheckBoxAnimationTime;
    private long lastControlsAlphaChangeTime;
    private int lastDeleteDate;
    private float lastDrawingAudioProgress;
    private int lastHeight;
    private long lastHighlightProgressTime;
    private long lastLoadingSizeTotal;
    private long lastNamesAnimationTime;
    private TLRPC$Poll lastPoll;
    private long lastPollCloseTime;
    private ArrayList<TLRPC$TL_pollAnswerVoters> lastPollResults;
    private int lastPollResultsVoters;
    private String lastPostAuthor;
    private TLRPC$TL_messageReactions lastReactions;
    private int lastRepliesCount;
    private TLRPC$Message lastReplyMessage;
    private long lastSeekUpdateTime;
    private int lastSendState;
    int lastSize;
    private double lastTime;
    private float lastTouchX;
    private float lastTouchY;
    private boolean lastTranslated;
    private int lastViewsCount;
    private int lastVisibleBlockNum;
    private WebFile lastWebFile;
    private int lastWidth;
    private int layoutHeight;
    private int layoutWidth;
    public int linkBlockNum;
    public ReplyMessageLine linkLine;
    public boolean linkPreviewAbove;
    private ButtonBounce linkPreviewBounce;
    public int linkPreviewHeight;
    private boolean linkPreviewPressed;
    private Drawable linkPreviewSelector;
    public int linkPreviewSelectorColor;
    private int linkPreviewY;
    private int linkSelectionBlockNum;
    public long linkedChatId;
    public LinkSpanDrawable.LinkCollector links;
    private StaticLayout loadingProgressLayout;
    private long loadingProgressLayoutHash;
    private boolean locationExpired;
    private ImageReceiver locationImageReceiver;
    private Drawable locationLoadingThumb;
    public boolean makeVisibleAfterChange;
    private boolean mediaBackground;
    private CheckBoxBase mediaCheckBox;
    private int mediaOffsetY;
    private SpoilerEffect mediaSpoilerEffect;
    private SpoilerEffect2 mediaSpoilerEffect2;
    private Integer mediaSpoilerEffect2Index;
    private Path mediaSpoilerPath;
    private float[] mediaSpoilerRadii;
    private float mediaSpoilerRevealMaxRadius;
    private float mediaSpoilerRevealProgress;
    private float mediaSpoilerRevealX;
    private float mediaSpoilerRevealY;
    private boolean mediaWasInvisible;
    private MessageObject messageObjectToSet;
    private int miniButtonPressed;
    private int miniButtonState;
    private MotionBackgroundDrawable motionBackgroundDrawable;
    private StaticLayout nameLayout;
    private boolean nameLayoutPressed;
    private Drawable nameLayoutSelector;
    private int nameLayoutSelectorColor;
    private int nameLayoutWidth;
    private float nameOffsetX;
    private boolean nameStatusPressed;
    private Drawable nameStatusSelector;
    private int nameStatusSelectorColor;
    private int nameWidth;
    private float nameX;
    private float nameY;
    public int namesOffset;
    private boolean needNewVisiblePart;
    public boolean needReplyImage;
    private int noSoundCenterX;
    private Paint onceClearPaint;
    private RLottieDrawable onceFire;
    private CaptionContainerView.PeriodDrawable oncePeriod;
    private Paint onceRadialCutPaint;
    private Paint onceRadialPaint;
    private Paint onceRadialStrokePaint;
    private boolean otherPressed;
    private int otherX;
    private int otherY;
    private int overideShouldDrawTimeOnMedia;
    private Runnable overrideInvalidate;
    private AudioVisualizerDrawable overridenAudioVisualizer;
    private long overridenDuration;
    public int parentBoundsBottom;
    public float parentBoundsTop;
    public int parentHeight;
    public float parentViewTopOffset;
    public int parentWidth;
    private StaticLayout performerLayout;
    private int performerX;
    private ImageReceiver photoImage;
    private boolean photoImageOutOfBounds;
    private boolean photoNotSet;
    private TLObject photoParentObject;
    private StaticLayout photosCountLayout;
    private int photosCountWidth;
    public boolean pinnedBottom;
    public boolean pinnedTop;
    private float pollAnimationProgress;
    private float pollAnimationProgressTime;
    private AvatarDrawable[] pollAvatarDrawables;
    private ImageReceiver[] pollAvatarImages;
    private boolean[] pollAvatarImagesVisible;
    private ArrayList<PollButton> pollButtons;
    private CheckBoxBase[] pollCheckBox;
    private boolean pollClosed;
    private boolean pollHintPressed;
    private int pollHintX;
    private int pollHintY;
    private boolean pollInstantViewTouchesBottom;
    private boolean pollUnvoteInProgress;
    private boolean pollVoteInProgress;
    private int pollVoteInProgressNum;
    private boolean pollVoted;
    private int pressedBlock;
    private int pressedBotButton;
    private MessageObject.TextLayoutBlock pressedCopyCode;
    private boolean pressedEffect;
    private AnimatedEmojiSpan pressedEmoji;
    private LinkSpanDrawable pressedFactCheckLink;
    private LinkSpanDrawable pressedLink;
    private int pressedLinkType;
    private int pressedSideButton;
    private int[] pressedState;
    private int pressedVoteButton;
    public MessageObject.TextLayoutBlocks prevCaptionLayout;
    private CharacterStyle progressLoadingLink;
    private LoadingDrawable progressLoadingLinkCurrentDrawable;
    private ArrayList<LoadingDrawableLocation> progressLoadingLinkDrawables;
    private float psaButtonProgress;
    private boolean psaButtonVisible;
    private int psaHelpX;
    private int psaHelpY;
    private boolean psaHintPressed;
    public Drawable quoteArrow;
    public int quoteArrowColor;
    public Drawable[] quoteDrawable;
    public int[] quoteDrawableColor;
    public QuoteHighlight quoteHighlight;
    public ReplyMessageLine quoteLine;
    private RadialProgress2 radialProgress;
    protected float radialProgressAlpha;
    public final ReactionsLayoutInBubble reactionsLayoutInBubble;
    private RectF rect;
    private Path rectPath;
    private StaticLayout repliesLayout;
    private int repliesTextWidth;
    public ButtonBounce replyBounce;
    public float replyBounceX;
    public float replyBounceY;
    public float replyHeight;
    public ImageReceiver replyImageReceiver;
    public ReplyMessageLine replyLine;
    public StaticLayout replyNameLayout;
    private int replyNameOffset;
    private int replyNameWidth;
    private boolean replyPanelIsForward;
    private boolean replyPressed;
    private AnimatedFloat replyPressedFloat;
    public Drawable replyQuoteDrawable;
    public int replyQuoteDrawableColor;
    private Path replyRoundRectPath;
    public Drawable replySelector;
    private boolean replySelectorCanBePressed;
    public int replySelectorColor;
    private boolean replySelectorPressed;
    public float replySelectorRadLeft;
    public float replySelectorRadRight;
    public RectF replySelectorRect;
    public List<SpoilerEffect> replySpoilers;
    private final Stack<SpoilerEffect> replySpoilersPool;
    public int replyStartX;
    public int replyStartY;
    private int replyTextHeight;
    public StaticLayout replyTextLayout;
    public int replyTextOffset;
    public boolean replyTextRTL;
    private int replyTextWidth;
    private float replyTouchX;
    private float replyTouchY;
    private Theme.ResourcesProvider resourcesProvider;
    private float roundPlayingDrawableProgress;
    private float roundProgressAlpha;
    float roundSeekbarOutAlpha;
    float roundSeekbarOutProgress;
    int roundSeekbarTouched;
    private float roundToPauseProgress;
    private float roundToPauseProgress2;
    private AnimatedFloat roundVideoPlayPipFloat;
    private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
    private final Path sPath;
    private boolean scheduledInvalidate;
    private Rect scrollRect;
    private SeekBar seekBar;
    private SeekBarAccessibilityDelegate seekBarAccessibilityDelegate;
    private int seekBarTranslateX;
    private SeekBarWaveform seekBarWaveform;
    private int seekBarWaveformTranslateX;
    private int seekBarX;
    private int seekBarY;
    float seekbarRoundX;
    float seekbarRoundY;
    private float selectedBackgroundProgress;
    private Paint selectionOverlayPaint;
    private final Drawable[] selectorDrawable;
    private int selectorDrawableColor;
    private int[] selectorDrawableMaskType;
    private final MaskDrawable[] selectorMaskDrawable;
    private Text sensitiveText;
    private Text sensitiveTextShort;
    private AnimatorSet shakeAnimation;
    private ChatMessageSharedResources sharedResources;
    public boolean shouldCheckVisibleOnScreen;
    private Path sideButtonPath1;
    private Path sideButtonPath2;
    private float[] sideButtonPathCorners1;
    private float[] sideButtonPathCorners2;
    private boolean sideButtonPressed;
    private boolean sideButtonVisible;
    private float sideStartX;
    private float sideStartY;
    public int signWidth;
    private StaticLayout siteNameLayout;
    private float siteNameLayoutWidth;
    private float siteNameLeft;
    private int siteNameWidth;
    private boolean skipFrameUpdate;
    private float slidingOffsetX;
    private StaticLayout songLayout;
    private int songX;
    private SpoilerEffect spoilerPressed;
    private AtomicReference<Layout> spoilersPatchedReplyTextLayout;
    private boolean statusDrawableAnimationInProgress;
    private ValueAnimator statusDrawableAnimator;
    private float statusDrawableProgress;
    private StickerSetLinkIcon stickerSetIcons;
    private int substractBackgroundHeight;
    public int textX;
    public int textY;
    private float timeAlpha;
    private int timeAudioX;
    public StaticLayout timeLayout;
    private boolean timePressed;
    private int timeTextWidth;
    private boolean timeWasInvisible;
    public int timeWidth;
    private int timeWidthAudio;
    public int timeX;
    private TimerParticles timerParticles;
    private AnimatedFloat timerParticlesAlpha;
    private float timerTransitionProgress;
    private ButtonBounce titleLabelBounce;
    private StaticLayout titleLabelLayout;
    private float titleLabelLayoutHeight;
    private float titleLabelLayoutWidth;
    private float titleLabelX;
    private float titleLabelY;
    private StaticLayout titleLayout;
    private int titleLayoutLeft;
    private int titleLayoutWidth;
    private int titleX;
    private float toSeekBarProgress;
    private boolean topNearToSet;
    private MessageTopicButton topicButton;
    private long totalChangeTime;
    private int totalCommentWidth;
    public int totalHeight;
    private int totalVisibleBlocksCount;
    public TranscribeButton transcribeButton;
    private float transcribeX;
    private float transcribeY;
    public final TransitionParams transitionParams;
    public float transitionYOffsetForDrawables;
    private LoadingDrawable translationLoadingDrawable;
    private ArrayList<MessageObject.TextLayoutBlock> translationLoadingDrawableText;
    private AnimatedFloat translationLoadingFloat;
    private LinkPath translationLoadingPath;
    private float unlockAlpha;
    private StaticLayout unlockLayout;
    private SpoilerEffect unlockSpoilerEffect;
    private Path unlockSpoilerPath;
    private float[] unlockSpoilerRadii;
    private int unlockTextWidth;
    private float unlockX;
    private float unlockY;
    private int unmovedTextX;
    private ArrayList<LinkPath> urlPathCache;
    private ArrayList<LinkPath> urlPathSelection;
    private boolean useSeekBarWaveform;
    private boolean useTranscribeButton;
    private int viaNameWidth;
    private boolean viaOnly;
    private TypefaceSpan viaSpan1;
    private TypefaceSpan viaSpan2;
    private int viaWidth;
    private boolean vibrateOnPollVote;
    private int videoButtonPressed;
    private int videoButtonX;
    private int videoButtonY;
    VideoForwardDrawable videoForwardDrawable;
    private StaticLayout videoInfoLayout;
    VideoPlayerRewinder videoPlayerRewinder;
    private RadialProgress2 videoRadialProgress;
    private float viewTop;
    private StaticLayout viewsLayout;
    private int viewsTextWidth;
    public int visibleHeight;
    private boolean visibleOnScreen;
    public int visibleParent;
    public float visibleParentOffset;
    public float visibleTop;
    private float voteCurrentCircleLength;
    private float voteCurrentProgressTime;
    private long voteLastUpdateTime;
    private float voteRadOffset;
    private boolean voteRisingCircleLength;
    private boolean wasLayout;
    private boolean wasPinned;
    private boolean wasSending;
    private boolean wasTranscriptionOpen;
    private int widthBeforeNewTimeLine;
    private int widthForButtons;
    private boolean willRemoved;
    private boolean wouldBeInPip;

    private boolean intersect(float f, float f2, float f3, float f4) {
        return f <= f3 ? f2 >= f3 : f <= f4;
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public /* synthetic */ void didSetImageBitmap(int i, String str, Drawable drawable) {
        ImageReceiver.ImageReceiverDelegate.-CC.$default$didSetImageBitmap(this, i, str, drawable);
    }

    protected boolean isWidthAdaptive() {
        return false;
    }

    public RadialProgress2 getRadialProgress() {
        return this.radialProgress;
    }

    public void setEnterTransitionInProgress(boolean z) {
        this.enterTransitionInProgress = z;
        invalidate();
    }

    public ReactionsLayoutInBubble.ReactionButton getReactionButton(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        return this.reactionsLayoutInBubble.getReactionButton(visibleReaction);
    }

    public MessageObject getPrimaryMessageObject() {
        MessageObject messageObject = this.currentMessageObject;
        MessageObject findPrimaryMessageObject = (messageObject == null || this.currentMessagesGroup == null || !messageObject.hasValidGroupId()) ? null : this.currentMessagesGroup.findPrimaryMessageObject();
        return findPrimaryMessageObject != null ? findPrimaryMessageObject : this.currentMessageObject;
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        if (i == NotificationCenter.startSpoilers) {
            setSpoilersSuppressed(false);
        } else if (i == NotificationCenter.stopSpoilers) {
            setSpoilersSuppressed(true);
        } else if (i == NotificationCenter.userInfoDidLoad) {
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User == null || tLRPC$User.id != ((Long) objArr[0]).longValue()) {
                return;
            }
            setAvatar(this.currentMessageObject);
        } else if (i == NotificationCenter.emojiLoaded) {
            invalidate();
        } else if (i != NotificationCenter.didUpdatePremiumGiftStickers || (messageObject = this.currentMessageObject) == null) {
        } else {
            TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
            if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGiveaway) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGiveawayResults)) {
                setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            }
        }
    }

    public void setAvatar(MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        if (this.isAvatarVisible) {
            Drawable drawable = messageObject.customAvatarDrawable;
            if (drawable != null) {
                this.avatarImage.setImageBitmap(drawable);
                return;
            }
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User != null) {
                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                if (tLRPC$UserProfilePhoto != null) {
                    this.currentPhoto = tLRPC$UserProfilePhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                this.avatarDrawable.setInfo(this.currentAccount, tLRPC$User);
                this.avatarImage.setForUserOrChat(this.currentUser, this.avatarDrawable, null, LiteMode.isEnabled(LiteMode.FLAGS_CHAT), 1, false);
                return;
            }
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null) {
                TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat.photo;
                if (tLRPC$ChatPhoto != null) {
                    this.currentPhoto = tLRPC$ChatPhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                if (tLRPC$Chat.signature_profiles) {
                    long peerDialogId = DialogObject.getPeerDialogId(messageObject.messageOwner.from_id);
                    if (peerDialogId >= 0) {
                        TLRPC$User user = MessagesController.getInstance(messageObject.currentAccount).getUser(Long.valueOf(peerDialogId));
                        this.avatarDrawable.setInfo(this.currentAccount, user);
                        this.avatarImage.setForUserOrChat(user, this.avatarDrawable);
                        return;
                    }
                    TLRPC$Chat chat = MessagesController.getInstance(messageObject.currentAccount).getChat(Long.valueOf(-peerDialogId));
                    this.avatarDrawable.setInfo(this.currentAccount, chat);
                    this.avatarImage.setForUserOrChat(chat, this.avatarDrawable);
                    return;
                }
                this.avatarDrawable.setInfo(this.currentAccount, tLRPC$Chat);
                this.avatarImage.setForUserOrChat(this.currentChat, this.avatarDrawable);
                return;
            } else if (messageObject.isSponsored()) {
                TLRPC$Photo tLRPC$Photo = messageObject.sponsoredPhoto;
                if (tLRPC$Photo != null) {
                    this.avatarImage.setImage(ImageLocation.getForPhoto(FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, AndroidUtilities.dp(50.0f), false, null, true), messageObject.sponsoredPhoto), "50_50", this.avatarDrawable, null, null, 0);
                    return;
                }
                return;
            } else {
                this.currentPhoto = null;
                this.avatarDrawable.setInfo(messageObject.getFromChatId(), null, null);
                this.avatarImage.setImage(null, null, this.avatarDrawable, null, null, 0);
                return;
            }
        }
        this.currentPhoto = null;
    }

    public void setSpoilersSuppressed(boolean z) {
        for (int i = 0; i < this.replySpoilers.size(); i++) {
            this.replySpoilers.get(i).setSuppressUpdates(z);
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && textLayoutBlocks.textLayoutBlocks != null) {
            for (int i2 = 0; i2 < this.captionLayout.textLayoutBlocks.size(); i2++) {
                MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i2);
                for (int i3 = 0; i3 < textLayoutBlock.spoilers.size(); i3++) {
                    textLayoutBlock.spoilers.get(i3).setSuppressUpdates(z);
                }
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        for (int i4 = 0; i4 < getMessageObject().textLayoutBlocks.size(); i4++) {
            MessageObject.TextLayoutBlock textLayoutBlock2 = getMessageObject().textLayoutBlocks.get(i4);
            for (int i5 = 0; i5 < textLayoutBlock2.spoilers.size(); i5++) {
                textLayoutBlock2.spoilers.get(i5).setSuppressUpdates(z);
            }
        }
    }

    public boolean hasSpoilers() {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && (arrayList = textLayoutBlocks.textLayoutBlocks) != null) {
            Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
            while (it.hasNext()) {
                if (!it.next().spoilers.isEmpty()) {
                    return true;
                }
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return false;
        }
        Iterator<MessageObject.TextLayoutBlock> it2 = getMessageObject().textLayoutBlocks.iterator();
        while (it2.hasNext()) {
            if (!it2.next().spoilers.isEmpty()) {
                return true;
            }
        }
        return false;
    }

    private void updateSpoilersVisiblePart(int i, int i2) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && (arrayList = textLayoutBlocks.textLayoutBlocks) != null) {
            Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject.TextLayoutBlock next = it.next();
                for (SpoilerEffect spoilerEffect : next.spoilers) {
                    spoilerEffect.setVisibleBounds(0.0f, (i - next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionX, getWidth(), (i2 - next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionY);
                }
            }
        }
        StaticLayout staticLayout = this.replyTextLayout;
        if (staticLayout != null) {
            float height = (-this.replyStartY) - staticLayout.getHeight();
            for (SpoilerEffect spoilerEffect2 : this.replySpoilers) {
                spoilerEffect2.setVisibleBounds(0.0f, i + height, getWidth(), i2 + height);
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        Iterator<MessageObject.TextLayoutBlock> it2 = getMessageObject().textLayoutBlocks.iterator();
        while (it2.hasNext()) {
            MessageObject.TextLayoutBlock next2 = it2.next();
            for (SpoilerEffect spoilerEffect3 : next2.spoilers) {
                spoilerEffect3.setVisibleBounds(0.0f, (i - next2.textYOffset(getMessageObject().textLayoutBlocks, this.transitionParams)) - this.textY, getWidth(), (i2 - next2.textYOffset(getMessageObject().textLayoutBlocks, this.transitionParams)) - this.textY);
            }
        }
    }

    public void setScrimReaction(Integer num) {
        this.reactionsLayoutInBubble.setScrimReaction(num);
    }

    public void drawScrimReaction(Canvas canvas, Integer num, float f) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        reactionsLayoutInBubble.setScrimProgress(f);
        this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, num);
    }

    public void drawScrimReactionPreview(View view, Canvas canvas, int i, Integer num, float f) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i2 = groupedMessagePosition.flags;
            if ((i2 & 8) == 0 || (i2 & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        reactionsLayoutInBubble.setScrimProgress(f);
        this.reactionsLayoutInBubble.drawPreview(view, canvas, i, num);
    }

    public boolean checkUnreadReactions(float f, int i) {
        if (this.reactionsLayoutInBubble.hasUnreadReactions) {
            float y = getY();
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            float f2 = y + reactionsLayoutInBubble.y;
            return f2 > f && (f2 + ((float) reactionsLayoutInBubble.height)) - ((float) AndroidUtilities.dp(16.0f)) < ((float) i);
        }
        return false;
    }

    public void markReactionsAsRead() {
        this.reactionsLayoutInBubble.hasUnreadReactions = false;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.markReactionsAsRead();
    }

    public void setVisibleOnScreen(boolean z, float f, float f2) {
        if (this.visibleOnScreen != z) {
            this.visibleOnScreen = z;
            checkImageReceiversAttachState();
            if (z) {
                invalidate();
            }
        }
        float imageY = f - this.photoImage.getImageY();
        float measuredHeight = f2 - (getMeasuredHeight() - this.photoImage.getImageY2());
        float imageHeight = this.photoImage.getImageHeight();
        if (imageY > 0.0f) {
            imageHeight -= imageY;
        }
        if (measuredHeight > 0.0f) {
            imageHeight -= measuredHeight;
        }
        ImageReceiver imageReceiver = this.photoImage;
        boolean z2 = imageHeight / imageReceiver.getImageHeight() < 0.25f;
        this.skipFrameUpdate = z2;
        imageReceiver.setSkipUpdateFrame(z2);
    }

    public void setParentBounds(float f, int i) {
        this.parentBoundsTop = f;
        this.parentBoundsBottom = i;
        if (this.photoImageOutOfBounds) {
            float y = getY() + this.photoImage.getImageY();
            if (this.photoImage.getImageHeight() + y < this.parentBoundsTop || y > this.parentBoundsBottom) {
                return;
            }
            invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public interface ChatMessageCellDelegate {
        boolean canDrawOutboundsContent();

        boolean canPerformActions();

        void didLongPress(ChatMessageCell chatMessageCell, float f, float f2);

        void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        boolean didLongPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2);

        boolean didLongPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2);

        void didPressAboutRevenueSharingAds();

        boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan);

        void didPressBoostCounter(ChatMessageCell chatMessageCell);

        void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        void didPressCancelSendButton(ChatMessageCell chatMessageCell);

        void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2, boolean z);

        void didPressChannelRecommendation(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, boolean z);

        void didPressChannelRecommendationsClose(ChatMessageCell chatMessageCell);

        void didPressCodeCopy(ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock);

        void didPressCommentButton(ChatMessageCell chatMessageCell);

        void didPressDialogButton(ChatMessageCell chatMessageCell);

        void didPressEffect(ChatMessageCell chatMessageCell);

        void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        void didPressFactCheck(ChatMessageCell chatMessageCell);

        void didPressFactCheckWhat(ChatMessageCell chatMessageCell, int i, int i2);

        void didPressGiveawayChatButton(ChatMessageCell chatMessageCell, int i);

        void didPressGroupImage(ChatMessageCell chatMessageCell, ImageReceiver imageReceiver, TLRPC$MessageExtendedMedia tLRPC$MessageExtendedMedia, float f, float f2);

        void didPressHiddenForward(ChatMessageCell chatMessageCell);

        void didPressHint(ChatMessageCell chatMessageCell, int i);

        void didPressImage(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressInstantButton(ChatMessageCell chatMessageCell, int i);

        void didPressMoreChannelRecommendations(ChatMessageCell chatMessageCell);

        void didPressOther(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressReaction(ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z, float f, float f2);

        void didPressReplyMessage(ChatMessageCell chatMessageCell, int i);

        void didPressRevealSensitiveContent(ChatMessageCell chatMessageCell);

        void didPressSideButton(ChatMessageCell chatMessageCell);

        void didPressSponsoredClose(ChatMessageCell chatMessageCell);

        void didPressSponsoredInfo(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressTime(ChatMessageCell chatMessageCell);

        void didPressTopicButton(ChatMessageCell chatMessageCell);

        void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z);

        void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2, boolean z);

        void didPressUserStatus(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, TLRPC$Document tLRPC$Document);

        void didPressViaBot(ChatMessageCell chatMessageCell, String str);

        void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j);

        void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$PollAnswer> arrayList, int i, int i2, int i3);

        void didPressWebPage(ChatMessageCell chatMessageCell, TLRPC$WebPage tLRPC$WebPage, String str, boolean z);

        void didStartVideoStream(MessageObject messageObject);

        boolean doNotShowLoadingReply(MessageObject messageObject);

        void forceUpdate(ChatMessageCell chatMessageCell, boolean z);

        String getAdminRank(long j);

        PinchToZoomHelper getPinchToZoomHelper();

        String getProgressLoadingBotButtonUrl(ChatMessageCell chatMessageCell);

        CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell);

        TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper();

        boolean hasSelectedMessages();

        void invalidateBlur();

        boolean isLandscape();

        boolean isProgressLoading(ChatMessageCell chatMessageCell, int i);

        boolean isReplyOrSelf();

        boolean keyboardIsOpened();

        void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2);

        boolean needPlayMessage(ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z);

        void needReloadPolls();

        void needShowPremiumBulletin(int i);

        boolean onAccessibilityAction(int i, Bundle bundle);

        void onDiceFinished();

        void setShouldNotRepeatSticker(MessageObject messageObject);

        boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell, boolean z);

        boolean shouldRepeatSticker(MessageObject messageObject);

        boolean shouldShowDialogButton(ChatMessageCell chatMessageCell);

        boolean shouldShowTopicButton(ChatMessageCell chatMessageCell);

        void videoTimerReached();

        /* loaded from: classes4.dex */
        public final /* synthetic */ class -CC {
            public static boolean $default$canDrawOutboundsContent(ChatMessageCellDelegate chatMessageCellDelegate) {
                return true;
            }

            public static boolean $default$canPerformActions(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$didLongPress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didLongPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static boolean $default$didLongPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
                return false;
            }

            public static boolean $default$didLongPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
                return false;
            }

            public static void $default$didPressAboutRevenueSharingAds(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$didPressAnimatedEmoji(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
                return false;
            }

            public static void $default$didPressBoostCounter(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static void $default$didPressCancelSendButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2, boolean z) {
            }

            public static void $default$didPressChannelRecommendation(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, boolean z) {
            }

            public static void $default$didPressChannelRecommendationsClose(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressCodeCopy(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock) {
            }

            public static void $default$didPressCommentButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressDialogButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressEffect(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressExtendedMediaPreview(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static void $default$didPressFactCheck(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressFactCheckWhat(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i, int i2) {
            }

            public static void $default$didPressGiveawayChatButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressGroupImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ImageReceiver imageReceiver, TLRPC$MessageExtendedMedia tLRPC$MessageExtendedMedia, float f, float f2) {
            }

            public static void $default$didPressHiddenForward(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressHint(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressInstantButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressMoreChannelRecommendations(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressOther(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressReaction(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z, float f, float f2) {
            }

            public static void $default$didPressReplyMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressRevealSensitiveContent(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSideButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSponsoredClose(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSponsoredInfo(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressTime(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressTopicButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            }

            public static void $default$didPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2, boolean z) {
            }

            public static void $default$didPressUserStatus(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, TLRPC$Document tLRPC$Document) {
            }

            public static void $default$didPressViaBot(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, String str) {
            }

            public static void $default$didPressViaBotNotInline(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, long j) {
            }

            public static void $default$didPressVoteButtons(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3) {
            }

            public static void $default$didStartVideoStream(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static void $default$forceUpdate(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, boolean z) {
            }

            public static String $default$getAdminRank(ChatMessageCellDelegate chatMessageCellDelegate, long j) {
                return null;
            }

            public static PinchToZoomHelper $default$getPinchToZoomHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static String $default$getProgressLoadingBotButtonUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return null;
            }

            public static CharacterStyle $default$getProgressLoadingLink(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return null;
            }

            public static TextSelectionHelper.ChatListTextSelectionHelper $default$getTextSelectionHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static boolean $default$hasSelectedMessages(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$invalidateBlur(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$isLandscape(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$isProgressLoading(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
                return false;
            }

            public static boolean $default$isReplyOrSelf(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$keyboardIsOpened(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$needOpenWebView(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            }

            public static boolean $default$needPlayMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z) {
                return false;
            }

            public static void $default$needReloadPolls(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$needShowPremiumBulletin(ChatMessageCellDelegate chatMessageCellDelegate, int i) {
            }

            public static boolean $default$onAccessibilityAction(ChatMessageCellDelegate chatMessageCellDelegate, int i, Bundle bundle) {
                return false;
            }

            public static void $default$onDiceFinished(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$setShouldNotRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static boolean $default$shouldDrawThreadProgress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, boolean z) {
                return false;
            }

            public static boolean $default$shouldRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return true;
            }

            public static boolean $default$shouldShowDialogButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static boolean $default$shouldShowTopicButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static void $default$videoTimerReached(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$doNotShowLoadingReply(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return messageObject != null && messageObject.getDialogId() == UserObject.REPLY_BOT;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class BotButton {
        private int angle;
        private TLRPC$KeyboardButton button;
        private int height;
        private boolean isInviteButton;
        private long lastUpdateTime;
        private LoadingDrawable loadingDrawable;
        private int positionFlags;
        private ValueAnimator pressAnimator;
        private float pressT;
        private boolean pressed;
        private float progressAlpha;
        private Drawable selectorDrawable;
        private StaticLayout title;
        private int width;
        private int x;
        private int y;

        private BotButton() {
        }

        static /* synthetic */ int access$3776(BotButton botButton, int i) {
            int i2 = i | botButton.positionFlags;
            botButton.positionFlags = i2;
            return i2;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void setPressed(boolean z) {
            ValueAnimator valueAnimator;
            if (this.pressed != z) {
                this.pressed = z;
                ChatMessageCell.this.invalidateOutbounds();
                if (z && (valueAnimator = this.pressAnimator) != null) {
                    valueAnimator.removeAllListeners();
                    this.pressAnimator.cancel();
                }
                if (z) {
                    return;
                }
                float f = this.pressT;
                if (f != 0.0f) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(f, 0.0f);
                    this.pressAnimator = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$BotButton$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatMessageCell.BotButton.this.lambda$setPressed$0(valueAnimator2);
                        }
                    });
                    this.pressAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.BotButton.1
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            BotButton.this.pressAnimator = null;
                        }
                    });
                    this.pressAnimator.setInterpolator(new OvershootInterpolator(2.0f));
                    this.pressAnimator.setDuration(350L);
                    this.pressAnimator.start();
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setPressed$0(ValueAnimator valueAnimator) {
            this.pressT = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatMessageCell.this.invalidateOutbounds();
        }

        public boolean hasPositionFlag(int i) {
            return (this.positionFlags & i) == i;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public float getPressScale() {
            if (this.pressed) {
                float f = this.pressT;
                if (f != 1.0f) {
                    float min = f + (Math.min(40.0f, 1000.0f / AndroidUtilities.screenRefreshRate) / 100.0f);
                    this.pressT = min;
                    this.pressT = Utilities.clamp(min, 1.0f, 0.0f);
                    ChatMessageCell.this.invalidateOutbounds();
                }
            }
            return ((1.0f - this.pressT) * 0.04f) + 0.96f;
        }
    }

    /* loaded from: classes4.dex */
    public static class PollButton {
        public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmoji;
        private TLRPC$PollAnswer answer;
        private boolean chosen;
        private boolean correct;
        private int count;
        private float decimal;
        public int height;
        private int percent;
        private float percentProgress;
        private boolean prevChosen;
        private int prevPercent;
        private float prevPercentProgress;
        private StaticLayout title;
        public int x;
        public int y;

        static /* synthetic */ int access$2412(PollButton pollButton, int i) {
            int i2 = pollButton.percent + i;
            pollButton.percent = i2;
            return i2;
        }

        static /* synthetic */ float access$3124(PollButton pollButton, float f) {
            float f2 = pollButton.decimal - f;
            pollButton.decimal = f2;
            return f2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public static class InstantViewButton {
        private ButtonBounce buttonBounce;
        private float buttonWidth;
        private StaticLayout layout;
        private final RectF rect;
        private Drawable selectorDrawable;
        private float textX;
        private int type;

        private InstantViewButton() {
            this.rect = new RectF();
        }

        static /* synthetic */ float access$5024(InstantViewButton instantViewButton, float f) {
            float f2 = instantViewButton.textX - f;
            instantViewButton.textX = f2;
            return f2;
        }
    }

    public boolean isCellAttachedToWindow() {
        return this.attachedToWindow;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes4.dex */
    public class LoadingDrawableLocation {
        int blockNum;
        LoadingDrawable drawable;

        LoadingDrawableLocation() {
        }
    }

    public ChatMessageCell(Context context, int i) {
        this(context, i, false, null, null);
    }

    public ChatMessageCell(Context context, int i, boolean z, ChatMessageSharedResources chatMessageSharedResources, Theme.ResourcesProvider resourcesProvider) {
        super(context);
        this.visibleOnScreen = true;
        this.reactionsLayoutInBubble = new ReactionsLayoutInBubble(this);
        this.giveawayMessageCell = new GiveawayMessageCell(this);
        this.giveawayResultsMessageCell = new GiveawayResultsMessageCell(this);
        this.scrollRect = new Rect();
        this.drawnContactButtonsFlag = 0;
        this.imageBackgroundGradientRotation = 45;
        this.selectorDrawable = new Drawable[2];
        this.selectorMaskDrawable = new MaskDrawable[2];
        this.selectorDrawableMaskType = new int[2];
        this.instantButtonRect = new RectF();
        this.pressedState = new int[]{16842910, 16842919};
        this.highlightCaptionToSetStart = -1;
        this.highlightCaptionToSetEnd = -1;
        this.deleteProgressRect = new RectF();
        this.rect = new RectF();
        this.foreverDrawableColor = -1;
        this.timeAlpha = 1.0f;
        this.controlsAlpha = 1.0f;
        this.pressedBlock = -1;
        this.links = new LinkSpanDrawable.LinkCollector(this);
        this.urlPathCache = new ArrayList<>();
        this.urlPathSelection = new ArrayList<>();
        this.rectPath = new Path();
        this.pollButtons = new ArrayList<>();
        this.botButtons = new ArrayList<>();
        this.botButtonPath = new Path();
        this.botButtonRadii = new float[8];
        this.botButtonsByData = new HashMap<>();
        this.botButtonsByPosition = new HashMap<>();
        this.isCheckPressed = true;
        this.drawBackground = true;
        this.backgroundWidth = 100;
        this.commentButtonRect = new Rect();
        this.spoilersPatchedReplyTextLayout = new AtomicReference<>();
        this.forwardedNameLayout = new StaticLayout[2];
        this.forwardNameOffsetX = new float[2];
        this.drawTime = true;
        this.mediaSpoilerPath = new Path();
        this.mediaSpoilerRadii = new float[8];
        this.mediaSpoilerEffect = new SpoilerEffect();
        this.unlockAlpha = 1.0f;
        this.unlockSpoilerEffect = new SpoilerEffect();
        this.unlockSpoilerPath = new Path();
        this.unlockSpoilerRadii = new float[8];
        this.replySelectorRect = new RectF();
        this.ALPHA_PROPERTY_WORKAROUND = Build.VERSION.SDK_INT == 28;
        this.alphaInternal = 1.0f;
        this.transitionParams = new TransitionParams();
        this.roundVideoPlayPipFloat = new AnimatedFloat(this, 200L, CubicBezierInterpolator.EASE_OUT);
        this.diceFinishCallback = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.1
            @Override // java.lang.Runnable
            public void run() {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.onDiceFinished();
                }
            }
        };
        this.invalidateRunnable = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.2
            @Override // java.lang.Runnable
            public void run() {
                ChatMessageCell.this.checkLocationExpired();
                if (ChatMessageCell.this.locationExpired) {
                    ChatMessageCell.this.invalidate();
                    ChatMessageCell.this.scheduledInvalidate = false;
                    return;
                }
                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                chatMessageCell.invalidate(((int) chatMessageCell.rect.left) - 5, ((int) ChatMessageCell.this.rect.top) - 5, ((int) ChatMessageCell.this.rect.right) + 5, ((int) ChatMessageCell.this.rect.bottom) + 5);
                if (ChatMessageCell.this.scheduledInvalidate) {
                    AndroidUtilities.runOnUIThread(ChatMessageCell.this.invalidateRunnable, 1000L);
                }
            }
        };
        this.accessibilityVirtualViewBounds = new SparseArray<>();
        this.currentFocusedVirtualView = -1;
        this.backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.replySpoilers = new ArrayList();
        this.replySpoilersPool = new Stack<>();
        this.sPath = new Path();
        this.pressedEffect = false;
        this.overridenDuration = -1L;
        this.hadLongPress = false;
        this.radialProgressAlpha = 1.0f;
        this.ANIMATION_OFFSET_X = new Property<ChatMessageCell, Float>(Float.class, "animationOffsetX") { // from class: org.telegram.ui.Cells.ChatMessageCell.12
            @Override // android.util.Property
            public Float get(ChatMessageCell chatMessageCell) {
                return Float.valueOf(chatMessageCell.animationOffsetX);
            }

            @Override // android.util.Property
            public void set(ChatMessageCell chatMessageCell, Float f) {
                chatMessageCell.setAnimationOffsetX(f.floatValue());
            }
        };
        this.currentAccount = i;
        this.resourcesProvider = resourcesProvider;
        this.canDrawBackgroundInParent = z;
        this.sharedResources = chatMessageSharedResources;
        if (chatMessageSharedResources == null) {
            this.sharedResources = new ChatMessageSharedResources(context);
        }
        this.backgroundDrawable = new MessageBackgroundDrawable(this);
        ImageReceiver imageReceiver = new ImageReceiver();
        this.avatarImage = imageReceiver;
        imageReceiver.setAllowLoadingOnAttachedOnly(true);
        this.avatarImage.setRoundRadius(AndroidUtilities.dp(21.0f));
        this.avatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver2 = new ImageReceiver(this);
        this.replyImageReceiver = imageReceiver2;
        imageReceiver2.setAllowLoadingOnAttachedOnly(true);
        this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(4.0f));
        ImageReceiver imageReceiver3 = new ImageReceiver(this);
        this.locationImageReceiver = imageReceiver3;
        imageReceiver3.setAllowLoadingOnAttachedOnly(true);
        this.locationImageReceiver.setRoundRadius(AndroidUtilities.dp(26.1f));
        this.TAG = DownloadController.getInstance(i).generateObserverTag();
        this.contactAvatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver4 = new ImageReceiver(this);
        this.photoImage = imageReceiver4;
        imageReceiver4.setAllowLoadingOnAttachedOnly(true);
        this.photoImage.setUseRoundForThumbDrawable(true);
        this.photoImage.setDelegate(this);
        ImageReceiver imageReceiver5 = new ImageReceiver(this);
        this.blurredPhotoImage = imageReceiver5;
        imageReceiver5.setAllowLoadingOnAttachedOnly(true);
        this.blurredPhotoImage.setUseRoundForThumbDrawable(true);
        this.radialProgress = new RadialProgress2(this, resourcesProvider);
        RadialProgress2 radialProgress2 = new RadialProgress2(this, resourcesProvider);
        this.videoRadialProgress = radialProgress2;
        radialProgress2.setDrawBackground(false);
        this.videoRadialProgress.setCircleRadius(AndroidUtilities.dp(15.0f));
        SeekBar seekBar = new SeekBar(this) { // from class: org.telegram.ui.Cells.ChatMessageCell.3
            @Override // org.telegram.ui.Components.SeekBar
            protected void onTimestampUpdate(URLSpanNoUnderline uRLSpanNoUnderline) {
                ChatMessageCell.this.setHighlightedSpan(uRLSpanNoUnderline);
            }
        };
        this.seekBar = seekBar;
        seekBar.setDelegate(this);
        SeekBarWaveform seekBarWaveform = new SeekBarWaveform(context);
        this.seekBarWaveform = seekBarWaveform;
        seekBarWaveform.setDelegate(this);
        this.seekBarWaveform.setParentView(this);
        this.seekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.4
            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    return ChatMessageCell.this.seekBar.getProgress();
                }
                if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    return ChatMessageCell.this.useSeekBarWaveform ? ChatMessageCell.this.seekBarWaveform.getProgress() : ChatMessageCell.this.seekBar.getProgress();
                } else if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return ChatMessageCell.this.currentMessageObject.audioProgress;
                } else {
                    return 0.0f;
                }
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    ChatMessageCell.this.seekBar.setProgress(f);
                } else if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    if (ChatMessageCell.this.useSeekBarWaveform) {
                        ChatMessageCell.this.seekBarWaveform.setProgress(f);
                    } else {
                        ChatMessageCell.this.seekBar.setProgress(f);
                    }
                } else if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return;
                } else {
                    if (ChatMessageCell.this.useSeekBarWaveform) {
                        if (ChatMessageCell.this.seekBarWaveform != null) {
                            ChatMessageCell.this.seekBarWaveform.setProgress(f);
                        }
                    } else if (ChatMessageCell.this.seekBar != null) {
                        ChatMessageCell.this.seekBar.setProgress(f);
                    }
                    ChatMessageCell.this.currentMessageObject.audioProgress = f;
                }
                ChatMessageCell.this.onSeekBarDrag(f);
                ChatMessageCell.this.invalidate();
            }
        };
        this.roundVideoPlayingDrawable = new RoundVideoPlayingDrawable(this, resourcesProvider);
        setImportantForAccessibility(1);
    }

    public void setResourcesProvider(Theme.ResourcesProvider resourcesProvider) {
        this.resourcesProvider = resourcesProvider;
        RadialProgress2 radialProgress2 = this.radialProgress;
        if (radialProgress2 != null) {
            radialProgress2.setResourcesProvider(resourcesProvider);
        }
        RadialProgress2 radialProgress22 = this.videoRadialProgress;
        if (radialProgress22 != null) {
            radialProgress22.setResourcesProvider(resourcesProvider);
        }
        RoundVideoPlayingDrawable roundVideoPlayingDrawable = this.roundVideoPlayingDrawable;
        if (roundVideoPlayingDrawable != null) {
            roundVideoPlayingDrawable.setResourcesProvider(resourcesProvider);
        }
    }

    public Theme.ResourcesProvider getResourcesProvider() {
        return this.resourcesProvider;
    }

    private void createPollUI() {
        if (this.pollAvatarImages != null) {
            return;
        }
        this.pollAvatarImages = new ImageReceiver[3];
        this.pollAvatarDrawables = new AvatarDrawable[3];
        this.pollAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
            if (i >= imageReceiverArr.length) {
                break;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.pollAvatarImages[i].setRoundRadius(AndroidUtilities.dp(8.0f));
            this.pollAvatarDrawables[i] = new AvatarDrawable();
            this.pollAvatarDrawables[i].setTextSize(AndroidUtilities.dp(22.0f));
            i++;
        }
        this.pollCheckBox = new CheckBoxBase[10];
        int i2 = 0;
        while (true) {
            CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
            if (i2 >= checkBoxBaseArr.length) {
                return;
            }
            checkBoxBaseArr[i2] = new CheckBoxBase(this, 20, this.resourcesProvider);
            this.pollCheckBox[i2].setDrawUnchecked(false);
            this.pollCheckBox[i2].setBackgroundType(9);
            i2++;
        }
    }

    private void createCommentUI() {
        if (this.commentAvatarImages != null) {
            return;
        }
        this.commentAvatarImages = new ImageReceiver[3];
        this.commentAvatarDrawables = new AvatarDrawable[3];
        this.commentAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
            if (i >= imageReceiverArr.length) {
                return;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.commentAvatarImages[i].setRoundRadius(AndroidUtilities.dp(12.0f));
            this.commentAvatarDrawables[i] = new AvatarDrawable();
            this.commentAvatarDrawables[i].setTextSize(AndroidUtilities.dp(18.0f));
            i++;
        }
    }

    public void resetPressedLink(int i) {
        if (i != -1) {
            this.links.removeLinks(Integer.valueOf(i));
        } else {
            this.links.clear();
        }
        LinkSpanDrawable.LinkCollector linkCollector = this.factCheckLinks;
        if (linkCollector != null) {
            linkCollector.clear();
        }
        this.pressedEmoji = null;
        this.pressedFactCheckLink = null;
        if (this.pressedLink != null) {
            if (this.pressedLinkType == i || i == -1) {
                this.pressedLink = null;
                this.pressedLinkType = -1;
                invalidate();
            }
        }
    }

    private void resetUrlPaths() {
        if (this.quoteHighlight != null) {
            this.quoteHighlight = null;
        }
        if (this.urlPathSelection.isEmpty()) {
            return;
        }
        this.urlPathCache.addAll(this.urlPathSelection);
        this.urlPathSelection.clear();
    }

    private LinkPath obtainNewUrlPath() {
        LinkPath linkPath;
        if (!this.urlPathCache.isEmpty()) {
            linkPath = this.urlPathCache.get(0);
            this.urlPathCache.remove(0);
        } else {
            linkPath = new LinkPath(true);
        }
        linkPath.reset();
        this.urlPathSelection.add(linkPath);
        return linkPath;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int[] getRealSpanStartAndEnd(Spannable spannable, CharacterStyle characterStyle) {
        int i;
        int i2;
        boolean z;
        TextStyleSpan.TextStyleRun style;
        TLRPC$MessageEntity tLRPC$MessageEntity;
        if (!(characterStyle instanceof URLSpanBrowser) || (style = ((URLSpanBrowser) characterStyle).getStyle()) == null || (tLRPC$MessageEntity = style.urlEntity) == null) {
            i = 0;
            i2 = 0;
            z = false;
        } else {
            i = tLRPC$MessageEntity.offset;
            i2 = tLRPC$MessageEntity.length + i;
            z = true;
        }
        if (!z) {
            i = spannable.getSpanStart(characterStyle);
            i2 = spannable.getSpanEnd(characterStyle);
        }
        return new int[]{i, i2};
    }

    private boolean checkAdminMotionEvent(MotionEvent motionEvent) {
        RectF rectF;
        ChatMessageCellDelegate chatMessageCellDelegate;
        Drawable drawable;
        boolean z = false;
        if (this.adminLayout == null || (rectF = this.boostCounterBounds) == null || (this.currentUser == null && this.currentChat == null)) {
            this.boostCounterPressed = false;
            return false;
        }
        boolean contains = rectF.contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            SpannableString spannableString = new SpannableString(this.adminLayout.getText());
            BoostCounterSpan[] boostCounterSpanArr = (BoostCounterSpan[]) spannableString.getSpans(0, spannableString.length(), BoostCounterSpan.class);
            if (contains && boostCounterSpanArr != null && boostCounterSpanArr.length > 0) {
                z = true;
            }
            this.boostCounterPressed = z;
            if (z && (drawable = this.boostCounterLayoutSelector) != null) {
                if (Build.VERSION.SDK_INT >= 21) {
                    drawable.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.boostCounterLayoutSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.boostCounterPressed && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressBoostCounter(this);
            }
            Drawable drawable2 = this.boostCounterLayoutSelector;
            if (drawable2 != null) {
                drawable2.setState(StateSet.NOTHING);
            }
            this.boostCounterPressed = false;
        }
        return this.boostCounterPressed;
    }

    private boolean checkNameMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$Chat tLRPC$Chat;
        int i;
        if (!this.drawNameLayout || this.nameLayout == null || (drawable = this.nameLayoutSelector) == null || (this.currentUser == null && this.currentChat == null)) {
            this.nameLayoutPressed = false;
            return false;
        }
        boolean contains = drawable.getBounds().contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            this.nameLayoutPressed = contains;
            if (contains) {
                if (Build.VERSION.SDK_INT >= 21) {
                    this.nameLayoutSelector.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.nameLayoutSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.nameLayoutPressed && (chatMessageCellDelegate = this.delegate) != null) {
                if (this.viaOnly) {
                    TLRPC$User tLRPC$User = this.currentViaBotUser;
                    if (tLRPC$User != null && tLRPC$User.bot_inline_placeholder == null) {
                        chatMessageCellDelegate.didPressViaBotNotInline(this, tLRPC$User.id);
                    } else {
                        chatMessageCellDelegate.didPressViaBot(this, tLRPC$User != null ? tLRPC$User.username : this.currentMessageObject.messageOwner.via_bot_name);
                    }
                } else {
                    TLRPC$User tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null) {
                        chatMessageCellDelegate.didPressUserAvatar(this, tLRPC$User2, motionEvent.getX(), motionEvent.getY(), false);
                    } else {
                        TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                        if (tLRPC$Chat2 != null) {
                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                            if (tLRPC$MessageFwdHeader != null) {
                                int i2 = tLRPC$MessageFwdHeader.channel_post;
                                tLRPC$Chat = this.currentForwardChannel;
                                i = i2;
                            } else {
                                tLRPC$Chat = tLRPC$Chat2;
                                i = 0;
                            }
                            chatMessageCellDelegate.didPressChannelAvatar(this, tLRPC$Chat != null ? tLRPC$Chat : tLRPC$Chat2, i, this.lastTouchX, this.lastTouchY, false);
                        }
                    }
                }
            }
            this.nameLayoutSelector.setState(StateSet.NOTHING);
            this.nameLayoutPressed = false;
        }
        return this.nameLayoutPressed;
    }

    private boolean checkNameStatusMotionEvent(MotionEvent motionEvent) {
        if (!this.drawNameLayout || this.nameLayout == null || this.nameLayoutSelector == null || ((this.currentUser == null && this.currentChat == null) || this.currentNameStatus == null || this.currentNameStatusDrawable == null)) {
            this.nameStatusPressed = false;
            return false;
        }
        boolean contains = this.nameStatusSelector.getBounds().contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            this.nameStatusPressed = contains;
            if (contains) {
                if (Build.VERSION.SDK_INT >= 21) {
                    this.nameStatusSelector.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.nameStatusSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.nameStatusPressed && this.delegate != null && this.currentUser != null) {
                this.delegate.didPressUserStatus(this, this.currentUser, this.currentNameStatusDrawable.getDrawable() instanceof AnimatedEmojiDrawable ? ((AnimatedEmojiDrawable) this.currentNameStatusDrawable.getDrawable()).getDocument() : null);
                invalidateOutbounds();
            }
            this.nameStatusSelector.setState(StateSet.NOTHING);
            this.nameStatusPressed = false;
        }
        return this.nameStatusPressed;
    }

    private void resetCodeSelectors() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.textLayoutBlocks != null) {
            for (int i = 0; i < this.currentMessageObject.textLayoutBlocks.size(); i++) {
                MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i);
                Drawable drawable = textLayoutBlock.copySelector;
                if (drawable != null) {
                    drawable.setCallback(this);
                    textLayoutBlock.copySelector.setState(StateSet.NOTHING);
                }
            }
        }
        if (this.captionLayout != null) {
            for (int i2 = 0; i2 < this.captionLayout.textLayoutBlocks.size(); i2++) {
                MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i2);
                Drawable drawable2 = textLayoutBlock2.copySelector;
                if (drawable2 != null) {
                    drawable2.setCallback(this);
                    textLayoutBlock2.copySelector.setState(StateSet.NOTHING);
                }
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x019a A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:43:0x009f, B:45:0x00b4, B:49:0x00bd, B:51:0x00d1, B:54:0x00d7, B:56:0x00dd, B:58:0x00ee, B:60:0x00f8, B:62:0x00fe, B:64:0x0102, B:66:0x0106, B:67:0x0109, B:68:0x010f, B:70:0x0117, B:71:0x011e, B:73:0x012b, B:75:0x0145, B:77:0x0150, B:80:0x0160, B:86:0x016f, B:91:0x017f, B:93:0x0182, B:95:0x0188, B:98:0x018e, B:100:0x0194, B:102:0x019a, B:104:0x01a0, B:170:0x033e, B:109:0x01aa, B:110:0x01b6, B:112:0x01ba, B:114:0x01c2, B:116:0x01e9, B:118:0x01ee, B:120:0x01f9, B:122:0x01fd, B:126:0x0210, B:127:0x0217, B:169:0x0332, B:168:0x032f, B:117:0x01ec, B:172:0x0342, B:174:0x0348, B:176:0x034c, B:178:0x0354, B:180:0x035b, B:181:0x0363, B:183:0x0367, B:185:0x036d, B:90:0x0175, B:84:0x0166, B:128:0x021b, B:130:0x024b, B:131:0x024d, B:133:0x0257, B:135:0x0263, B:140:0x027d, B:142:0x0280, B:145:0x028b, B:148:0x02c0, B:150:0x02c8, B:152:0x02ce, B:154:0x02d3, B:156:0x02df, B:159:0x02f6, B:161:0x02f9, B:164:0x0304, B:157:0x02ea, B:138:0x0271), top: B:279:0x009f, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0342 A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:43:0x009f, B:45:0x00b4, B:49:0x00bd, B:51:0x00d1, B:54:0x00d7, B:56:0x00dd, B:58:0x00ee, B:60:0x00f8, B:62:0x00fe, B:64:0x0102, B:66:0x0106, B:67:0x0109, B:68:0x010f, B:70:0x0117, B:71:0x011e, B:73:0x012b, B:75:0x0145, B:77:0x0150, B:80:0x0160, B:86:0x016f, B:91:0x017f, B:93:0x0182, B:95:0x0188, B:98:0x018e, B:100:0x0194, B:102:0x019a, B:104:0x01a0, B:170:0x033e, B:109:0x01aa, B:110:0x01b6, B:112:0x01ba, B:114:0x01c2, B:116:0x01e9, B:118:0x01ee, B:120:0x01f9, B:122:0x01fd, B:126:0x0210, B:127:0x0217, B:169:0x0332, B:168:0x032f, B:117:0x01ec, B:172:0x0342, B:174:0x0348, B:176:0x034c, B:178:0x0354, B:180:0x035b, B:181:0x0363, B:183:0x0367, B:185:0x036d, B:90:0x0175, B:84:0x0166, B:128:0x021b, B:130:0x024b, B:131:0x024d, B:133:0x0257, B:135:0x0263, B:140:0x027d, B:142:0x0280, B:145:0x028b, B:148:0x02c0, B:150:0x02c8, B:152:0x02ce, B:154:0x02d3, B:156:0x02df, B:159:0x02f6, B:161:0x02f9, B:164:0x0304, B:157:0x02ea, B:138:0x0271), top: B:279:0x009f, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:218:0x03f3  */
    /* JADX WARN: Removed duplicated region for block: B:239:0x0460  */
    /* JADX WARN: Removed duplicated region for block: B:275:0x04f0 A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:283:0x0459 A[EDGE_INSN: B:283:0x0459->B:237:0x0459 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:308:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x0182 A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:43:0x009f, B:45:0x00b4, B:49:0x00bd, B:51:0x00d1, B:54:0x00d7, B:56:0x00dd, B:58:0x00ee, B:60:0x00f8, B:62:0x00fe, B:64:0x0102, B:66:0x0106, B:67:0x0109, B:68:0x010f, B:70:0x0117, B:71:0x011e, B:73:0x012b, B:75:0x0145, B:77:0x0150, B:80:0x0160, B:86:0x016f, B:91:0x017f, B:93:0x0182, B:95:0x0188, B:98:0x018e, B:100:0x0194, B:102:0x019a, B:104:0x01a0, B:170:0x033e, B:109:0x01aa, B:110:0x01b6, B:112:0x01ba, B:114:0x01c2, B:116:0x01e9, B:118:0x01ee, B:120:0x01f9, B:122:0x01fd, B:126:0x0210, B:127:0x0217, B:169:0x0332, B:168:0x032f, B:117:0x01ec, B:172:0x0342, B:174:0x0348, B:176:0x034c, B:178:0x0354, B:180:0x035b, B:181:0x0363, B:183:0x0367, B:185:0x036d, B:90:0x0175, B:84:0x0166, B:128:0x021b, B:130:0x024b, B:131:0x024d, B:133:0x0257, B:135:0x0263, B:140:0x027d, B:142:0x0280, B:145:0x028b, B:148:0x02c0, B:150:0x02c8, B:152:0x02ce, B:154:0x02d3, B:156:0x02df, B:159:0x02f6, B:161:0x02f9, B:164:0x0304, B:157:0x02ea, B:138:0x0271), top: B:279:0x009f, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkTextBlockMotionEvent(MotionEvent motionEvent) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        int i;
        int i2;
        boolean z;
        boolean z2;
        AnimatedEmojiSpan animatedEmojiSpan;
        boolean z3;
        Object obj;
        CharacterStyle[] characterStyleArr;
        CharacterStyle[] characterStyleArr2;
        ReplyMessageLine replyMessageLine;
        ChatMessageCellDelegate chatMessageCellDelegate;
        int x;
        int y;
        int i3;
        int i4;
        MessageObject messageObject;
        int i5;
        MessageObject messageObject2 = this.currentMessageObject;
        int i6 = messageObject2.type;
        if ((i6 != 0 && i6 != 19 && i6 != 24) || (arrayList = messageObject2.textLayoutBlocks) == null || arrayList.isEmpty() || !(this.currentMessageObject.messageText instanceof Spannable)) {
            return false;
        }
        if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && (this.pressedLinkType == 1 || this.pressedCopyCode != null))) {
            int x2 = (int) motionEvent.getX();
            int y2 = (int) motionEvent.getY();
            int i7 = this.textX;
            if (x2 >= i7 && y2 >= (i2 = this.textY)) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (x2 <= i7 + messageObject3.textWidth && y2 <= i2 + messageObject3.textHeight(this.transitionParams)) {
                    int i8 = y2 - this.textY;
                    int i9 = 0;
                    for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= i8; i10++) {
                        i9 = i10;
                    }
                    try {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i9);
                        int i11 = (int) (x2 - (this.textX - (textLayoutBlock.isRtl() ? this.currentMessageObject.textXOffset : 0.0f)));
                        int textYOffset = (int) (i8 - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams));
                        if (!textLayoutBlock.quote && textLayoutBlock.code && i11 > 0 && i11 <= this.currentMessageObject.textWidth && textYOffset >= ((textLayoutBlock.padTop + textLayoutBlock.height) + textLayoutBlock.padBottom) - AndroidUtilities.dp(38.0f) && textYOffset <= textLayoutBlock.padTop + textLayoutBlock.height + textLayoutBlock.padBottom) {
                            if (motionEvent.getAction() == 1) {
                                if (textLayoutBlock == this.pressedCopyCode && (chatMessageCellDelegate = this.delegate) != null) {
                                    chatMessageCellDelegate.didPressCodeCopy(this, textLayoutBlock);
                                }
                                resetCodeSelectors();
                                this.pressedCopyCode = null;
                            } else {
                                this.pressedCopyCode = textLayoutBlock;
                                if (Build.VERSION.SDK_INT >= 21) {
                                    textLayoutBlock.copySelector.setHotspot(i11, textYOffset);
                                }
                                textLayoutBlock.copySelector.setCallback(this);
                                textLayoutBlock.copySelector.setState(this.pressedState);
                            }
                            return true;
                        }
                        int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(textYOffset);
                        float f = i11;
                        int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f);
                        float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f) {
                            Spannable spannable = (Spannable) this.currentMessageObject.messageText;
                            CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                z = false;
                                if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                    z2 = z;
                                    if (characterStyleArr3.length != 0 && ((!(characterStyleArr3[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                        if (motionEvent.getAction() != 0) {
                                            CharacterStyle characterStyle = characterStyleArr3[0];
                                            if (characterStyle instanceof AnimatedEmojiSpan) {
                                                AnimatedEmojiSpan animatedEmojiSpan2 = this.pressedEmoji;
                                                if (animatedEmojiSpan2 != null) {
                                                    if (animatedEmojiSpan2 != characterStyle) {
                                                    }
                                                }
                                                resetPressedLink(1);
                                                this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr3[0];
                                                this.pressedLinkType = 1;
                                            } else {
                                                LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                                if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr3[0]) {
                                                    this.links.removeLink(this.pressedLink);
                                                    CharacterStyle characterStyle2 = characterStyleArr3[0];
                                                    Object obj2 = URLSpanMono.class;
                                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle2, this.resourcesProvider, f, textYOffset, spanSupportsLongPress(characterStyle2));
                                                    this.pressedLink = linkSpanDrawable2;
                                                    linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                                    if (textLayoutBlock.quote && (replyMessageLine = this.quoteLine) != null) {
                                                        this.pressedLink.setColor(Theme.multAlpha(replyMessageLine.getColor(), Theme.isCurrentThemeDark() ? 0.13f : 0.1f));
                                                    }
                                                    this.linkBlockNum = i9;
                                                    this.pressedLinkType = 1;
                                                    try {
                                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                        int i12 = realSpanStartAndEnd[0];
                                                        int i13 = textLayoutBlock.charactersOffset;
                                                        int i14 = i12 - i13;
                                                        realSpanStartAndEnd[0] = i14;
                                                        realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i13;
                                                        obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, i14, 0.0f);
                                                        textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                        if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                            int i15 = i9 + 1;
                                                            while (i15 < this.currentMessageObject.textLayoutBlocks.size()) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock2 = this.currentMessageObject.textLayoutBlocks.get(i15);
                                                                if (z2) {
                                                                    int i16 = textLayoutBlock2.charactersOffset;
                                                                    obj = obj2;
                                                                    characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i16, i16, obj);
                                                                } else {
                                                                    obj = obj2;
                                                                    int i17 = textLayoutBlock2.charactersOffset;
                                                                    characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i17, i17, ClickableSpan.class);
                                                                }
                                                                if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                                obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams));
                                                                int i18 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                                textLayoutBlock2.textLayout.getSelectionPath(0, i18, obtainNewPath2);
                                                                if (i18 < textLayoutBlock2.charactersEnd - 1) {
                                                                    break;
                                                                }
                                                                i15++;
                                                                obj2 = obj;
                                                            }
                                                        }
                                                        obj = obj2;
                                                        if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                            int i19 = 0;
                                                            for (int i20 = i9 - 1; i20 >= 0; i20--) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock3 = this.currentMessageObject.textLayoutBlocks.get(i20);
                                                                if (z2) {
                                                                    int i21 = textLayoutBlock3.charactersEnd - 1;
                                                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(i21, i21, obj);
                                                                } else {
                                                                    int i22 = textLayoutBlock3.charactersEnd - 1;
                                                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(i22, i22, ClickableSpan.class);
                                                                }
                                                                if (characterStyleArr == null || characterStyleArr.length == 0 || characterStyleArr[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                                i19 -= textLayoutBlock3.height;
                                                                int i23 = realSpanStartAndEnd[0];
                                                                int i24 = textLayoutBlock.charactersOffset;
                                                                int i25 = textLayoutBlock3.charactersOffset;
                                                                int i26 = (i23 + i24) - i25;
                                                                int i27 = (realSpanStartAndEnd[1] + i24) - i25;
                                                                obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i26, i19);
                                                                textLayoutBlock3.textLayout.getSelectionPath(i26, i27, obtainNewPath3);
                                                                if (i26 > textLayoutBlock3.charactersOffset) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception e) {
                                                        FileLog.e(e);
                                                    }
                                                    z3 = true;
                                                    this.links.addLink(this.pressedLink, 1);
                                                    invalidate();
                                                    return z3;
                                                }
                                            }
                                            z3 = true;
                                            invalidate();
                                            return z3;
                                        }
                                        CharacterStyle characterStyle3 = characterStyleArr3[0];
                                        if ((characterStyle3 instanceof AnimatedEmojiSpan) && (animatedEmojiSpan = this.pressedEmoji) == characterStyle3) {
                                            if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                                resetPressedLink(1);
                                                this.pressedEmoji = null;
                                                return true;
                                            }
                                            resetPressedLink(1);
                                            this.pressedEmoji = null;
                                        } else {
                                            LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                            if (linkSpanDrawable3 != null && characterStyle3 == linkSpanDrawable3.getSpan()) {
                                                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                                resetPressedLink(1);
                                                return true;
                                            }
                                        }
                                    }
                                }
                                characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                z2 = false;
                                if (characterStyleArr3.length != 0) {
                                    if (motionEvent.getAction() != 0) {
                                    }
                                }
                            }
                            characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            z = true;
                            if (characterStyleArr3 != null) {
                                z2 = z;
                                if (characterStyleArr3.length != 0) {
                                }
                            }
                            characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                            z2 = false;
                            if (characterStyleArr3.length != 0) {
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            }
            i = 1;
            resetPressedLink(1);
            if (motionEvent.getAction() != 0 || motionEvent.getAction() == i) {
                x = (int) motionEvent.getX();
                y = (int) motionEvent.getY();
                if (this.pressedLink == null && x >= (i3 = this.textX) && y >= (i4 = this.textY)) {
                    messageObject = this.currentMessageObject;
                    if (x <= i3 + messageObject.textWidth && y <= i4 + messageObject.textHeight(this.transitionParams)) {
                        int i28 = y - this.textY;
                        i5 = 0;
                        while (true) {
                            if (i5 < this.currentMessageObject.textLayoutBlocks.size()) {
                                break;
                            }
                            MessageObject.TextLayoutBlock textLayoutBlock4 = this.currentMessageObject.textLayoutBlocks.get(i5);
                            if (textLayoutBlock4.quoteCollapse && textLayoutBlock4.collapsedHeight < textLayoutBlock4.height) {
                                float f2 = i28;
                                if (f2 >= textLayoutBlock4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) && f2 < textLayoutBlock4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) + textLayoutBlock4.padTop + textLayoutBlock4.height(this.transitionParams) + textLayoutBlock4.padBottom) {
                                    this.pressedBlock = i5;
                                    ButtonBounce buttonBounce = textLayoutBlock4.collapsedBounce;
                                    if (buttonBounce == null || buttonBounce.getView() != this) {
                                        textLayoutBlock4.collapsedBounce = new ButtonBounce(this);
                                    }
                                    textLayoutBlock4.collapsedBounce.setPressed(motionEvent.getAction() == 0);
                                }
                            }
                            i5++;
                        }
                    }
                }
                if (motionEvent.getAction() == 1) {
                    if (this.pressedBlock != -1) {
                        for (int i29 = 0; i29 < this.currentMessageObject.textLayoutBlocks.size(); i29++) {
                            MessageObject.TextLayoutBlock textLayoutBlock5 = this.currentMessageObject.textLayoutBlocks.get(i29);
                            if (i29 == this.pressedBlock && !this.transitionParams.animateExpandedQuotes) {
                                MessageObject messageObject4 = textLayoutBlock5.messageObject;
                                if (messageObject4 == null) {
                                    messageObject4 = getPrimaryMessageObject();
                                    textLayoutBlock5.messageObject = messageObject4;
                                }
                                if (messageObject4 != null) {
                                    boolean z4 = !textLayoutBlock5.collapsed();
                                    HashSet<Integer> hashSet = messageObject4.expandedQuotes == null ? new HashSet<>() : new HashSet<>(messageObject4.expandedQuotes);
                                    messageObject4.expandedQuotes = hashSet;
                                    if (z4) {
                                        hashSet.remove(Integer.valueOf(textLayoutBlock5.index));
                                    } else {
                                        hashSet.add(Integer.valueOf(textLayoutBlock5.index));
                                    }
                                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                        chatMessageCellDelegate2.forceUpdate(this, true);
                                    }
                                }
                            }
                        }
                    }
                    for (int i30 = 0; i30 < this.currentMessageObject.textLayoutBlocks.size(); i30++) {
                        ButtonBounce buttonBounce2 = this.currentMessageObject.textLayoutBlocks.get(i30).collapsedBounce;
                        if (buttonBounce2 != null) {
                            buttonBounce2.setPressed(false);
                        }
                    }
                    this.pressedBlock = -1;
                    return this.pressedBlock != -1;
                }
            } else if (motionEvent.getAction() == 3) {
                for (int i31 = 0; i31 < this.currentMessageObject.textLayoutBlocks.size(); i31++) {
                    ButtonBounce buttonBounce3 = this.currentMessageObject.textLayoutBlocks.get(i31).collapsedBounce;
                    if (buttonBounce3 != null) {
                        buttonBounce3.setPressed(false);
                    }
                }
                this.pressedBlock = -1;
            }
            if (this.pressedBlock != -1) {
            }
        } else if (motionEvent.getAction() == 1) {
            this.pressedCopyCode = null;
            resetCodeSelectors();
        }
        i = 1;
        if (motionEvent.getAction() != 0) {
        }
        x = (int) motionEvent.getX();
        y = (int) motionEvent.getY();
        if (this.pressedLink == null) {
            messageObject = this.currentMessageObject;
            if (x <= i3 + messageObject.textWidth) {
                int i282 = y - this.textY;
                i5 = 0;
                while (true) {
                    if (i5 < this.currentMessageObject.textLayoutBlocks.size()) {
                    }
                    i5++;
                }
            }
        }
        if (motionEvent.getAction() == 1) {
        }
        if (this.pressedBlock != -1) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:164:0x0335 A[Catch: Exception -> 0x00ae, TryCatch #0 {Exception -> 0x00ae, blocks: (B:35:0x0096, B:37:0x00a9, B:41:0x00b2, B:43:0x00c6, B:46:0x00cc, B:48:0x00d2, B:50:0x00e3, B:52:0x00ed, B:54:0x00f3, B:56:0x00f7, B:58:0x00fb, B:59:0x00fe, B:60:0x0104, B:62:0x010c, B:63:0x0113, B:65:0x0120, B:67:0x013a, B:69:0x0145, B:72:0x0153, B:78:0x0162, B:83:0x0172, B:85:0x0175, B:87:0x017b, B:90:0x0181, B:92:0x0187, B:94:0x018d, B:96:0x0193, B:162:0x0331, B:101:0x019d, B:102:0x01a9, B:104:0x01ad, B:106:0x01b5, B:108:0x01dc, B:110:0x01e1, B:112:0x01ec, B:114:0x01f0, B:118:0x0203, B:119:0x020a, B:161:0x0325, B:160:0x0322, B:109:0x01df, B:164:0x0335, B:166:0x033b, B:168:0x033f, B:170:0x0347, B:172:0x034e, B:173:0x0356, B:175:0x035a, B:177:0x0360, B:82:0x0168, B:76:0x0159, B:120:0x020e, B:122:0x023e, B:123:0x0240, B:125:0x024a, B:127:0x0256, B:132:0x0270, B:134:0x0273, B:137:0x027e, B:140:0x02b3, B:142:0x02bb, B:144:0x02c1, B:146:0x02c6, B:148:0x02d2, B:151:0x02e9, B:153:0x02ec, B:156:0x02f7, B:149:0x02dd, B:130:0x0264), top: B:265:0x0096, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:199:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:231:0x0460  */
    /* JADX WARN: Removed duplicated region for block: B:263:0x04e8 A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:294:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0175 A[Catch: Exception -> 0x00ae, TryCatch #0 {Exception -> 0x00ae, blocks: (B:35:0x0096, B:37:0x00a9, B:41:0x00b2, B:43:0x00c6, B:46:0x00cc, B:48:0x00d2, B:50:0x00e3, B:52:0x00ed, B:54:0x00f3, B:56:0x00f7, B:58:0x00fb, B:59:0x00fe, B:60:0x0104, B:62:0x010c, B:63:0x0113, B:65:0x0120, B:67:0x013a, B:69:0x0145, B:72:0x0153, B:78:0x0162, B:83:0x0172, B:85:0x0175, B:87:0x017b, B:90:0x0181, B:92:0x0187, B:94:0x018d, B:96:0x0193, B:162:0x0331, B:101:0x019d, B:102:0x01a9, B:104:0x01ad, B:106:0x01b5, B:108:0x01dc, B:110:0x01e1, B:112:0x01ec, B:114:0x01f0, B:118:0x0203, B:119:0x020a, B:161:0x0325, B:160:0x0322, B:109:0x01df, B:164:0x0335, B:166:0x033b, B:168:0x033f, B:170:0x0347, B:172:0x034e, B:173:0x0356, B:175:0x035a, B:177:0x0360, B:82:0x0168, B:76:0x0159, B:120:0x020e, B:122:0x023e, B:123:0x0240, B:125:0x024a, B:127:0x0256, B:132:0x0270, B:134:0x0273, B:137:0x027e, B:140:0x02b3, B:142:0x02bb, B:144:0x02c1, B:146:0x02c6, B:148:0x02d2, B:151:0x02e9, B:153:0x02ec, B:156:0x02f7, B:149:0x02dd, B:130:0x0264), top: B:265:0x0096, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x018d A[Catch: Exception -> 0x00ae, TryCatch #0 {Exception -> 0x00ae, blocks: (B:35:0x0096, B:37:0x00a9, B:41:0x00b2, B:43:0x00c6, B:46:0x00cc, B:48:0x00d2, B:50:0x00e3, B:52:0x00ed, B:54:0x00f3, B:56:0x00f7, B:58:0x00fb, B:59:0x00fe, B:60:0x0104, B:62:0x010c, B:63:0x0113, B:65:0x0120, B:67:0x013a, B:69:0x0145, B:72:0x0153, B:78:0x0162, B:83:0x0172, B:85:0x0175, B:87:0x017b, B:90:0x0181, B:92:0x0187, B:94:0x018d, B:96:0x0193, B:162:0x0331, B:101:0x019d, B:102:0x01a9, B:104:0x01ad, B:106:0x01b5, B:108:0x01dc, B:110:0x01e1, B:112:0x01ec, B:114:0x01f0, B:118:0x0203, B:119:0x020a, B:161:0x0325, B:160:0x0322, B:109:0x01df, B:164:0x0335, B:166:0x033b, B:168:0x033f, B:170:0x0347, B:172:0x034e, B:173:0x0356, B:175:0x035a, B:177:0x0360, B:82:0x0168, B:76:0x0159, B:120:0x020e, B:122:0x023e, B:123:0x0240, B:125:0x024a, B:127:0x0256, B:132:0x0270, B:134:0x0273, B:137:0x027e, B:140:0x02b3, B:142:0x02bb, B:144:0x02c1, B:146:0x02c6, B:148:0x02d2, B:151:0x02e9, B:153:0x02ec, B:156:0x02f7, B:149:0x02dd, B:130:0x0264), top: B:265:0x0096, inners: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkCaptionMotionEvent(MotionEvent motionEvent) {
        int i;
        boolean z;
        boolean z2;
        AnimatedEmojiSpan animatedEmojiSpan;
        boolean z3;
        Object obj;
        CharacterStyle[] characterStyleArr;
        CharacterStyle[] characterStyleArr2;
        ReplyMessageLine replyMessageLine;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!(this.currentCaption instanceof Spannable) || this.captionLayout == null) {
            return false;
        }
        if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && (this.pressedLinkType == 1 || this.pressedCopyCode != null))) {
            int y = (int) motionEvent.getY();
            float x = (int) motionEvent.getX();
            float f = this.captionX;
            if (x >= f) {
                float f2 = y;
                float f3 = this.captionY;
                if (f2 >= f3) {
                    MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                    if (x <= f + textLayoutBlocks.textWidth && f2 <= f3 + textLayoutBlocks.textHeight(this.transitionParams)) {
                        int i2 = (int) (f2 - this.captionY);
                        int i3 = 0;
                        for (int i4 = 0; i4 < this.captionLayout.textLayoutBlocks.size() && this.captionLayout.textLayoutBlocks.get(i4).textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) <= i2; i4++) {
                            i3 = i4;
                        }
                        try {
                            MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i3);
                            int i5 = (int) (x - (this.captionX - (textLayoutBlock.isRtl() ? this.captionLayout.textXOffset : 0.0f)));
                            int textYOffset = (int) (i2 - textLayoutBlock.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams));
                            if (!textLayoutBlock.quote && textLayoutBlock.code && i5 > 0 && i5 <= this.captionLayout.textWidth && textYOffset >= ((textLayoutBlock.padTop + textLayoutBlock.height) + textLayoutBlock.padBottom) - AndroidUtilities.dp(38.0f) && textYOffset <= textLayoutBlock.padTop + textLayoutBlock.height + textLayoutBlock.padBottom) {
                                if (motionEvent.getAction() == 1) {
                                    if (textLayoutBlock == this.pressedCopyCode && (chatMessageCellDelegate = this.delegate) != null) {
                                        chatMessageCellDelegate.didPressCodeCopy(this, textLayoutBlock);
                                    }
                                    resetCodeSelectors();
                                    this.pressedCopyCode = null;
                                } else {
                                    this.pressedCopyCode = textLayoutBlock;
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        textLayoutBlock.copySelector.setHotspot(i5, textYOffset);
                                    }
                                    textLayoutBlock.copySelector.setCallback(this);
                                    textLayoutBlock.copySelector.setState(this.pressedState);
                                }
                                return true;
                            }
                            int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(textYOffset);
                            float f4 = i5;
                            int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f4);
                            float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                            if (lineLeft <= f4 && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f4) {
                                Spannable spannable = (Spannable) this.currentCaption;
                                CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                    z = false;
                                    if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                        z2 = z;
                                        if (characterStyleArr3.length != 0 && ((!(characterStyleArr3[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                            if (motionEvent.getAction() != 0) {
                                                CharacterStyle characterStyle = characterStyleArr3[0];
                                                if (characterStyle instanceof AnimatedEmojiSpan) {
                                                    AnimatedEmojiSpan animatedEmojiSpan2 = this.pressedEmoji;
                                                    if (animatedEmojiSpan2 != null) {
                                                        if (animatedEmojiSpan2 != characterStyle) {
                                                        }
                                                    }
                                                    resetPressedLink(1);
                                                    this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr3[0];
                                                    this.pressedLinkType = 1;
                                                } else {
                                                    LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                                    if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr3[0]) {
                                                        this.links.removeLink(this.pressedLink);
                                                        CharacterStyle characterStyle2 = characterStyleArr3[0];
                                                        Object obj2 = URLSpanMono.class;
                                                        LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle2, this.resourcesProvider, f4, textYOffset, spanSupportsLongPress(characterStyle2));
                                                        this.pressedLink = linkSpanDrawable2;
                                                        linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                                        if (textLayoutBlock.quote && (replyMessageLine = this.quoteLine) != null) {
                                                            this.pressedLink.setColor(Theme.multAlpha(replyMessageLine.getColor(), Theme.isCurrentThemeDark() ? 0.13f : 0.1f));
                                                        }
                                                        this.linkBlockNum = i3;
                                                        this.pressedLinkType = 1;
                                                        try {
                                                            LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                            int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                            int i6 = realSpanStartAndEnd[0];
                                                            int i7 = textLayoutBlock.charactersOffset;
                                                            int i8 = i6 - i7;
                                                            realSpanStartAndEnd[0] = i8;
                                                            realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i7;
                                                            obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, i8, 0.0f);
                                                            textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                            if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                                int i9 = i3 + 1;
                                                                while (i9 < this.captionLayout.textLayoutBlocks.size()) {
                                                                    MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i9);
                                                                    if (z2) {
                                                                        int i10 = textLayoutBlock2.charactersOffset;
                                                                        obj = obj2;
                                                                        characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i10, i10, obj);
                                                                    } else {
                                                                        obj = obj2;
                                                                        int i11 = textLayoutBlock2.charactersOffset;
                                                                        characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i11, i11, ClickableSpan.class);
                                                                    }
                                                                    if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                        break;
                                                                    }
                                                                    LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                                    obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) - textLayoutBlock.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams));
                                                                    int i12 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                                    textLayoutBlock2.textLayout.getSelectionPath(0, i12, obtainNewPath2);
                                                                    if (i12 < textLayoutBlock2.charactersEnd - 1) {
                                                                        break;
                                                                    }
                                                                    i9++;
                                                                    obj2 = obj;
                                                                }
                                                            }
                                                            obj = obj2;
                                                            if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                                int i13 = 0;
                                                                for (int i14 = i3 - 1; i14 >= 0; i14--) {
                                                                    MessageObject.TextLayoutBlock textLayoutBlock3 = this.captionLayout.textLayoutBlocks.get(i14);
                                                                    if (z2) {
                                                                        int i15 = textLayoutBlock3.charactersEnd - 1;
                                                                        characterStyleArr = (CharacterStyle[]) spannable.getSpans(i15, i15, obj);
                                                                    } else {
                                                                        int i16 = textLayoutBlock3.charactersEnd - 1;
                                                                        characterStyleArr = (CharacterStyle[]) spannable.getSpans(i16, i16, ClickableSpan.class);
                                                                    }
                                                                    if (characterStyleArr == null || characterStyleArr.length == 0 || characterStyleArr[0] != this.pressedLink.getSpan()) {
                                                                        break;
                                                                    }
                                                                    LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                                    i13 -= textLayoutBlock3.height;
                                                                    int i17 = realSpanStartAndEnd[0];
                                                                    int i18 = textLayoutBlock.charactersOffset;
                                                                    int i19 = textLayoutBlock3.charactersOffset;
                                                                    int i20 = (i17 + i18) - i19;
                                                                    int i21 = (realSpanStartAndEnd[1] + i18) - i19;
                                                                    obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i20, i13);
                                                                    textLayoutBlock3.textLayout.getSelectionPath(i20, i21, obtainNewPath3);
                                                                    if (i20 > textLayoutBlock3.charactersOffset) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        } catch (Exception e) {
                                                            FileLog.e(e);
                                                        }
                                                        z3 = true;
                                                        this.links.addLink(this.pressedLink, 1);
                                                        invalidate();
                                                        return z3;
                                                    }
                                                }
                                                z3 = true;
                                                invalidate();
                                                return z3;
                                            }
                                            CharacterStyle characterStyle3 = characterStyleArr3[0];
                                            if ((characterStyle3 instanceof AnimatedEmojiSpan) && (animatedEmojiSpan = this.pressedEmoji) == characterStyle3) {
                                                if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                                    resetPressedLink(1);
                                                    this.pressedEmoji = null;
                                                    return true;
                                                }
                                                resetPressedLink(1);
                                                this.pressedEmoji = null;
                                            } else {
                                                LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                                if (linkSpanDrawable3 != null && characterStyle3 == linkSpanDrawable3.getSpan()) {
                                                    this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                                    resetPressedLink(1);
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                    characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                    z2 = false;
                                    if (characterStyleArr3.length != 0) {
                                        if (motionEvent.getAction() != 0) {
                                        }
                                    }
                                }
                                characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                                z = true;
                                if (characterStyleArr3 != null) {
                                    z2 = z;
                                    if (characterStyleArr3.length != 0) {
                                    }
                                }
                                characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                z2 = false;
                                if (characterStyleArr3.length != 0) {
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                    }
                }
            }
            i = 1;
            resetPressedLink(1);
            if (motionEvent.getAction() != 0 || motionEvent.getAction() == i) {
                int x2 = (int) motionEvent.getX();
                int y2 = (int) motionEvent.getY();
                if (this.pressedLink == null) {
                    float f5 = x2;
                    float f6 = this.captionX;
                    if (f5 >= f6) {
                        float f7 = y2;
                        float f8 = this.captionY;
                        if (f7 >= f8) {
                            MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                            if (f5 <= f6 + textLayoutBlocks2.textWidth && f7 <= f8 + textLayoutBlocks2.textHeight(this.transitionParams)) {
                                int i22 = (int) (f7 - this.captionY);
                                int i23 = 0;
                                while (true) {
                                    if (i23 >= this.captionLayout.textLayoutBlocks.size()) {
                                        break;
                                    }
                                    MessageObject.TextLayoutBlock textLayoutBlock4 = this.captionLayout.textLayoutBlocks.get(i23);
                                    if (textLayoutBlock4.quoteCollapse && textLayoutBlock4.collapsedHeight < textLayoutBlock4.height) {
                                        float f9 = i22;
                                        if (f9 >= textLayoutBlock4.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) && f9 < textLayoutBlock4.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) + textLayoutBlock4.padTop + textLayoutBlock4.height(this.transitionParams) + textLayoutBlock4.padBottom) {
                                            this.pressedBlock = i23;
                                            ButtonBounce buttonBounce = textLayoutBlock4.collapsedBounce;
                                            if (buttonBounce == null || buttonBounce.getView() != this) {
                                                textLayoutBlock4.collapsedBounce = new ButtonBounce(this);
                                            }
                                            textLayoutBlock4.collapsedBounce.setPressed(motionEvent.getAction() == 0);
                                        }
                                    }
                                    i23++;
                                }
                            }
                        }
                    }
                }
                if (motionEvent.getAction() == 1) {
                    if (this.pressedBlock != -1) {
                        for (int i24 = 0; i24 < this.captionLayout.textLayoutBlocks.size(); i24++) {
                            MessageObject.TextLayoutBlock textLayoutBlock5 = this.captionLayout.textLayoutBlocks.get(i24);
                            if (i24 == this.pressedBlock && !this.transitionParams.animateExpandedQuotes) {
                                MessageObject primaryMessageObject = getPrimaryMessageObject();
                                boolean z4 = !textLayoutBlock5.collapsed();
                                HashSet<Integer> hashSet = primaryMessageObject.expandedQuotes == null ? new HashSet<>() : new HashSet<>(primaryMessageObject.expandedQuotes);
                                primaryMessageObject.expandedQuotes = hashSet;
                                if (z4) {
                                    hashSet.remove(Integer.valueOf(textLayoutBlock5.index));
                                } else {
                                    hashSet.add(Integer.valueOf(textLayoutBlock5.index));
                                }
                                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                    chatMessageCellDelegate2.forceUpdate(this, true);
                                }
                            }
                        }
                    }
                    for (int i25 = 0; i25 < this.captionLayout.textLayoutBlocks.size(); i25++) {
                        ButtonBounce buttonBounce2 = this.captionLayout.textLayoutBlocks.get(i25).collapsedBounce;
                        if (buttonBounce2 != null) {
                            buttonBounce2.setPressed(false);
                        }
                    }
                    this.pressedBlock = -1;
                    return this.pressedBlock != -1;
                }
            } else if (motionEvent.getAction() == 3) {
                for (int i26 = 0; i26 < this.captionLayout.textLayoutBlocks.size(); i26++) {
                    ButtonBounce buttonBounce3 = this.captionLayout.textLayoutBlocks.get(i26).collapsedBounce;
                    if (buttonBounce3 != null) {
                        buttonBounce3.setPressed(false);
                    }
                }
                this.pressedBlock = -1;
            }
            if (this.pressedBlock != -1) {
            }
        } else if (motionEvent.getAction() == 1) {
            this.pressedCopyCode = null;
            resetCodeSelectors();
        }
        i = 1;
        if (motionEvent.getAction() != 0) {
        }
        int x22 = (int) motionEvent.getX();
        int y22 = (int) motionEvent.getY();
        if (this.pressedLink == null) {
        }
        if (motionEvent.getAction() == 1) {
        }
        if (this.pressedBlock != -1) {
        }
    }

    private boolean checkGameMotionEvent(MotionEvent motionEvent) {
        int i;
        int i2;
        if (this.hasGamePreview) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4) {
                    this.buttonPressed = 1;
                    invalidate();
                    return true;
                } else if (this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                    this.gamePreviewPressed = true;
                    return true;
                } else if (this.descriptionLayout != null && y >= this.descriptionY) {
                    try {
                        int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                        int i3 = y - this.descriptionY;
                        int lineForVertical = this.descriptionLayout.getLineForVertical(i3);
                        float f = dp;
                        int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                        float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                            Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                            ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (clickableSpanArr.length != 0 && ((!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                    this.links.removeLink(this.pressedLink);
                                    ClickableSpan clickableSpan = clickableSpanArr[0];
                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpan, this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpan));
                                    this.pressedLink = linkSpanDrawable2;
                                    linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                    this.linkBlockNum = -10;
                                    this.pressedLinkType = 2;
                                    try {
                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                        obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                        this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                    } catch (Exception e) {
                                        FileLog.e(e);
                                    }
                                    this.links.addLink(this.pressedLink, 2);
                                }
                                invalidate();
                                return true;
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.pressedLinkType == 2 || this.gamePreviewPressed || this.buttonPressed != 0) {
                    if (this.buttonPressed != 0) {
                        this.buttonPressed = 0;
                        playSoundEffect(0);
                        didPressButton(true, false);
                        invalidate();
                    } else {
                        LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                        if (linkSpanDrawable3 != null) {
                            if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                                Browser.openUrl(getContext(), ((URLSpan) this.pressedLink.getSpan()).getURL());
                            } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                                ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                            }
                            resetPressedLink(2);
                        } else {
                            this.gamePreviewPressed = false;
                            int i4 = 0;
                            while (true) {
                                if (i4 >= this.botButtons.size()) {
                                    break;
                                }
                                BotButton botButton = this.botButtons.get(i4);
                                if (botButton.button instanceof TLRPC$TL_keyboardButtonGame) {
                                    playSoundEffect(0);
                                    this.delegate.didPressBotButton(this, botButton.button);
                                    invalidate();
                                    break;
                                }
                                i4++;
                            }
                            resetPressedLink(2);
                            return true;
                        }
                    }
                } else {
                    resetPressedLink(2);
                }
            }
            return false;
        }
        return false;
    }

    private boolean checkTranscribeButtonMotionEvent(MotionEvent motionEvent) {
        TranscribeButton transcribeButton;
        return this.useTranscribeButton && (!this.isPlayingRound || getVideoTranscriptionProgress() > 0.0f || this.wasTranscriptionOpen) && (transcribeButton = this.transcribeButton) != null && transcribeButton.onTouch(motionEvent.getAction(), motionEvent.getX(), motionEvent.getY());
    }

    private boolean checkLinkPreviewMotionEvent(MotionEvent motionEvent) {
        int i;
        MessageObject messageObject;
        TLRPC$TL_channelAdminLogEvent tLRPC$TL_channelAdminLogEvent;
        int i2;
        int i3;
        int i4;
        int i5;
        int dp;
        int dp2;
        int i6;
        int themedColor;
        MessageObject messageObject2;
        int i7 = this.currentMessageObject.type;
        if ((i7 == 0 || i7 == 24) && this.hasLinkPreview) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i8 = this.unmovedTextX;
            if (x >= i8 && x <= (i8 + this.backgroundWidth) - AndroidUtilities.dp(14.0f) && y >= (i = this.linkPreviewY)) {
                if (y <= i + this.linkPreviewHeight + AndroidUtilities.dp((this.drawInstantView ? 46 : 0) + 8)) {
                    if (motionEvent.getAction() == 0) {
                        if (this.descriptionLayout != null && y >= this.descriptionY && !this.currentMessageObject.preview) {
                            try {
                                int dp3 = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                                int i9 = y - this.descriptionY;
                                if (i9 <= this.descriptionLayout.getHeight()) {
                                    int lineForVertical = this.descriptionLayout.getLineForVertical(i9);
                                    float f = dp3;
                                    int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                                    float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                                    if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                                        Spannable spannable = (Spannable) (this.currentMessageObject.isSponsored() ? this.currentMessageObject.messageText : this.currentMessageObject.linkDescription);
                                        ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                        if (clickableSpanArr.length != 0 && ((!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                            LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                            if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                                this.links.removeLink(this.pressedLink);
                                                ClickableSpan clickableSpan = clickableSpanArr[0];
                                                LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpan, this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpan));
                                                this.pressedLink = linkSpanDrawable2;
                                                if (!this.hasLinkPreview || this.linkLine == null || (messageObject2 = this.currentMessageObject) == null || messageObject2.isOutOwner()) {
                                                    themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground);
                                                } else {
                                                    themedColor = Theme.multAlpha(this.linkLine.getColor(), 0.1f);
                                                }
                                                linkSpanDrawable2.setColor(themedColor);
                                                this.linkBlockNum = -10;
                                                this.pressedLinkType = 2;
                                                startCheckLongPress();
                                                try {
                                                    LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                    int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                    obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                                    this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                } catch (Exception e) {
                                                    FileLog.e(e);
                                                }
                                                this.links.addLink(this.pressedLink, 2);
                                            }
                                            invalidate();
                                            return true;
                                        }
                                    }
                                }
                            } catch (Exception e2) {
                                FileLog.e(e2);
                            }
                        }
                        if (this.pressedLink == null) {
                            int dp4 = AndroidUtilities.dp(48.0f);
                            if (this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp4 && y >= (i6 = this.buttonY + dp) && y <= i6 + dp4) {
                                this.miniButtonPressed = 1;
                                invalidate();
                                return true;
                            } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i4 = this.videoButtonX) && x <= i4 + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i5 = this.videoButtonY) && y <= i5 + AndroidUtilities.dp(30.0f)) {
                                this.videoButtonPressed = 1;
                                invalidate();
                                return true;
                            } else if ((this.drawPhotoImage && this.currentMessageObject.sponsoredMedia != null && this.photoImage.isInsideImage(x, y)) || (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && ((!this.checkOnlyButtonPressed && this.photoImage.isInsideImage(x, y)) || (x >= (i2 = this.buttonX) && x <= i2 + AndroidUtilities.dp(48.0f) && y >= (i3 = this.buttonY) && y <= i3 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4)))) {
                                this.buttonPressed = 1;
                                invalidate();
                                return true;
                            } else {
                                this.instantPressed = true;
                                this.selectorDrawableMaskType[0] = 0;
                                if (Build.VERSION.SDK_INT >= 21) {
                                    Drawable drawable = this.selectorDrawable[0];
                                    if (drawable != null && drawable.getBounds().contains(x, y)) {
                                        this.selectorDrawable[0].setHotspot(x, y);
                                        this.selectorDrawable[0].setState(this.pressedState);
                                    }
                                    Drawable drawable2 = this.linkPreviewSelector;
                                    if (drawable2 != null && drawable2.getBounds().contains(x, y)) {
                                        this.linkPreviewSelector.setHotspot(x, y);
                                        this.linkPreviewSelector.setState(this.pressedState);
                                    }
                                    setInstantButtonPressed(true);
                                }
                                ButtonBounce buttonBounce = this.linkPreviewBounce;
                                if (buttonBounce != null) {
                                    buttonBounce.setPressed(true);
                                }
                                invalidate();
                                return true;
                            }
                        }
                    } else if (motionEvent.getAction() == 1) {
                        if (this.instantPressed) {
                            int i10 = this.documentAttachType;
                            if (i10 == 7) {
                                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                                    this.delegate.needPlayMessage(this, this.currentMessageObject, false);
                                } else {
                                    MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                                }
                            } else if (this.drawInstantView || ((messageObject = this.currentMessageObject) != null && (tLRPC$TL_channelAdminLogEvent = messageObject.currentEvent) != null && (tLRPC$TL_channelAdminLogEvent.action instanceof TLRPC$TL_channelAdminLogEventActionEditMessage))) {
                                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                                if (chatMessageCellDelegate != null) {
                                    chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                                }
                            } else if (this.drawPhotoImage && (i10 == 2 || i10 == 4 || (this.authorLayout == null && this.titleLayout == null && this.descriptionLayout == null && this.siteNameLayout == null))) {
                                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                    chatMessageCellDelegate2.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                }
                            } else if (!messageObject.preview) {
                                TLRPC$WebPage tLRPC$WebPage = MessageObject.getMedia(messageObject.messageOwner).webpage;
                                if (tLRPC$WebPage != null && !TextUtils.isEmpty(tLRPC$WebPage.embed_url)) {
                                    ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                                    if (chatMessageCellDelegate3 != null) {
                                        chatMessageCellDelegate3.needOpenWebView(this.currentMessageObject, tLRPC$WebPage.embed_url, tLRPC$WebPage.site_name, tLRPC$WebPage.title, tLRPC$WebPage.url, tLRPC$WebPage.embed_width, tLRPC$WebPage.embed_height);
                                    }
                                } else if (tLRPC$WebPage != null) {
                                    ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                                    if (chatMessageCellDelegate4 != null) {
                                        chatMessageCellDelegate4.didPressWebPage(this, tLRPC$WebPage, tLRPC$WebPage.url, MessageObject.getMedia(this.currentMessageObject.messageOwner).safe);
                                    } else {
                                        Browser.openUrl(getContext(), tLRPC$WebPage.url);
                                    }
                                }
                            }
                            playSoundEffect(0);
                            if (Build.VERSION.SDK_INT >= 21) {
                                Drawable drawable3 = this.selectorDrawable[0];
                                if (drawable3 != null) {
                                    drawable3.setState(StateSet.NOTHING);
                                }
                                Drawable drawable4 = this.linkPreviewSelector;
                                if (drawable4 != null) {
                                    drawable4.setState(StateSet.NOTHING);
                                }
                            }
                            ButtonBounce buttonBounce2 = this.linkPreviewBounce;
                            if (buttonBounce2 != null) {
                                buttonBounce2.setPressed(false);
                            }
                            this.instantPressed = false;
                            setInstantButtonPressed(false);
                            invalidate();
                        } else if (this.pressedLinkType == 2 || this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.linkPreviewPressed) {
                            if (this.videoButtonPressed == 1) {
                                this.videoButtonPressed = 0;
                                playSoundEffect(0);
                                didPressButton(true, true);
                                invalidate();
                            } else if (this.buttonPressed != 0) {
                                this.buttonPressed = 0;
                                playSoundEffect(0);
                                if (this.drawVideoImageButton || this.currentMessageObject.sponsoredMedia != null) {
                                    didClickedImage();
                                } else {
                                    didPressButton(true, false);
                                }
                                invalidate();
                            } else if (this.miniButtonPressed != 0) {
                                this.miniButtonPressed = 0;
                                playSoundEffect(0);
                                didPressMiniButton(true);
                                invalidate();
                            } else {
                                LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                if (linkSpanDrawable3 != null) {
                                    if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                                        this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                    } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                                        ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                                    }
                                    resetPressedLink(2);
                                } else {
                                    AnimatedEmojiSpan animatedEmojiSpan = this.pressedEmoji;
                                    if (animatedEmojiSpan != null && this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                        this.pressedEmoji = null;
                                        resetPressedLink(2);
                                    } else {
                                        if (this.documentAttachType == 2 && this.drawImageButton) {
                                            int i11 = this.buttonState;
                                            if (i11 == -1) {
                                                if (SharedConfig.isAutoplayGifs() && !this.currentMessageObject.isRepostPreview) {
                                                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                } else {
                                                    this.buttonState = 2;
                                                    this.currentMessageObject.gifState = 1.0f;
                                                    this.photoImage.setAllowStartAnimation(false);
                                                    this.photoImage.stopAnimation();
                                                    this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                                                    invalidate();
                                                    playSoundEffect(0);
                                                }
                                            } else if (i11 == 2 || i11 == 0) {
                                                didPressButton(true, false);
                                                playSoundEffect(0);
                                            }
                                        } else {
                                            MessageObject messageObject3 = this.currentMessageObject;
                                            if (!messageObject3.preview) {
                                                TLRPC$WebPage tLRPC$WebPage2 = MessageObject.getMedia(messageObject3.messageOwner).webpage;
                                                if (tLRPC$WebPage2 != null && !TextUtils.isEmpty(tLRPC$WebPage2.embed_url)) {
                                                    this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage2.embed_url, tLRPC$WebPage2.site_name, tLRPC$WebPage2.title, tLRPC$WebPage2.url, tLRPC$WebPage2.embed_width, tLRPC$WebPage2.embed_height);
                                                } else {
                                                    int i12 = this.buttonState;
                                                    if (i12 == -1 || i12 == 3) {
                                                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                        playSoundEffect(0);
                                                    } else if (tLRPC$WebPage2 != null) {
                                                        ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                                                        if (chatMessageCellDelegate5 != null) {
                                                            chatMessageCellDelegate5.didPressWebPage(this, tLRPC$WebPage2, tLRPC$WebPage2.url, MessageObject.getMedia(this.currentMessageObject.messageOwner).safe);
                                                        } else {
                                                            Browser.openUrl(getContext(), tLRPC$WebPage2.url);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        resetPressedLink(2);
                                        return true;
                                    }
                                }
                            }
                        } else if (!this.hadLongPress) {
                            this.hadLongPress = false;
                            resetPressedLink(2);
                        }
                    } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                        Drawable drawable5 = this.selectorDrawable[0];
                        if (drawable5 != null) {
                            drawable5.setHotspot(x, y);
                        }
                        Drawable drawable6 = this.linkPreviewSelector;
                        if (drawable6 != null) {
                            drawable6.setHotspot(x, y);
                        }
                    }
                }
            }
            return false;
        }
        return false;
    }

    private boolean checkEffectMotionEvent(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.getEffect() == null) {
            return false;
        }
        int timeX = ((int) ((getTimeX() - AndroidUtilities.dp(this.effectId == 0 ? 0.0f : 18.0f)) + (this.timeWidth * (this.currentMessageObject.sendPreview ? 1.0f - this.timeAlpha : 0.0f)))) - AndroidUtilities.dp(2.0f);
        int timeY = ((int) getTimeY()) - AndroidUtilities.dp(2.0f);
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(timeX, timeY, timeX + AndroidUtilities.dp(16.0f) + this.timeWidth, timeY + AndroidUtilities.dp(16.0f));
        boolean contains = rectF.contains(motionEvent.getX(), motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            if (contains) {
                if (this.effectDrawableBounce == null) {
                    this.effectDrawableBounce = new ButtonBounce(this);
                }
                this.pressedEffect = true;
            }
        } else if (motionEvent.getAction() == 2) {
            this.pressedEffect = contains;
        } else if (motionEvent.getAction() == 1) {
            if (this.pressedEffect && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressEffect(this);
            }
            this.pressedEffect = false;
        } else if (motionEvent.getAction() == 3) {
            this.pressedEffect = false;
        }
        ButtonBounce buttonBounce = this.effectDrawableBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(this.pressedEffect);
        }
        return this.pressedEffect;
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x020a A[Catch: Exception -> 0x01e2, TryCatch #1 {Exception -> 0x01e2, blocks: (B:79:0x01a8, B:81:0x01c1, B:83:0x01cc, B:85:0x01de, B:91:0x01ee, B:93:0x01f1, B:95:0x01f8, B:98:0x01fe, B:100:0x0204, B:102:0x020a, B:104:0x020e, B:114:0x027c, B:106:0x0217, B:108:0x023b, B:112:0x026d, B:113:0x0270, B:115:0x0280, B:117:0x0284, B:119:0x028d, B:90:0x01e5, B:109:0x0249), top: B:168:0x01a8, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0280 A[Catch: Exception -> 0x01e2, TryCatch #1 {Exception -> 0x01e2, blocks: (B:79:0x01a8, B:81:0x01c1, B:83:0x01cc, B:85:0x01de, B:91:0x01ee, B:93:0x01f1, B:95:0x01f8, B:98:0x01fe, B:100:0x0204, B:102:0x020a, B:104:0x020e, B:114:0x027c, B:106:0x0217, B:108:0x023b, B:112:0x026d, B:113:0x0270, B:115:0x0280, B:117:0x0284, B:119:0x028d, B:90:0x01e5, B:109:0x0249), top: B:168:0x01a8, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkFactCheckMotionEvent(MotionEvent motionEvent) {
        int dp;
        int extraTextX;
        int i;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!this.hasFactCheck || this.factCheckTitle == null || this.factCheckWhat == null) {
            return false;
        }
        if (this.factCheckWhatBounce == null) {
            this.factCheckWhatBounce = new ButtonBounce(this);
        }
        if (this.factCheckBounce == null) {
            ButtonBounce buttonBounce = new ButtonBounce(this);
            this.factCheckBounce = buttonBounce;
            buttonBounce.setAdditionalInvalidate(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda12
                @Override // java.lang.Runnable
                public final void run() {
                    ChatMessageCell.this.invalidateOutbounds();
                }
            });
        }
        float backgroundDrawableRight = getBackgroundDrawableRight();
        TransitionParams transitionParams = this.transitionParams;
        float dp2 = ((backgroundDrawableRight + (transitionParams != null ? transitionParams.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.isDocuments) {
            i = (int) this.captionX;
        } else {
            if (this.currentMessageObject.isOutOwner()) {
                i = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                if (this.currentMessageObject.type == 19) {
                    i -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + i) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else {
                if (this.mediaBackground) {
                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                    extraTextX = getExtraTextX();
                } else {
                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                    extraTextX = getExtraTextX();
                }
                i = dp + extraTextX;
            }
        }
        int dp3 = ((int) (i + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
        int i2 = this.factCheckY;
        float f = dp3;
        int i3 = (int) (dp2 - f);
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        int dp4 = (int) (AndroidUtilities.dp(10.0f) + dp3 + this.factCheckTitle.getCurrentWidth() + AndroidUtilities.dp(4.0f));
        int dp5 = AndroidUtilities.dp(4.33f) + i2;
        RectF rectF = AndroidUtilities.rectTmp;
        float f2 = dp4;
        rectF.set(f2, dp5, this.factCheckWhat.getCurrentWidth() + f2 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(17.33f) + dp5);
        boolean contains = rectF.contains(motionEvent.getX(), motionEvent.getY());
        rectF.set(f, i2, dp3 + i3, this.factCheckHeight + i2);
        boolean z = !contains && !this.hadLongPress && this.pressedFactCheckLink == null && rectF.contains(motionEvent.getX(), motionEvent.getY());
        if (((z && !this.hadLongPress) || this.pressedFactCheckLink != null) && this.factCheckTextLayout != null) {
            if (this.factCheckLinks == null) {
                LinkSpanDrawable.LinkCollector linkCollector = new LinkSpanDrawable.LinkCollector(this);
                this.factCheckLinks = linkCollector;
                linkCollector.setAdditionalInvalidate(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda12
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.invalidateOutbounds();
                    }
                });
            }
            int dp6 = (dp3 + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft;
            int dp7 = i2 + AndroidUtilities.dp(22.0f);
            if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && this.pressedFactCheckLink != null)) {
                if (x >= dp6 && y >= dp7 && x <= i3 + dp6 && y <= this.factCheckTextLayout.getHeight() + dp7) {
                    try {
                        int i4 = y - dp7;
                        int lineForVertical = this.factCheckTextLayout.getLineForVertical(i4);
                        float f3 = x - dp6;
                        int offsetForHorizontal = this.factCheckTextLayout.getOffsetForHorizontal(lineForVertical, f3);
                        float lineLeft = this.factCheckTextLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f3 && lineLeft + this.factCheckTextLayout.getLineWidth(lineForVertical) >= f3) {
                            Spannable spannable = (Spannable) this.factCheckTextLayout.getText();
                            CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr != null) {
                                if (characterStyleArr.length == 0) {
                                }
                                if (characterStyleArr.length != 0 && ((!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                    if (motionEvent.getAction() != 0) {
                                        LinkSpanDrawable linkSpanDrawable = this.pressedFactCheckLink;
                                        if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                            this.factCheckLinks.removeLink(this.pressedFactCheckLink);
                                            CharacterStyle characterStyle = characterStyleArr[0];
                                            LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle, this.resourcesProvider, f3, i4, spanSupportsLongPress(characterStyle));
                                            this.pressedFactCheckLink = linkSpanDrawable2;
                                            ReplyMessageLine replyMessageLine = this.factCheckLine;
                                            if (replyMessageLine != null) {
                                                linkSpanDrawable2.setColor(Theme.multAlpha(replyMessageLine.getColor(), 0.1f));
                                            }
                                            try {
                                                LinkPath obtainNewPath = this.pressedFactCheckLink.obtainNewPath();
                                                int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedFactCheckLink.getSpan());
                                                obtainNewPath.setCurrentLayout(this.factCheckTextLayout, realSpanStartAndEnd[0], 0.0f);
                                                this.factCheckTextLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                            } catch (Exception e) {
                                                FileLog.e(e);
                                            }
                                            this.factCheckLinks.addLink(this.pressedFactCheckLink, 1);
                                            z = false;
                                        }
                                        invalidate();
                                    } else {
                                        LinkSpanDrawable linkSpanDrawable3 = this.pressedFactCheckLink;
                                        if (linkSpanDrawable3 != null && characterStyleArr[0] == linkSpanDrawable3.getSpan()) {
                                            this.delegate.didPressUrl(this, this.pressedFactCheckLink.getSpan(), false);
                                            resetPressedLink(1);
                                            this.factCheckWhatPressed = false;
                                            this.factCheckPressed = false;
                                            this.pressedFactCheckLink = null;
                                        }
                                    }
                                }
                            }
                            characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            if (characterStyleArr.length != 0) {
                                if (motionEvent.getAction() != 0) {
                                }
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                } else {
                    resetPressedLink(1);
                }
            }
        }
        boolean z2 = this.factCheckLarge && z;
        if (motionEvent.getAction() == 0) {
            this.factCheckWhatPressed = contains;
            this.factCheckPressed = z2;
        } else if (motionEvent.getAction() == 2) {
            this.factCheckWhatPressed = contains;
            this.factCheckPressed = z2;
        } else if (motionEvent.getAction() == 1) {
            if (this.factCheckWhatPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null) {
                    chatMessageCellDelegate2.didPressFactCheckWhat(this, (int) (dp4 + AndroidUtilities.dp(4.0f) + (this.factCheckWhat.getCurrentWidth() / 2.0f)), dp5);
                }
            } else if (this.factCheckPressed && !this.transitionParams.animateFactCheckExpanded && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressFactCheck(this);
            }
            this.factCheckWhatPressed = false;
            this.factCheckPressed = false;
        } else if (motionEvent.getAction() == 3) {
            this.factCheckWhatPressed = false;
            this.factCheckPressed = false;
            LinkSpanDrawable.LinkCollector linkCollector2 = this.factCheckLinks;
            if (linkCollector2 != null) {
                linkCollector2.clear();
            }
            this.pressedFactCheckLink = null;
        }
        this.factCheckWhatBounce.setPressed(this.factCheckWhatPressed);
        this.factCheckBounce.setPressed(this.factCheckPressed);
        return this.factCheckWhatPressed || this.factCheckPressed || this.pressedFactCheckLink != null;
    }

    private boolean checkPollButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        Drawable drawable3;
        Drawable drawable4;
        int i;
        int i2;
        Drawable drawable5;
        if (this.currentMessageObject.eventId != 0 || this.pollVoteInProgress || this.pollUnvoteInProgress || this.pollButtons.isEmpty()) {
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 17 && messageObject.isSent()) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                this.pressedVoteButton = -1;
                this.pollHintPressed = false;
                if (this.hintButtonVisible && (i = this.pollHintX) != -1 && x >= i && x <= i + AndroidUtilities.dp(40.0f) && y >= (i2 = this.pollHintY) && y <= i2 + AndroidUtilities.dp(40.0f)) {
                    this.pollHintPressed = true;
                    this.selectorDrawableMaskType[0] = 3;
                    if (Build.VERSION.SDK_INT >= 21 && (drawable5 = this.selectorDrawable[0]) != null) {
                        drawable5.setBounds(this.pollHintX - AndroidUtilities.dp(8.0f), this.pollHintY - AndroidUtilities.dp(8.0f), this.pollHintX + AndroidUtilities.dp(32.0f), this.pollHintY + AndroidUtilities.dp(32.0f));
                        this.selectorDrawable[0].setHotspot(x, y);
                        this.selectorDrawable[0].setState(this.pressedState);
                    }
                    invalidate();
                } else {
                    for (int i3 = 0; i3 < this.pollButtons.size(); i3++) {
                        PollButton pollButton = this.pollButtons.get(i3);
                        int dp = (pollButton.y + this.namesOffset) - AndroidUtilities.dp(13.0f);
                        int i4 = pollButton.x;
                        if (x >= i4 && x <= (i4 + this.backgroundWidth) - AndroidUtilities.dp(31.0f) && y >= dp && y <= pollButton.height + dp + AndroidUtilities.dp(26.0f)) {
                            this.pressedVoteButton = i3;
                            if (!this.pollVoted && !this.pollClosed) {
                                this.selectorDrawableMaskType[0] = 1;
                                if (Build.VERSION.SDK_INT >= 21 && (drawable4 = this.selectorDrawable[0]) != null) {
                                    drawable4.setBounds(pollButton.x - AndroidUtilities.dp(9.0f), dp, (pollButton.x + this.backgroundWidth) - AndroidUtilities.dp(22.0f), pollButton.height + dp + AndroidUtilities.dp(26.0f));
                                    this.selectorDrawable[0].setHotspot(x, y);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                                invalidate();
                            }
                        }
                    }
                    return false;
                }
                return true;
            } else if (motionEvent.getAction() == 1) {
                if (this.pollHintPressed) {
                    playSoundEffect(0);
                    this.delegate.didPressHint(this, 0);
                    this.pollHintPressed = false;
                    if (Build.VERSION.SDK_INT < 21 || (drawable3 = this.selectorDrawable[0]) == null) {
                        return false;
                    }
                    drawable3.setState(StateSet.NOTHING);
                    return false;
                } else if (this.pressedVoteButton != -1) {
                    playSoundEffect(0);
                    if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                        drawable2.setState(StateSet.NOTHING);
                    }
                    if (this.currentMessageObject.scheduled) {
                        Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVote", R.string.MessageScheduledVote), 1).show();
                    } else {
                        PollButton pollButton2 = this.pollButtons.get(this.pressedVoteButton);
                        TLRPC$PollAnswer tLRPC$PollAnswer = pollButton2.answer;
                        if (this.pollVoted || this.pollClosed) {
                            ArrayList<TLRPC$PollAnswer> arrayList = new ArrayList<>();
                            arrayList.add(tLRPC$PollAnswer);
                            this.delegate.didPressVoteButtons(this, arrayList, pollButton2.count, pollButton2.x + AndroidUtilities.dp(50.0f), this.namesOffset + pollButton2.y);
                        } else if (this.lastPoll.multiple_choice) {
                            if (this.currentMessageObject.checkedVotes.contains(tLRPC$PollAnswer)) {
                                this.currentMessageObject.checkedVotes.remove(tLRPC$PollAnswer);
                                this.pollCheckBox[this.pressedVoteButton].setChecked(false, true);
                            } else {
                                this.currentMessageObject.checkedVotes.add(tLRPC$PollAnswer);
                                this.pollCheckBox[this.pressedVoteButton].setChecked(true, true);
                            }
                        } else {
                            this.pollVoteInProgressNum = this.pressedVoteButton;
                            this.pollVoteInProgress = true;
                            this.vibrateOnPollVote = true;
                            this.voteCurrentProgressTime = 0.0f;
                            this.firstCircleLength = true;
                            this.voteCurrentCircleLength = 360.0f;
                            this.voteRisingCircleLength = false;
                            ArrayList<TLRPC$PollAnswer> arrayList2 = new ArrayList<>();
                            arrayList2.add(tLRPC$PollAnswer);
                            this.delegate.didPressVoteButtons(this, arrayList2, -1, 0, 0);
                        }
                    }
                    this.pressedVoteButton = -1;
                    invalidate();
                    return false;
                } else {
                    return false;
                }
            } else if (motionEvent.getAction() == 2) {
                if ((this.pressedVoteButton != -1 || this.pollHintPressed) && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                    drawable.setHotspot(x, y);
                    return false;
                }
                return false;
            } else {
                return false;
            }
        }
        return false;
    }

    private boolean checkInstantButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        if (this.currentMessageObject.isSponsored() || this.currentMessageObject.isUnsupported() || (this.drawInstantView && this.currentMessageObject.type != 0)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                if (this.drawInstantView) {
                    float f = x;
                    float f2 = y;
                    if (this.instantButtonRect.contains(f, f2)) {
                        this.selectorDrawableMaskType[0] = this.lastPoll == null ? 0 : 2;
                        this.instantPressed = true;
                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.instantButtonRect.contains(f, f2)) {
                            this.selectorDrawable[0].setHotspot(f, f2);
                            this.selectorDrawable[0].setState(this.pressedState);
                            setInstantButtonPressed(true);
                        }
                        invalidate();
                        return true;
                    }
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.instantPressed) {
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null) {
                        if (this.lastPoll != null) {
                            MessageObject messageObject = this.currentMessageObject;
                            if (messageObject.scheduled) {
                                Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVoteResults", R.string.MessageScheduledVoteResults), 1).show();
                            } else if (this.pollVoted || this.pollClosed) {
                                chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                            } else {
                                if (!messageObject.checkedVotes.isEmpty()) {
                                    this.pollVoteInProgressNum = -1;
                                    this.pollVoteInProgress = true;
                                    this.vibrateOnPollVote = true;
                                    this.voteCurrentProgressTime = 0.0f;
                                    this.firstCircleLength = true;
                                    this.voteCurrentCircleLength = 360.0f;
                                    this.voteRisingCircleLength = false;
                                }
                                this.delegate.didPressVoteButtons(this, this.currentMessageObject.checkedVotes, -1, 0, this.namesOffset);
                            }
                        } else {
                            chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                        }
                    }
                    playSoundEffect(0);
                    if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                        drawable2.setState(StateSet.NOTHING);
                    }
                    this.instantPressed = false;
                    setInstantButtonPressed(false);
                    invalidate();
                }
            } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                drawable.setHotspot(x, y);
            }
            return false;
        }
        return false;
    }

    private boolean checkContactMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        Drawable drawable3;
        if (this.currentMessageObject.type != 12) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ArrayList<InstantViewButton> arrayList = this.contactButtons;
            if (arrayList != null && arrayList.size() > 1) {
                for (int i = 0; i < this.contactButtons.size(); i++) {
                    InstantViewButton instantViewButton = this.contactButtons.get(i);
                    float f = x;
                    float f2 = y;
                    if (instantViewButton.rect.contains(f, f2)) {
                        if (instantViewButton.buttonBounce == null) {
                            instantViewButton.buttonBounce = new ButtonBounce(this);
                        }
                        instantViewButton.buttonBounce.setPressed(true);
                        if (Build.VERSION.SDK_INT >= 21 && instantViewButton.selectorDrawable != null) {
                            instantViewButton.selectorDrawable.setHotspot(f, f2);
                            instantViewButton.selectorDrawable.setState(this.pressedState);
                        }
                        invalidate();
                        return true;
                    }
                }
            }
            float f3 = x;
            float f4 = y;
            if (this.contactRect.contains(f3, f4)) {
                this.contactPressed = true;
                this.contactBounce.setPressed(true);
                if (Build.VERSION.SDK_INT >= 21 && (drawable3 = this.selectorDrawable[0]) != null) {
                    drawable3.setHotspot(f3, f4);
                    this.selectorDrawable[0].setState(this.pressedState);
                }
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.contactPressed) {
                if (this.delegate != null) {
                    ArrayList<InstantViewButton> arrayList2 = this.contactButtons;
                    if (arrayList2 != null && arrayList2.size() == 1) {
                        this.delegate.didPressInstantButton(this, this.contactButtons.get(0).type);
                    } else {
                        this.delegate.didPressInstantButton(this, 5);
                    }
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                    drawable2.setState(StateSet.NOTHING);
                }
                this.contactPressed = false;
                this.contactBounce.setPressed(false);
                invalidate();
            } else {
                ArrayList<InstantViewButton> arrayList3 = this.contactButtons;
                if (arrayList3 != null && arrayList3.size() > 1) {
                    for (int i2 = 0; i2 < this.contactButtons.size(); i2++) {
                        InstantViewButton instantViewButton2 = this.contactButtons.get(i2);
                        if (instantViewButton2.buttonBounce != null && instantViewButton2.buttonBounce.isPressed()) {
                            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate != null) {
                                chatMessageCellDelegate.didPressInstantButton(this, instantViewButton2.type);
                            }
                            if (Build.VERSION.SDK_INT >= 21 && instantViewButton2.selectorDrawable != null) {
                                instantViewButton2.selectorDrawable.setState(StateSet.NOTHING);
                            }
                            instantViewButton2.buttonBounce.setPressed(false);
                            playSoundEffect(0);
                            invalidate();
                        }
                    }
                }
            }
        } else if (motionEvent.getAction() == 2) {
            if (this.contactPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                drawable.setHotspot(x, y);
            } else {
                ArrayList<InstantViewButton> arrayList4 = this.contactButtons;
                if (arrayList4 != null && arrayList4.size() > 1) {
                    int i3 = 0;
                    while (true) {
                        if (i3 >= this.contactButtons.size()) {
                            break;
                        }
                        InstantViewButton instantViewButton3 = this.contactButtons.get(i3);
                        if (instantViewButton3.buttonBounce == null || !instantViewButton3.buttonBounce.isPressed()) {
                            i3++;
                        } else if (Build.VERSION.SDK_INT >= 21 && instantViewButton3.selectorDrawable != null) {
                            instantViewButton3.selectorDrawable.setHotspot(x, y);
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean checkTitleLabelMotion(MotionEvent motionEvent) {
        if (this.currentMessageObject.isSponsored() && this.currentMessageObject.sponsoredCanReport) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                float f = x;
                if (f >= this.titleLabelX - AndroidUtilities.dp(6.0f) && f <= this.titleLabelX + this.titleLabelLayoutWidth + AndroidUtilities.dp(6.0f)) {
                    float f2 = y;
                    if (f2 >= this.titleLabelY - AndroidUtilities.dp(2.0f) && f2 <= this.titleLabelY + this.titleLabelLayoutHeight + AndroidUtilities.dp(2.0f)) {
                        ButtonBounce buttonBounce = this.titleLabelBounce;
                        if (buttonBounce != null) {
                            buttonBounce.setPressed(true);
                        }
                        this.isTitleLabelPressed = true;
                        return true;
                    }
                }
            } else if (motionEvent.getAction() == 1 && this.isTitleLabelPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    chatMessageCellDelegate.didPressAboutRevenueSharingAds();
                }
                ButtonBounce buttonBounce2 = this.titleLabelBounce;
                if (buttonBounce2 != null) {
                    buttonBounce2.setPressed(false);
                }
                playSoundEffect(0);
                this.isTitleLabelPressed = false;
            }
        }
        return false;
    }

    private void invalidateWithParent() {
        if (this.currentMessagesGroup != null && getParent() != null) {
            ((ViewGroup) getParent()).invalidate();
        }
        invalidate();
    }

    private boolean checkCommentButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        Drawable drawable3;
        int i = 0;
        if (this.drawCommentButton) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) == 0 && this.commentButtonRect.contains(x, y)) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                int childCount = viewGroup.getChildCount();
                while (true) {
                    if (i >= childCount) {
                        break;
                    }
                    View childAt = viewGroup.getChildAt(i);
                    if (childAt != this && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.drawCommentButton && chatMessageCell.currentMessagesGroup == this.currentMessagesGroup && (chatMessageCell.currentPosition.flags & 1) != 0) {
                            MotionEvent obtain = MotionEvent.obtain(0L, 0L, motionEvent.getActionMasked(), (motionEvent.getX() + getLeft()) - chatMessageCell.getLeft(), (motionEvent.getY() + getTop()) - chatMessageCell.getTop(), 0);
                            chatMessageCell.checkCommentButtonMotionEvent(obtain);
                            obtain.recycle();
                            break;
                        }
                    }
                    i++;
                }
                return true;
            }
            if (motionEvent.getAction() == 0) {
                if (this.commentButtonRect.contains(x, y)) {
                    if (this.currentMessageObject.isSent()) {
                        this.selectorDrawableMaskType[1] = 2;
                        this.commentButtonPressed = true;
                        if (Build.VERSION.SDK_INT >= 21 && (drawable3 = this.selectorDrawable[1]) != null) {
                            drawable3.setHotspot(x, y);
                            this.selectorDrawable[1].setState(this.pressedState);
                        }
                        invalidateWithParent();
                    }
                    return true;
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.commentButtonPressed) {
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null) {
                        if (this.isRepliesChat) {
                            chatMessageCellDelegate.didPressSideButton(this);
                        } else {
                            chatMessageCellDelegate.didPressCommentButton(this);
                        }
                    }
                    playSoundEffect(0);
                    if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[1]) != null) {
                        drawable2.setState(StateSet.NOTHING);
                    }
                    this.commentButtonPressed = false;
                    invalidateWithParent();
                }
            } else if (motionEvent.getAction() == 2 && this.commentButtonPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[1]) != null) {
                drawable.setHotspot(x, y);
            }
            return false;
        }
        return false;
    }

    private boolean checkSponsoredCloseMotionEvent(MotionEvent motionEvent) {
        ButtonBounce buttonBounce;
        ChatMessageCellDelegate chatMessageCellDelegate;
        RectF rectF;
        if (motionEvent.getAction() == 0 && (rectF = this.closeSponsoredBounds) != null && this.closeSponsoredBounce != null && rectF.contains(motionEvent.getX(), motionEvent.getY())) {
            this.closeSponsoredBounce.setPressed(true);
            return true;
        }
        if (motionEvent.getAction() == 1) {
            ButtonBounce buttonBounce2 = this.closeSponsoredBounce;
            if (buttonBounce2 != null && buttonBounce2.isPressed() && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressSponsoredClose(this);
            }
            ButtonBounce buttonBounce3 = this.closeSponsoredBounce;
            if (buttonBounce3 != null) {
                buttonBounce3.setPressed(false);
            }
        } else if (motionEvent.getAction() == 3 && (buttonBounce = this.closeSponsoredBounce) != null) {
            buttonBounce.setPressed(false);
        }
        ButtonBounce buttonBounce4 = this.closeSponsoredBounce;
        return buttonBounce4 != null && buttonBounce4.isPressed();
    }

    private boolean checkOtherButtonMotionEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Drawable drawable;
        Drawable drawable2;
        int i = this.documentAttachType;
        if ((i == 5 || i == 1) && (groupedMessagePosition = this.currentPosition) != null && (groupedMessagePosition.flags & 4) == 0) {
            return false;
        }
        int i2 = this.currentMessageObject.type;
        boolean z = i2 == 16;
        if (!z) {
            z = ((i != 1 && i2 != 12 && i != 5 && i != 4 && i != 2 && i2 != 8) || this.hasGamePreview || this.hasInvoicePreview) ? false : true;
        }
        if (z) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject.type == 16) {
                    boolean isVideoCall = messageObject.isVideoCall();
                    int i3 = this.otherX;
                    if (x >= i3) {
                        boolean z2 = LocaleController.isRTL;
                        int i4 = NotificationCenter.storyQualityUpdate;
                        if (x <= i3 + AndroidUtilities.dp((z2 ? 0 : NotificationCenter.storyQualityUpdate) + 30 + (!isVideoCall ? 2 : 0)) && y >= this.otherY - AndroidUtilities.dp(14.0f) && y <= this.otherY + AndroidUtilities.dp(50.0f)) {
                            this.otherPressed = true;
                            this.selectorDrawableMaskType[0] = 4;
                            if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                                int i5 = this.otherX;
                                if (LocaleController.isRTL) {
                                    i4 = 0;
                                }
                                int dp = i5 + AndroidUtilities.dp(i4 + (!isVideoCall ? 2 : 0)) + (Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0].getIntrinsicWidth() / 2);
                                int intrinsicHeight = this.otherY + (Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0].getIntrinsicHeight() / 2);
                                this.selectorDrawable[0].setBounds(dp - AndroidUtilities.dp(20.0f), intrinsicHeight - AndroidUtilities.dp(20.0f), dp + AndroidUtilities.dp(20.0f), intrinsicHeight + AndroidUtilities.dp(20.0f));
                                this.selectorDrawable[0].setHotspot(x, y);
                                this.selectorDrawable[0].setState(this.pressedState);
                            }
                            invalidate();
                            return true;
                        }
                    }
                } else if (x >= this.otherX - AndroidUtilities.dp(20.0f) && x <= this.otherX + AndroidUtilities.dp(20.0f) && y >= this.otherY - AndroidUtilities.dp(4.0f) && y <= this.otherY + AndroidUtilities.dp(30.0f)) {
                    this.otherPressed = true;
                    invalidate();
                    return true;
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.otherPressed) {
                    if (this.currentMessageObject.type == 16 && Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                        drawable2.setState(StateSet.NOTHING);
                    }
                    this.otherPressed = false;
                    playSoundEffect(0);
                    this.delegate.didPressOther(this, this.otherX, this.otherY);
                    invalidate();
                    return true;
                }
            } else if (motionEvent.getAction() == 2 && this.currentMessageObject.type == 16 && this.otherPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                drawable.setHotspot(x, y);
            }
            return false;
        }
        return false;
    }

    private void setInstantButtonPressed(boolean z) {
        if (this.instantButtonBounce == null) {
            this.instantButtonBounce = new ButtonBounce(this);
        }
        ButtonBounce buttonBounce = this.instantButtonBounce;
        this.instantButtonPressed = z;
        buttonBounce.setPressed(z);
    }

    private void resetContactButtonsPressedState() {
        Drawable drawable;
        this.contactPressed = false;
        ButtonBounce buttonBounce = this.contactBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(false);
        }
        if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
            drawable.setState(StateSet.NOTHING);
        }
        if (this.contactButtons != null) {
            for (int i = 0; i < this.contactButtons.size(); i++) {
                InstantViewButton instantViewButton = this.contactButtons.get(i);
                if (instantViewButton.buttonBounce != null) {
                    instantViewButton.buttonBounce.setPressed(false);
                }
                if (instantViewButton.selectorDrawable != null) {
                    instantViewButton.selectorDrawable.setState(StateSet.NOTHING);
                }
            }
        }
    }

    private boolean checkDateMotionEvent(MotionEvent motionEvent) {
        if (this.currentMessageObject.isImportedForward()) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                float f = x;
                float f2 = this.drawTimeX;
                if (f < f2 || f > f2 + this.timeWidth) {
                    return false;
                }
                float f3 = y;
                float f4 = this.drawTimeY;
                if (f3 < f4 || f3 > f4 + AndroidUtilities.dp(20.0f)) {
                    return false;
                }
                this.timePressed = true;
                invalidate();
            } else if (motionEvent.getAction() != 1 || !this.timePressed) {
                return false;
            } else {
                this.timePressed = false;
                playSoundEffect(0);
                this.delegate.didPressTime(this);
                invalidate();
            }
            return true;
        }
        return false;
    }

    private boolean checkRoundSeekbar(MotionEvent motionEvent) {
        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isMessagePaused()) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                float f = x;
                if (f >= this.seekbarRoundX - AndroidUtilities.dp(20.0f) && f <= this.seekbarRoundX + AndroidUtilities.dp(20.0f)) {
                    float f2 = y;
                    if (f2 >= this.seekbarRoundY - AndroidUtilities.dp(20.0f) && f2 <= this.seekbarRoundY + AndroidUtilities.dp(20.0f)) {
                        getParent().requestDisallowInterceptTouchEvent(true);
                        cancelCheckLongPress();
                        this.roundSeekbarTouched = 1;
                        invalidate();
                    }
                }
                float centerX = f - this.photoImage.getCenterX();
                float centerY = y - this.photoImage.getCenterY();
                float imageWidth = (this.photoImage.getImageWidth() - AndroidUtilities.dp(64.0f)) / 2.0f;
                float f3 = (centerX * centerX) + (centerY * centerY);
                if (f3 < ((this.photoImage.getImageWidth() / 2.0f) * this.photoImage.getImageWidth()) / 2.0f && f3 > imageWidth * imageWidth) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    cancelCheckLongPress();
                    this.roundSeekbarTouched = 1;
                    invalidate();
                }
            } else if (this.roundSeekbarTouched == 1 && motionEvent.getAction() == 2) {
                float degrees = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
                if (degrees < 0.0f) {
                    degrees += 360.0f;
                }
                float f4 = degrees / 360.0f;
                if (Math.abs(this.currentMessageObject.audioProgress - f4) > 0.9f) {
                    if (this.roundSeekbarOutAlpha == 0.0f) {
                        performHapticFeedback(3);
                    }
                    this.roundSeekbarOutAlpha = 1.0f;
                    this.roundSeekbarOutProgress = this.currentMessageObject.audioProgress;
                }
                long currentTimeMillis = System.currentTimeMillis();
                if (currentTimeMillis - this.lastSeekUpdateTime > 100) {
                    MediaController.getInstance().seekToProgress(this.currentMessageObject, f4);
                    this.lastSeekUpdateTime = currentTimeMillis;
                }
                this.currentMessageObject.audioProgress = f4;
                updatePlayingMessageProgress();
            }
            if ((motionEvent.getAction() == 1 || motionEvent.getAction() == 3) && this.roundSeekbarTouched != 0) {
                if (motionEvent.getAction() == 1) {
                    float degrees2 = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
                    if (degrees2 < 0.0f) {
                        degrees2 += 360.0f;
                    }
                    float f5 = degrees2 / 360.0f;
                    this.currentMessageObject.audioProgress = f5;
                    MediaController.getInstance().seekToProgress(this.currentMessageObject, f5);
                    updatePlayingMessageProgress();
                }
                MediaController.getInstance().playMessage(this.currentMessageObject);
                this.roundSeekbarTouched = 0;
                getParent().requestDisallowInterceptTouchEvent(false);
            }
            return this.roundSeekbarTouched != 0;
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:104:0x01b1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkPhotoImageMotionEvent(MotionEvent motionEvent) {
        MessageObject messageObject;
        int i;
        int i2;
        int i3;
        int i4;
        int dp;
        int dp2;
        int i5;
        boolean z = true;
        if ((this.drawPhotoImage || this.documentAttachType == 1) && (!this.currentMessageObject.isSending() || this.buttonState == 1)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                int dp3 = AndroidUtilities.dp(48.0f);
                boolean z2 = this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp3 && y >= (i5 = this.buttonY + dp) && y <= i5 + dp3;
                MessageObject messageObject2 = this.currentMessageObject;
                boolean z3 = messageObject2 == null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed || this.buttonState == 1;
                if (z2) {
                    this.miniButtonPressed = 1;
                    invalidate();
                } else if (this.buttonState != -1 && this.radialProgress.getIcon() != 4 && x >= (i3 = this.buttonX) && x <= i3 + dp3 && y >= (i4 = this.buttonY) && y <= i4 + dp3 && z3) {
                    this.buttonPressed = 1;
                    invalidate();
                } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i = this.videoButtonX) && x <= i + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i2 = this.videoButtonY) && y <= i2 + AndroidUtilities.dp(30.0f) && z3) {
                    this.videoButtonPressed = 1;
                    invalidate();
                } else if (this.documentAttachType == 1) {
                    float f = x;
                    if (f >= this.photoImage.getImageX() && f <= (this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(50.0f)) {
                        float f2 = y;
                        if (f2 >= this.photoImage.getImageY() && f2 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                            this.imagePressed = true;
                        }
                    }
                    z = false;
                } else {
                    if (!this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.getInputStickerSet() != null || this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isDice()) {
                        float f3 = x;
                        if (f3 >= this.photoImage.getImageX() && f3 <= this.photoImage.getImageX() + this.photoImage.getImageWidth()) {
                            float f4 = y;
                            if (f4 >= this.photoImage.getImageY() && f4 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                                if (this.isRoundVideo) {
                                    if (((f3 - this.photoImage.getCenterX()) * (f3 - this.photoImage.getCenterX())) + ((f4 - this.photoImage.getCenterY()) * (f4 - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f)) {
                                        this.imagePressed = true;
                                    }
                                } else {
                                    this.imagePressed = true;
                                }
                                messageObject = this.currentMessageObject;
                                if (messageObject.type == 12) {
                                    long j = MessageObject.getMedia(messageObject.messageOwner).user_id;
                                    if ((j != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j)) : null) == null) {
                                        this.imagePressed = false;
                                    }
                                }
                            }
                        }
                        z = false;
                        messageObject = this.currentMessageObject;
                        if (messageObject.type == 12) {
                        }
                    }
                    z = false;
                }
                if (this.imagePressed) {
                    if (this.currentMessageObject.isSendError()) {
                        this.imagePressed = false;
                        return false;
                    } else if (this.currentMessageObject.type == 8 && this.buttonState == -1 && SharedConfig.isAutoplayGifs() && !this.currentMessageObject.isRepostPreview && this.photoImage.getAnimation() == null) {
                        this.imagePressed = false;
                        return false;
                    }
                }
                return z;
            } else if (motionEvent.getAction() == 1) {
                if (this.videoButtonPressed == 1) {
                    this.videoButtonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, true);
                    invalidate();
                    return false;
                } else if (this.buttonPressed == 1) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    if (this.drawVideoImageButton) {
                        didClickedImage();
                    } else {
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                } else if (this.miniButtonPressed == 1) {
                    this.miniButtonPressed = 0;
                    playSoundEffect(0);
                    didPressMiniButton(true);
                    invalidate();
                    return false;
                } else if (this.imagePressed) {
                    this.imagePressed = false;
                    int i6 = this.buttonState;
                    if (i6 == -1 || ((i6 == 1 && this.isRoundVideo) || i6 == 2 || i6 == 3 || this.drawVideoImageButton)) {
                        playSoundEffect(0);
                        didClickedImage();
                    } else if (i6 == 0) {
                        playSoundEffect(0);
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:79:0x010c, code lost:
        if (r4 <= (r0 + r6)) goto L68;
     */
    /* JADX WARN: Code restructure failed: missing block: B:94:0x0146, code lost:
        if (r4 <= (r0 + r6)) goto L68;
     */
    /* JADX WARN: Code restructure failed: missing block: B:95:0x0148, code lost:
        r0 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:105:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0151  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkAudioMotionEvent(MotionEvent motionEvent) {
        boolean onTouch;
        MessageObject messageObject;
        boolean z;
        MessageObject messageObject2;
        int i;
        int dp;
        int dp2;
        int i2;
        MessageObject messageObject3;
        int i3 = this.documentAttachType;
        if ((i3 != 3 && i3 != 5 && (i3 != 7 || (i3 == 7 && (messageObject3 = this.currentMessageObject) != null && !messageObject3.isVoiceTranscriptionOpen()))) || AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (this.useSeekBarWaveform) {
            onTouch = this.seekBarWaveform.onTouch(motionEvent.getAction(), (motionEvent.getX() - this.seekBarX) - AndroidUtilities.dp(13.0f), motionEvent.getY() - this.seekBarY);
        } else {
            onTouch = (MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || ((messageObject = this.currentMessageObject) != null && this.documentAttachType == 7 && messageObject.isVoiceTranscriptionOpen())) ? this.seekBar.onTouch(motionEvent.getAction(), motionEvent.getX() - this.seekBarX, motionEvent.getY() - this.seekBarY) : false;
        }
        if (onTouch) {
            if (!this.useSeekBarWaveform && motionEvent.getAction() == 0) {
                getParent().requestDisallowInterceptTouchEvent(true);
            } else if (this.useSeekBarWaveform && !this.seekBarWaveform.isStartDraging() && motionEvent.getAction() == 1) {
                didPressButton(true, false);
            }
            this.disallowLongPress = true;
            invalidate();
            return onTouch;
        }
        int dp3 = AndroidUtilities.dp(36.0f);
        boolean z2 = this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp3 && y >= (i2 = this.buttonY + dp) && y <= i2 + dp3;
        if (!z2 && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isVoice() || this.currentMessageObject.isMediaSpoilersRevealed)) {
            int i4 = this.buttonState;
            if (i4 == 0 || i4 == 1 || i4 == 2) {
                if (x >= this.buttonX - AndroidUtilities.dp(12.0f) && x <= (this.buttonX - AndroidUtilities.dp(12.0f)) + this.backgroundWidth) {
                    boolean z3 = this.drawInstantView;
                    if (y >= (z3 ? this.buttonY : this.namesOffset + this.mediaOffsetY)) {
                        if (z3) {
                            i = this.buttonY;
                        } else {
                            i = this.namesOffset + this.mediaOffsetY;
                            dp3 = AndroidUtilities.dp(82.0f);
                        }
                    }
                }
            } else {
                int i5 = this.buttonX;
                if (x >= i5) {
                    if (x <= i5 + dp3) {
                        int i6 = this.buttonY;
                        if (y >= i6) {
                        }
                    }
                }
            }
            if (motionEvent.getAction() != 0) {
                if (z || z2) {
                    if (z) {
                        this.buttonPressed = 1;
                    } else {
                        this.miniButtonPressed = 1;
                    }
                    invalidate();
                    return true;
                }
                return onTouch;
            } else if (this.buttonPressed != 0) {
                if (motionEvent.getAction() == 1) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, false);
                    invalidate();
                    return onTouch;
                } else if (motionEvent.getAction() == 3) {
                    this.buttonPressed = 0;
                    invalidate();
                    return onTouch;
                } else if (motionEvent.getAction() != 2 || z) {
                    return onTouch;
                } else {
                    this.buttonPressed = 0;
                    invalidate();
                    return onTouch;
                }
            } else if (this.miniButtonPressed != 0) {
                if (motionEvent.getAction() == 1) {
                    this.miniButtonPressed = 0;
                    playSoundEffect(0);
                    didPressMiniButton(true);
                    invalidate();
                    return onTouch;
                } else if (motionEvent.getAction() == 3) {
                    this.miniButtonPressed = 0;
                    invalidate();
                    return onTouch;
                } else if (motionEvent.getAction() != 2 || z2) {
                    return onTouch;
                } else {
                    this.miniButtonPressed = 0;
                    invalidate();
                    return onTouch;
                }
            } else {
                return onTouch;
            }
        }
        z = false;
        if (motionEvent.getAction() != 0) {
        }
    }

    public boolean checkSpoilersMotionEvent(MotionEvent motionEvent, int i) {
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        if (i <= 15 && getParent() != null) {
            if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                for (int i3 = 0; i3 < viewGroup.getChildCount(); i3++) {
                    View childAt = viewGroup.getChildAt(i3);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                        if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                            int i4 = currentPosition.flags;
                            if ((i4 & 8) != 0 && (i4 & 1) != 0 && chatMessageCell != this) {
                                motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                                boolean checkSpoilersMotionEvent = chatMessageCell.checkSpoilersMotionEvent(motionEvent, i + 1);
                                motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                                return checkSpoilersMotionEvent;
                            }
                        }
                    }
                }
            }
            if (this.isSpoilerRevealing) {
                return false;
            }
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int actionMasked = motionEvent.getActionMasked();
            if (actionMasked == 0) {
                int i5 = this.textX;
                if (x >= i5 && y >= (i2 = this.textY)) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (x <= i5 + messageObject.textWidth && y <= i2 + messageObject.textHeight(this.transitionParams)) {
                        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
                        for (int i6 = 0; i6 < arrayList.size() && arrayList.get(i6).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= y; i6++) {
                            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i6);
                            int i7 = textLayoutBlock.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            for (SpoilerEffect spoilerEffect : textLayoutBlock.spoilers) {
                                if (spoilerEffect.getBounds().contains((x - this.textX) + i7, (int) ((y - this.textY) - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams)))) {
                                    this.spoilerPressed = spoilerEffect;
                                    return true;
                                }
                            }
                        }
                    }
                }
                if (this.captionLayout != null) {
                    float f = x;
                    float f2 = this.captionX;
                    if (f >= f2) {
                        float f3 = y;
                        float f4 = this.captionY;
                        if (f3 >= f4 && f <= f2 + textLayoutBlocks.textWidth && f3 <= f4 + textLayoutBlocks.textHeight(this.transitionParams)) {
                            ArrayList<MessageObject.TextLayoutBlock> arrayList2 = this.captionLayout.textLayoutBlocks;
                            for (int i8 = 0; i8 < arrayList2.size() && arrayList2.get(i8).textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) <= f3; i8++) {
                                MessageObject.TextLayoutBlock textLayoutBlock2 = arrayList2.get(i8);
                                int i9 = textLayoutBlock2.isRtl() ? (int) this.captionLayout.textXOffset : 0;
                                for (SpoilerEffect spoilerEffect2 : textLayoutBlock2.spoilers) {
                                    if (spoilerEffect2.getBounds().contains((int) ((f - this.captionX) + i9), (int) ((f3 - this.captionY) - textLayoutBlock2.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)))) {
                                        this.spoilerPressed = spoilerEffect2;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (actionMasked == 1 && this.spoilerPressed != null) {
                playSoundEffect(0);
                this.sPath.rewind();
                MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                if (textLayoutBlocks2 != null) {
                    Iterator<MessageObject.TextLayoutBlock> it = textLayoutBlocks2.textLayoutBlocks.iterator();
                    while (it.hasNext()) {
                        MessageObject.TextLayoutBlock next = it.next();
                        for (SpoilerEffect spoilerEffect3 : next.spoilers) {
                            Rect bounds = spoilerEffect3.getBounds();
                            this.sPath.addRect(bounds.left, bounds.top + next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams), bounds.right, next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) + bounds.bottom, Path.Direction.CW);
                        }
                    }
                } else {
                    Iterator<MessageObject.TextLayoutBlock> it2 = this.currentMessageObject.textLayoutBlocks.iterator();
                    while (it2.hasNext()) {
                        MessageObject.TextLayoutBlock next2 = it2.next();
                        for (SpoilerEffect spoilerEffect4 : next2.spoilers) {
                            Rect bounds2 = spoilerEffect4.getBounds();
                            this.sPath.addRect(bounds2.left, bounds2.top + next2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams), bounds2.right, next2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) + bounds2.bottom, Path.Direction.CW);
                        }
                    }
                }
                this.sPath.computeBounds(this.rect, false);
                float sqrt = (float) Math.sqrt(Math.pow(this.rect.width(), 2.0d) + Math.pow(this.rect.height(), 2.0d));
                this.isSpoilerRevealing = true;
                this.spoilerPressed.setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda9
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$1();
                    }
                });
                MessageObject.TextLayoutBlocks textLayoutBlocks3 = this.captionLayout;
                if (textLayoutBlocks3 != null) {
                    Iterator<MessageObject.TextLayoutBlock> it3 = textLayoutBlocks3.textLayoutBlocks.iterator();
                    while (it3.hasNext()) {
                        MessageObject.TextLayoutBlock next3 = it3.next();
                        int i10 = next3.isRtl() ? (int) this.captionLayout.textXOffset : 0;
                        for (SpoilerEffect spoilerEffect5 : next3.spoilers) {
                            spoilerEffect5.startRipple((x - this.captionX) + i10, (y - next3.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionY, sqrt);
                        }
                    }
                } else {
                    ArrayList<MessageObject.TextLayoutBlock> arrayList3 = this.currentMessageObject.textLayoutBlocks;
                    if (arrayList3 != null) {
                        Iterator<MessageObject.TextLayoutBlock> it4 = arrayList3.iterator();
                        while (it4.hasNext()) {
                            MessageObject.TextLayoutBlock next4 = it4.next();
                            int i11 = next4.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            for (SpoilerEffect spoilerEffect6 : next4.spoilers) {
                                spoilerEffect6.startRipple((x - this.textX) + i11, (y - next4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams)) - this.textY, sqrt);
                            }
                        }
                    }
                }
                if (getParent() instanceof RecyclerListView) {
                    ViewGroup viewGroup2 = (ViewGroup) getParent();
                    for (int i12 = 0; i12 < viewGroup2.getChildCount(); i12++) {
                        View childAt2 = viewGroup2.getChildAt(i12);
                        if (childAt2 instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                            if (chatMessageCell2.getMessageObject() != null && chatMessageCell2.getMessageObject().getReplyMsgId() == getMessageObject().getId() && !chatMessageCell2.replySpoilers.isEmpty()) {
                                chatMessageCell2.replySpoilers.get(0).setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda10
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$3(chatMessageCell2);
                                    }
                                });
                                for (SpoilerEffect spoilerEffect7 : chatMessageCell2.replySpoilers) {
                                    spoilerEffect7.startRipple(spoilerEffect7.getBounds().centerX(), spoilerEffect7.getBounds().centerY(), sqrt);
                                }
                            }
                        }
                    }
                }
                this.spoilerPressed = null;
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$1() {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda13
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.this.lambda$checkSpoilersMotionEvent$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$0() {
        this.isSpoilerRevealing = false;
        getMessageObject().isSpoilersRevealed = true;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null) {
            Iterator<MessageObject.TextLayoutBlock> it = textLayoutBlocks.textLayoutBlocks.iterator();
            while (it.hasNext()) {
                it.next().spoilers.clear();
            }
        } else {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
            if (arrayList != null) {
                Iterator<MessageObject.TextLayoutBlock> it2 = arrayList.iterator();
                while (it2.hasNext()) {
                    it2.next().spoilers.clear();
                }
            }
        }
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$3(final ChatMessageCell chatMessageCell) {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda14
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.lambda$checkSpoilersMotionEvent$2(ChatMessageCell.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSpoilersMotionEvent$2(ChatMessageCell chatMessageCell) {
        chatMessageCell.getMessageObject().replyMessageObject.isSpoilersRevealed = true;
        chatMessageCell.replySpoilers.clear();
        chatMessageCell.invalidate();
    }

    private boolean checkBotButtonMotionEvent(MotionEvent motionEvent) {
        int i;
        int dp;
        if (this.botButtons.isEmpty()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.currentMessageObject.isOutOwner()) {
                dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
            } else {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.mediaBackground ? 1.0f : 7.0f);
            }
            for (int i2 = 0; i2 < this.botButtons.size(); i2++) {
                BotButton botButton = this.botButtons.get(i2);
                int dp2 = (botButton.y + this.layoutHeight) - AndroidUtilities.dp(2.0f);
                if (x >= botButton.x + dp && x <= botButton.x + dp + botButton.width && y >= dp2 && y <= botButton.height + dp2) {
                    this.pressedBotButton = i2;
                    invalidateOutbounds();
                    if (botButton.selectorDrawable == null) {
                        botButton.selectorDrawable = Theme.createRadSelectorDrawable(getThemedColor(Theme.key_chat_serviceBackgroundSelector), 6, 6);
                        botButton.selectorDrawable.setCallback(this);
                        botButton.selectorDrawable.setBounds(botButton.x + dp, dp2, botButton.x + dp + botButton.width, botButton.height + dp2);
                    }
                    if (Build.VERSION.SDK_INT >= 21) {
                        botButton.selectorDrawable.setHotspot(x, y);
                    }
                    botButton.selectorDrawable.setState(this.pressedState);
                    botButton.setPressed(true);
                    final int i3 = this.pressedBotButton;
                    postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda11
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatMessageCell.this.lambda$checkBotButtonMotionEvent$4(i3);
                        }
                    }, ViewConfiguration.getLongPressTimeout() - 1);
                    return true;
                }
            }
            return false;
        } else if (motionEvent.getAction() == 1) {
            if (this.pressedBotButton != -1) {
                playSoundEffect(0);
                BotButton botButton2 = this.botButtons.get(this.pressedBotButton);
                if (botButton2.selectorDrawable != null) {
                    botButton2.selectorDrawable.setState(StateSet.NOTHING);
                }
                botButton2.setPressed(false);
                if (!this.currentMessageObject.scheduled) {
                    if (botButton2.button != null) {
                        this.delegate.didPressBotButton(this, botButton2.button);
                    }
                } else {
                    Toast.makeText(getContext(), LocaleController.getString("MessageScheduledBotAction", R.string.MessageScheduledBotAction), 1).show();
                }
                this.pressedBotButton = -1;
                invalidateOutbounds();
                return false;
            }
            return false;
        } else if (motionEvent.getAction() != 3 || (i = this.pressedBotButton) == -1) {
            return false;
        } else {
            BotButton botButton3 = this.botButtons.get(i);
            if (botButton3.selectorDrawable != null) {
                botButton3.selectorDrawable.setState(StateSet.NOTHING);
            }
            botButton3.setPressed(false);
            this.pressedBotButton = -1;
            invalidateOutbounds();
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkBotButtonMotionEvent$4(int i) {
        int i2 = this.pressedBotButton;
        if (i == i2) {
            BotButton botButton = this.botButtons.get(i2);
            if (botButton != null) {
                if (botButton.selectorDrawable != null) {
                    botButton.selectorDrawable.setState(StateSet.NOTHING);
                }
                botButton.setPressed(false);
                if (!this.currentMessageObject.scheduled && botButton.button != null) {
                    cancelCheckLongPress();
                    this.delegate.didLongPressBotButton(this, botButton.button);
                }
            }
            this.pressedBotButton = -1;
            invalidateOutbounds();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:530:0x07e5, code lost:
        if (r5 > (r20.sideStartY + org.telegram.messenger.AndroidUtilities.dp((38 + ((r20.drawSideButton != 3 || r20.commentLayout == null) ? 0 : 18)) + (r20.drawSideButton2 != 5 ? 0 : 38)))) goto L584;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v141 */
    /* JADX WARN: Type inference failed for: r1v55 */
    /* JADX WARN: Type inference failed for: r1v56, types: [int, boolean] */
    @Override // android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        boolean z;
        int i;
        int i2;
        ?? r1;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        boolean z2;
        int i3;
        int i4;
        Drawable drawable;
        TLRPC$Chat tLRPC$Chat;
        int i5;
        int i6;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        int i12;
        Drawable drawable2;
        GroupMedia groupMedia;
        MessageTopicButton messageTopicButton;
        ChannelRecommendationsCell channelRecommendationsCell;
        MessageObject messageObject;
        if (this.currentMessageObject == null || (((chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.canPerformActions()) || this.animationRunning)) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && messageObject2.preview) {
                return checkTextSelection(motionEvent);
            }
            checkTextSelection(motionEvent);
            return super.onTouchEvent(motionEvent);
        }
        boolean z3 = true;
        if (checkTextSelection(motionEvent) || checkRoundSeekbar(motionEvent) || checkReactionsTouchEvent(motionEvent)) {
            return true;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount > 0) {
            if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
                getParent().requestDisallowInterceptTouchEvent(false);
                this.videoPlayerRewinder.cancelRewind();
                return false;
            }
            return true;
        }
        this.disallowLongPress = false;
        this.lastTouchX = motionEvent.getX();
        float y = motionEvent.getY();
        this.lastTouchY = y;
        this.backgroundDrawable.setTouchCoords(this.lastTouchX, y);
        boolean checkSpoilersMotionEvent = checkSpoilersMotionEvent(motionEvent, 0);
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextBlockMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (channelRecommendationsCell = this.channelRecommendationsCell) != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27 && (checkSpoilersMotionEvent = channelRecommendationsCell.checkTouchEvent(motionEvent))) {
            this.disallowLongPress = true;
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAdminMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkNameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkNameStatusMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPinchToZoom(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkDateMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextSelection(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (messageTopicButton = this.topicButton) != null) {
            checkSpoilersMotionEvent = messageTopicButton.checkTouchEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkOtherButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkSponsoredCloseMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCaptionMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTranscribeButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAudioMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTitleLabelMotion(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkContactMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkLinkPreviewMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkInstantButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCommentButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkGameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkEffectMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPhotoImageMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkBotButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPollButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = this.giveawayMessageCell.checkMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = this.giveawayResultsMessageCell.checkMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkFactCheckMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (groupMedia = this.groupMedia) != null) {
            checkSpoilersMotionEvent = groupMedia.onTouchEvent(motionEvent);
        }
        if (motionEvent.getAction() == 3) {
            this.spoilerPressed = null;
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewPressed = false;
            this.otherPressed = false;
            this.sideButtonPressed = false;
            this.pressedSideButton = 0;
            this.imagePressed = false;
            this.timePressed = false;
            this.gamePreviewPressed = false;
            this.commentButtonPressed = false;
            this.instantPressed = false;
            setInstantButtonPressed(false);
            resetContactButtonsPressedState();
            ButtonBounce buttonBounce = this.titleLabelBounce;
            if (buttonBounce != null) {
                buttonBounce.setPressed(false);
            }
            if (Build.VERSION.SDK_INT >= 21) {
                int i13 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i13 >= drawableArr.length) {
                        break;
                    }
                    Drawable drawable3 = drawableArr[i13];
                    if (drawable3 != null) {
                        drawable3.setState(StateSet.NOTHING);
                    }
                    i13++;
                }
                Drawable drawable4 = this.linkPreviewSelector;
                if (drawable4 != null) {
                    drawable4.setState(StateSet.NOTHING);
                }
            }
            Drawable drawable5 = this.nameStatusSelector;
            if (drawable5 != null) {
                drawable5.setState(StateSet.NOTHING);
            }
            Drawable drawable6 = this.nameLayoutSelector;
            if (drawable6 != null) {
                drawable6.setState(StateSet.NOTHING);
            }
            resetCodeSelectors();
            ButtonBounce buttonBounce2 = this.linkPreviewBounce;
            if (buttonBounce2 != null) {
                buttonBounce2.setPressed(false);
            }
            if (this.hadLongPress) {
                if (this.pressedLinkType != 2) {
                    this.hadLongPress = false;
                }
                this.pressedLink = null;
                this.pressedFactCheckLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
            } else {
                resetPressedLink(-1);
            }
            z = false;
        } else {
            z = checkSpoilersMotionEvent;
        }
        updateRadialProgressBackground();
        if (!this.disallowLongPress && z && motionEvent.getAction() == 0) {
            startCheckLongPress();
        }
        if (motionEvent.getAction() != 0 && motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (z) {
            return z;
        }
        float x = motionEvent.getX();
        float y2 = motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 == null || chatMessageCellDelegate2.canPerformActions()) {
                if (this.isAvatarVisible && this.avatarImage.isInsideImage(x, getTop() + y2)) {
                    this.avatarPressed = true;
                } else {
                    if (this.psaButtonVisible && this.hasPsaHint) {
                        if (x >= this.psaHelpX && x <= i11 + AndroidUtilities.dp(40.0f)) {
                            if (y2 >= this.psaHelpY && y2 <= i12 + AndroidUtilities.dp(40.0f)) {
                                this.psaHintPressed = true;
                                createSelectorDrawable(0);
                                this.selectorDrawableMaskType[0] = 3;
                                if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                                    drawable2.setBounds(this.psaHelpX - AndroidUtilities.dp(8.0f), this.psaHelpY - AndroidUtilities.dp(8.0f), this.psaHelpX + AndroidUtilities.dp(32.0f), this.psaHelpY + AndroidUtilities.dp(32.0f));
                                    this.selectorDrawable[0].setHotspot(x, y2);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                                invalidate();
                            }
                        }
                    }
                    if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                        float f = this.forwardNameX;
                        if (x >= f && x <= this.forwardedNameWidth + f) {
                            if (y2 >= this.forwardNameY && y2 <= i10 + this.forwardHeight) {
                                if (this.viaWidth != 0 && x >= f + this.viaNameWidth + AndroidUtilities.dp(4.0f)) {
                                    this.forwardBotPressed = true;
                                } else {
                                    ForwardBackground forwardBackground = this.forwardBg;
                                    if (forwardBackground != null) {
                                        forwardBackground.setPressed(true);
                                    }
                                    this.forwardNamePressed = true;
                                }
                            }
                        }
                    }
                    if (this.drawNameLayout && this.nameLayout != null && (i9 = this.viaWidth) != 0) {
                        float f2 = this.nameX + this.viaNameWidth;
                        if (x >= f2 && x <= f2 + i9 && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                            this.forwardBotPressed = true;
                        }
                    }
                    if (this.sideButtonVisible && this.drawSideButton != 0 && x >= this.sideStartX - AndroidUtilities.dp(24.0f) && x <= this.sideStartX + AndroidUtilities.dp(40.0f) && y2 >= this.sideStartY - AndroidUtilities.dp(24.0f)) {
                        if (y2 <= this.sideStartY + AndroidUtilities.dp(38 + ((this.drawSideButton != 3 || this.commentLayout == null) ? 0 : 18) + (this.drawSideButton2 != 5 ? 0 : 38))) {
                            if (this.currentMessageObject.isSent()) {
                                if (this.currentMessageObject.isSponsored()) {
                                    if (y2 > this.sideStartY + AndroidUtilities.dp(32.0f) && this.drawSideButton2 == 5) {
                                        this.pressedSideButton = 5;
                                    } else {
                                        this.pressedSideButton = 4;
                                    }
                                } else {
                                    this.pressedSideButton = this.drawSideButton;
                                }
                                this.sideButtonPressed = true;
                            }
                            invalidate();
                        }
                    }
                    if (this.replyNameLayout != null) {
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            i7 = this.replyStartX;
                            i8 = Math.max(this.replyNameWidth, this.replyTextWidth);
                        } else {
                            i7 = this.replyStartX;
                            i8 = this.backgroundDrawableRight;
                        }
                        int i14 = i7 + i8;
                        if (x >= this.replyStartX && x <= i14) {
                            float f3 = this.replyStartY;
                            if (y2 >= f3 && y2 <= f3 + this.replyHeight) {
                                this.replyPressed = true;
                                this.replyTouchX = x;
                                this.replyTouchY = getY() + y2;
                                Drawable drawable7 = this.replySelector;
                                if (drawable7 != null) {
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        drawable7.setHotspot(x, y2);
                                    }
                                    this.replySelectorPressed = false;
                                    this.replySelectorCanBePressed = true;
                                    postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda1
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            ChatMessageCell.this.lambda$onTouchEvent$5();
                                        }
                                    }, ViewConfiguration.getTapTimeout() / 6);
                                    invalidate();
                                }
                                ButtonBounce buttonBounce3 = this.replyBounce;
                                if (buttonBounce3 != null) {
                                    buttonBounce3.setPressed(true);
                                    this.replyBounceX = x;
                                    this.replyBounceY = y2;
                                }
                            }
                        }
                    }
                    z3 = z;
                }
                if (z3) {
                    startCheckLongPress();
                }
                return z3;
            }
            return z;
        }
        if (motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (this.avatarPressed) {
            if (motionEvent.getAction() == 1) {
                this.avatarPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 != null) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null) {
                        if (tLRPC$User.id == 0) {
                            chatMessageCellDelegate3.didPressHiddenForward(this);
                            return z;
                        }
                        chatMessageCellDelegate3.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY, false);
                        return z;
                    }
                    TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                    if (tLRPC$Chat2 != null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader != null) {
                            if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                                i6 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                                tLRPC$Chat = tLRPC$Chat2;
                            } else {
                                i6 = tLRPC$MessageFwdHeader.channel_post;
                                tLRPC$Chat = this.currentForwardChannel;
                            }
                            i5 = i6;
                        } else {
                            tLRPC$Chat = tLRPC$Chat2;
                            i5 = 0;
                        }
                        chatMessageCellDelegate3.didPressChannelAvatar(this, tLRPC$Chat != null ? tLRPC$Chat : tLRPC$Chat2, i5, this.lastTouchX, this.lastTouchY, false);
                        return z;
                    } else if (this.currentMessageObject != null) {
                        chatMessageCellDelegate3.didPressInstantButton(this, this.drawInstantViewType);
                        return z;
                    } else {
                        return z;
                    }
                }
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.avatarPressed = false;
                return z;
            } else if (motionEvent.getAction() == 2 && this.isAvatarVisible && !this.avatarImage.isInsideImage(x, y2 + getTop())) {
                this.avatarPressed = false;
                return z;
            } else {
                return z;
            }
        } else if (this.psaHintPressed) {
            if (motionEvent.getAction() == 1) {
                playSoundEffect(0);
                this.delegate.didPressHint(this, 1);
                this.psaHintPressed = false;
                if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                    drawable.setState(StateSet.NOTHING);
                }
                invalidate();
                return z;
            }
            return z;
        } else if (this.forwardNamePressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardNamePressed = false;
                ForwardBackground forwardBackground2 = this.forwardBg;
                if (forwardBackground2 != null) {
                    forwardBackground2.setPressed(false);
                }
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                if (chatMessageCellDelegate4 != null) {
                    TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                    if (tLRPC$Chat3 != null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = this.currentMessageObject.messageOwner.fwd_from;
                        chatMessageCellDelegate4.didPressChannelAvatar(this, tLRPC$Chat3, tLRPC$MessageFwdHeader2 != null ? tLRPC$MessageFwdHeader2.channel_post : 0, this.lastTouchX, this.lastTouchY, true);
                        return z;
                    }
                    TLRPC$User tLRPC$User2 = this.currentForwardUser;
                    if (tLRPC$User2 != null) {
                        chatMessageCellDelegate4.didPressUserAvatar(this, tLRPC$User2, this.lastTouchX, this.lastTouchY, true);
                        return z;
                    } else if (this.currentForwardName != null) {
                        chatMessageCellDelegate4.didPressHiddenForward(this);
                        return z;
                    } else {
                        return z;
                    }
                }
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.forwardNamePressed = false;
                ForwardBackground forwardBackground3 = this.forwardBg;
                if (forwardBackground3 != null) {
                    forwardBackground3.setPressed(false);
                    return z;
                }
                return z;
            } else if (motionEvent.getAction() == 2) {
                float f4 = this.forwardNameX;
                if (x >= f4 && x <= f4 + this.forwardedNameWidth) {
                    if (y2 >= this.forwardNameY && y2 <= i4 + this.forwardHeight) {
                        return z;
                    }
                }
                this.forwardNamePressed = false;
                ForwardBackground forwardBackground4 = this.forwardBg;
                if (forwardBackground4 != null) {
                    forwardBackground4.setPressed(false);
                    return z;
                }
                return z;
            } else {
                return z;
            }
        } else if (this.forwardBotPressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardBotPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                if (chatMessageCellDelegate5 != null) {
                    TLRPC$User tLRPC$User3 = this.currentViaBotUser;
                    if (tLRPC$User3 != null && tLRPC$User3.bot_inline_placeholder == null) {
                        chatMessageCellDelegate5.didPressViaBotNotInline(this, tLRPC$User3.id);
                        return z;
                    }
                    chatMessageCellDelegate5.didPressViaBot(this, tLRPC$User3 != null ? tLRPC$User3.username : this.currentMessageObject.messageOwner.via_bot_name);
                    return z;
                }
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.forwardBotPressed = false;
                return z;
            } else if (motionEvent.getAction() == 2) {
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f5 = this.forwardNameX;
                    if (x >= f5 && x <= f5 + this.forwardedNameWidth) {
                        if (y2 >= this.forwardNameY && y2 <= i3 + this.forwardHeight) {
                            return z;
                        }
                    }
                    this.forwardBotPressed = false;
                    return z;
                }
                float f6 = this.nameX + this.viaNameWidth;
                if (x < f6 || x > f6 + this.viaWidth || y2 < this.nameY - AndroidUtilities.dp(4.0f) || y2 > this.nameY + AndroidUtilities.dp(20.0f)) {
                    this.forwardBotPressed = false;
                    return z;
                }
                return z;
            } else {
                return z;
            }
        } else if (this.replyPressed) {
            if (motionEvent.getAction() == 1) {
                this.replyPressed = false;
                Drawable drawable8 = this.replySelector;
                if (drawable8 != null) {
                    if (!this.replySelectorPressed) {
                        drawable8.setState(new int[]{16842919, 16842910});
                        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda2
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$onTouchEvent$6();
                            }
                        });
                        z2 = false;
                    } else {
                        z2 = false;
                        drawable8.setState(new int[0]);
                    }
                    this.replySelectorPressed = z2;
                    this.replySelectorCanBePressed = z2;
                    invalidate();
                    r1 = z2;
                } else {
                    r1 = 0;
                }
                ButtonBounce buttonBounce4 = this.replyBounce;
                if (buttonBounce4 != 0) {
                    buttonBounce4.setPressed(r1);
                }
                playSoundEffect(r1);
                if (this.replyPanelIsForward) {
                    ChatMessageCellDelegate chatMessageCellDelegate6 = this.delegate;
                    if (chatMessageCellDelegate6 != null) {
                        TLRPC$Chat tLRPC$Chat4 = this.currentForwardChannel;
                        if (tLRPC$Chat4 != null) {
                            chatMessageCellDelegate6.didPressChannelAvatar(this, tLRPC$Chat4, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY, false);
                            return z;
                        }
                        TLRPC$User tLRPC$User4 = this.currentForwardUser;
                        if (tLRPC$User4 != null) {
                            chatMessageCellDelegate6.didPressUserAvatar(this, tLRPC$User4, this.lastTouchX, this.lastTouchY, false);
                            return z;
                        } else if (this.currentForwardName != null) {
                            chatMessageCellDelegate6.didPressHiddenForward(this);
                            return z;
                        } else {
                            return z;
                        }
                    }
                    return z;
                } else if (this.delegate != null) {
                    if (this.currentMessageObject.hasValidReplyMessageObject() || this.currentMessageObject.isReplyToStory() || this.hasReplyQuote || !((tLRPC$Message = this.currentMessageObject.messageOwner) == null || (tLRPC$MessageReplyHeader = tLRPC$Message.reply_to) == null || tLRPC$MessageReplyHeader.reply_from == null)) {
                        this.delegate.didPressReplyMessage(this, this.currentMessageObject.getReplyMsgId());
                        return z;
                    }
                    return z;
                } else {
                    return z;
                }
            } else if (motionEvent.getAction() == 3) {
                this.replyPressed = false;
                this.replySelectorPressed = false;
                Drawable drawable9 = this.replySelector;
                if (drawable9 != null) {
                    drawable9.setState(new int[0]);
                }
                invalidate();
                ButtonBounce buttonBounce5 = this.replyBounce;
                if (buttonBounce5 != null) {
                    buttonBounce5.setPressed(false);
                    return z;
                }
                return z;
            } else if (motionEvent.getAction() == 2) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i = this.replyStartX;
                    i2 = Math.max(this.replyNameWidth, this.replyTextWidth);
                } else {
                    i = this.replyStartX;
                    i2 = this.backgroundDrawableRight;
                }
                int i15 = i + i2;
                if (x >= this.replyStartX && x <= i15) {
                    float f7 = this.replyStartY;
                    if (y2 >= f7 && y2 <= f7 + this.replyHeight) {
                        if (this.replySelector == null || !this.replySelectorCanBePressed || Math.sqrt(Math.pow(x - this.replyTouchX, 2.0d) + Math.pow((y2 + getY()) - this.replyTouchY, 2.0d)) <= 0.75d) {
                            return z;
                        }
                        this.replySelectorCanBePressed = false;
                        return z;
                    }
                }
                this.replyPressed = false;
                this.replySelectorPressed = false;
                this.replySelectorCanBePressed = false;
                Drawable drawable10 = this.replySelector;
                if (drawable10 != null) {
                    drawable10.setState(new int[0]);
                }
                invalidate();
                ButtonBounce buttonBounce6 = this.replyBounce;
                if (buttonBounce6 != null) {
                    buttonBounce6.setPressed(false);
                    return z;
                }
                return z;
            } else {
                return z;
            }
        } else if (this.sideButtonPressed) {
            if (motionEvent.getAction() == 1) {
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate7 = this.delegate;
                if (chatMessageCellDelegate7 != null) {
                    int i16 = this.pressedSideButton;
                    if (i16 == 4) {
                        chatMessageCellDelegate7.didPressSponsoredClose(this);
                    } else if (i16 == 5) {
                        chatMessageCellDelegate7.didPressSponsoredInfo(this, x, y2);
                    } else if (i16 == 3) {
                        chatMessageCellDelegate7.didPressCommentButton(this);
                    } else {
                        chatMessageCellDelegate7.didPressSideButton(this);
                    }
                }
                this.sideButtonPressed = false;
                this.pressedSideButton = 0;
            } else if (motionEvent.getAction() == 3) {
                this.sideButtonPressed = false;
                this.pressedSideButton = 0;
            } else if (motionEvent.getAction() == 2) {
                if (this.sideButtonVisible && x >= this.sideStartX - AndroidUtilities.dp(24.0f) && x <= this.sideStartX + AndroidUtilities.dp(40.0f) && y2 >= this.sideStartY - AndroidUtilities.dp(24.0f)) {
                }
                this.sideButtonPressed = false;
                this.pressedSideButton = 0;
            }
            invalidate();
            return z;
        } else {
            return z;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onTouchEvent$5() {
        if (this.replyPressed && !this.replySelectorPressed && this.replySelectorCanBePressed) {
            this.replySelectorPressed = true;
            this.replySelector.setState(new int[]{16842919, 16842910});
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onTouchEvent$6() {
        this.replySelector.setState(new int[0]);
        invalidate();
    }

    private boolean checkReactionsTouchEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessages groupedMessages;
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                View childAt = viewGroup.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i2 = currentPosition.flags;
                        if ((i2 & 8) != 0 && (i2 & 1) != 0) {
                            if (chatMessageCell == this) {
                                return this.reactionsLayoutInBubble.checkTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean checkTouchEvent = chatMessageCell.reactionsLayoutInBubble.checkTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return checkTouchEvent;
                        }
                    }
                }
            }
            return false;
        }
        return this.reactionsLayoutInBubble.checkTouchEvent(motionEvent);
    }

    private boolean checkPinchToZoom(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        PinchToZoomHelper pinchToZoomHelper = chatMessageCellDelegate == null ? null : chatMessageCellDelegate.getPinchToZoomHelper();
        if (this.currentMessageObject == null || !this.photoImage.hasNotThumb() || pinchToZoomHelper == null || this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedEmoji() || ((this.currentMessageObject.isVideo() && !this.autoPlayingMedia) || this.isRoundVideo || this.currentMessageObject.isAnimatedSticker() || ((this.currentMessageObject.isDocument() && !this.currentMessageObject.isGif()) || this.currentMessageObject.needDrawBluredPreview()))) {
            return false;
        }
        ImageReceiver imageReceiver = this.photoImage;
        MessageObject messageObject = this.currentMessageObject;
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        return pinchToZoomHelper.checkPinchToZoom(motionEvent, this, imageReceiver, null, null, messageObject, spoilerEffect2 == null ? 0 : spoilerEffect2.getAttachIndex(this));
    }

    private boolean checkTextSelection(MotionEvent motionEvent) {
        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper;
        int i;
        int dp;
        int i2;
        int dp2;
        int extraTextX;
        int i3;
        MessageObject.GroupedMessages groupedMessages;
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || (textSelectionHelper = chatMessageCellDelegate.getTextSelectionHelper()) == null || textSelectionHelper.isMenuEmpty()) {
            return false;
        }
        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
        if ((arrayList == null || arrayList.isEmpty()) && !hasCaptionLayout()) {
            return false;
        }
        if ((this.drawSelectionBackground || this.currentMessagesGroup != null) && (this.currentMessagesGroup == null || this.delegate.hasSelectedMessages())) {
            if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                if (viewGroup == null) {
                    return false;
                }
                for (int i4 = 0; i4 < viewGroup.getChildCount(); i4++) {
                    View childAt = viewGroup.getChildAt(i4);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                        if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId && (currentPosition.flags & captionFlag()) != 0 && (currentPosition.flags & 1) != 0) {
                            textSelectionHelper.setMaybeTextCord((int) chatMessageCell.captionX, (int) chatMessageCell.captionY);
                            textSelectionHelper.setMessageObject(chatMessageCell);
                            if (chatMessageCell == this) {
                                return textSelectionHelper.onTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean onTouchEvent = textSelectionHelper.onTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return onTouchEvent;
                        }
                    }
                }
                return false;
            }
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject != null && !messageObject.preview && this.factCheckTextLayout != null && motionEvent.getY() >= this.factCheckY) {
                textSelectionHelper.setIsDescription(false);
                textSelectionHelper.setIsFactCheck(true);
                MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null && !groupedMessages2.isDocuments) {
                    i3 = (int) this.captionX;
                } else if (this.currentMessageObject.isOutOwner()) {
                    int dp3 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                    i3 = this.currentMessageObject.type == 19 ? dp3 - Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp3) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x) : dp3;
                } else {
                    if (this.mediaBackground) {
                        dp2 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                        extraTextX = getExtraTextX();
                    } else {
                        dp2 = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                        extraTextX = getExtraTextX();
                    }
                    i3 = dp2 + extraTextX;
                }
                textSelectionHelper.setMaybeTextCord(((((int) (i3 + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f)) + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft, this.factCheckY + AndroidUtilities.dp(22.0f));
            } else if (hasCaptionLayout()) {
                textSelectionHelper.setIsDescription(false);
                textSelectionHelper.setIsFactCheck(false);
                textSelectionHelper.setMaybeTextCord((int) this.captionX, (int) this.captionY);
            } else {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2 != null && !messageObject2.preview && this.descriptionLayout != null && (!this.linkPreviewAbove ? motionEvent.getY() > this.descriptionY : motionEvent.getY() < this.textY)) {
                    textSelectionHelper.setIsDescription(true);
                    textSelectionHelper.setIsFactCheck(false);
                    if (this.hasGamePreview) {
                        i2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                    } else {
                        if (this.hasInvoicePreview) {
                            i = this.unmovedTextX;
                            dp = AndroidUtilities.dp(1.0f);
                        } else {
                            i = this.unmovedTextX;
                            dp = AndroidUtilities.dp(1.0f);
                        }
                        i2 = i + dp;
                    }
                    textSelectionHelper.setMaybeTextCord(i2 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
                } else {
                    textSelectionHelper.setIsDescription(false);
                    textSelectionHelper.setIsFactCheck(false);
                    textSelectionHelper.setMaybeTextCord(this.textX, this.textY);
                }
            }
            textSelectionHelper.setMessageObject(this);
            return textSelectionHelper.onTouchEvent(motionEvent);
        }
        return false;
    }

    private void updateSelectionTextPosition() {
        int dp;
        int extraTextX;
        int i;
        int i2;
        int dp2;
        int i3;
        if (getDelegate() == null || getDelegate().getTextSelectionHelper() == null || !getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
            return;
        }
        int textSelectionType = getDelegate().getTextSelectionHelper().getTextSelectionType(this);
        if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_DESCRIPTION) {
            if (this.hasGamePreview) {
                i3 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i2 = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                } else {
                    i2 = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                }
                i3 = i2 + dp2;
            }
            getDelegate().getTextSelectionHelper().updateTextPosition(i3 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
        } else if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_CAPTION) {
            updateCaptionLayout();
            getDelegate().getTextSelectionHelper().updateTextPosition((int) this.captionX, (int) this.captionY);
        } else if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_FACTCHECK) {
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && !groupedMessages.isDocuments) {
                i = (int) this.captionX;
            } else {
                if (this.currentMessageObject.isOutOwner()) {
                    i = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                    if (this.currentMessageObject.type == 19) {
                        i -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + i) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                    }
                } else {
                    if (this.mediaBackground) {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                        extraTextX = getExtraTextX();
                    } else {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                        extraTextX = getExtraTextX();
                    }
                    i = dp + extraTextX;
                }
            }
            int dp3 = ((int) (i + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i4 = this.factCheckY;
            updateCaptionLayout();
            getDelegate().getTextSelectionHelper().updateTextPosition((dp3 + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft, i4 + AndroidUtilities.dp(22.0f));
        } else {
            getDelegate().getTextSelectionHelper().updateTextPosition(this.textX, this.textY);
        }
    }

    public ArrayList<PollButton> getPollButtons() {
        return this.pollButtons;
    }

    public void updatePlayingMessageProgress() {
        String formatShortDuration;
        double d;
        double d2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount != 0 && videoPlayerRewinder.rewindByBackSeek) {
            messageObject.audioProgress = videoPlayerRewinder.getVideoProgress();
        }
        double d3 = 0.0d;
        if (this.documentAttachType == 4) {
            SeekBar seekBar = this.seekBar;
            if (seekBar != null) {
                seekBar.clearTimestamps();
            }
            if (this.infoLayout == null || !(PhotoViewer.isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isGoingToShowMessageObject(this.currentMessageObject))) {
                AnimatedFileDrawable animation = this.photoImage.getAnimation();
                if (animation != null) {
                    MessageObject messageObject2 = this.currentMessageObject;
                    int durationMs = animation.getDurationMs() / 1000;
                    messageObject2.audioPlayerDuration = durationMs;
                    d2 = durationMs;
                    MessageObject messageObject3 = this.currentMessageObject;
                    TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                    if (tLRPC$Message.ttl > 0 && tLRPC$Message.destroyTime == 0 && !messageObject3.needDrawBluredPreview() && this.currentMessageObject.isVideo() && animation.hasBitmap()) {
                        this.delegate.didStartVideoStream(this.currentMessageObject);
                    }
                } else {
                    d2 = 0.0d;
                }
                if (d2 == 0.0d) {
                    d2 = this.currentMessageObject.getDuration();
                }
                if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    double d4 = this.currentMessageObject.audioProgress;
                    Double.isNaN(d4);
                    d2 -= d4 * d2;
                } else if (animation != null) {
                    if (d2 != 0.0d) {
                        double currentProgressMs = animation.getCurrentProgressMs() / 1000;
                        Double.isNaN(currentProgressMs);
                        d2 -= currentProgressMs;
                    }
                    if (this.delegate != null && animation.getCurrentProgressMs() >= 3000) {
                        this.delegate.videoTimerReached();
                    }
                }
                if (this.lastTime != d2) {
                    String formatShortDuration2 = AndroidUtilities.formatShortDuration((int) d2);
                    this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(formatShortDuration2));
                    this.infoLayout = new StaticLayout(formatShortDuration2, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.lastTime = d2;
                    return;
                }
                return;
            }
            return;
        }
        if (this.isRoundVideo) {
            if (this.useSeekBarWaveform) {
                if (!this.seekBarWaveform.isDragging()) {
                    this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
                }
            } else {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.clearTimestamps();
            }
            TLRPC$Document document = this.currentMessageObject.getDocument();
            if (document != null) {
                while (r1 < document.attributes.size()) {
                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute = document.attributes.get(r1);
                    if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo) {
                        d = tLRPC$DocumentAttribute.duration;
                        break;
                    }
                    r1++;
                }
            }
            d = 0.0d;
            long j = this.overridenDuration;
            if (j >= 0) {
                d = j;
            } else if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                double d5 = this.currentMessageObject.audioProgressSec;
                Double.isNaN(d5);
                d = Math.max(0.0d, d - d5);
            }
            if (this.lastTime != d) {
                this.lastTime = d;
                String formatLongDuration = AndroidUtilities.formatLongDuration((int) d);
                this.timeWidthAudio = (int) Math.ceil(Theme.chat_timePaint.measureText(formatLongDuration));
                this.durationLayout = new StaticLayout(formatLongDuration, Theme.chat_timePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            float f = this.currentMessageObject.audioProgress;
            if (f != 0.0f) {
                this.lastDrawingAudioProgress = f;
                if (f > 0.9f) {
                    this.lastDrawingAudioProgress = 1.0f;
                }
            }
            invalidate();
        } else if (this.documentAttach != null) {
            if (this.useSeekBarWaveform) {
                if (!this.seekBarWaveform.isDragging()) {
                    this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
                }
            } else {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.updateTimestamps(this.currentMessageObject, null);
            }
            if (this.documentAttachType == 3) {
                long j2 = this.overridenDuration;
                if (j2 >= 0) {
                    d3 = j2;
                } else if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    while (true) {
                        if (r1 >= this.documentAttach.attributes.size()) {
                            break;
                        }
                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(r1);
                        if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                            d3 = tLRPC$DocumentAttribute2.duration;
                            break;
                        }
                        r1++;
                    }
                } else {
                    d3 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != d3) {
                    this.lastTime = d3;
                    String formatLongDuration2 = AndroidUtilities.formatLongDuration((int) d3);
                    this.timeWidthAudio = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatLongDuration2));
                    this.durationLayout = new StaticLayout(formatLongDuration2, Theme.chat_audioTimePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            } else {
                double duration = this.currentMessageObject.getDuration();
                r1 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? this.currentMessageObject.audioProgressSec : 0;
                double d6 = r1;
                if (this.lastTime != d6) {
                    this.lastTime = d6;
                    this.durationLayout = new StaticLayout(AndroidUtilities.formatShortDuration(r1, (int) duration), Theme.chat_audioTimePaint, (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatShortDuration)), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            }
            invalidate();
        }
    }

    public void overrideDuration(long j) {
        this.overridenDuration = j;
    }

    public void setFullyDraw(boolean z) {
        this.fullyDraw = z;
    }

    public void setParentViewSize(int i, int i2) {
        Theme.MessageDrawable messageDrawable;
        this.parentWidth = i;
        this.parentHeight = i2;
        this.backgroundHeight = i2;
        if (!(this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) && ((messageDrawable = this.currentBackgroundDrawable) == null || messageDrawable.getGradientShader() == null)) {
            return;
        }
        invalidate();
    }

    public void copyVisiblePartTo(ChatMessageCell chatMessageCell) {
        if (chatMessageCell == null) {
            return;
        }
        chatMessageCell.setVisiblePart(this.childPosition, this.visibleHeight, this.visibleParent, this.visibleParentOffset, this.visibleTop, this.parentWidth, this.parentHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
    }

    public void setVisiblePart(int i, int i2, int i3, float f, float f2, int i4, int i5, int i6, int i7) {
        MessageObject.TextLayoutBlock textLayoutBlock;
        MessageObject messageObject;
        this.childPosition = i;
        this.visibleHeight = i2;
        this.visibleParent = i3;
        this.parentWidth = i4;
        this.parentHeight = i5;
        this.visibleTop = f2;
        this.visibleParentOffset = f;
        this.backgroundHeight = i5;
        this.blurredViewTopOffset = i6;
        this.blurredViewBottomOffset = i7;
        if ((!this.botButtons.isEmpty() || (this.channelRecommendationsCell != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27)) && this.viewTop != f2) {
            invalidate();
        }
        this.viewTop = f2;
        if (i3 != this.parentHeight || f != this.parentViewTopOffset) {
            this.parentViewTopOffset = f;
            this.parentHeight = i3;
        }
        if (this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) {
            invalidate();
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null || messageObject2.textLayoutBlocks == null) {
            return;
        }
        int i8 = i - this.textY;
        int i9 = 0;
        for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= i8; i10++) {
            i9 = i10;
        }
        int i11 = -1;
        int i12 = -1;
        int i13 = 0;
        while (i9 < this.currentMessageObject.textLayoutBlocks.size()) {
            float textYOffset = this.currentMessageObject.textLayoutBlocks.get(i9).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams);
            float height = textLayoutBlock.padTop + textYOffset + textLayoutBlock.height(this.transitionParams) + textLayoutBlock.padBottom;
            float f3 = i8;
            if (intersect(textYOffset, height, f3, i8 + i2)) {
                if (i11 == -1) {
                    i11 = i9;
                }
                i13++;
                i12 = i9;
            } else if (textYOffset > f3) {
                break;
            }
            i9++;
        }
        if (this.lastVisibleBlockNum != i12 || this.firstVisibleBlockNum != i11 || this.totalVisibleBlocksCount != i13) {
            this.lastVisibleBlockNum = i12;
            this.firstVisibleBlockNum = i11;
            this.totalVisibleBlocksCount = i13;
            invalidate();
        } else if (this.animatedEmojiStack != null) {
            for (int i14 = 0; i14 < this.animatedEmojiStack.holders.size(); i14++) {
                AnimatedEmojiSpan.AnimatedEmojiHolder animatedEmojiHolder = this.animatedEmojiStack.holders.get(i14);
                if (animatedEmojiHolder != null && animatedEmojiHolder.skipDraw && !animatedEmojiHolder.outOfBounds((this.parentBoundsTop - getY()) - animatedEmojiHolder.drawingYOffset, (this.parentBoundsBottom - getY()) - animatedEmojiHolder.drawingYOffset)) {
                    invalidate();
                    return;
                }
            }
        }
    }

    public static StaticLayout generateStaticLayout(CharSequence charSequence, TextPaint textPaint, int i, int i2, int i3, int i4) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);
        StaticLayout staticLayout = new StaticLayout(charSequence, textPaint, i2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        int i5 = i;
        int i6 = 0;
        for (int i7 = 0; i7 < i3; i7++) {
            staticLayout.getLineDirections(i7);
            if (staticLayout.getLineLeft(i7) != 0.0f || staticLayout.isRtlCharAt(staticLayout.getLineStart(i7)) || staticLayout.isRtlCharAt(staticLayout.getLineEnd(i7))) {
                i5 = i2;
            }
            int lineEnd = staticLayout.getLineEnd(i7);
            if (lineEnd == charSequence.length()) {
                break;
            }
            int i8 = (lineEnd - 1) + i6;
            if (spannableStringBuilder.charAt(i8) == ' ') {
                spannableStringBuilder.replace(i8, i8 + 1, (CharSequence) "\n");
            } else if (spannableStringBuilder.charAt(i8) != '\n') {
                spannableStringBuilder.insert(i8, (CharSequence) "\n");
                i6++;
            }
            if (i7 == staticLayout.getLineCount() - 1 || i7 == i4 - 1) {
                break;
            }
        }
        int i9 = i5;
        return StaticLayoutEx.createStaticLayout(spannableStringBuilder, textPaint, i9, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i9, i4, true);
    }

    private void didClickedImage() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$WebPage tLRPC$WebPage;
        boolean z;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        if (this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.needDrawBluredPreview()) {
            MessageObject messageObject = this.currentMessageObject;
            if (!messageObject.isMediaSpoilersRevealed) {
                if (this.delegate != null && messageObject.isSensitive()) {
                    this.delegate.didPressRevealSensitiveContent(this);
                    return;
                } else {
                    startRevealMedia(this.lastTouchX, this.lastTouchY);
                    return;
                }
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        int i = messageObject2.type;
        if (i == 20) {
            TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
            if (tLRPC$Message == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null || tLRPC$MessageMedia.extended_media.isEmpty() || (tLRPC$ReplyMarkup = this.currentMessageObject.messageOwner.reply_markup) == null) {
                return;
            }
            Iterator<TLRPC$TL_keyboardButtonRow> it = tLRPC$ReplyMarkup.rows.iterator();
            while (it.hasNext()) {
                Iterator<TLRPC$KeyboardButton> it2 = it.next().buttons.iterator();
                if (it2.hasNext()) {
                    this.delegate.didPressExtendedMediaPreview(this, it2.next());
                    return;
                }
            }
        } else if (i == 1 || messageObject2.isAnyKindOfSticker()) {
            int i2 = this.buttonState;
            if (i2 == -1) {
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (i2 == 0) {
                didPressButton(true, false);
            }
        } else {
            MessageObject messageObject3 = this.currentMessageObject;
            int i3 = messageObject3.type;
            if (i3 == 12) {
                long j = MessageObject.getMedia(messageObject3.messageOwner).user_id;
                this.delegate.didPressUserAvatar(this, j != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j)) : null, this.lastTouchX, this.lastTouchY, false);
            } else if (i3 == 5) {
                if (this.buttonState != -1) {
                    didPressButton(true, false);
                } else if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.delegate.needPlayMessage(this, this.currentMessageObject, false);
                } else {
                    MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                }
            } else if (i3 == 8) {
                int i4 = this.buttonState;
                if (i4 == -1 || (i4 == 1 && this.canStreamVideo && this.autoPlayingMedia)) {
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (i4 == 2 || i4 == 0) {
                    didPressButton(true, false);
                }
            } else {
                int i5 = this.documentAttachType;
                if (i5 == 4) {
                    int i6 = this.buttonState;
                    if (i6 == -1 || ((z = this.drawVideoImageButton) && (this.autoPlayingMedia || (SharedConfig.streamMedia && this.canStreamVideo)))) {
                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                    } else if (z) {
                        didPressButton(true, true);
                    } else if (i6 == 0 || i6 == 3) {
                        didPressButton(true, false);
                    }
                } else if (i3 == 4 || i3 == 23 || i3 == 24) {
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (i5 == 1) {
                    if (this.buttonState == -1) {
                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                    }
                } else if (messageObject3.sponsoredMedia != null) {
                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                    if (chatMessageCellDelegate2 != null) {
                        chatMessageCellDelegate2.didPressImage(this, this.lastTouchX, this.lastTouchY);
                    }
                } else if (i5 == 2) {
                    if (this.buttonState != -1 || (tLRPC$WebPage = MessageObject.getMedia(messageObject3.messageOwner).webpage) == null) {
                        return;
                    }
                    String str = tLRPC$WebPage.embed_url;
                    if (str != null && str.length() != 0) {
                        this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage.embed_url, tLRPC$WebPage.site_name, tLRPC$WebPage.description, tLRPC$WebPage.url, tLRPC$WebPage.embed_width, tLRPC$WebPage.embed_height);
                    } else {
                        Browser.openUrl(getContext(), tLRPC$WebPage.url);
                    }
                } else if (this.hasInvoicePreview) {
                    if (this.buttonState == -1) {
                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                    }
                } else if (Build.VERSION.SDK_INT < 26 || (chatMessageCellDelegate = this.delegate) == null) {
                } else {
                    if (i3 == 16) {
                        chatMessageCellDelegate.didLongPress(this, 0.0f, 0.0f);
                    } else {
                        chatMessageCellDelegate.didPressOther(this, this.otherX, this.otherY);
                    }
                }
            }
        }
    }

    private void updateSecretTimeText(MessageObject messageObject) {
        CharSequence secretTimeString;
        if (messageObject == null || !messageObject.needDrawBluredPreview() || (secretTimeString = messageObject.getSecretTimeString()) == null) {
            return;
        }
        if (secretTimeString instanceof String) {
            int ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText((String) secretTimeString));
            this.infoWidth = ceil;
            this.infoLayout = new StaticLayout(TextUtils.ellipsize(secretTimeString, Theme.chat_infoPaint, ceil, TextUtils.TruncateAt.END), Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        } else {
            StaticLayout staticLayout = new StaticLayout(secretTimeString, Theme.chat_infoBoldPaint, getMeasuredWidth() > 0 ? getMeasuredWidth() : 9999, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.infoLayout = staticLayout;
            this.infoWidth = staticLayout.getLineCount() > 0 ? (int) this.infoLayout.getLineWidth(0) : 0;
        }
        invalidate();
    }

    /* JADX WARN: Removed duplicated region for block: B:24:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isPhotoDataChanged(MessageObject messageObject) {
        int i;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        String formapMapUrl;
        int i2;
        int i3 = messageObject.type;
        if (i3 == 0 || i3 == 14) {
            return false;
        }
        if (i3 == 4) {
            if (this.currentUrl == null) {
                return true;
            }
            TLRPC$GeoPoint tLRPC$GeoPoint = messageObject.messageOwner.media.geo;
            double d = tLRPC$GeoPoint.lat;
            double d2 = tLRPC$GeoPoint._long;
            if (((int) messageObject.getDialogId()) == 0 && (i2 = SharedConfig.mapPreviewType) != 0) {
                if (i2 == 1) {
                    i = 4;
                } else if (i2 == 3) {
                    i = 1;
                }
                tLRPC$MessageMedia = messageObject.messageOwner.media;
                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
                    int dp = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp2 = AndroidUtilities.dp(195.0f);
                    double d3 = 268435456;
                    Double.isNaN(d3);
                    double d4 = d3 / 3.141592653589793d;
                    double d5 = (d * 3.141592653589793d) / 180.0d;
                    Double.isNaN(d3);
                    double round = Math.round(d3 - ((Math.log((Math.sin(d5) + 1.0d) / (1.0d - Math.sin(d5))) * d4) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                    Double.isNaN(round);
                    Double.isNaN(d3);
                    int i4 = this.currentAccount;
                    float f = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i4, ((1.5707963267948966d - (Math.atan(Math.exp((round - d3) / d4)) * 2.0d)) * 180.0d) / 3.141592653589793d, d2, (int) (dp / f), (int) (dp2 / f), false, 15, i);
                } else if (!TextUtils.isEmpty(tLRPC$MessageMedia.title)) {
                    int dp3 = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp4 = AndroidUtilities.dp(195.0f);
                    int i5 = this.currentAccount;
                    float f2 = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i5, d, d2, (int) (dp3 / f2), (int) (dp4 / f2), true, 15, i);
                } else {
                    int dp5 = this.backgroundWidth - AndroidUtilities.dp(12.0f);
                    int dp6 = AndroidUtilities.dp(195.0f);
                    int i6 = this.currentAccount;
                    float f3 = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i6, d, d2, (int) (dp5 / f3), (int) (dp6 / f3), true, 15, i);
                }
                return !formapMapUrl.equals(this.currentUrl);
            }
            i = -1;
            tLRPC$MessageMedia = messageObject.messageOwner.media;
            if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
            }
            return !formapMapUrl.equals(this.currentUrl);
        }
        TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
        if (tLRPC$PhotoSize == null || (tLRPC$PhotoSize.location instanceof TLRPC$TL_fileLocationUnavailable)) {
            return i3 == 1 || i3 == 20 || i3 == 5 || i3 == 3 || i3 == 8 || messageObject.isAnyKindOfSticker();
        } else if (this.currentMessageObject == null || !this.photoNotSet) {
            return false;
        } else {
            return FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner).exists();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getRepliesCount() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            return this.currentMessagesGroup.messages.get(0).getRepliesCount();
        }
        return this.currentMessageObject.getRepliesCount();
    }

    private ArrayList<TLRPC$Peer> getRecentRepliers() {
        TLRPC$MessageReplies tLRPC$MessageReplies;
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty() && (tLRPC$MessageReplies = this.currentMessagesGroup.messages.get(0).messageOwner.replies) != null) {
            return tLRPC$MessageReplies.recent_repliers;
        }
        TLRPC$MessageReplies tLRPC$MessageReplies2 = this.currentMessageObject.messageOwner.replies;
        if (tLRPC$MessageReplies2 != null) {
            return tLRPC$MessageReplies2.recent_repliers;
        }
        return null;
    }

    public void updateAnimatedEmojis() {
        MessageObject messageObject;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        if (!this.imageReceiversAttachState || (messageObject = this.currentMessageObject) == null) {
            return;
        }
        boolean z = false;
        int cacheTypeForEnterView = messageObject.wasJustSent ? AnimatedEmojiDrawable.getCacheTypeForEnterView() : 0;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && (arrayList = textLayoutBlocks.textLayoutBlocks) != null) {
            this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, (View) this, false, this.animatedEmojiStack, arrayList);
            return;
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, this, (chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent()) ? true : true, this.animatedEmojiStack, this.currentMessageObject.textLayoutBlocks);
    }

    /* JADX WARN: Removed duplicated region for block: B:84:0x00da  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isUserDataChanged() {
        TLRPC$FileLocation tLRPC$FileLocation;
        TLRPC$FileLocation tLRPC$FileLocation2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str;
        String forwardedName;
        String str2;
        MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$ChatPhoto tLRPC$ChatPhoto;
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto;
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 == null || this.hasLinkPreview || MessageObject.getMedia(messageObject3.messageOwner) == null || !(MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage instanceof TLRPC$TL_webPage)) {
            MessageObject messageObject4 = this.currentMessageObject;
            if (messageObject4 != null && (this.currentUser != null || this.currentChat != null)) {
                int i = this.lastSendState;
                TLRPC$Message tLRPC$Message = messageObject4.messageOwner;
                if (i != tLRPC$Message.send_state || this.lastDeleteDate != tLRPC$Message.destroyTime || this.lastViewsCount != tLRPC$Message.views || this.lastRepliesCount != getRepliesCount() || this.lastReactions != this.currentMessageObject.messageOwner.reactions) {
                    return true;
                }
                updateCurrentUserAndChat();
                if (this.isAvatarVisible) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null && (tLRPC$UserProfilePhoto = tLRPC$User.photo) != null) {
                        tLRPC$FileLocation = tLRPC$UserProfilePhoto.photo_small;
                    } else {
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        if (tLRPC$Chat != null && (tLRPC$ChatPhoto = tLRPC$Chat.photo) != null) {
                            tLRPC$FileLocation = tLRPC$ChatPhoto.photo_small;
                        }
                    }
                    if (this.replyTextLayout != null && (messageObject2 = this.currentMessageObject.replyMessageObject) != null && (!this.isThreadChat || (tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from) == null || tLRPC$MessageFwdHeader.channel_post == 0)) {
                        return true;
                    }
                    tLRPC$FileLocation2 = this.currentPhoto;
                    if ((tLRPC$FileLocation2 != null && tLRPC$FileLocation != null) || ((tLRPC$FileLocation2 != null && tLRPC$FileLocation == null) || (tLRPC$FileLocation2 != null && (tLRPC$FileLocation2.local_id != tLRPC$FileLocation.local_id || tLRPC$FileLocation2.volume_id != tLRPC$FileLocation.volume_id)))) {
                        return true;
                    }
                    if (this.replyNameLayout != null || (messageObject = this.currentMessageObject.replyMessageObject) == null || (tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40)) == null || this.currentMessageObject.replyMessageObject.isAnyKindOfSticker()) {
                        tLRPC$PhotoSize = null;
                    }
                    if (this.currentReplyPhoto != null && tLRPC$PhotoSize != null) {
                        return true;
                    }
                    String authorName = isNeedAuthorName() ? getAuthorName() : null;
                    str = this.currentNameString;
                    if ((str != null && authorName != null) || ((str != null && authorName == null) || (str != null && !str.equals(authorName)))) {
                        return true;
                    }
                    if (this.drawForwardedName && this.currentMessageObject.needDrawForwarded()) {
                        forwardedName = this.currentMessageObject.getForwardedName();
                        str2 = this.currentForwardNameString;
                        if (str2 == null || forwardedName == null) {
                            if (str2 == null && forwardedName == null) {
                                return true;
                            }
                            return str2 == null && !str2.equals(forwardedName);
                        }
                        return true;
                    }
                }
                tLRPC$FileLocation = null;
                if (this.replyTextLayout != null) {
                }
                tLRPC$FileLocation2 = this.currentPhoto;
                if (tLRPC$FileLocation2 != null) {
                }
                if (this.replyNameLayout != null) {
                }
                tLRPC$PhotoSize = null;
                if (this.currentReplyPhoto != null) {
                }
                if (isNeedAuthorName()) {
                }
                str = this.currentNameString;
                if (str != null) {
                }
                if (this.drawForwardedName) {
                    forwardedName = this.currentMessageObject.getForwardedName();
                    str2 = this.currentForwardNameString;
                    if (str2 == null) {
                    }
                    if (str2 == null) {
                    }
                    if (str2 == null) {
                    }
                }
            }
            return false;
        }
        return true;
    }

    public ImageReceiver getPhotoImage() {
        return this.photoImage;
    }

    public ImageReceiver getPhotoImage(int i) {
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            return groupMedia.getPhotoImage(i);
        }
        return this.photoImage;
    }

    public ImageReceiver getBlurredPhotoImage() {
        return this.blurredPhotoImage;
    }

    public int getNoSoundIconCenterX() {
        return this.noSoundCenterX;
    }

    public int getForwardNameCenterX() {
        float f;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.id == 0) {
            f = this.avatarImage.getCenterX();
        } else {
            f = this.forwardNameX + this.forwardNameCenterX;
        }
        return (int) f;
    }

    public int getChecksX() {
        return this.layoutWidth - AndroidUtilities.dp(SharedConfig.bubbleRadius >= 10 ? 27.3f : 25.3f);
    }

    public int getChecksY() {
        float f;
        int intrinsicHeight;
        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
            f = this.drawTimeY;
            intrinsicHeight = getThemedDrawable("drawableMsgStickerCheck").getIntrinsicHeight();
        } else {
            f = this.drawTimeY;
            intrinsicHeight = Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight();
        }
        return (int) (f - intrinsicHeight);
    }

    public void overrideAudioVisualizer(AudioVisualizerDrawable audioVisualizerDrawable) {
        this.overridenAudioVisualizer = audioVisualizerDrawable;
    }

    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    public TLRPC$Chat getCurrentChat() {
        return this.currentChat;
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didUpdatePremiumGiftStickers);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
        cancelShakeAnimation();
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onDetachedFromWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onDetachedFromWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onDetachedFromWindow();
                i++;
            }
        }
        this.attachedToWindow = false;
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            groupMedia.onDetachedFromWindow();
        }
        this.avatarImage.onDetachedFromWindow();
        checkImageReceiversAttachState();
        if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
            ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
            this.addedForTest = false;
        }
        StickerSetLinkIcon stickerSetLinkIcon = this.stickerSetIcons;
        if (stickerSetLinkIcon != null) {
            stickerSetLinkIcon.detach(this);
        }
        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellDetached(this);
        }
        this.transitionParams.onDetach();
        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
            Theme.getCurrentAudiVisualizerDrawable().setParentView(null);
        }
        ValueAnimator valueAnimator = this.statusDrawableAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.statusDrawableAnimator.cancel();
        }
        this.reactionsLayoutInBubble.onDetachFromWindow();
        this.statusDrawableAnimationInProgress = false;
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.detach();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.onDetached(this);
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
        if (swapAnimatedEmojiDrawable != null) {
            swapAnimatedEmojiDrawable.detach();
        }
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        if (spoilerEffect2 != null) {
            spoilerEffect2.detach(this);
        }
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.onDetachedFromWindow();
        }
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didUpdatePremiumGiftStickers);
        NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            messageObject.animateComments = false;
        }
        MessageObject messageObject2 = this.messageObjectToSet;
        if (messageObject2 != null) {
            messageObject2.animateComments = false;
            setMessageContent(messageObject2, this.groupedMessagesToSet, this.bottomNearToSet, this.topNearToSet);
            this.messageObjectToSet = null;
            this.groupedMessagesToSet = null;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onAttachedToWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onAttachedToWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onAttachedToWindow();
                i++;
            }
        }
        this.attachedToWindow = true;
        this.animationOffsetX = 0.0f;
        this.slidingOffsetX = 0.0f;
        this.checkBoxTranslation = 0;
        updateTranslation();
        this.avatarImage.setParentView((View) getParent());
        this.avatarImage.onAttachedToWindow();
        checkImageReceiversAttachState();
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null) {
            setAvatar(messageObject3);
        }
        int i2 = this.documentAttachType;
        if (i2 == 4 && this.autoPlayingMedia) {
            boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            this.animatingNoSoundPlaying = isPlayingMessage;
            this.animatingNoSoundProgress = isPlayingMessage ? 0.0f : 1.0f;
            this.animatingNoSound = 0;
        } else {
            this.animatingNoSoundPlaying = false;
            this.animatingNoSoundProgress = 0.0f;
            this.animatingDrawVideoImageButtonProgress = ((i2 == 4 || i2 == 2) && this.drawVideoSize) ? 1.0f : 0.0f;
        }
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellAttached(this);
        }
        if (this.documentAttachType == 5) {
            this.toSeekBarProgress = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? 1.0f : 0.0f;
        }
        this.reactionsLayoutInBubble.onAttachToWindow();
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.attach();
        }
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            groupMedia.onAttachedToWindow();
        }
        updateFlagSecure();
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null && messageObject4.type == 20 && this.unlockLayout != null) {
            invalidate();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.onAttached(this);
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
        if (swapAnimatedEmojiDrawable != null) {
            swapAnimatedEmojiDrawable.attach();
        }
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        if (spoilerEffect2 != null) {
            if (spoilerEffect2.destroyed) {
                SpoilerEffect2 makeSpoilerEffect = makeSpoilerEffect();
                this.mediaSpoilerEffect2 = makeSpoilerEffect;
                Integer num = this.mediaSpoilerEffect2Index;
                if (num != null) {
                    makeSpoilerEffect.reassignAttach(this, num.intValue());
                }
            } else {
                spoilerEffect2.attach(this);
            }
        }
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.onAttachedToWindow();
        }
        StickerSetLinkIcon stickerSetLinkIcon = this.stickerSetIcons;
        if (stickerSetLinkIcon != null) {
            stickerSetLinkIcon.attach(this);
        }
    }

    protected SpoilerEffect2 makeSpoilerEffect() {
        return SpoilerEffect2.getInstance(this);
    }

    public void copySpoilerEffect2AttachIndexFrom(ChatMessageCell chatMessageCell) {
        SpoilerEffect2 spoilerEffect2;
        if (chatMessageCell == null || (spoilerEffect2 = chatMessageCell.mediaSpoilerEffect2) == null) {
            return;
        }
        int attachIndex = spoilerEffect2.getAttachIndex(chatMessageCell);
        this.mediaSpoilerEffect2Index = Integer.valueOf(attachIndex);
        SpoilerEffect2 spoilerEffect22 = this.mediaSpoilerEffect2;
        if (spoilerEffect22 != null) {
            spoilerEffect22.reassignAttach(this, attachIndex);
        }
    }

    private void checkImageReceiversAttachState() {
        boolean z = this.attachedToWindow;
        boolean z2 = false;
        if (z != this.imageReceiversAttachState) {
            this.imageReceiversAttachState = z;
            if (z) {
                this.radialProgress.onAttachedToWindow();
                this.videoRadialProgress.onAttachedToWindow();
                if (this.pollAvatarImages != null) {
                    int i = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                        if (i >= imageReceiverArr.length) {
                            break;
                        }
                        imageReceiverArr[i].onAttachedToWindow();
                        i++;
                    }
                }
                if (this.commentAvatarImages != null) {
                    int i2 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr2 = this.commentAvatarImages;
                        if (i2 >= imageReceiverArr2.length) {
                            break;
                        }
                        imageReceiverArr2[i2].onAttachedToWindow();
                        i2++;
                    }
                }
                this.giveawayMessageCell.onAttachedToWindow();
                this.giveawayResultsMessageCell.onAttachedToWindow();
                this.replyImageReceiver.onAttachedToWindow();
                this.locationImageReceiver.onAttachedToWindow();
                this.blurredPhotoImage.onAttachedToWindow();
                if (this.photoImage.onAttachedToWindow()) {
                    if (this.drawPhotoImage) {
                        updateButtonState(false, false, false);
                    }
                } else {
                    updateButtonState(false, false, false);
                }
                this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
                this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                updateAnimatedEmojis();
            } else {
                this.radialProgress.onDetachedFromWindow();
                this.videoRadialProgress.onDetachedFromWindow();
                if (this.pollAvatarImages != null) {
                    int i3 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                        if (i3 >= imageReceiverArr3.length) {
                            break;
                        }
                        imageReceiverArr3[i3].onDetachedFromWindow();
                        i3++;
                    }
                }
                if (this.commentAvatarImages != null) {
                    int i4 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr4 = this.commentAvatarImages;
                        if (i4 >= imageReceiverArr4.length) {
                            break;
                        }
                        imageReceiverArr4[i4].onDetachedFromWindow();
                        i4++;
                    }
                }
                this.replyImageReceiver.onDetachedFromWindow();
                this.locationImageReceiver.onDetachedFromWindow();
                this.photoImage.onDetachedFromWindow();
                this.blurredPhotoImage.onDetachedFromWindow();
                this.giveawayMessageCell.onDetachedFromWindow();
                this.giveawayResultsMessageCell.onDetachedFromWindow();
                AnimatedEmojiSpan.release(this, this.animatedEmojiDescriptionStack);
                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                AnimatedEmojiSpan.release(this, this.animatedEmojiStack);
            }
        }
        if (this.attachedToWindow && (this.visibleOnScreen || !this.shouldCheckVisibleOnScreen)) {
            z2 = true;
        }
        if (z2 != this.imageReceiversVisibleState) {
            this.imageReceiversVisibleState = z2;
            if (z2) {
                fileAttach(true, this.currentMessageObject);
            } else {
                fileDetach(this.currentMessageObject);
            }
        }
    }

    private void fileAttach(boolean z, MessageObject messageObject) {
        ImageReceiver imageReceiver = this.photoImage;
        if (imageReceiver != null) {
            imageReceiver.setFileLoadingPriority(1);
        }
        if (z && messageObject != null && (this.isRoundVideo || messageObject.isVideo())) {
            checkVideoPlayback(true, null);
        }
        if (messageObject == null || messageObject.mediaExists) {
            return;
        }
        int canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(messageObject.messageOwner);
        TLRPC$Document document = messageObject.getDocument();
        if (MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document, true) || MessageObject.isGifDocument(document) || MessageObject.isRoundVideoDocument(document) || this.isSmallImage) {
            return;
        }
        TLRPC$PhotoSize closestPhotoSizeWithSize = document == null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize()) : null;
        if (canDownloadMedia == 2 || (canDownloadMedia == 1 && messageObject.isVideo())) {
            if (canDownloadMedia != 2 && document != null && !messageObject.shouldEncryptPhotoOrVideo() && messageObject.canStreamVideo()) {
                FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 1, 0);
            }
        } else if (canDownloadMedia != 0) {
            if (document != null) {
                FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 1, ((MessageObject.isVideoDocument(document) || messageObject.isVoiceOnce() || messageObject.isRoundOnce()) && messageObject.shouldEncryptPhotoOrVideo()) ? 2 : 0);
            } else if (closestPhotoSizeWithSize != null) {
                FileLoader.getInstance(this.currentAccount).loadFile(ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.photoThumbsObject), messageObject, null, 1, messageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
            }
        }
        if (z) {
            updateButtonState(false, false, false);
        }
    }

    private void fileDetach(MessageObject messageObject) {
        ImageReceiver imageReceiver = this.photoImage;
        if (imageReceiver != null) {
            imageReceiver.setFileLoadingPriority(0);
        }
        cancelLoading(messageObject);
    }

    private void cancelLoading(MessageObject messageObject) {
        if (messageObject == null || messageObject.mediaExists || messageObject.putInDownloadsStore || DownloadController.getInstance(this.currentAccount).isDownloading(messageObject.messageOwner.id) || PhotoViewer.getInstance().isVisible()) {
            return;
        }
        TLRPC$Document document = messageObject.getDocument();
        if (MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document, true) || MessageObject.isGifDocument(document) || MessageObject.isRoundVideoDocument(document)) {
            return;
        }
        if (document != null) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(document);
            return;
        }
        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
        if (closestPhotoSizeWithSize != null) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(closestPhotoSizeWithSize);
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(3:(5:2171|2172|(4:2177|(1:2179)(1:2186)|(1:2181)(1:2185)|(1:2183)(1:2184))(1:2174)|2175|2176)|2168|2169) */
    /* JADX WARN: Code restructure failed: missing block: B:1101:0x0f46, code lost:
        if (r1.isSmall != false) goto L3553;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1124:0x0fb5, code lost:
        if ((r87.currentPosition.flags & 2) == 0) goto L3590;
     */
    /* JADX WARN: Code restructure failed: missing block: B:112:0x013c, code lost:
        if (r15.isLinkedToChat(r87.linkedChatId) == false) goto L5342;
     */
    /* JADX WARN: Code restructure failed: missing block: B:115:0x0141, code lost:
        if (r87.isRepliesChat == false) goto L57;
     */
    /* JADX WARN: Code restructure failed: missing block: B:117:0x0144, code lost:
        r6 = r87.currentPosition;
     */
    /* JADX WARN: Code restructure failed: missing block: B:118:0x0146, code lost:
        if (r6 == null) goto L5328;
     */
    /* JADX WARN: Code restructure failed: missing block: B:120:0x0149, code lost:
        r7 = r6.siblingHeights;
     */
    /* JADX WARN: Code restructure failed: missing block: B:121:0x014b, code lost:
        if (r7 == null) goto L5337;
     */
    /* JADX WARN: Code restructure failed: missing block: B:124:0x0151, code lost:
        if ((r6.flags & 8) != 0) goto L5328;
     */
    /* JADX WARN: Code restructure failed: missing block: B:126:0x0154, code lost:
        if (r7 != null) goto L5340;
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x015a, code lost:
        if ((r6.flags & 4) == 0) goto L5328;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1433:0x14d9, code lost:
        if (r2.revealingMediaSpoilers != false) goto L3425;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1708:0x1ba4, code lost:
        if ((r12.flags & 2) == 0) goto L3633;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2113:0x2658, code lost:
        if (r2 >= (r87.timeWidth + org.telegram.messenger.AndroidUtilities.dp((!r88.isOutOwner() ? 0 : 20) + 20))) goto L4157;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2585:0x2fa2, code lost:
        if (r88.getSavedDialogId() == org.telegram.messenger.UserObject.ANONYMOUS) goto L4546;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4124:0x4d9b, code lost:
        if (r15 == 32) goto L2373;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4128:0x4da1, code lost:
        if (r0 == false) goto L2325;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4224:0x4e9d, code lost:
        if (r2 == null) goto L2431;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4354:0x518e, code lost:
        if (r87.isSmallImage != false) goto L2203;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4380:0x51f2, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4381:0x51f3, code lost:
        r66 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4555:0x55c0, code lost:
        if (r87.isSmallImage != false) goto L2075;
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x00a4, code lost:
        if (r87.isPlayingRound == ((!org.telegram.messenger.MediaController.getInstance().isPlayingMessage(r87.currentMessageObject) || (r3 = r87.delegate) == null || r3.keyboardIsOpened()) ? false : true)) goto L33;
     */
    /* JADX WARN: Code restructure failed: missing block: B:5249:0x621d, code lost:
        if (r0.revealingMediaSpoilers != false) goto L1560;
     */
    /* JADX WARN: Code restructure failed: missing block: B:5402:0x65b7, code lost:
        if (r0.equals("donate") == false) goto L1478;
     */
    /* JADX WARN: Code restructure failed: missing block: B:5495:0x67cf, code lost:
        if (r0.isDocument() == false) goto L439;
     */
    /* JADX WARN: Code restructure failed: missing block: B:6210:0x72be, code lost:
        if (r11.button.url.startsWith("tg://resolve") != false) goto L715;
     */
    /* JADX WARN: Code restructure failed: missing block: B:755:0x0ab2, code lost:
        if (r88.getSavedDialogId() == org.telegram.messenger.UserObject.ANONYMOUS) goto L4361;
     */
    /* JADX WARN: Code restructure failed: missing block: B:761:0x0ac0, code lost:
        if (r88.isSupergroup() == false) goto L4368;
     */
    /* JADX WARN: Code restructure failed: missing block: B:770:0x0ad5, code lost:
        if (r15.messageOwner.fwd_from.from_id != null) goto L4365;
     */
    /* JADX WARN: Multi-variable search skipped. Vars limit reached: 8899 (expected less than 5000) */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1017:0x0dd7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1023:0x0de7  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0123  */
    /* JADX WARN: Removed duplicated region for block: B:1030:0x0e04  */
    /* JADX WARN: Removed duplicated region for block: B:1037:0x0e2f  */
    /* JADX WARN: Removed duplicated region for block: B:1046:0x0e4b  */
    /* JADX WARN: Removed duplicated region for block: B:1047:0x0e53  */
    /* JADX WARN: Removed duplicated region for block: B:1057:0x0e80  */
    /* JADX WARN: Removed duplicated region for block: B:1060:0x0ead  */
    /* JADX WARN: Removed duplicated region for block: B:1061:0x0eb0  */
    /* JADX WARN: Removed duplicated region for block: B:1064:0x0eb8  */
    /* JADX WARN: Removed duplicated region for block: B:1065:0x0eba  */
    /* JADX WARN: Removed duplicated region for block: B:1069:0x0ec7  */
    /* JADX WARN: Removed duplicated region for block: B:1072:0x0ece  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x012c  */
    /* JADX WARN: Removed duplicated region for block: B:1084:0x0f06  */
    /* JADX WARN: Removed duplicated region for block: B:108:0x012f  */
    /* JADX WARN: Removed duplicated region for block: B:1091:0x0f27  */
    /* JADX WARN: Removed duplicated region for block: B:1109:0x0f60  */
    /* JADX WARN: Removed duplicated region for block: B:1111:0x0f6d  */
    /* JADX WARN: Removed duplicated region for block: B:1248:0x11b3  */
    /* JADX WARN: Removed duplicated region for block: B:1255:0x11c4  */
    /* JADX WARN: Removed duplicated region for block: B:1262:0x11dc  */
    /* JADX WARN: Removed duplicated region for block: B:1318:0x12f5 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1319:0x12f7  */
    /* JADX WARN: Removed duplicated region for block: B:1330:0x1310  */
    /* JADX WARN: Removed duplicated region for block: B:1337:0x1325  */
    /* JADX WARN: Removed duplicated region for block: B:1343:0x1344 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0164  */
    /* JADX WARN: Removed duplicated region for block: B:1354:0x1382  */
    /* JADX WARN: Removed duplicated region for block: B:1358:0x1397  */
    /* JADX WARN: Removed duplicated region for block: B:1365:0x13f6  */
    /* JADX WARN: Removed duplicated region for block: B:1379:0x1412  */
    /* JADX WARN: Removed duplicated region for block: B:1380:0x1428  */
    /* JADX WARN: Removed duplicated region for block: B:1391:0x1484  */
    /* JADX WARN: Removed duplicated region for block: B:1401:0x1495 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:140:0x0173  */
    /* JADX WARN: Removed duplicated region for block: B:1410:0x14a5 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1420:0x14bb  */
    /* JADX WARN: Removed duplicated region for block: B:1426:0x14c9  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:1466:0x152b  */
    /* JADX WARN: Removed duplicated region for block: B:1467:0x152e  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x018a  */
    /* JADX WARN: Removed duplicated region for block: B:1470:0x1536  */
    /* JADX WARN: Removed duplicated region for block: B:1517:0x1643  */
    /* JADX WARN: Removed duplicated region for block: B:1554:0x1708  */
    /* JADX WARN: Removed duplicated region for block: B:1564:0x171f  */
    /* JADX WARN: Removed duplicated region for block: B:1586:0x17a0  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x01ac  */
    /* JADX WARN: Removed duplicated region for block: B:1594:0x17dc  */
    /* JADX WARN: Removed duplicated region for block: B:1614:0x1857  */
    /* JADX WARN: Removed duplicated region for block: B:1615:0x185a  */
    /* JADX WARN: Removed duplicated region for block: B:1619:0x187c  */
    /* JADX WARN: Removed duplicated region for block: B:1622:0x1888  */
    /* JADX WARN: Removed duplicated region for block: B:1624:0x188c  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x01b7  */
    /* JADX WARN: Removed duplicated region for block: B:1677:0x1a6d  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x01c4  */
    /* JADX WARN: Removed duplicated region for block: B:1732:0x1bf7  */
    /* JADX WARN: Removed duplicated region for block: B:1734:0x1bfd  */
    /* JADX WARN: Removed duplicated region for block: B:1740:0x1c13  */
    /* JADX WARN: Removed duplicated region for block: B:1762:0x1c46  */
    /* JADX WARN: Removed duplicated region for block: B:1766:0x1c56  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x01ce  */
    /* JADX WARN: Removed duplicated region for block: B:1874:0x1ec2  */
    /* JADX WARN: Removed duplicated region for block: B:1875:0x1ec5  */
    /* JADX WARN: Removed duplicated region for block: B:1878:0x1ed7  */
    /* JADX WARN: Removed duplicated region for block: B:1918:0x2062  */
    /* JADX WARN: Removed duplicated region for block: B:1936:0x20fb  */
    /* JADX WARN: Removed duplicated region for block: B:1942:0x210f  */
    /* JADX WARN: Removed duplicated region for block: B:1943:0x2136  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x01f7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1985:0x2290  */
    /* JADX WARN: Removed duplicated region for block: B:1986:0x2294  */
    /* JADX WARN: Removed duplicated region for block: B:2003:0x22ec  */
    /* JADX WARN: Removed duplicated region for block: B:2007:0x2303  */
    /* JADX WARN: Removed duplicated region for block: B:2064:0x2433  */
    /* JADX WARN: Removed duplicated region for block: B:2121:0x2673  */
    /* JADX WARN: Removed duplicated region for block: B:2159:0x288d  */
    /* JADX WARN: Removed duplicated region for block: B:2160:0x2899  */
    /* JADX WARN: Removed duplicated region for block: B:2173:0x28b7  */
    /* JADX WARN: Removed duplicated region for block: B:2186:0x28fb  */
    /* JADX WARN: Removed duplicated region for block: B:2187:0x28fe  */
    /* JADX WARN: Removed duplicated region for block: B:2191:0x2918  */
    /* JADX WARN: Removed duplicated region for block: B:2210:0x297b  */
    /* JADX WARN: Removed duplicated region for block: B:2222:0x29dc  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x023d  */
    /* JADX WARN: Removed duplicated region for block: B:228:0x0252  */
    /* JADX WARN: Removed duplicated region for block: B:2369:0x2c5a  */
    /* JADX WARN: Removed duplicated region for block: B:236:0x026c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:2373:0x2c71  */
    /* JADX WARN: Removed duplicated region for block: B:2389:0x2cb9  */
    /* JADX WARN: Removed duplicated region for block: B:2400:0x2ccf  */
    /* JADX WARN: Removed duplicated region for block: B:240:0x0277  */
    /* JADX WARN: Removed duplicated region for block: B:2413:0x2cf4  */
    /* JADX WARN: Removed duplicated region for block: B:2417:0x2d0f  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x0279  */
    /* JADX WARN: Removed duplicated region for block: B:2421:0x2d1f  */
    /* JADX WARN: Removed duplicated region for block: B:2434:0x2d4d  */
    /* JADX WARN: Removed duplicated region for block: B:2438:0x2d65  */
    /* JADX WARN: Removed duplicated region for block: B:2443:0x2d72  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x0285  */
    /* JADX WARN: Removed duplicated region for block: B:245:0x0288  */
    /* JADX WARN: Removed duplicated region for block: B:2462:0x2db0  */
    /* JADX WARN: Removed duplicated region for block: B:2463:0x2db2  */
    /* JADX WARN: Removed duplicated region for block: B:2467:0x2dc7  */
    /* JADX WARN: Removed duplicated region for block: B:2471:0x2dd1  */
    /* JADX WARN: Removed duplicated region for block: B:2483:0x2df8  */
    /* JADX WARN: Removed duplicated region for block: B:2484:0x2dfa  */
    /* JADX WARN: Removed duplicated region for block: B:248:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:2510:0x2e55  */
    /* JADX WARN: Removed duplicated region for block: B:2543:0x2ec3  */
    /* JADX WARN: Removed duplicated region for block: B:2550:0x2ef9  */
    /* JADX WARN: Removed duplicated region for block: B:2555:0x2f04  */
    /* JADX WARN: Removed duplicated region for block: B:2559:0x2f0f  */
    /* JADX WARN: Removed duplicated region for block: B:255:0x02a3 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:2609:0x2fdd  */
    /* JADX WARN: Removed duplicated region for block: B:2613:0x300d  */
    /* JADX WARN: Removed duplicated region for block: B:2619:0x3038  */
    /* JADX WARN: Removed duplicated region for block: B:2620:0x303b  */
    /* JADX WARN: Removed duplicated region for block: B:2623:0x3043  */
    /* JADX WARN: Removed duplicated region for block: B:2624:0x3045  */
    /* JADX WARN: Removed duplicated region for block: B:2628:0x3056  */
    /* JADX WARN: Removed duplicated region for block: B:2678:0x3151  */
    /* JADX WARN: Removed duplicated region for block: B:2685:0x3172  */
    /* JADX WARN: Removed duplicated region for block: B:2689:0x3197  */
    /* JADX WARN: Removed duplicated region for block: B:2693:0x31b0  */
    /* JADX WARN: Removed duplicated region for block: B:2702:0x31c7  */
    /* JADX WARN: Removed duplicated region for block: B:2706:0x31e3  */
    /* JADX WARN: Removed duplicated region for block: B:2710:0x31f1  */
    /* JADX WARN: Removed duplicated region for block: B:2714:0x3202  */
    /* JADX WARN: Removed duplicated region for block: B:2740:0x327b  */
    /* JADX WARN: Removed duplicated region for block: B:2748:0x3292  */
    /* JADX WARN: Removed duplicated region for block: B:2753:0x329f  */
    /* JADX WARN: Removed duplicated region for block: B:2754:0x32a1  */
    /* JADX WARN: Removed duplicated region for block: B:2758:0x32ae  */
    /* JADX WARN: Removed duplicated region for block: B:2759:0x32bc  */
    /* JADX WARN: Removed duplicated region for block: B:2762:0x32d3  */
    /* JADX WARN: Removed duplicated region for block: B:2775:0x32f6  */
    /* JADX WARN: Removed duplicated region for block: B:278:0x02d8  */
    /* JADX WARN: Removed duplicated region for block: B:282:0x02f4 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:287:0x0300  */
    /* JADX WARN: Removed duplicated region for block: B:292:0x030d  */
    /* JADX WARN: Removed duplicated region for block: B:299:0x0329  */
    /* JADX WARN: Removed duplicated region for block: B:303:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:3083:0x39a7  */
    /* JADX WARN: Removed duplicated region for block: B:3092:0x39e2  */
    /* JADX WARN: Removed duplicated region for block: B:3101:0x3a12  */
    /* JADX WARN: Removed duplicated region for block: B:3102:0x3a1c  */
    /* JADX WARN: Removed duplicated region for block: B:318:0x034d  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x036e  */
    /* JADX WARN: Removed duplicated region for block: B:3342:0x3eeb  */
    /* JADX WARN: Removed duplicated region for block: B:3343:0x3ef4  */
    /* JADX WARN: Removed duplicated region for block: B:3346:0x3f01  */
    /* JADX WARN: Removed duplicated region for block: B:3356:0x3f49  */
    /* JADX WARN: Removed duplicated region for block: B:3366:0x3f65  */
    /* JADX WARN: Removed duplicated region for block: B:3367:0x3f69  */
    /* JADX WARN: Removed duplicated region for block: B:3397:0x4032  */
    /* JADX WARN: Removed duplicated region for block: B:3401:0x4042  */
    /* JADX WARN: Removed duplicated region for block: B:3409:0x4054  */
    /* JADX WARN: Removed duplicated region for block: B:3417:0x4089  */
    /* JADX WARN: Removed duplicated region for block: B:3423:0x40b4  */
    /* JADX WARN: Removed duplicated region for block: B:346:0x03d5  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x03e8  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x0404  */
    /* JADX WARN: Removed duplicated region for block: B:3737:0x4666 A[Catch: Exception -> 0x471f, TryCatch #15 {Exception -> 0x471f, blocks: (B:3737:0x4666, B:3740:0x466e, B:3743:0x4676, B:3750:0x46a9, B:3757:0x46d0, B:3764:0x46f7, B:3760:0x46d9, B:3763:0x46e6, B:3753:0x46b2, B:3756:0x46bf, B:3746:0x468f, B:3749:0x469a, B:3766:0x4722, B:3773:0x475b, B:3780:0x4782, B:3787:0x47a9, B:3789:0x47b0, B:3791:0x47bc, B:3790:0x47b7, B:3783:0x478b, B:3786:0x4798, B:3776:0x4764, B:3779:0x4771, B:3769:0x473b, B:3772:0x4746, B:3735:0x4662), top: B:6251:0x4662 }] */
    /* JADX WARN: Removed duplicated region for block: B:373:0x041b  */
    /* JADX WARN: Removed duplicated region for block: B:3766:0x4722 A[Catch: Exception -> 0x471f, TryCatch #15 {Exception -> 0x471f, blocks: (B:3737:0x4666, B:3740:0x466e, B:3743:0x4676, B:3750:0x46a9, B:3757:0x46d0, B:3764:0x46f7, B:3760:0x46d9, B:3763:0x46e6, B:3753:0x46b2, B:3756:0x46bf, B:3746:0x468f, B:3749:0x469a, B:3766:0x4722, B:3773:0x475b, B:3780:0x4782, B:3787:0x47a9, B:3789:0x47b0, B:3791:0x47bc, B:3790:0x47b7, B:3783:0x478b, B:3786:0x4798, B:3776:0x4764, B:3779:0x4771, B:3769:0x473b, B:3772:0x4746, B:3735:0x4662), top: B:6251:0x4662 }] */
    /* JADX WARN: Removed duplicated region for block: B:379:0x043a  */
    /* JADX WARN: Removed duplicated region for block: B:3864:0x4965  */
    /* JADX WARN: Removed duplicated region for block: B:3868:0x496f  */
    /* JADX WARN: Removed duplicated region for block: B:3887:0x49ca  */
    /* JADX WARN: Removed duplicated region for block: B:3888:0x49d1  */
    /* JADX WARN: Removed duplicated region for block: B:3895:0x4a2b  */
    /* JADX WARN: Removed duplicated region for block: B:3903:0x4a48  */
    /* JADX WARN: Removed duplicated region for block: B:3909:0x4a7f  */
    /* JADX WARN: Removed duplicated region for block: B:3910:0x4a90  */
    /* JADX WARN: Removed duplicated region for block: B:3914:0x4a9f  */
    /* JADX WARN: Removed duplicated region for block: B:3932:0x4ae7  */
    /* JADX WARN: Removed duplicated region for block: B:3936:0x4af7  */
    /* JADX WARN: Removed duplicated region for block: B:3946:0x4b23  */
    /* JADX WARN: Removed duplicated region for block: B:3950:0x4b36  */
    /* JADX WARN: Removed duplicated region for block: B:3957:0x4b47  */
    /* JADX WARN: Removed duplicated region for block: B:3965:0x4b62  */
    /* JADX WARN: Removed duplicated region for block: B:3969:0x4b77  */
    /* JADX WARN: Removed duplicated region for block: B:3973:0x4b8c  */
    /* JADX WARN: Removed duplicated region for block: B:3986:0x4bb7  */
    /* JADX WARN: Removed duplicated region for block: B:3990:0x4bc0  */
    /* JADX WARN: Removed duplicated region for block: B:4000:0x4be7  */
    /* JADX WARN: Removed duplicated region for block: B:4034:0x4c9f A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4035:0x4ca1  */
    /* JADX WARN: Removed duplicated region for block: B:4041:0x4cb2  */
    /* JADX WARN: Removed duplicated region for block: B:4042:0x4cb6  */
    /* JADX WARN: Removed duplicated region for block: B:4048:0x4cc9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4053:0x4cdf  */
    /* JADX WARN: Removed duplicated region for block: B:4057:0x4cf9  */
    /* JADX WARN: Removed duplicated region for block: B:4092:0x4d60  */
    /* JADX WARN: Removed duplicated region for block: B:4093:0x4d63  */
    /* JADX WARN: Removed duplicated region for block: B:4133:0x4dab  */
    /* JADX WARN: Removed duplicated region for block: B:4144:0x4dc4  */
    /* JADX WARN: Removed duplicated region for block: B:4145:0x4dc7  */
    /* JADX WARN: Removed duplicated region for block: B:4165:0x4ded  */
    /* JADX WARN: Removed duplicated region for block: B:4172:0x4df9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4249:0x4f25  */
    /* JADX WARN: Removed duplicated region for block: B:425:0x04b8  */
    /* JADX WARN: Removed duplicated region for block: B:4282:0x4fe8  */
    /* JADX WARN: Removed duplicated region for block: B:4301:0x503c  */
    /* JADX WARN: Removed duplicated region for block: B:4305:0x504d  */
    /* JADX WARN: Removed duplicated region for block: B:4309:0x5057  */
    /* JADX WARN: Removed duplicated region for block: B:4313:0x5064 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4318:0x50ad  */
    /* JADX WARN: Removed duplicated region for block: B:432:0x0500  */
    /* JADX WARN: Removed duplicated region for block: B:4411:0x52bd  */
    /* JADX WARN: Removed duplicated region for block: B:4412:0x52c1  */
    /* JADX WARN: Removed duplicated region for block: B:444:0x051c  */
    /* JADX WARN: Removed duplicated region for block: B:4457:0x53bf  */
    /* JADX WARN: Removed duplicated region for block: B:4463:0x53ce A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4467:0x53d7  */
    /* JADX WARN: Removed duplicated region for block: B:4468:0x53d8 A[Catch: Exception -> 0x5429, TRY_LEAVE, TryCatch #5 {Exception -> 0x5429, blocks: (B:4465:0x53d3, B:4479:0x5408, B:4486:0x542c, B:4487:0x5441, B:4488:0x544d, B:4490:0x5455, B:4491:0x547a, B:4504:0x549b, B:4494:0x5484, B:4503:0x5493, B:4483:0x540f, B:4468:0x53d8), top: B:6231:0x53d3 }] */
    /* JADX WARN: Removed duplicated region for block: B:4479:0x5408 A[Catch: Exception -> 0x5429, TRY_ENTER, TryCatch #5 {Exception -> 0x5429, blocks: (B:4465:0x53d3, B:4479:0x5408, B:4486:0x542c, B:4487:0x5441, B:4488:0x544d, B:4490:0x5455, B:4491:0x547a, B:4504:0x549b, B:4494:0x5484, B:4503:0x5493, B:4483:0x540f, B:4468:0x53d8), top: B:6231:0x53d3 }] */
    /* JADX WARN: Removed duplicated region for block: B:448:0x054d  */
    /* JADX WARN: Removed duplicated region for block: B:4491:0x547a A[Catch: Exception -> 0x5429, TryCatch #5 {Exception -> 0x5429, blocks: (B:4465:0x53d3, B:4479:0x5408, B:4486:0x542c, B:4487:0x5441, B:4488:0x544d, B:4490:0x5455, B:4491:0x547a, B:4504:0x549b, B:4494:0x5484, B:4503:0x5493, B:4483:0x540f, B:4468:0x53d8), top: B:6231:0x53d3 }] */
    /* JADX WARN: Removed duplicated region for block: B:4508:0x54bd  */
    /* JADX WARN: Removed duplicated region for block: B:4509:0x54c1  */
    /* JADX WARN: Removed duplicated region for block: B:4521:0x54f6  */
    /* JADX WARN: Removed duplicated region for block: B:4525:0x5500  */
    /* JADX WARN: Removed duplicated region for block: B:4528:0x550a A[Catch: Exception -> 0x54fd, TryCatch #28 {Exception -> 0x54fd, blocks: (B:4522:0x54f8, B:4526:0x5504, B:4528:0x550a, B:4537:0x5523, B:4541:0x552e, B:4543:0x5561, B:4544:0x5592, B:4546:0x559a, B:4547:0x55a9, B:4557:0x55c4, B:4558:0x55c6, B:4554:0x55be, B:4540:0x552a, B:4535:0x551f, B:4542:0x553f), top: B:6275:0x54f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:4532:0x5517  */
    /* JADX WARN: Removed duplicated region for block: B:4539:0x5527  */
    /* JADX WARN: Removed duplicated region for block: B:4540:0x552a A[Catch: Exception -> 0x54fd, TryCatch #28 {Exception -> 0x54fd, blocks: (B:4522:0x54f8, B:4526:0x5504, B:4528:0x550a, B:4537:0x5523, B:4541:0x552e, B:4543:0x5561, B:4544:0x5592, B:4546:0x559a, B:4547:0x55a9, B:4557:0x55c4, B:4558:0x55c6, B:4554:0x55be, B:4540:0x552a, B:4535:0x551f, B:4542:0x553f), top: B:6275:0x54f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:4547:0x55a9 A[Catch: Exception -> 0x54fd, TryCatch #28 {Exception -> 0x54fd, blocks: (B:4522:0x54f8, B:4526:0x5504, B:4528:0x550a, B:4537:0x5523, B:4541:0x552e, B:4543:0x5561, B:4544:0x5592, B:4546:0x559a, B:4547:0x55a9, B:4557:0x55c4, B:4558:0x55c6, B:4554:0x55be, B:4540:0x552a, B:4535:0x551f, B:4542:0x553f), top: B:6275:0x54f8 }] */
    /* JADX WARN: Removed duplicated region for block: B:455:0x055f  */
    /* JADX WARN: Removed duplicated region for block: B:4565:0x55e0  */
    /* JADX WARN: Removed duplicated region for block: B:4573:0x55f2  */
    /* JADX WARN: Removed duplicated region for block: B:4576:0x55f9  */
    /* JADX WARN: Removed duplicated region for block: B:4604:0x5661  */
    /* JADX WARN: Removed duplicated region for block: B:4605:0x5664  */
    /* JADX WARN: Removed duplicated region for block: B:4609:0x5677  */
    /* JADX WARN: Removed duplicated region for block: B:461:0x056c  */
    /* JADX WARN: Removed duplicated region for block: B:469:0x0587  */
    /* JADX WARN: Removed duplicated region for block: B:473:0x05e7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:481:0x05fa  */
    /* JADX WARN: Removed duplicated region for block: B:4886:0x5c04  */
    /* JADX WARN: Removed duplicated region for block: B:491:0x0653  */
    /* JADX WARN: Removed duplicated region for block: B:4935:0x5cc8  */
    /* JADX WARN: Removed duplicated region for block: B:495:0x0660  */
    /* JADX WARN: Removed duplicated region for block: B:4968:0x5d16  */
    /* JADX WARN: Removed duplicated region for block: B:4998:0x5d80  */
    /* JADX WARN: Removed duplicated region for block: B:5002:0x5d88  */
    /* JADX WARN: Removed duplicated region for block: B:5005:0x5d9c  */
    /* JADX WARN: Removed duplicated region for block: B:502:0x0670  */
    /* JADX WARN: Removed duplicated region for block: B:5031:0x5de2  */
    /* JADX WARN: Removed duplicated region for block: B:5035:0x5ded  */
    /* JADX WARN: Removed duplicated region for block: B:5041:0x5dfd  */
    /* JADX WARN: Removed duplicated region for block: B:5042:0x5dff  */
    /* JADX WARN: Removed duplicated region for block: B:5045:0x5e0e  */
    /* JADX WARN: Removed duplicated region for block: B:5048:0x5e15  */
    /* JADX WARN: Removed duplicated region for block: B:5055:0x5e24  */
    /* JADX WARN: Removed duplicated region for block: B:5058:0x5e33  */
    /* JADX WARN: Removed duplicated region for block: B:5067:0x5e47  */
    /* JADX WARN: Removed duplicated region for block: B:506:0x067b A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:5071:0x5e5a  */
    /* JADX WARN: Removed duplicated region for block: B:5083:0x5e8d  */
    /* JADX WARN: Removed duplicated region for block: B:5088:0x5e99  */
    /* JADX WARN: Removed duplicated region for block: B:5091:0x5e9e  */
    /* JADX WARN: Removed duplicated region for block: B:5092:0x5ea0  */
    /* JADX WARN: Removed duplicated region for block: B:5096:0x5eb9  */
    /* JADX WARN: Removed duplicated region for block: B:5100:0x5ec9  */
    /* JADX WARN: Removed duplicated region for block: B:5111:0x5f02  */
    /* JADX WARN: Removed duplicated region for block: B:5112:0x5f14  */
    /* JADX WARN: Removed duplicated region for block: B:5120:0x5f46  */
    /* JADX WARN: Removed duplicated region for block: B:5127:0x5faa  */
    /* JADX WARN: Removed duplicated region for block: B:5135:0x5fba  */
    /* JADX WARN: Removed duplicated region for block: B:515:0x06b0  */
    /* JADX WARN: Removed duplicated region for block: B:524:0x06c2  */
    /* JADX WARN: Removed duplicated region for block: B:5335:0x64a4  */
    /* JADX WARN: Removed duplicated region for block: B:534:0x06d5  */
    /* JADX WARN: Removed duplicated region for block: B:5359:0x6513  */
    /* JADX WARN: Removed duplicated region for block: B:5363:0x652b  */
    /* JADX WARN: Removed duplicated region for block: B:5379:0x6570  */
    /* JADX WARN: Removed duplicated region for block: B:5409:0x661b  */
    /* JADX WARN: Removed duplicated region for block: B:5414:0x662c  */
    /* JADX WARN: Removed duplicated region for block: B:5419:0x6644  */
    /* JADX WARN: Removed duplicated region for block: B:5422:0x66b2  */
    /* JADX WARN: Removed duplicated region for block: B:5423:0x66b4  */
    /* JADX WARN: Removed duplicated region for block: B:5427:0x66c2  */
    /* JADX WARN: Removed duplicated region for block: B:5438:0x66fd  */
    /* JADX WARN: Removed duplicated region for block: B:5446:0x6728  */
    /* JADX WARN: Removed duplicated region for block: B:5453:0x6748  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x06fa  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x0702  */
    /* JADX WARN: Removed duplicated region for block: B:5477:0x6781  */
    /* JADX WARN: Removed duplicated region for block: B:5478:0x6784  */
    /* JADX WARN: Removed duplicated region for block: B:5483:0x67a9  */
    /* JADX WARN: Removed duplicated region for block: B:5488:0x67b9  */
    /* JADX WARN: Removed duplicated region for block: B:5494:0x67cb  */
    /* JADX WARN: Removed duplicated region for block: B:5500:0x67db  */
    /* JADX WARN: Removed duplicated region for block: B:5526:0x681c  */
    /* JADX WARN: Removed duplicated region for block: B:5531:0x682a  */
    /* JADX WARN: Removed duplicated region for block: B:5544:0x684d  */
    /* JADX WARN: Removed duplicated region for block: B:5545:0x684f  */
    /* JADX WARN: Removed duplicated region for block: B:5560:0x6881  */
    /* JADX WARN: Removed duplicated region for block: B:5561:0x6884  */
    /* JADX WARN: Removed duplicated region for block: B:5577:0x68c4  */
    /* JADX WARN: Removed duplicated region for block: B:559:0x072a  */
    /* JADX WARN: Removed duplicated region for block: B:5602:0x693e  */
    /* JADX WARN: Removed duplicated region for block: B:5625:0x69a1 A[Catch: Exception -> 0x69b7, TryCatch #3 {Exception -> 0x69b7, blocks: (B:5616:0x6964, B:5623:0x6996, B:5625:0x69a1, B:5635:0x69c6, B:5639:0x69d3, B:5649:0x6a00, B:5655:0x6a0c, B:5661:0x6a1b, B:5665:0x6a29, B:5671:0x6a45, B:5674:0x6a53, B:5668:0x6a40, B:5664:0x6a25, B:5658:0x6a11, B:5652:0x6a07, B:5642:0x69e4, B:5648:0x69ee, B:5645:0x69e9, B:5638:0x69cb, B:5628:0x69aa, B:5632:0x69ba, B:5619:0x696b, B:5622:0x6970), top: B:6227:0x6964 }] */
    /* JADX WARN: Removed duplicated region for block: B:5632:0x69ba A[Catch: Exception -> 0x69b7, TryCatch #3 {Exception -> 0x69b7, blocks: (B:5616:0x6964, B:5623:0x6996, B:5625:0x69a1, B:5635:0x69c6, B:5639:0x69d3, B:5649:0x6a00, B:5655:0x6a0c, B:5661:0x6a1b, B:5665:0x6a29, B:5671:0x6a45, B:5674:0x6a53, B:5668:0x6a40, B:5664:0x6a25, B:5658:0x6a11, B:5652:0x6a07, B:5642:0x69e4, B:5648:0x69ee, B:5645:0x69e9, B:5638:0x69cb, B:5628:0x69aa, B:5632:0x69ba, B:5619:0x696b, B:5622:0x6970), top: B:6227:0x6964 }] */
    /* JADX WARN: Removed duplicated region for block: B:5634:0x69c4  */
    /* JADX WARN: Removed duplicated region for block: B:5635:0x69c6 A[Catch: Exception -> 0x69b7, TryCatch #3 {Exception -> 0x69b7, blocks: (B:5616:0x6964, B:5623:0x6996, B:5625:0x69a1, B:5635:0x69c6, B:5639:0x69d3, B:5649:0x6a00, B:5655:0x6a0c, B:5661:0x6a1b, B:5665:0x6a29, B:5671:0x6a45, B:5674:0x6a53, B:5668:0x6a40, B:5664:0x6a25, B:5658:0x6a11, B:5652:0x6a07, B:5642:0x69e4, B:5648:0x69ee, B:5645:0x69e9, B:5638:0x69cb, B:5628:0x69aa, B:5632:0x69ba, B:5619:0x696b, B:5622:0x6970), top: B:6227:0x6964 }] */
    /* JADX WARN: Removed duplicated region for block: B:5681:0x6a6f  */
    /* JADX WARN: Removed duplicated region for block: B:5694:0x6aec A[Catch: Exception -> 0x6aea, TRY_LEAVE, TryCatch #6 {Exception -> 0x6aea, blocks: (B:5688:0x6a9b, B:5689:0x6acc, B:5691:0x6ad4, B:5694:0x6aec), top: B:6233:0x6a9b }] */
    /* JADX WARN: Removed duplicated region for block: B:5699:0x6b07  */
    /* JADX WARN: Removed duplicated region for block: B:5700:0x6b08 A[Catch: Exception -> 0x6b57, TryCatch #18 {Exception -> 0x6b57, blocks: (B:5697:0x6b01, B:5701:0x6b11, B:5702:0x6b49, B:5706:0x6b54, B:5709:0x6b59, B:5712:0x6b69, B:5714:0x6b6d, B:5715:0x6b75, B:5700:0x6b08), top: B:6256:0x6b01 }] */
    /* JADX WARN: Removed duplicated region for block: B:5705:0x6b53  */
    /* JADX WARN: Removed duplicated region for block: B:5706:0x6b54 A[Catch: Exception -> 0x6b57, TryCatch #18 {Exception -> 0x6b57, blocks: (B:5697:0x6b01, B:5701:0x6b11, B:5702:0x6b49, B:5706:0x6b54, B:5709:0x6b59, B:5712:0x6b69, B:5714:0x6b6d, B:5715:0x6b75, B:5700:0x6b08), top: B:6256:0x6b01 }] */
    /* JADX WARN: Removed duplicated region for block: B:5709:0x6b59 A[Catch: Exception -> 0x6b57, TryCatch #18 {Exception -> 0x6b57, blocks: (B:5697:0x6b01, B:5701:0x6b11, B:5702:0x6b49, B:5706:0x6b54, B:5709:0x6b59, B:5712:0x6b69, B:5714:0x6b6d, B:5715:0x6b75, B:5700:0x6b08), top: B:6256:0x6b01 }] */
    /* JADX WARN: Removed duplicated region for block: B:572:0x0746  */
    /* JADX WARN: Removed duplicated region for block: B:5730:0x6ba0  */
    /* JADX WARN: Removed duplicated region for block: B:5737:0x6bbc  */
    /* JADX WARN: Removed duplicated region for block: B:5741:0x6bce  */
    /* JADX WARN: Removed duplicated region for block: B:5755:0x6bf5  */
    /* JADX WARN: Removed duplicated region for block: B:5756:0x6bf7  */
    /* JADX WARN: Removed duplicated region for block: B:5760:0x6c17  */
    /* JADX WARN: Removed duplicated region for block: B:5764:0x6c25  */
    /* JADX WARN: Removed duplicated region for block: B:5784:0x6c7d  */
    /* JADX WARN: Removed duplicated region for block: B:5789:0x6c99  */
    /* JADX WARN: Removed duplicated region for block: B:5790:0x6c9b  */
    /* JADX WARN: Removed duplicated region for block: B:5797:0x6ca7  */
    /* JADX WARN: Removed duplicated region for block: B:579:0x076e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:5805:0x6cc4  */
    /* JADX WARN: Removed duplicated region for block: B:5810:0x6cd1  */
    /* JADX WARN: Removed duplicated region for block: B:5811:0x6cd4  */
    /* JADX WARN: Removed duplicated region for block: B:5816:0x6ce8  */
    /* JADX WARN: Removed duplicated region for block: B:5819:0x6cee  */
    /* JADX WARN: Removed duplicated region for block: B:5832:0x6d0e  */
    /* JADX WARN: Removed duplicated region for block: B:5836:0x6d27  */
    /* JADX WARN: Removed duplicated region for block: B:5837:0x6d2a  */
    /* JADX WARN: Removed duplicated region for block: B:5852:0x6d5f  */
    /* JADX WARN: Removed duplicated region for block: B:5864:0x6d99  */
    /* JADX WARN: Removed duplicated region for block: B:5865:0x6d9b  */
    /* JADX WARN: Removed duplicated region for block: B:5871:0x6dbd  */
    /* JADX WARN: Removed duplicated region for block: B:5872:0x6dc3  */
    /* JADX WARN: Removed duplicated region for block: B:5882:0x6df9  */
    /* JADX WARN: Removed duplicated region for block: B:5966:0x6ea9  */
    /* JADX WARN: Removed duplicated region for block: B:5967:0x6eab  */
    /* JADX WARN: Removed duplicated region for block: B:5971:0x6eb2  */
    /* JADX WARN: Removed duplicated region for block: B:5979:0x6ec4  */
    /* JADX WARN: Removed duplicated region for block: B:5980:0x6ec6  */
    /* JADX WARN: Removed duplicated region for block: B:5984:0x6ecc  */
    /* JADX WARN: Removed duplicated region for block: B:5991:0x6edd  */
    /* JADX WARN: Removed duplicated region for block: B:6004:0x6eff  */
    /* JADX WARN: Removed duplicated region for block: B:6009:0x6f11  */
    /* JADX WARN: Removed duplicated region for block: B:6016:0x6f26  */
    /* JADX WARN: Removed duplicated region for block: B:601:0x07a3  */
    /* JADX WARN: Removed duplicated region for block: B:606:0x07af A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:6076:0x6fda  */
    /* JADX WARN: Removed duplicated region for block: B:6093:0x7015  */
    /* JADX WARN: Removed duplicated region for block: B:6100:0x7026  */
    /* JADX WARN: Removed duplicated region for block: B:6111:0x704e  */
    /* JADX WARN: Removed duplicated region for block: B:6112:0x7050  */
    /* JADX WARN: Removed duplicated region for block: B:6117:0x7064  */
    /* JADX WARN: Removed duplicated region for block: B:612:0x07ed  */
    /* JADX WARN: Removed duplicated region for block: B:613:0x07ef  */
    /* JADX WARN: Removed duplicated region for block: B:6178:0x7226  */
    /* JADX WARN: Removed duplicated region for block: B:6187:0x7260  */
    /* JADX WARN: Removed duplicated region for block: B:6188:0x7261 A[Catch: Exception -> 0x723a, TryCatch #25 {Exception -> 0x723a, blocks: (B:6185:0x7246, B:6213:0x72c3, B:6188:0x7261, B:6194:0x727b, B:6197:0x7284, B:6200:0x728d, B:6203:0x7296, B:6206:0x72a3, B:6209:0x72b2, B:6191:0x726e), top: B:6269:0x7246 }] */
    /* JADX WARN: Removed duplicated region for block: B:618:0x07fa  */
    /* JADX WARN: Removed duplicated region for block: B:6205:0x72a2  */
    /* JADX WARN: Removed duplicated region for block: B:6206:0x72a3 A[Catch: Exception -> 0x723a, TryCatch #25 {Exception -> 0x723a, blocks: (B:6185:0x7246, B:6213:0x72c3, B:6188:0x7261, B:6194:0x727b, B:6197:0x7284, B:6200:0x728d, B:6203:0x7296, B:6206:0x72a3, B:6209:0x72b2, B:6191:0x726e), top: B:6269:0x7246 }] */
    /* JADX WARN: Removed duplicated region for block: B:621:0x080b  */
    /* JADX WARN: Removed duplicated region for block: B:6225:0x526f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:6247:0x50b9 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:6264:0x3074 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:6283:0x10de A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:6284:0x023b A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:6286:0x057f A[EDGE_INSN: B:6286:0x057f->B:466:0x057f ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:665:0x08fe  */
    /* JADX WARN: Removed duplicated region for block: B:666:0x0901  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x090e  */
    /* JADX WARN: Removed duplicated region for block: B:673:0x094c  */
    /* JADX WARN: Removed duplicated region for block: B:678:0x0957  */
    /* JADX WARN: Removed duplicated region for block: B:681:0x0961  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x0967  */
    /* JADX WARN: Removed duplicated region for block: B:687:0x09a5  */
    /* JADX WARN: Removed duplicated region for block: B:693:0x09d0  */
    /* JADX WARN: Removed duplicated region for block: B:857:0x0bf8  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x00f9  */
    /* JADX WARN: Removed duplicated region for block: B:860:0x0c03  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x00fb  */
    /* JADX WARN: Removed duplicated region for block: B:886:0x0c40  */
    /* JADX WARN: Removed duplicated region for block: B:894:0x0c6e  */
    /* JADX WARN: Removed duplicated region for block: B:897:0x0c77  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x00ff  */
    /* JADX WARN: Removed duplicated region for block: B:929:0x0cee  */
    /* JADX WARN: Removed duplicated region for block: B:940:0x0d05  */
    /* JADX WARN: Removed duplicated region for block: B:947:0x0d18  */
    /* JADX WARN: Removed duplicated region for block: B:958:0x0d30  */
    /* JADX WARN: Removed duplicated region for block: B:977:0x0d60  */
    /* JADX WARN: Removed duplicated region for block: B:986:0x0d6f A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:998:0x0d8b  */
    /* JADX WARN: Type inference failed for: r0v1381, types: [org.telegram.ui.Components.RadialProgress2] */
    /* JADX WARN: Type inference failed for: r0v1407, types: [org.telegram.ui.Components.RadialProgress2] */
    /* JADX WARN: Type inference failed for: r0v1488, types: [org.telegram.messenger.FileLoader] */
    /* JADX WARN: Type inference failed for: r0v1494, types: [org.telegram.ui.Components.AnimatedFloat] */
    /* JADX WARN: Type inference failed for: r0v1497, types: [org.telegram.ui.Components.AnimatedFloat] */
    /* JADX WARN: Type inference failed for: r0v728, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r12v238 */
    /* JADX WARN: Type inference failed for: r12v239 */
    /* JADX WARN: Type inference failed for: r12v92, types: [boolean] */
    /* JADX WARN: Type inference failed for: r14v107, types: [boolean] */
    /* JADX WARN: Type inference failed for: r14v245, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r14v339 */
    /* JADX WARN: Type inference failed for: r14v340 */
    /* JADX WARN: Type inference failed for: r15v21, types: [org.telegram.ui.Components.spoilers.SpoilerEffect2, android.graphics.Bitmap] */
    /* JADX WARN: Type inference failed for: r15v215 */
    /* JADX WARN: Type inference failed for: r15v216 */
    /* JADX WARN: Type inference failed for: r18v10 */
    /* JADX WARN: Type inference failed for: r18v11 */
    /* JADX WARN: Type inference failed for: r18v16 */
    /* JADX WARN: Type inference failed for: r18v60 */
    /* JADX WARN: Type inference failed for: r1v780 */
    /* JADX WARN: Type inference failed for: r1v781, types: [int] */
    /* JADX WARN: Type inference failed for: r1v783 */
    /* JADX WARN: Type inference failed for: r1v784, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v788 */
    /* JADX WARN: Type inference failed for: r2v1289 */
    /* JADX WARN: Type inference failed for: r2v1290 */
    /* JADX WARN: Type inference failed for: r2v195, types: [byte[]] */
    /* JADX WARN: Type inference failed for: r2v230 */
    /* JADX WARN: Type inference failed for: r2v232 */
    /* JADX WARN: Type inference failed for: r2v411, types: [org.telegram.tgnet.TLRPC$InputStickerSet] */
    /* JADX WARN: Type inference failed for: r2v634, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r33v11 */
    /* JADX WARN: Type inference failed for: r33v15 */
    /* JADX WARN: Type inference failed for: r33v17 */
    /* JADX WARN: Type inference failed for: r33v8 */
    /* JADX WARN: Type inference failed for: r3v291, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r3v294, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r3v295, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r3v297, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r3v576, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r3v660, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r3v664 */
    /* JADX WARN: Type inference failed for: r3v686 */
    /* JADX WARN: Type inference failed for: r3v690 */
    /* JADX WARN: Type inference failed for: r3v691 */
    /* JADX WARN: Type inference failed for: r51v12, types: [android.text.TextPaint] */
    /* JADX WARN: Type inference failed for: r5v272, types: [org.telegram.messenger.ImageReceiver] */
    /* JADX WARN: Type inference failed for: r5v363, types: [org.telegram.messenger.ImageLocation] */
    /* JADX WARN: Type inference failed for: r62v1 */
    /* JADX WARN: Type inference failed for: r62v2, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r62v3 */
    /* JADX WARN: Type inference failed for: r64v1 */
    /* JADX WARN: Type inference failed for: r64v2, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r64v3 */
    /* JADX WARN: Type inference failed for: r64v4 */
    /* JADX WARN: Type inference failed for: r64v5, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r64v6 */
    /* JADX WARN: Type inference failed for: r6v214, types: [org.telegram.messenger.ImageLoader] */
    /* JADX WARN: Type inference failed for: r6v617 */
    /* JADX WARN: Type inference failed for: r6v618, types: [org.telegram.tgnet.TLRPC$Document, java.lang.Object, org.telegram.tgnet.TLRPC$PhotoSize] */
    /* JADX WARN: Type inference failed for: r6v652 */
    /* JADX WARN: Type inference failed for: r6v695, types: [org.telegram.messenger.WebFile, android.text.StaticLayout, java.lang.String] */
    /* JADX WARN: Type inference failed for: r6v719 */
    /* JADX WARN: Type inference failed for: r6v742 */
    /* JADX WARN: Type inference failed for: r6v743 */
    /* JADX WARN: Type inference failed for: r78v0 */
    /* JADX WARN: Type inference failed for: r78v1, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r78v2 */
    /* JADX WARN: Type inference failed for: r87v0, types: [android.view.View, org.telegram.ui.Cells.ChatMessageCell, org.telegram.ui.Cells.BaseCell, org.telegram.messenger.DownloadController$FileDownloadProgressListener] */
    /* JADX WARN: Type inference failed for: r9v19, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r9v32 */
    /* JADX WARN: Type inference failed for: r9v579 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageContent(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        boolean z3;
        boolean z4;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        StickerSetLinkIcon stickerSetLinkIcon;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject.GroupedMessagePosition position;
        MessageObject.GroupedMessages groupedMessages3;
        boolean needDrawAvatar;
        boolean z10;
        GroupMedia groupMedia;
        ButtonBounce buttonBounce;
        ExpiredStoryView expiredStoryView;
        boolean z11;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        MessageObject.GroupedMessages groupedMessages4;
        boolean isLinkedToChat;
        int i;
        MessageObject messageObject2;
        String string;
        boolean z12;
        CharSequence charSequence;
        String replace;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        MessageObject messageObject3;
        boolean z13;
        int i2;
        boolean z14;
        boolean z15;
        int dp;
        ReactionsLayoutInBubble reactionsLayoutInBubble2;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        int min;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        int min2;
        MessageObject.GroupedMessages groupedMessages5;
        boolean z16;
        String string2;
        int i3;
        float f;
        ArrayList arrayList;
        boolean z17;
        byte[] bArr;
        String string3;
        PollButton pollButton;
        int i4;
        int i5;
        int i6;
        boolean z18;
        CharSequence ellipsize;
        boolean z19;
        int dp2;
        CharSequence charSequence2;
        int i7;
        char c;
        int max;
        ReactionsLayoutInBubble reactionsLayoutInBubble3;
        int dp3;
        ReactionsLayoutInBubble reactionsLayoutInBubble4;
        int dp4;
        int dp5;
        char c2;
        boolean z20;
        boolean z21;
        MessageObject.GroupedMessages groupedMessages6;
        MessageObject.GroupedMessagePosition groupedMessagePosition4;
        boolean z22;
        MessageObject.GroupedMessagePosition groupedMessagePosition5;
        MessageObject messageObject4;
        int i8;
        boolean z23;
        float f2;
        int max2;
        int dp6;
        int dp7;
        int i9;
        int i10;
        char c3;
        int i11;
        StaticLayout staticLayout;
        int dp8;
        boolean z24;
        boolean z25;
        ?? r15;
        MessageObject.GroupedMessagePosition groupedMessagePosition6;
        int i12;
        int i13;
        int dp9;
        SpoilerEffect2 spoilerEffect2;
        MessageObject.GroupedMessagePosition groupedMessagePosition7;
        MessageObject.GroupedMessagePosition groupedMessagePosition8;
        int i14;
        int i15;
        int dp10;
        MessageObject messageObject5;
        TLRPC$Message tLRPC$Message;
        int i16;
        int i17;
        int i18;
        int i19;
        Drawable drawable;
        int i20;
        boolean z26;
        int i21;
        ReactionsLayoutInBubble reactionsLayoutInBubble5;
        int i22;
        int i23;
        float minTabletSide;
        float f3;
        int dp11;
        Bitmap bitmap;
        MessageObject messageObject6;
        StaticLayout[] staticLayoutArr;
        Bitmap bitmap2;
        int i24;
        int i25;
        float minTabletSide2;
        float f4;
        int i26;
        int i27;
        int i28;
        BitmapDrawable bitmapDrawable;
        Bitmap bitmap3;
        String str;
        MessageObject messageObject7;
        ?? r18;
        int i29;
        MessageObject messageObject8;
        Bitmap bitmap4;
        int i30;
        int i31;
        ReactionsLayoutInBubble reactionsLayoutInBubble6;
        int i32;
        SvgHelper.SvgDrawable svgDrawable;
        boolean z27;
        int i33;
        boolean z28;
        int i34;
        boolean z29;
        BitmapDrawable bitmapDrawable2;
        int i35;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        TLRPC$Document document;
        int i36;
        int i37;
        MessageObject.GroupedMessagePosition groupedMessagePosition9;
        int dp12;
        boolean z30;
        MessageObject.GroupedMessagePosition groupedMessagePosition10;
        MessageObject.GroupedMessagePosition groupedMessagePosition11;
        float[] fArr;
        int round;
        boolean z31;
        boolean z32;
        int dp13;
        int i38;
        int i39;
        int i40;
        int i41;
        CharSequence charSequence3;
        int i42;
        int i43;
        int i44;
        MessageObject messageObject9;
        MessageObject.GroupedMessagePosition groupedMessagePosition12;
        int i45;
        int i46;
        double ceil;
        int i47;
        int dp14;
        int additionalWidthForPosition;
        boolean z33;
        boolean z34;
        int i48;
        boolean z35;
        float f5;
        MessageObject messageObject10;
        int i49;
        int i50;
        float f6;
        int i51;
        double ceil2;
        int i52;
        int i53;
        double ceil3;
        ?? r14;
        ?? r12;
        int i54;
        int max3;
        ReactionsLayoutInBubble reactionsLayoutInBubble7;
        int layoutFactCheck;
        int i55;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        int measureText;
        int i56;
        Object obj;
        ?? forObject;
        TLRPC$PhotoSize tLRPC$PhotoSize3;
        int i57;
        TLRPC$PhotoSize tLRPC$PhotoSize4;
        MessageObject messageObject11;
        boolean z36;
        MessageObject messageObject12;
        MessageObject messageObject13;
        char c4;
        int i58;
        boolean z37;
        TLRPC$VideoSize documentVideoThumb;
        TLRPC$PhotoSize tLRPC$PhotoSize5;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        int i59;
        int dp15;
        MessageObject messageObject14;
        boolean z38;
        int minTabletSide3;
        TLRPC$PhotoSize tLRPC$PhotoSize6;
        TLRPC$PhotoSize tLRPC$PhotoSize7;
        int i60;
        int i61;
        int i62;
        int i63;
        int minTabletSide4;
        int i64;
        int i65;
        int minTabletSide5;
        int dp16;
        int i66;
        boolean z39;
        boolean z40;
        String str2;
        Uri parse;
        TLRPC$Document tLRPC$Document;
        ?? r1;
        int i67;
        TLRPC$ThemeSettings tLRPC$ThemeSettings;
        TL_stories$StoryItem tL_stories$StoryItem;
        boolean z41;
        ArrayList<TLRPC$Document> arrayList3;
        boolean z42;
        TLRPC$TL_webPageAttributeStickerSet tLRPC$TL_webPageAttributeStickerSet;
        int i68;
        boolean z43;
        int i69;
        int i70;
        TL_stories$StoryItem tL_stories$StoryItem2;
        boolean z44;
        TLRPC$Document tLRPC$Document2;
        int i71;
        MessageObject messageObject15;
        MessageTopicButton messageTopicButton;
        int max4;
        MessageObject messageObject16;
        int maxMessageTextWidth;
        String string4;
        String string5;
        String charSequence4;
        String str3;
        String str4;
        CharSequence charSequence5;
        int documentDuration;
        TLRPC$Document tLRPC$Document3;
        TLRPC$Photo tLRPC$Photo;
        String str5;
        boolean z45;
        int i72;
        boolean z46;
        TLRPC$Photo tLRPC$Photo2;
        TLRPC$Document tLRPC$Document4;
        int i73;
        boolean z47;
        String str6;
        int i74;
        String str7;
        boolean z48;
        String str8;
        String str9;
        String str10;
        WebFile webFile;
        TL_stories$StoryItem tL_stories$StoryItem3;
        ArrayList<TLRPC$Document> arrayList4;
        String str11;
        String string6;
        CharSequence charSequence6;
        TLRPC$Document tLRPC$Document5;
        int i75;
        int i76;
        String string7;
        MessageObject messageObject17;
        WebFile webFile2;
        TLRPC$Document tLRPC$Document6;
        TLRPC$Photo tLRPC$Photo3;
        String str12;
        int i77;
        int i78;
        int i79;
        StaticLayout staticLayout2;
        int max5;
        int width;
        int i80;
        boolean z49;
        int i81;
        boolean z50;
        String str13;
        int i82;
        int i83;
        MessageObject messageObject18;
        boolean z51;
        CharSequence charSequence7;
        int i84;
        int i85;
        int i86;
        int i87;
        boolean z52;
        String str14;
        int i88;
        int i89;
        TLRPC$Document tLRPC$Document7;
        TLRPC$Photo tLRPC$Photo4;
        TL_stories$StoryItem tL_stories$StoryItem4;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$PhotoSize tLRPC$PhotoSize8;
        TLRPC$Document tLRPC$Document8;
        WebFile webFile3;
        int i90;
        int i91;
        int i92;
        boolean z53;
        boolean z54;
        int i93;
        int i94;
        int i95;
        int i96;
        int max6;
        TLRPC$PhotoSize tLRPC$PhotoSize9;
        int i97;
        int i98;
        int i99;
        int i100;
        int i101;
        int i102;
        int i103;
        int i104;
        int i105;
        int i106;
        boolean z55;
        boolean z56;
        TLRPC$User user;
        boolean z57;
        boolean canDownloadMedia;
        boolean z58;
        int i107;
        int minTabletSide6;
        int i108;
        boolean z59;
        String upperCase;
        int i109;
        float f7;
        TLRPC$PhotoSize tLRPC$PhotoSize10;
        WebFile webFile4;
        WebFile webFile5;
        boolean z60;
        BitmapDrawable bitmapDrawable3;
        boolean z61;
        WebFile webFile6;
        int i110;
        String str15;
        String str16;
        int i111;
        TL_stories$StoryItem tL_stories$StoryItem5;
        TLRPC$User tLRPC$User;
        int dp17;
        CharSequence createExpiredStoryString;
        String str17;
        TLRPC$Document tLRPC$Document9;
        TLRPC$Photo tLRPC$Photo5;
        String str18;
        TLRPC$Document tLRPC$Document10;
        CharSequence charSequence8;
        int i112;
        int documentDuration2;
        boolean z62;
        TLRPC$MessageMedia tLRPC$MessageMedia2;
        String str19;
        int i113;
        int i114;
        String str20;
        int i115;
        String str21;
        TLRPC$Document themeDocument;
        int i116;
        int i117;
        TLRPC$Photo tLRPC$Photo6;
        boolean z63;
        TLRPC$MessageMedia media;
        TLRPC$Document tLRPC$Document11;
        int i118;
        int i119;
        int minTabletSide7;
        int dp18;
        boolean z64;
        int measuredWidth;
        int size;
        int minTabletSide8;
        int dp19;
        TLRPC$Peer tLRPC$Peer;
        ?? r3;
        int i120;
        int minTabletSide9;
        int dp20;
        int dp21;
        int i121;
        MessageObject.TextLayoutBlocks textLayoutBlocks2;
        int i122;
        int i123;
        int i124;
        int dp22;
        MessageObject.TextLayoutBlocks textLayoutBlocks3;
        Float valueOf;
        Float f8;
        char c5;
        int i125;
        CharSequence voiceTranscription;
        String str22;
        MessageObject messageObject19;
        int i126;
        int i127;
        boolean z65;
        int i128;
        int i129;
        boolean z66;
        boolean z67;
        MessageObject.GroupedMessagePosition groupedMessagePosition13;
        float f9;
        ?? r6;
        StickerSetLinkIcon stickerSetLinkIcon2;
        MessageObject.TextLayoutBlocks textLayoutBlocks4;
        int dp23;
        int i130;
        int i131;
        int i132;
        MessageObject messageObject20;
        ArrayList<BotButton> arrayList5;
        int i133;
        int i134;
        int dp24;
        StringBuilder sb;
        StringBuilder sb2;
        HashMap hashMap;
        int i135;
        BotButton botButton;
        String str23;
        int i136;
        String string8;
        Uri parse2;
        boolean z68;
        boolean z69;
        String str24;
        int minTabletSide10;
        MessageObject messageObject21;
        boolean z70;
        MessageObject.GroupedMessagePosition groupedMessagePosition14;
        int repliesCount;
        String string9;
        int i137;
        AnimatedNumberLayout animatedNumberLayout;
        AnimatedNumberLayout animatedNumberLayout2;
        String formatPluralString;
        TLRPC$User user2;
        TLRPC$Chat tLRPC$Chat;
        int i138;
        ArrayList<TLRPC$Peer> arrayList6;
        int i139;
        ArrayList<MessageObject.TextLayoutBlock> arrayList7;
        int i140;
        Drawable[] drawableArr;
        TLRPC$Message tLRPC$Message2;
        MessageObject.GroupedMessagePosition groupedMessagePosition15;
        TLRPC$Message tLRPC$Message3;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition16;
        MessageObject.GroupedMessagePosition groupedMessagePosition17;
        ?? r62;
        ?? r32;
        TranscribeButton transcribeButton;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        LoadingDrawable loadingDrawable;
        TLRPC$Message tLRPC$Message4;
        ArrayList<TLRPC$TL_pollAnswerVoters> arrayList8;
        TLRPC$Poll tLRPC$Poll;
        int i141;
        boolean z71;
        TLRPC$Poll tLRPC$Poll2;
        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll;
        TLRPC$PollResults tLRPC$PollResults;
        int size2;
        int i142;
        TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters;
        int i143;
        String str25;
        MessageObject messageObject22;
        int i144;
        MessageObject messageObject23 = messageObject;
        boolean z72 = false;
        boolean z73 = false;
        boolean z74 = true;
        boolean z75 = true;
        if (messageObject.checkLayout() || (this.currentPosition != null && this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.currentMessageObject = null;
        }
        messageObject23.isOutOwnerCached = null;
        boolean z76 = this.lastWidth != getParentWidth();
        this.lastHeight = AndroidUtilities.displaySize.y;
        this.lastWidth = getParentWidth();
        this.isRoundVideo = messageObject.isRoundVideo();
        this.mediaSpoilerRevealProgress = 0.0f;
        TLRPC$Message tLRPC$Message5 = !messageObject.hasValidReplyMessageObject() ? null : messageObject23.replyMessageObject.messageOwner;
        MessageObject messageObject24 = this.currentMessageObject;
        boolean z77 = messageObject24 == null || messageObject24.getId() != messageObject.getId();
        if (this.currentMessageObject == messageObject23 && !messageObject23.forceUpdate) {
            if (this.isRoundVideo) {
            }
            z3 = false;
            MessageObject messageObject25 = this.currentMessageObject;
            z4 = (messageObject25 != null && messageObject25.getId() == messageObject.getId() && this.lastSendState == 3 && messageObject.isSent()) || !((this.currentMessageObject != messageObject23 || (!isUserDataChanged() && !this.photoNotSet)) && this.lastPostAuthor == messageObject23.messageOwner.post_author && this.wasPinned == this.isPinned && tLRPC$Message5 == this.lastReplyMessage && messageObject23.translated == this.lastTranslated);
            z5 = groupedMessages != this.currentMessagesGroup;
            if (!z77 && (messageObject22 = this.currentMessageObject) != null) {
                i144 = messageObject23.stableId;
                messageObject23.copyStableParams(messageObject22);
                if (this.currentMessageObject.isSavedFiltered && messageObject23.isSavedFiltered) {
                    messageObject23.stableId = i144;
                }
            }
            this.accessibilityText = null;
            if (!this.drawCommentButton && !this.useTranscribeButton) {
                if (this.drawSideButton == 3) {
                    z6 = z5;
                } else {
                    z6 = z5;
                    if (this.hasDiscussion) {
                    }
                }
                z7 = z4;
                if (!z3 && messageObject.isDice()) {
                    setCurrentDiceValue(this.isUpdating);
                }
                if (!z3 && messageObject.isPoll()) {
                    if (MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaPoll) {
                        tLRPC$Poll = null;
                        i141 = 0;
                        arrayList8 = null;
                    } else {
                        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll2 = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject23.messageOwner);
                        TLRPC$PollResults tLRPC$PollResults2 = tLRPC$TL_messageMediaPoll2.results;
                        arrayList8 = tLRPC$PollResults2.results;
                        tLRPC$Poll = tLRPC$TL_messageMediaPoll2.poll;
                        i141 = tLRPC$PollResults2.total_voters;
                    }
                    z71 = (arrayList8 == null || this.lastPollResults == null || i141 == this.lastPollResultsVoters) ? false : true;
                    if (!z71 && arrayList8 != this.lastPollResults) {
                        z71 = true;
                    }
                    tLRPC$Poll2 = this.lastPoll;
                    if (tLRPC$Poll2 == tLRPC$Poll || tLRPC$Poll2.closed == tLRPC$Poll.closed) {
                        z8 = z71;
                    } else {
                        if (!this.pollVoted) {
                            this.pollVoteInProgress = true;
                            this.vibrateOnPollVote = false;
                        }
                        z8 = true;
                    }
                    this.animatePollAvatars = false;
                    if (z8 && this.attachedToWindow) {
                        this.pollAnimationProgressTime = 0.0f;
                        if (this.pollVoted && !messageObject.isVoted()) {
                            this.pollUnvoteInProgress = true;
                        }
                        int i145 = this.lastPollResultsVoters;
                        this.animatePollAvatars = i145 == 0 || (i145 != 0 && i141 == 0);
                    }
                    if (!z77 && tLRPC$Poll != null && this.lastPoll.quiz && tLRPC$Poll.quiz && this.currentMessageObject != null && !this.pollVoted && messageObject.isVoted() && (tLRPC$PollResults = (tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject23.messageOwner)).results) != null && !tLRPC$PollResults.results.isEmpty()) {
                        size2 = tLRPC$TL_messageMediaPoll.results.results.size();
                        i142 = 0;
                        while (true) {
                            if (i142 < size2) {
                                tLRPC$TL_pollAnswerVoters = null;
                                break;
                            }
                            tLRPC$TL_pollAnswerVoters = tLRPC$TL_messageMediaPoll.results.results.get(i142);
                            if (tLRPC$TL_pollAnswerVoters.chosen) {
                                break;
                            }
                            i142++;
                        }
                        if (tLRPC$TL_pollAnswerVoters != null) {
                            int i146 = i142 + 500;
                            if (tLRPC$TL_pollAnswerVoters.correct) {
                                i143 = R.string.AccDescrQuizCorrectAnswer;
                                str25 = "AccDescrQuizCorrectAnswer";
                            } else {
                                i143 = R.string.AccDescrQuizIncorrectAnswer;
                                str25 = "AccDescrQuizIncorrectAnswer";
                            }
                            sendAccessibilityEventForVirtualView(i146, 4, LocaleController.getString(str25, i143));
                        }
                    }
                } else {
                    z8 = false;
                }
                if (!z6 && groupedMessages != null) {
                    z6 = (groupedMessages.messages.size() > 1 ? null : this.currentMessagesGroup.getPosition(this.currentMessageObject)) == this.currentPosition;
                }
                z9 = (z3 || this.effectId == messageObject.getEffectId()) ? z3 : true;
                int i147 = 5;
                if (z9 || z7 || z6 || z8 || ((z76 && messageObject.isPoll()) || isPhotoDataChanged(messageObject) || this.pinnedBottom != z || this.pinnedTop != z2)) {
                    this.updatedContent = true;
                    stickerSetLinkIcon = this.stickerSetIcons;
                    if (stickerSetLinkIcon != null) {
                        stickerSetLinkIcon.readyToDie();
                    }
                    this.wasPinned = this.isPinned;
                    this.pinnedBottom = z;
                    this.pinnedTop = z2;
                    this.currentMessageObject = messageObject23;
                    this.currentMessagesGroup = groupedMessages;
                    this.lastTime = -2.0d;
                    this.lastPostAuthor = messageObject23.messageOwner.post_author;
                    if (!z77 || z6) {
                        this.isHighlightedAnimated = false;
                        this.wasTranscriptionOpen = false;
                        if (this.highlightedQuote) {
                            resetUrlPaths();
                        }
                        this.highlightedQuote = false;
                    }
                    this.widthBeforeNewTimeLine = -1;
                    groupedMessages2 = this.currentMessagesGroup;
                    if (groupedMessages2 != null && groupedMessages2.posArray.size() > 1) {
                        position = this.currentMessagesGroup.getPosition(this.currentMessageObject);
                        this.currentPosition = position;
                        if (position == null) {
                            this.currentMessagesGroup = null;
                        }
                    } else {
                        this.currentMessagesGroup = null;
                        this.currentPosition = null;
                    }
                    groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 == null || groupedMessages3.isDocuments) {
                        this.drawPinnedTop = this.pinnedTop;
                        this.drawPinnedBottom = this.pinnedBottom;
                    } else {
                        this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition17 = this.currentPosition) == null || (groupedMessagePosition17.flags & 4) != 0);
                        this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 8) != 0);
                    }
                    boolean z78 = this.isPlayingRound;
                    this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                    this.photoImage.setCrossfadeWithOldImage(false);
                    this.photoImage.setCrossfadeDuration(150);
                    this.photoImage.setCrossfadeByScale(0.0f);
                    this.photoImage.setGradientBitmap(null);
                    this.photoImage.clearDecorators();
                    this.photoImage.setInvalidateAll(false);
                    this.linkPreviewY = 0;
                    this.factCheckY = 0;
                    this.lastTranslated = messageObject23.translated;
                    TLRPC$Message tLRPC$Message6 = messageObject23.messageOwner;
                    this.lastSendState = tLRPC$Message6.send_state;
                    this.lastDeleteDate = tLRPC$Message6.destroyTime;
                    this.lastViewsCount = tLRPC$Message6.views;
                    this.lastRepliesCount = getRepliesCount();
                    if (z77) {
                        this.isPressed = false;
                        this.isCheckPressed = true;
                    }
                    this.gamePreviewPressed = false;
                    this.sideButtonPressed = false;
                    this.pressedSideButton = 0;
                    this.hasNewLineForTime = false;
                    this.flipImage = false;
                    this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                    this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                    needDrawAvatar = needDrawAvatar();
                    if (messageObject23.customAvatarDrawable == null && !messageObject23.forceAvatar) {
                        z10 = needDrawAvatar;
                    } else {
                        this.isAvatarVisible = true;
                        z10 = true;
                    }
                    this.wasLayout = false;
                    this.groupPhotoInvisible = false;
                    this.animatingDrawVideoImageButton = 0;
                    this.drawVideoSize = false;
                    this.canStreamVideo = false;
                    this.animatingNoSound = 0;
                    this.drawSideButton2 = 0;
                    if (messageObject.isSponsored()) {
                        this.drawSideButton = 4;
                        if (messageObject23.sponsoredCanReport) {
                            this.drawSideButton2 = 5;
                        }
                    } else {
                        int i148 = messageObject23.searchType;
                        if (i148 == 2) {
                            this.drawSideButton = !checkNeedDrawShareButton(messageObject) ? 0 : 2;
                        } else if (i148 == 1) {
                            this.drawSideButton = 0;
                        } else if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || ((tLRPC$Message2 = messageObject23.messageOwner) != null && tLRPC$Message2.noforwards)) {
                            this.drawSideButton = 0;
                        } else {
                            int i149 = (!this.isRepliesChat && checkNeedDrawShareButton(messageObject)) ? 1 : 0;
                            this.drawSideButton = i149;
                            if (this.isPinnedChat || (i149 == 1 && ((messageObject23.messageOwner.fwd_from != null && !messageObject.isOutOwner() && messageObject23.messageOwner.fwd_from.saved_from_peer != null && messageObject.getDialogId() == UserConfig.getInstance(this.currentAccount).getClientUserId()) || messageObject23.isSaved))) {
                                this.drawSideButton = 2;
                            }
                        }
                    }
                    this.hasReplyQuote = false;
                    this.isReplyQuote = false;
                    this.replyNameLayout = null;
                    this.adminLayout = null;
                    this.boostCounterBounds = null;
                    this.boostCounterSpan = null;
                    this.checkOnlyButtonPressed = false;
                    this.replyTextLayout = null;
                    AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                    this.lastReplyMessage = null;
                    this.hasEmbed = false;
                    this.autoPlayingMedia = false;
                    this.replyNameWidth = 0;
                    this.replyTextWidth = 0;
                    this.replyTextHeight = 0;
                    this.viaWidth = 0;
                    this.viaNameWidth = 0;
                    this.viaOnly = false;
                    this.addedCaptionHeight = 0;
                    this.currentReplyPhoto = null;
                    this.currentUser = null;
                    this.currentChat = null;
                    this.currentViaBotUser = null;
                    this.instantViewLayout = null;
                    this.drawNameLayout = false;
                    this.linkPreviewAbove = false;
                    TLRPC$Message tLRPC$Message7 = this.currentMessageObject.messageOwner;
                    this.captionAbove = (tLRPC$Message7 != null && tLRPC$Message7.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                    this.isSmallImage = false;
                    this.lastLoadingSizeTotal = 0L;
                    if (this.scheduledInvalidate) {
                        AndroidUtilities.cancelRunOnUIThread(this.invalidateRunnable);
                        this.scheduledInvalidate = false;
                    }
                    this.links.clear();
                    this.pressedLink = null;
                    this.pressedEmoji = null;
                    this.pressedLinkType = -1;
                    messageObject23.forceUpdate = false;
                    this.drawPhotoImage = false;
                    this.drawMediaCheckBox = false;
                    this.hasLinkPreview = false;
                    this.hasFactCheck = false;
                    this.hasOldCaptionPreview = false;
                    this.hasGamePreview = false;
                    this.hasInvoicePreview = false;
                    this.hasInvoicePrice = false;
                    this.commentButtonPressed = false;
                    this.instantPressed = false;
                    this.gradientDrawable = null;
                    groupMedia = this.groupMedia;
                    if (groupMedia != null && messageObject23.type != 29) {
                        groupMedia.onDetachedFromWindow();
                        this.groupMedia = null;
                    }
                    setInstantButtonPressed(false);
                    if (!z8 && Build.VERSION.SDK_INT >= 21) {
                        i140 = 0;
                        while (true) {
                            drawableArr = this.selectorDrawable;
                            if (i140 < drawableArr.length) {
                                break;
                            }
                            Drawable drawable2 = drawableArr[i140];
                            if (drawable2 != null) {
                                drawable2.setVisible(false, false);
                                this.selectorDrawable[i140].setState(StateSet.NOTHING);
                            }
                            i140++;
                        }
                    }
                    resetContactButtonsPressedState();
                    buttonBounce = this.titleLabelBounce;
                    if (buttonBounce != null) {
                        buttonBounce.setPressed(false);
                    }
                    this.drawnContactButtonsFlag = 0;
                    this.drawContact = false;
                    this.drawContactView = false;
                    this.drawContactSendMessage = false;
                    this.drawContactAdd = false;
                    this.spoilerPressed = null;
                    this.isSpoilerRevealing = false;
                    this.linkPreviewPressed = false;
                    this.buttonPressed = 0;
                    this.additionalTimeOffsetY = 0;
                    this.miniButtonPressed = 0;
                    this.pressedBotButton = -1;
                    this.pressedVoteButton = -1;
                    this.pollHintPressed = false;
                    this.psaHintPressed = false;
                    this.linkPreviewHeight = 0;
                    this.factCheckHeight = 0;
                    this.mediaOffsetY = 0;
                    this.documentAttachType = 0;
                    this.documentAttach = null;
                    this.descriptionLayout = null;
                    this.titleLayout = null;
                    this.videoInfoLayout = null;
                    this.photosCountLayout = null;
                    this.siteNameLayout = null;
                    this.titleLabelLayout = null;
                    this.authorLayout = null;
                    this.captionFullWidth = 0;
                    this.prevCaptionLayout = this.captionLayout;
                    this.captionLayout = null;
                    this.captionWidth = 0;
                    this.captionHeight = 0;
                    this.captionOffsetX = 0;
                    this.currentCaption = null;
                    this.docTitleLayout = null;
                    this.drawImageButton = false;
                    this.drawVideoImageButton = false;
                    this.currentPhotoLocation = null;
                    this.currentPhotoThumbLocation = null;
                    this.currentPhotoObject = null;
                    this.photoParentObject = null;
                    this.currentPhotoObjectThumb = null;
                    this.currentPhotoObjectThumbStripped = null;
                    if (!z9 || z77 || z7) {
                        this.currentPhotoFilter = null;
                    }
                    this.buttonState = -1;
                    this.miniButtonState = -1;
                    this.hasMiniProgress = 0;
                    if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
                        ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
                    }
                    this.addedForTest = false;
                    this.photoNotSet = false;
                    this.drawBackground = true;
                    this.drawName = false;
                    this.useSeekBarWaveform = false;
                    this.useTranscribeButton = false;
                    this.drawInstantView = false;
                    this.drawInstantViewType = 0;
                    this.instantViewButtonText = null;
                    this.drawForwardedName = false;
                    this.drawCommentButton = false;
                    this.photoImage.setSideClip(0.0f);
                    this.photoImage.setAspectFit(false);
                    this.photoImage.setRoundRadiusEnabled(true);
                    this.fitPhotoImage = false;
                    this.gradientShader = null;
                    this.motionBackgroundDrawable = null;
                    this.imageBackgroundColor = 0;
                    this.imageBackgroundGradientColor1 = 0;
                    this.imageBackgroundGradientColor2 = 0;
                    this.imageBackgroundIntensity = 0.0f;
                    this.imageBackgroundGradientColor3 = 0;
                    this.imageBackgroundGradientRotation = 45;
                    this.imageBackgroundSideColor = 0;
                    this.mediaBackground = false;
                    this.isMedia = false;
                    expiredStoryView = this.expiredStoryView;
                    if (expiredStoryView != null) {
                        expiredStoryView.visible = false;
                    }
                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject23.messageOwner.fwd_from;
                    z11 = (tLRPC$MessageFwdHeader2 == null || TextUtils.isEmpty(tLRPC$MessageFwdHeader2.psa_type)) ? false : true;
                    this.hasPsaHint = z11;
                    if (z11) {
                        createSelectorDrawable(0);
                    }
                    this.photoImage.setAlpha(1.0f);
                    if ((!z9 || z7) && !this.pollUnvoteInProgress) {
                        this.pollButtons.clear();
                    }
                    this.availableTimeWidth = 0;
                    this.photoImage.setForceLoading(false);
                    this.photoImage.setNeedsQualityThumb(false);
                    this.photoImage.setShouldGenerateQualityThumb(false);
                    this.photoImage.setAllowDecodeSingleFrame(false);
                    this.photoImage.setColorFilter(null);
                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                    if (!z77 || messageObject23.reactionsChanged || z78 != this.isPlayingRound) {
                        messageObject23.reactionsChanged = false;
                        TLRPC$Message tLRPC$Message8 = messageObject23.messageOwner;
                        boolean z79 = (tLRPC$Message8 == null || (tLRPC$TL_messageReactions = tLRPC$Message8.reactions) == null || !tLRPC$TL_messageReactions.reactions_as_tags) ? false : true;
                        if (messageObject.shouldDrawReactions() && !messageObject.isExpiredStory() && ((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.flags & 8) != 0)) {
                            boolean z80 = !messageObject.shouldDrawReactionsInLayout();
                            if (this.currentPosition == null) {
                                MessageObject findPrimaryMessageObject = groupedMessages.findPrimaryMessageObject();
                                if (!z79) {
                                    TLRPC$TL_messageReactions tLRPC$TL_messageReactions2 = findPrimaryMessageObject.messageOwner.reactions;
                                    z79 = tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.reactions_as_tags;
                                }
                                this.reactionsLayoutInBubble.setMessage(groupedMessages.findPrimaryMessageObject(), !messageObject.shouldDrawReactionsInLayout(), z79, this.resourcesProvider);
                            } else {
                                this.reactionsLayoutInBubble.setMessage(messageObject23, z80, z79, this.resourcesProvider);
                            }
                        } else {
                            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                        }
                    }
                    if (z9) {
                        this.firstVisibleBlockNum = 0;
                        this.lastVisibleBlockNum = 0;
                        MessageObject messageObject26 = this.currentMessageObject;
                        if (messageObject26 != null && (arrayList7 = messageObject26.textLayoutBlocks) != null && arrayList7.size() > 1) {
                            this.needNewVisiblePart = true;
                        }
                    }
                    groupedMessages4 = this.currentMessagesGroup;
                    if (groupedMessages4 != null && groupedMessages4.messages.size() > 0) {
                        isLinkedToChat = this.currentMessagesGroup.messages.get(0).isLinkedToChat(this.linkedChatId);
                    } else {
                        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                    }
                    if (((this.hasDiscussion && isLinkedToChat) || (this.isRepliesChat && !messageObject.isOutOwner())) && (((groupedMessagePosition14 = this.currentPosition) == null || (groupedMessagePosition14.flags & 8) != 0) && messageObject23.searchType == 0)) {
                        repliesCount = getRepliesCount();
                        if (!messageObject.shouldDrawWithoutBackground() && !messageObject.isAnimatedEmoji()) {
                            this.drawCommentButton = true;
                            if (this.commentProgress == null) {
                                this.commentProgress = new InfiniteProgress(AndroidUtilities.dp(7.0f));
                            }
                            if (!this.isRepliesChat) {
                                i = 9;
                                string9 = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                            } else {
                                if (LocaleController.isRTL) {
                                    formatPluralString = repliesCount != 0 ? LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]) : LocaleController.getString("LeaveAComment", R.string.LeaveAComment);
                                } else {
                                    formatPluralString = repliesCount != 0 ? LocaleController.getPluralString("CommentsNoNumber", repliesCount) : LocaleController.getString("LeaveAComment", R.string.LeaveAComment);
                                }
                                String str26 = formatPluralString;
                                ArrayList<TLRPC$Peer> recentRepliers = getRecentRepliers();
                                if (repliesCount != 0 && recentRepliers != null && !recentRepliers.isEmpty()) {
                                    createCommentUI();
                                    int size3 = recentRepliers.size();
                                    int i150 = 0;
                                    i137 = 0;
                                    while (true) {
                                        ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                                        if (i150 >= imageReceiverArr.length) {
                                            break;
                                        }
                                        if (i150 >= size3) {
                                            if (size3 != 0) {
                                                imageReceiverArr[i150].setImageBitmap((Drawable) null);
                                                this.commentAvatarImagesVisible[i150] = false;
                                            }
                                            i138 = i150;
                                            arrayList6 = recentRepliers;
                                            i139 = size3;
                                        } else {
                                            imageReceiverArr[i150].setImageCoords(0.0f, 0.0f, AndroidUtilities.dp(24.0f), AndroidUtilities.dp(24.0f));
                                            final long peerId = MessageObject.getPeerId(recentRepliers.get(i150));
                                            if (DialogObject.isUserDialog(peerId)) {
                                                user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerId));
                                            } else if (DialogObject.isChatDialog(peerId)) {
                                                tLRPC$Chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerId));
                                                user2 = null;
                                                final TLRPC$User tLRPC$User2 = user2;
                                                final int i151 = i150;
                                                i138 = i150;
                                                final TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
                                                arrayList6 = recentRepliers;
                                                i139 = size3;
                                                post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda4
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        ChatMessageCell.this.lambda$setMessageContent$7(tLRPC$User2, i151, tLRPC$Chat2, peerId);
                                                    }
                                                });
                                                this.commentAvatarImagesVisible[i138] = true;
                                                i137 += i138 == 0 ? 17 : 2;
                                            } else {
                                                user2 = null;
                                            }
                                            tLRPC$Chat = null;
                                            final TLRPC$User tLRPC$User22 = user2;
                                            final int i1512 = i150;
                                            i138 = i150;
                                            final TLRPC$Chat tLRPC$Chat22 = tLRPC$Chat;
                                            arrayList6 = recentRepliers;
                                            i139 = size3;
                                            post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda4
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatMessageCell.this.lambda$setMessageContent$7(tLRPC$User22, i1512, tLRPC$Chat22, peerId);
                                                }
                                            });
                                            this.commentAvatarImagesVisible[i138] = true;
                                            i137 += i138 == 0 ? 17 : 2;
                                        }
                                        i150 = i138 + 1;
                                        recentRepliers = arrayList6;
                                        size3 = i139;
                                    }
                                    string9 = str26;
                                    i = 9;
                                    int ceil4 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string9));
                                    this.totalCommentWidth = ceil4;
                                    this.commentWidth = ceil4;
                                    this.commentLayout = new StaticLayout(string9, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    if (repliesCount != 0 && !LocaleController.isRTL) {
                                        this.drawCommentNumber = true;
                                        animatedNumberLayout2 = this.commentNumberLayout;
                                        if (animatedNumberLayout2 != null) {
                                            AnimatedNumberLayout animatedNumberLayout3 = new AnimatedNumberLayout(this, Theme.chat_commentTextPaint);
                                            this.commentNumberLayout = animatedNumberLayout3;
                                            animatedNumberLayout3.setNumber(repliesCount, false);
                                        } else {
                                            animatedNumberLayout2.setNumber(repliesCount, messageObject23.animateComments);
                                        }
                                        messageObject23.animateComments = false;
                                        int width2 = this.commentNumberLayout.getWidth();
                                        this.commentNumberWidth = width2;
                                        this.totalCommentWidth += width2 + AndroidUtilities.dp(4.0f);
                                    } else {
                                        this.drawCommentNumber = false;
                                        animatedNumberLayout = this.commentNumberLayout;
                                        if (animatedNumberLayout != null) {
                                            animatedNumberLayout.setNumber(1, false);
                                        }
                                    }
                                    this.totalCommentWidth += AndroidUtilities.dp(i137 + 70);
                                    if (messageObject23.type != 27) {
                                        this.drawBackground = true;
                                        this.drawForwardedName = false;
                                        this.hasReplyQuote = false;
                                        this.isReplyQuote = false;
                                        this.replyNameLayout = null;
                                        this.replyTextLayout = null;
                                        StaticLayout[] staticLayoutArr2 = this.forwardedNameLayout;
                                        staticLayoutArr2[0] = null;
                                        staticLayoutArr2[1] = null;
                                        this.drawName = false;
                                        if (this.channelRecommendationsCell == null) {
                                            this.channelRecommendationsCell = new ChannelRecommendationsCell(this);
                                        }
                                        this.channelRecommendationsCell.setMessageObject(messageObject23);
                                    } else if (messageObject.isExpiredStory()) {
                                        if (!z77) {
                                            requestLayout();
                                        }
                                        this.drawBackground = true;
                                        if (this.expiredStoryView == null) {
                                            this.expiredStoryView = new ExpiredStoryView();
                                        }
                                        ExpiredStoryView expiredStoryView2 = this.expiredStoryView;
                                        expiredStoryView2.visible = true;
                                        expiredStoryView2.measure(this);
                                        this.totalHeight = this.expiredStoryView.height + AndroidUtilities.dp(8.0f);
                                        this.backgroundWidth = this.expiredStoryView.width;
                                        measureTime(this.currentMessageObject);
                                        this.backgroundWidth += this.timeWidth + AndroidUtilities.dp(12.0f);
                                        this.drawForwardedName = false;
                                        this.hasReplyQuote = false;
                                        this.isReplyQuote = false;
                                        this.replyNameLayout = null;
                                        this.replyTextLayout = null;
                                        StaticLayout[] staticLayoutArr3 = this.forwardedNameLayout;
                                        staticLayoutArr3[0] = null;
                                        staticLayoutArr3[1] = null;
                                        this.drawName = false;
                                    } else {
                                        int i152 = messageObject23.type;
                                        if (i152 == 0 || i152 == 24 || messageObject.isGiveawayOrGiveawayResults() || messageObject.isSponsored()) {
                                            this.drawForwardedName = !this.isRepliesChat;
                                            if (z10) {
                                                if (AndroidUtilities.isTablet()) {
                                                    minTabletSide5 = AndroidUtilities.getMinTabletSide();
                                                    dp16 = AndroidUtilities.dp(122.0f);
                                                } else {
                                                    minTabletSide5 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                    dp16 = AndroidUtilities.dp(122.0f);
                                                }
                                                i66 = minTabletSide5 - dp16;
                                                this.drawName = true;
                                            } else {
                                                if (AndroidUtilities.isTablet()) {
                                                    minTabletSide8 = AndroidUtilities.getMinTabletSide();
                                                    dp19 = AndroidUtilities.dp(80.0f);
                                                } else {
                                                    minTabletSide8 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                    dp19 = AndroidUtilities.dp(80.0f);
                                                }
                                                i66 = minTabletSide8 - dp19;
                                                this.drawName = this.isPinnedChat || (this.isSavedChat && !messageObject.isOutOwner() && (messageObject.getSavedDialogId() < 0 || messageObject.getSavedDialogId() == UserObject.ANONYMOUS)) || (!((tLRPC$Peer = messageObject23.messageOwner.peer_id) == null || tLRPC$Peer.channel_id == 0 || (messageObject.isOutOwner() && !messageObject.isSupergroup())) || (messageObject.isImportedForward() && messageObject23.messageOwner.fwd_from.from_id == null));
                                            }
                                            int i153 = i66;
                                            this.availableTimeWidth = i153;
                                            if (messageObject.isRoundVideo()) {
                                                double d = this.availableTimeWidth;
                                                double ceil5 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                                double dp25 = !messageObject.isOutOwner() ? AndroidUtilities.dp(64.0f) : 0;
                                                Double.isNaN(dp25);
                                                Double.isNaN(d);
                                                this.availableTimeWidth = (int) (d - (ceil5 + dp25));
                                            }
                                            measureTime(messageObject);
                                            int dp26 = this.timeWidth + AndroidUtilities.dp(6.0f);
                                            if (messageObject.isQuickReply() && !messageObject.isSendError()) {
                                                dp26 -= AndroidUtilities.dp(3.0f);
                                            } else if (messageObject.isOutOwner()) {
                                                dp26 += AndroidUtilities.dp(20.5f);
                                            }
                                            int extraTimeX = getExtraTimeX() + dp26;
                                            this.hasGamePreview = (MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaGame) && (MessageObject.getMedia(messageObject23.messageOwner).game instanceof TLRPC$TL_game);
                                            boolean z81 = MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaInvoice;
                                            this.hasInvoicePreview = z81;
                                            this.hasInvoicePrice = z81;
                                            if (z81 && "XTR".equals(((TLRPC$TL_messageMediaInvoice) MessageObject.getMedia(messageObject23.messageOwner)).currency)) {
                                                this.hasInvoicePrice = false;
                                            }
                                            boolean z82 = !messageObject23.isRestrictedMessage && (MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && (MessageObject.getMedia(messageObject23.messageOwner).webpage instanceof TLRPC$TL_webPage);
                                            this.hasLinkPreview = z82;
                                            TLRPC$WebPage tLRPC$WebPage = !z82 ? null : MessageObject.getMedia(messageObject23.messageOwner).webpage;
                                            if (messageObject.isStoryMention()) {
                                                this.hasLinkPreview = true;
                                                tLRPC$WebPage = messageObject.getStoryMentionWebpage();
                                            }
                                            boolean z83 = this.hasLinkPreview;
                                            this.drawInstantView = z83 && tLRPC$WebPage.cached_page != null;
                                            String str27 = !z83 ? null : tLRPC$WebPage.site_name;
                                            this.hasEmbed = (!z83 || TextUtils.isEmpty(tLRPC$WebPage.embed_url) || messageObject.isGif() || "instagram".equalsIgnoreCase(str27)) ? false : true;
                                            String str28 = tLRPC$WebPage == null ? null : tLRPC$WebPage.type;
                                            if (messageObject.isGiveawayOrGiveawayResults()) {
                                                this.hasLinkPreview = true;
                                            }
                                            if (!this.drawInstantView) {
                                                if (messageObject.isUnsupported()) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 21;
                                                } else if (messageObject.isSponsored()) {
                                                    this.drawInstantView = true;
                                                    this.hasLinkPreview = true;
                                                    this.instantViewButtonText = messageObject23.sponsoredButtonText;
                                                    this.drawInstantViewType = 1;
                                                } else if (messageObject.isGiveawayOrGiveawayResults()) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 19;
                                                } else if ("telegram_channel_boost".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 18;
                                                } else if ("telegram_group_boost".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 22;
                                                } else if ("telegram_giftcode".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 20;
                                                } else if ("telegram_livestream".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 11;
                                                } else if ("telegram_voicechat".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 9;
                                                } else if ("telegram_videochat".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 25;
                                                } else if ("telegram_channel".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 1;
                                                } else if ("telegram_user".equals(str28)) {
                                                    if (tLRPC$WebPage == null || (str2 = tLRPC$WebPage.url) == null || (parse = Uri.parse(str2)) == null || !parse.getBooleanQueryParameter("profile", false)) {
                                                        z39 = true;
                                                        z40 = false;
                                                    } else {
                                                        z39 = true;
                                                        z40 = true;
                                                    }
                                                    this.drawInstantView = z39;
                                                    if (z40) {
                                                        this.drawInstantViewType = 32;
                                                    } else {
                                                        this.drawInstantViewType = 13;
                                                    }
                                                } else if ("telegram_megagroup".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 2;
                                                } else if ("telegram_message".equals(str28) || ("photo".equals(str28) && tLRPC$WebPage != null && Browser.isTMe(tLRPC$WebPage.url))) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 3;
                                                } else if ("telegram_community".equals(str28) || "telegram_chatlist".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 14;
                                                } else if ("telegram_botapp".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 15;
                                                } else if ("telegram_theme".equals(str28)) {
                                                    int size4 = MessageObject.getMedia(messageObject23.messageOwner).webpage.attributes.size();
                                                    TLRPC$Document tLRPC$Document12 = null;
                                                    for (int i154 = 0; i154 < size4; i154 += r1) {
                                                        TLRPC$WebPageAttribute tLRPC$WebPageAttribute = MessageObject.getMedia(messageObject23.messageOwner).webpage.attributes.get(i154);
                                                        if (tLRPC$WebPageAttribute instanceof TLRPC$TL_webPageAttributeTheme) {
                                                            TLRPC$TL_webPageAttributeTheme tLRPC$TL_webPageAttributeTheme = (TLRPC$TL_webPageAttributeTheme) tLRPC$WebPageAttribute;
                                                            ArrayList<TLRPC$Document> arrayList9 = tLRPC$TL_webPageAttributeTheme.documents;
                                                            int size5 = arrayList9.size();
                                                            int i155 = 0;
                                                            while (true) {
                                                                if (i155 >= size5) {
                                                                    r1 = 1;
                                                                    i67 = 7;
                                                                    break;
                                                                }
                                                                TLRPC$Document tLRPC$Document13 = arrayList9.get(i155);
                                                                if ("application/x-tgtheme-android".equals(tLRPC$Document13.mime_type)) {
                                                                    r1 = 1;
                                                                    this.drawInstantView = true;
                                                                    i67 = 7;
                                                                    this.drawInstantViewType = 7;
                                                                    tLRPC$Document12 = tLRPC$Document13;
                                                                    break;
                                                                }
                                                                i155++;
                                                            }
                                                            if (this.drawInstantView) {
                                                                break;
                                                            }
                                                            tLRPC$ThemeSettings = tLRPC$TL_webPageAttributeTheme.settings;
                                                            if (tLRPC$ThemeSettings != null) {
                                                                this.drawInstantView = r1;
                                                                this.drawInstantViewType = i67;
                                                                tLRPC$Document = tLRPC$Document12;
                                                                break;
                                                            }
                                                        } else {
                                                            r1 = 1;
                                                        }
                                                    }
                                                    tLRPC$Document = tLRPC$Document12;
                                                    tLRPC$ThemeSettings = null;
                                                    z41 = false;
                                                    arrayList3 = null;
                                                    tL_stories$StoryItem = null;
                                                    z43 = false;
                                                    if (messageObject23.isRepostPreview) {
                                                    }
                                                    this.backgroundWidth = i153;
                                                    if (this.hasLinkPreview) {
                                                    }
                                                    int max7 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                    this.backgroundWidth = max7;
                                                    this.backgroundWidth = Math.max(max7, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                    this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                    if (messageObject.isRoundVideo()) {
                                                    }
                                                    setMessageObjectInternal(messageObject);
                                                    this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                    this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                    if (messageObject.isSponsored()) {
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                                    }
                                                    if (this.drawPinnedTop) {
                                                    }
                                                    messageObject15 = this.currentMessageObject;
                                                    if (messageObject15 != null) {
                                                    }
                                                    int max8 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                    messageTopicButton = this.topicButton;
                                                    if (messageTopicButton != null) {
                                                    }
                                                    max4 = Math.max(max8, this.replyTextWidth);
                                                    if (this.commentLayout != null) {
                                                    }
                                                    if (this.hasLinkPreview) {
                                                    }
                                                    messageObject16 = this.currentMessageObject;
                                                    if (!messageObject16.isRepostPreview) {
                                                    }
                                                    if (this.drawSideButton != 0) {
                                                    }
                                                    int dp27 = AndroidUtilities.dp(48.0f);
                                                    int dp28 = AndroidUtilities.dp(10.0f);
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    tLRPC$Document5 = tLRPC$Document4;
                                                    i75 = 0;
                                                    charSequence6 = str9;
                                                    i76 = this.drawInstantViewType;
                                                    if (i76 == 18) {
                                                    }
                                                    int dp29 = AndroidUtilities.dp(20.0f);
                                                    if (this.hasInvoicePreview) {
                                                    }
                                                    String str29 = str11;
                                                    if (this.drawInstantViewType == 17) {
                                                    }
                                                    int i156 = maxMessageTextWidth - dp29;
                                                    messageObject17 = this.currentMessageObject;
                                                    if (messageObject17.photoThumbs == null) {
                                                    }
                                                    this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                    this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                    this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                    this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                    int max9 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                    if (string7 == null) {
                                                    }
                                                    max5 = 0;
                                                    if (str6 != null) {
                                                    }
                                                    if (str10 != null) {
                                                    }
                                                    if (z50) {
                                                    }
                                                    if (str12 != null) {
                                                    }
                                                    int i157 = i77;
                                                    if (str8 != null) {
                                                    }
                                                    if (z47) {
                                                    }
                                                    z52 = z47;
                                                    if (!z52) {
                                                    }
                                                    if (this.drawInstantViewType != 17) {
                                                    }
                                                    tLRPC$Document8 = tLRPC$Document7;
                                                    webFile3 = webFile2;
                                                    i90 = this.documentAttachType;
                                                    if (i90 == 5) {
                                                    }
                                                    i91 = max9;
                                                    messageObject3 = messageObject18;
                                                    i92 = i89;
                                                    z53 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                    z54 = true;
                                                    if (!this.hasInvoicePreview) {
                                                    }
                                                    if (!this.hasInvoicePreview) {
                                                    }
                                                    int i158 = this.totalHeight;
                                                    if (this.drawInstantView) {
                                                    }
                                                    this.totalHeight = i158 + AndroidUtilities.dp(i94 + i93);
                                                    createInstantViewButton();
                                                    z15 = z54;
                                                    z64 = z53;
                                                    this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                    z70 = z64;
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z21 = z15;
                                                    c2 = 0;
                                                    r3 = z70;
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    c5 = c2;
                                                    messageObject19 = this.currentMessageObject;
                                                    if (messageObject19.eventId == 0) {
                                                    }
                                                    i127 = 3;
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                } else if ("telegram_story".equals(str28)) {
                                                    int size6 = tLRPC$WebPage.attributes.size();
                                                    for (int i159 = 0; i159 < size6; i159++) {
                                                        TLRPC$WebPageAttribute tLRPC$WebPageAttribute2 = tLRPC$WebPage.attributes.get(i159);
                                                        if (tLRPC$WebPageAttribute2 instanceof TLRPC$TL_webPageAttributeStory) {
                                                            this.drawInstantView = true;
                                                            this.drawInstantViewType = 17;
                                                            TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$WebPageAttribute2;
                                                            TL_stories$StoryItem tL_stories$StoryItem6 = tLRPC$TL_webPageAttributeStory.storyItem;
                                                            if (tL_stories$StoryItem6 != null) {
                                                                tL_stories$StoryItem6.messageId = messageObject.getId();
                                                                tL_stories$StoryItem6.dialogId = DialogObject.getPeerDialogId(tLRPC$TL_webPageAttributeStory.peer);
                                                                if (tL_stories$StoryItem6 instanceof TL_stories$TL_storyItemDeleted) {
                                                                    this.drawInstantView = false;
                                                                    this.hasLinkPreview = false;
                                                                    this.drawInstantViewType = 0;
                                                                }
                                                            } else {
                                                                this.drawInstantView = false;
                                                                this.hasLinkPreview = false;
                                                                this.drawInstantViewType = 0;
                                                            }
                                                            tL_stories$StoryItem = tL_stories$StoryItem6;
                                                            tLRPC$Document = null;
                                                            tLRPC$ThemeSettings = null;
                                                            z41 = false;
                                                            arrayList3 = null;
                                                            z43 = false;
                                                            if (messageObject23.isRepostPreview) {
                                                            }
                                                            this.backgroundWidth = i153;
                                                            if (this.hasLinkPreview) {
                                                            }
                                                            int max72 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                            this.backgroundWidth = max72;
                                                            this.backgroundWidth = Math.max(max72, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                            if (messageObject.isRoundVideo()) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                            this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            if (this.drawPinnedTop) {
                                                            }
                                                            messageObject15 = this.currentMessageObject;
                                                            if (messageObject15 != null) {
                                                            }
                                                            int max82 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                            messageTopicButton = this.topicButton;
                                                            if (messageTopicButton != null) {
                                                            }
                                                            max4 = Math.max(max82, this.replyTextWidth);
                                                            if (this.commentLayout != null) {
                                                            }
                                                            if (this.hasLinkPreview) {
                                                            }
                                                            messageObject16 = this.currentMessageObject;
                                                            if (!messageObject16.isRepostPreview) {
                                                            }
                                                            if (this.drawSideButton != 0) {
                                                            }
                                                            int dp272 = AndroidUtilities.dp(48.0f);
                                                            int dp282 = AndroidUtilities.dp(10.0f);
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            tLRPC$Document5 = tLRPC$Document4;
                                                            i75 = 0;
                                                            charSequence6 = str9;
                                                            i76 = this.drawInstantViewType;
                                                            if (i76 == 18) {
                                                            }
                                                            int dp292 = AndroidUtilities.dp(20.0f);
                                                            if (this.hasInvoicePreview) {
                                                            }
                                                            String str292 = str11;
                                                            if (this.drawInstantViewType == 17) {
                                                            }
                                                            int i1562 = maxMessageTextWidth - dp292;
                                                            messageObject17 = this.currentMessageObject;
                                                            if (messageObject17.photoThumbs == null) {
                                                            }
                                                            this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            int max92 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                            if (string7 == null) {
                                                            }
                                                            max5 = 0;
                                                            if (str6 != null) {
                                                            }
                                                            if (str10 != null) {
                                                            }
                                                            if (z50) {
                                                            }
                                                            if (str12 != null) {
                                                            }
                                                            int i1572 = i77;
                                                            if (str8 != null) {
                                                            }
                                                            if (z47) {
                                                            }
                                                            z52 = z47;
                                                            if (!z52) {
                                                            }
                                                            if (this.drawInstantViewType != 17) {
                                                            }
                                                            tLRPC$Document8 = tLRPC$Document7;
                                                            webFile3 = webFile2;
                                                            i90 = this.documentAttachType;
                                                            if (i90 == 5) {
                                                            }
                                                            i91 = max92;
                                                            messageObject3 = messageObject18;
                                                            i92 = i89;
                                                            z53 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                            z54 = true;
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            int i1582 = this.totalHeight;
                                                            if (this.drawInstantView) {
                                                            }
                                                            this.totalHeight = i1582 + AndroidUtilities.dp(i94 + i93);
                                                            createInstantViewButton();
                                                            z15 = z54;
                                                            z64 = z53;
                                                            this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                            z70 = z64;
                                                            if (this.hasFactCheck) {
                                                            }
                                                            z21 = z15;
                                                            c2 = 0;
                                                            r3 = z70;
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            c5 = c2;
                                                            messageObject19 = this.currentMessageObject;
                                                            if (messageObject19.eventId == 0) {
                                                            }
                                                            i127 = 3;
                                                            this.botButtons.clear();
                                                            if (z77) {
                                                            }
                                                            if (!messageObject3.isRestrictedMessage) {
                                                            }
                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                            z66 = r3;
                                                            if (this.drawCommentButton) {
                                                            }
                                                            if (this.hasFactCheck) {
                                                            }
                                                            z67 = this.drawPinnedBottom;
                                                            if (z67) {
                                                            }
                                                            if (!z67) {
                                                            }
                                                            if (!this.mediaBackground) {
                                                            }
                                                            if (messageObject3.type != 19) {
                                                            }
                                                            if (this.drawPhotoImage) {
                                                            }
                                                            if (this.documentAttachType == 5) {
                                                            }
                                                            calculateUnlockXY();
                                                            if (z21) {
                                                            }
                                                            updateAnimatedEmojis();
                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                            if (stickerSetLinkIcon2 != null) {
                                                            }
                                                            textLayoutBlocks4 = null;
                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                            r32 = z66;
                                                            r62 = textLayoutBlocks4;
                                                        }
                                                    }
                                                } else if ("telegram_background".equals(str28)) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 6;
                                                    try {
                                                        Uri parse3 = Uri.parse(MessageObject.getMedia(messageObject23.messageOwner).webpage.url);
                                                        this.imageBackgroundIntensity = Utilities.parseInt((CharSequence) parse3.getQueryParameter("intensity")).intValue();
                                                        String queryParameter = parse3.getQueryParameter("bg_color");
                                                        String queryParameter2 = parse3.getQueryParameter("rotation");
                                                        if (queryParameter2 != null) {
                                                            this.imageBackgroundGradientRotation = Utilities.parseInt((CharSequence) queryParameter2).intValue();
                                                        }
                                                        if (TextUtils.isEmpty(queryParameter)) {
                                                            TLRPC$Document document2 = messageObject.getDocument();
                                                            if (document2 != null && "image/png".equals(document2.mime_type)) {
                                                                queryParameter = "ffffff";
                                                            }
                                                            if (this.imageBackgroundIntensity == 0.0f) {
                                                                try {
                                                                    this.imageBackgroundIntensity = 50.0f;
                                                                    if (queryParameter == null) {
                                                                        int parseInt = (-16777216) | Integer.parseInt(queryParameter.substring(0, 6), 16);
                                                                        this.imageBackgroundColor = parseInt;
                                                                        if (queryParameter.length() >= 13 && AndroidUtilities.isValidWallChar(queryParameter.charAt(6))) {
                                                                            int parseInt2 = Integer.parseInt(queryParameter.substring(7, 13), 16) | (-16777216);
                                                                            this.imageBackgroundGradientColor1 = parseInt2;
                                                                            parseInt = AndroidUtilities.getAverageColor(this.imageBackgroundColor, parseInt2);
                                                                        }
                                                                        if (queryParameter.length() >= 20 && AndroidUtilities.isValidWallChar(queryParameter.charAt(13))) {
                                                                            this.imageBackgroundGradientColor2 = Integer.parseInt(queryParameter.substring(14, 20), 16) | (-16777216);
                                                                        }
                                                                        if (queryParameter.length() == 27 && AndroidUtilities.isValidWallChar(queryParameter.charAt(20))) {
                                                                            this.imageBackgroundGradientColor3 = Integer.parseInt(queryParameter.substring(21), 16) | (-16777216);
                                                                        }
                                                                        if (this.imageBackgroundIntensity < 0.0f) {
                                                                            this.imageBackgroundSideColor = -15658735;
                                                                        } else {
                                                                            this.imageBackgroundSideColor = AndroidUtilities.getPatternSideColor(parseInt);
                                                                        }
                                                                        this.photoImage.setColorFilter(new PorterDuffColorFilter(AndroidUtilities.getPatternColor(parseInt), PorterDuff.Mode.SRC_IN));
                                                                        this.photoImage.setAlpha(Math.abs(this.imageBackgroundIntensity) / 100.0f);
                                                                    } else {
                                                                        String lastPathSegment = parse3.getLastPathSegment();
                                                                        if (lastPathSegment != null && lastPathSegment.length() >= 6) {
                                                                            this.imageBackgroundColor = (-16777216) | Integer.parseInt(lastPathSegment.substring(0, 6), 16);
                                                                            if (lastPathSegment.length() >= 13 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(6))) {
                                                                                this.imageBackgroundGradientColor1 = Integer.parseInt(lastPathSegment.substring(7, 13), 16) | (-16777216);
                                                                            }
                                                                            if (lastPathSegment.length() >= 20 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(13))) {
                                                                                this.imageBackgroundGradientColor2 = Integer.parseInt(lastPathSegment.substring(14, 20), 16) | (-16777216);
                                                                            }
                                                                            if (lastPathSegment.length() == 27 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(20))) {
                                                                                this.imageBackgroundGradientColor3 = Integer.parseInt(lastPathSegment.substring(21), 16) | (-16777216);
                                                                            }
                                                                            TLRPC$TL_photoSizeEmpty tLRPC$TL_photoSizeEmpty = new TLRPC$TL_photoSizeEmpty();
                                                                            this.currentPhotoObject = tLRPC$TL_photoSizeEmpty;
                                                                            tLRPC$TL_photoSizeEmpty.type = "s";
                                                                            tLRPC$TL_photoSizeEmpty.w = AndroidUtilities.dp(180.0f);
                                                                            this.currentPhotoObject.h = AndroidUtilities.dp(150.0f);
                                                                            this.currentPhotoObject.location = new TLRPC$TL_fileLocationUnavailable();
                                                                        }
                                                                    }
                                                                } catch (Exception unused) {
                                                                    tLRPC$Document = null;
                                                                    tLRPC$ThemeSettings = null;
                                                                    z41 = false;
                                                                    arrayList3 = null;
                                                                    tL_stories$StoryItem = null;
                                                                    z43 = false;
                                                                    if (messageObject23.isRepostPreview) {
                                                                    }
                                                                    this.backgroundWidth = i153;
                                                                    if (this.hasLinkPreview) {
                                                                    }
                                                                    int max722 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                                    this.backgroundWidth = max722;
                                                                    this.backgroundWidth = Math.max(max722, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                                    this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                                    if (messageObject.isRoundVideo()) {
                                                                    }
                                                                    setMessageObjectInternal(messageObject);
                                                                    this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                                    this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    if (!messageObject.isSponsored()) {
                                                                    }
                                                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                                                    }
                                                                    if (this.drawPinnedTop) {
                                                                    }
                                                                    messageObject15 = this.currentMessageObject;
                                                                    if (messageObject15 != null) {
                                                                    }
                                                                    int max822 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                                    messageTopicButton = this.topicButton;
                                                                    if (messageTopicButton != null) {
                                                                    }
                                                                    max4 = Math.max(max822, this.replyTextWidth);
                                                                    if (this.commentLayout != null) {
                                                                    }
                                                                    if (this.hasLinkPreview) {
                                                                    }
                                                                    messageObject16 = this.currentMessageObject;
                                                                    if (!messageObject16.isRepostPreview) {
                                                                    }
                                                                    if (this.drawSideButton != 0) {
                                                                    }
                                                                    int dp2722 = AndroidUtilities.dp(48.0f);
                                                                    int dp2822 = AndroidUtilities.dp(10.0f);
                                                                    if (!messageObject.isSponsored()) {
                                                                    }
                                                                    tLRPC$Document5 = tLRPC$Document4;
                                                                    i75 = 0;
                                                                    charSequence6 = str9;
                                                                    i76 = this.drawInstantViewType;
                                                                    if (i76 == 18) {
                                                                    }
                                                                    int dp2922 = AndroidUtilities.dp(20.0f);
                                                                    if (this.hasInvoicePreview) {
                                                                    }
                                                                    String str2922 = str11;
                                                                    if (this.drawInstantViewType == 17) {
                                                                    }
                                                                    int i15622 = maxMessageTextWidth - dp2922;
                                                                    messageObject17 = this.currentMessageObject;
                                                                    if (messageObject17.photoThumbs == null) {
                                                                    }
                                                                    this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                                    this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                                    this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                                    this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                                    int max922 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                                    if (string7 == null) {
                                                                    }
                                                                    max5 = 0;
                                                                    if (str6 != null) {
                                                                    }
                                                                    if (str10 != null) {
                                                                    }
                                                                    if (z50) {
                                                                    }
                                                                    if (str12 != null) {
                                                                    }
                                                                    int i15722 = i77;
                                                                    if (str8 != null) {
                                                                    }
                                                                    if (z47) {
                                                                    }
                                                                    z52 = z47;
                                                                    if (!z52) {
                                                                    }
                                                                    if (this.drawInstantViewType != 17) {
                                                                    }
                                                                    tLRPC$Document8 = tLRPC$Document7;
                                                                    webFile3 = webFile2;
                                                                    i90 = this.documentAttachType;
                                                                    if (i90 == 5) {
                                                                    }
                                                                    i91 = max922;
                                                                    messageObject3 = messageObject18;
                                                                    i92 = i89;
                                                                    z53 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                    z54 = true;
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    int i15822 = this.totalHeight;
                                                                    if (this.drawInstantView) {
                                                                    }
                                                                    this.totalHeight = i15822 + AndroidUtilities.dp(i94 + i93);
                                                                    createInstantViewButton();
                                                                    z15 = z54;
                                                                    z64 = z53;
                                                                    this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                    z70 = z64;
                                                                    if (this.hasFactCheck) {
                                                                    }
                                                                    z21 = z15;
                                                                    c2 = 0;
                                                                    r3 = z70;
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject.isSponsored()) {
                                                                    }
                                                                    c5 = c2;
                                                                    messageObject19 = this.currentMessageObject;
                                                                    if (messageObject19.eventId == 0) {
                                                                    }
                                                                    i127 = 3;
                                                                    this.botButtons.clear();
                                                                    if (z77) {
                                                                    }
                                                                    if (!messageObject3.isRestrictedMessage) {
                                                                    }
                                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                                    z66 = r3;
                                                                    if (this.drawCommentButton) {
                                                                    }
                                                                    if (this.hasFactCheck) {
                                                                    }
                                                                    z67 = this.drawPinnedBottom;
                                                                    if (z67) {
                                                                    }
                                                                    if (!z67) {
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                    }
                                                                    if (messageObject3.type != 19) {
                                                                    }
                                                                    if (this.drawPhotoImage) {
                                                                    }
                                                                    if (this.documentAttachType == 5) {
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z21) {
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                    if (stickerSetLinkIcon2 != null) {
                                                                    }
                                                                    textLayoutBlocks4 = null;
                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                    r32 = z66;
                                                                    r62 = textLayoutBlocks4;
                                                                    if (z77) {
                                                                    }
                                                                    transcribeButton = this.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                    if (chatMessageCellDelegate2 != null) {
                                                                    }
                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                    this.transitionParams.updatePhotoImageX = r32;
                                                                    this.highlightCaptionToSetEnd = -1;
                                                                    this.highlightCaptionToSetStart = -1;
                                                                    updateFlagSecure();
                                                                }
                                                            }
                                                        }
                                                        if (queryParameter == null) {
                                                        }
                                                    } catch (Exception unused2) {
                                                    }
                                                } else if ("telegram_stickerset".equals(str28)) {
                                                    int i160 = 0;
                                                    while (true) {
                                                        if (i160 >= tLRPC$WebPage.attributes.size()) {
                                                            z42 = true;
                                                            tLRPC$TL_webPageAttributeStickerSet = null;
                                                            break;
                                                        }
                                                        if (tLRPC$WebPage.attributes.get(i160) instanceof TLRPC$TL_webPageAttributeStickerSet) {
                                                            z42 = true;
                                                            tLRPC$TL_webPageAttributeStickerSet = (TLRPC$TL_webPageAttributeStickerSet) tLRPC$WebPage.attributes.get(i160);
                                                            break;
                                                        }
                                                        i160++;
                                                    }
                                                    this.drawInstantView = z42;
                                                    if (tLRPC$TL_webPageAttributeStickerSet != null && tLRPC$TL_webPageAttributeStickerSet.emojis) {
                                                        this.drawInstantViewType = 24;
                                                    } else {
                                                        this.drawInstantViewType = 23;
                                                    }
                                                    this.isSmallImage = z42;
                                                    if (tLRPC$TL_webPageAttributeStickerSet != null) {
                                                        arrayList3 = tLRPC$TL_webPageAttributeStickerSet.stickers;
                                                        z41 = tLRPC$TL_webPageAttributeStickerSet.text_color;
                                                        tLRPC$Document = null;
                                                        tLRPC$ThemeSettings = null;
                                                        tL_stories$StoryItem = null;
                                                        z43 = false;
                                                        if (messageObject23.isRepostPreview) {
                                                        }
                                                        this.backgroundWidth = i153;
                                                        if (this.hasLinkPreview) {
                                                            int max7222 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                            this.backgroundWidth = max7222;
                                                            this.backgroundWidth = Math.max(max7222, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                            if (messageObject.isRoundVideo()) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                            this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            if (this.drawPinnedTop) {
                                                            }
                                                            messageObject15 = this.currentMessageObject;
                                                            if (messageObject15 != null) {
                                                                this.totalHeight += AndroidUtilities.dp(5.0f);
                                                            }
                                                            int max8222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                            messageTopicButton = this.topicButton;
                                                            if (messageTopicButton != null) {
                                                            }
                                                            max4 = Math.max(max8222, this.replyTextWidth);
                                                            if (this.commentLayout != null) {
                                                                max4 = Math.max(max4, this.totalCommentWidth);
                                                            }
                                                            if (this.hasLinkPreview) {
                                                                this.photoImage.setImageBitmap((Drawable) null);
                                                                calcBackgroundWidth(i153, extraTimeX, max4);
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                }
                                                                if (messageObject.isUnsupported()) {
                                                                }
                                                                i91 = max4;
                                                                i88 = i153;
                                                                i92 = extraTimeX;
                                                                messageObject3 = messageObject23;
                                                                z64 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z15 = true;
                                                                this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                z70 = z64;
                                                                if (this.hasFactCheck) {
                                                                }
                                                                z21 = z15;
                                                                c2 = 0;
                                                                r3 = z70;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (!messageObject.isSponsored()) {
                                                                }
                                                                c5 = c2;
                                                                messageObject19 = this.currentMessageObject;
                                                                if (messageObject19.eventId == 0) {
                                                                }
                                                                i127 = 3;
                                                                this.botButtons.clear();
                                                                if (z77) {
                                                                }
                                                                if (!messageObject3.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                z66 = r3;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                if (this.hasFactCheck) {
                                                                }
                                                                z67 = this.drawPinnedBottom;
                                                                if (z67) {
                                                                }
                                                                if (!z67) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject3.type != 19) {
                                                                }
                                                                if (this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType == 5) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z21) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                if (stickerSetLinkIcon2 != null) {
                                                                }
                                                                textLayoutBlocks4 = null;
                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                r32 = z66;
                                                                r62 = textLayoutBlocks4;
                                                            }
                                                            messageObject16 = this.currentMessageObject;
                                                            if (!messageObject16.isRepostPreview) {
                                                            }
                                                            if (this.drawSideButton != 0) {
                                                            }
                                                            int dp27222 = AndroidUtilities.dp(48.0f);
                                                            int dp28222 = AndroidUtilities.dp(10.0f);
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            tLRPC$Document5 = tLRPC$Document4;
                                                            i75 = 0;
                                                            charSequence6 = str9;
                                                            i76 = this.drawInstantViewType;
                                                            if (i76 == 18) {
                                                            }
                                                            int dp29222 = AndroidUtilities.dp(20.0f);
                                                            if (this.hasInvoicePreview) {
                                                            }
                                                            String str29222 = str11;
                                                            if (this.drawInstantViewType == 17) {
                                                            }
                                                            int i156222 = maxMessageTextWidth - dp29222;
                                                            messageObject17 = this.currentMessageObject;
                                                            if (messageObject17.photoThumbs == null) {
                                                            }
                                                            this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            int max9222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                            if (string7 == null) {
                                                            }
                                                            max5 = 0;
                                                            if (str6 != null) {
                                                            }
                                                            if (str10 != null) {
                                                            }
                                                            if (z50) {
                                                            }
                                                            if (str12 != null) {
                                                            }
                                                            int i157222 = i77;
                                                            if (str8 != null) {
                                                            }
                                                            if (z47) {
                                                            }
                                                            z52 = z47;
                                                            if (!z52) {
                                                            }
                                                            if (this.drawInstantViewType != 17) {
                                                            }
                                                            tLRPC$Document8 = tLRPC$Document7;
                                                            webFile3 = webFile2;
                                                            i90 = this.documentAttachType;
                                                            if (i90 == 5) {
                                                            }
                                                            i91 = max9222;
                                                            messageObject3 = messageObject18;
                                                            i92 = i89;
                                                            z53 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                            z54 = true;
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            int i158222 = this.totalHeight;
                                                            if (this.drawInstantView) {
                                                            }
                                                            this.totalHeight = i158222 + AndroidUtilities.dp(i94 + i93);
                                                            createInstantViewButton();
                                                            z15 = z54;
                                                            z64 = z53;
                                                            this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                            z70 = z64;
                                                            if (this.hasFactCheck) {
                                                            }
                                                            z21 = z15;
                                                            c2 = 0;
                                                            r3 = z70;
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            c5 = c2;
                                                            messageObject19 = this.currentMessageObject;
                                                            if (messageObject19.eventId == 0) {
                                                            }
                                                            i127 = 3;
                                                            this.botButtons.clear();
                                                            if (z77) {
                                                            }
                                                            if (!messageObject3.isRestrictedMessage) {
                                                            }
                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                            z66 = r3;
                                                            if (this.drawCommentButton) {
                                                            }
                                                            if (this.hasFactCheck) {
                                                            }
                                                            z67 = this.drawPinnedBottom;
                                                            if (z67) {
                                                            }
                                                            if (!z67) {
                                                            }
                                                            if (!this.mediaBackground) {
                                                            }
                                                            if (messageObject3.type != 19) {
                                                            }
                                                            if (this.drawPhotoImage) {
                                                            }
                                                            if (this.documentAttachType == 5) {
                                                            }
                                                            calculateUnlockXY();
                                                            if (z21) {
                                                            }
                                                            updateAnimatedEmojis();
                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                            if (stickerSetLinkIcon2 != null) {
                                                            }
                                                            textLayoutBlocks4 = null;
                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                            r32 = z66;
                                                            r62 = textLayoutBlocks4;
                                                        }
                                                        int max72222 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                        this.backgroundWidth = max72222;
                                                        this.backgroundWidth = Math.max(max72222, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                        this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                        if (messageObject.isRoundVideo()) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                        this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        if (!messageObject.isSponsored()) {
                                                        }
                                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        messageObject15 = this.currentMessageObject;
                                                        if (messageObject15 != null) {
                                                        }
                                                        int max82222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                        messageTopicButton = this.topicButton;
                                                        if (messageTopicButton != null) {
                                                        }
                                                        max4 = Math.max(max82222, this.replyTextWidth);
                                                        if (this.commentLayout != null) {
                                                        }
                                                        if (this.hasLinkPreview) {
                                                        }
                                                        messageObject16 = this.currentMessageObject;
                                                        if (!messageObject16.isRepostPreview) {
                                                        }
                                                        if (this.drawSideButton != 0) {
                                                        }
                                                        int dp272222 = AndroidUtilities.dp(48.0f);
                                                        int dp282222 = AndroidUtilities.dp(10.0f);
                                                        if (!messageObject.isSponsored()) {
                                                        }
                                                        tLRPC$Document5 = tLRPC$Document4;
                                                        i75 = 0;
                                                        charSequence6 = str9;
                                                        i76 = this.drawInstantViewType;
                                                        if (i76 == 18) {
                                                        }
                                                        int dp292222 = AndroidUtilities.dp(20.0f);
                                                        if (this.hasInvoicePreview) {
                                                        }
                                                        String str292222 = str11;
                                                        if (this.drawInstantViewType == 17) {
                                                        }
                                                        int i1562222 = maxMessageTextWidth - dp292222;
                                                        messageObject17 = this.currentMessageObject;
                                                        if (messageObject17.photoThumbs == null) {
                                                        }
                                                        this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                        this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                        this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                        this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                        int max92222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                        if (string7 == null) {
                                                        }
                                                        max5 = 0;
                                                        if (str6 != null) {
                                                        }
                                                        if (str10 != null) {
                                                        }
                                                        if (z50) {
                                                        }
                                                        if (str12 != null) {
                                                        }
                                                        int i1572222 = i77;
                                                        if (str8 != null) {
                                                        }
                                                        if (z47) {
                                                        }
                                                        z52 = z47;
                                                        if (!z52) {
                                                        }
                                                        if (this.drawInstantViewType != 17) {
                                                        }
                                                        tLRPC$Document8 = tLRPC$Document7;
                                                        webFile3 = webFile2;
                                                        i90 = this.documentAttachType;
                                                        if (i90 == 5) {
                                                        }
                                                        i91 = max92222;
                                                        messageObject3 = messageObject18;
                                                        i92 = i89;
                                                        z53 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z54 = true;
                                                        if (!this.hasInvoicePreview) {
                                                        }
                                                        if (!this.hasInvoicePreview) {
                                                        }
                                                        int i1582222 = this.totalHeight;
                                                        if (this.drawInstantView) {
                                                        }
                                                        this.totalHeight = i1582222 + AndroidUtilities.dp(i94 + i93);
                                                        createInstantViewButton();
                                                        z15 = z54;
                                                        z64 = z53;
                                                        this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                        z70 = z64;
                                                        if (this.hasFactCheck) {
                                                        }
                                                        z21 = z15;
                                                        c2 = 0;
                                                        r3 = z70;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (!messageObject.isSponsored()) {
                                                        }
                                                        c5 = c2;
                                                        messageObject19 = this.currentMessageObject;
                                                        if (messageObject19.eventId == 0) {
                                                        }
                                                        i127 = 3;
                                                        this.botButtons.clear();
                                                        if (z77) {
                                                        }
                                                        if (!messageObject3.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                        z66 = r3;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        if (this.hasFactCheck) {
                                                        }
                                                        z67 = this.drawPinnedBottom;
                                                        if (z67) {
                                                        }
                                                        if (!z67) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject3.type != 19) {
                                                        }
                                                        if (this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType == 5) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z21) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                        if (stickerSetLinkIcon2 != null) {
                                                        }
                                                        textLayoutBlocks4 = null;
                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                        r32 = z66;
                                                        r62 = textLayoutBlocks4;
                                                    }
                                                }
                                                tLRPC$Document = null;
                                                tLRPC$ThemeSettings = null;
                                                z41 = false;
                                                arrayList3 = null;
                                                tL_stories$StoryItem = null;
                                                z43 = false;
                                                if (messageObject23.isRepostPreview) {
                                                }
                                                this.backgroundWidth = i153;
                                                if (this.hasLinkPreview) {
                                                }
                                                int max722222 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                this.backgroundWidth = max722222;
                                                this.backgroundWidth = Math.max(max722222, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                if (messageObject.isRoundVideo()) {
                                                }
                                                setMessageObjectInternal(messageObject);
                                                this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                if (messageObject.isSponsored()) {
                                                }
                                                if (!messageObject.isSponsored()) {
                                                }
                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                }
                                                if (this.drawPinnedTop) {
                                                }
                                                messageObject15 = this.currentMessageObject;
                                                if (messageObject15 != null) {
                                                }
                                                int max822222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                messageTopicButton = this.topicButton;
                                                if (messageTopicButton != null) {
                                                }
                                                max4 = Math.max(max822222, this.replyTextWidth);
                                                if (this.commentLayout != null) {
                                                }
                                                if (this.hasLinkPreview) {
                                                }
                                                messageObject16 = this.currentMessageObject;
                                                if (!messageObject16.isRepostPreview) {
                                                }
                                                if (this.drawSideButton != 0) {
                                                }
                                                int dp2722222 = AndroidUtilities.dp(48.0f);
                                                int dp2822222 = AndroidUtilities.dp(10.0f);
                                                if (!messageObject.isSponsored()) {
                                                }
                                                tLRPC$Document5 = tLRPC$Document4;
                                                i75 = 0;
                                                charSequence6 = str9;
                                                i76 = this.drawInstantViewType;
                                                if (i76 == 18) {
                                                }
                                                int dp2922222 = AndroidUtilities.dp(20.0f);
                                                if (this.hasInvoicePreview) {
                                                }
                                                String str2922222 = str11;
                                                if (this.drawInstantViewType == 17) {
                                                }
                                                int i15622222 = maxMessageTextWidth - dp2922222;
                                                messageObject17 = this.currentMessageObject;
                                                if (messageObject17.photoThumbs == null) {
                                                }
                                                this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                int max922222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                if (string7 == null) {
                                                }
                                                max5 = 0;
                                                if (str6 != null) {
                                                }
                                                if (str10 != null) {
                                                }
                                                if (z50) {
                                                }
                                                if (str12 != null) {
                                                }
                                                int i15722222 = i77;
                                                if (str8 != null) {
                                                }
                                                if (z47) {
                                                }
                                                z52 = z47;
                                                if (!z52) {
                                                }
                                                if (this.drawInstantViewType != 17) {
                                                }
                                                tLRPC$Document8 = tLRPC$Document7;
                                                webFile3 = webFile2;
                                                i90 = this.documentAttachType;
                                                if (i90 == 5) {
                                                }
                                                i91 = max922222;
                                                messageObject3 = messageObject18;
                                                i92 = i89;
                                                z53 = true;
                                                i2 = 4;
                                                z14 = false;
                                                z54 = true;
                                                if (!this.hasInvoicePreview) {
                                                }
                                                if (!this.hasInvoicePreview) {
                                                }
                                                int i15822222 = this.totalHeight;
                                                if (this.drawInstantView) {
                                                }
                                                this.totalHeight = i15822222 + AndroidUtilities.dp(i94 + i93);
                                                createInstantViewButton();
                                                z15 = z54;
                                                z64 = z53;
                                                this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                z70 = z64;
                                                if (this.hasFactCheck) {
                                                }
                                                z21 = z15;
                                                c2 = 0;
                                                r3 = z70;
                                                if (this.currentPosition != null) {
                                                }
                                                if (!messageObject.isSponsored()) {
                                                }
                                                c5 = c2;
                                                messageObject19 = this.currentMessageObject;
                                                if (messageObject19.eventId == 0) {
                                                }
                                                i127 = 3;
                                                this.botButtons.clear();
                                                if (z77) {
                                                }
                                                if (!messageObject3.isRestrictedMessage) {
                                                }
                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                this.keyboardHeight = z14 ? 1 : 0;
                                                z66 = r3;
                                                if (this.drawCommentButton) {
                                                }
                                                if (this.hasFactCheck) {
                                                }
                                                z67 = this.drawPinnedBottom;
                                                if (z67) {
                                                }
                                                if (!z67) {
                                                }
                                                if (!this.mediaBackground) {
                                                }
                                                if (messageObject3.type != 19) {
                                                }
                                                if (this.drawPhotoImage) {
                                                }
                                                if (this.documentAttachType == 5) {
                                                }
                                                calculateUnlockXY();
                                                if (z21) {
                                                }
                                                updateAnimatedEmojis();
                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                if (stickerSetLinkIcon2 != null) {
                                                }
                                                textLayoutBlocks4 = null;
                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                r32 = z66;
                                                r62 = textLayoutBlocks4;
                                            } else if (str27 != null) {
                                                String lowerCase = str27.toLowerCase();
                                                if ((lowerCase.equals("instagram") || lowerCase.equals("twitter") || "telegram_album".equals(str28)) && (tLRPC$WebPage.cached_page instanceof TLRPC$TL_page) && ((tLRPC$WebPage.photo instanceof TLRPC$TL_photo) || MessageObject.isVideoDocument(tLRPC$WebPage.document))) {
                                                    this.drawInstantView = false;
                                                    ArrayList<TLRPC$PageBlock> arrayList10 = MessageObject.getMedia(messageObject23.messageOwner).webpage.cached_page.blocks;
                                                    int i161 = 1;
                                                    for (int i162 = 0; i162 < arrayList10.size(); i162++) {
                                                        TLRPC$PageBlock tLRPC$PageBlock = arrayList10.get(i162);
                                                        if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockSlideshow) {
                                                            size = ((TLRPC$TL_pageBlockSlideshow) tLRPC$PageBlock).items.size();
                                                        } else {
                                                            if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockCollage) {
                                                                size = ((TLRPC$TL_pageBlockCollage) tLRPC$PageBlock).items.size();
                                                            }
                                                        }
                                                        i161 = size;
                                                    }
                                                    String formatString = LocaleController.formatString("Of", R.string.Of, 1, Integer.valueOf(i161));
                                                    this.photosCountWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatString));
                                                    String str30 = formatString;
                                                    this.photosCountLayout = new StaticLayout(str30, Theme.chat_durationPaint, this.photosCountWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    tLRPC$Document = null;
                                                    tLRPC$ThemeSettings = null;
                                                    z41 = false;
                                                    arrayList3 = null;
                                                    tL_stories$StoryItem = null;
                                                    z43 = true;
                                                    i68 = str30;
                                                    if (messageObject23.isRepostPreview) {
                                                        this.drawInstantView = false;
                                                    }
                                                    this.backgroundWidth = i153;
                                                    if ((this.hasLinkPreview && !this.linkPreviewAbove) || this.hasGamePreview || this.hasInvoicePreview || (i70 = i153 - (i69 = messageObject23.lastLineWidth)) < extraTimeX) {
                                                        int max7222222 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                                        this.backgroundWidth = max7222222;
                                                        this.backgroundWidth = Math.max(max7222222, this.timeWidth + AndroidUtilities.dp(31.0f));
                                                    } else if (i70 >= 0 && i70 <= extraTimeX) {
                                                        this.backgroundWidth = ((i153 + extraTimeX) - i70) + AndroidUtilities.dp(31.0f);
                                                    } else {
                                                        this.backgroundWidth = Math.max(i153, i69 + extraTimeX) + AndroidUtilities.dp(31.0f);
                                                    }
                                                    this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                    if (messageObject.isRoundVideo()) {
                                                        tLRPC$Document2 = tLRPC$Document;
                                                        tL_stories$StoryItem2 = tL_stories$StoryItem;
                                                        z44 = z43;
                                                    } else {
                                                        double d2 = this.availableTimeWidth;
                                                        TLRPC$Document tLRPC$Document14 = tLRPC$Document;
                                                        double ceil6 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                                        if (messageObject.isOutOwner()) {
                                                            tL_stories$StoryItem2 = tL_stories$StoryItem;
                                                            z44 = z43;
                                                            tLRPC$Document2 = tLRPC$Document14;
                                                            i71 = 0;
                                                        } else {
                                                            tL_stories$StoryItem2 = tL_stories$StoryItem;
                                                            z44 = z43;
                                                            tLRPC$Document2 = tLRPC$Document14;
                                                            i71 = AndroidUtilities.dp(64.0f);
                                                        }
                                                        double d3 = i71;
                                                        Double.isNaN(d3);
                                                        Double.isNaN(d2);
                                                        this.availableTimeWidth = (int) (d2 - (ceil6 + d3));
                                                    }
                                                    setMessageObjectInternal(messageObject);
                                                    this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                    this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                                    if (messageObject.isSponsored()) {
                                                        this.backgroundWidth = messageObject23.textWidth + (getExtraTextX() * 2) + ((this.hasGamePreview || this.hasInvoicePreview) ? AndroidUtilities.dp(10.0f) : 0);
                                                    } else if (AndroidUtilities.isTablet()) {
                                                        this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(50.0f), AndroidUtilities.dp(270.0f));
                                                    } else {
                                                        this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(50.0f), AndroidUtilities.dp(270.0f));
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                        this.totalHeight = AndroidUtilities.dp(22.5f);
                                                    } else {
                                                        this.totalHeight = messageObject.textHeight() + AndroidUtilities.dp(19.5f) + this.namesOffset;
                                                    }
                                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                                        if (messageObject.isGiveaway()) {
                                                            measuredWidth = this.giveawayMessageCell.getMeasuredWidth();
                                                        } else {
                                                            measuredWidth = !messageObject.isGiveawayResults() ? i153 : this.giveawayResultsMessageCell.getMeasuredWidth();
                                                        }
                                                        this.reactionsLayoutInBubble.measure(measuredWidth, 3);
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble8 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble8.isEmpty) {
                                                            reactionsLayoutInBubble8.totalHeight = reactionsLayoutInBubble8.height + AndroidUtilities.dp(8.0f);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble9 = this.reactionsLayoutInBubble;
                                                            int i163 = reactionsLayoutInBubble9.width;
                                                            if (i163 > this.backgroundWidth) {
                                                                this.backgroundWidth = i163;
                                                            }
                                                            this.totalHeight += reactionsLayoutInBubble9.totalHeight;
                                                        }
                                                    }
                                                    if (this.drawPinnedTop) {
                                                        this.namesOffset -= AndroidUtilities.dp(1.0f);
                                                    }
                                                    messageObject15 = this.currentMessageObject;
                                                    if (messageObject15 != null && messageObject15.hasCodeAtTop && this.namesOffset > 0) {
                                                        this.totalHeight += AndroidUtilities.dp(5.0f);
                                                    }
                                                    int max8222222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                                    messageTopicButton = this.topicButton;
                                                    if (messageTopicButton != null) {
                                                        max8222222 = Math.max(max8222222, messageTopicButton.width());
                                                    }
                                                    max4 = Math.max(max8222222, this.replyTextWidth);
                                                    if (this.commentLayout != null && this.drawSideButton != 3) {
                                                        max4 = Math.max(max4, this.totalCommentWidth);
                                                    }
                                                    if (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
                                                        messageObject16 = this.currentMessageObject;
                                                        if (!messageObject16.isRepostPreview) {
                                                            maxMessageTextWidth = messageObject16.getMaxMessageTextWidth();
                                                        } else {
                                                            if (AndroidUtilities.isTablet()) {
                                                                minTabletSide7 = AndroidUtilities.getMinTabletSide();
                                                                dp18 = AndroidUtilities.dp((!z10 ? 0 : 52) + 80);
                                                            } else {
                                                                minTabletSide7 = getParentWidth();
                                                                dp18 = AndroidUtilities.dp((!z10 ? 0 : 52) + 80);
                                                            }
                                                            maxMessageTextWidth = minTabletSide7 - dp18;
                                                        }
                                                        if (this.drawSideButton != 0) {
                                                            MessageObject messageObject27 = this.currentMessageObject;
                                                            maxMessageTextWidth -= AndroidUtilities.dp((messageObject27.isSaved && messageObject27.isOutOwner()) ? 25.0f : 20.0f);
                                                        }
                                                        int dp27222222 = AndroidUtilities.dp(48.0f);
                                                        int dp28222222 = AndroidUtilities.dp(10.0f);
                                                        if (!messageObject.isSponsored()) {
                                                            int i164 = maxMessageTextWidth;
                                                            TL_stories$StoryItem tL_stories$StoryItem7 = tL_stories$StoryItem2;
                                                            if (messageObject23.sponsoredCanReport) {
                                                                string4 = LocaleController.getString(R.string.SponsoredMessageAd);
                                                                string5 = LocaleController.getString(R.string.SponsoredMessageAdWhatIsThis);
                                                            } else {
                                                                if (messageObject23.sponsoredRecommended) {
                                                                    string6 = LocaleController.getString(R.string.SponsoredMessage2Recommended);
                                                                } else {
                                                                    string6 = LocaleController.getString(R.string.SponsoredMessage2);
                                                                }
                                                                string4 = string6;
                                                                string5 = null;
                                                            }
                                                            String str31 = messageObject23.customName;
                                                            if (str31 == null) {
                                                                str31 = getAuthorName();
                                                            }
                                                            CharSequence charSequence9 = messageObject23.messageText;
                                                            if (charSequence9 == null) {
                                                                str3 = string5;
                                                                charSequence4 = null;
                                                            } else {
                                                                charSequence4 = charSequence9.toString();
                                                                str3 = string5;
                                                            }
                                                            TLRPC$Photo tLRPC$Photo7 = messageObject23.sponsoredPhoto;
                                                            this.isSmallImage = tLRPC$Photo7 != null;
                                                            TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject23.sponsoredMedia;
                                                            if (tLRPC$MessageMedia3 == null) {
                                                                str4 = str31;
                                                                charSequence5 = charSequence9;
                                                                tLRPC$Document4 = null;
                                                                z45 = false;
                                                                z46 = true;
                                                                i72 = 0;
                                                                str5 = string4;
                                                                tLRPC$Photo2 = tLRPC$Photo7;
                                                            } else {
                                                                str4 = str31;
                                                                if (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaDocument) {
                                                                    TLRPC$Document tLRPC$Document15 = ((TLRPC$TL_messageMediaDocument) tLRPC$MessageMedia3).document;
                                                                    String str32 = string4;
                                                                    charSequence5 = charSequence9;
                                                                    documentDuration = (int) MessageObject.getDocumentDuration(tLRPC$Document15);
                                                                    tLRPC$Document3 = tLRPC$Document15;
                                                                    tLRPC$Photo = tLRPC$Photo7;
                                                                    str5 = str32;
                                                                    z45 = false;
                                                                } else if (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) {
                                                                    tLRPC$Photo = ((TLRPC$TL_messageMediaPhoto) tLRPC$MessageMedia3).photo;
                                                                    str5 = string4;
                                                                    charSequence5 = charSequence9;
                                                                    z45 = false;
                                                                    tLRPC$Document3 = null;
                                                                    documentDuration = 0;
                                                                } else {
                                                                    charSequence5 = charSequence9;
                                                                    tLRPC$Photo = tLRPC$Photo7;
                                                                    z45 = false;
                                                                    documentDuration = 0;
                                                                    str5 = string4;
                                                                    tLRPC$Document3 = null;
                                                                }
                                                                this.isSmallImage = z45;
                                                                i72 = documentDuration;
                                                                z46 = false;
                                                                TLRPC$Document tLRPC$Document16 = tLRPC$Document3;
                                                                tLRPC$Photo2 = tLRPC$Photo;
                                                                tLRPC$Document4 = tLRPC$Document16;
                                                            }
                                                            this.linkPreviewAbove = z45;
                                                            i73 = i153;
                                                            z47 = z46;
                                                            maxMessageTextWidth = i164;
                                                            str6 = str3;
                                                            i74 = i72;
                                                            str7 = null;
                                                            z48 = z41;
                                                            str8 = charSequence4;
                                                            str9 = str5;
                                                            str10 = str4;
                                                            webFile = null;
                                                            tL_stories$StoryItem3 = tL_stories$StoryItem7;
                                                            arrayList4 = arrayList3;
                                                            str11 = null;
                                                        } else {
                                                            int i165 = this.drawInstantViewType;
                                                            if (i165 == 19) {
                                                                this.isSmallImage = false;
                                                                this.linkPreviewAbove = false;
                                                                i73 = i153;
                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                arrayList4 = arrayList3;
                                                                maxMessageTextWidth = maxMessageTextWidth;
                                                                i75 = 0;
                                                                str11 = null;
                                                                tLRPC$Document5 = null;
                                                                tLRPC$Photo2 = null;
                                                                str7 = null;
                                                                str10 = null;
                                                                str8 = null;
                                                                charSequence5 = null;
                                                                charSequence6 = null;
                                                                z47 = false;
                                                                i74 = 0;
                                                                str6 = null;
                                                                z48 = z41;
                                                                webFile = null;
                                                            } else if (i165 == 17) {
                                                                int i166 = maxMessageTextWidth;
                                                                if (tL_stories$StoryItem2 != null) {
                                                                    tL_stories$StoryItem5 = tL_stories$StoryItem2;
                                                                    tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(tL_stories$StoryItem5.dialogId));
                                                                } else {
                                                                    tL_stories$StoryItem5 = tL_stories$StoryItem2;
                                                                    tLRPC$User = null;
                                                                }
                                                                if (tL_stories$StoryItem5 instanceof TL_stories$TL_storyItemDeleted) {
                                                                    dp17 = AndroidUtilities.dp(14.0f);
                                                                    createExpiredStoryString = StoriesUtilities.createExpiredStoryString();
                                                                } else {
                                                                    if (tLRPC$User != null) {
                                                                        createExpiredStoryString = UserObject.getUserName(tLRPC$User);
                                                                    } else {
                                                                        createExpiredStoryString = tLRPC$WebPage != null ? tLRPC$WebPage.title : null;
                                                                    }
                                                                    dp17 = 0;
                                                                }
                                                                if (tL_stories$StoryItem5 == null) {
                                                                    str17 = tLRPC$WebPage != null ? tLRPC$WebPage.description : null;
                                                                } else {
                                                                    str17 = tL_stories$StoryItem5.caption;
                                                                }
                                                                if (tL_stories$StoryItem5 == null || (tLRPC$MessageMedia2 = tL_stories$StoryItem5.media) == null || (tLRPC$Document9 = tLRPC$MessageMedia2.document) == null) {
                                                                    tLRPC$Document9 = tLRPC$WebPage != null ? tLRPC$WebPage.document : null;
                                                                }
                                                                if (tL_stories$StoryItem5 == null) {
                                                                    str8 = str17;
                                                                } else {
                                                                    str8 = str17;
                                                                    TLRPC$MessageMedia tLRPC$MessageMedia4 = tL_stories$StoryItem5.media;
                                                                    if (tLRPC$MessageMedia4 != null) {
                                                                        tLRPC$Photo5 = tLRPC$MessageMedia4.photo;
                                                                    }
                                                                }
                                                                tLRPC$Photo5 = tLRPC$WebPage != null ? tLRPC$WebPage.photo : null;
                                                                String str33 = tLRPC$WebPage != null ? tLRPC$WebPage.type : null;
                                                                if (tL_stories$StoryItem5 == null) {
                                                                    str18 = str33;
                                                                } else {
                                                                    str18 = str33;
                                                                    TLRPC$MessageMedia tLRPC$MessageMedia5 = tL_stories$StoryItem5.media;
                                                                    if (tLRPC$MessageMedia5 != null && (tLRPC$Document10 = tLRPC$MessageMedia5.document) != null) {
                                                                        charSequence8 = createExpiredStoryString;
                                                                        i112 = dp17;
                                                                        documentDuration2 = (int) MessageObject.getDocumentDuration(tLRPC$Document10);
                                                                        z62 = false;
                                                                        this.isSmallImage = z62;
                                                                        TLRPC$Message tLRPC$Message9 = this.currentMessageObject.messageOwner;
                                                                        this.linkPreviewAbove = tLRPC$Message9 != null && tLRPC$Message9.invert_media;
                                                                        tLRPC$Photo2 = tLRPC$Photo5;
                                                                        i73 = i153;
                                                                        i74 = documentDuration2;
                                                                        maxMessageTextWidth = i166;
                                                                        charSequence6 = charSequence8;
                                                                        i75 = i112;
                                                                        str7 = null;
                                                                        charSequence5 = null;
                                                                        z47 = false;
                                                                        str6 = null;
                                                                        tL_stories$StoryItem3 = tL_stories$StoryItem5;
                                                                        z48 = z41;
                                                                        str11 = str18;
                                                                        webFile = null;
                                                                        arrayList4 = arrayList3;
                                                                        tLRPC$Document5 = tLRPC$Document9;
                                                                        str10 = null;
                                                                    }
                                                                }
                                                                charSequence8 = createExpiredStoryString;
                                                                i112 = dp17;
                                                                z62 = false;
                                                                documentDuration2 = 0;
                                                                this.isSmallImage = z62;
                                                                TLRPC$Message tLRPC$Message92 = this.currentMessageObject.messageOwner;
                                                                if (tLRPC$Message92 != null) {
                                                                    this.linkPreviewAbove = tLRPC$Message92 != null && tLRPC$Message92.invert_media;
                                                                    tLRPC$Photo2 = tLRPC$Photo5;
                                                                    i73 = i153;
                                                                    i74 = documentDuration2;
                                                                    maxMessageTextWidth = i166;
                                                                    charSequence6 = charSequence8;
                                                                    i75 = i112;
                                                                    str7 = null;
                                                                    charSequence5 = null;
                                                                    z47 = false;
                                                                    str6 = null;
                                                                    tL_stories$StoryItem3 = tL_stories$StoryItem5;
                                                                    z48 = z41;
                                                                    str11 = str18;
                                                                    webFile = null;
                                                                    arrayList4 = arrayList3;
                                                                    tLRPC$Document5 = tLRPC$Document9;
                                                                    str10 = null;
                                                                }
                                                                this.linkPreviewAbove = tLRPC$Message92 != null && tLRPC$Message92.invert_media;
                                                                tLRPC$Photo2 = tLRPC$Photo5;
                                                                i73 = i153;
                                                                i74 = documentDuration2;
                                                                maxMessageTextWidth = i166;
                                                                charSequence6 = charSequence8;
                                                                i75 = i112;
                                                                str7 = null;
                                                                charSequence5 = null;
                                                                z47 = false;
                                                                str6 = null;
                                                                tL_stories$StoryItem3 = tL_stories$StoryItem5;
                                                                z48 = z41;
                                                                str11 = str18;
                                                                webFile = null;
                                                                arrayList4 = arrayList3;
                                                                tLRPC$Document5 = tLRPC$Document9;
                                                                str10 = null;
                                                            } else if (this.hasLinkPreview) {
                                                                TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) tLRPC$WebPage;
                                                                String str34 = tLRPC$TL_webPage.site_name;
                                                                if (i165 != 6 && i165 != 7) {
                                                                    str19 = tLRPC$TL_webPage.title;
                                                                    i113 = maxMessageTextWidth;
                                                                    i114 = 6;
                                                                    if (i165 != i114 && i165 != 7) {
                                                                        str20 = tLRPC$TL_webPage.author;
                                                                        i115 = 6;
                                                                        if (i165 != i115 && i165 != 7) {
                                                                            str21 = tLRPC$TL_webPage.description;
                                                                            TLRPC$Photo tLRPC$Photo8 = tLRPC$TL_webPage.photo;
                                                                            String str35 = str19;
                                                                            if (i165 != 7) {
                                                                                themeDocument = tLRPC$ThemeSettings == null ? tLRPC$Document2 : new DocumentObject.ThemeDocument(tLRPC$ThemeSettings);
                                                                            } else {
                                                                                themeDocument = tLRPC$TL_webPage.document;
                                                                            }
                                                                            str11 = tLRPC$TL_webPage.type;
                                                                            i116 = tLRPC$TL_webPage.duration;
                                                                            if (str34 == null || tLRPC$Photo8 == null) {
                                                                                i117 = i116;
                                                                            } else {
                                                                                i117 = i116;
                                                                                if (str34.toString().toLowerCase().equals("instagram")) {
                                                                                    i113 = Math.max(AndroidUtilities.displaySize.y / 3, this.currentMessageObject.textWidth);
                                                                                }
                                                                            }
                                                                            boolean z84 = "app".equals(str11) || "profile".equals(str11) || "article".equals(str11) || "telegram_bot".equals(str11) || "telegram_user".equals(str11) || "telegram_channel".equals(str11) || "telegram_megagroup".equals(str11) || "telegram_voicechat".equals(str11) || "telegram_videochat".equals(str11) || "telegram_livestream".equals(str11) || "telegram_channel_boost".equals(str11) || "telegram_group_boost".equals(str11);
                                                                            if (z44) {
                                                                                if (this.drawInstantView) {
                                                                                    int i167 = this.drawInstantViewType;
                                                                                    tLRPC$Photo6 = tLRPC$Photo8;
                                                                                    if (i167 != 1) {
                                                                                        if (i167 != 2) {
                                                                                            if (i167 != 9) {
                                                                                                if (i167 != 11) {
                                                                                                    if (i167 != 25) {
                                                                                                        if (i167 != 13) {
                                                                                                            if (i167 != 18) {
                                                                                                                if (i167 != 20) {
                                                                                                                    if (i167 != 22) {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    tLRPC$Photo6 = tLRPC$Photo8;
                                                                                }
                                                                                if (themeDocument == null) {
                                                                                }
                                                                            } else {
                                                                                tLRPC$Photo6 = tLRPC$Photo8;
                                                                            }
                                                                            i119 = this.drawInstantViewType;
                                                                            if ((i119 != 23 && i119 != 24) || arrayList3 == null || arrayList3.isEmpty()) {
                                                                                z63 = false;
                                                                                media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                                if (media != null) {
                                                                                    tLRPC$Document11 = themeDocument;
                                                                                } else {
                                                                                    int i168 = this.drawInstantViewType;
                                                                                    tLRPC$Document11 = themeDocument;
                                                                                    if (i168 != 23 && i168 != 24 && i168 != 25) {
                                                                                        if (media.force_large_media) {
                                                                                            z63 = false;
                                                                                        }
                                                                                        if (media.force_small_media) {
                                                                                            z63 = true;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                MessageObject messageObject28 = this.currentMessageObject;
                                                                                TLRPC$Message tLRPC$Message10 = messageObject28.messageOwner;
                                                                                this.linkPreviewAbove = tLRPC$Message10 != null && tLRPC$Message10.invert_media;
                                                                                this.isSmallImage = ((!z63 || str11 == null || messageObject28.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                                i73 = i153;
                                                                                maxMessageTextWidth = i113;
                                                                                tLRPC$Photo2 = tLRPC$Photo6;
                                                                                str10 = str35;
                                                                                str6 = null;
                                                                                z48 = z41;
                                                                                i74 = i117;
                                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                                str8 = str21;
                                                                                webFile = null;
                                                                                z47 = z63;
                                                                                arrayList4 = arrayList3;
                                                                                tLRPC$Document5 = tLRPC$Document11;
                                                                                i75 = 0;
                                                                                charSequence6 = str34;
                                                                                str7 = str20;
                                                                                charSequence5 = null;
                                                                            }
                                                                            z63 = true;
                                                                            media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                            if (media != null) {
                                                                            }
                                                                            MessageObject messageObject282 = this.currentMessageObject;
                                                                            TLRPC$Message tLRPC$Message102 = messageObject282.messageOwner;
                                                                            if (tLRPC$Message102 != null) {
                                                                                this.linkPreviewAbove = tLRPC$Message102 != null && tLRPC$Message102.invert_media;
                                                                                if (!z63) {
                                                                                    this.isSmallImage = ((!z63 || str11 == null || messageObject282.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                                    i73 = i153;
                                                                                    maxMessageTextWidth = i113;
                                                                                    tLRPC$Photo2 = tLRPC$Photo6;
                                                                                    str10 = str35;
                                                                                    str6 = null;
                                                                                    z48 = z41;
                                                                                    i74 = i117;
                                                                                    tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                                    str8 = str21;
                                                                                    webFile = null;
                                                                                    z47 = z63;
                                                                                    arrayList4 = arrayList3;
                                                                                    tLRPC$Document5 = tLRPC$Document11;
                                                                                    i75 = 0;
                                                                                    charSequence6 = str34;
                                                                                    str7 = str20;
                                                                                    charSequence5 = null;
                                                                                }
                                                                                this.isSmallImage = ((!z63 || str11 == null || messageObject282.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                                i73 = i153;
                                                                                maxMessageTextWidth = i113;
                                                                                tLRPC$Photo2 = tLRPC$Photo6;
                                                                                str10 = str35;
                                                                                str6 = null;
                                                                                z48 = z41;
                                                                                i74 = i117;
                                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                                str8 = str21;
                                                                                webFile = null;
                                                                                z47 = z63;
                                                                                arrayList4 = arrayList3;
                                                                                tLRPC$Document5 = tLRPC$Document11;
                                                                                i75 = 0;
                                                                                charSequence6 = str34;
                                                                                str7 = str20;
                                                                                charSequence5 = null;
                                                                            }
                                                                            this.linkPreviewAbove = tLRPC$Message102 != null && tLRPC$Message102.invert_media;
                                                                            this.isSmallImage = ((!z63 || str11 == null || messageObject282.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                            i73 = i153;
                                                                            maxMessageTextWidth = i113;
                                                                            tLRPC$Photo2 = tLRPC$Photo6;
                                                                            str10 = str35;
                                                                            str6 = null;
                                                                            z48 = z41;
                                                                            i74 = i117;
                                                                            tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                            str8 = str21;
                                                                            webFile = null;
                                                                            z47 = z63;
                                                                            arrayList4 = arrayList3;
                                                                            tLRPC$Document5 = tLRPC$Document11;
                                                                            i75 = 0;
                                                                            charSequence6 = str34;
                                                                            str7 = str20;
                                                                            charSequence5 = null;
                                                                        }
                                                                        str21 = null;
                                                                        TLRPC$Photo tLRPC$Photo82 = tLRPC$TL_webPage.photo;
                                                                        String str352 = str19;
                                                                        if (i165 != 7) {
                                                                        }
                                                                        str11 = tLRPC$TL_webPage.type;
                                                                        i116 = tLRPC$TL_webPage.duration;
                                                                        if (str34 == null) {
                                                                            i117 = i116;
                                                                            if (str34.toString().toLowerCase().equals("instagram")) {
                                                                            }
                                                                            if ("app".equals(str11)) {
                                                                                if (z44) {
                                                                                }
                                                                                i119 = this.drawInstantViewType;
                                                                                if (i119 != 23) {
                                                                                    z63 = false;
                                                                                    media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                                    if (media != null) {
                                                                                    }
                                                                                    MessageObject messageObject2822 = this.currentMessageObject;
                                                                                    TLRPC$Message tLRPC$Message1022 = messageObject2822.messageOwner;
                                                                                    this.linkPreviewAbove = tLRPC$Message1022 != null && tLRPC$Message1022.invert_media;
                                                                                    this.isSmallImage = ((!z63 || str11 == null || messageObject2822.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                                    i73 = i153;
                                                                                    maxMessageTextWidth = i113;
                                                                                    tLRPC$Photo2 = tLRPC$Photo6;
                                                                                    str10 = str352;
                                                                                    str6 = null;
                                                                                    z48 = z41;
                                                                                    i74 = i117;
                                                                                    tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                                    str8 = str21;
                                                                                    webFile = null;
                                                                                    z47 = z63;
                                                                                    arrayList4 = arrayList3;
                                                                                    tLRPC$Document5 = tLRPC$Document11;
                                                                                    i75 = 0;
                                                                                    charSequence6 = str34;
                                                                                    str7 = str20;
                                                                                    charSequence5 = null;
                                                                                }
                                                                                z63 = false;
                                                                                media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                                if (media != null) {
                                                                                }
                                                                                MessageObject messageObject28222 = this.currentMessageObject;
                                                                                TLRPC$Message tLRPC$Message10222 = messageObject28222.messageOwner;
                                                                                this.linkPreviewAbove = tLRPC$Message10222 != null && tLRPC$Message10222.invert_media;
                                                                                this.isSmallImage = ((!z63 || str11 == null || messageObject28222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                                i73 = i153;
                                                                                maxMessageTextWidth = i113;
                                                                                tLRPC$Photo2 = tLRPC$Photo6;
                                                                                str10 = str352;
                                                                                str6 = null;
                                                                                z48 = z41;
                                                                                i74 = i117;
                                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                                str8 = str21;
                                                                                webFile = null;
                                                                                z47 = z63;
                                                                                arrayList4 = arrayList3;
                                                                                tLRPC$Document5 = tLRPC$Document11;
                                                                                i75 = 0;
                                                                                charSequence6 = str34;
                                                                                str7 = str20;
                                                                                charSequence5 = null;
                                                                            }
                                                                            if (z44) {
                                                                            }
                                                                            i119 = this.drawInstantViewType;
                                                                            if (i119 != 23) {
                                                                            }
                                                                            z63 = false;
                                                                            media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                            if (media != null) {
                                                                            }
                                                                            MessageObject messageObject282222 = this.currentMessageObject;
                                                                            TLRPC$Message tLRPC$Message102222 = messageObject282222.messageOwner;
                                                                            this.linkPreviewAbove = tLRPC$Message102222 != null && tLRPC$Message102222.invert_media;
                                                                            this.isSmallImage = ((!z63 || str11 == null || messageObject282222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                            i73 = i153;
                                                                            maxMessageTextWidth = i113;
                                                                            tLRPC$Photo2 = tLRPC$Photo6;
                                                                            str10 = str352;
                                                                            str6 = null;
                                                                            z48 = z41;
                                                                            i74 = i117;
                                                                            tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                            str8 = str21;
                                                                            webFile = null;
                                                                            z47 = z63;
                                                                            arrayList4 = arrayList3;
                                                                            tLRPC$Document5 = tLRPC$Document11;
                                                                            i75 = 0;
                                                                            charSequence6 = str34;
                                                                            str7 = str20;
                                                                            charSequence5 = null;
                                                                        }
                                                                        i117 = i116;
                                                                        if ("app".equals(str11)) {
                                                                        }
                                                                        if (z44) {
                                                                        }
                                                                        i119 = this.drawInstantViewType;
                                                                        if (i119 != 23) {
                                                                        }
                                                                        z63 = false;
                                                                        media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                        if (media != null) {
                                                                        }
                                                                        MessageObject messageObject2822222 = this.currentMessageObject;
                                                                        TLRPC$Message tLRPC$Message1022222 = messageObject2822222.messageOwner;
                                                                        this.linkPreviewAbove = tLRPC$Message1022222 != null && tLRPC$Message1022222.invert_media;
                                                                        this.isSmallImage = ((!z63 || str11 == null || messageObject2822222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                        i73 = i153;
                                                                        maxMessageTextWidth = i113;
                                                                        tLRPC$Photo2 = tLRPC$Photo6;
                                                                        str10 = str352;
                                                                        str6 = null;
                                                                        z48 = z41;
                                                                        i74 = i117;
                                                                        tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                        str8 = str21;
                                                                        webFile = null;
                                                                        z47 = z63;
                                                                        arrayList4 = arrayList3;
                                                                        tLRPC$Document5 = tLRPC$Document11;
                                                                        i75 = 0;
                                                                        charSequence6 = str34;
                                                                        str7 = str20;
                                                                        charSequence5 = null;
                                                                    }
                                                                    i115 = 6;
                                                                    str20 = null;
                                                                    if (i165 != i115) {
                                                                        str21 = tLRPC$TL_webPage.description;
                                                                        TLRPC$Photo tLRPC$Photo822 = tLRPC$TL_webPage.photo;
                                                                        String str3522 = str19;
                                                                        if (i165 != 7) {
                                                                        }
                                                                        str11 = tLRPC$TL_webPage.type;
                                                                        i116 = tLRPC$TL_webPage.duration;
                                                                        if (str34 == null) {
                                                                        }
                                                                        i117 = i116;
                                                                        if ("app".equals(str11)) {
                                                                        }
                                                                        if (z44) {
                                                                        }
                                                                        i119 = this.drawInstantViewType;
                                                                        if (i119 != 23) {
                                                                        }
                                                                        z63 = false;
                                                                        media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                        if (media != null) {
                                                                        }
                                                                        MessageObject messageObject28222222 = this.currentMessageObject;
                                                                        TLRPC$Message tLRPC$Message10222222 = messageObject28222222.messageOwner;
                                                                        this.linkPreviewAbove = tLRPC$Message10222222 != null && tLRPC$Message10222222.invert_media;
                                                                        this.isSmallImage = ((!z63 || str11 == null || messageObject28222222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                        i73 = i153;
                                                                        maxMessageTextWidth = i113;
                                                                        tLRPC$Photo2 = tLRPC$Photo6;
                                                                        str10 = str3522;
                                                                        str6 = null;
                                                                        z48 = z41;
                                                                        i74 = i117;
                                                                        tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                        str8 = str21;
                                                                        webFile = null;
                                                                        z47 = z63;
                                                                        arrayList4 = arrayList3;
                                                                        tLRPC$Document5 = tLRPC$Document11;
                                                                        i75 = 0;
                                                                        charSequence6 = str34;
                                                                        str7 = str20;
                                                                        charSequence5 = null;
                                                                    }
                                                                    str21 = null;
                                                                    TLRPC$Photo tLRPC$Photo8222 = tLRPC$TL_webPage.photo;
                                                                    String str35222 = str19;
                                                                    if (i165 != 7) {
                                                                    }
                                                                    str11 = tLRPC$TL_webPage.type;
                                                                    i116 = tLRPC$TL_webPage.duration;
                                                                    if (str34 == null) {
                                                                    }
                                                                    i117 = i116;
                                                                    if ("app".equals(str11)) {
                                                                    }
                                                                    if (z44) {
                                                                    }
                                                                    i119 = this.drawInstantViewType;
                                                                    if (i119 != 23) {
                                                                    }
                                                                    z63 = false;
                                                                    media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                    if (media != null) {
                                                                    }
                                                                    MessageObject messageObject282222222 = this.currentMessageObject;
                                                                    TLRPC$Message tLRPC$Message102222222 = messageObject282222222.messageOwner;
                                                                    this.linkPreviewAbove = tLRPC$Message102222222 != null && tLRPC$Message102222222.invert_media;
                                                                    this.isSmallImage = ((!z63 || str11 == null || messageObject282222222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                    i73 = i153;
                                                                    maxMessageTextWidth = i113;
                                                                    tLRPC$Photo2 = tLRPC$Photo6;
                                                                    str10 = str35222;
                                                                    str6 = null;
                                                                    z48 = z41;
                                                                    i74 = i117;
                                                                    tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                    str8 = str21;
                                                                    webFile = null;
                                                                    z47 = z63;
                                                                    arrayList4 = arrayList3;
                                                                    tLRPC$Document5 = tLRPC$Document11;
                                                                    i75 = 0;
                                                                    charSequence6 = str34;
                                                                    str7 = str20;
                                                                    charSequence5 = null;
                                                                }
                                                                i113 = maxMessageTextWidth;
                                                                i114 = 6;
                                                                str19 = null;
                                                                if (i165 != i114) {
                                                                    str20 = tLRPC$TL_webPage.author;
                                                                    i115 = 6;
                                                                    if (i165 != i115) {
                                                                    }
                                                                    str21 = null;
                                                                    TLRPC$Photo tLRPC$Photo82222 = tLRPC$TL_webPage.photo;
                                                                    String str352222 = str19;
                                                                    if (i165 != 7) {
                                                                    }
                                                                    str11 = tLRPC$TL_webPage.type;
                                                                    i116 = tLRPC$TL_webPage.duration;
                                                                    if (str34 == null) {
                                                                    }
                                                                    i117 = i116;
                                                                    if ("app".equals(str11)) {
                                                                    }
                                                                    if (z44) {
                                                                    }
                                                                    i119 = this.drawInstantViewType;
                                                                    if (i119 != 23) {
                                                                    }
                                                                    z63 = false;
                                                                    media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                    if (media != null) {
                                                                    }
                                                                    MessageObject messageObject2822222222 = this.currentMessageObject;
                                                                    TLRPC$Message tLRPC$Message1022222222 = messageObject2822222222.messageOwner;
                                                                    this.linkPreviewAbove = tLRPC$Message1022222222 != null && tLRPC$Message1022222222.invert_media;
                                                                    this.isSmallImage = ((!z63 || str11 == null || messageObject2822222222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                    i73 = i153;
                                                                    maxMessageTextWidth = i113;
                                                                    tLRPC$Photo2 = tLRPC$Photo6;
                                                                    str10 = str352222;
                                                                    str6 = null;
                                                                    z48 = z41;
                                                                    i74 = i117;
                                                                    tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                    str8 = str21;
                                                                    webFile = null;
                                                                    z47 = z63;
                                                                    arrayList4 = arrayList3;
                                                                    tLRPC$Document5 = tLRPC$Document11;
                                                                    i75 = 0;
                                                                    charSequence6 = str34;
                                                                    str7 = str20;
                                                                    charSequence5 = null;
                                                                }
                                                                i115 = 6;
                                                                str20 = null;
                                                                if (i165 != i115) {
                                                                }
                                                                str21 = null;
                                                                TLRPC$Photo tLRPC$Photo822222 = tLRPC$TL_webPage.photo;
                                                                String str3522222 = str19;
                                                                if (i165 != 7) {
                                                                }
                                                                str11 = tLRPC$TL_webPage.type;
                                                                i116 = tLRPC$TL_webPage.duration;
                                                                if (str34 == null) {
                                                                }
                                                                i117 = i116;
                                                                if ("app".equals(str11)) {
                                                                }
                                                                if (z44) {
                                                                }
                                                                i119 = this.drawInstantViewType;
                                                                if (i119 != 23) {
                                                                }
                                                                z63 = false;
                                                                media = MessageObject.getMedia(messageObject23.messageOwner);
                                                                if (media != null) {
                                                                }
                                                                MessageObject messageObject28222222222 = this.currentMessageObject;
                                                                TLRPC$Message tLRPC$Message10222222222 = messageObject28222222222.messageOwner;
                                                                this.linkPreviewAbove = tLRPC$Message10222222222 != null && tLRPC$Message10222222222.invert_media;
                                                                this.isSmallImage = ((!z63 || str11 == null || messageObject28222222222.photoThumbs == null) && (((i118 = this.drawInstantViewType) != 23 && i118 != 24) || arrayList3 == null || arrayList3.isEmpty())) ? false : true;
                                                                i73 = i153;
                                                                maxMessageTextWidth = i113;
                                                                tLRPC$Photo2 = tLRPC$Photo6;
                                                                str10 = str3522222;
                                                                str6 = null;
                                                                z48 = z41;
                                                                i74 = i117;
                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                str8 = str21;
                                                                webFile = null;
                                                                z47 = z63;
                                                                arrayList4 = arrayList3;
                                                                tLRPC$Document5 = tLRPC$Document11;
                                                                i75 = 0;
                                                                charSequence6 = str34;
                                                                str7 = str20;
                                                                charSequence5 = null;
                                                            } else if (this.hasInvoicePreview) {
                                                                String str36 = MessageObject.getMedia(messageObject23.messageOwner).title;
                                                                TLRPC$WebDocument tLRPC$WebDocument = ((TLRPC$TL_messageMediaInvoice) MessageObject.getMedia(messageObject23.messageOwner)).webPhoto;
                                                                WebFile createWithWebDocument = !(tLRPC$WebDocument instanceof TLRPC$TL_webDocument) ? null : WebFile.createWithWebDocument(tLRPC$WebDocument);
                                                                this.isSmallImage = false;
                                                                this.linkPreviewAbove = false;
                                                                str11 = "invoice";
                                                                i73 = i153;
                                                                z48 = z41;
                                                                charSequence6 = str36;
                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                tLRPC$Photo2 = null;
                                                                str7 = null;
                                                                str10 = null;
                                                                str8 = null;
                                                                charSequence5 = null;
                                                                z47 = false;
                                                                i74 = 0;
                                                                str6 = null;
                                                                webFile = createWithWebDocument;
                                                                arrayList4 = arrayList3;
                                                                i75 = 0;
                                                                tLRPC$Document5 = null;
                                                            } else {
                                                                TLRPC$TL_game tLRPC$TL_game = MessageObject.getMedia(messageObject23.messageOwner).game;
                                                                String str37 = tLRPC$TL_game.title;
                                                                String str38 = !TextUtils.isEmpty(messageObject23.messageText) ? null : tLRPC$TL_game.description;
                                                                TLRPC$Photo tLRPC$Photo9 = tLRPC$TL_game.photo;
                                                                tLRPC$Document4 = tLRPC$TL_game.document;
                                                                this.isSmallImage = false;
                                                                this.linkPreviewAbove = false;
                                                                i73 = i153;
                                                                str8 = str38;
                                                                z48 = z41;
                                                                str9 = str37;
                                                                tLRPC$Photo2 = tLRPC$Photo9;
                                                                str11 = "game";
                                                                tL_stories$StoryItem3 = tL_stories$StoryItem2;
                                                                webFile = null;
                                                                str7 = null;
                                                                str10 = null;
                                                                charSequence5 = null;
                                                                z47 = false;
                                                                i74 = 0;
                                                                str6 = null;
                                                                arrayList4 = arrayList3;
                                                            }
                                                            i76 = this.drawInstantViewType;
                                                            if (i76 == 18) {
                                                                string7 = LocaleController.getString("BoostChannel", R.string.BoostChannel);
                                                            } else if (i76 == 22) {
                                                                string7 = LocaleController.getString("BoostGroup", R.string.BoostGroup);
                                                            } else if (i76 == 11) {
                                                                string7 = LocaleController.getString("VoipChannelVoiceChat", R.string.VoipChannelVoiceChat);
                                                            } else if (i76 == 25) {
                                                                string7 = LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat);
                                                            } else if (i76 == 9) {
                                                                string7 = LocaleController.getString("VoipGroupVideoChat", R.string.VoipGroupVideoChat);
                                                            } else if (i76 == 6) {
                                                                string7 = LocaleController.getString("ChatBackground", R.string.ChatBackground);
                                                            } else {
                                                                string7 = !"telegram_theme".equals(str28) ? charSequence6 : LocaleController.getString("ColorTheme", R.string.ColorTheme);
                                                            }
                                                            int dp29222222 = AndroidUtilities.dp(20.0f);
                                                            if (this.hasInvoicePreview) {
                                                                dp29222222 = 0;
                                                            }
                                                            String str29222222 = str11;
                                                            if (this.drawInstantViewType == 17) {
                                                                dp29222222 += AndroidUtilities.dp(20.0f);
                                                            }
                                                            int i156222222 = maxMessageTextWidth - dp29222222;
                                                            messageObject17 = this.currentMessageObject;
                                                            if (messageObject17.photoThumbs == null && tLRPC$Photo2 != null) {
                                                                messageObject17.generateThumbs(true);
                                                            }
                                                            this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                            this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                            int max9222222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                            if (string7 == null) {
                                                                webFile2 = webFile;
                                                                tLRPC$Document6 = tLRPC$Document5;
                                                                tLRPC$Photo3 = tLRPC$Photo2;
                                                                str12 = str7;
                                                                i77 = 3;
                                                            } else {
                                                                try {
                                                                    int ceil7 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(string7.toString()) + 1.0f + i75);
                                                                    if (!this.isSmallImage) {
                                                                        i77 = 3;
                                                                        try {
                                                                            this.siteNameLayout = new StaticLayout(string7, Theme.chat_replyNamePaint, Math.min(ceil7, i156222222), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                            i78 = 0;
                                                                            i79 = i68;
                                                                        } catch (Exception e) {
                                                                            e = e;
                                                                            webFile2 = webFile;
                                                                            tLRPC$Document6 = tLRPC$Document5;
                                                                            tLRPC$Photo3 = tLRPC$Photo2;
                                                                            str12 = str7;
                                                                            FileLog.e(e);
                                                                            max5 = 0;
                                                                            if (str6 != null) {
                                                                            }
                                                                            if (str10 != null) {
                                                                            }
                                                                            if (z50) {
                                                                            }
                                                                            if (str12 != null) {
                                                                            }
                                                                            int i157222222 = i77;
                                                                            if (str8 != null) {
                                                                            }
                                                                            if (z47) {
                                                                            }
                                                                            z52 = z47;
                                                                            if (!z52) {
                                                                            }
                                                                            if (this.drawInstantViewType != 17) {
                                                                            }
                                                                            tLRPC$Document8 = tLRPC$Document7;
                                                                            webFile3 = webFile2;
                                                                            i90 = this.documentAttachType;
                                                                            if (i90 == 5) {
                                                                            }
                                                                            i91 = max9222222;
                                                                            messageObject3 = messageObject18;
                                                                            i92 = i89;
                                                                            z53 = true;
                                                                            i2 = 4;
                                                                            z14 = false;
                                                                            z54 = true;
                                                                            if (!this.hasInvoicePreview) {
                                                                            }
                                                                            if (!this.hasInvoicePreview) {
                                                                            }
                                                                            int i158222222 = this.totalHeight;
                                                                            if (this.drawInstantView) {
                                                                            }
                                                                            this.totalHeight = i158222222 + AndroidUtilities.dp(i94 + i93);
                                                                            createInstantViewButton();
                                                                            z15 = z54;
                                                                            z64 = z53;
                                                                            this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                            z70 = z64;
                                                                            if (this.hasFactCheck) {
                                                                            }
                                                                            z21 = z15;
                                                                            c2 = 0;
                                                                            r3 = z70;
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            if (!messageObject.isSponsored()) {
                                                                            }
                                                                            c5 = c2;
                                                                            messageObject19 = this.currentMessageObject;
                                                                            if (messageObject19.eventId == 0) {
                                                                            }
                                                                            i127 = 3;
                                                                            this.botButtons.clear();
                                                                            if (z77) {
                                                                            }
                                                                            if (!messageObject3.isRestrictedMessage) {
                                                                            }
                                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                                            z66 = r3;
                                                                            if (this.drawCommentButton) {
                                                                            }
                                                                            if (this.hasFactCheck) {
                                                                            }
                                                                            z67 = this.drawPinnedBottom;
                                                                            if (z67) {
                                                                            }
                                                                            if (!z67) {
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                            }
                                                                            if (messageObject3.type != 19) {
                                                                            }
                                                                            if (this.drawPhotoImage) {
                                                                            }
                                                                            if (this.documentAttachType == 5) {
                                                                            }
                                                                            calculateUnlockXY();
                                                                            if (z21) {
                                                                            }
                                                                            updateAnimatedEmojis();
                                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                            if (stickerSetLinkIcon2 != null) {
                                                                            }
                                                                            textLayoutBlocks4 = null;
                                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                                            r32 = z66;
                                                                            r62 = textLayoutBlocks4;
                                                                            if (z77) {
                                                                            }
                                                                            transcribeButton = this.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                            if (chatMessageCellDelegate2 != null) {
                                                                            }
                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                            this.transitionParams.updatePhotoImageX = r32;
                                                                            this.highlightCaptionToSetEnd = -1;
                                                                            this.highlightCaptionToSetStart = -1;
                                                                            updateFlagSecure();
                                                                        }
                                                                    } else {
                                                                        try {
                                                                            ?? r51 = Theme.chat_replyNamePaint;
                                                                            i77 = 3;
                                                                            try {
                                                                                StaticLayout generateStaticLayout = generateStaticLayout(string7, r51, i156222222, (i156222222 - dp27222222) - dp28222222, 3, 1);
                                                                                this.siteNameLayout = generateStaticLayout;
                                                                                i77 = 3 - generateStaticLayout.getLineCount();
                                                                                i78 = 3;
                                                                                i79 = r51;
                                                                            } catch (Exception e2) {
                                                                                e = e2;
                                                                                webFile2 = webFile;
                                                                                tLRPC$Document6 = tLRPC$Document5;
                                                                                tLRPC$Photo3 = tLRPC$Photo2;
                                                                                str12 = str7;
                                                                                FileLog.e(e);
                                                                                max5 = 0;
                                                                                if (str6 != null) {
                                                                                }
                                                                                if (str10 != null) {
                                                                                }
                                                                                if (z50) {
                                                                                }
                                                                                if (str12 != null) {
                                                                                }
                                                                                int i1572222222 = i77;
                                                                                if (str8 != null) {
                                                                                }
                                                                                if (z47) {
                                                                                }
                                                                                z52 = z47;
                                                                                if (!z52) {
                                                                                }
                                                                                if (this.drawInstantViewType != 17) {
                                                                                }
                                                                                tLRPC$Document8 = tLRPC$Document7;
                                                                                webFile3 = webFile2;
                                                                                i90 = this.documentAttachType;
                                                                                if (i90 == 5) {
                                                                                }
                                                                                i91 = max9222222;
                                                                                messageObject3 = messageObject18;
                                                                                i92 = i89;
                                                                                z53 = true;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                                z54 = true;
                                                                                if (!this.hasInvoicePreview) {
                                                                                }
                                                                                if (!this.hasInvoicePreview) {
                                                                                }
                                                                                int i1582222222 = this.totalHeight;
                                                                                if (this.drawInstantView) {
                                                                                }
                                                                                this.totalHeight = i1582222222 + AndroidUtilities.dp(i94 + i93);
                                                                                createInstantViewButton();
                                                                                z15 = z54;
                                                                                z64 = z53;
                                                                                this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                                z70 = z64;
                                                                                if (this.hasFactCheck) {
                                                                                }
                                                                                z21 = z15;
                                                                                c2 = 0;
                                                                                r3 = z70;
                                                                                if (this.currentPosition != null) {
                                                                                }
                                                                                if (!messageObject.isSponsored()) {
                                                                                }
                                                                                c5 = c2;
                                                                                messageObject19 = this.currentMessageObject;
                                                                                if (messageObject19.eventId == 0) {
                                                                                }
                                                                                i127 = 3;
                                                                                this.botButtons.clear();
                                                                                if (z77) {
                                                                                }
                                                                                if (!messageObject3.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                                z66 = r3;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                if (this.hasFactCheck) {
                                                                                }
                                                                                z67 = this.drawPinnedBottom;
                                                                                if (z67) {
                                                                                }
                                                                                if (!z67) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject3.type != 19) {
                                                                                }
                                                                                if (this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType == 5) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z21) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                if (stickerSetLinkIcon2 != null) {
                                                                                }
                                                                                textLayoutBlocks4 = null;
                                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                                r32 = z66;
                                                                                r62 = textLayoutBlocks4;
                                                                                if (z77) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = r32;
                                                                                this.highlightCaptionToSetEnd = -1;
                                                                                this.highlightCaptionToSetStart = -1;
                                                                                updateFlagSecure();
                                                                            }
                                                                        } catch (Exception e3) {
                                                                            e = e3;
                                                                            i77 = 3;
                                                                        }
                                                                    }
                                                                } catch (Exception e4) {
                                                                    e = e4;
                                                                    webFile2 = webFile;
                                                                    tLRPC$Document6 = tLRPC$Document5;
                                                                    tLRPC$Photo3 = tLRPC$Photo2;
                                                                    str12 = str7;
                                                                    i77 = 3;
                                                                }
                                                                try {
                                                                    this.siteNameLeft = this.siteNameLayout.getWidth();
                                                                    this.siteNameLayoutWidth = 0.0f;
                                                                    int i169 = i77;
                                                                    int i170 = 0;
                                                                    int i171 = i79;
                                                                    while (i170 < this.siteNameLayout.getLineCount()) {
                                                                        try {
                                                                            int i172 = max9222222;
                                                                            webFile2 = webFile;
                                                                            tLRPC$Document6 = tLRPC$Document5;
                                                                            tLRPC$Photo3 = tLRPC$Photo2;
                                                                            str12 = str7;
                                                                            int lineLeft = (int) this.siteNameLayout.getLineLeft(i170);
                                                                            if (i170 > 0) {
                                                                                if ((this.siteNameLeft == 0.0f) != (lineLeft == 0)) {
                                                                                    this.siteNameLayoutWidth = this.siteNameLayout.getWidth();
                                                                                }
                                                                            }
                                                                            this.siteNameLeft = Math.min(this.siteNameLeft, lineLeft);
                                                                            this.siteNameLayoutWidth = Math.max(this.siteNameLayoutWidth, this.siteNameLayout.getLineWidth(i170));
                                                                            i170++;
                                                                            max9222222 = i172;
                                                                            webFile = webFile2;
                                                                            tLRPC$Document5 = tLRPC$Document6;
                                                                            tLRPC$Photo2 = tLRPC$Photo3;
                                                                            str7 = str12;
                                                                            i171 = i172;
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            i77 = i169;
                                                                            max9222222 = i171;
                                                                            FileLog.e(e);
                                                                            max5 = 0;
                                                                            if (str6 != null) {
                                                                            }
                                                                            if (str10 != null) {
                                                                            }
                                                                            if (z50) {
                                                                            }
                                                                            if (str12 != null) {
                                                                            }
                                                                            int i15722222222 = i77;
                                                                            if (str8 != null) {
                                                                            }
                                                                            if (z47) {
                                                                            }
                                                                            z52 = z47;
                                                                            if (!z52) {
                                                                            }
                                                                            if (this.drawInstantViewType != 17) {
                                                                            }
                                                                            tLRPC$Document8 = tLRPC$Document7;
                                                                            webFile3 = webFile2;
                                                                            i90 = this.documentAttachType;
                                                                            if (i90 == 5) {
                                                                            }
                                                                            i91 = max9222222;
                                                                            messageObject3 = messageObject18;
                                                                            i92 = i89;
                                                                            z53 = true;
                                                                            i2 = 4;
                                                                            z14 = false;
                                                                            z54 = true;
                                                                            if (!this.hasInvoicePreview) {
                                                                            }
                                                                            if (!this.hasInvoicePreview) {
                                                                            }
                                                                            int i15822222222 = this.totalHeight;
                                                                            if (this.drawInstantView) {
                                                                            }
                                                                            this.totalHeight = i15822222222 + AndroidUtilities.dp(i94 + i93);
                                                                            createInstantViewButton();
                                                                            z15 = z54;
                                                                            z64 = z53;
                                                                            this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                            z70 = z64;
                                                                            if (this.hasFactCheck) {
                                                                            }
                                                                            z21 = z15;
                                                                            c2 = 0;
                                                                            r3 = z70;
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            if (!messageObject.isSponsored()) {
                                                                            }
                                                                            c5 = c2;
                                                                            messageObject19 = this.currentMessageObject;
                                                                            if (messageObject19.eventId == 0) {
                                                                            }
                                                                            i127 = 3;
                                                                            this.botButtons.clear();
                                                                            if (z77) {
                                                                            }
                                                                            if (!messageObject3.isRestrictedMessage) {
                                                                            }
                                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                                            z66 = r3;
                                                                            if (this.drawCommentButton) {
                                                                            }
                                                                            if (this.hasFactCheck) {
                                                                            }
                                                                            z67 = this.drawPinnedBottom;
                                                                            if (z67) {
                                                                            }
                                                                            if (!z67) {
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                            }
                                                                            if (messageObject3.type != 19) {
                                                                            }
                                                                            if (this.drawPhotoImage) {
                                                                            }
                                                                            if (this.documentAttachType == 5) {
                                                                            }
                                                                            calculateUnlockXY();
                                                                            if (z21) {
                                                                            }
                                                                            updateAnimatedEmojis();
                                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                            if (stickerSetLinkIcon2 != null) {
                                                                            }
                                                                            textLayoutBlocks4 = null;
                                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                                            r32 = z66;
                                                                            r62 = textLayoutBlocks4;
                                                                            if (z77) {
                                                                            }
                                                                            transcribeButton = this.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                            if (chatMessageCellDelegate2 != null) {
                                                                            }
                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                            this.transitionParams.updatePhotoImageX = r32;
                                                                            this.highlightCaptionToSetEnd = -1;
                                                                            this.highlightCaptionToSetStart = -1;
                                                                            updateFlagSecure();
                                                                        }
                                                                    }
                                                                    int lineBottom = this.siteNameLayout.getLineBottom(staticLayout2.getLineCount() - 1);
                                                                    this.linkPreviewHeight += lineBottom;
                                                                    this.totalHeight += lineBottom;
                                                                    webFile2 = webFile;
                                                                    int i173 = 0;
                                                                    int i174 = 0;
                                                                    while (i173 < this.siteNameLayout.getLineCount()) {
                                                                        try {
                                                                            i171 = max9222222;
                                                                            try {
                                                                                int max10 = (int) Math.max(0.0f, this.siteNameLayout.getLineLeft(i173));
                                                                                if (max10 != 0) {
                                                                                    tLRPC$Document6 = tLRPC$Document5;
                                                                                    tLRPC$Photo3 = tLRPC$Photo2;
                                                                                    str12 = str7;
                                                                                    width = this.siteNameLayout.getWidth() - max10;
                                                                                } else {
                                                                                    try {
                                                                                        if (i173 >= i78) {
                                                                                            if (max10 == 0) {
                                                                                            }
                                                                                            i80 = i156222222;
                                                                                            tLRPC$Document6 = tLRPC$Document5;
                                                                                            tLRPC$Photo3 = tLRPC$Photo2;
                                                                                            str12 = str7;
                                                                                            width = (int) Math.min(i80, Math.ceil(this.siteNameLayout.getLineWidth(i173)));
                                                                                        }
                                                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                                                        str12 = str7;
                                                                                        width = (int) Math.min(i80, Math.ceil(this.siteNameLayout.getLineWidth(i173)));
                                                                                    } catch (Exception e6) {
                                                                                        e = e6;
                                                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                                                        str12 = str7;
                                                                                        i77 = i169;
                                                                                        max9222222 = i171;
                                                                                        FileLog.e(e);
                                                                                        max5 = 0;
                                                                                        if (str6 != null) {
                                                                                        }
                                                                                        if (str10 != null) {
                                                                                        }
                                                                                        if (z50) {
                                                                                        }
                                                                                        if (str12 != null) {
                                                                                        }
                                                                                        int i157222222222 = i77;
                                                                                        if (str8 != null) {
                                                                                        }
                                                                                        if (z47) {
                                                                                        }
                                                                                        z52 = z47;
                                                                                        if (!z52) {
                                                                                        }
                                                                                        if (this.drawInstantViewType != 17) {
                                                                                        }
                                                                                        tLRPC$Document8 = tLRPC$Document7;
                                                                                        webFile3 = webFile2;
                                                                                        i90 = this.documentAttachType;
                                                                                        if (i90 == 5) {
                                                                                        }
                                                                                        i91 = max9222222;
                                                                                        messageObject3 = messageObject18;
                                                                                        i92 = i89;
                                                                                        z53 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z54 = true;
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        int i158222222222 = this.totalHeight;
                                                                                        if (this.drawInstantView) {
                                                                                        }
                                                                                        this.totalHeight = i158222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                        createInstantViewButton();
                                                                                        z15 = z54;
                                                                                        z64 = z53;
                                                                                        this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                                        z70 = z64;
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z21 = z15;
                                                                                        c2 = 0;
                                                                                        r3 = z70;
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (!messageObject.isSponsored()) {
                                                                                        }
                                                                                        c5 = c2;
                                                                                        messageObject19 = this.currentMessageObject;
                                                                                        if (messageObject19.eventId == 0) {
                                                                                        }
                                                                                        i127 = 3;
                                                                                        this.botButtons.clear();
                                                                                        if (z77) {
                                                                                        }
                                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                                        }
                                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                                        z66 = r3;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z67 = this.drawPinnedBottom;
                                                                                        if (z67) {
                                                                                        }
                                                                                        if (!z67) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject3.type != 19) {
                                                                                        }
                                                                                        if (this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType == 5) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z21) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                        if (stickerSetLinkIcon2 != null) {
                                                                                        }
                                                                                        textLayoutBlocks4 = null;
                                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                                        r32 = z66;
                                                                                        r62 = textLayoutBlocks4;
                                                                                        if (z77) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                                        this.highlightCaptionToSetEnd = -1;
                                                                                        this.highlightCaptionToSetStart = -1;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                    i80 = i156222222 - (dp27222222 + dp28222222);
                                                                                    tLRPC$Document6 = tLRPC$Document5;
                                                                                }
                                                                                if (i173 >= i78) {
                                                                                    if (max10 != 0) {
                                                                                        if (!this.isSmallImage) {
                                                                                        }
                                                                                    }
                                                                                    i174 = Math.max(i174, width);
                                                                                    i173++;
                                                                                    max9222222 = i171;
                                                                                    tLRPC$Document5 = tLRPC$Document6;
                                                                                    tLRPC$Photo2 = tLRPC$Photo3;
                                                                                    str7 = str12;
                                                                                }
                                                                                width += dp27222222 + dp28222222;
                                                                                i174 = Math.max(i174, width);
                                                                                i173++;
                                                                                max9222222 = i171;
                                                                                tLRPC$Document5 = tLRPC$Document6;
                                                                                tLRPC$Photo2 = tLRPC$Photo3;
                                                                                str7 = str12;
                                                                            } catch (Exception e7) {
                                                                                e = e7;
                                                                                tLRPC$Document6 = tLRPC$Document5;
                                                                            }
                                                                        } catch (Exception e8) {
                                                                            e = e8;
                                                                        }
                                                                    }
                                                                    try {
                                                                        this.siteNameWidth = i174;
                                                                        int i175 = i174 + dp29222222;
                                                                        max9222222 = Math.max(max9222222, i175);
                                                                        tLRPC$Document6 = tLRPC$Document5;
                                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                                        str12 = str7;
                                                                        i77 = i169;
                                                                        max5 = Math.max(0, i175);
                                                                    } catch (Exception e9) {
                                                                        e = e9;
                                                                        tLRPC$Document6 = tLRPC$Document5;
                                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                                        str12 = str7;
                                                                        i77 = i169;
                                                                        FileLog.e(e);
                                                                        max5 = 0;
                                                                        if (str6 != null) {
                                                                        }
                                                                        if (str10 != null) {
                                                                        }
                                                                        if (z50) {
                                                                        }
                                                                        if (str12 != null) {
                                                                        }
                                                                        int i1572222222222 = i77;
                                                                        if (str8 != null) {
                                                                        }
                                                                        if (z47) {
                                                                        }
                                                                        z52 = z47;
                                                                        if (!z52) {
                                                                        }
                                                                        if (this.drawInstantViewType != 17) {
                                                                        }
                                                                        tLRPC$Document8 = tLRPC$Document7;
                                                                        webFile3 = webFile2;
                                                                        i90 = this.documentAttachType;
                                                                        if (i90 == 5) {
                                                                        }
                                                                        i91 = max9222222;
                                                                        messageObject3 = messageObject18;
                                                                        i92 = i89;
                                                                        z53 = true;
                                                                        i2 = 4;
                                                                        z14 = false;
                                                                        z54 = true;
                                                                        if (!this.hasInvoicePreview) {
                                                                        }
                                                                        if (!this.hasInvoicePreview) {
                                                                        }
                                                                        int i1582222222222 = this.totalHeight;
                                                                        if (this.drawInstantView) {
                                                                        }
                                                                        this.totalHeight = i1582222222222 + AndroidUtilities.dp(i94 + i93);
                                                                        createInstantViewButton();
                                                                        z15 = z54;
                                                                        z64 = z53;
                                                                        this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                        z70 = z64;
                                                                        if (this.hasFactCheck) {
                                                                        }
                                                                        z21 = z15;
                                                                        c2 = 0;
                                                                        r3 = z70;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        if (!messageObject.isSponsored()) {
                                                                        }
                                                                        c5 = c2;
                                                                        messageObject19 = this.currentMessageObject;
                                                                        if (messageObject19.eventId == 0) {
                                                                        }
                                                                        i127 = 3;
                                                                        this.botButtons.clear();
                                                                        if (z77) {
                                                                        }
                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                        z66 = r3;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        if (this.hasFactCheck) {
                                                                        }
                                                                        z67 = this.drawPinnedBottom;
                                                                        if (z67) {
                                                                        }
                                                                        if (!z67) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject3.type != 19) {
                                                                        }
                                                                        if (this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType == 5) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z21) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                        if (stickerSetLinkIcon2 != null) {
                                                                        }
                                                                        textLayoutBlocks4 = null;
                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                        r32 = z66;
                                                                        r62 = textLayoutBlocks4;
                                                                        if (z77) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                        this.highlightCaptionToSetEnd = -1;
                                                                        this.highlightCaptionToSetStart = -1;
                                                                        updateFlagSecure();
                                                                    }
                                                                } catch (Exception e10) {
                                                                    e = e10;
                                                                    webFile2 = webFile;
                                                                    tLRPC$Document6 = tLRPC$Document5;
                                                                    tLRPC$Photo3 = tLRPC$Photo2;
                                                                    str12 = str7;
                                                                    FileLog.e(e);
                                                                    max5 = 0;
                                                                    if (str6 != null) {
                                                                    }
                                                                    if (str10 != null) {
                                                                    }
                                                                    if (z50) {
                                                                    }
                                                                    if (str12 != null) {
                                                                    }
                                                                    int i15722222222222 = i77;
                                                                    if (str8 != null) {
                                                                    }
                                                                    if (z47) {
                                                                    }
                                                                    z52 = z47;
                                                                    if (!z52) {
                                                                    }
                                                                    if (this.drawInstantViewType != 17) {
                                                                    }
                                                                    tLRPC$Document8 = tLRPC$Document7;
                                                                    webFile3 = webFile2;
                                                                    i90 = this.documentAttachType;
                                                                    if (i90 == 5) {
                                                                    }
                                                                    i91 = max9222222;
                                                                    messageObject3 = messageObject18;
                                                                    i92 = i89;
                                                                    z53 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                    z54 = true;
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    int i15822222222222 = this.totalHeight;
                                                                    if (this.drawInstantView) {
                                                                    }
                                                                    this.totalHeight = i15822222222222 + AndroidUtilities.dp(i94 + i93);
                                                                    createInstantViewButton();
                                                                    z15 = z54;
                                                                    z64 = z53;
                                                                    this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                    z70 = z64;
                                                                    if (this.hasFactCheck) {
                                                                    }
                                                                    z21 = z15;
                                                                    c2 = 0;
                                                                    r3 = z70;
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject.isSponsored()) {
                                                                    }
                                                                    c5 = c2;
                                                                    messageObject19 = this.currentMessageObject;
                                                                    if (messageObject19.eventId == 0) {
                                                                    }
                                                                    i127 = 3;
                                                                    this.botButtons.clear();
                                                                    if (z77) {
                                                                    }
                                                                    if (!messageObject3.isRestrictedMessage) {
                                                                    }
                                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                                    z66 = r3;
                                                                    if (this.drawCommentButton) {
                                                                    }
                                                                    if (this.hasFactCheck) {
                                                                    }
                                                                    z67 = this.drawPinnedBottom;
                                                                    if (z67) {
                                                                    }
                                                                    if (!z67) {
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                    }
                                                                    if (messageObject3.type != 19) {
                                                                    }
                                                                    if (this.drawPhotoImage) {
                                                                    }
                                                                    if (this.documentAttachType == 5) {
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z21) {
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                    if (stickerSetLinkIcon2 != null) {
                                                                    }
                                                                    textLayoutBlocks4 = null;
                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                    r32 = z66;
                                                                    r62 = textLayoutBlocks4;
                                                                    if (z77) {
                                                                    }
                                                                    transcribeButton = this.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                    if (chatMessageCellDelegate2 != null) {
                                                                    }
                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                    this.transitionParams.updatePhotoImageX = r32;
                                                                    this.highlightCaptionToSetEnd = -1;
                                                                    this.highlightCaptionToSetStart = -1;
                                                                    updateFlagSecure();
                                                                }
                                                                if (str6 != null) {
                                                                    try {
                                                                        int ceil8 = (int) Math.ceil(Theme.chat_titleLabelTextPaint.measureText(str6.toString()));
                                                                        StaticLayout staticLayout3 = new StaticLayout(str6, Theme.chat_titleLabelTextPaint, Math.min(ceil8, i156222222), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                        this.titleLabelLayout = staticLayout3;
                                                                        this.titleLabelLayoutWidth = staticLayout3.getLineWidth(0);
                                                                        this.titleLabelLayoutHeight = this.titleLabelLayout.getLineBottom(0);
                                                                        max9222222 = Math.max(max9222222, this.siteNameWidth + ceil8 + dp29222222);
                                                                        max5 = Math.max(max5, this.siteNameWidth + ceil8 + dp29222222);
                                                                    } catch (Exception e11) {
                                                                        FileLog.e(e11);
                                                                    }
                                                                }
                                                                if (str10 != null) {
                                                                    i81 = max5;
                                                                    z50 = false;
                                                                } else {
                                                                    try {
                                                                        this.titleX = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                                        int i176 = this.linkPreviewHeight;
                                                                        if (i176 != 0) {
                                                                            this.linkPreviewHeight = i176 + AndroidUtilities.dp(2.0f);
                                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                        }
                                                                        try {
                                                                            str13 = Emoji.replaceEmoji((CharSequence) str10, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                                        } catch (Exception unused3) {
                                                                            str13 = str10;
                                                                        }
                                                                        int i177 = !this.currentMessageObject.isRepostPreview ? 4 : 1;
                                                                        if (!this.isSmallImage) {
                                                                            this.titleLayout = StaticLayoutEx.createStaticLayout(str13, Theme.chat_replyNamePaint, i156222222, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i156222222, i177);
                                                                            i82 = 0;
                                                                            i83 = 0;
                                                                        } else {
                                                                            StaticLayout generateStaticLayout2 = generateStaticLayout(str13, Theme.chat_replyNamePaint, i156222222, (i156222222 - dp27222222) - dp28222222, i77, i177);
                                                                            this.titleLayout = generateStaticLayout2;
                                                                            i83 = 0;
                                                                            int i178 = i77;
                                                                            i77 -= generateStaticLayout2.getLineCount();
                                                                            i82 = i178;
                                                                        }
                                                                        this.titleLayoutWidth = i83;
                                                                        this.titleLayoutLeft = this.titleLayout.getWidth();
                                                                        for (int i179 = 0; i179 < this.titleLayout.getLineCount(); i179++) {
                                                                            this.titleLayoutLeft = (int) Math.min(this.titleLayoutLeft, this.titleLayout.getLineLeft(i179));
                                                                            float lineWidth = this.titleLayout.getLineWidth(i179);
                                                                            if (i179 >= i82) {
                                                                                if (this.titleLayoutLeft != 0) {
                                                                                    if (!this.isSmallImage) {
                                                                                    }
                                                                                }
                                                                                this.titleLayoutWidth = (int) Math.max(this.titleLayoutWidth, lineWidth);
                                                                            }
                                                                            lineWidth += dp27222222 + dp28222222;
                                                                            this.titleLayoutWidth = (int) Math.max(this.titleLayoutWidth, lineWidth);
                                                                        }
                                                                        max9222222 = Math.max(max9222222, this.titleLayoutWidth + dp29222222);
                                                                        max5 = Math.max(max5, this.titleLayoutWidth + dp29222222);
                                                                        z49 = this.titleLayoutLeft != 0;
                                                                    } catch (Exception e12) {
                                                                        e = e12;
                                                                        z49 = false;
                                                                    }
                                                                    try {
                                                                        StaticLayout staticLayout4 = this.titleLayout;
                                                                        int lineBottom2 = staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                                                                        this.linkPreviewHeight += lineBottom2;
                                                                        this.totalHeight += lineBottom2;
                                                                    } catch (Exception e13) {
                                                                        e = e13;
                                                                        FileLog.e(e);
                                                                        i81 = max5;
                                                                        z50 = z49;
                                                                        if (z50) {
                                                                        }
                                                                        if (str12 != null) {
                                                                        }
                                                                        int i157222222222222 = i77;
                                                                        if (str8 != null) {
                                                                        }
                                                                        if (z47) {
                                                                        }
                                                                        z52 = z47;
                                                                        if (!z52) {
                                                                        }
                                                                        if (this.drawInstantViewType != 17) {
                                                                        }
                                                                        tLRPC$Document8 = tLRPC$Document7;
                                                                        webFile3 = webFile2;
                                                                        i90 = this.documentAttachType;
                                                                        if (i90 == 5) {
                                                                        }
                                                                        i91 = max9222222;
                                                                        messageObject3 = messageObject18;
                                                                        i92 = i89;
                                                                        z53 = true;
                                                                        i2 = 4;
                                                                        z14 = false;
                                                                        z54 = true;
                                                                        if (!this.hasInvoicePreview) {
                                                                        }
                                                                        if (!this.hasInvoicePreview) {
                                                                        }
                                                                        int i158222222222222 = this.totalHeight;
                                                                        if (this.drawInstantView) {
                                                                        }
                                                                        this.totalHeight = i158222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                        createInstantViewButton();
                                                                        z15 = z54;
                                                                        z64 = z53;
                                                                        this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                        z70 = z64;
                                                                        if (this.hasFactCheck) {
                                                                        }
                                                                        z21 = z15;
                                                                        c2 = 0;
                                                                        r3 = z70;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        if (!messageObject.isSponsored()) {
                                                                        }
                                                                        c5 = c2;
                                                                        messageObject19 = this.currentMessageObject;
                                                                        if (messageObject19.eventId == 0) {
                                                                        }
                                                                        i127 = 3;
                                                                        this.botButtons.clear();
                                                                        if (z77) {
                                                                        }
                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                        z66 = r3;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        if (this.hasFactCheck) {
                                                                        }
                                                                        z67 = this.drawPinnedBottom;
                                                                        if (z67) {
                                                                        }
                                                                        if (!z67) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject3.type != 19) {
                                                                        }
                                                                        if (this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType == 5) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z21) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                        if (stickerSetLinkIcon2 != null) {
                                                                        }
                                                                        textLayoutBlocks4 = null;
                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                        r32 = z66;
                                                                        r62 = textLayoutBlocks4;
                                                                        if (z77) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                        this.highlightCaptionToSetEnd = -1;
                                                                        this.highlightCaptionToSetStart = -1;
                                                                        updateFlagSecure();
                                                                    }
                                                                    i81 = max5;
                                                                    z50 = z49;
                                                                }
                                                                if (z50 && this.isSmallImage) {
                                                                    i156222222 -= AndroidUtilities.dp(48.0f);
                                                                }
                                                                if (str12 != null && str10 == null) {
                                                                    try {
                                                                        i110 = this.linkPreviewHeight;
                                                                        if (i110 == 0) {
                                                                            this.linkPreviewHeight = i110 + AndroidUtilities.dp(2.0f);
                                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                        }
                                                                        try {
                                                                            str15 = str12;
                                                                            try {
                                                                                str16 = Emoji.replaceEmoji((CharSequence) str15, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                                            } catch (Exception unused4) {
                                                                                str16 = str15;
                                                                                if (i77 == 3) {
                                                                                }
                                                                                StaticLayout generateStaticLayout3 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i156222222, (i156222222 - dp27222222) - dp28222222, i77, 1);
                                                                                this.authorLayout = generateStaticLayout3;
                                                                                i77 -= generateStaticLayout3.getLineCount();
                                                                                this.authorLayoutLeft = this.authorLayout.getWidth();
                                                                                this.authorLayoutWidth = 0;
                                                                                while (i111 < this.authorLayout.getLineCount()) {
                                                                                }
                                                                                StaticLayout staticLayout5 = this.authorLayout;
                                                                                int lineBottom3 = staticLayout5.getLineBottom(staticLayout5.getLineCount() - 1);
                                                                                this.linkPreviewHeight += lineBottom3;
                                                                                this.totalHeight += lineBottom3;
                                                                                max9222222 = Math.max(max9222222, this.authorLayoutWidth + dp29222222);
                                                                                Math.max(i81, this.authorLayoutWidth + dp29222222);
                                                                                int i1572222222222222 = i77;
                                                                                if (str8 != null) {
                                                                                }
                                                                                if (z47) {
                                                                                }
                                                                                z52 = z47;
                                                                                if (!z52) {
                                                                                }
                                                                                if (this.drawInstantViewType != 17) {
                                                                                }
                                                                                tLRPC$Document8 = tLRPC$Document7;
                                                                                webFile3 = webFile2;
                                                                                i90 = this.documentAttachType;
                                                                                if (i90 == 5) {
                                                                                }
                                                                                i91 = max9222222;
                                                                                messageObject3 = messageObject18;
                                                                                i92 = i89;
                                                                                z53 = true;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                                z54 = true;
                                                                                if (!this.hasInvoicePreview) {
                                                                                }
                                                                                if (!this.hasInvoicePreview) {
                                                                                }
                                                                                int i1582222222222222 = this.totalHeight;
                                                                                if (this.drawInstantView) {
                                                                                }
                                                                                this.totalHeight = i1582222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                createInstantViewButton();
                                                                                z15 = z54;
                                                                                z64 = z53;
                                                                                this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                                z70 = z64;
                                                                                if (this.hasFactCheck) {
                                                                                }
                                                                                z21 = z15;
                                                                                c2 = 0;
                                                                                r3 = z70;
                                                                                if (this.currentPosition != null) {
                                                                                }
                                                                                if (!messageObject.isSponsored()) {
                                                                                }
                                                                                c5 = c2;
                                                                                messageObject19 = this.currentMessageObject;
                                                                                if (messageObject19.eventId == 0) {
                                                                                }
                                                                                i127 = 3;
                                                                                this.botButtons.clear();
                                                                                if (z77) {
                                                                                }
                                                                                if (!messageObject3.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                                z66 = r3;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                if (this.hasFactCheck) {
                                                                                }
                                                                                z67 = this.drawPinnedBottom;
                                                                                if (z67) {
                                                                                }
                                                                                if (!z67) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject3.type != 19) {
                                                                                }
                                                                                if (this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType == 5) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z21) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                if (stickerSetLinkIcon2 != null) {
                                                                                }
                                                                                textLayoutBlocks4 = null;
                                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                                r32 = z66;
                                                                                r62 = textLayoutBlocks4;
                                                                                if (z77) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = r32;
                                                                                this.highlightCaptionToSetEnd = -1;
                                                                                this.highlightCaptionToSetStart = -1;
                                                                                updateFlagSecure();
                                                                            }
                                                                        } catch (Exception unused5) {
                                                                            str15 = str12;
                                                                        }
                                                                        if (i77 == 3 || (this.isSmallImage && str8 != null)) {
                                                                            StaticLayout generateStaticLayout32 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i156222222, (i156222222 - dp27222222) - dp28222222, i77, 1);
                                                                            this.authorLayout = generateStaticLayout32;
                                                                            i77 -= generateStaticLayout32.getLineCount();
                                                                            this.authorLayoutLeft = this.authorLayout.getWidth();
                                                                            this.authorLayoutWidth = 0;
                                                                            for (i111 = 0; i111 < this.authorLayout.getLineCount(); i111++) {
                                                                                int lineLeft2 = (int) this.authorLayout.getLineLeft(i111);
                                                                                if (i111 > 0) {
                                                                                    if ((this.authorLayoutLeft == 0) != (lineLeft2 == 0)) {
                                                                                        this.authorLayoutWidth = this.authorLayout.getWidth();
                                                                                    }
                                                                                }
                                                                                this.authorLayoutLeft = Math.min(this.authorLayoutLeft, lineLeft2);
                                                                                this.authorLayoutWidth = (int) Math.max(this.authorLayoutWidth, this.authorLayout.getLineWidth(i111));
                                                                            }
                                                                            StaticLayout staticLayout52 = this.authorLayout;
                                                                            int lineBottom32 = staticLayout52.getLineBottom(staticLayout52.getLineCount() - 1);
                                                                            this.linkPreviewHeight += lineBottom32;
                                                                            this.totalHeight += lineBottom32;
                                                                            max9222222 = Math.max(max9222222, this.authorLayoutWidth + dp29222222);
                                                                            Math.max(i81, this.authorLayoutWidth + dp29222222);
                                                                        }
                                                                        this.authorLayout = new StaticLayout(str16, Theme.chat_replyNamePaint, i156222222, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                        this.authorLayoutLeft = this.authorLayout.getWidth();
                                                                        this.authorLayoutWidth = 0;
                                                                        while (i111 < this.authorLayout.getLineCount()) {
                                                                        }
                                                                        StaticLayout staticLayout522 = this.authorLayout;
                                                                        int lineBottom322 = staticLayout522.getLineBottom(staticLayout522.getLineCount() - 1);
                                                                        this.linkPreviewHeight += lineBottom322;
                                                                        this.totalHeight += lineBottom322;
                                                                        max9222222 = Math.max(max9222222, this.authorLayoutWidth + dp29222222);
                                                                        Math.max(i81, this.authorLayoutWidth + dp29222222);
                                                                    } catch (Exception e14) {
                                                                        FileLog.e(e14);
                                                                    }
                                                                }
                                                                int i15722222222222222 = i77;
                                                                if (str8 != null) {
                                                                    messageObject18 = messageObject;
                                                                } else {
                                                                    try {
                                                                        this.descriptionX = 0;
                                                                        this.currentMessageObject.generateLinkDescription();
                                                                        int i180 = this.linkPreviewHeight;
                                                                        if (i180 != 0) {
                                                                            this.linkPreviewHeight = i180 + AndroidUtilities.dp(2.0f);
                                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                        }
                                                                        if (string7 != null) {
                                                                            if (string7.toString().toLowerCase().equals("twitter")) {
                                                                                z51 = true;
                                                                                if (charSequence5 != null) {
                                                                                    messageObject18 = messageObject;
                                                                                    try {
                                                                                        charSequence7 = messageObject18.linkDescription;
                                                                                    } catch (Exception e15) {
                                                                                        e = e15;
                                                                                        FileLog.e(e);
                                                                                        if (z47) {
                                                                                        }
                                                                                        z52 = z47;
                                                                                        if (!z52) {
                                                                                        }
                                                                                        if (this.drawInstantViewType != 17) {
                                                                                        }
                                                                                        tLRPC$Document8 = tLRPC$Document7;
                                                                                        webFile3 = webFile2;
                                                                                        i90 = this.documentAttachType;
                                                                                        if (i90 == 5) {
                                                                                        }
                                                                                        i91 = max9222222;
                                                                                        messageObject3 = messageObject18;
                                                                                        i92 = i89;
                                                                                        z53 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z54 = true;
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        int i15822222222222222 = this.totalHeight;
                                                                                        if (this.drawInstantView) {
                                                                                        }
                                                                                        this.totalHeight = i15822222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                        createInstantViewButton();
                                                                                        z15 = z54;
                                                                                        z64 = z53;
                                                                                        this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                                                        z70 = z64;
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z21 = z15;
                                                                                        c2 = 0;
                                                                                        r3 = z70;
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (!messageObject.isSponsored()) {
                                                                                        }
                                                                                        c5 = c2;
                                                                                        messageObject19 = this.currentMessageObject;
                                                                                        if (messageObject19.eventId == 0) {
                                                                                        }
                                                                                        i127 = 3;
                                                                                        this.botButtons.clear();
                                                                                        if (z77) {
                                                                                        }
                                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                                        }
                                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                                        z66 = r3;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z67 = this.drawPinnedBottom;
                                                                                        if (z67) {
                                                                                        }
                                                                                        if (!z67) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject3.type != 19) {
                                                                                        }
                                                                                        if (this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType == 5) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z21) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                        if (stickerSetLinkIcon2 != null) {
                                                                                        }
                                                                                        textLayoutBlocks4 = null;
                                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                                        r32 = z66;
                                                                                        r62 = textLayoutBlocks4;
                                                                                        if (z77) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                                        this.highlightCaptionToSetEnd = -1;
                                                                                        this.highlightCaptionToSetStart = -1;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                } else {
                                                                                    messageObject18 = messageObject;
                                                                                    charSequence7 = charSequence5;
                                                                                }
                                                                                boolean isRTL = AndroidUtilities.isRTL(charSequence7);
                                                                                if (z51) {
                                                                                    i84 = 3;
                                                                                    i85 = !this.currentMessageObject.isRepostPreview ? 6 : 3;
                                                                                } else {
                                                                                    i84 = 3;
                                                                                    i85 = 100;
                                                                                }
                                                                                if (i15722222222222222 == i84 && !this.isSmallImage) {
                                                                                    this.descriptionLayout = StaticLayoutEx.createStaticLayout(charSequence7, Theme.chat_replyTextPaint, i156222222, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i156222222, i85);
                                                                                    i15722222222222222 = 0;
                                                                                    this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                                                    StaticLayout staticLayout6 = this.descriptionLayout;
                                                                                    int lineBottom4 = staticLayout6.getLineBottom(staticLayout6.getLineCount() - 1);
                                                                                    this.linkPreviewHeight += lineBottom4;
                                                                                    this.totalHeight += lineBottom4;
                                                                                    this.descriptionLayoutWidth = 0;
                                                                                    int width3 = this.descriptionLayout.getWidth();
                                                                                    int i181 = 0;
                                                                                    for (i86 = 0; i86 < this.descriptionLayout.getLineCount(); i86++) {
                                                                                        width3 = (int) Math.min(width3, this.descriptionLayout.getLineLeft(i86));
                                                                                        if (i86 >= i15722222222222222) {
                                                                                            if (i15722222222222222 != 0) {
                                                                                                if (width3 == 0) {
                                                                                                }
                                                                                            }
                                                                                            i87 = 0;
                                                                                            i181 = (int) Math.max(i181, this.descriptionLayout.getLineRight(i86) + i87);
                                                                                        }
                                                                                        i87 = dp27222222 + dp28222222;
                                                                                        i181 = (int) Math.max(i181, this.descriptionLayout.getLineRight(i86) + i87);
                                                                                    }
                                                                                    int abs = Math.abs(i181 - width3);
                                                                                    this.descriptionLayoutWidth = abs;
                                                                                    this.descriptionLayoutLeft = width3;
                                                                                    max9222222 = Math.max(max9222222, abs + dp29222222);
                                                                                }
                                                                                this.descriptionLayout = generateStaticLayout(charSequence7, Theme.chat_replyTextPaint, i156222222 - (isRTL ? 0 : (dp28222222 * 2) + dp27222222), (i156222222 - dp27222222) - (dp28222222 * 2), i15722222222222222, i85);
                                                                                this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                                                StaticLayout staticLayout62 = this.descriptionLayout;
                                                                                int lineBottom42 = staticLayout62.getLineBottom(staticLayout62.getLineCount() - 1);
                                                                                this.linkPreviewHeight += lineBottom42;
                                                                                this.totalHeight += lineBottom42;
                                                                                this.descriptionLayoutWidth = 0;
                                                                                int width32 = this.descriptionLayout.getWidth();
                                                                                int i1812 = 0;
                                                                                while (i86 < this.descriptionLayout.getLineCount()) {
                                                                                }
                                                                                int abs2 = Math.abs(i1812 - width32);
                                                                                this.descriptionLayoutWidth = abs2;
                                                                                this.descriptionLayoutLeft = width32;
                                                                                max9222222 = Math.max(max9222222, abs2 + dp29222222);
                                                                            }
                                                                        }
                                                                        z51 = false;
                                                                        if (charSequence5 != null) {
                                                                        }
                                                                        boolean isRTL2 = AndroidUtilities.isRTL(charSequence7);
                                                                        if (z51) {
                                                                        }
                                                                        if (i15722222222222222 == i84) {
                                                                            this.descriptionLayout = StaticLayoutEx.createStaticLayout(charSequence7, Theme.chat_replyTextPaint, i156222222, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i156222222, i85);
                                                                            i15722222222222222 = 0;
                                                                            this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                                            StaticLayout staticLayout622 = this.descriptionLayout;
                                                                            int lineBottom422 = staticLayout622.getLineBottom(staticLayout622.getLineCount() - 1);
                                                                            this.linkPreviewHeight += lineBottom422;
                                                                            this.totalHeight += lineBottom422;
                                                                            this.descriptionLayoutWidth = 0;
                                                                            int width322 = this.descriptionLayout.getWidth();
                                                                            int i18122 = 0;
                                                                            while (i86 < this.descriptionLayout.getLineCount()) {
                                                                            }
                                                                            int abs22 = Math.abs(i18122 - width322);
                                                                            this.descriptionLayoutWidth = abs22;
                                                                            this.descriptionLayoutLeft = width322;
                                                                            max9222222 = Math.max(max9222222, abs22 + dp29222222);
                                                                        }
                                                                        this.descriptionLayout = generateStaticLayout(charSequence7, Theme.chat_replyTextPaint, i156222222 - (isRTL2 ? 0 : (dp28222222 * 2) + dp27222222), (i156222222 - dp27222222) - (dp28222222 * 2), i15722222222222222, i85);
                                                                        this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                                        StaticLayout staticLayout6222 = this.descriptionLayout;
                                                                        int lineBottom4222 = staticLayout6222.getLineBottom(staticLayout6222.getLineCount() - 1);
                                                                        this.linkPreviewHeight += lineBottom4222;
                                                                        this.totalHeight += lineBottom4222;
                                                                        this.descriptionLayoutWidth = 0;
                                                                        int width3222 = this.descriptionLayout.getWidth();
                                                                        int i181222 = 0;
                                                                        while (i86 < this.descriptionLayout.getLineCount()) {
                                                                        }
                                                                        int abs222 = Math.abs(i181222 - width3222);
                                                                        this.descriptionLayoutWidth = abs222;
                                                                        this.descriptionLayoutLeft = width3222;
                                                                        max9222222 = Math.max(max9222222, abs222 + dp29222222);
                                                                    } catch (Exception e16) {
                                                                        e = e16;
                                                                        messageObject18 = messageObject;
                                                                    }
                                                                }
                                                                if (z47 && this.descriptionLayout == null && this.titleLayout == null) {
                                                                    this.isSmallImage = false;
                                                                    z52 = false;
                                                                } else {
                                                                    z52 = z47;
                                                                }
                                                                if (!z52) {
                                                                    dp27222222 = i156222222;
                                                                }
                                                                if (this.drawInstantViewType != 17) {
                                                                    str14 = str29222222;
                                                                    i88 = i73;
                                                                    i89 = extraTimeX;
                                                                    tLRPC$Document7 = tLRPC$Document6;
                                                                    tLRPC$Photo4 = tLRPC$Photo3;
                                                                    if (tL_stories$StoryItem3 != null && (tLRPC$MessageMedia = (tL_stories$StoryItem4 = tL_stories$StoryItem3).media) != null) {
                                                                        int i182 = (int) ((dp27222222 * 16.0f) / 9.0f);
                                                                        TLRPC$Document tLRPC$Document17 = tLRPC$MessageMedia.document;
                                                                        if (tLRPC$Document17 != null) {
                                                                            this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document17.thumbs, i182);
                                                                            BitmapDrawable bitmapDrawable4 = this.currentMessageObject.strippedThumb;
                                                                            if (bitmapDrawable4 == null) {
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document17.thumbs, 40);
                                                                            } else {
                                                                                this.currentPhotoObjectThumbStripped = bitmapDrawable4;
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize11 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize11 != null && (tLRPC$PhotoSize11.w == 0 || tLRPC$PhotoSize11.h == 0)) {
                                                                                int i183 = 0;
                                                                                while (true) {
                                                                                    if (i183 >= tLRPC$Document17.attributes.size()) {
                                                                                        break;
                                                                                    }
                                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute = tLRPC$Document17.attributes.get(i183);
                                                                                    if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize12 = this.currentPhotoObject;
                                                                                        tLRPC$PhotoSize12.w = tLRPC$DocumentAttribute.w;
                                                                                        tLRPC$PhotoSize12.h = tLRPC$DocumentAttribute.h;
                                                                                        break;
                                                                                    }
                                                                                    i183++;
                                                                                }
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize13 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize13.w == 0 || tLRPC$PhotoSize13.h == 0) {
                                                                                    tLRPC$PhotoSize13.w = AndroidUtilities.dp(150.0f);
                                                                                    this.currentPhotoObject.h = (int) ((tLRPC$PhotoSize8.w / 9.0f) * 16.0f);
                                                                                }
                                                                            }
                                                                            this.documentAttach = tLRPC$Document17;
                                                                            tLRPC$Document7 = tLRPC$Document17;
                                                                        } else {
                                                                            TLRPC$Photo tLRPC$Photo10 = tLRPC$MessageMedia.photo;
                                                                            if (tLRPC$Photo10 != null) {
                                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo10.sizes, i182);
                                                                                BitmapDrawable bitmapDrawable5 = this.currentMessageObject.strippedThumb;
                                                                                if (bitmapDrawable5 == null) {
                                                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo10.sizes, 40);
                                                                                } else {
                                                                                    this.currentPhotoObjectThumbStripped = bitmapDrawable5;
                                                                                }
                                                                                tLRPC$Photo4 = tLRPC$Photo10;
                                                                            }
                                                                        }
                                                                        this.photoParentObject = tL_stories$StoryItem4;
                                                                        this.documentAttachType = 10;
                                                                    }
                                                                } else if (tLRPC$Document6 == null) {
                                                                    if (tLRPC$Photo3 != null) {
                                                                        WebFile webFile7 = webFile2;
                                                                        if (str29222222 == null) {
                                                                            str14 = str29222222;
                                                                        } else {
                                                                            str14 = str29222222;
                                                                            if (str14.equals("photo")) {
                                                                                z60 = true;
                                                                                ArrayList<TLRPC$PhotoSize> arrayList11 = messageObject18.photoThumbs;
                                                                                int photoSize = (!z60 && z52) ? dp27222222 : AndroidUtilities.getPhotoSize();
                                                                                boolean z85 = !z60;
                                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(arrayList11, photoSize, z85);
                                                                                this.photoParentObject = messageObject18.photoThumbsObject;
                                                                                this.checkOnlyButtonPressed = z85;
                                                                                bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                                                                if (bitmapDrawable3 == null) {
                                                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject18.photoThumbs, 40);
                                                                                } else {
                                                                                    this.currentPhotoObjectThumbStripped = bitmapDrawable3;
                                                                                }
                                                                                if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                                                    this.currentPhotoObjectThumb = null;
                                                                                }
                                                                                webFile2 = webFile7;
                                                                            }
                                                                        }
                                                                        z60 = false;
                                                                        ArrayList<TLRPC$PhotoSize> arrayList112 = messageObject18.photoThumbs;
                                                                        if (z60) {
                                                                            boolean z852 = !z60;
                                                                            this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(arrayList112, photoSize, z852);
                                                                            this.photoParentObject = messageObject18.photoThumbsObject;
                                                                            this.checkOnlyButtonPressed = z852;
                                                                            bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                                                            if (bitmapDrawable3 == null) {
                                                                            }
                                                                            if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                                            }
                                                                            webFile2 = webFile7;
                                                                        }
                                                                        boolean z8522 = !z60;
                                                                        this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(arrayList112, photoSize, z8522);
                                                                        this.photoParentObject = messageObject18.photoThumbsObject;
                                                                        this.checkOnlyButtonPressed = z8522;
                                                                        bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                                                        if (bitmapDrawable3 == null) {
                                                                        }
                                                                        if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                                        }
                                                                        webFile2 = webFile7;
                                                                    } else if (webFile2 == null) {
                                                                        str14 = str29222222;
                                                                    } else {
                                                                        WebFile webFile8 = webFile2;
                                                                        if (webFile8.mime_type.startsWith("image/")) {
                                                                            webFile6 = webFile8;
                                                                            z61 = false;
                                                                        } else {
                                                                            z61 = false;
                                                                            webFile6 = null;
                                                                        }
                                                                        this.drawImageButton = z61;
                                                                        webFile3 = webFile6;
                                                                        str14 = str29222222;
                                                                        i88 = i73;
                                                                        i89 = extraTimeX;
                                                                        tLRPC$Document8 = tLRPC$Document6;
                                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                                        i90 = this.documentAttachType;
                                                                        if (i90 == 5 || i90 == 3 || i90 == 1) {
                                                                            i91 = max9222222;
                                                                            messageObject3 = messageObject18;
                                                                            i92 = i89;
                                                                            z53 = true;
                                                                            i2 = 4;
                                                                            z14 = false;
                                                                            z54 = true;
                                                                        } else {
                                                                            if (this.currentPhotoObject != null || this.currentPhotoLocation != null || webFile3 != null || i90 == 8 || i90 == 9 || (((i109 = this.drawInstantViewType) == 23 || i109 == 24) && arrayList4 != null && !arrayList4.isEmpty())) {
                                                                                this.drawImageButton = !(tLRPC$Photo4 == null || z52) || (str14 != null && (str14.equals("photo") || ((str14.equals("document") && this.documentAttachType != 6) || str14.equals("gif") || (i95 = this.documentAttachType) == 4 || i95 == 8)));
                                                                                if (this.isSmallImage) {
                                                                                    this.drawImageButton = false;
                                                                                }
                                                                                i96 = this.linkPreviewHeight;
                                                                                if (i96 != 0) {
                                                                                    this.linkPreviewHeight = i96 + AndroidUtilities.dp(2.0f);
                                                                                    this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                                }
                                                                                if (this.imageBackgroundSideColor != 0) {
                                                                                    dp27222222 = AndroidUtilities.dp(208.0f);
                                                                                } else {
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize14 = this.currentPhotoObject;
                                                                                    if ((tLRPC$PhotoSize14 instanceof TLRPC$TL_photoSizeEmpty) && (i108 = tLRPC$PhotoSize14.w) != 0) {
                                                                                        dp27222222 = i108;
                                                                                    } else {
                                                                                        int i184 = this.documentAttachType;
                                                                                        if (i184 == 6 || i184 == 8 || i184 == 9) {
                                                                                            if (AndroidUtilities.isTablet()) {
                                                                                                minTabletSide6 = AndroidUtilities.getMinTabletSide();
                                                                                            } else {
                                                                                                minTabletSide6 = getParentWidth();
                                                                                            }
                                                                                            dp27222222 = (int) (minTabletSide6 * 0.5f);
                                                                                        } else if (i184 == 7) {
                                                                                            dp27222222 = AndroidUtilities.roundMessageSize;
                                                                                            this.photoImage.setAllowDecodeSingleFrame(true);
                                                                                        } else if (i184 == 10) {
                                                                                            dp27222222 /= 2;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (this.hasInvoicePreview && dp27222222 < (i107 = messageObject18.textWidth)) {
                                                                                    dp27222222 = AndroidUtilities.dp(22.0f) + i107;
                                                                                }
                                                                                max6 = Math.max(max9222222, (dp27222222 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp29222222);
                                                                                tLRPC$PhotoSize9 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize9 != null) {
                                                                                    tLRPC$PhotoSize9.size = -1;
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize15 = this.currentPhotoObjectThumb;
                                                                                    if (tLRPC$PhotoSize15 != null) {
                                                                                        tLRPC$PhotoSize15.size = -1;
                                                                                    }
                                                                                } else if (webFile3 != null) {
                                                                                    webFile3.size = -1;
                                                                                }
                                                                                if (this.imageBackgroundSideColor != 0) {
                                                                                    this.imageBackgroundSideWidth = max6 - AndroidUtilities.dp(13.0f);
                                                                                }
                                                                                if (z52 || this.documentAttachType == 7) {
                                                                                    this.photoImage.setInvalidateAll(true);
                                                                                    i99 = dp27222222;
                                                                                } else if (this.hasGamePreview || this.hasInvoicePreview) {
                                                                                    if (this.hasInvoicePreview) {
                                                                                        int size7 = webFile3.attributes.size();
                                                                                        for (int i185 = 0; i185 < size7; i185++) {
                                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = webFile3.attributes.get(i185);
                                                                                            if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                                i103 = tLRPC$DocumentAttribute2.w;
                                                                                                i104 = tLRPC$DocumentAttribute2.h;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    i103 = 640;
                                                                                    i104 = 360;
                                                                                    float f10 = i103;
                                                                                    float dp30 = f10 / (dp27222222 - AndroidUtilities.dp(2.0f));
                                                                                    i99 = (int) (f10 / dp30);
                                                                                    dp27222222 = (int) (i104 / dp30);
                                                                                } else {
                                                                                    if (this.drawInstantViewType == 7) {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize16 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize16 == null) {
                                                                                            i97 = 30;
                                                                                            i98 = 50;
                                                                                        } else {
                                                                                            int i186 = tLRPC$PhotoSize16.w;
                                                                                            i98 = tLRPC$PhotoSize16.h;
                                                                                            i97 = i186;
                                                                                        }
                                                                                    } else {
                                                                                        i97 = 560;
                                                                                        i98 = 678;
                                                                                    }
                                                                                    float f11 = i97;
                                                                                    float dp31 = f11 / (dp27222222 - AndroidUtilities.dp(2.0f));
                                                                                    i99 = (int) (f11 / dp31);
                                                                                    i100 = (int) (i98 / dp31);
                                                                                    if (string7 == null || (!string7.toString().toLowerCase().equals("instagram") && this.documentAttachType == 0)) {
                                                                                        i101 = AndroidUtilities.displaySize.y / 3;
                                                                                        if (i100 > i101) {
                                                                                            i100 = i101;
                                                                                        }
                                                                                    } else {
                                                                                        i102 = AndroidUtilities.displaySize.y / 2;
                                                                                        if (i100 > i102) {
                                                                                            i100 = i102;
                                                                                        }
                                                                                    }
                                                                                    if (this.imageBackgroundSideColor == 0) {
                                                                                        dp27222222 = i100;
                                                                                    } else {
                                                                                        float f12 = i100;
                                                                                        float dp32 = f12 / AndroidUtilities.dp(160.0f);
                                                                                        i99 = (int) (i99 / dp32);
                                                                                        dp27222222 = (int) (f12 / dp32);
                                                                                    }
                                                                                    if (dp27222222 < AndroidUtilities.dp(60.0f)) {
                                                                                        dp27222222 = AndroidUtilities.dp(60.0f);
                                                                                    }
                                                                                }
                                                                                if (this.isSmallImage) {
                                                                                    this.totalHeight += AndroidUtilities.dp(12.0f) + dp27222222;
                                                                                    this.linkPreviewHeight += dp27222222;
                                                                                } else {
                                                                                    if (AndroidUtilities.dp(50.0f) > this.linkPreviewHeight) {
                                                                                        this.totalHeight += (AndroidUtilities.dp(50.0f) - this.linkPreviewHeight) + AndroidUtilities.dp(8.0f);
                                                                                        this.linkPreviewHeight = AndroidUtilities.dp(50.0f);
                                                                                    }
                                                                                    this.linkPreviewHeight -= AndroidUtilities.dp(8.0f);
                                                                                }
                                                                                if (this.documentAttachType == 8 && this.imageBackgroundSideColor == 0) {
                                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, Math.max(max6 - AndroidUtilities.dp(13.0f), i99), dp27222222);
                                                                                } else {
                                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                }
                                                                                float f13 = AndroidUtilities.density;
                                                                                int i187 = (int) (i99 / f13);
                                                                                int i188 = (int) (dp27222222 / f13);
                                                                                Locale locale = Locale.US;
                                                                                this.currentPhotoFilter = String.format(locale, "%d_%d", Integer.valueOf(i187), Integer.valueOf(i188));
                                                                                this.currentPhotoFilterThumb = String.format(locale, "%d_%d_b", Integer.valueOf(i187), Integer.valueOf(i188));
                                                                                i105 = this.drawInstantViewType;
                                                                                if ((i105 == 23 || i105 == 24) && arrayList4 != null && !arrayList4.isEmpty()) {
                                                                                    messageObject3 = messageObject18;
                                                                                    i106 = i89;
                                                                                    z55 = true;
                                                                                    i2 = 4;
                                                                                    z14 = false;
                                                                                    StickerSetLinkIcon stickerSetLinkIcon3 = this.stickerSetIcons;
                                                                                    ArrayList<TLRPC$Document> arrayList12 = arrayList4;
                                                                                    if (stickerSetLinkIcon3 == null || !stickerSetLinkIcon3.equals(arrayList12)) {
                                                                                        StickerSetLinkIcon stickerSetLinkIcon4 = this.stickerSetIcons;
                                                                                        if (stickerSetLinkIcon4 != null) {
                                                                                            stickerSetLinkIcon4.detach(this);
                                                                                        }
                                                                                        StickerSetLinkIcon stickerSetLinkIcon5 = new StickerSetLinkIcon(this.currentAccount, this.currentMessageObject.isOutOwner(), arrayList12, z48);
                                                                                        this.stickerSetIcons = stickerSetLinkIcon5;
                                                                                        if (this.attachedToWindow) {
                                                                                            stickerSetLinkIcon5.attach(this);
                                                                                        }
                                                                                    }
                                                                                    StickerSetLinkIcon stickerSetLinkIcon6 = this.stickerSetIcons;
                                                                                    if (stickerSetLinkIcon6 != null) {
                                                                                        stickerSetLinkIcon6.keepAlive();
                                                                                    }
                                                                                    this.photoImage.setImageBitmap(this.stickerSetIcons);
                                                                                } else if (webFile3 == null) {
                                                                                    messageObject3 = messageObject18;
                                                                                    i106 = i89;
                                                                                    z55 = true;
                                                                                    i2 = 4;
                                                                                    z14 = false;
                                                                                    this.photoImage.setImage(ImageLocation.getForWebFile(webFile3), this.currentPhotoFilter, null, null, webFile3.size, null, messageObject, 1);
                                                                                } else {
                                                                                    int i189 = this.documentAttachType;
                                                                                    if (i189 == 8) {
                                                                                        messageObject3 = messageObject18;
                                                                                        i106 = i89;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        if (messageObject3.mediaExists) {
                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document8), "b1", 0L, "jpg", messageObject, 1);
                                                                                        } else {
                                                                                            this.photoImage.setImage(null, null, ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document8), "b1", 0L, "jpg", messageObject, 1);
                                                                                        }
                                                                                    } else if (i189 == 9) {
                                                                                        messageObject3 = messageObject18;
                                                                                        i106 = i89;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        if (tLRPC$Document8 instanceof DocumentObject.ThemeDocument) {
                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document8), this.currentPhotoFilter, null, "b1", 0L, "jpg", messageObject, 1);
                                                                                        } else {
                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document8), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, tLRPC$Document8), "b1", this.currentPhotoObjectThumbStripped, 0L, "jpg", messageObject, 1);
                                                                                        }
                                                                                    } else if (i189 == 10) {
                                                                                        messageObject3 = messageObject18;
                                                                                        i106 = i89;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        z55 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        z14 = false;
                                                                                        if (tLRPC$Document8 != null) {
                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document8), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, tLRPC$Document8), "b1", this.currentPhotoObjectThumbStripped, 0L, "jpg", messageObject, 1);
                                                                                        } else if (tLRPC$Photo4 != null) {
                                                                                            this.photoImage.setImage(ImageLocation.getForPhoto(this.currentPhotoObject, tLRPC$Photo4), this.currentPhotoFilter, ImageLocation.getForPhoto(this.currentPhotoObjectThumb, tLRPC$Photo4), "b1", this.currentPhotoObjectThumbStripped, 0L, "jpg", messageObject, 1);
                                                                                        }
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize17 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize17 != null && tLRPC$PhotoSize17.gradientTopColor != 0 && tLRPC$PhotoSize17.gradientBottomColor != 0) {
                                                                                            GradientDrawable.Orientation orientation = GradientDrawable.Orientation.TOP_BOTTOM;
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize18 = this.currentPhotoObject;
                                                                                            this.gradientDrawable = new GradientDrawable(orientation, new int[]{tLRPC$PhotoSize18.gradientTopColor, tLRPC$PhotoSize18.gradientBottomColor});
                                                                                        } else {
                                                                                            BitmapDrawable bitmapDrawable6 = this.currentPhotoObjectThumbStripped;
                                                                                            if (bitmapDrawable6 != null && bitmapDrawable6.getBitmap() != null) {
                                                                                                int[] colorsSync = DominantColors.getColorsSync(false, this.currentPhotoObjectThumbStripped.getBitmap(), Theme.isCurrentThemeDark());
                                                                                                this.gradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, colorsSync);
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize19 = this.currentPhotoObject;
                                                                                                if (tLRPC$PhotoSize19 != null) {
                                                                                                    tLRPC$PhotoSize19.gradientTopColor = colorsSync[0];
                                                                                                    tLRPC$PhotoSize19.gradientBottomColor = colorsSync[1];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } else if (i189 != 6) {
                                                                                        if (i189 == 4) {
                                                                                            messageObject3 = messageObject18;
                                                                                            i106 = i89;
                                                                                            z57 = true;
                                                                                            z57 = true;
                                                                                            z57 = true;
                                                                                            this.photoImage.setNeedsQualityThumb(true);
                                                                                            this.photoImage.setShouldGenerateQualityThumb(true);
                                                                                            if (!this.isSmallImage && !this.currentMessageObject.isHiddenSensitive() && SharedConfig.isAutoplayVideo()) {
                                                                                                MessageObject messageObject29 = this.currentMessageObject;
                                                                                                if (!messageObject29.isRepostPreview) {
                                                                                                    if (messageObject29.hasMediaSpoilers()) {
                                                                                                        MessageObject messageObject30 = this.currentMessageObject;
                                                                                                        if (!messageObject30.isMediaSpoilersRevealed) {
                                                                                                        }
                                                                                                    }
                                                                                                    MessageObject messageObject31 = this.currentMessageObject;
                                                                                                    if (messageObject31.mediaExists || messageObject31.attachPathExists || (messageObject.canStreamVideo() && DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject))) {
                                                                                                        this.photoImage.setAllowDecodeSingleFrame(true);
                                                                                                        this.photoImage.setAllowStartAnimation(true);
                                                                                                        this.photoImage.startAnimation();
                                                                                                        this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, this.documentAttach), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, messageObject, 0);
                                                                                                        this.autoPlayingMedia = true;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if (this.currentPhotoObjectThumb != null || this.currentPhotoObjectThumbStripped != null) {
                                                                                                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                            } else {
                                                                                                ImageReceiver imageReceiver = this.photoImage;
                                                                                                ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize20 = this.currentPhotoObject;
                                                                                                imageReceiver.setImage(null, null, forObject2, ((tLRPC$PhotoSize20 instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize20.type)) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                            }
                                                                                        } else if (i189 == 2 || i189 == 7) {
                                                                                            messageObject3 = messageObject18;
                                                                                            i106 = i89;
                                                                                            z56 = true;
                                                                                            this.photoImage.setAllowDecodeSingleFrame(true);
                                                                                            if (MessageObject.isRoundVideoDocument(tLRPC$Document8)) {
                                                                                                this.photoImage.setRoundRadius(AndroidUtilities.roundMessageSize / 2);
                                                                                                canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                                                z58 = false;
                                                                                            } else if (MessageObject.isGifDocument(tLRPC$Document8, messageObject.hasValidGroupId())) {
                                                                                                canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                                                z58 = true;
                                                                                            } else {
                                                                                                z58 = true;
                                                                                                canDownloadMedia = false;
                                                                                            }
                                                                                            if (this.currentMessageObject.isHiddenSensitive()) {
                                                                                                canDownloadMedia = false;
                                                                                            }
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize21 = this.currentPhotoObject;
                                                                                            String str39 = ((tLRPC$PhotoSize21 instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize21.type)) ? this.currentPhotoFilterThumb : this.currentPhotoFilter;
                                                                                            if ((messageObject3.mediaExists || canDownloadMedia) && !this.currentMessageObject.isRepostPreview) {
                                                                                                this.autoPlayingMedia = true;
                                                                                                TLRPC$VideoSize documentVideoThumb2 = MessageObject.getDocumentVideoThumb(tLRPC$Document8);
                                                                                                if (!messageObject3.mediaExists && documentVideoThumb2 != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                                    ImageReceiver imageReceiver2 = this.photoImage;
                                                                                                    ImageLocation forDocument = ImageLocation.getForDocument(tLRPC$Document8);
                                                                                                    String str40 = tLRPC$Document8.size >= 32768 ? ImageLoader.AUTOPLAY_FILTER : null;
                                                                                                    ImageLocation forDocument2 = ImageLocation.getForDocument(documentVideoThumb2, this.documentAttach);
                                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize22 = this.currentPhotoObject;
                                                                                                    if (tLRPC$PhotoSize22 == null) {
                                                                                                        tLRPC$PhotoSize22 = this.currentPhotoObjectThumb;
                                                                                                    }
                                                                                                    imageReceiver2.setImage(forDocument, str40, forDocument2, null, ImageLocation.getForDocument(tLRPC$PhotoSize22, this.documentAttach), this.currentPhotoObject == null ? this.currentPhotoFilterThumb : str39, this.currentPhotoObjectThumbStripped, tLRPC$Document8.size, null, messageObject, 0);
                                                                                                } else {
                                                                                                    this.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document8), tLRPC$Document8.size >= 32768 ? ImageLoader.AUTOPLAY_FILTER : null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), str39, ImageLocation.getForDocument(this.currentPhotoObjectThumb, this.documentAttach), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, tLRPC$Document8.size, null, messageObject, 0);
                                                                                                }
                                                                                            } else {
                                                                                                this.photoImage.setImage(null, null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), str39, 0L, null, this.currentMessageObject, 0);
                                                                                            }
                                                                                            z54 = z58;
                                                                                            i2 = 4;
                                                                                            z14 = false;
                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                this.blurredPhotoImage.getBitmap().recycle();
                                                                                                this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                                                            }
                                                                                            if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && ((this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) || this.fitPhotoImage)) {
                                                                                                this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                                                this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                                            }
                                                                                            this.drawPhotoImage = z56;
                                                                                            if (((str14 != null && str14.equals(MediaStreamTrack.VIDEO_TRACK_KIND)) || this.documentAttachType == 10) && i74 != 0) {
                                                                                                String formatShortDuration = AndroidUtilities.formatShortDuration(i74);
                                                                                                this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration));
                                                                                                this.videoInfoLayout = new StaticLayout(formatShortDuration, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                            } else if (this.hasGamePreview) {
                                                                                                try {
                                                                                                    TLRPC$Message tLRPC$Message11 = messageObject3.messageOwner;
                                                                                                    long j = tLRPC$Message11.via_bot_id;
                                                                                                    if (j == 0) {
                                                                                                        j = tLRPC$Message11.from_id.user_id;
                                                                                                    }
                                                                                                    if (j != 0 && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j))) != null && (r0 = user.username) != null) {
                                                                                                    }
                                                                                                } catch (Exception unused6) {
                                                                                                }
                                                                                                String upperCase2 = LocaleController.getString(R.string.AttachGame).toUpperCase();
                                                                                                this.durationWidth = (int) Math.ceil(Theme.chat_gamePaint.measureText(upperCase2));
                                                                                                this.videoInfoLayout = new StaticLayout(upperCase2, Theme.chat_gamePaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                            }
                                                                                            i91 = max6;
                                                                                            z59 = z56;
                                                                                        } else {
                                                                                            boolean z86 = messageObject18.mediaExists;
                                                                                            String attachFileName = FileLoader.getAttachFileName(this.currentPhotoObject);
                                                                                            if (this.hasGamePreview || z86 || DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject) || FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName) || this.currentMessageObject.isSponsored()) {
                                                                                                messageObject3 = messageObject18;
                                                                                                i106 = i89;
                                                                                                z57 = true;
                                                                                                z57 = true;
                                                                                                this.photoNotSet = false;
                                                                                                ImageLocation imageLocation = this.currentPhotoLocation;
                                                                                                if (imageLocation != null) {
                                                                                                    this.photoImage.setImage(imageLocation, this.currentPhotoFilter, this.currentPhotoThumbLocation, this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                } else {
                                                                                                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                }
                                                                                            } else {
                                                                                                this.photoNotSet = true;
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize23 = this.currentPhotoObjectThumb;
                                                                                                if (tLRPC$PhotoSize23 != null || this.currentPhotoObjectThumbStripped != null) {
                                                                                                    messageObject3 = messageObject18;
                                                                                                    z57 = true;
                                                                                                    i106 = i89;
                                                                                                    this.photoImage.setImage(null, null, ImageLocation.getForObject(tLRPC$PhotoSize23, this.photoParentObject), String.format(locale, "%d_%d_b", Integer.valueOf(i187), Integer.valueOf(i188)), this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                } else {
                                                                                                    this.photoImage.setImageBitmap((Drawable) null);
                                                                                                    messageObject3 = messageObject18;
                                                                                                    i106 = i89;
                                                                                                    z55 = true;
                                                                                                    i2 = 4;
                                                                                                    z14 = false;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z55 = z57;
                                                                                    } else {
                                                                                        messageObject3 = messageObject18;
                                                                                        i106 = i89;
                                                                                        z55 = true;
                                                                                        z14 = false;
                                                                                        boolean isSticker = messageObject.isSticker();
                                                                                        if (!SharedConfig.loopStickers() && messageObject.isVideoSticker()) {
                                                                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 1;
                                                                                        }
                                                                                        if (SharedConfig.loopStickers() || (isSticker && !messageObject.isVideoSticker())) {
                                                                                            this.photoImage.setAutoRepeat(1);
                                                                                        } else {
                                                                                            this.currentPhotoFilter = String.format(locale, "%d_%d_nr_messageId=%d", Integer.valueOf(i187), Integer.valueOf(i188), Integer.valueOf(messageObject3.stableId));
                                                                                            ImageReceiver imageReceiver3 = this.photoImage;
                                                                                            ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                                                                                            imageReceiver3.setAutoRepeat((chatMessageCellDelegate3 != null && chatMessageCellDelegate3.shouldRepeatSticker(messageObject3)) ? 2 : 3);
                                                                                        }
                                                                                        this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", this.documentAttach.size, "webp", messageObject, 1);
                                                                                        i2 = 4;
                                                                                    }
                                                                                }
                                                                                z54 = true;
                                                                                z56 = z55;
                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                }
                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                    this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                                    this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                                }
                                                                                this.drawPhotoImage = z56;
                                                                                if (str14 != null) {
                                                                                    String formatShortDuration2 = AndroidUtilities.formatShortDuration(i74);
                                                                                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration2));
                                                                                    this.videoInfoLayout = new StaticLayout(formatShortDuration2, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                    i91 = max6;
                                                                                    z59 = z56;
                                                                                }
                                                                                String formatShortDuration22 = AndroidUtilities.formatShortDuration(i74);
                                                                                this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration22));
                                                                                this.videoInfoLayout = new StaticLayout(formatShortDuration22, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                i91 = max6;
                                                                                z59 = z56;
                                                                            } else {
                                                                                this.photoImage.setImageBitmap((Drawable) null);
                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                    this.blurredPhotoImage.getBitmap().recycle();
                                                                                    this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                                                }
                                                                                this.linkPreviewHeight -= AndroidUtilities.dp(4.0f);
                                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                                i91 = max9222222;
                                                                                messageObject3 = messageObject18;
                                                                                i106 = i89;
                                                                                z59 = true;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                                z54 = true;
                                                                            }
                                                                            if (this.hasInvoicePreview && this.hasInvoicePrice) {
                                                                                if ((MessageObject.getMedia(messageObject3.messageOwner).flags & i2) != 0) {
                                                                                    upperCase = LocaleController.getString(!MessageObject.getMedia(messageObject3.messageOwner).test ? R.string.PaymentInvoice : R.string.PaymentTestInvoice).toUpperCase();
                                                                                } else {
                                                                                    upperCase = LocaleController.getString(R.string.PaymentReceipt).toUpperCase();
                                                                                }
                                                                                String formatCurrencyString = LocaleController.getInstance().formatCurrencyString(MessageObject.getMedia(messageObject3.messageOwner).total_amount, MessageObject.getMedia(messageObject3.messageOwner).currency);
                                                                                SpannableStringBuilder replaceStars = StarsIntroActivity.replaceStars(new SpannableStringBuilder(formatCurrencyString + " " + ((Object) upperCase)));
                                                                                replaceStars.setSpan(new TypefaceSpan(AndroidUtilities.bold()), z14 ? 1 : 0, formatCurrencyString.length(), 33);
                                                                                StaticLayout staticLayout7 = new StaticLayout(replaceStars, Theme.chat_shipmentPaint, i88, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                this.videoInfoLayout = staticLayout7;
                                                                                this.durationWidth = (int) (staticLayout7.getLineCount() > 0 ? 0.0f : this.videoInfoLayout.getLineWidth(z14 ? 1 : 0));
                                                                                if (!this.drawPhotoImage) {
                                                                                    this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                                    int dp33 = this.timeWidth + AndroidUtilities.dp((!messageObject.isOutOwner() ? 0 : 20) + 14);
                                                                                    int i190 = this.durationWidth;
                                                                                    int i191 = dp33 + i190;
                                                                                    if (i191 > i88) {
                                                                                        i91 = Math.max(i190, i91);
                                                                                        this.totalHeight += AndroidUtilities.dp(12.0f);
                                                                                    } else {
                                                                                        i91 = Math.max(i191, i91);
                                                                                    }
                                                                                }
                                                                            }
                                                                            if (this.hasGamePreview && messageObject3.textHeight(this.transitionParams) != 0) {
                                                                                this.linkPreviewHeight += messageObject3.textHeight(this.transitionParams) + AndroidUtilities.dp(6.0f);
                                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                            }
                                                                            i92 = i106;
                                                                            calcBackgroundWidth(i88, i92, i91);
                                                                            z53 = z59;
                                                                        }
                                                                        if (!this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults()) {
                                                                            this.linkPreviewHeight += AndroidUtilities.dp(6.0f);
                                                                            this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                        }
                                                                        if (!this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults() && ((this.currentPhotoObject != null || this.documentAttachType == i2) && (this.authorLayout != null || this.descriptionLayout != null || this.titleLayout != null || this.siteNameLayout != null))) {
                                                                            this.linkPreviewHeight += AndroidUtilities.dp(2.66f);
                                                                        }
                                                                        int i158222222222222222 = this.totalHeight;
                                                                        if (this.drawInstantView) {
                                                                            i93 = 2;
                                                                            i94 = 0;
                                                                        } else {
                                                                            i93 = 2;
                                                                            i94 = 4;
                                                                        }
                                                                        this.totalHeight = i158222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                        createInstantViewButton();
                                                                        z15 = z54;
                                                                        z64 = z53;
                                                                    }
                                                                    i88 = i73;
                                                                    i89 = extraTimeX;
                                                                    tLRPC$Document7 = tLRPC$Document6;
                                                                    tLRPC$Photo4 = tLRPC$Photo3;
                                                                } else {
                                                                    str14 = str29222222;
                                                                    WebFile webFile9 = webFile2;
                                                                    if (MessageObject.isRoundVideoDocument(tLRPC$Document6)) {
                                                                        i88 = i73;
                                                                        i89 = extraTimeX;
                                                                        TLRPC$Document tLRPC$Document18 = tLRPC$Document6;
                                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                                        this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document18.thumbs, 90);
                                                                        this.photoParentObject = tLRPC$Document18;
                                                                        this.documentAttach = tLRPC$Document18;
                                                                        this.isSmallImage = false;
                                                                        this.documentAttachType = 7;
                                                                        tLRPC$Document8 = tLRPC$Document18;
                                                                        webFile3 = webFile9;
                                                                    } else {
                                                                        tLRPC$Document7 = tLRPC$Document6;
                                                                        if (MessageObject.isGifDocument(tLRPC$Document7, messageObject.hasValidGroupId())) {
                                                                            webFile2 = webFile9;
                                                                            i88 = i73;
                                                                            i89 = extraTimeX;
                                                                            tLRPC$Photo4 = tLRPC$Photo3;
                                                                            if (!messageObject.isGame() && (!SharedConfig.isAutoplayGifs() || messageObject18.isRepostPreview)) {
                                                                                f7 = 1.0f;
                                                                                messageObject18.gifState = 1.0f;
                                                                            } else {
                                                                                f7 = 1.0f;
                                                                            }
                                                                            this.photoImage.setAllowStartAnimation(messageObject18.gifState != f7);
                                                                            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 90);
                                                                            this.currentPhotoObject = closestPhotoSizeWithSize;
                                                                            if (closestPhotoSizeWithSize != null) {
                                                                                this.photoParentObject = tLRPC$Document7;
                                                                            } else if (tLRPC$Photo4 != null) {
                                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, 90);
                                                                                this.photoParentObject = tLRPC$Photo4;
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize24 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize24 != null && ((tLRPC$PhotoSize24 instanceof TLRPC$TL_photoStrippedSize) || tLRPC$PhotoSize24.w == 0 || tLRPC$PhotoSize24.h == 0)) {
                                                                                for (int i192 = 0; i192 < tLRPC$Document7.attributes.size(); i192++) {
                                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute3 = tLRPC$Document7.attributes.get(i192);
                                                                                    if ((tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize25 = this.currentPhotoObject;
                                                                                        tLRPC$PhotoSize25.w = tLRPC$DocumentAttribute3.w;
                                                                                        tLRPC$PhotoSize25.h = tLRPC$DocumentAttribute3.h;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize26 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize26.w == 0 || tLRPC$PhotoSize26.h == 0) {
                                                                                    int dp34 = AndroidUtilities.dp(150.0f);
                                                                                    tLRPC$PhotoSize26.h = dp34;
                                                                                    tLRPC$PhotoSize26.w = dp34;
                                                                                }
                                                                            }
                                                                            this.documentAttach = tLRPC$Document7;
                                                                            this.documentAttachType = 2;
                                                                        } else if (MessageObject.isVideoDocument(tLRPC$Document7)) {
                                                                            webFile2 = webFile9;
                                                                            i88 = i73;
                                                                            i89 = extraTimeX;
                                                                            if (tLRPC$Photo3 == null) {
                                                                                tLRPC$Photo4 = tLRPC$Photo3;
                                                                            } else {
                                                                                tLRPC$Photo4 = tLRPC$Photo3;
                                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, AndroidUtilities.getPhotoSize(), true);
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, 40);
                                                                                this.photoParentObject = tLRPC$Photo4;
                                                                            }
                                                                            if (this.currentPhotoObject == null) {
                                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 320);
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 40);
                                                                                this.photoParentObject = tLRPC$Document7;
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize27 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize27 != this.currentPhotoObjectThumb) {
                                                                                tLRPC$PhotoSize10 = null;
                                                                            } else {
                                                                                tLRPC$PhotoSize10 = null;
                                                                                this.currentPhotoObjectThumb = null;
                                                                            }
                                                                            BitmapDrawable bitmapDrawable7 = this.currentMessageObject.strippedThumb;
                                                                            if (bitmapDrawable7 != null) {
                                                                                this.currentPhotoObjectThumb = tLRPC$PhotoSize10;
                                                                                this.currentPhotoObjectThumbStripped = bitmapDrawable7;
                                                                            }
                                                                            if (tLRPC$PhotoSize27 == null) {
                                                                                TLRPC$TL_photoSize tLRPC$TL_photoSize = new TLRPC$TL_photoSize();
                                                                                this.currentPhotoObject = tLRPC$TL_photoSize;
                                                                                tLRPC$TL_photoSize.type = "s";
                                                                                tLRPC$TL_photoSize.location = new TLRPC$TL_fileLocationUnavailable();
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize28 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize28 != null && (tLRPC$PhotoSize28.w == 0 || tLRPC$PhotoSize28.h == 0 || (tLRPC$PhotoSize28 instanceof TLRPC$TL_photoStrippedSize))) {
                                                                                int i193 = 0;
                                                                                while (true) {
                                                                                    if (i193 >= tLRPC$Document7.attributes.size()) {
                                                                                        break;
                                                                                    }
                                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute4 = tLRPC$Document7.attributes.get(i193);
                                                                                    if (tLRPC$DocumentAttribute4 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize29 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize29 instanceof TLRPC$TL_photoStrippedSize) {
                                                                                            int i194 = tLRPC$DocumentAttribute4.w;
                                                                                            float max11 = Math.max(i194, i194) / 50.0f;
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize30 = this.currentPhotoObject;
                                                                                            tLRPC$PhotoSize30.w = (int) (tLRPC$DocumentAttribute4.w / max11);
                                                                                            tLRPC$PhotoSize30.h = (int) (tLRPC$DocumentAttribute4.h / max11);
                                                                                        } else {
                                                                                            tLRPC$PhotoSize29.w = tLRPC$DocumentAttribute4.w;
                                                                                            tLRPC$PhotoSize29.h = tLRPC$DocumentAttribute4.h;
                                                                                        }
                                                                                    } else {
                                                                                        i193++;
                                                                                    }
                                                                                }
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize31 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize31.w == 0 || tLRPC$PhotoSize31.h == 0) {
                                                                                    int dp35 = AndroidUtilities.dp(150.0f);
                                                                                    tLRPC$PhotoSize31.h = dp35;
                                                                                    tLRPC$PhotoSize31.w = dp35;
                                                                                }
                                                                            }
                                                                            createDocumentLayout(0, messageObject18);
                                                                        } else {
                                                                            if (MessageObject.isStickerDocument(tLRPC$Document7) || MessageObject.isAnimatedStickerDocument(tLRPC$Document7, true)) {
                                                                                webFile4 = webFile9;
                                                                                i88 = i73;
                                                                                i89 = extraTimeX;
                                                                                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 90);
                                                                                this.currentPhotoObject = closestPhotoSizeWithSize2;
                                                                                this.photoParentObject = tLRPC$Document7;
                                                                                if (closestPhotoSizeWithSize2 != null && (closestPhotoSizeWithSize2.w == 0 || closestPhotoSizeWithSize2.h == 0)) {
                                                                                    int i195 = 0;
                                                                                    while (true) {
                                                                                        if (i195 >= tLRPC$Document7.attributes.size()) {
                                                                                            break;
                                                                                        }
                                                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute5 = tLRPC$Document7.attributes.get(i195);
                                                                                        if (tLRPC$DocumentAttribute5 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize32 = this.currentPhotoObject;
                                                                                            tLRPC$PhotoSize32.w = tLRPC$DocumentAttribute5.w;
                                                                                            tLRPC$PhotoSize32.h = tLRPC$DocumentAttribute5.h;
                                                                                            break;
                                                                                        }
                                                                                        i195++;
                                                                                    }
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize33 = this.currentPhotoObject;
                                                                                    if (tLRPC$PhotoSize33.w == 0 || tLRPC$PhotoSize33.h == 0) {
                                                                                        int dp36 = AndroidUtilities.dp(150.0f);
                                                                                        tLRPC$PhotoSize33.h = dp36;
                                                                                        tLRPC$PhotoSize33.w = dp36;
                                                                                    }
                                                                                }
                                                                                this.documentAttach = tLRPC$Document7;
                                                                                this.isSmallImage = false;
                                                                                this.documentAttachType = 6;
                                                                            } else {
                                                                                int i196 = this.drawInstantViewType;
                                                                                if (i196 == 6) {
                                                                                    webFile4 = webFile9;
                                                                                    i88 = i73;
                                                                                    i89 = extraTimeX;
                                                                                    TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 320);
                                                                                    this.currentPhotoObject = closestPhotoSizeWithSize3;
                                                                                    this.photoParentObject = tLRPC$Document7;
                                                                                    if (closestPhotoSizeWithSize3 != null && (closestPhotoSizeWithSize3.w == 0 || closestPhotoSizeWithSize3.h == 0)) {
                                                                                        int i197 = 0;
                                                                                        while (true) {
                                                                                            if (i197 >= tLRPC$Document7.attributes.size()) {
                                                                                                break;
                                                                                            }
                                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute6 = tLRPC$Document7.attributes.get(i197);
                                                                                            if (tLRPC$DocumentAttribute6 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize34 = this.currentPhotoObject;
                                                                                                tLRPC$PhotoSize34.w = tLRPC$DocumentAttribute6.w;
                                                                                                tLRPC$PhotoSize34.h = tLRPC$DocumentAttribute6.h;
                                                                                                break;
                                                                                            }
                                                                                            i197++;
                                                                                        }
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize35 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize35.w == 0 || tLRPC$PhotoSize35.h == 0) {
                                                                                            int dp37 = AndroidUtilities.dp(150.0f);
                                                                                            tLRPC$PhotoSize35.h = dp37;
                                                                                            tLRPC$PhotoSize35.w = dp37;
                                                                                        }
                                                                                    }
                                                                                    this.documentAttach = tLRPC$Document7;
                                                                                    this.isSmallImage = false;
                                                                                    this.documentAttachType = 8;
                                                                                    String formatFileSize = AndroidUtilities.formatFileSize(tLRPC$Document7.size);
                                                                                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatFileSize));
                                                                                    this.videoInfoLayout = new StaticLayout(formatFileSize, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                } else if (i196 == 7) {
                                                                                    webFile4 = webFile9;
                                                                                    i88 = i73;
                                                                                    i89 = extraTimeX;
                                                                                    this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 700);
                                                                                    BitmapDrawable bitmapDrawable8 = this.currentMessageObject.strippedThumb;
                                                                                    if (bitmapDrawable8 == null) {
                                                                                        this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 40);
                                                                                    } else {
                                                                                        this.currentPhotoObjectThumbStripped = bitmapDrawable8;
                                                                                    }
                                                                                    this.photoParentObject = tLRPC$Document7;
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize36 = this.currentPhotoObject;
                                                                                    if (tLRPC$PhotoSize36 != null && (tLRPC$PhotoSize36.w == 0 || tLRPC$PhotoSize36.h == 0)) {
                                                                                        int i198 = 0;
                                                                                        while (true) {
                                                                                            if (i198 >= tLRPC$Document7.attributes.size()) {
                                                                                                break;
                                                                                            }
                                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute7 = tLRPC$Document7.attributes.get(i198);
                                                                                            if (tLRPC$DocumentAttribute7 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize37 = this.currentPhotoObject;
                                                                                                tLRPC$PhotoSize37.w = tLRPC$DocumentAttribute7.w;
                                                                                                tLRPC$PhotoSize37.h = tLRPC$DocumentAttribute7.h;
                                                                                                break;
                                                                                            }
                                                                                            i198++;
                                                                                        }
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize38 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize38.w == 0 || tLRPC$PhotoSize38.h == 0) {
                                                                                            int dp38 = AndroidUtilities.dp(150.0f);
                                                                                            tLRPC$PhotoSize38.h = dp38;
                                                                                            tLRPC$PhotoSize38.w = dp38;
                                                                                        }
                                                                                    }
                                                                                    this.isSmallImage = false;
                                                                                    this.documentAttach = tLRPC$Document7;
                                                                                    this.documentAttachType = 9;
                                                                                } else {
                                                                                    i88 = i73;
                                                                                    i89 = extraTimeX;
                                                                                    calcBackgroundWidth(i88, i89, max9222222);
                                                                                    if (this.backgroundWidth < AndroidUtilities.dp(20.0f) + i88) {
                                                                                        this.backgroundWidth = AndroidUtilities.dp(20.0f) + i88;
                                                                                    }
                                                                                    if (MessageObject.isVoiceDocument(tLRPC$Document7)) {
                                                                                        webFile5 = webFile9;
                                                                                        createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject18);
                                                                                        this.mediaOffsetY = (!this.linkPreviewAbove ? this.currentMessageObject.textHeight(this.transitionParams) : 0) + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                                        this.totalHeight += AndroidUtilities.dp(44 + (!this.hasLinkPreview ? !this.linkPreviewAbove ? 0 : -4 : 4));
                                                                                        this.linkPreviewHeight += AndroidUtilities.dp((!this.hasLinkPreview ? 0 : 4) + 44);
                                                                                        int dp39 = i88 - AndroidUtilities.dp(86.0f);
                                                                                        max9222222 = AndroidUtilities.isTablet() ? Math.max(max9222222, (Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 0.0f : 52.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp29222222) : Math.max(max9222222, (Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 0.0f : 52.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp29222222);
                                                                                        calcBackgroundWidth(dp39, i89, max9222222);
                                                                                        i88 = dp39;
                                                                                    } else if (MessageObject.isMusicDocument(tLRPC$Document7)) {
                                                                                        webFile5 = webFile9;
                                                                                        int createDocumentLayout = createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject18);
                                                                                        this.mediaOffsetY = (!this.linkPreviewAbove ? this.currentMessageObject.textHeight(this.transitionParams) : 0) + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                                        this.totalHeight += AndroidUtilities.dp((!this.linkPreviewAbove ? 0 : -4) + 56);
                                                                                        this.linkPreviewHeight += AndroidUtilities.dp(60.0f);
                                                                                        int dp40 = i88 - AndroidUtilities.dp(86.0f);
                                                                                        int max12 = Math.max(max9222222, createDocumentLayout + dp29222222 + AndroidUtilities.dp(94.0f));
                                                                                        StaticLayout staticLayout8 = this.songLayout;
                                                                                        if (staticLayout8 != null && staticLayout8.getLineCount() > 0) {
                                                                                            max12 = (int) Math.max(max12, this.songLayout.getLineWidth(0) + dp29222222 + AndroidUtilities.dp(86.0f));
                                                                                        }
                                                                                        StaticLayout staticLayout9 = this.performerLayout;
                                                                                        if (staticLayout9 != null && staticLayout9.getLineCount() > 0) {
                                                                                            max12 = (int) Math.max(max12, this.performerLayout.getLineWidth(0) + dp29222222 + AndroidUtilities.dp(86.0f));
                                                                                        }
                                                                                        max9222222 = max12;
                                                                                        calcBackgroundWidth(dp40, i89, max9222222);
                                                                                        i88 = dp40;
                                                                                    } else {
                                                                                        createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(168.0f), messageObject18);
                                                                                        this.drawImageButton = true;
                                                                                        if (this.drawPhotoImage) {
                                                                                            webFile2 = webFile9;
                                                                                            this.totalHeight += AndroidUtilities.dp(100.0f);
                                                                                            this.linkPreviewHeight += AndroidUtilities.dp(86.0f);
                                                                                            this.photoImage.setImageCoords(0.0f, this.totalHeight + this.namesOffset, AndroidUtilities.dp(86.0f), AndroidUtilities.dp(86.0f));
                                                                                        } else {
                                                                                            this.mediaOffsetY = (!this.linkPreviewAbove ? this.currentMessageObject.textHeight(this.transitionParams) : 0) + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                                            webFile2 = webFile9;
                                                                                            this.photoImage.setImageCoords(0.0f, (this.totalHeight + this.namesOffset) - AndroidUtilities.dp(14.0f), AndroidUtilities.dp(56.0f), AndroidUtilities.dp(56.0f));
                                                                                            this.totalHeight += AndroidUtilities.dp((!this.linkPreviewAbove ? 0 : -4) + 64);
                                                                                            this.linkPreviewHeight += AndroidUtilities.dp(50.0f);
                                                                                            StaticLayout staticLayout10 = this.docTitleLayout;
                                                                                            if (staticLayout10 != null && staticLayout10.getLineCount() > 1) {
                                                                                                int lineCount = (this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                                                                                this.totalHeight += lineCount;
                                                                                                this.linkPreviewHeight += lineCount;
                                                                                            }
                                                                                        }
                                                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                                                    }
                                                                                    tLRPC$Document8 = tLRPC$Document7;
                                                                                    webFile3 = webFile5;
                                                                                    tLRPC$Photo4 = tLRPC$Photo3;
                                                                                    i90 = this.documentAttachType;
                                                                                    if (i90 == 5) {
                                                                                        if (this.currentPhotoObject != null) {
                                                                                            this.photoImage.setImageBitmap((Drawable) null);
                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                            }
                                                                                            this.linkPreviewHeight -= AndroidUtilities.dp(4.0f);
                                                                                            this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                                            i91 = max9222222;
                                                                                            messageObject3 = messageObject18;
                                                                                            i106 = i89;
                                                                                            z59 = true;
                                                                                            i2 = 4;
                                                                                            z14 = false;
                                                                                            z54 = true;
                                                                                            if (this.hasInvoicePreview) {
                                                                                                if ((MessageObject.getMedia(messageObject3.messageOwner).flags & i2) != 0) {
                                                                                                }
                                                                                                String formatCurrencyString2 = LocaleController.getInstance().formatCurrencyString(MessageObject.getMedia(messageObject3.messageOwner).total_amount, MessageObject.getMedia(messageObject3.messageOwner).currency);
                                                                                                SpannableStringBuilder replaceStars2 = StarsIntroActivity.replaceStars(new SpannableStringBuilder(formatCurrencyString2 + " " + ((Object) upperCase)));
                                                                                                replaceStars2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), z14 ? 1 : 0, formatCurrencyString2.length(), 33);
                                                                                                StaticLayout staticLayout72 = new StaticLayout(replaceStars2, Theme.chat_shipmentPaint, i88, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                this.videoInfoLayout = staticLayout72;
                                                                                                this.durationWidth = (int) (staticLayout72.getLineCount() > 0 ? 0.0f : this.videoInfoLayout.getLineWidth(z14 ? 1 : 0));
                                                                                                if (!this.drawPhotoImage) {
                                                                                                }
                                                                                            }
                                                                                            if (this.hasGamePreview) {
                                                                                                this.linkPreviewHeight += messageObject3.textHeight(this.transitionParams) + AndroidUtilities.dp(6.0f);
                                                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                                            }
                                                                                            i92 = i106;
                                                                                            calcBackgroundWidth(i88, i92, i91);
                                                                                            z53 = z59;
                                                                                            if (!this.hasInvoicePreview) {
                                                                                                this.linkPreviewHeight += AndroidUtilities.dp(6.0f);
                                                                                                this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                                            }
                                                                                            if (!this.hasInvoicePreview) {
                                                                                                this.linkPreviewHeight += AndroidUtilities.dp(2.66f);
                                                                                            }
                                                                                            int i1582222222222222222 = this.totalHeight;
                                                                                            if (this.drawInstantView) {
                                                                                            }
                                                                                            this.totalHeight = i1582222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                            createInstantViewButton();
                                                                                            z15 = z54;
                                                                                            z64 = z53;
                                                                                        }
                                                                                        if (tLRPC$Photo4 == null) {
                                                                                            this.drawImageButton = !(tLRPC$Photo4 == null || z52) || (str14 != null && (str14.equals("photo") || ((str14.equals("document") && this.documentAttachType != 6) || str14.equals("gif") || (i95 = this.documentAttachType) == 4 || i95 == 8)));
                                                                                            if (this.isSmallImage) {
                                                                                            }
                                                                                            i96 = this.linkPreviewHeight;
                                                                                            if (i96 != 0) {
                                                                                            }
                                                                                            if (this.imageBackgroundSideColor != 0) {
                                                                                            }
                                                                                            if (this.hasInvoicePreview) {
                                                                                                dp27222222 = AndroidUtilities.dp(22.0f) + i107;
                                                                                            }
                                                                                            max6 = Math.max(max9222222, (dp27222222 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp29222222);
                                                                                            tLRPC$PhotoSize9 = this.currentPhotoObject;
                                                                                            if (tLRPC$PhotoSize9 != null) {
                                                                                            }
                                                                                            if (this.imageBackgroundSideColor != 0) {
                                                                                            }
                                                                                            if (z52) {
                                                                                                if (this.hasGamePreview) {
                                                                                                    if (this.drawInstantViewType == 7) {
                                                                                                    }
                                                                                                    float f112 = i97;
                                                                                                    float dp312 = f112 / (dp27222222 - AndroidUtilities.dp(2.0f));
                                                                                                    i99 = (int) (f112 / dp312);
                                                                                                    i100 = (int) (i98 / dp312);
                                                                                                    if (string7 == null) {
                                                                                                        i102 = AndroidUtilities.displaySize.y / 2;
                                                                                                        if (i100 > i102) {
                                                                                                        }
                                                                                                        if (this.imageBackgroundSideColor == 0) {
                                                                                                        }
                                                                                                        if (dp27222222 < AndroidUtilities.dp(60.0f)) {
                                                                                                        }
                                                                                                        if (this.isSmallImage) {
                                                                                                        }
                                                                                                        if (this.documentAttachType == 8) {
                                                                                                            this.photoImage.setImageCoords(0.0f, 0.0f, Math.max(max6 - AndroidUtilities.dp(13.0f), i99), dp27222222);
                                                                                                            float f132 = AndroidUtilities.density;
                                                                                                            int i1872 = (int) (i99 / f132);
                                                                                                            int i1882 = (int) (dp27222222 / f132);
                                                                                                            Locale locale2 = Locale.US;
                                                                                                            this.currentPhotoFilter = String.format(locale2, "%d_%d", Integer.valueOf(i1872), Integer.valueOf(i1882));
                                                                                                            this.currentPhotoFilterThumb = String.format(locale2, "%d_%d_b", Integer.valueOf(i1872), Integer.valueOf(i1882));
                                                                                                            i105 = this.drawInstantViewType;
                                                                                                            if (i105 == 23) {
                                                                                                                if (webFile3 == null) {
                                                                                                                }
                                                                                                                z54 = true;
                                                                                                                z56 = z55;
                                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                this.drawPhotoImage = z56;
                                                                                                                if (str14 != null) {
                                                                                                                }
                                                                                                                String formatShortDuration222 = AndroidUtilities.formatShortDuration(i74);
                                                                                                                this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration222));
                                                                                                                this.videoInfoLayout = new StaticLayout(formatShortDuration222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                                i91 = max6;
                                                                                                                z59 = z56;
                                                                                                                if (this.hasInvoicePreview) {
                                                                                                                }
                                                                                                                if (this.hasGamePreview) {
                                                                                                                }
                                                                                                                i92 = i106;
                                                                                                                calcBackgroundWidth(i88, i92, i91);
                                                                                                                z53 = z59;
                                                                                                                if (!this.hasInvoicePreview) {
                                                                                                                }
                                                                                                                if (!this.hasInvoicePreview) {
                                                                                                                }
                                                                                                                int i15822222222222222222 = this.totalHeight;
                                                                                                                if (this.drawInstantView) {
                                                                                                                }
                                                                                                                this.totalHeight = i15822222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                                                createInstantViewButton();
                                                                                                                z15 = z54;
                                                                                                                z64 = z53;
                                                                                                            }
                                                                                                            if (webFile3 == null) {
                                                                                                            }
                                                                                                            z54 = true;
                                                                                                            z56 = z55;
                                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                            }
                                                                                                            if (this.photoImage.getBitmap() != null) {
                                                                                                            }
                                                                                                            this.drawPhotoImage = z56;
                                                                                                            if (str14 != null) {
                                                                                                            }
                                                                                                            String formatShortDuration2222 = AndroidUtilities.formatShortDuration(i74);
                                                                                                            this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration2222));
                                                                                                            this.videoInfoLayout = new StaticLayout(formatShortDuration2222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                            i91 = max6;
                                                                                                            z59 = z56;
                                                                                                            if (this.hasInvoicePreview) {
                                                                                                            }
                                                                                                            if (this.hasGamePreview) {
                                                                                                            }
                                                                                                            i92 = i106;
                                                                                                            calcBackgroundWidth(i88, i92, i91);
                                                                                                            z53 = z59;
                                                                                                            if (!this.hasInvoicePreview) {
                                                                                                            }
                                                                                                            if (!this.hasInvoicePreview) {
                                                                                                            }
                                                                                                            int i158222222222222222222 = this.totalHeight;
                                                                                                            if (this.drawInstantView) {
                                                                                                            }
                                                                                                            this.totalHeight = i158222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                                            createInstantViewButton();
                                                                                                            z15 = z54;
                                                                                                            z64 = z53;
                                                                                                        }
                                                                                                        this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                                        float f1322 = AndroidUtilities.density;
                                                                                                        int i18722 = (int) (i99 / f1322);
                                                                                                        int i18822 = (int) (dp27222222 / f1322);
                                                                                                        Locale locale22 = Locale.US;
                                                                                                        this.currentPhotoFilter = String.format(locale22, "%d_%d", Integer.valueOf(i18722), Integer.valueOf(i18822));
                                                                                                        this.currentPhotoFilterThumb = String.format(locale22, "%d_%d_b", Integer.valueOf(i18722), Integer.valueOf(i18822));
                                                                                                        i105 = this.drawInstantViewType;
                                                                                                        if (i105 == 23) {
                                                                                                        }
                                                                                                        if (webFile3 == null) {
                                                                                                        }
                                                                                                        z54 = true;
                                                                                                        z56 = z55;
                                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                        }
                                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                                        }
                                                                                                        this.drawPhotoImage = z56;
                                                                                                        if (str14 != null) {
                                                                                                        }
                                                                                                        String formatShortDuration22222 = AndroidUtilities.formatShortDuration(i74);
                                                                                                        this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration22222));
                                                                                                        this.videoInfoLayout = new StaticLayout(formatShortDuration22222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                        i91 = max6;
                                                                                                        z59 = z56;
                                                                                                        if (this.hasInvoicePreview) {
                                                                                                        }
                                                                                                        if (this.hasGamePreview) {
                                                                                                        }
                                                                                                        i92 = i106;
                                                                                                        calcBackgroundWidth(i88, i92, i91);
                                                                                                        z53 = z59;
                                                                                                        if (!this.hasInvoicePreview) {
                                                                                                        }
                                                                                                        if (!this.hasInvoicePreview) {
                                                                                                        }
                                                                                                        int i1582222222222222222222 = this.totalHeight;
                                                                                                        if (this.drawInstantView) {
                                                                                                        }
                                                                                                        this.totalHeight = i1582222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                                        createInstantViewButton();
                                                                                                        z15 = z54;
                                                                                                        z64 = z53;
                                                                                                    }
                                                                                                    i101 = AndroidUtilities.displaySize.y / 3;
                                                                                                    if (i100 > i101) {
                                                                                                    }
                                                                                                    if (this.imageBackgroundSideColor == 0) {
                                                                                                    }
                                                                                                    if (dp27222222 < AndroidUtilities.dp(60.0f)) {
                                                                                                    }
                                                                                                    if (this.isSmallImage) {
                                                                                                    }
                                                                                                    if (this.documentAttachType == 8) {
                                                                                                    }
                                                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                                    float f13222 = AndroidUtilities.density;
                                                                                                    int i187222 = (int) (i99 / f13222);
                                                                                                    int i188222 = (int) (dp27222222 / f13222);
                                                                                                    Locale locale222 = Locale.US;
                                                                                                    this.currentPhotoFilter = String.format(locale222, "%d_%d", Integer.valueOf(i187222), Integer.valueOf(i188222));
                                                                                                    this.currentPhotoFilterThumb = String.format(locale222, "%d_%d_b", Integer.valueOf(i187222), Integer.valueOf(i188222));
                                                                                                    i105 = this.drawInstantViewType;
                                                                                                    if (i105 == 23) {
                                                                                                    }
                                                                                                    if (webFile3 == null) {
                                                                                                    }
                                                                                                    z54 = true;
                                                                                                    z56 = z55;
                                                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    if (this.photoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    this.drawPhotoImage = z56;
                                                                                                    if (str14 != null) {
                                                                                                    }
                                                                                                    String formatShortDuration222222 = AndroidUtilities.formatShortDuration(i74);
                                                                                                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration222222));
                                                                                                    this.videoInfoLayout = new StaticLayout(formatShortDuration222222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                    i91 = max6;
                                                                                                    z59 = z56;
                                                                                                    if (this.hasInvoicePreview) {
                                                                                                    }
                                                                                                    if (this.hasGamePreview) {
                                                                                                    }
                                                                                                    i92 = i106;
                                                                                                    calcBackgroundWidth(i88, i92, i91);
                                                                                                    z53 = z59;
                                                                                                    if (!this.hasInvoicePreview) {
                                                                                                    }
                                                                                                    if (!this.hasInvoicePreview) {
                                                                                                    }
                                                                                                    int i15822222222222222222222 = this.totalHeight;
                                                                                                    if (this.drawInstantView) {
                                                                                                    }
                                                                                                    this.totalHeight = i15822222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                                    createInstantViewButton();
                                                                                                    z15 = z54;
                                                                                                    z64 = z53;
                                                                                                }
                                                                                                if (this.hasInvoicePreview) {
                                                                                                }
                                                                                                i103 = 640;
                                                                                                i104 = 360;
                                                                                                float f102 = i103;
                                                                                                float dp302 = f102 / (dp27222222 - AndroidUtilities.dp(2.0f));
                                                                                                i99 = (int) (f102 / dp302);
                                                                                                dp27222222 = (int) (i104 / dp302);
                                                                                                if (this.isSmallImage) {
                                                                                                }
                                                                                                if (this.documentAttachType == 8) {
                                                                                                }
                                                                                                this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                                float f132222 = AndroidUtilities.density;
                                                                                                int i1872222 = (int) (i99 / f132222);
                                                                                                int i1882222 = (int) (dp27222222 / f132222);
                                                                                                Locale locale2222 = Locale.US;
                                                                                                this.currentPhotoFilter = String.format(locale2222, "%d_%d", Integer.valueOf(i1872222), Integer.valueOf(i1882222));
                                                                                                this.currentPhotoFilterThumb = String.format(locale2222, "%d_%d_b", Integer.valueOf(i1872222), Integer.valueOf(i1882222));
                                                                                                i105 = this.drawInstantViewType;
                                                                                                if (i105 == 23) {
                                                                                                }
                                                                                                if (webFile3 == null) {
                                                                                                }
                                                                                                z54 = true;
                                                                                                z56 = z55;
                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                }
                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                }
                                                                                                this.drawPhotoImage = z56;
                                                                                                if (str14 != null) {
                                                                                                }
                                                                                                String formatShortDuration2222222 = AndroidUtilities.formatShortDuration(i74);
                                                                                                this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration2222222));
                                                                                                this.videoInfoLayout = new StaticLayout(formatShortDuration2222222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                                i91 = max6;
                                                                                                z59 = z56;
                                                                                                if (this.hasInvoicePreview) {
                                                                                                }
                                                                                                if (this.hasGamePreview) {
                                                                                                }
                                                                                                i92 = i106;
                                                                                                calcBackgroundWidth(i88, i92, i91);
                                                                                                z53 = z59;
                                                                                                if (!this.hasInvoicePreview) {
                                                                                                }
                                                                                                if (!this.hasInvoicePreview) {
                                                                                                }
                                                                                                int i158222222222222222222222 = this.totalHeight;
                                                                                                if (this.drawInstantView) {
                                                                                                }
                                                                                                this.totalHeight = i158222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                                createInstantViewButton();
                                                                                                z15 = z54;
                                                                                                z64 = z53;
                                                                                            }
                                                                                            this.photoImage.setInvalidateAll(true);
                                                                                            i99 = dp27222222;
                                                                                            if (this.isSmallImage) {
                                                                                            }
                                                                                            if (this.documentAttachType == 8) {
                                                                                            }
                                                                                            this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                            float f1322222 = AndroidUtilities.density;
                                                                                            int i18722222 = (int) (i99 / f1322222);
                                                                                            int i18822222 = (int) (dp27222222 / f1322222);
                                                                                            Locale locale22222 = Locale.US;
                                                                                            this.currentPhotoFilter = String.format(locale22222, "%d_%d", Integer.valueOf(i18722222), Integer.valueOf(i18822222));
                                                                                            this.currentPhotoFilterThumb = String.format(locale22222, "%d_%d_b", Integer.valueOf(i18722222), Integer.valueOf(i18822222));
                                                                                            i105 = this.drawInstantViewType;
                                                                                            if (i105 == 23) {
                                                                                            }
                                                                                            if (webFile3 == null) {
                                                                                            }
                                                                                            z54 = true;
                                                                                            z56 = z55;
                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                            }
                                                                                            if (this.photoImage.getBitmap() != null) {
                                                                                            }
                                                                                            this.drawPhotoImage = z56;
                                                                                            if (str14 != null) {
                                                                                            }
                                                                                            String formatShortDuration22222222 = AndroidUtilities.formatShortDuration(i74);
                                                                                            this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration22222222));
                                                                                            this.videoInfoLayout = new StaticLayout(formatShortDuration22222222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                            i91 = max6;
                                                                                            z59 = z56;
                                                                                            if (this.hasInvoicePreview) {
                                                                                            }
                                                                                            if (this.hasGamePreview) {
                                                                                            }
                                                                                            i92 = i106;
                                                                                            calcBackgroundWidth(i88, i92, i91);
                                                                                            z53 = z59;
                                                                                            if (!this.hasInvoicePreview) {
                                                                                            }
                                                                                            if (!this.hasInvoicePreview) {
                                                                                            }
                                                                                            int i1582222222222222222222222 = this.totalHeight;
                                                                                            if (this.drawInstantView) {
                                                                                            }
                                                                                            this.totalHeight = i1582222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                            createInstantViewButton();
                                                                                            z15 = z54;
                                                                                            z64 = z53;
                                                                                        }
                                                                                        this.drawImageButton = !(tLRPC$Photo4 == null || z52) || (str14 != null && (str14.equals("photo") || ((str14.equals("document") && this.documentAttachType != 6) || str14.equals("gif") || (i95 = this.documentAttachType) == 4 || i95 == 8)));
                                                                                        if (this.isSmallImage) {
                                                                                        }
                                                                                        i96 = this.linkPreviewHeight;
                                                                                        if (i96 != 0) {
                                                                                        }
                                                                                        if (this.imageBackgroundSideColor != 0) {
                                                                                        }
                                                                                        if (this.hasInvoicePreview) {
                                                                                        }
                                                                                        max6 = Math.max(max9222222, (dp27222222 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp29222222);
                                                                                        tLRPC$PhotoSize9 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize9 != null) {
                                                                                        }
                                                                                        if (this.imageBackgroundSideColor != 0) {
                                                                                        }
                                                                                        if (z52) {
                                                                                        }
                                                                                        this.photoImage.setInvalidateAll(true);
                                                                                        i99 = dp27222222;
                                                                                        if (this.isSmallImage) {
                                                                                        }
                                                                                        if (this.documentAttachType == 8) {
                                                                                        }
                                                                                        this.photoImage.setImageCoords(0.0f, 0.0f, i99, dp27222222);
                                                                                        float f13222222 = AndroidUtilities.density;
                                                                                        int i187222222 = (int) (i99 / f13222222);
                                                                                        int i188222222 = (int) (dp27222222 / f13222222);
                                                                                        Locale locale222222 = Locale.US;
                                                                                        this.currentPhotoFilter = String.format(locale222222, "%d_%d", Integer.valueOf(i187222222), Integer.valueOf(i188222222));
                                                                                        this.currentPhotoFilterThumb = String.format(locale222222, "%d_%d_b", Integer.valueOf(i187222222), Integer.valueOf(i188222222));
                                                                                        i105 = this.drawInstantViewType;
                                                                                        if (i105 == 23) {
                                                                                        }
                                                                                        if (webFile3 == null) {
                                                                                        }
                                                                                        z54 = true;
                                                                                        z56 = z55;
                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                        }
                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                        }
                                                                                        this.drawPhotoImage = z56;
                                                                                        if (str14 != null) {
                                                                                        }
                                                                                        String formatShortDuration222222222 = AndroidUtilities.formatShortDuration(i74);
                                                                                        this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration222222222));
                                                                                        this.videoInfoLayout = new StaticLayout(formatShortDuration222222222, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                        i91 = max6;
                                                                                        z59 = z56;
                                                                                        if (this.hasInvoicePreview) {
                                                                                        }
                                                                                        if (this.hasGamePreview) {
                                                                                        }
                                                                                        i92 = i106;
                                                                                        calcBackgroundWidth(i88, i92, i91);
                                                                                        z53 = z59;
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        if (!this.hasInvoicePreview) {
                                                                                        }
                                                                                        int i15822222222222222222222222 = this.totalHeight;
                                                                                        if (this.drawInstantView) {
                                                                                        }
                                                                                        this.totalHeight = i15822222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                        createInstantViewButton();
                                                                                        z15 = z54;
                                                                                        z64 = z53;
                                                                                    }
                                                                                    i91 = max9222222;
                                                                                    messageObject3 = messageObject18;
                                                                                    i92 = i89;
                                                                                    z53 = true;
                                                                                    i2 = 4;
                                                                                    z14 = false;
                                                                                    z54 = true;
                                                                                    if (!this.hasInvoicePreview) {
                                                                                    }
                                                                                    if (!this.hasInvoicePreview) {
                                                                                    }
                                                                                    int i158222222222222222222222222 = this.totalHeight;
                                                                                    if (this.drawInstantView) {
                                                                                    }
                                                                                    this.totalHeight = i158222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                                    createInstantViewButton();
                                                                                    z15 = z54;
                                                                                    z64 = z53;
                                                                                }
                                                                            }
                                                                            tLRPC$Document8 = tLRPC$Document7;
                                                                            webFile3 = webFile4;
                                                                            tLRPC$Photo4 = tLRPC$Photo3;
                                                                        }
                                                                    }
                                                                    z52 = false;
                                                                    i90 = this.documentAttachType;
                                                                    if (i90 == 5) {
                                                                    }
                                                                    i91 = max9222222;
                                                                    messageObject3 = messageObject18;
                                                                    i92 = i89;
                                                                    z53 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                    z54 = true;
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    if (!this.hasInvoicePreview) {
                                                                    }
                                                                    int i1582222222222222222222222222 = this.totalHeight;
                                                                    if (this.drawInstantView) {
                                                                    }
                                                                    this.totalHeight = i1582222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                    createInstantViewButton();
                                                                    z15 = z54;
                                                                    z64 = z53;
                                                                }
                                                                tLRPC$Document8 = tLRPC$Document7;
                                                                webFile3 = webFile2;
                                                                i90 = this.documentAttachType;
                                                                if (i90 == 5) {
                                                                }
                                                                i91 = max9222222;
                                                                messageObject3 = messageObject18;
                                                                i92 = i89;
                                                                z53 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z54 = true;
                                                                if (!this.hasInvoicePreview) {
                                                                }
                                                                if (!this.hasInvoicePreview) {
                                                                }
                                                                int i15822222222222222222222222222 = this.totalHeight;
                                                                if (this.drawInstantView) {
                                                                }
                                                                this.totalHeight = i15822222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                createInstantViewButton();
                                                                z15 = z54;
                                                                z64 = z53;
                                                            }
                                                            max5 = 0;
                                                            if (str6 != null) {
                                                            }
                                                            if (str10 != null) {
                                                            }
                                                            if (z50) {
                                                                i156222222 -= AndroidUtilities.dp(48.0f);
                                                            }
                                                            if (str12 != null) {
                                                                i110 = this.linkPreviewHeight;
                                                                if (i110 == 0) {
                                                                }
                                                                str15 = str12;
                                                                str16 = Emoji.replaceEmoji((CharSequence) str15, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                                if (i77 == 3) {
                                                                }
                                                                StaticLayout generateStaticLayout322 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i156222222, (i156222222 - dp27222222) - dp28222222, i77, 1);
                                                                this.authorLayout = generateStaticLayout322;
                                                                i77 -= generateStaticLayout322.getLineCount();
                                                                this.authorLayoutLeft = this.authorLayout.getWidth();
                                                                this.authorLayoutWidth = 0;
                                                                while (i111 < this.authorLayout.getLineCount()) {
                                                                }
                                                                StaticLayout staticLayout5222 = this.authorLayout;
                                                                int lineBottom3222 = staticLayout5222.getLineBottom(staticLayout5222.getLineCount() - 1);
                                                                this.linkPreviewHeight += lineBottom3222;
                                                                this.totalHeight += lineBottom3222;
                                                                max9222222 = Math.max(max9222222, this.authorLayoutWidth + dp29222222);
                                                                Math.max(i81, this.authorLayoutWidth + dp29222222);
                                                            }
                                                            int i157222222222222222 = i77;
                                                            if (str8 != null) {
                                                            }
                                                            if (z47) {
                                                                this.isSmallImage = false;
                                                                z52 = false;
                                                                if (!z52) {
                                                                }
                                                                if (this.drawInstantViewType != 17) {
                                                                }
                                                                tLRPC$Document8 = tLRPC$Document7;
                                                                webFile3 = webFile2;
                                                                i90 = this.documentAttachType;
                                                                if (i90 == 5) {
                                                                }
                                                                i91 = max9222222;
                                                                messageObject3 = messageObject18;
                                                                i92 = i89;
                                                                z53 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z54 = true;
                                                                if (!this.hasInvoicePreview) {
                                                                }
                                                                if (!this.hasInvoicePreview) {
                                                                }
                                                                int i158222222222222222222222222222 = this.totalHeight;
                                                                if (this.drawInstantView) {
                                                                }
                                                                this.totalHeight = i158222222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                                createInstantViewButton();
                                                                z15 = z54;
                                                                z64 = z53;
                                                            }
                                                            z52 = z47;
                                                            if (!z52) {
                                                            }
                                                            if (this.drawInstantViewType != 17) {
                                                            }
                                                            tLRPC$Document8 = tLRPC$Document7;
                                                            webFile3 = webFile2;
                                                            i90 = this.documentAttachType;
                                                            if (i90 == 5) {
                                                            }
                                                            i91 = max9222222;
                                                            messageObject3 = messageObject18;
                                                            i92 = i89;
                                                            z53 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                            z54 = true;
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            if (!this.hasInvoicePreview) {
                                                            }
                                                            int i1582222222222222222222222222222 = this.totalHeight;
                                                            if (this.drawInstantView) {
                                                            }
                                                            this.totalHeight = i1582222222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                            createInstantViewButton();
                                                            z15 = z54;
                                                            z64 = z53;
                                                        }
                                                        tLRPC$Document5 = tLRPC$Document4;
                                                        i75 = 0;
                                                        charSequence6 = str9;
                                                        i76 = this.drawInstantViewType;
                                                        if (i76 == 18) {
                                                        }
                                                        int dp292222222 = AndroidUtilities.dp(20.0f);
                                                        if (this.hasInvoicePreview) {
                                                        }
                                                        String str292222222 = str11;
                                                        if (this.drawInstantViewType == 17) {
                                                        }
                                                        int i1562222222 = maxMessageTextWidth - dp292222222;
                                                        messageObject17 = this.currentMessageObject;
                                                        if (messageObject17.photoThumbs == null) {
                                                            messageObject17.generateThumbs(true);
                                                        }
                                                        this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                        this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                                        this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                        this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                                        int max92222222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                                        if (string7 == null) {
                                                        }
                                                        max5 = 0;
                                                        if (str6 != null) {
                                                        }
                                                        if (str10 != null) {
                                                        }
                                                        if (z50) {
                                                        }
                                                        if (str12 != null) {
                                                        }
                                                        int i1572222222222222222 = i77;
                                                        if (str8 != null) {
                                                        }
                                                        if (z47) {
                                                        }
                                                        z52 = z47;
                                                        if (!z52) {
                                                        }
                                                        if (this.drawInstantViewType != 17) {
                                                        }
                                                        tLRPC$Document8 = tLRPC$Document7;
                                                        webFile3 = webFile2;
                                                        i90 = this.documentAttachType;
                                                        if (i90 == 5) {
                                                        }
                                                        i91 = max92222222;
                                                        messageObject3 = messageObject18;
                                                        i92 = i89;
                                                        z53 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z54 = true;
                                                        if (!this.hasInvoicePreview) {
                                                        }
                                                        if (!this.hasInvoicePreview) {
                                                        }
                                                        int i15822222222222222222222222222222 = this.totalHeight;
                                                        if (this.drawInstantView) {
                                                        }
                                                        this.totalHeight = i15822222222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                                        createInstantViewButton();
                                                        z15 = z54;
                                                        z64 = z53;
                                                    } else {
                                                        this.photoImage.setImageBitmap((Drawable) null);
                                                        calcBackgroundWidth(i153, extraTimeX, max4);
                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                            this.blurredPhotoImage.getBitmap().recycle();
                                                            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                        }
                                                        if (messageObject.isUnsupported()) {
                                                            createInstantViewButton();
                                                        }
                                                        i91 = max4;
                                                        i88 = i153;
                                                        i92 = extraTimeX;
                                                        messageObject3 = messageObject23;
                                                        z64 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z15 = true;
                                                    }
                                                    this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                                    z70 = z64;
                                                    if (this.hasFactCheck) {
                                                        calcBackgroundWidth(i88, i92, Math.max(i91, this.factCheckWidth));
                                                        z70 = z64;
                                                    }
                                                    z21 = z15;
                                                    c2 = 0;
                                                    r3 = z70;
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    c5 = c2;
                                                    messageObject19 = this.currentMessageObject;
                                                    if (messageObject19.eventId == 0) {
                                                    }
                                                    i127 = 3;
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                }
                                            }
                                            tLRPC$Document = null;
                                            tLRPC$ThemeSettings = null;
                                            z41 = false;
                                            arrayList3 = null;
                                            tL_stories$StoryItem = null;
                                            z43 = false;
                                            if (messageObject23.isRepostPreview) {
                                            }
                                            this.backgroundWidth = i153;
                                            if (this.hasLinkPreview) {
                                            }
                                            int max72222222 = Math.max(i153, messageObject23.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                            this.backgroundWidth = max72222222;
                                            this.backgroundWidth = Math.max(max72222222, this.timeWidth + AndroidUtilities.dp(31.0f));
                                            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                            if (messageObject.isRoundVideo()) {
                                            }
                                            setMessageObjectInternal(messageObject);
                                            this.giveawayMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                            this.giveawayResultsMessageCell.setMessageContent(messageObject23, getParentWidth(), this.forwardedNameWidth);
                                            if (messageObject.isSponsored()) {
                                            }
                                            if (!messageObject.isSponsored()) {
                                            }
                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                            }
                                            if (this.drawPinnedTop) {
                                            }
                                            messageObject15 = this.currentMessageObject;
                                            if (messageObject15 != null) {
                                            }
                                            int max82222222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                            messageTopicButton = this.topicButton;
                                            if (messageTopicButton != null) {
                                            }
                                            max4 = Math.max(max82222222, this.replyTextWidth);
                                            if (this.commentLayout != null) {
                                            }
                                            if (this.hasLinkPreview) {
                                            }
                                            messageObject16 = this.currentMessageObject;
                                            if (!messageObject16.isRepostPreview) {
                                            }
                                            if (this.drawSideButton != 0) {
                                            }
                                            int dp272222222 = AndroidUtilities.dp(48.0f);
                                            int dp282222222 = AndroidUtilities.dp(10.0f);
                                            if (!messageObject.isSponsored()) {
                                            }
                                            tLRPC$Document5 = tLRPC$Document4;
                                            i75 = 0;
                                            charSequence6 = str9;
                                            i76 = this.drawInstantViewType;
                                            if (i76 == 18) {
                                            }
                                            int dp2922222222 = AndroidUtilities.dp(20.0f);
                                            if (this.hasInvoicePreview) {
                                            }
                                            String str2922222222 = str11;
                                            if (this.drawInstantViewType == 17) {
                                            }
                                            int i15622222222 = maxMessageTextWidth - dp2922222222;
                                            messageObject17 = this.currentMessageObject;
                                            if (messageObject17.photoThumbs == null) {
                                            }
                                            this.totalHeight += this.giveawayMessageCell.getMeasuredHeight();
                                            this.linkPreviewHeight += this.giveawayMessageCell.getMeasuredHeight();
                                            this.totalHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                            this.linkPreviewHeight += this.giveawayResultsMessageCell.getMeasuredHeight();
                                            int max922222222 = Math.max(Math.max(max4, this.giveawayMessageCell.getMeasuredWidth()), this.giveawayResultsMessageCell.getMeasuredWidth());
                                            if (string7 == null) {
                                            }
                                            max5 = 0;
                                            if (str6 != null) {
                                            }
                                            if (str10 != null) {
                                            }
                                            if (z50) {
                                            }
                                            if (str12 != null) {
                                            }
                                            int i15722222222222222222 = i77;
                                            if (str8 != null) {
                                            }
                                            if (z47) {
                                            }
                                            z52 = z47;
                                            if (!z52) {
                                            }
                                            if (this.drawInstantViewType != 17) {
                                            }
                                            tLRPC$Document8 = tLRPC$Document7;
                                            webFile3 = webFile2;
                                            i90 = this.documentAttachType;
                                            if (i90 == 5) {
                                            }
                                            i91 = max922222222;
                                            messageObject3 = messageObject18;
                                            i92 = i89;
                                            z53 = true;
                                            i2 = 4;
                                            z14 = false;
                                            z54 = true;
                                            if (!this.hasInvoicePreview) {
                                            }
                                            if (!this.hasInvoicePreview) {
                                            }
                                            int i158222222222222222222222222222222 = this.totalHeight;
                                            if (this.drawInstantView) {
                                            }
                                            this.totalHeight = i158222222222222222222222222222222 + AndroidUtilities.dp(i94 + i93);
                                            createInstantViewButton();
                                            z15 = z54;
                                            z64 = z53;
                                            this.totalHeight += layoutFactCheck(i88 - AndroidUtilities.dp(30.0f));
                                            z70 = z64;
                                            if (this.hasFactCheck) {
                                            }
                                            z21 = z15;
                                            c2 = 0;
                                            r3 = z70;
                                            if (this.currentPosition != null) {
                                            }
                                            if (!messageObject.isSponsored()) {
                                            }
                                            c5 = c2;
                                            messageObject19 = this.currentMessageObject;
                                            if (messageObject19.eventId == 0) {
                                            }
                                            i127 = 3;
                                            this.botButtons.clear();
                                            if (z77) {
                                            }
                                            if (!messageObject3.isRestrictedMessage) {
                                            }
                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                            this.keyboardHeight = z14 ? 1 : 0;
                                            z66 = r3;
                                            if (this.drawCommentButton) {
                                            }
                                            if (this.hasFactCheck) {
                                            }
                                            z67 = this.drawPinnedBottom;
                                            if (z67) {
                                            }
                                            if (!z67) {
                                            }
                                            if (!this.mediaBackground) {
                                            }
                                            if (messageObject3.type != 19) {
                                            }
                                            if (this.drawPhotoImage) {
                                            }
                                            if (this.documentAttachType == 5) {
                                            }
                                            calculateUnlockXY();
                                            if (z21) {
                                            }
                                            updateAnimatedEmojis();
                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                            if (stickerSetLinkIcon2 != null) {
                                            }
                                            textLayoutBlocks4 = null;
                                            this.prevCaptionLayout = textLayoutBlocks4;
                                            r32 = z66;
                                            r62 = textLayoutBlocks4;
                                        } else {
                                            int i199 = messageObject23.type;
                                            if (i199 == 16) {
                                                messageObject2 = messageObject23;
                                                createSelectorDrawable(0);
                                                this.drawName = false;
                                                this.drawForwardedName = false;
                                                this.drawPhotoImage = false;
                                                if (AndroidUtilities.isTablet()) {
                                                    this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                } else {
                                                    this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                }
                                                this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                int maxNameWidth = getMaxNameWidth() - AndroidUtilities.dp(50.0f);
                                                if (maxNameWidth < 0) {
                                                    maxNameWidth = AndroidUtilities.dp(10.0f);
                                                }
                                                String format = LocaleController.getInstance().getFormatterDay().format(messageObject2.messageOwner.date * 1000);
                                                TLRPC$TL_messageActionPhoneCall tLRPC$TL_messageActionPhoneCall = (TLRPC$TL_messageActionPhoneCall) messageObject2.messageOwner.action;
                                                boolean z87 = tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonMissed;
                                                if (messageObject.isOutOwner()) {
                                                    if (z87) {
                                                        if (tLRPC$TL_messageActionPhoneCall.video) {
                                                            string = LocaleController.getString("CallMessageVideoOutgoingMissed", R.string.CallMessageVideoOutgoingMissed);
                                                        } else {
                                                            string = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
                                                        }
                                                    } else if (tLRPC$TL_messageActionPhoneCall.video) {
                                                        string = LocaleController.getString("CallMessageVideoOutgoing", R.string.CallMessageVideoOutgoing);
                                                    } else {
                                                        string = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
                                                    }
                                                } else if (z87) {
                                                    if (tLRPC$TL_messageActionPhoneCall.video) {
                                                        string = LocaleController.getString("CallMessageVideoIncomingMissed", R.string.CallMessageVideoIncomingMissed);
                                                    } else {
                                                        string = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
                                                    }
                                                } else if (tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonBusy) {
                                                    if (tLRPC$TL_messageActionPhoneCall.video) {
                                                        string = LocaleController.getString("CallMessageVideoIncomingDeclined", R.string.CallMessageVideoIncomingDeclined);
                                                    } else {
                                                        string = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
                                                    }
                                                } else if (tLRPC$TL_messageActionPhoneCall.video) {
                                                    string = LocaleController.getString("CallMessageVideoIncoming", R.string.CallMessageVideoIncoming);
                                                } else {
                                                    string = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
                                                }
                                                if (tLRPC$TL_messageActionPhoneCall.duration > 0) {
                                                    format = format + ", " + LocaleController.formatCallDuration(tLRPC$TL_messageActionPhoneCall.duration);
                                                }
                                                TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
                                                Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
                                                this.titleLayout = new StaticLayout(TextUtils.ellipsize(string, Theme.chat_audioTitlePaint, maxNameWidth, truncateAt), Theme.chat_audioTitlePaint, maxNameWidth + AndroidUtilities.dp(2.0f), alignment, 1.0f, 0.0f, false);
                                                this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(format, Theme.chat_contactPhonePaint, maxNameWidth - AndroidUtilities.dp(19.0f), truncateAt), Theme.chat_contactPhonePaint, maxNameWidth + AndroidUtilities.dp(2.0f), alignment, 1.0f, 0.0f, false);
                                                setMessageObjectInternal(messageObject);
                                                int dp41 = AndroidUtilities.dp(65.0f);
                                                int i200 = this.namesOffset;
                                                this.totalHeight = dp41 + i200;
                                                if (this.drawPinnedTop) {
                                                    this.namesOffset = i200 - AndroidUtilities.dp(1.0f);
                                                }
                                            } else if (i199 == 12) {
                                                this.drawContact = true;
                                                this.drawName = (this.isSavedChat && !messageObject.isOutOwner() && (messageObject.getSavedDialogId() < 0 || messageObject.getSavedDialogId() == UserObject.ANONYMOUS)) || (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject23.messageOwner.fwd_from.from_id == null);
                                                this.drawForwardedName = !this.isRepliesChat;
                                                this.drawPhotoImage = true;
                                                this.photoImage.setRoundRadius(AndroidUtilities.dp(22.0f));
                                                if (AndroidUtilities.isTablet()) {
                                                    this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                } else {
                                                    this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                }
                                                this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                long j2 = MessageObject.getMedia(messageObject23.messageOwner).user_id;
                                                TLRPC$User user3 = j2 == 0 ? null : MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2));
                                                int maxNameWidth2 = getMaxNameWidth() - AndroidUtilities.dp(80.0f);
                                                if (maxNameWidth2 < 0) {
                                                    maxNameWidth2 = AndroidUtilities.dp(10.0f);
                                                }
                                                if (user3 != null) {
                                                    this.contactAvatarDrawable.setInfo(this.currentAccount, user3);
                                                } else if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject23.messageOwner).first_name) || !TextUtils.isEmpty(MessageObject.getMedia(messageObject23.messageOwner).last_name)) {
                                                    this.contactAvatarDrawable.setInfo(0L, MessageObject.getMedia(messageObject23.messageOwner).first_name, MessageObject.getMedia(messageObject23.messageOwner).last_name);
                                                } else {
                                                    z12 = false;
                                                    this.photoImage.setForUserOrChat(user3, z12 ? Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0] : this.contactAvatarDrawable, messageObject23);
                                                    if (TextUtils.isEmpty(messageObject23.vCardData)) {
                                                        charSequence = messageObject23.vCardData;
                                                    } else if (user3 != null && !TextUtils.isEmpty(user3.phone)) {
                                                        charSequence = PhoneFormat.getInstance().format("+" + user3.phone);
                                                    } else {
                                                        String str41 = MessageObject.getMedia(messageObject23.messageOwner).phone_number;
                                                        if (!TextUtils.isEmpty(str41)) {
                                                            charSequence = PhoneFormat.getInstance().format(str41);
                                                        } else {
                                                            charSequence = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
                                                        }
                                                    }
                                                    CharSequence charSequence10 = charSequence;
                                                    if (user3 == null || !TextUtils.isEmpty(messageObject23.vCardData) || (MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaContact)) {
                                                        if (user3 == null) {
                                                            this.drawContactSendMessage = true;
                                                            this.drawContactAdd = !user3.contact;
                                                        } else {
                                                            this.drawContactView = true;
                                                        }
                                                    }
                                                    replace = ContactsController.formatName(MessageObject.getMedia(messageObject23.messageOwner).first_name, MessageObject.getMedia(messageObject23.messageOwner).last_name).replace('\n', ' ');
                                                    if (replace.length() == 0 && (replace = MessageObject.getMedia(messageObject23.messageOwner).phone_number) == null) {
                                                        replace = "";
                                                    }
                                                    Layout.Alignment alignment2 = Layout.Alignment.ALIGN_NORMAL;
                                                    this.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), alignment2, 1.0f, 0.0f, false);
                                                    this.docTitleLayout = new StaticLayout(charSequence10, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), alignment2, 1.0f, AndroidUtilities.dp(1.0f), false);
                                                    setMessageObjectInternal(messageObject);
                                                    if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition2 = this.currentPosition) == null || groupedMessagePosition2.minY == 0)) {
                                                        this.namesOffset += AndroidUtilities.dp(5.0f);
                                                    } else if (this.drawNameLayout && messageObject.getReplyMsgId() == 0) {
                                                        this.namesOffset += AndroidUtilities.dp(7.0f);
                                                    }
                                                    this.totalHeight = AndroidUtilities.dp(65.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                                                    if (this.drawPinnedTop) {
                                                        this.namesOffset -= AndroidUtilities.dp(1.0f);
                                                    }
                                                    if (this.drawContactSendMessage || this.drawContactAdd || this.drawContactView) {
                                                        createContactButtons();
                                                    } else if (this.docTitleLayout.getLineCount() > 0) {
                                                        int dp42 = this.backgroundWidth - AndroidUtilities.dp(110.0f);
                                                        StaticLayout staticLayout11 = this.docTitleLayout;
                                                        if (dp42 - ((int) Math.ceil(staticLayout11.getLineWidth(staticLayout11.getLineCount() - 1))) < this.timeWidth) {
                                                            this.totalHeight += AndroidUtilities.dp(8.0f);
                                                        }
                                                    }
                                                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble.isSmall && !reactionsLayoutInBubble.isEmpty) {
                                                        reactionsLayoutInBubble.measure(this.backgroundWidth - AndroidUtilities.dp(32.0f), 3);
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble10 = this.reactionsLayoutInBubble;
                                                        reactionsLayoutInBubble10.totalHeight = reactionsLayoutInBubble10.height;
                                                        dp = this.backgroundWidth - AndroidUtilities.dp(32.0f);
                                                        reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                                                        if (dp - reactionsLayoutInBubble2.lastLineX < this.timeWidth) {
                                                            reactionsLayoutInBubble2.totalHeight += AndroidUtilities.dp(12.0f);
                                                            this.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(12.0f);
                                                        }
                                                        this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                                    }
                                                    messageObject3 = messageObject23;
                                                    z13 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                    z15 = false;
                                                    z70 = z13;
                                                    z21 = z15;
                                                    c2 = 0;
                                                    r3 = z70;
                                                    if (this.currentPosition != null) {
                                                        messageObject21 = this.currentMessageObject;
                                                        if (messageObject21.type != 29) {
                                                        }
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                        i120 = this.backgroundWidth;
                                                        if (this.currentMessageObject.type != 2) {
                                                        }
                                                        if (!AndroidUtilities.isTablet()) {
                                                        }
                                                        i120 = minTabletSide9 - dp20;
                                                        if (this.drawSideButton != 0) {
                                                            i120 -= AndroidUtilities.dp(24.0f);
                                                        }
                                                        dp21 = (i120 - AndroidUtilities.dp((this.currentMessageObject.type != 5 ? 0 : 14) + 31)) - (getExtraTextX() * 2);
                                                        if (!messageObject3.isRestrictedMessage) {
                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                            }
                                                            this.currentCaption = voiceTranscription;
                                                            if (voiceTranscription != null) {
                                                                str22 = ((Object) this.currentCaption) + " ";
                                                                this.currentCaption = str22;
                                                                if (!(str22 instanceof Spannable)) {
                                                                }
                                                                ((SpannableString) this.currentCaption).setSpan(new TranscribeButton.LoadingPointsSpan(), this.currentCaption.length() - r3, this.currentCaption.length(), 33);
                                                            }
                                                            this.captionFullWidth = dp21;
                                                            MessageObject.TextLayoutBlocks textLayoutBlocks5 = new MessageObject.TextLayoutBlocks(getPrimaryMessageObject(), this.currentCaption, Theme.chat_msgTextPaint, dp21);
                                                            this.captionLayout = textLayoutBlocks5;
                                                            textLayoutBlocks5.bounceFrom(this.prevCaptionLayout);
                                                            updateSeekBarWaveformWidth(null);
                                                        }
                                                        i121 = this.highlightCaptionToSetStart;
                                                        if (i121 >= 0) {
                                                            highlight(i121, this.highlightCaptionToSetEnd, textLayoutBlocks2.textLayoutBlocks);
                                                        }
                                                        this.highlightCaptionToSetEnd = -1;
                                                        this.highlightCaptionToSetStart = -1;
                                                        i122 = this.currentMessageObject.type;
                                                        if (i122 != 9) {
                                                        }
                                                        int layoutFactCheck2 = this.totalHeight + layoutFactCheck(dp21);
                                                        this.totalHeight = layoutFactCheck2;
                                                        if (this.hasFactCheck) {
                                                        }
                                                        if (this.captionLayout == null) {
                                                        }
                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                            float dp43 = ((this.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                                                            this.backgroundWidth = (int) (this.backgroundWidth + (Math.max(dp43, this.captionLayout.textWidth) - dp43));
                                                        }
                                                        dp22 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                        if (this.captionLayout == null) {
                                                        }
                                                        f8 = valueOf;
                                                        if (f8 != null) {
                                                        }
                                                    }
                                                    c5 = c2;
                                                    messageObject19 = this.currentMessageObject;
                                                    if (messageObject19.eventId == 0) {
                                                    }
                                                    i127 = 3;
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                }
                                                z12 = true;
                                                this.photoImage.setForUserOrChat(user3, z12 ? Theme.chat_contactDrawable[messageObject.isOutOwner() ? 1 : 0] : this.contactAvatarDrawable, messageObject23);
                                                if (TextUtils.isEmpty(messageObject23.vCardData)) {
                                                }
                                                CharSequence charSequence102 = charSequence;
                                                if (user3 == null) {
                                                }
                                                if (user3 == null) {
                                                }
                                                replace = ContactsController.formatName(MessageObject.getMedia(messageObject23.messageOwner).first_name, MessageObject.getMedia(messageObject23.messageOwner).last_name).replace('\n', ' ');
                                                if (replace.length() == 0) {
                                                    replace = "";
                                                }
                                                Layout.Alignment alignment22 = Layout.Alignment.ALIGN_NORMAL;
                                                this.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), alignment22, 1.0f, 0.0f, false);
                                                this.docTitleLayout = new StaticLayout(charSequence102, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), alignment22, 1.0f, AndroidUtilities.dp(1.0f), false);
                                                setMessageObjectInternal(messageObject);
                                                if (this.drawForwardedName) {
                                                    this.namesOffset += AndroidUtilities.dp(5.0f);
                                                    this.totalHeight = AndroidUtilities.dp(65.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                                                    if (this.drawPinnedTop) {
                                                    }
                                                    if (this.drawContactSendMessage) {
                                                        if (this.docTitleLayout.getLineCount() > 0) {
                                                        }
                                                        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble.isSmall) {
                                                            reactionsLayoutInBubble.measure(this.backgroundWidth - AndroidUtilities.dp(32.0f), 3);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble102 = this.reactionsLayoutInBubble;
                                                            reactionsLayoutInBubble102.totalHeight = reactionsLayoutInBubble102.height;
                                                            dp = this.backgroundWidth - AndroidUtilities.dp(32.0f);
                                                            reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                                                            if (dp - reactionsLayoutInBubble2.lastLineX < this.timeWidth) {
                                                            }
                                                            this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                                        }
                                                        messageObject3 = messageObject23;
                                                        z13 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z15 = false;
                                                        z70 = z13;
                                                        z21 = z15;
                                                        c2 = 0;
                                                        r3 = z70;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (!messageObject.isSponsored()) {
                                                        }
                                                        c5 = c2;
                                                        messageObject19 = this.currentMessageObject;
                                                        if (messageObject19.eventId == 0) {
                                                        }
                                                        i127 = 3;
                                                        this.botButtons.clear();
                                                        if (z77) {
                                                        }
                                                        if (!messageObject3.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                        z66 = r3;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        if (this.hasFactCheck) {
                                                        }
                                                        z67 = this.drawPinnedBottom;
                                                        if (z67) {
                                                        }
                                                        if (!z67) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject3.type != 19) {
                                                        }
                                                        if (this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType == 5) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z21) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                        if (stickerSetLinkIcon2 != null) {
                                                        }
                                                        textLayoutBlocks4 = null;
                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                        r32 = z66;
                                                        r62 = textLayoutBlocks4;
                                                    }
                                                    createContactButtons();
                                                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble.isSmall) {
                                                    }
                                                    messageObject3 = messageObject23;
                                                    z13 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                    z15 = false;
                                                    z70 = z13;
                                                    z21 = z15;
                                                    c2 = 0;
                                                    r3 = z70;
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    c5 = c2;
                                                    messageObject19 = this.currentMessageObject;
                                                    if (messageObject19.eventId == 0) {
                                                    }
                                                    i127 = 3;
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                }
                                                if (this.drawNameLayout) {
                                                    this.namesOffset += AndroidUtilities.dp(7.0f);
                                                }
                                                this.totalHeight = AndroidUtilities.dp(65.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                                                if (this.drawPinnedTop) {
                                                }
                                                if (this.drawContactSendMessage) {
                                                }
                                                createContactButtons();
                                                reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                                if (!reactionsLayoutInBubble.isSmall) {
                                                }
                                                messageObject3 = messageObject23;
                                                z13 = true;
                                                i2 = 4;
                                                z14 = false;
                                                z15 = false;
                                                z70 = z13;
                                                z21 = z15;
                                                c2 = 0;
                                                r3 = z70;
                                                if (this.currentPosition != null) {
                                                }
                                                if (!messageObject.isSponsored()) {
                                                }
                                                c5 = c2;
                                                messageObject19 = this.currentMessageObject;
                                                if (messageObject19.eventId == 0) {
                                                }
                                                i127 = 3;
                                                this.botButtons.clear();
                                                if (z77) {
                                                }
                                                if (!messageObject3.isRestrictedMessage) {
                                                }
                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                this.keyboardHeight = z14 ? 1 : 0;
                                                z66 = r3;
                                                if (this.drawCommentButton) {
                                                }
                                                if (this.hasFactCheck) {
                                                }
                                                z67 = this.drawPinnedBottom;
                                                if (z67) {
                                                }
                                                if (!z67) {
                                                }
                                                if (!this.mediaBackground) {
                                                }
                                                if (messageObject3.type != 19) {
                                                }
                                                if (this.drawPhotoImage) {
                                                }
                                                if (this.documentAttachType == 5) {
                                                }
                                                calculateUnlockXY();
                                                if (z21) {
                                                }
                                                updateAnimatedEmojis();
                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                if (stickerSetLinkIcon2 != null) {
                                                }
                                                textLayoutBlocks4 = null;
                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                r32 = z66;
                                                r62 = textLayoutBlocks4;
                                            } else if (i199 == 2) {
                                                messageObject2 = messageObject23;
                                                this.drawForwardedName = !this.isRepliesChat;
                                                this.drawName = (this.isSavedChat && !messageObject.isOutOwner() && (messageObject.getSavedDialogId() < 0 || messageObject.getSavedDialogId() == UserObject.ANONYMOUS)) || (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject2.messageOwner.fwd_from.from_id == null);
                                                if (AndroidUtilities.isTablet()) {
                                                    min = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                    this.backgroundWidth = min;
                                                } else {
                                                    min = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                    this.backgroundWidth = min;
                                                }
                                                createDocumentLayout(this.backgroundWidth, messageObject2);
                                                setMessageObjectInternal(messageObject);
                                                int dp44 = AndroidUtilities.dp(70.0f);
                                                int i201 = this.namesOffset;
                                                this.totalHeight = dp44 + i201;
                                                if (this.drawPinnedTop) {
                                                    this.namesOffset = i201 - AndroidUtilities.dp(1.0f);
                                                }
                                                ReactionsLayoutInBubble reactionsLayoutInBubble11 = this.reactionsLayoutInBubble;
                                                if (!reactionsLayoutInBubble11.isSmall) {
                                                    reactionsLayoutInBubble11.measure(min - (!messageObject.isOutOwner() ? AndroidUtilities.dp(24.0f) : AndroidUtilities.dp(32.0f)), 3);
                                                    ReactionsLayoutInBubble reactionsLayoutInBubble12 = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble12.isEmpty) {
                                                        reactionsLayoutInBubble12.totalHeight = reactionsLayoutInBubble12.height;
                                                        if (TextUtils.isEmpty(messageObject2.caption)) {
                                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                                        } else {
                                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                                        }
                                                        int i202 = this.reactionsLayoutInBubble.width;
                                                        if (i202 > this.backgroundWidth) {
                                                            this.backgroundWidth = i202;
                                                        }
                                                        int dp45 = this.timeWidth + AndroidUtilities.dp(6.0f);
                                                        if (messageObject.isQuickReply() && !messageObject.isSendError()) {
                                                            dp45 -= AndroidUtilities.dp(3.0f);
                                                        } else if (messageObject.isOutOwner()) {
                                                            dp45 += AndroidUtilities.dp(20.5f);
                                                        }
                                                        int extraTimeX2 = dp45 + getExtraTimeX();
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble13 = this.reactionsLayoutInBubble;
                                                        if (reactionsLayoutInBubble13.lastLineX + extraTimeX2 >= this.backgroundWidth) {
                                                            reactionsLayoutInBubble13.totalHeight += AndroidUtilities.dp(12.0f);
                                                            this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                                        }
                                                        this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                                    }
                                                }
                                            } else if (i199 == 14) {
                                                messageObject2 = messageObject23;
                                                this.drawName = (this.isSavedChat && !messageObject.isOutOwner() && (messageObject.getSavedDialogId() < 0 || messageObject.getSavedDialogId() == UserObject.ANONYMOUS)) || (((messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject2.messageOwner.fwd_from.from_id == null)) && ((groupedMessagePosition3 = this.currentPosition) == null || (groupedMessagePosition3.flags & 4) != 0));
                                                if (AndroidUtilities.isTablet()) {
                                                    min2 = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                    this.backgroundWidth = min2;
                                                } else {
                                                    min2 = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                                    this.backgroundWidth = min2;
                                                }
                                                int createDocumentLayout2 = createDocumentLayout(this.backgroundWidth, messageObject2);
                                                setMessageObjectInternal(messageObject);
                                                this.totalHeight = AndroidUtilities.dp(82.0f) + this.namesOffset;
                                                if (AndroidUtilities.dp(76.0f) + createDocumentLayout2 >= (this.backgroundWidth - this.timeWidth) - AndroidUtilities.dp(12.0f)) {
                                                    this.totalHeight += AndroidUtilities.dp(14.0f);
                                                }
                                                if (this.currentPosition != null && (groupedMessages5 = this.currentMessagesGroup) != null && groupedMessages5.messages.size() > 1) {
                                                    if ((this.currentPosition.flags & 4) == 0) {
                                                        this.totalHeight -= AndroidUtilities.dp(6.0f);
                                                        this.mediaOffsetY -= AndroidUtilities.dp(6.0f);
                                                    }
                                                    if ((this.currentPosition.flags & 8) == 0) {
                                                        this.totalHeight -= AndroidUtilities.dp(6.0f);
                                                    }
                                                }
                                                if (this.drawPinnedTop) {
                                                    this.namesOffset -= AndroidUtilities.dp(1.0f);
                                                }
                                                ReactionsLayoutInBubble reactionsLayoutInBubble14 = this.reactionsLayoutInBubble;
                                                if (!reactionsLayoutInBubble14.isSmall) {
                                                    reactionsLayoutInBubble14.measure(min2 - AndroidUtilities.dp(24.0f), 3);
                                                    ReactionsLayoutInBubble reactionsLayoutInBubble15 = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble15.isEmpty) {
                                                        reactionsLayoutInBubble15.totalHeight = reactionsLayoutInBubble15.height + AndroidUtilities.dp(12.0f);
                                                        measureTime(messageObject);
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble16 = this.reactionsLayoutInBubble;
                                                        int i203 = reactionsLayoutInBubble16.width;
                                                        if (i203 > this.backgroundWidth) {
                                                            this.backgroundWidth = i203;
                                                        }
                                                        if (reactionsLayoutInBubble16.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                                            this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                                        }
                                                        if (!messageObject2.isRestrictedMessage && messageObject2.caption != null) {
                                                            this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(14.0f);
                                                        }
                                                        this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                                    }
                                                }
                                            } else if (i199 == 17) {
                                                messageObject2 = messageObject23;
                                                boolean z88 = true;
                                                z88 = true;
                                                z88 = true;
                                                boolean z89 = false;
                                                int i204 = 2;
                                                int i205 = 3;
                                                ArrayList arrayList13 = null;
                                                if (this.timerParticles == null) {
                                                    this.timerParticles = new TimerParticles();
                                                }
                                                createSelectorDrawable(0);
                                                this.drawName = true;
                                                this.drawForwardedName = !this.isRepliesChat;
                                                this.drawPhotoImage = false;
                                                int min3 = Math.min(AndroidUtilities.dp(500.0f), messageObject.getMaxMessageTextWidth());
                                                this.backgroundWidth = AndroidUtilities.dp(31.0f) + min3;
                                                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll3 = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject2.messageOwner);
                                                this.timerTransitionProgress = tLRPC$TL_messageMediaPoll3.poll.close_date - ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() >= 60 ? 1.0f : 0.0f;
                                                this.pollClosed = tLRPC$TL_messageMediaPoll3.poll.closed;
                                                boolean isVoted = messageObject.isVoted();
                                                this.pollVoted = isVoted;
                                                if (isVoted) {
                                                    messageObject2.checkedVotes.clear();
                                                }
                                                CharSequence replaceEmoji = Emoji.replaceEmoji((CharSequence) new SpannableStringBuilder(tLRPC$TL_messageMediaPoll3.poll.question.text), Theme.chat_audioTitlePaint.getFontMetricsInt(), AndroidUtilities.dp(16.0f), false);
                                                ArrayList<TLRPC$MessageEntity> arrayList14 = tLRPC$TL_messageMediaPoll3.poll.question.entities;
                                                if (arrayList14 != null) {
                                                    replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, arrayList14, Theme.chat_audioTitlePaint.getFontMetricsInt(), true);
                                                    MessageObject.addEntitiesToText(replaceEmoji, tLRPC$TL_messageMediaPoll3.poll.question.entities, this.currentMessageObject.isOutOwner(), false, false, false);
                                                }
                                                StaticLayout staticLayout12 = new StaticLayout(replaceEmoji, Theme.chat_audioTitlePaint, (AndroidUtilities.dp(2.0f) + min3) - (getExtraTextX() * 2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                this.titleLayout = staticLayout12;
                                                this.animatedEmojiPollQuestion = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiPollQuestion, staticLayout12);
                                                StaticLayout staticLayout13 = this.titleLayout;
                                                if (staticLayout13 != null) {
                                                    int lineCount2 = staticLayout13.getLineCount();
                                                    for (int i206 = 0; i206 < lineCount2; i206++) {
                                                        if (this.titleLayout.getLineLeft(i206) > 0.0f) {
                                                            z16 = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                                z16 = false;
                                                if (this.pollClosed) {
                                                    string2 = LocaleController.getString("FinalResults", R.string.FinalResults);
                                                } else {
                                                    TLRPC$Poll tLRPC$Poll3 = tLRPC$TL_messageMediaPoll3.poll;
                                                    if (tLRPC$Poll3.quiz) {
                                                        if (tLRPC$Poll3.public_voters) {
                                                            string2 = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                                        } else {
                                                            string2 = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                                        }
                                                    } else if (tLRPC$Poll3.public_voters) {
                                                        string2 = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                                                    } else {
                                                        string2 = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                                                    }
                                                }
                                                TextPaint textPaint = Theme.chat_timePaint;
                                                float f14 = min3;
                                                TextUtils.TruncateAt truncateAt2 = TextUtils.TruncateAt.END;
                                                Layout.Alignment alignment3 = Layout.Alignment.ALIGN_NORMAL;
                                                StaticLayout staticLayout14 = new StaticLayout(TextUtils.ellipsize(string2, textPaint, f14, truncateAt2), Theme.chat_timePaint, (AndroidUtilities.dp(2.0f) + min3) - (getExtraTextX() * 2), alignment3, 1.0f, 0.0f, false);
                                                this.docTitleLayout = staticLayout14;
                                                if (staticLayout14.getLineCount() > 0) {
                                                    if (z16 && !LocaleController.isRTL) {
                                                        this.docTitleOffsetX = (int) Math.ceil(f14 - this.docTitleLayout.getLineWidth(0));
                                                    } else if (!z16 && LocaleController.isRTL) {
                                                        this.docTitleOffsetX = -((int) Math.ceil(this.docTitleLayout.getLineLeft(0)));
                                                    } else {
                                                        this.docTitleOffsetX = 0;
                                                    }
                                                }
                                                int dp46 = min3 - AndroidUtilities.dp(!messageObject.isOutOwner() ? 8.0f : 28.0f);
                                                if (!this.isBot) {
                                                    TLRPC$Poll tLRPC$Poll4 = tLRPC$TL_messageMediaPoll3.poll;
                                                    TextPaint textPaint2 = (tLRPC$Poll4.public_voters || tLRPC$Poll4.multiple_choice) ? Theme.chat_locationAddressPaint : Theme.chat_livePaint;
                                                    if (tLRPC$Poll4.quiz) {
                                                        int i207 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                                        ellipsize = TextUtils.ellipsize(i207 != 0 ? LocaleController.formatPluralString("Answer", i207, new Object[0]) : LocaleController.getString("NoVotesQuiz", R.string.NoVotesQuiz), textPaint2, dp46, truncateAt2);
                                                    } else {
                                                        int i208 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                                        ellipsize = TextUtils.ellipsize(i208 != 0 ? LocaleController.formatPluralString("Vote", i208, new Object[0]) : LocaleController.getString("NoVotes", R.string.NoVotes), textPaint2, dp46, truncateAt2);
                                                    }
                                                    StaticLayout staticLayout15 = new StaticLayout(ellipsize, textPaint2, dp46, alignment3, 1.0f, 0.0f, false);
                                                    this.infoLayout = staticLayout15;
                                                    TLRPC$Poll tLRPC$Poll5 = tLRPC$TL_messageMediaPoll3.poll;
                                                    if (!tLRPC$Poll5.public_voters && !tLRPC$Poll5.multiple_choice) {
                                                        this.infoX = (int) Math.ceil(staticLayout15.getLineCount() <= 0 ? 0.0d : -this.infoLayout.getLineLeft(0));
                                                        this.availableTimeWidth = (int) ((f14 - this.infoLayout.getLineWidth(0)) - AndroidUtilities.dp(16.0f));
                                                    } else {
                                                        double dp47 = this.backgroundWidth - AndroidUtilities.dp(28.0f);
                                                        double ceil9 = Math.ceil(this.infoLayout.getLineWidth(0));
                                                        Double.isNaN(dp47);
                                                        double lineLeft3 = this.infoLayout.getLineLeft(0);
                                                        Double.isNaN(lineLeft3);
                                                        this.infoX = (int) (((dp47 - ceil9) / 2.0d) - lineLeft3);
                                                        this.availableTimeWidth = min3;
                                                    }
                                                }
                                                measureTime(messageObject);
                                                TLRPC$Poll tLRPC$Poll6 = tLRPC$TL_messageMediaPoll3.poll;
                                                this.lastPoll = tLRPC$Poll6;
                                                TLRPC$PollResults tLRPC$PollResults3 = tLRPC$TL_messageMediaPoll3.results;
                                                this.lastPollResults = tLRPC$PollResults3.results;
                                                int i209 = tLRPC$PollResults3.total_voters;
                                                this.lastPollResultsVoters = i209;
                                                if ((tLRPC$Poll6.multiple_choice && !this.pollVoted && !this.pollClosed) || (!this.isBot && tLRPC$Poll6.public_voters && (this.pollVoted || (this.pollClosed && i209 != 0)))) {
                                                    this.drawInstantView = true;
                                                    this.drawInstantViewType = 8;
                                                    createInstantViewButton();
                                                }
                                                if (tLRPC$TL_messageMediaPoll3.poll.multiple_choice) {
                                                    createPollUI();
                                                }
                                                if (tLRPC$TL_messageMediaPoll3.results != null) {
                                                    createPollUI();
                                                    int size8 = tLRPC$TL_messageMediaPoll3.results.recent_voters.size();
                                                    int i210 = 0;
                                                    while (true) {
                                                        ImageReceiver[] imageReceiverArr2 = this.pollAvatarImages;
                                                        if (i210 >= imageReceiverArr2.length) {
                                                            break;
                                                        }
                                                        int i211 = min3;
                                                        if (!this.isBot && i210 < size8) {
                                                            imageReceiverArr2[i210].setImageCoords(0.0f, 0.0f, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f));
                                                            TLRPC$Peer tLRPC$Peer2 = tLRPC$TL_messageMediaPoll3.results.recent_voters.get(i210);
                                                            TLObject userOrChat = MessagesController.getInstance(this.currentAccount).getUserOrChat(DialogObject.getPeerDialogId(tLRPC$Peer2));
                                                            if (userOrChat != null) {
                                                                this.pollAvatarDrawables[i210].setInfo(this.currentAccount, userOrChat);
                                                                this.pollAvatarImages[i210].setForUserOrChat(userOrChat, this.pollAvatarDrawables[i210]);
                                                            } else {
                                                                this.pollAvatarDrawables[i210].setInfo(DialogObject.getPeerDialogId(tLRPC$Peer2), "", "");
                                                            }
                                                            i3 = 1;
                                                            this.pollAvatarImagesVisible[i210] = true;
                                                        } else {
                                                            if (!this.pollUnvoteInProgress || size8 != 0) {
                                                                imageReceiverArr2[i210].setImageBitmap((Drawable) null);
                                                                this.pollAvatarImagesVisible[i210] = false;
                                                            }
                                                            i3 = 1;
                                                        }
                                                        i210 += i3;
                                                        min3 = i211;
                                                        z88 = true;
                                                        z89 = false;
                                                        i204 = 2;
                                                        i205 = 3;
                                                        arrayList13 = null;
                                                    }
                                                } else if (this.pollAvatarImages != null) {
                                                    int i212 = 0;
                                                    while (true) {
                                                        ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                                                        if (i212 >= imageReceiverArr3.length) {
                                                            break;
                                                        }
                                                        imageReceiverArr3[i212].setImageBitmap((Drawable) null);
                                                        this.pollAvatarImagesVisible[i212] = false;
                                                        i212++;
                                                    }
                                                }
                                                if (!this.animatePollAnswer && this.pollVoteInProgress && this.vibrateOnPollVote) {
                                                    performHapticFeedback(i205, i204);
                                                }
                                                boolean z90 = this.attachedToWindow && (this.pollVoteInProgress || this.pollUnvoteInProgress);
                                                this.animatePollAnswer = z90;
                                                this.animatePollAnswerAlpha = z90;
                                                ArrayList arrayList15 = new ArrayList();
                                                if (this.pollButtons.isEmpty()) {
                                                    arrayList = arrayList13;
                                                    f = 1.0f;
                                                    z17 = z88;
                                                } else {
                                                    ArrayList arrayList16 = new ArrayList(this.pollButtons);
                                                    this.pollButtons.clear();
                                                    if (!this.animatePollAnswer) {
                                                        this.animatePollAnswer = this.attachedToWindow && (this.pollVoted || this.pollClosed);
                                                    }
                                                    float f15 = this.pollAnimationProgress;
                                                    f = 1.0f;
                                                    if (f15 > 0.0f && f15 < 1.0f) {
                                                        int size9 = arrayList16.size();
                                                        int i213 = 0;
                                                        z88 = z88;
                                                        while (i213 < size9) {
                                                            int i214 = min3;
                                                            PollButton pollButton2 = (PollButton) arrayList16.get(i213);
                                                            pollButton2.percent = (int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * this.pollAnimationProgress));
                                                            pollButton2.percentProgress = pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * this.pollAnimationProgress);
                                                            i213++;
                                                            min3 = i214;
                                                            f = 1.0f;
                                                            z88 = true;
                                                            z89 = false;
                                                            i204 = 2;
                                                            i205 = 3;
                                                            arrayList13 = null;
                                                        }
                                                    }
                                                    arrayList = arrayList16;
                                                    z17 = z88;
                                                }
                                                this.pollAnimationProgress = !this.animatePollAnswer ? 1.0f : 0.0f;
                                                if (this.animatePollAnswerAlpha) {
                                                    bArr = arrayList13;
                                                } else {
                                                    this.pollVoteInProgress = z89;
                                                    this.pollVoteInProgressNum = -1;
                                                    bArr = SendMessagesHelper.getInstance(this.currentAccount).isSendingVote(this.currentMessageObject);
                                                }
                                                StaticLayout staticLayout16 = this.titleLayout;
                                                int height = staticLayout16 == null ? 0 : staticLayout16.getHeight();
                                                int size10 = tLRPC$TL_messageMediaPoll3.poll.answers.size();
                                                int i215 = 100;
                                                int i216 = 0;
                                                boolean z91 = false;
                                                int i217 = 0;
                                                int i218 = 0;
                                                ?? r2 = bArr;
                                                ?? r9 = z17;
                                                while (i216 < size10) {
                                                    int i219 = i217;
                                                    TLRPC$PollAnswer tLRPC$PollAnswer = tLRPC$TL_messageMediaPoll3.poll.answers.get(i216);
                                                    int i220 = size10;
                                                    CharSequence replaceEmoji2 = Emoji.replaceEmoji(new SpannableStringBuilder(tLRPC$PollAnswer.text.text), Theme.chat_audioTitlePaint.getFontMetricsInt(), AndroidUtilities.dp(16.0f), z89);
                                                    ArrayList<TLRPC$MessageEntity> arrayList17 = tLRPC$PollAnswer.text.entities;
                                                    if (arrayList17 != null) {
                                                        replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, arrayList17, Theme.chat_audioPerformerPaint.getFontMetricsInt(), true);
                                                        MessageObject.addEntitiesToText(replaceEmoji2, tLRPC$PollAnswer.text.entities, this.currentMessageObject.isOutOwner(), false, false, false);
                                                    }
                                                    CharSequence charSequence11 = replaceEmoji2;
                                                    PollButton pollButton3 = new PollButton();
                                                    pollButton3.answer = tLRPC$PollAnswer;
                                                    pollButton3.title = new StaticLayout(charSequence11, Theme.chat_audioPerformerPaint, min3 - AndroidUtilities.dp(33.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    pollButton3.animatedEmoji = AnimatedEmojiSpan.update(0, (View) this, false, pollButton3.animatedEmoji, pollButton3.title);
                                                    pollButton3.y = AndroidUtilities.dp(52.0f) + height;
                                                    pollButton3.height = pollButton3.title.getHeight();
                                                    this.pollButtons.add(pollButton3);
                                                    arrayList15.add(pollButton3);
                                                    height += pollButton3.height + AndroidUtilities.dp(26.0f);
                                                    if (!tLRPC$TL_messageMediaPoll3.results.results.isEmpty()) {
                                                        int size11 = tLRPC$TL_messageMediaPoll3.results.results.size();
                                                        int i221 = 0;
                                                        while (i221 < size11) {
                                                            TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters2 = tLRPC$TL_messageMediaPoll3.results.results.get(i221);
                                                            i4 = min3;
                                                            if (Arrays.equals(pollButton3.answer.option, tLRPC$TL_pollAnswerVoters2.option)) {
                                                                pollButton3.chosen = tLRPC$TL_pollAnswerVoters2.chosen;
                                                                pollButton3.count = tLRPC$TL_pollAnswerVoters2.voters;
                                                                pollButton3.correct = tLRPC$TL_pollAnswerVoters2.correct;
                                                                if ((!this.pollVoted && !this.pollClosed) || (i6 = tLRPC$TL_messageMediaPoll3.results.total_voters) <= 0) {
                                                                    pollButton3.percent = 0;
                                                                    pollButton3.decimal = 0.0f;
                                                                } else {
                                                                    pollButton3.decimal = (tLRPC$TL_pollAnswerVoters2.voters / i6) * 100.0f;
                                                                    pollButton3.percent = (int) pollButton3.decimal;
                                                                    PollButton.access$3124(pollButton3, pollButton3.percent);
                                                                }
                                                                int i222 = i218;
                                                                if (i222 != 0) {
                                                                    if (pollButton3.percent == 0 || i222 == pollButton3.percent) {
                                                                        i218 = i222;
                                                                    } else {
                                                                        i218 = i222;
                                                                        z18 = true;
                                                                        i215 -= pollButton3.percent;
                                                                        i217 = Math.max(pollButton3.percent, i219);
                                                                        z91 = z18;
                                                                        if (arrayList != null) {
                                                                            int size12 = arrayList.size();
                                                                            int i223 = 0;
                                                                            while (true) {
                                                                                if (i223 >= size12) {
                                                                                    break;
                                                                                }
                                                                                PollButton pollButton4 = (PollButton) arrayList.get(i223);
                                                                                if (Arrays.equals(pollButton3.answer.option, pollButton4.answer.option)) {
                                                                                    pollButton3.prevPercent = pollButton4.percent;
                                                                                    pollButton3.prevPercentProgress = pollButton4.percentProgress;
                                                                                    pollButton3.prevChosen = pollButton4.chosen;
                                                                                    break;
                                                                                }
                                                                                i223++;
                                                                            }
                                                                        }
                                                                        if (r2 != null && pollButton3.answer.option.length > 0 && Arrays.binarySearch((byte[]) r2, pollButton3.answer.option[0]) >= 0) {
                                                                            this.pollVoteInProgressNum = i216;
                                                                            this.pollVoteInProgress = true;
                                                                            this.vibrateOnPollVote = true;
                                                                            r2 = null;
                                                                        }
                                                                        if (this.currentMessageObject.checkedVotes.contains(pollButton3.answer)) {
                                                                            i5 = 1;
                                                                            this.pollCheckBox[i216].setChecked(true, false);
                                                                        } else {
                                                                            this.pollCheckBox[i216].setChecked(false, false);
                                                                            i5 = 1;
                                                                        }
                                                                        i216 += i5;
                                                                        size10 = i220;
                                                                        min3 = i4;
                                                                        f = 1.0f;
                                                                        r9 = 1;
                                                                        z89 = false;
                                                                        i204 = 2;
                                                                        i205 = 3;
                                                                        r2 = r2;
                                                                    }
                                                                } else {
                                                                    i218 = pollButton3.percent;
                                                                }
                                                                z18 = z91;
                                                                i215 -= pollButton3.percent;
                                                                i217 = Math.max(pollButton3.percent, i219);
                                                                z91 = z18;
                                                                if (arrayList != null) {
                                                                }
                                                                if (r2 != null) {
                                                                    this.pollVoteInProgressNum = i216;
                                                                    this.pollVoteInProgress = true;
                                                                    this.vibrateOnPollVote = true;
                                                                    r2 = null;
                                                                }
                                                                if (this.currentMessageObject.checkedVotes.contains(pollButton3.answer)) {
                                                                }
                                                                i216 += i5;
                                                                size10 = i220;
                                                                min3 = i4;
                                                                f = 1.0f;
                                                                r9 = 1;
                                                                z89 = false;
                                                                i204 = 2;
                                                                i205 = 3;
                                                                r2 = r2;
                                                            } else {
                                                                i221++;
                                                                min3 = i4;
                                                            }
                                                        }
                                                    }
                                                    i4 = min3;
                                                    i217 = i219;
                                                    if (arrayList != null) {
                                                    }
                                                    if (r2 != null) {
                                                    }
                                                    if (this.currentMessageObject.checkedVotes.contains(pollButton3.answer)) {
                                                    }
                                                    i216 += i5;
                                                    size10 = i220;
                                                    min3 = i4;
                                                    f = 1.0f;
                                                    r9 = 1;
                                                    z89 = false;
                                                    i204 = 2;
                                                    i205 = 3;
                                                    r2 = r2;
                                                }
                                                if (z91 && i215 != 0) {
                                                    Collections.sort(arrayList15, new Comparator() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda5
                                                        @Override // java.util.Comparator
                                                        public final int compare(Object obj2, Object obj3) {
                                                            int lambda$setMessageContent$8;
                                                            lambda$setMessageContent$8 = ChatMessageCell.lambda$setMessageContent$8((ChatMessageCell.PollButton) obj2, (ChatMessageCell.PollButton) obj3);
                                                            return lambda$setMessageContent$8;
                                                        }
                                                    });
                                                    int min4 = Math.min(i215, arrayList15.size());
                                                    int i224 = 0;
                                                    while (i224 < min4) {
                                                        PollButton.access$2412((PollButton) arrayList15.get(i224), r9);
                                                        i224 += r9;
                                                        i204 = 2;
                                                        i205 = 3;
                                                    }
                                                }
                                                int dp48 = this.backgroundWidth - AndroidUtilities.dp(76.0f);
                                                int size13 = this.pollButtons.size();
                                                int i225 = 0;
                                                while (i225 < size13) {
                                                    int i226 = i217;
                                                    this.pollButtons.get(i225).percentProgress = Math.max(AndroidUtilities.dp(5.0f) / dp48, i226 == 0 ? 0.0f : pollButton.percent / i226);
                                                    i225 += r9;
                                                    i217 = i226;
                                                    i204 = 2;
                                                    i205 = 3;
                                                }
                                                setMessageObjectInternal(messageObject);
                                                this.pollInstantViewTouchesBottom = z89;
                                                if (this.isBot && !this.drawInstantView) {
                                                    height -= AndroidUtilities.dp(10.0f);
                                                } else {
                                                    TLRPC$Poll tLRPC$Poll7 = tLRPC$TL_messageMediaPoll3.poll;
                                                    if (tLRPC$Poll7.public_voters || tLRPC$Poll7.multiple_choice) {
                                                        this.pollInstantViewTouchesBottom = r9;
                                                        height += AndroidUtilities.dp(13.0f);
                                                    }
                                                }
                                                int dp49 = AndroidUtilities.dp(73.0f);
                                                int i227 = this.namesOffset;
                                                this.totalHeight = dp49 + i227 + height;
                                                if (this.drawPinnedTop) {
                                                    this.namesOffset = i227 - AndroidUtilities.dp(f);
                                                }
                                                this.instantTextNewLine = z89;
                                                TLRPC$Poll tLRPC$Poll8 = tLRPC$TL_messageMediaPoll3.poll;
                                                if (tLRPC$Poll8.public_voters || tLRPC$Poll8.multiple_choice) {
                                                    int i228 = 0;
                                                    for (int i229 = 0; i229 < i205; i229 += r9) {
                                                        if (i229 == 0) {
                                                            string3 = LocaleController.getString("PollViewResults", R.string.PollViewResults);
                                                        } else if (i229 == r9) {
                                                            string3 = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
                                                        } else {
                                                            string3 = LocaleController.getString("NoVotes", R.string.NoVotes);
                                                        }
                                                        i228 = Math.max(i228, (int) Math.ceil(Theme.chat_instantViewPaint.measureText(string3)));
                                                    }
                                                    int dp50 = this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX();
                                                    ReactionsLayoutInBubble reactionsLayoutInBubble17 = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble17.isSmall && reactionsLayoutInBubble17.isEmpty && dp50 >= ((this.backgroundWidth - AndroidUtilities.dp(76.0f)) - i228) / i204) {
                                                        this.totalHeight += AndroidUtilities.dp(18.0f);
                                                        this.instantTextNewLine = r9;
                                                    }
                                                }
                                                ReactionsLayoutInBubble reactionsLayoutInBubble18 = this.reactionsLayoutInBubble;
                                                if (!reactionsLayoutInBubble18.isSmall && !reactionsLayoutInBubble18.isEmpty) {
                                                    reactionsLayoutInBubble18.measure(min3, i205);
                                                    this.totalHeight += this.reactionsLayoutInBubble.height + AndroidUtilities.dp(12.0f);
                                                    if (this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX() >= (this.backgroundWidth - AndroidUtilities.dp(24.0f)) - this.reactionsLayoutInBubble.lastLineX) {
                                                        this.totalHeight += AndroidUtilities.dp(16.0f);
                                                        this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(16.0f);
                                                    }
                                                }
                                            } else {
                                                if (i199 == 29) {
                                                    if (this.isSavedChat && !messageObject.isOutOwner()) {
                                                        if (messageObject.getSavedDialogId() >= 0) {
                                                        }
                                                        z19 = true;
                                                        this.drawName = z19;
                                                        this.drawForwardedName = !this.isRepliesChat;
                                                        if (this.groupMedia == null) {
                                                            this.groupMedia = new GroupMedia(this);
                                                        }
                                                        this.groupMedia.setOverrideWidth(-1);
                                                        this.groupMedia.setMessageObject(messageObject23, this.pinnedBottom, this.pinnedTop);
                                                        int dp51 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                        this.backgroundWidth = dp51;
                                                        this.availableTimeWidth = dp51 - AndroidUtilities.dp(31.0f);
                                                        measureTime(messageObject);
                                                        if (this.drawCommentButton && this.totalCommentWidth + AndroidUtilities.dp(28.0f) > this.backgroundWidth) {
                                                            int dp52 = this.totalCommentWidth + AndroidUtilities.dp(28.0f);
                                                            this.backgroundWidth = dp52;
                                                            this.groupMedia.setOverrideWidth(dp52 - AndroidUtilities.dp(17.0f));
                                                        }
                                                        dp2 = AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20) + 20) + this.timeWidth;
                                                        if (dp2 > this.backgroundWidth) {
                                                            this.backgroundWidth = dp2;
                                                            this.groupMedia.setOverrideWidth(dp2 - AndroidUtilities.dp(17.0f));
                                                        }
                                                        this.mediaBackground = false;
                                                        int dp53 = this.backgroundWidth - AndroidUtilities.dp(20.0f);
                                                        charSequence2 = messageObject23.caption;
                                                        this.currentCaption = charSequence2;
                                                        if (charSequence2 != null) {
                                                            try {
                                                                this.captionFullWidth = dp53;
                                                                int extraTextX = dp53 - (getExtraTextX() * 2);
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks6 = new MessageObject.TextLayoutBlocks(getPrimaryMessageObject(), this.currentCaption, Theme.chat_msgTextPaint, extraTextX);
                                                                this.captionLayout = textLayoutBlocks6;
                                                                textLayoutBlocks6.bounceFrom(this.prevCaptionLayout);
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks7 = this.captionLayout;
                                                                this.captionWidth = textLayoutBlocks7.textWidth;
                                                                int textHeight = textLayoutBlocks7.textHeight();
                                                                this.captionHeight = textHeight;
                                                                this.addedCaptionHeight = textHeight + AndroidUtilities.dp(9.0f);
                                                                int i230 = this.captionWidth;
                                                                if (i230 > extraTextX) {
                                                                    this.groupMedia.setOverrideWidth((((i230 + (getExtraTextX() * 2)) + AndroidUtilities.dp(20.0f)) - AndroidUtilities.dp(17.0f)) + AndroidUtilities.dp(14.0f));
                                                                }
                                                                if (!this.captionAbove) {
                                                                    MessageObject.TextLayoutBlocks textLayoutBlocks8 = this.captionLayout;
                                                                    if (!textLayoutBlocks8.hasCodeAtBottom && !textLayoutBlocks8.hasQuoteAtBottom) {
                                                                    }
                                                                    this.captionHeight += AndroidUtilities.dp(14.0f);
                                                                    this.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                                }
                                                                MessageObject.GroupedMessagePosition groupedMessagePosition18 = this.currentPosition;
                                                                if (groupedMessagePosition18 != null && (groupedMessagePosition18.flags & captionFlag()) == 0) {
                                                                    this.captionLayout = null;
                                                                }
                                                                i7 = this.addedCaptionHeight;
                                                            } catch (Exception e17) {
                                                                e = e17;
                                                                i7 = 0;
                                                            }
                                                            try {
                                                                max = Math.max(this.captionWidth, this.backgroundWidth - AndroidUtilities.dp(20.0f));
                                                                reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                                                            } catch (Exception e18) {
                                                                e = e18;
                                                                FileLog.e(e);
                                                                c = 0;
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks9 = this.captionLayout;
                                                                if (textLayoutBlocks9 != null) {
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                                }
                                                                this.groupMedia.updateHolders(messageObject23);
                                                                dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                                this.backgroundWidth = dp3;
                                                                if (dp3 < dp2) {
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble4.isSmall) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                if (this.namesOffset <= 0) {
                                                                }
                                                                if (!this.currentMessageObject.isOutOwner()) {
                                                                }
                                                                int dp54 = dp5 - AndroidUtilities.dp(2.0f);
                                                                GroupMedia groupMedia2 = this.groupMedia;
                                                                groupMedia2.x = dp54;
                                                                groupMedia2.y = dp4 + this.namesOffset + r6;
                                                                c2 = c;
                                                                messageObject3 = messageObject23;
                                                                z20 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z21 = true;
                                                                r3 = z20;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (!messageObject.isSponsored()) {
                                                                }
                                                                c5 = c2;
                                                                messageObject19 = this.currentMessageObject;
                                                                if (messageObject19.eventId == 0) {
                                                                }
                                                                i127 = 3;
                                                                this.botButtons.clear();
                                                                if (z77) {
                                                                }
                                                                if (!messageObject3.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                z66 = r3;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                if (this.hasFactCheck) {
                                                                }
                                                                z67 = this.drawPinnedBottom;
                                                                if (z67) {
                                                                }
                                                                if (!z67) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject3.type != 19) {
                                                                }
                                                                if (this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType == 5) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z21) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                if (stickerSetLinkIcon2 != null) {
                                                                }
                                                                textLayoutBlocks4 = null;
                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                r32 = z66;
                                                                r62 = textLayoutBlocks4;
                                                                if (z77) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = r32;
                                                                this.highlightCaptionToSetEnd = -1;
                                                                this.highlightCaptionToSetStart = -1;
                                                                updateFlagSecure();
                                                            }
                                                            if (!reactionsLayoutInBubble3.isEmpty && !reactionsLayoutInBubble3.isSmall) {
                                                                c = 0;
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks92 = this.captionLayout;
                                                                int textHeight2 = (textLayoutBlocks92 != null && this.captionAbove) ? textLayoutBlocks92.textHeight() + AndroidUtilities.dp(8.0f) : 0;
                                                                setMessageObjectInternal(messageObject);
                                                                if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                                    this.groupMedia.setOverrideWidth(this.backgroundWidth - AndroidUtilities.dp(17.0f));
                                                                    this.groupMedia.updateHolders(messageObject23);
                                                                }
                                                                this.groupMedia.updateHolders(messageObject23);
                                                                dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                                this.backgroundWidth = dp3;
                                                                if (dp3 < dp2) {
                                                                    this.backgroundWidth = dp2;
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                                if (this.currentPosition != null && (groupedMessages6 = this.currentMessagesGroup) != null && groupedMessages6.messages.size() > 1) {
                                                                    if ((this.currentPosition.flags & 4) == 0) {
                                                                        this.totalHeight -= AndroidUtilities.dp(6.0f);
                                                                        this.mediaOffsetY -= AndroidUtilities.dp(6.0f);
                                                                    }
                                                                    if ((this.currentPosition.flags & 8) == 0) {
                                                                        this.totalHeight -= AndroidUtilities.dp(6.0f);
                                                                    }
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                    this.namesOffset -= AndroidUtilities.dp(1.0f);
                                                                }
                                                                reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble4.isSmall) {
                                                                    reactionsLayoutInBubble4.measure(this.backgroundWidth - AndroidUtilities.dp(24.0f), 3);
                                                                    ReactionsLayoutInBubble reactionsLayoutInBubble19 = this.reactionsLayoutInBubble;
                                                                    if (!reactionsLayoutInBubble19.isEmpty) {
                                                                        reactionsLayoutInBubble19.totalHeight = reactionsLayoutInBubble19.height + AndroidUtilities.dp(12.0f);
                                                                        measureTime(messageObject);
                                                                        ReactionsLayoutInBubble reactionsLayoutInBubble20 = this.reactionsLayoutInBubble;
                                                                        int i231 = reactionsLayoutInBubble20.width;
                                                                        if (i231 > this.backgroundWidth) {
                                                                            this.backgroundWidth = i231;
                                                                        }
                                                                        if (reactionsLayoutInBubble20.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                                                            this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                                                        }
                                                                        if (!messageObject23.isRestrictedMessage && messageObject23.caption != null) {
                                                                            this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(this.drawCommentButton ? 1.0f : 14.0f);
                                                                        }
                                                                        this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                                                    }
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                    this.namesOffset -= AndroidUtilities.dp(this.documentAttachType != 1 ? 1.0f : 2.0f);
                                                                }
                                                                if (this.drawPinnedTop && !messageObject.isOutOwner()) {
                                                                    this.totalHeight += AndroidUtilities.dp(this.documentAttachType == 1 ? 0.0f : 2.0f);
                                                                }
                                                                if (this.namesOffset <= 0) {
                                                                    dp4 = AndroidUtilities.dp(13.0f);
                                                                    this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                } else {
                                                                    dp4 = AndroidUtilities.dp(5.0f);
                                                                    this.totalHeight -= AndroidUtilities.dp(4.0f);
                                                                }
                                                                if (!this.currentMessageObject.isOutOwner()) {
                                                                    if (this.mediaBackground) {
                                                                        dp5 = (this.layoutWidth - this.backgroundWidth) - AndroidUtilities.dp(3.0f);
                                                                    } else {
                                                                        dp5 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(6.0f);
                                                                    }
                                                                } else if ((this.isChat || this.currentMessageObject.isRepostPreview) && this.isAvatarVisible && !this.isPlayingRound) {
                                                                    dp5 = AndroidUtilities.dp(63.0f);
                                                                } else {
                                                                    dp5 = AndroidUtilities.dp(15.0f);
                                                                }
                                                                int dp542 = dp5 - AndroidUtilities.dp(2.0f);
                                                                GroupMedia groupMedia22 = this.groupMedia;
                                                                groupMedia22.x = dp542;
                                                                groupMedia22.y = dp4 + this.namesOffset + textHeight2;
                                                                c2 = c;
                                                                messageObject3 = messageObject23;
                                                                z20 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z21 = true;
                                                            }
                                                            if (!shouldDrawTimeOnMedia() && (max + AndroidUtilities.dp(2.0f)) - this.captionLayout.lastLineWidth < getExtraTimeX() + dp2 && !this.hasFactCheck) {
                                                                i7 += AndroidUtilities.dp(14.0f);
                                                                this.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                                c = 1;
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks922 = this.captionLayout;
                                                                if (textLayoutBlocks922 != null) {
                                                                    setMessageObjectInternal(messageObject);
                                                                    if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                                    }
                                                                    this.groupMedia.updateHolders(messageObject23);
                                                                    dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                                    this.backgroundWidth = dp3;
                                                                    if (dp3 < dp2) {
                                                                    }
                                                                    setMessageObjectInternal(messageObject);
                                                                    this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                                    if (this.currentPosition != null) {
                                                                        if ((this.currentPosition.flags & 4) == 0) {
                                                                        }
                                                                        if ((this.currentPosition.flags & 8) == 0) {
                                                                        }
                                                                    }
                                                                    if (this.drawPinnedTop) {
                                                                    }
                                                                    reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                                    if (!reactionsLayoutInBubble4.isSmall) {
                                                                    }
                                                                    if (this.drawPinnedTop) {
                                                                    }
                                                                    if (this.drawPinnedTop) {
                                                                        this.totalHeight += AndroidUtilities.dp(this.documentAttachType == 1 ? 0.0f : 2.0f);
                                                                    }
                                                                    if (this.namesOffset <= 0) {
                                                                    }
                                                                    if (!this.currentMessageObject.isOutOwner()) {
                                                                    }
                                                                    int dp5422 = dp5 - AndroidUtilities.dp(2.0f);
                                                                    GroupMedia groupMedia222 = this.groupMedia;
                                                                    groupMedia222.x = dp5422;
                                                                    groupMedia222.y = dp4 + this.namesOffset + textHeight2;
                                                                    c2 = c;
                                                                    messageObject3 = messageObject23;
                                                                    z20 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                    z21 = true;
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                                }
                                                                this.groupMedia.updateHolders(messageObject23);
                                                                dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                                this.backgroundWidth = dp3;
                                                                if (dp3 < dp2) {
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble4.isSmall) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                if (this.drawPinnedTop) {
                                                                }
                                                                if (this.namesOffset <= 0) {
                                                                }
                                                                if (!this.currentMessageObject.isOutOwner()) {
                                                                }
                                                                int dp54222 = dp5 - AndroidUtilities.dp(2.0f);
                                                                GroupMedia groupMedia2222 = this.groupMedia;
                                                                groupMedia2222.x = dp54222;
                                                                groupMedia2222.y = dp4 + this.namesOffset + textHeight2;
                                                                c2 = c;
                                                                messageObject3 = messageObject23;
                                                                z20 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z21 = true;
                                                            }
                                                            c = 0;
                                                            MessageObject.TextLayoutBlocks textLayoutBlocks9222 = this.captionLayout;
                                                            if (textLayoutBlocks9222 != null) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                            }
                                                            this.groupMedia.updateHolders(messageObject23);
                                                            dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                            this.backgroundWidth = dp3;
                                                            if (dp3 < dp2) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (this.drawPinnedTop) {
                                                            }
                                                            reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                            if (!reactionsLayoutInBubble4.isSmall) {
                                                            }
                                                            if (this.drawPinnedTop) {
                                                            }
                                                            if (this.drawPinnedTop) {
                                                            }
                                                            if (this.namesOffset <= 0) {
                                                            }
                                                            if (!this.currentMessageObject.isOutOwner()) {
                                                            }
                                                            int dp542222 = dp5 - AndroidUtilities.dp(2.0f);
                                                            GroupMedia groupMedia22222 = this.groupMedia;
                                                            groupMedia22222.x = dp542222;
                                                            groupMedia22222.y = dp4 + this.namesOffset + textHeight2;
                                                            c2 = c;
                                                            messageObject3 = messageObject23;
                                                            z20 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                            z21 = true;
                                                        }
                                                        c = 0;
                                                        i7 = 0;
                                                        MessageObject.TextLayoutBlocks textLayoutBlocks92222 = this.captionLayout;
                                                        if (textLayoutBlocks92222 != null) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                        }
                                                        this.groupMedia.updateHolders(messageObject23);
                                                        dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                        this.backgroundWidth = dp3;
                                                        if (dp3 < dp2) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble4.isSmall) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        if (this.namesOffset <= 0) {
                                                        }
                                                        if (!this.currentMessageObject.isOutOwner()) {
                                                        }
                                                        int dp5422222 = dp5 - AndroidUtilities.dp(2.0f);
                                                        GroupMedia groupMedia222222 = this.groupMedia;
                                                        groupMedia222222.x = dp5422222;
                                                        groupMedia222222.y = dp4 + this.namesOffset + textHeight2;
                                                        c2 = c;
                                                        messageObject3 = messageObject23;
                                                        z20 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z21 = true;
                                                    }
                                                    if (((!messageObject.isFromGroup() || !messageObject.isSupergroup()) && (!messageObject.isImportedForward() || messageObject23.messageOwner.fwd_from.from_id != null)) || ((groupedMessagePosition4 = this.currentPosition) != null && (groupedMessagePosition4.flags & 4) == 0)) {
                                                        z19 = false;
                                                        this.drawName = z19;
                                                        this.drawForwardedName = !this.isRepliesChat;
                                                        if (this.groupMedia == null) {
                                                        }
                                                        this.groupMedia.setOverrideWidth(-1);
                                                        this.groupMedia.setMessageObject(messageObject23, this.pinnedBottom, this.pinnedTop);
                                                        int dp512 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                        this.backgroundWidth = dp512;
                                                        this.availableTimeWidth = dp512 - AndroidUtilities.dp(31.0f);
                                                        measureTime(messageObject);
                                                        if (this.drawCommentButton) {
                                                            int dp522 = this.totalCommentWidth + AndroidUtilities.dp(28.0f);
                                                            this.backgroundWidth = dp522;
                                                            this.groupMedia.setOverrideWidth(dp522 - AndroidUtilities.dp(17.0f));
                                                        }
                                                        dp2 = AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20) + 20) + this.timeWidth;
                                                        if (dp2 > this.backgroundWidth) {
                                                        }
                                                        this.mediaBackground = false;
                                                        int dp532 = this.backgroundWidth - AndroidUtilities.dp(20.0f);
                                                        charSequence2 = messageObject23.caption;
                                                        this.currentCaption = charSequence2;
                                                        if (charSequence2 != null) {
                                                        }
                                                        c = 0;
                                                        i7 = 0;
                                                        MessageObject.TextLayoutBlocks textLayoutBlocks922222 = this.captionLayout;
                                                        if (textLayoutBlocks922222 != null) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                        }
                                                        this.groupMedia.updateHolders(messageObject23);
                                                        dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                        this.backgroundWidth = dp3;
                                                        if (dp3 < dp2) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble4.isSmall) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        if (this.drawPinnedTop) {
                                                        }
                                                        if (this.namesOffset <= 0) {
                                                        }
                                                        if (!this.currentMessageObject.isOutOwner()) {
                                                        }
                                                        int dp54222222 = dp5 - AndroidUtilities.dp(2.0f);
                                                        GroupMedia groupMedia2222222 = this.groupMedia;
                                                        groupMedia2222222.x = dp54222222;
                                                        groupMedia2222222.y = dp4 + this.namesOffset + textHeight2;
                                                        c2 = c;
                                                        messageObject3 = messageObject23;
                                                        z20 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z21 = true;
                                                    }
                                                    z19 = true;
                                                    this.drawName = z19;
                                                    this.drawForwardedName = !this.isRepliesChat;
                                                    if (this.groupMedia == null) {
                                                    }
                                                    this.groupMedia.setOverrideWidth(-1);
                                                    this.groupMedia.setMessageObject(messageObject23, this.pinnedBottom, this.pinnedTop);
                                                    int dp5122 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                    this.backgroundWidth = dp5122;
                                                    this.availableTimeWidth = dp5122 - AndroidUtilities.dp(31.0f);
                                                    measureTime(messageObject);
                                                    if (this.drawCommentButton) {
                                                    }
                                                    dp2 = AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20) + 20) + this.timeWidth;
                                                    if (dp2 > this.backgroundWidth) {
                                                    }
                                                    this.mediaBackground = false;
                                                    int dp5322 = this.backgroundWidth - AndroidUtilities.dp(20.0f);
                                                    charSequence2 = messageObject23.caption;
                                                    this.currentCaption = charSequence2;
                                                    if (charSequence2 != null) {
                                                    }
                                                    c = 0;
                                                    i7 = 0;
                                                    MessageObject.TextLayoutBlocks textLayoutBlocks9222222 = this.captionLayout;
                                                    if (textLayoutBlocks9222222 != null) {
                                                    }
                                                    setMessageObjectInternal(messageObject);
                                                    if (this.backgroundWidth > this.groupMedia.width + AndroidUtilities.dp(17.0f)) {
                                                    }
                                                    this.groupMedia.updateHolders(messageObject23);
                                                    dp3 = this.groupMedia.width + AndroidUtilities.dp(17.0f);
                                                    this.backgroundWidth = dp3;
                                                    if (dp3 < dp2) {
                                                    }
                                                    setMessageObjectInternal(messageObject);
                                                    this.totalHeight = this.groupMedia.height + AndroidUtilities.dp(14.0f) + this.namesOffset + i7;
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (this.drawPinnedTop) {
                                                    }
                                                    reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                                                    if (!reactionsLayoutInBubble4.isSmall) {
                                                    }
                                                    if (this.drawPinnedTop) {
                                                    }
                                                    if (this.drawPinnedTop) {
                                                    }
                                                    if (this.namesOffset <= 0) {
                                                    }
                                                    if (!this.currentMessageObject.isOutOwner()) {
                                                    }
                                                    int dp542222222 = dp5 - AndroidUtilities.dp(2.0f);
                                                    GroupMedia groupMedia22222222 = this.groupMedia;
                                                    groupMedia22222222.x = dp542222222;
                                                    groupMedia22222222.y = dp4 + this.namesOffset + textHeight2;
                                                    c2 = c;
                                                    messageObject3 = messageObject23;
                                                    z20 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                    z21 = true;
                                                } else {
                                                    this.drawForwardedName = !(messageObject23.messageOwner.fwd_from == null || (messageObject.isAnyKindOfSticker() && messageObject.isDice())) || messageObject23.type == 23;
                                                    if (!messageObject.isAnyKindOfSticker() && messageObject23.type != 5) {
                                                        if (this.isSavedChat && !messageObject.isOutOwner()) {
                                                            if (messageObject.getSavedDialogId() >= 0) {
                                                            }
                                                            groupedMessagePosition5 = this.currentPosition;
                                                            if (groupedMessagePosition5 != null || (groupedMessagePosition5.flags & 4) != 0) {
                                                                z22 = true;
                                                                this.drawName = z22;
                                                            }
                                                            z22 = false;
                                                            this.drawName = z22;
                                                        }
                                                        if (messageObject.isFromGroup()) {
                                                        }
                                                        if (!messageObject23.isRepostPreview) {
                                                            if (messageObject.isImportedForward()) {
                                                            }
                                                            z22 = false;
                                                            this.drawName = z22;
                                                        }
                                                        groupedMessagePosition5 = this.currentPosition;
                                                        if (groupedMessagePosition5 != null) {
                                                        }
                                                        z22 = true;
                                                        this.drawName = z22;
                                                    }
                                                    boolean z92 = messageObject23.type != i;
                                                    this.isMedia = z92;
                                                    this.mediaBackground = z92;
                                                    this.drawImageButton = true;
                                                    this.drawPhotoImage = true;
                                                    if (messageObject23.gifState != 2.0f && ((!SharedConfig.isAutoplayGifs() || messageObject23.isRepostPreview) && ((i65 = messageObject23.type) == 8 || i65 == 5))) {
                                                        messageObject23.gifState = 1.0f;
                                                    }
                                                    this.photoImage.setAllowDecodeSingleFrame(true);
                                                    if (messageObject.isVideo()) {
                                                        this.photoImage.setAllowStartAnimation(true);
                                                    } else if (messageObject.isRoundVideo()) {
                                                        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                                                        this.photoImage.setAllowStartAnimation(playingMessageObject == null || !playingMessageObject.isRoundVideo());
                                                    } else {
                                                        this.photoImage.setAllowStartAnimation(messageObject23.gifState == 0.0f);
                                                    }
                                                    this.photoImage.setForcePreview(messageObject.needDrawBluredPreview());
                                                    int i232 = messageObject23.type;
                                                    if (i232 == i) {
                                                        messageObject4 = messageObject23;
                                                        i8 = 1;
                                                        z23 = false;
                                                        z25 = false;
                                                        f2 = 1.0f;
                                                        if (this.currentPosition == null) {
                                                            this.backgroundWidth = messageObject.getMaxMessageTextWidth();
                                                        } else {
                                                            if (AndroidUtilities.isTablet()) {
                                                                this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(300.0f));
                                                            } else {
                                                                this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(300.0f));
                                                            }
                                                            if (checkNeedDrawShareButton(messageObject)) {
                                                                this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                                            }
                                                        }
                                                        int dp55 = this.backgroundWidth - AndroidUtilities.dp((this.currentPosition != null ? 52 : 0) + 86);
                                                        if (this.currentPosition != null) {
                                                            max2 = 0;
                                                        } else {
                                                            this.captionFullWidth = this.backgroundWidth - (getExtraTextX() * 2);
                                                            CharSequence charSequence12 = messageObject4.caption;
                                                            this.currentCaption = charSequence12;
                                                            if (!TextUtils.isEmpty(charSequence12)) {
                                                                try {
                                                                    MessageObject.TextLayoutBlocks textLayoutBlocks10 = new MessageObject.TextLayoutBlocks(getPrimaryMessageObject(), this.currentCaption, Theme.chat_msgTextPaint, this.captionFullWidth);
                                                                    this.captionLayout = textLayoutBlocks10;
                                                                    textLayoutBlocks10.bounceFrom(this.prevCaptionLayout);
                                                                    updateSeekBarWaveformWidth(null);
                                                                } catch (Exception e19) {
                                                                    FileLog.e(e19);
                                                                }
                                                            }
                                                            MessageObject.TextLayoutBlocks textLayoutBlocks11 = this.captionLayout;
                                                            max2 = textLayoutBlocks11 == null ? 0 : Math.max(textLayoutBlocks11.textWidth, 0);
                                                            if (dp55 > max2) {
                                                                dp55 = Math.max(max2, this.backgroundWidth - AndroidUtilities.dp(138.0f));
                                                            }
                                                        }
                                                        createDocumentLayout(dp55, messageObject4);
                                                        if (this.currentPosition != null) {
                                                            this.captionFullWidth = this.backgroundWidth - AndroidUtilities.dp(41.0f);
                                                        }
                                                        StaticLayout staticLayout17 = this.docTitleLayout;
                                                        if (staticLayout17 != null) {
                                                            int lineCount3 = staticLayout17.getLineCount();
                                                            for (int i233 = 0; i233 < lineCount3; i233++) {
                                                                max2 = Math.max(max2, ((int) Math.ceil(this.docTitleLayout.getLineWidth(i233) + this.docTitleLayout.getLineLeft(i233))) + AndroidUtilities.dp((!this.drawPhotoImage ? 22 : 52) + 86));
                                                            }
                                                        }
                                                        StaticLayout staticLayout18 = this.infoLayout;
                                                        if (staticLayout18 != null) {
                                                            int lineCount4 = staticLayout18.getLineCount();
                                                            for (int i234 = 0; i234 < lineCount4; i234++) {
                                                                max2 = Math.max(max2, this.infoWidth + AndroidUtilities.dp((!this.drawPhotoImage ? 22 : 52) + 86));
                                                            }
                                                        }
                                                        MessageObject.TextLayoutBlocks textLayoutBlocks12 = this.captionLayout;
                                                        if (textLayoutBlocks12 != null) {
                                                            max2 = Math.max(textLayoutBlocks12.textWidth + (getExtraTextX() * 2) + AndroidUtilities.dp(31.0f), max2);
                                                        }
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble21 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble21.isSmall) {
                                                            reactionsLayoutInBubble21.measure(this.captionFullWidth, 3);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble22 = this.reactionsLayoutInBubble;
                                                            if (!reactionsLayoutInBubble22.isEmpty) {
                                                                max2 = Math.max(max2, reactionsLayoutInBubble22.width + AndroidUtilities.dp(31.0f));
                                                            }
                                                        }
                                                        if (max2 > this.backgroundWidth && this.currentPosition == null) {
                                                            this.backgroundWidth = max2;
                                                            dp55 = max2 - AndroidUtilities.dp(31.0f);
                                                        }
                                                        this.availableTimeWidth = dp55;
                                                        if (this.drawPhotoImage) {
                                                            dp6 = AndroidUtilities.dp(86.0f);
                                                            dp7 = AndroidUtilities.dp(86.0f);
                                                            this.availableTimeWidth -= dp6;
                                                        } else {
                                                            dp6 = AndroidUtilities.dp(56.0f);
                                                            dp7 = AndroidUtilities.dp(56.0f);
                                                            StaticLayout staticLayout19 = this.docTitleLayout;
                                                            if (staticLayout19 != null && staticLayout19.getLineCount() > 1) {
                                                                dp7 += (this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                                            }
                                                            if (TextUtils.isEmpty(messageObject4.caption) && (staticLayout = this.infoLayout) != null) {
                                                                int lineCount5 = staticLayout.getLineCount();
                                                                measureTime(messageObject);
                                                                int dp56 = (this.backgroundWidth - AndroidUtilities.dp(122.0f)) - this.infoWidth;
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble23 = this.reactionsLayoutInBubble;
                                                                if (reactionsLayoutInBubble23.isSmall || reactionsLayoutInBubble23.isEmpty) {
                                                                    if (dp56 < this.timeWidth) {
                                                                        dp8 = AndroidUtilities.dp(12.0f);
                                                                    } else if (lineCount5 == 1) {
                                                                        dp8 = AndroidUtilities.dp(4.0f);
                                                                    }
                                                                    dp7 += dp8;
                                                                }
                                                            }
                                                        }
                                                        i9 = dp6;
                                                        i10 = dp7;
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble24 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble24.isSmall && !reactionsLayoutInBubble24.isEmpty) {
                                                            if (!this.drawPhotoImage) {
                                                                reactionsLayoutInBubble24.positionOffsetY += AndroidUtilities.dp(2.0f);
                                                            }
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble25 = this.reactionsLayoutInBubble;
                                                            reactionsLayoutInBubble25.totalHeight = reactionsLayoutInBubble25.height + AndroidUtilities.dp((this.drawPhotoImage && this.captionLayout != null) ? 0.0f : 8.0f);
                                                            measureTime(messageObject);
                                                            if (this.drawPhotoImage && this.captionLayout == null) {
                                                                this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                                            }
                                                            if ((this.backgroundWidth - this.reactionsLayoutInBubble.lastLineX) - AndroidUtilities.dp(42.0f) < this.timeWidth) {
                                                                this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(this.captionLayout != null ? 12.0f : 15.0f);
                                                                this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(15.0f);
                                                            }
                                                            i11 = ((this.currentPosition == null && this.captionLayout != null) ? AndroidUtilities.dp(12.0f) : 0) + this.reactionsLayoutInBubble.totalHeight;
                                                        } else {
                                                            c3 = 0;
                                                            i11 = 0;
                                                            z24 = true;
                                                            r15 = z23;
                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                            }
                                                            if (this.photoImage.getBitmap() != null) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            if (this.drawForwardedName) {
                                                            }
                                                            if (this.drawNameLayout) {
                                                            }
                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                            }
                                                            groupedMessagePosition6 = this.currentPosition;
                                                            if (groupedMessagePosition6 != null) {
                                                            }
                                                            if (this.currentMessageObject.isDice()) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            i12 = 0;
                                                            if (this.captionLayout != null) {
                                                            }
                                                            if (this.currentMessageObject.type == 19) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (messageObject.isRoundVideo()) {
                                                            }
                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                            if (messageObject.hasMediaSpoilers()) {
                                                            }
                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                            if (spoilerEffect2 != null) {
                                                            }
                                                            invalidate();
                                                            c2 = c3;
                                                            z21 = z24;
                                                            messageObject3 = messageObject4;
                                                            z20 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                        }
                                                    } else if (i232 == 4) {
                                                        TLRPC$GeoPoint tLRPC$GeoPoint = MessageObject.getMedia(messageObject23.messageOwner).geo;
                                                        double d4 = tLRPC$GeoPoint.lat;
                                                        double d5 = tLRPC$GeoPoint._long;
                                                        if (((int) messageObject.getDialogId()) == 0 && (i23 = SharedConfig.mapPreviewType) != 0) {
                                                            if (i23 == 1) {
                                                                i14 = 4;
                                                            } else if (i23 == 3) {
                                                                i14 = 1;
                                                            }
                                                            if (!(MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive)) {
                                                                i15 = 2;
                                                                if (AndroidUtilities.isTablet()) {
                                                                    this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                } else {
                                                                    this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                }
                                                                this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                                                if (checkNeedDrawShareButton(messageObject)) {
                                                                    this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                                                }
                                                                int dp57 = this.backgroundWidth - AndroidUtilities.dp(37.0f);
                                                                this.availableTimeWidth = dp57;
                                                                int dp58 = dp57 - AndroidUtilities.dp(54.0f);
                                                                int dp59 = this.backgroundWidth - AndroidUtilities.dp(17.0f);
                                                                int dp60 = AndroidUtilities.dp(195.0f);
                                                                double d6 = 268435456;
                                                                Double.isNaN(d6);
                                                                double d7 = d6 / 3.141592653589793d;
                                                                double d8 = (d4 * 3.141592653589793d) / 180.0d;
                                                                Double.isNaN(d6);
                                                                double round2 = Math.round(d6 - ((Math.log((Math.sin(d8) + 1.0d) / (1.0d - Math.sin(d8))) * d7) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                                                                Double.isNaN(round2);
                                                                Double.isNaN(d6);
                                                                double atan = ((1.5707963267948966d - (Math.atan(Math.exp((round2 - d6) / d7)) * 2.0d)) * 180.0d) / 3.141592653589793d;
                                                                int i235 = this.currentAccount;
                                                                float f16 = dp59;
                                                                float f17 = AndroidUtilities.density;
                                                                float f18 = dp60;
                                                                this.currentUrl = AndroidUtilities.formapMapUrl(i235, atan, d5, (int) (f16 / f17), (int) (f18 / f17), false, 15, i14);
                                                                this.lastWebFile = this.currentWebFile;
                                                                long j3 = tLRPC$GeoPoint.access_hash;
                                                                float f19 = AndroidUtilities.density;
                                                                this.currentWebFile = WebFile.createWithGeoPoint(atan, d5, j3, (int) (f16 / f19), (int) (f18 / f19), 15, Math.min(2, (int) Math.ceil(f19)));
                                                                this.photoImage.setCrossfadeWithOldImage(true);
                                                                boolean isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject);
                                                                this.locationExpired = isCurrentLocationTimeExpired;
                                                                if (isCurrentLocationTimeExpired) {
                                                                    this.backgroundWidth -= AndroidUtilities.dp(9.0f);
                                                                    dp10 = 0;
                                                                } else {
                                                                    this.mediaBackground = false;
                                                                    dp10 = AndroidUtilities.dp(56.0f);
                                                                    AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
                                                                    this.scheduledInvalidate = true;
                                                                }
                                                                TextUtils.TruncateAt truncateAt3 = TextUtils.TruncateAt.END;
                                                                CharSequence ellipsize2 = TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp58, truncateAt3);
                                                                TextPaint textPaint3 = Theme.chat_locationTitlePaint;
                                                                int dp61 = dp58 + AndroidUtilities.dp(2.0f);
                                                                Layout.Alignment alignment4 = Layout.Alignment.ALIGN_NORMAL;
                                                                this.docTitleLayout = new StaticLayout(ellipsize2, textPaint3, dp61, alignment4, 1.0f, 0.0f, false);
                                                                updateCurrentUserAndChat();
                                                                TLRPC$User tLRPC$User3 = this.currentUser;
                                                                if (tLRPC$User3 != null) {
                                                                    this.contactAvatarDrawable.setInfo(this.currentAccount, tLRPC$User3);
                                                                    this.locationImageReceiver.setForUserOrChat(this.currentUser, this.contactAvatarDrawable);
                                                                } else {
                                                                    TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                                                                    if (tLRPC$Chat3 != null) {
                                                                        TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat3.photo;
                                                                        if (tLRPC$ChatPhoto != null) {
                                                                            this.currentPhoto = tLRPC$ChatPhoto.photo_small;
                                                                        }
                                                                        this.contactAvatarDrawable.setInfo(this.currentAccount, tLRPC$Chat3);
                                                                        this.locationImageReceiver.setForUserOrChat(this.currentChat, this.contactAvatarDrawable);
                                                                    } else {
                                                                        this.locationImageReceiver.setImage(null, null, this.contactAvatarDrawable, null, null, 0);
                                                                    }
                                                                }
                                                                messageObject5 = messageObject;
                                                                int i236 = messageObject5.messageOwner.edit_date;
                                                                this.infoLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.formatLocationUpdateDate(i236 == 0 ? tLRPC$Message.date : i236), Theme.chat_locationAddressPaint, AndroidUtilities.dp(2.0f) + dp58, truncateAt3), Theme.chat_locationAddressPaint, dp58, alignment4, 1.0f, 0.0f, false);
                                                                i16 = dp59;
                                                                i17 = dp60;
                                                                i18 = dp10;
                                                            } else if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject23.messageOwner).title)) {
                                                                if (AndroidUtilities.isTablet()) {
                                                                    this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                } else {
                                                                    this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                }
                                                                this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                                                if (checkNeedDrawShareButton(messageObject)) {
                                                                    this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                                                }
                                                                int dp62 = this.backgroundWidth - AndroidUtilities.dp(34.0f);
                                                                this.availableTimeWidth = dp62;
                                                                int dp63 = this.backgroundWidth - AndroidUtilities.dp(17.0f);
                                                                int dp64 = AndroidUtilities.dp(195.0f);
                                                                this.mediaBackground = false;
                                                                int i237 = this.currentAccount;
                                                                float f20 = dp63;
                                                                float f21 = AndroidUtilities.density;
                                                                float f22 = dp64;
                                                                i15 = 2;
                                                                this.currentUrl = AndroidUtilities.formapMapUrl(i237, d4, d5, (int) (f20 / f21), (int) (f22 / f21), true, 15, i14);
                                                                float f23 = AndroidUtilities.density;
                                                                this.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f20 / f23), (int) (f22 / f23), 15, Math.min(2, (int) Math.ceil(f23)));
                                                                String str42 = MessageObject.getMedia(messageObject23.messageOwner).title;
                                                                TextPaint textPaint4 = Theme.chat_locationTitlePaint;
                                                                int dp65 = dp62 + AndroidUtilities.dp(4.0f);
                                                                Layout.Alignment alignment5 = Layout.Alignment.ALIGN_NORMAL;
                                                                TextUtils.TruncateAt truncateAt4 = TextUtils.TruncateAt.END;
                                                                this.docTitleLayout = StaticLayoutEx.createStaticLayout(str42, textPaint4, dp65, alignment5, 1.0f, 0.0f, false, truncateAt4, dp62, 1);
                                                                int dp66 = AndroidUtilities.dp(50.0f);
                                                                this.docTitleLayout.getLineCount();
                                                                if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject23.messageOwner).address)) {
                                                                    this.infoLayout = StaticLayoutEx.createStaticLayout(MessageObject.getMedia(messageObject23.messageOwner).address, Theme.chat_locationAddressPaint, dp62, alignment5, 1.0f, 0.0f, false, truncateAt4, dp62, 1);
                                                                    measureTime(messageObject);
                                                                    int ceil10 = (this.backgroundWidth - ((int) Math.ceil(this.infoLayout.getLineWidth(0)))) - AndroidUtilities.dp(24.0f);
                                                                    boolean z93 = this.infoLayout.getLineLeft(0) > 0.0f;
                                                                    if (z93) {
                                                                    }
                                                                    dp66 += AndroidUtilities.dp(!z93 ? 8.0f : 10.0f);
                                                                    i22 = dp66;
                                                                } else {
                                                                    this.infoLayout = null;
                                                                    i22 = dp66;
                                                                }
                                                                i17 = dp64;
                                                                i16 = dp63;
                                                                messageObject5 = messageObject23;
                                                                i18 = i22;
                                                            } else {
                                                                if (AndroidUtilities.isTablet()) {
                                                                    this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                } else {
                                                                    this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z10 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                                                }
                                                                this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                                                if (checkNeedDrawShareButton(messageObject)) {
                                                                    this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                                                }
                                                                this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(34.0f);
                                                                int dp67 = this.backgroundWidth - AndroidUtilities.dp(8.0f);
                                                                int dp68 = AndroidUtilities.dp(195.0f);
                                                                int i238 = this.currentAccount;
                                                                float f24 = dp67;
                                                                float f25 = AndroidUtilities.density;
                                                                float f26 = dp68;
                                                                this.currentUrl = AndroidUtilities.formapMapUrl(i238, d4, d5, (int) (f24 / f25), (int) (f26 / f25), true, 15, i14);
                                                                float f27 = AndroidUtilities.density;
                                                                this.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f24 / f27), (int) (f26 / f27), 15, Math.min(2, (int) Math.ceil(f27)));
                                                                i16 = dp67;
                                                                i17 = dp68;
                                                                messageObject5 = messageObject23;
                                                                i15 = 2;
                                                                i18 = 0;
                                                            }
                                                            if (((int) messageObject.getDialogId()) != 0) {
                                                                int i239 = SharedConfig.mapPreviewType;
                                                                if (i239 == 0) {
                                                                    i19 = -1;
                                                                    this.currentMapProvider = i15;
                                                                } else if (i239 == 1) {
                                                                    i19 = -1;
                                                                    this.currentMapProvider = 1;
                                                                } else if (i239 == 3) {
                                                                    i19 = -1;
                                                                    this.currentMapProvider = 1;
                                                                } else {
                                                                    i19 = -1;
                                                                    this.currentMapProvider = -1;
                                                                }
                                                            } else {
                                                                this.currentMapProvider = MessagesController.getInstance(messageObject5.currentAccount).mapProvider;
                                                                i19 = -1;
                                                            }
                                                            if (this.locationLoadingThumb == null) {
                                                                SvgHelper.SvgDrawable svgThumb = DocumentObject.getSvgThumb(R.raw.map_placeholder, Theme.key_chat_outLocationIcon, (!Theme.isCurrentThemeDark() ? 6 : 3) * 0.12f);
                                                                svgThumb.setAspectCenter(true);
                                                                this.locationLoadingThumb = new ClipRoundedDrawable(svgThumb);
                                                            }
                                                            drawable = this.locationLoadingThumb;
                                                            if ((drawable instanceof ClipRoundedDrawable) && (((ClipRoundedDrawable) drawable).getDrawable() instanceof SvgHelper.SvgDrawable)) {
                                                                ((SvgHelper.SvgDrawable) ((ClipRoundedDrawable) this.locationLoadingThumb).getDrawable()).setColorKey(messageObject.isOutOwner() ? Theme.key_chat_inLocationIcon : Theme.key_chat_outLocationIcon, this.resourcesProvider);
                                                            }
                                                            this.photoImage.setCrossfadeDuration(300);
                                                            this.photoImage.setCrossfadeByScale(0.05f);
                                                            i20 = this.currentMapProvider;
                                                            if (i20 == i19) {
                                                                if (i20 == i15) {
                                                                    WebFile webFile10 = this.currentWebFile;
                                                                    if (webFile10 != null) {
                                                                        Object obj2 = messageObject5.lastGeoWebFileLoaded;
                                                                        ImageLocation imageLocation2 = !(obj2 instanceof ImageLocation) ? null : (ImageLocation) obj2;
                                                                        messageObject5.lastGeoWebFileSet = ImageLocation.getForWebFile(webFile10);
                                                                        this.photoImage.setImage(ImageLocation.getForWebFile(this.currentWebFile), (String) null, imageLocation2, (String) null, this.locationLoadingThumb, messageObject, 0);
                                                                    }
                                                                } else {
                                                                    if (i20 == 3 || i20 == 4) {
                                                                        ImageLoader.getInstance().addTestWebFile(this.currentUrl, this.currentWebFile);
                                                                        this.addedForTest = true;
                                                                    }
                                                                    String str43 = this.currentUrl;
                                                                    if (str43 != null) {
                                                                        this.photoImage.setImage(str43, null, this.locationLoadingThumb, null, 0L);
                                                                    }
                                                                }
                                                                messageObject4 = messageObject5;
                                                                i8 = 1;
                                                                i21 = 3;
                                                                z26 = false;
                                                                f2 = 1.0f;
                                                            } else {
                                                                z26 = false;
                                                                i8 = 1;
                                                                f2 = 1.0f;
                                                                i21 = 3;
                                                                messageObject4 = messageObject;
                                                                this.photoImage.setImage(null, null, null, null, messageObject, 0);
                                                            }
                                                            reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                                                            if (reactionsLayoutInBubble5.isSmall || reactionsLayoutInBubble5.isEmpty) {
                                                                i9 = i16;
                                                                i10 = i17;
                                                                i11 = i18;
                                                                z25 = z26;
                                                            } else {
                                                                reactionsLayoutInBubble5.measure(this.backgroundWidth - AndroidUtilities.dp(16.0f), i21);
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble26 = this.reactionsLayoutInBubble;
                                                                reactionsLayoutInBubble26.totalHeight = reactionsLayoutInBubble26.height + AndroidUtilities.dp(14.0f);
                                                                measureTime(messageObject);
                                                                if (this.reactionsLayoutInBubble.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                                                    this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                                                    this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                                                }
                                                                i11 = i18 + this.reactionsLayoutInBubble.totalHeight;
                                                                i9 = i16;
                                                                i10 = i17;
                                                                z25 = z26;
                                                            }
                                                        }
                                                        i14 = -1;
                                                        if (!(MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive)) {
                                                        }
                                                        if (((int) messageObject.getDialogId()) != 0) {
                                                        }
                                                        if (this.locationLoadingThumb == null) {
                                                        }
                                                        drawable = this.locationLoadingThumb;
                                                        if (drawable instanceof ClipRoundedDrawable) {
                                                            ((SvgHelper.SvgDrawable) ((ClipRoundedDrawable) this.locationLoadingThumb).getDrawable()).setColorKey(messageObject.isOutOwner() ? Theme.key_chat_inLocationIcon : Theme.key_chat_outLocationIcon, this.resourcesProvider);
                                                        }
                                                        this.photoImage.setCrossfadeDuration(300);
                                                        this.photoImage.setCrossfadeByScale(0.05f);
                                                        i20 = this.currentMapProvider;
                                                        if (i20 == i19) {
                                                        }
                                                        reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                                                        if (reactionsLayoutInBubble5.isSmall) {
                                                            reactionsLayoutInBubble5.measure(this.backgroundWidth - AndroidUtilities.dp(16.0f), i21);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble262 = this.reactionsLayoutInBubble;
                                                            reactionsLayoutInBubble262.totalHeight = reactionsLayoutInBubble262.height + AndroidUtilities.dp(14.0f);
                                                            measureTime(messageObject);
                                                            if (this.reactionsLayoutInBubble.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                                            }
                                                            i11 = i18 + this.reactionsLayoutInBubble.totalHeight;
                                                            i9 = i16;
                                                            i10 = i17;
                                                            z25 = z26;
                                                        }
                                                        i9 = i16;
                                                        i10 = i17;
                                                        i11 = i18;
                                                        z25 = z26;
                                                    } else {
                                                        if (i232 == 19) {
                                                            z24 = true;
                                                            this.drawBackground = false;
                                                            int i240 = messageObject23.textWidth;
                                                            int textHeight3 = messageObject23.textHeight(this.transitionParams) + AndroidUtilities.dp(32.0f);
                                                            this.backgroundWidth = AndroidUtilities.dp(14.0f) + i240;
                                                            this.availableTimeWidth = i240 - AndroidUtilities.dp(12.0f);
                                                            if (AndroidUtilities.isTablet()) {
                                                                minTabletSide = AndroidUtilities.getMinTabletSide();
                                                                f3 = 0.4f;
                                                            } else {
                                                                minTabletSide = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                                f3 = 0.5f;
                                                            }
                                                            int max13 = Math.max(this.backgroundWidth, (int) (minTabletSide * f3));
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble27 = this.reactionsLayoutInBubble;
                                                            if (reactionsLayoutInBubble27.isSmall) {
                                                                dp11 = 0;
                                                            } else {
                                                                reactionsLayoutInBubble27.measure(max13, !this.currentMessageObject.isOutOwner() ? 3 : 5);
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble28 = this.reactionsLayoutInBubble;
                                                                reactionsLayoutInBubble28.drawServiceShaderBackground = 1.0f;
                                                                int i241 = reactionsLayoutInBubble28.height;
                                                                reactionsLayoutInBubble28.totalHeight = i241;
                                                                dp11 = i241 + AndroidUtilities.dp(8.0f);
                                                                this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(8.0f);
                                                            }
                                                            if (!this.drawTopic || (((messageObject6 = this.currentMessageObject) == null || messageObject6.replyMessageObject == null) && ((staticLayoutArr = this.forwardedNameLayout) == null || staticLayoutArr[0] == null))) {
                                                                dp11 -= AndroidUtilities.dp(17.0f);
                                                            }
                                                            i9 = i240;
                                                            bitmap = null;
                                                            messageObject4 = messageObject23;
                                                            i10 = textHeight3;
                                                            i11 = dp11;
                                                            c3 = 0;
                                                        } else if (messageObject.isAnyKindOfSticker()) {
                                                            this.drawBackground = false;
                                                            boolean z94 = messageObject23.type == 13;
                                                            TLRPC$Document document3 = messageObject.getDocument();
                                                            if (document3 != null) {
                                                                for (int i242 = 0; i242 < document3.attributes.size(); i242++) {
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute8 = document3.attributes.get(i242);
                                                                    if (tLRPC$DocumentAttribute8 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                        i24 = tLRPC$DocumentAttribute8.w;
                                                                        i25 = tLRPC$DocumentAttribute8.h;
                                                                        break;
                                                                    } else if (tLRPC$DocumentAttribute8 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                        i24 = tLRPC$DocumentAttribute8.w;
                                                                        i25 = tLRPC$DocumentAttribute8.h;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            i24 = 0;
                                                            i25 = 0;
                                                            if ((messageObject.isAnimatedSticker() || messageObject.isVideoSticker()) && i24 == 0 && i25 == 0) {
                                                                i24 = LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                i25 = LiteMode.FLAG_CALLS_ANIMATIONS;
                                                            }
                                                            if (messageObject.isAnimatedAnimatedEmoji()) {
                                                                i24 = Math.max((int) LiteMode.FLAG_CALLS_ANIMATIONS, i24);
                                                                i25 = Math.max((int) LiteMode.FLAG_CALLS_ANIMATIONS, i25);
                                                                if (MessageObject.isTextColorEmoji(messageObject.getDocument())) {
                                                                    this.photoImage.setColorFilter(getAdaptiveEmojiColorFilter(0, getThemedColor(Theme.key_windowBackgroundWhiteBlackText)));
                                                                }
                                                            }
                                                            if (AndroidUtilities.isTablet()) {
                                                                minTabletSide2 = AndroidUtilities.getMinTabletSide();
                                                                f4 = 0.4f;
                                                            } else {
                                                                minTabletSide2 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                                f4 = 0.5f;
                                                            }
                                                            int i243 = (int) (minTabletSide2 * f4);
                                                            float f28 = i243;
                                                            if (messageObject.isAnimatedEmoji() || messageObject.isDice()) {
                                                                float f29 = MessagesController.getInstance(this.currentAccount).animatedEmojisZoom;
                                                                i26 = (int) ((i24 / 512.0f) * i243 * f29);
                                                                i27 = (int) ((i25 / 512.0f) * f28 * f29);
                                                            } else {
                                                                if (i24 == 0) {
                                                                    i25 = (int) f28;
                                                                    i24 = AndroidUtilities.dp(100.0f) + i25;
                                                                }
                                                                float f30 = i243;
                                                                int i244 = (int) (i25 * (f30 / i24));
                                                                float f31 = i244;
                                                                if (f31 <= f28) {
                                                                    i28 = i244;
                                                                    i26 = i243;
                                                                    float f32 = AndroidUtilities.density;
                                                                    int i245 = (int) (i26 / f32);
                                                                    int i246 = (int) (i28 / f32);
                                                                    ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                                                                    boolean z95 = chatMessageCellDelegate4 != null && chatMessageCellDelegate4.shouldRepeatSticker(messageObject23);
                                                                    bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                                    if (bitmapDrawable == null) {
                                                                        this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                                    } else {
                                                                        this.currentPhotoObjectThumbStripped = bitmapDrawable;
                                                                    }
                                                                    this.photoParentObject = messageObject23.photoThumbsObject;
                                                                    if (messageObject.isDice()) {
                                                                        String format2 = String.format(Locale.US, "%d_%d_dice_%s_%s", Integer.valueOf(i245), Integer.valueOf(i246), messageObject.getDiceEmoji(), messageObject.toString());
                                                                        this.photoImage.setAutoRepeat(2);
                                                                        String diceEmoji = this.currentMessageObject.getDiceEmoji();
                                                                        TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                                                                        if (stickerSetByEmojiOrName != null && stickerSetByEmojiOrName.documents.size() > 0 && this.currentMessageObject.getDiceValue() <= 0) {
                                                                            TLRPC$Document tLRPC$Document19 = stickerSetByEmojiOrName.documents.get(0);
                                                                            if ("🎰".equals(diceEmoji)) {
                                                                                bitmap3 = null;
                                                                                this.currentPhotoObjectThumb = null;
                                                                            } else {
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document19.thumbs, 40);
                                                                                bitmap3 = null;
                                                                            }
                                                                            this.photoParentObject = tLRPC$Document19;
                                                                        } else {
                                                                            bitmap3 = null;
                                                                        }
                                                                        str = format2;
                                                                        messageObject7 = messageObject23;
                                                                        r18 = bitmap3;
                                                                        i29 = 6;
                                                                    } else {
                                                                        if (messageObject.isAnimatedEmoji()) {
                                                                            if (!LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_CHAT)) {
                                                                                String format3 = String.format(Locale.US, "%d_%d_nr_messageId=%d" + messageObject23.emojiAnimatedStickerColor, Integer.valueOf(i245), Integer.valueOf(i246), Integer.valueOf(messageObject23.stableId));
                                                                                SvgHelper.SvgDrawable circleThumb = DocumentObject.getCircleThumb(0.4f, Theme.key_chat_serviceBackground, this.resourcesProvider, 0.65f);
                                                                                this.photoImage.setAutoRepeat(3);
                                                                                messageObject.loadAnimatedEmojiDocument();
                                                                                str = format3;
                                                                                svgDrawable = circleThumb;
                                                                                messageObject7 = messageObject23;
                                                                                i29 = 6;
                                                                            } else if (messageObject23.emojiAnimatedSticker == null && messageObject23.emojiAnimatedStickerId != null) {
                                                                                String format4 = String.format(Locale.US, "%d_%d_nr_messageId=%d" + messageObject23.emojiAnimatedStickerColor, Integer.valueOf(i245), Integer.valueOf(i246), Integer.valueOf(messageObject23.stableId));
                                                                                SvgHelper.SvgDrawable circleThumb2 = DocumentObject.getCircleThumb(0.4f, Theme.key_chat_serviceBackground, this.resourcesProvider, 0.65f);
                                                                                this.photoImage.setAutoRepeat(1);
                                                                                messageObject.loadAnimatedEmojiDocument();
                                                                                str = format4;
                                                                                svgDrawable = circleThumb2;
                                                                                messageObject7 = messageObject23;
                                                                                i29 = 6;
                                                                            } else {
                                                                                String format5 = String.format(Locale.US, "%d_%d_nr_messageId=%d" + messageObject23.emojiAnimatedStickerColor, Integer.valueOf(i245), Integer.valueOf(i246), Integer.valueOf(messageObject23.stableId));
                                                                                if (MessageObject.isAnimatedEmoji(messageObject23.emojiAnimatedSticker)) {
                                                                                    z27 = true;
                                                                                    this.photoImage.setAutoRepeat(1);
                                                                                } else {
                                                                                    this.photoImage.setAutoRepeat(!z95 ? 3 : 2);
                                                                                    z27 = true;
                                                                                }
                                                                                ?? inputStickerSet = MessageObject.getInputStickerSet(messageObject23.emojiAnimatedSticker);
                                                                                if (messageObject23.emojiAnimatedStickerId != null) {
                                                                                    this.photoImage.setCrossfadeWithOldImage(z27);
                                                                                }
                                                                                str = format5;
                                                                                messageObject7 = inputStickerSet;
                                                                            }
                                                                            bitmap3 = null;
                                                                            r18 = svgDrawable;
                                                                        } else {
                                                                            if (SharedConfig.loopStickers() || (z94 && !messageObject.isVideoSticker())) {
                                                                                String format6 = String.format(Locale.US, "%d_%d", Integer.valueOf(i245), Integer.valueOf(i246));
                                                                                this.photoImage.setAutoRepeat(1);
                                                                                str = format6;
                                                                            } else {
                                                                                String format7 = String.format(Locale.US, "%d_%d_nr_messageId=%d", Integer.valueOf(i245), Integer.valueOf(i246), Integer.valueOf(messageObject23.stableId));
                                                                                this.photoImage.setAutoRepeat(!z95 ? 3 : 2);
                                                                                str = format7;
                                                                            }
                                                                            messageObject7 = messageObject23;
                                                                        }
                                                                        i29 = 6;
                                                                        bitmap3 = null;
                                                                        r18 = null;
                                                                    }
                                                                    this.documentAttachType = i29;
                                                                    this.availableTimeWidth = i26 - AndroidUtilities.dp(14.0f);
                                                                    this.backgroundWidth = AndroidUtilities.dp(12.0f) + i26;
                                                                    this.photoImage.setRoundRadius(0);
                                                                    if (!messageObject.isOutOwner() && MessageObject.isPremiumSticker(messageObject.getDocument())) {
                                                                        this.flipImage = true;
                                                                    }
                                                                    if (messageObject.getDocument() == null) {
                                                                        int i247 = i28;
                                                                        if (messageObject.isVideoSticker()) {
                                                                            messageObject8 = messageObject23;
                                                                            bitmap4 = bitmap3;
                                                                            i30 = i243;
                                                                            i31 = i247;
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", messageObject8.pathThumb, messageObject.getDocument().size, !z94 ? bitmap4 : "webp", messageObject7, 1);
                                                                            if (!loopStickers()) {
                                                                                this.photoImage.animatedFileDrawableRepeatMaxCount = 1;
                                                                            }
                                                                        } else if (messageObject23.pathThumb != null) {
                                                                            messageObject8 = messageObject23;
                                                                            bitmap4 = bitmap3;
                                                                            i30 = i243;
                                                                            i31 = i247;
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str, messageObject8.pathThumb, messageObject.getDocument().size, !z94 ? bitmap4 : "webp", messageObject7, 1);
                                                                        } else if (messageObject23.attachPathExists) {
                                                                            messageObject8 = messageObject23;
                                                                            bitmap4 = bitmap3;
                                                                            i30 = i243;
                                                                            i31 = i247;
                                                                            this.photoImage.setImage(ImageLocation.getForPath(messageObject8.messageOwner.attachPath), str, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", r18 == null ? this.currentPhotoObjectThumbStripped : r18, messageObject.getDocument().size, !z94 ? bitmap4 : "webp", messageObject7, 1);
                                                                        } else if (messageObject.getDocument().id != 0) {
                                                                            messageObject8 = messageObject23;
                                                                            bitmap4 = bitmap3;
                                                                            i30 = i243;
                                                                            i31 = i247;
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", r18 == null ? this.currentPhotoObjectThumbStripped : r18, messageObject.getDocument().size, !z94 ? bitmap4 : "webp", messageObject7, 1);
                                                                        } else {
                                                                            messageObject8 = messageObject23;
                                                                            i31 = i247;
                                                                            i30 = i243;
                                                                            bitmap4 = null;
                                                                            this.photoImage.setImage(null, null, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", r18, 0L, null, messageObject, 0);
                                                                        }
                                                                    } else {
                                                                        this.photoImage.setImage(null, null, r18, null, messageObject, 0);
                                                                        messageObject8 = messageObject23;
                                                                        bitmap4 = bitmap3;
                                                                        i30 = i243;
                                                                        i31 = i28;
                                                                    }
                                                                    reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                                                    if (reactionsLayoutInBubble6.isSmall) {
                                                                        reactionsLayoutInBubble6.measure(i30 + AndroidUtilities.dp(36.0f), (this.currentMessageObject.isOutOwner() && (this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isAnyKindOfSticker())) ? 5 : 3);
                                                                        ReactionsLayoutInBubble reactionsLayoutInBubble29 = this.reactionsLayoutInBubble;
                                                                        reactionsLayoutInBubble29.drawServiceShaderBackground = 1.0f;
                                                                        reactionsLayoutInBubble29.totalHeight = reactionsLayoutInBubble29.height + AndroidUtilities.dp(8.0f);
                                                                        i32 = this.reactionsLayoutInBubble.totalHeight;
                                                                        if (!this.currentMessageObject.isAnimatedEmoji()) {
                                                                            this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(4.0f);
                                                                        }
                                                                    } else {
                                                                        i32 = 0;
                                                                    }
                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                        this.blurredPhotoImage.getBitmap().recycle();
                                                                        this.blurredPhotoImage.setImageBitmap(bitmap4);
                                                                    }
                                                                    if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && ((this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) || this.fitPhotoImage)) {
                                                                        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                        this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                    }
                                                                    i9 = i26;
                                                                    bitmap = bitmap4;
                                                                    messageObject4 = messageObject8;
                                                                    i11 = i32;
                                                                    i10 = i31;
                                                                    c3 = 0;
                                                                    z24 = false;
                                                                } else {
                                                                    i26 = (int) (f30 * (f28 / f31));
                                                                    i27 = (int) f28;
                                                                }
                                                            }
                                                            i28 = i27;
                                                            float f322 = AndroidUtilities.density;
                                                            int i2452 = (int) (i26 / f322);
                                                            int i2462 = (int) (i28 / f322);
                                                            ChatMessageCellDelegate chatMessageCellDelegate42 = this.delegate;
                                                            if (chatMessageCellDelegate42 != null) {
                                                                bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                                if (bitmapDrawable == null) {
                                                                }
                                                                this.photoParentObject = messageObject23.photoThumbsObject;
                                                                if (messageObject.isDice()) {
                                                                }
                                                                this.documentAttachType = i29;
                                                                this.availableTimeWidth = i26 - AndroidUtilities.dp(14.0f);
                                                                this.backgroundWidth = AndroidUtilities.dp(12.0f) + i26;
                                                                this.photoImage.setRoundRadius(0);
                                                                if (!messageObject.isOutOwner()) {
                                                                    this.flipImage = true;
                                                                    if (messageObject.getDocument() == null) {
                                                                    }
                                                                    reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                                                    if (reactionsLayoutInBubble6.isSmall) {
                                                                    }
                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                    }
                                                                    if (this.photoImage.getBitmap() != null) {
                                                                        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                        this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                    }
                                                                    i9 = i26;
                                                                    bitmap = bitmap4;
                                                                    messageObject4 = messageObject8;
                                                                    i11 = i32;
                                                                    i10 = i31;
                                                                    c3 = 0;
                                                                    z24 = false;
                                                                }
                                                                if (messageObject.getDocument() == null) {
                                                                }
                                                                reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                                                if (reactionsLayoutInBubble6.isSmall) {
                                                                }
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                }
                                                                if (this.photoImage.getBitmap() != null) {
                                                                }
                                                                i9 = i26;
                                                                bitmap = bitmap4;
                                                                messageObject4 = messageObject8;
                                                                i11 = i32;
                                                                i10 = i31;
                                                                c3 = 0;
                                                                z24 = false;
                                                            }
                                                            bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                            if (bitmapDrawable == null) {
                                                            }
                                                            this.photoParentObject = messageObject23.photoThumbsObject;
                                                            if (messageObject.isDice()) {
                                                            }
                                                            this.documentAttachType = i29;
                                                            this.availableTimeWidth = i26 - AndroidUtilities.dp(14.0f);
                                                            this.backgroundWidth = AndroidUtilities.dp(12.0f) + i26;
                                                            this.photoImage.setRoundRadius(0);
                                                            if (!messageObject.isOutOwner()) {
                                                            }
                                                            if (messageObject.getDocument() == null) {
                                                            }
                                                            reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                                            if (reactionsLayoutInBubble6.isSmall) {
                                                            }
                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                            }
                                                            if (this.photoImage.getBitmap() != null) {
                                                            }
                                                            i9 = i26;
                                                            bitmap = bitmap4;
                                                            messageObject4 = messageObject8;
                                                            i11 = i32;
                                                            i10 = i31;
                                                            c3 = 0;
                                                            z24 = false;
                                                        } else {
                                                            this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, AndroidUtilities.getPhotoSize());
                                                            this.photoParentObject = messageObject23.photoThumbsObject;
                                                            if (messageObject23.type == 5) {
                                                                this.documentAttach = messageObject.getDocument();
                                                                this.documentAttachType = 7;
                                                                i33 = 0;
                                                            } else {
                                                                if (AndroidUtilities.isTablet()) {
                                                                    minTabletSide4 = AndroidUtilities.getMinTabletSide();
                                                                } else {
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize39 = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize39 != null && (((i64 = messageObject23.type) == 1 || i64 == 20 || i64 == 3 || i64 == 8) && tLRPC$PhotoSize39.w >= tLRPC$PhotoSize39.h)) {
                                                                        i33 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp((!checkNeedDrawShareButton(messageObject) ? 0 : 10) + 64);
                                                                        z28 = true;
                                                                        int dp69 = AndroidUtilities.dp(100.0f) + i33;
                                                                        if (z28) {
                                                                            if (messageObject23.type != 5 && checkNeedDrawShareButton(messageObject)) {
                                                                                i33 -= AndroidUtilities.dp(20.0f);
                                                                            }
                                                                            if (i33 > AndroidUtilities.getPhotoSize()) {
                                                                                i33 = AndroidUtilities.getPhotoSize();
                                                                            }
                                                                            if (dp69 > AndroidUtilities.getPhotoSize()) {
                                                                                dp69 = AndroidUtilities.getPhotoSize();
                                                                            }
                                                                        } else if (z10) {
                                                                            i33 -= AndroidUtilities.dp(52.0f);
                                                                        }
                                                                        i34 = messageObject23.type;
                                                                        if (i34 == 1 || i34 == 20) {
                                                                            updateSecretTimeText(messageObject);
                                                                            this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                                        } else {
                                                                            if (i34 == 3 || i34 == 8) {
                                                                                createDocumentLayout(0, messageObject23);
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                                                updateSecretTimeText(messageObject);
                                                                            } else if (i34 == 5) {
                                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                                            }
                                                                            z29 = true;
                                                                            bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                                                            if (bitmapDrawable2 != null) {
                                                                                this.currentPhotoObjectThumb = null;
                                                                                this.currentPhotoObjectThumbStripped = bitmapDrawable2;
                                                                            }
                                                                            if (messageObject23.type == 5) {
                                                                                if (this.isPlayingRound && !messageObject.isVoiceTranscriptionOpen()) {
                                                                                    i9 = AndroidUtilities.roundPlayingMessageSize;
                                                                                } else {
                                                                                    i9 = AndroidUtilities.roundMessageSize;
                                                                                }
                                                                                i35 = i9;
                                                                            } else {
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize40 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize40 == null) {
                                                                                    tLRPC$PhotoSize40 = this.currentPhotoObjectThumb;
                                                                                }
                                                                                if (messageObject.hasExtendedMediaPreview()) {
                                                                                    TLRPC$TL_messageExtendedMediaPreview tLRPC$TL_messageExtendedMediaPreview = (TLRPC$TL_messageExtendedMediaPreview) messageObject23.messageOwner.media.extended_media.get(0);
                                                                                    i61 = tLRPC$TL_messageExtendedMediaPreview.w;
                                                                                    if (i61 == 0 || (i63 = tLRPC$TL_messageExtendedMediaPreview.h) == 0) {
                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize41 = tLRPC$TL_messageExtendedMediaPreview.thumb;
                                                                                        if (tLRPC$PhotoSize41 != null) {
                                                                                            i61 = tLRPC$PhotoSize41.w;
                                                                                            i62 = tLRPC$PhotoSize41.h;
                                                                                        }
                                                                                        i62 = 0;
                                                                                        i61 = 0;
                                                                                    } else {
                                                                                        i62 = i63;
                                                                                    }
                                                                                    Point messageSize = getMessageSize(i61, i62, i33, dp69);
                                                                                    i9 = (int) messageSize.x;
                                                                                    i35 = (int) messageSize.y;
                                                                                } else {
                                                                                    if (tLRPC$PhotoSize40 != null && !(tLRPC$PhotoSize40 instanceof TLRPC$TL_photoStrippedSize)) {
                                                                                        i61 = tLRPC$PhotoSize40.w;
                                                                                        i62 = tLRPC$PhotoSize40.h;
                                                                                    } else {
                                                                                        TLRPC$Document tLRPC$Document20 = this.documentAttach;
                                                                                        if (tLRPC$Document20 != null) {
                                                                                            int size14 = tLRPC$Document20.attributes.size();
                                                                                            int i248 = 0;
                                                                                            int i249 = 0;
                                                                                            for (int i250 = 0; i250 < size14; i250++) {
                                                                                                TLRPC$DocumentAttribute tLRPC$DocumentAttribute9 = this.documentAttach.attributes.get(i250);
                                                                                                if (tLRPC$DocumentAttribute9 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                                                    int i251 = tLRPC$DocumentAttribute9.w;
                                                                                                    i249 = tLRPC$DocumentAttribute9.h;
                                                                                                    i248 = i251;
                                                                                                }
                                                                                            }
                                                                                            i61 = i248;
                                                                                            i62 = i249;
                                                                                        }
                                                                                        i62 = 0;
                                                                                        i61 = 0;
                                                                                    }
                                                                                    Point messageSize2 = getMessageSize(i61, i62, i33, dp69);
                                                                                    i9 = (int) messageSize2.x;
                                                                                    i35 = (int) messageSize2.y;
                                                                                }
                                                                                f2 = 1.0f;
                                                                                r15 = bitmap2;
                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                    this.blurredPhotoImage.getBitmap().recycle();
                                                                                    this.blurredPhotoImage.setImageBitmap(r15);
                                                                                }
                                                                                if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && ((this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) || this.fitPhotoImage)) {
                                                                                    this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                                    this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                                }
                                                                                setMessageObjectInternal(messageObject);
                                                                                if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition8 = this.currentPosition) == null || groupedMessagePosition8.minY == 0)) {
                                                                                    if (messageObject4.type != 5) {
                                                                                        this.namesOffset += AndroidUtilities.dp(5.0f);
                                                                                    }
                                                                                } else if (this.drawNameLayout && (messageObject.getReplyMsgId() == 0 || (this.isThreadChat && messageObject.getReplyTopMsgId() == 0))) {
                                                                                    this.namesOffset += AndroidUtilities.dp(7.0f);
                                                                                }
                                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                    this.totalHeight += AndroidUtilities.dp(56.0f);
                                                                                }
                                                                                groupedMessagePosition6 = this.currentPosition;
                                                                                if (groupedMessagePosition6 != null && (groupedMessagePosition6.flags & 8) == 0 && !this.currentMessageObject.isDocument() && this.currentMessageObject.type != 19) {
                                                                                    this.totalHeight -= AndroidUtilities.dp(3.0f);
                                                                                }
                                                                                if (this.currentMessageObject.isDice()) {
                                                                                    this.totalHeight += AndroidUtilities.dp(21.0f);
                                                                                    this.additionalTimeOffsetY = AndroidUtilities.dp(21.0f);
                                                                                }
                                                                                if (this.currentPosition != null && !this.currentMessageObject.isDocument()) {
                                                                                    i9 += getAdditionalWidthForPosition(this.currentPosition);
                                                                                    if ((this.currentPosition.flags & 4) == 0) {
                                                                                        i12 = 0;
                                                                                    } else {
                                                                                        i10 += AndroidUtilities.dp(4.0f);
                                                                                        i12 = 0 - AndroidUtilities.dp(4.0f);
                                                                                    }
                                                                                    if ((this.currentPosition.flags & 8) == 0) {
                                                                                        i10 += AndroidUtilities.dp(f2);
                                                                                    }
                                                                                } else {
                                                                                    if (this.currentPosition != null && this.currentMessageObject.isDocument()) {
                                                                                        i13 = this.currentPosition.flags;
                                                                                        if ((i13 & 4) == 0 && (i13 & 8) != 0 && !messageObject.isOutOwner() && !this.drawPhotoImage) {
                                                                                            this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                                        }
                                                                                    }
                                                                                    i12 = 0;
                                                                                }
                                                                                if (this.captionLayout != null && this.captionAbove && ((groupedMessagePosition7 = this.currentPosition) == null || (groupedMessagePosition7.flags & captionFlag()) != 0)) {
                                                                                    i12 = this.captionLayout.textHeight() + AndroidUtilities.dp(8.0f);
                                                                                }
                                                                                if (this.currentMessageObject.type == 19) {
                                                                                    dp9 = 0;
                                                                                } else {
                                                                                    if (this.drawPinnedTop) {
                                                                                        this.namesOffset -= AndroidUtilities.dp(this.documentAttachType != i8 ? 1.0f : 2.0f);
                                                                                    }
                                                                                    if (this.drawPinnedTop && !messageObject.isOutOwner()) {
                                                                                        this.totalHeight += AndroidUtilities.dp(this.documentAttachType != i8 ? 0.0f : 2.0f);
                                                                                    }
                                                                                    if (this.namesOffset > 0) {
                                                                                        dp9 = AndroidUtilities.dp(7.0f);
                                                                                        this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                                    } else {
                                                                                        dp9 = AndroidUtilities.dp(5.0f);
                                                                                        this.totalHeight -= AndroidUtilities.dp(4.0f);
                                                                                    }
                                                                                }
                                                                                if (this.currentPosition != null) {
                                                                                    MessageObject.GroupedMessages groupedMessages7 = this.currentMessagesGroup;
                                                                                    if (groupedMessages7.isDocuments && groupedMessages7.messages.size() > i8) {
                                                                                        if ((this.currentPosition.flags & 4) == 0) {
                                                                                            this.totalHeight -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                                                                            this.mediaOffsetY -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                                                                            dp9 -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                                                                        }
                                                                                        if ((this.currentPosition.flags & 8) == 0) {
                                                                                            this.totalHeight -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (messageObject.isRoundVideo() && messageObject.isVoiceTranscriptionOpen()) {
                                                                                    this.photoImage.setImageCoords(0.0f, AndroidUtilities.dp(13.0f), AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                                                                                } else {
                                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                }
                                                                                if (messageObject.hasMediaSpoilers() && SpoilerEffect2.supports()) {
                                                                                    if (this.mediaSpoilerEffect2 == null) {
                                                                                        SpoilerEffect2 makeSpoilerEffect = makeSpoilerEffect();
                                                                                        this.mediaSpoilerEffect2 = makeSpoilerEffect;
                                                                                        Integer num = this.mediaSpoilerEffect2Index;
                                                                                        if (num != null) {
                                                                                            makeSpoilerEffect.reassignAttach(this, num.intValue());
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                    if (spoilerEffect2 != null) {
                                                                                        spoilerEffect2.detach(this);
                                                                                        this.mediaSpoilerEffect2 = r15;
                                                                                    }
                                                                                }
                                                                                invalidate();
                                                                                c2 = c3;
                                                                                z21 = z24;
                                                                                messageObject3 = messageObject4;
                                                                                z20 = true;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                            }
                                                                            tLRPC$PhotoSize = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize != null && "s".equals(tLRPC$PhotoSize.type)) {
                                                                                this.currentPhotoObject = null;
                                                                            }
                                                                            tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize2 != null && tLRPC$PhotoSize2 == this.currentPhotoObjectThumb) {
                                                                                i60 = messageObject23.type;
                                                                                if (i60 == 1 || i60 == 20) {
                                                                                    this.currentPhotoObjectThumb = null;
                                                                                    this.currentPhotoObjectThumbStripped = null;
                                                                                } else {
                                                                                    this.currentPhotoObject = null;
                                                                                }
                                                                            }
                                                                            if (z29 && !messageObject.needDrawBluredPreview() && (((tLRPC$PhotoSize6 = this.currentPhotoObject) == null || tLRPC$PhotoSize6 == this.currentPhotoObjectThumb) && ((tLRPC$PhotoSize7 = this.currentPhotoObjectThumb) == null || !"m".equals(tLRPC$PhotoSize7.type)))) {
                                                                                this.photoImage.setNeedsQualityThumb(true);
                                                                                this.photoImage.setShouldGenerateQualityThumb(true);
                                                                            }
                                                                            if (this.currentMessagesGroup == null && messageObject23.caption != null && !this.captionAbove) {
                                                                                this.mediaBackground = false;
                                                                            }
                                                                            if ((i9 != 0 || i35 == 0) && messageObject23.type == 8 && (document = messageObject.getDocument()) != null) {
                                                                                for (i36 = 0; i36 < document.attributes.size(); i36++) {
                                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute10 = document.attributes.get(i36);
                                                                                    if ((tLRPC$DocumentAttribute10 instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute10 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                                                        float f33 = tLRPC$DocumentAttribute10.w;
                                                                                        float f34 = i33;
                                                                                        float f35 = f33 / f34;
                                                                                        int i252 = (int) (f33 / f35);
                                                                                        int i253 = (int) (tLRPC$DocumentAttribute10.h / f35);
                                                                                        if (i253 <= dp69) {
                                                                                            if (i253 >= AndroidUtilities.dp(120.0f)) {
                                                                                                dp69 = i253;
                                                                                            } else {
                                                                                                dp69 = AndroidUtilities.dp(120.0f);
                                                                                                float f36 = tLRPC$DocumentAttribute10.w / (tLRPC$DocumentAttribute10.h / dp69);
                                                                                                if (f36 < f34) {
                                                                                                    i252 = (int) f36;
                                                                                                }
                                                                                            }
                                                                                            i9 = i252;
                                                                                        } else {
                                                                                            i9 = (int) (i252 / (i253 / dp69));
                                                                                        }
                                                                                        if (i9 != 0 || dp69 == 0) {
                                                                                            i9 = AndroidUtilities.dp(150.0f);
                                                                                            dp69 = i9;
                                                                                        }
                                                                                        if (messageObject23.type == 3 && i9 < this.infoWidth + AndroidUtilities.dp(40.0f)) {
                                                                                            i9 = this.infoWidth + AndroidUtilities.dp(40.0f);
                                                                                        }
                                                                                        i37 = messageObject23.type;
                                                                                        if (i37 != 23 || i37 == 24) {
                                                                                            double d9 = AndroidUtilities.displaySize.x;
                                                                                            Double.isNaN(d9);
                                                                                            i9 = (int) Math.min(d9 * 0.53d, AndroidUtilities.dp(300.0f));
                                                                                            dp69 = (int) ((i9 * 16.0f) / 9.0f);
                                                                                        }
                                                                                        if (this.commentLayout != null && this.drawSideButton != 3 && i9 < this.totalCommentWidth + AndroidUtilities.dp(10.0f)) {
                                                                                            i9 = this.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                                                                        }
                                                                                        if (this.currentMessagesGroup == null) {
                                                                                            int groupPhotosWidth = getGroupPhotosWidth();
                                                                                            int i254 = 0;
                                                                                            int i255 = 0;
                                                                                            while (i254 < this.currentMessagesGroup.posArray.size()) {
                                                                                                if (this.currentMessagesGroup.posArray.get(i254).minY != 0) {
                                                                                                    break;
                                                                                                }
                                                                                                double d10 = i255;
                                                                                                double ceil11 = Math.ceil(((groupedMessagePosition9.pw + groupedMessagePosition9.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                                                                                                Double.isNaN(d10);
                                                                                                i255 = (int) (d10 + ceil11);
                                                                                                i254++;
                                                                                                i147 = 5;
                                                                                                z74 = true;
                                                                                                z72 = false;
                                                                                            }
                                                                                            this.availableTimeWidth = i255 - AndroidUtilities.dp(35.0f);
                                                                                            z75 = z74;
                                                                                            z73 = z72;
                                                                                        } else {
                                                                                            this.availableTimeWidth = i33 - AndroidUtilities.dp(14.0f);
                                                                                        }
                                                                                        if (messageObject23.type == i147) {
                                                                                            double d11 = AndroidUtilities.roundMessageSize;
                                                                                            double ceil12 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                                                                            Double.isNaN(d11);
                                                                                            double d12 = d11 - ceil12;
                                                                                            double dp70 = AndroidUtilities.dp(46.0f);
                                                                                            Double.isNaN(dp70);
                                                                                            this.availableTimeWidth = (int) (d12 - dp70);
                                                                                        }
                                                                                        measureTime(messageObject);
                                                                                        dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                                                        if (i9 < dp12) {
                                                                                            i9 = dp12;
                                                                                        }
                                                                                        if (!messageObject.isRoundVideo()) {
                                                                                            i9 = Math.min(i9, dp69);
                                                                                            boolean isVoiceTranscriptionOpen = messageObject.isVoiceTranscriptionOpen();
                                                                                            this.drawBackground = isVoiceTranscriptionOpen;
                                                                                            this.mediaBackground = !isVoiceTranscriptionOpen;
                                                                                            dp69 = !isVoiceTranscriptionOpen ? i9 : 0;
                                                                                            this.photoImage.setRoundRadius(i9 / 2);
                                                                                            z30 = false;
                                                                                        } else {
                                                                                            if (messageObject.needDrawBluredPreview() && !messageObject.hasExtendedMediaPreview()) {
                                                                                                if (AndroidUtilities.isTablet()) {
                                                                                                    minTabletSide3 = AndroidUtilities.getMinTabletSide();
                                                                                                } else {
                                                                                                    minTabletSide3 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                                                                }
                                                                                                i9 = (int) (minTabletSide3 * 0.6f);
                                                                                                dp69 = (int) (i9 * 0.61f);
                                                                                            }
                                                                                            z30 = true;
                                                                                        }
                                                                                        if (this.currentMessagesGroup == null) {
                                                                                            float max14 = Math.max(getParentWidth(), AndroidUtilities.displaySize.y) * 0.5f;
                                                                                            float groupPhotosWidth2 = getGroupPhotosWidth();
                                                                                            int ceil13 = (int) Math.ceil((this.currentPosition.pw / 1000.0f) * groupPhotosWidth2);
                                                                                            boolean z96 = z75;
                                                                                            boolean z97 = z73;
                                                                                            if (this.currentPosition.minY != 0) {
                                                                                                if (!messageObject.isOutOwner() || (this.currentPosition.flags & (z75 ? 1 : 0)) == 0) {
                                                                                                    z96 = z75;
                                                                                                    z97 = z73;
                                                                                                    if (!messageObject.isOutOwner()) {
                                                                                                        z96 = z75;
                                                                                                        z97 = z73;
                                                                                                    }
                                                                                                }
                                                                                                int i256 = 0;
                                                                                                int i257 = 0;
                                                                                                int i258 = 0;
                                                                                                boolean z98 = z75;
                                                                                                boolean z99 = z73;
                                                                                                while (i256 < this.currentMessagesGroup.posArray.size()) {
                                                                                                    MessageObject.GroupedMessagePosition groupedMessagePosition19 = this.currentMessagesGroup.posArray.get(i256);
                                                                                                    byte b = groupedMessagePosition19.minY;
                                                                                                    if (b == 0) {
                                                                                                        f5 = max14;
                                                                                                        messageObject10 = messageObject23;
                                                                                                        i49 = dp12;
                                                                                                        double d13 = i257;
                                                                                                        double ceil14 = Math.ceil((groupedMessagePosition19.pw / 1000.0f) * groupPhotosWidth2);
                                                                                                        if (groupedMessagePosition19.leftSpanOffset == 0) {
                                                                                                            ceil2 = 0.0d;
                                                                                                            f6 = groupPhotosWidth2;
                                                                                                            i51 = ceil13;
                                                                                                        } else {
                                                                                                            f6 = groupPhotosWidth2;
                                                                                                            i51 = ceil13;
                                                                                                            ceil2 = Math.ceil((i50 / 1000.0f) * groupPhotosWidth2);
                                                                                                        }
                                                                                                        Double.isNaN(d13);
                                                                                                        i257 = (int) (d13 + ceil14 + ceil2);
                                                                                                    } else {
                                                                                                        byte b2 = this.currentPosition.minY;
                                                                                                        if (b == b2) {
                                                                                                            messageObject10 = messageObject23;
                                                                                                            i49 = dp12;
                                                                                                            double d14 = i258;
                                                                                                            double ceil15 = Math.ceil((groupedMessagePosition19.pw / 1000.0f) * groupPhotosWidth2);
                                                                                                            if (groupedMessagePosition19.leftSpanOffset == 0) {
                                                                                                                ceil3 = 0.0d;
                                                                                                                f5 = max14;
                                                                                                            } else {
                                                                                                                f5 = max14;
                                                                                                                ceil3 = Math.ceil((i53 / 1000.0f) * groupPhotosWidth2);
                                                                                                            }
                                                                                                            Double.isNaN(d14);
                                                                                                            f6 = groupPhotosWidth2;
                                                                                                            i51 = ceil13;
                                                                                                            i258 = (int) (d14 + ceil15 + ceil3);
                                                                                                        } else if (b > b2) {
                                                                                                            break;
                                                                                                        } else {
                                                                                                            f6 = groupPhotosWidth2;
                                                                                                            i51 = ceil13;
                                                                                                            f5 = max14;
                                                                                                            messageObject10 = messageObject23;
                                                                                                            i52 = 1;
                                                                                                            i49 = dp12;
                                                                                                            i256 += i52;
                                                                                                            groupPhotosWidth2 = f6;
                                                                                                            ceil13 = i51;
                                                                                                            max14 = f5;
                                                                                                            dp12 = i49;
                                                                                                            z98 = true;
                                                                                                            z99 = false;
                                                                                                            messageObject23 = messageObject10;
                                                                                                        }
                                                                                                    }
                                                                                                    i52 = 1;
                                                                                                    i256 += i52;
                                                                                                    groupPhotosWidth2 = f6;
                                                                                                    ceil13 = i51;
                                                                                                    max14 = f5;
                                                                                                    dp12 = i49;
                                                                                                    z98 = true;
                                                                                                    z99 = false;
                                                                                                    messageObject23 = messageObject10;
                                                                                                }
                                                                                                ceil13 += i257 - i258;
                                                                                                z96 = z98;
                                                                                                z97 = z99;
                                                                                            }
                                                                                            int dp71 = ceil13 - AndroidUtilities.dp(9.0f);
                                                                                            if (this.isAvatarVisible) {
                                                                                                dp71 -= AndroidUtilities.dp(48.0f);
                                                                                            }
                                                                                            int i259 = dp71;
                                                                                            if (this.currentPosition.siblingHeights != null) {
                                                                                                int i260 = 0;
                                                                                                int i261 = 0;
                                                                                                boolean z100 = z96;
                                                                                                boolean z101 = z97;
                                                                                                while (true) {
                                                                                                    groupedMessagePosition11 = this.currentPosition;
                                                                                                    if (i260 >= groupedMessagePosition11.siblingHeights.length) {
                                                                                                        break;
                                                                                                    }
                                                                                                    i261 += (int) Math.ceil(fArr[i260] * max14);
                                                                                                    i260++;
                                                                                                    dp12 = dp12;
                                                                                                    z100 = true;
                                                                                                    z101 = false;
                                                                                                    messageObject23 = messageObject23;
                                                                                                }
                                                                                                round = i261 + ((groupedMessagePosition11.maxY - groupedMessagePosition11.minY) * Math.round(AndroidUtilities.density * 7.0f));
                                                                                                z32 = z100;
                                                                                                z31 = z101;
                                                                                            } else {
                                                                                                round = (int) Math.ceil(max14 * groupedMessagePosition10.ph);
                                                                                                z32 = z96;
                                                                                                z31 = z97;
                                                                                            }
                                                                                            this.backgroundWidth = i259;
                                                                                            int i262 = this.currentPosition.flags;
                                                                                            int i263 = i262 & 2;
                                                                                            if (i263 != 0 && (i262 & 1) != 0) {
                                                                                                dp13 = AndroidUtilities.dp(8.0f);
                                                                                            } else if (i263 == 0 && (i262 & (z32 ? 1 : 0)) == 0) {
                                                                                                dp13 = AndroidUtilities.dp(11.0f);
                                                                                            } else if (i263 != 0) {
                                                                                                dp13 = AndroidUtilities.dp(10.0f);
                                                                                            } else {
                                                                                                dp13 = AndroidUtilities.dp(9.0f);
                                                                                            }
                                                                                            i38 = i259 - dp13;
                                                                                            i9 = this.currentPosition.edge ? i38 : AndroidUtilities.dp(10.0f) + i38;
                                                                                            MessageObject.GroupedMessagePosition groupedMessagePosition20 = this.currentPosition;
                                                                                            int dp72 = (groupedMessagePosition20 != null && (groupedMessagePosition20.flags & captionFlag()) == 0) ? 0 : i9 - AndroidUtilities.dp(15.0f);
                                                                                            if ((this.currentPosition.flags & captionFlag()) != 0 || this.captionAbove || (this.currentMessagesGroup.hasSibling && (this.currentPosition.flags & 4) == 0)) {
                                                                                                MessageObject.GroupedMessagePosition groupedMessagePosition21 = this.currentPosition;
                                                                                                if (groupedMessagePosition21 == null || (groupedMessagePosition21.flags & captionFlag()) != 0) {
                                                                                                    dp72 += getAdditionalWidthForPosition(this.currentPosition);
                                                                                                }
                                                                                                int min5 = Math.min(this.currentMessagesGroup.posArray.size(), this.currentMessagesGroup.messages.size());
                                                                                                int i264 = dp72;
                                                                                                int i265 = 0;
                                                                                                boolean z102 = true;
                                                                                                boolean z103 = z32;
                                                                                                boolean z104 = z31;
                                                                                                while (i265 < min5) {
                                                                                                    MessageObject messageObject32 = messageObject23;
                                                                                                    MessageObject messageObject33 = this.currentMessagesGroup.messages.get(i265);
                                                                                                    MessageObject.GroupedMessagePosition groupedMessagePosition22 = this.currentMessagesGroup.posArray.get(i265);
                                                                                                    if (groupedMessagePosition22 == this.currentPosition || (groupedMessagePosition22.flags & captionFlag()) == 0) {
                                                                                                        i40 = i9;
                                                                                                    } else {
                                                                                                        int ceil16 = (int) Math.ceil((groupedMessagePosition22.pw / 1000.0f) * groupPhotosWidth2);
                                                                                                        if (groupedMessagePosition22.minY != 0) {
                                                                                                            if (!messageObject.isOutOwner() || (groupedMessagePosition22.flags & 1) == 0) {
                                                                                                                if (!messageObject.isOutOwner()) {
                                                                                                                }
                                                                                                            }
                                                                                                            int i266 = 0;
                                                                                                            int i267 = 0;
                                                                                                            int i268 = 0;
                                                                                                            while (true) {
                                                                                                                if (i266 >= this.currentMessagesGroup.posArray.size()) {
                                                                                                                    i40 = i9;
                                                                                                                    break;
                                                                                                                }
                                                                                                                MessageObject.GroupedMessagePosition groupedMessagePosition23 = this.currentMessagesGroup.posArray.get(i266);
                                                                                                                byte b3 = groupedMessagePosition23.minY;
                                                                                                                if (b3 == 0) {
                                                                                                                    i40 = i9;
                                                                                                                    i42 = dp12;
                                                                                                                    i43 = round;
                                                                                                                    i44 = min5;
                                                                                                                    messageObject9 = messageObject33;
                                                                                                                    groupedMessagePosition12 = groupedMessagePosition22;
                                                                                                                    double d15 = i267;
                                                                                                                    double ceil17 = Math.ceil((groupedMessagePosition23.pw / 1000.0f) * groupPhotosWidth2);
                                                                                                                    double ceil18 = groupedMessagePosition23.leftSpanOffset == 0 ? 0.0d : Math.ceil((i45 / 1000.0f) * groupPhotosWidth2);
                                                                                                                    Double.isNaN(d15);
                                                                                                                    i267 = (int) (d15 + ceil17 + ceil18);
                                                                                                                } else {
                                                                                                                    i40 = i9;
                                                                                                                    byte b4 = groupedMessagePosition22.minY;
                                                                                                                    if (b3 == b4) {
                                                                                                                        i42 = dp12;
                                                                                                                        double d16 = i268;
                                                                                                                        i43 = round;
                                                                                                                        i44 = min5;
                                                                                                                        double ceil19 = Math.ceil((groupedMessagePosition23.pw / 1000.0f) * groupPhotosWidth2);
                                                                                                                        if (groupedMessagePosition23.leftSpanOffset == 0) {
                                                                                                                            ceil = 0.0d;
                                                                                                                            messageObject9 = messageObject33;
                                                                                                                            groupedMessagePosition12 = groupedMessagePosition22;
                                                                                                                        } else {
                                                                                                                            messageObject9 = messageObject33;
                                                                                                                            groupedMessagePosition12 = groupedMessagePosition22;
                                                                                                                            ceil = Math.ceil((i46 / 1000.0f) * groupPhotosWidth2);
                                                                                                                        }
                                                                                                                        Double.isNaN(d16);
                                                                                                                        i268 = (int) (d16 + ceil19 + ceil);
                                                                                                                    } else if (b3 > b4) {
                                                                                                                        break;
                                                                                                                    } else {
                                                                                                                        i42 = dp12;
                                                                                                                        i43 = round;
                                                                                                                        i44 = min5;
                                                                                                                        messageObject9 = messageObject33;
                                                                                                                        groupedMessagePosition12 = groupedMessagePosition22;
                                                                                                                    }
                                                                                                                }
                                                                                                                i266++;
                                                                                                                dp12 = i42;
                                                                                                                i9 = i40;
                                                                                                                min5 = i44;
                                                                                                                round = i43;
                                                                                                                groupedMessagePosition22 = groupedMessagePosition12;
                                                                                                                messageObject33 = messageObject9;
                                                                                                            }
                                                                                                            ceil16 += i267 - i268;
                                                                                                            int dp73 = ceil16 - AndroidUtilities.dp(9.0f);
                                                                                                            int i269 = groupedMessagePosition22.flags;
                                                                                                            i47 = i269 & 2;
                                                                                                            if (i47 != 0 && (i269 & 1) != 0) {
                                                                                                                dp14 = AndroidUtilities.dp(8.0f);
                                                                                                            } else if (i47 == 0 && (i269 & 1) == 0) {
                                                                                                                dp14 = AndroidUtilities.dp(11.0f);
                                                                                                            } else if (i47 == 0) {
                                                                                                                dp14 = AndroidUtilities.dp(10.0f);
                                                                                                            } else {
                                                                                                                dp14 = AndroidUtilities.dp(9.0f);
                                                                                                            }
                                                                                                            int i270 = dp73 - dp14;
                                                                                                            if ((((!this.isChat || messageObject33.isRepostPreview) && !this.isThreadPost && !messageObject33.isOutOwner()) || messageObject33.forceAvatar) && messageObject33.needDrawAvatar() && groupedMessagePosition22.edge) {
                                                                                                                i270 -= AndroidUtilities.dp(48.0f);
                                                                                                            }
                                                                                                            additionalWidthForPosition = i270 + getAdditionalWidthForPosition(groupedMessagePosition22);
                                                                                                            if (!groupedMessagePosition22.edge) {
                                                                                                                additionalWidthForPosition += AndroidUtilities.dp(10.0f);
                                                                                                            }
                                                                                                            i264 += additionalWidthForPosition;
                                                                                                            if (groupedMessagePosition22.minX >= this.currentPosition.minX || (this.currentMessagesGroup.hasSibling && groupedMessagePosition22.minY != groupedMessagePosition22.maxY)) {
                                                                                                                this.captionOffsetX -= additionalWidthForPosition;
                                                                                                            }
                                                                                                            i38 = additionalWidthForPosition;
                                                                                                        }
                                                                                                        i40 = i9;
                                                                                                        int dp732 = ceil16 - AndroidUtilities.dp(9.0f);
                                                                                                        int i2692 = groupedMessagePosition22.flags;
                                                                                                        i47 = i2692 & 2;
                                                                                                        if (i47 != 0) {
                                                                                                            dp14 = AndroidUtilities.dp(8.0f);
                                                                                                            int i2702 = dp732 - dp14;
                                                                                                            if (!this.isChat) {
                                                                                                            }
                                                                                                            i2702 -= AndroidUtilities.dp(48.0f);
                                                                                                            additionalWidthForPosition = i2702 + getAdditionalWidthForPosition(groupedMessagePosition22);
                                                                                                            if (!groupedMessagePosition22.edge) {
                                                                                                            }
                                                                                                            i264 += additionalWidthForPosition;
                                                                                                            if (groupedMessagePosition22.minX >= this.currentPosition.minX) {
                                                                                                            }
                                                                                                            this.captionOffsetX -= additionalWidthForPosition;
                                                                                                            i38 = additionalWidthForPosition;
                                                                                                        }
                                                                                                        if (i47 == 0) {
                                                                                                            dp14 = AndroidUtilities.dp(11.0f);
                                                                                                            int i27022 = dp732 - dp14;
                                                                                                            if (!this.isChat) {
                                                                                                            }
                                                                                                            i27022 -= AndroidUtilities.dp(48.0f);
                                                                                                            additionalWidthForPosition = i27022 + getAdditionalWidthForPosition(groupedMessagePosition22);
                                                                                                            if (!groupedMessagePosition22.edge) {
                                                                                                            }
                                                                                                            i264 += additionalWidthForPosition;
                                                                                                            if (groupedMessagePosition22.minX >= this.currentPosition.minX) {
                                                                                                            }
                                                                                                            this.captionOffsetX -= additionalWidthForPosition;
                                                                                                            i38 = additionalWidthForPosition;
                                                                                                        }
                                                                                                        if (i47 == 0) {
                                                                                                        }
                                                                                                        int i270222 = dp732 - dp14;
                                                                                                        if (!this.isChat) {
                                                                                                        }
                                                                                                        i270222 -= AndroidUtilities.dp(48.0f);
                                                                                                        additionalWidthForPosition = i270222 + getAdditionalWidthForPosition(groupedMessagePosition22);
                                                                                                        if (!groupedMessagePosition22.edge) {
                                                                                                        }
                                                                                                        i264 += additionalWidthForPosition;
                                                                                                        if (groupedMessagePosition22.minX >= this.currentPosition.minX) {
                                                                                                        }
                                                                                                        this.captionOffsetX -= additionalWidthForPosition;
                                                                                                        i38 = additionalWidthForPosition;
                                                                                                    }
                                                                                                    if (z102 && (charSequence3 = messageObject33.caption) != null) {
                                                                                                        if (this.currentCaption != null) {
                                                                                                            this.currentCaption = null;
                                                                                                            i41 = 1;
                                                                                                            z102 = false;
                                                                                                            i265 += i41;
                                                                                                            messageObject23 = messageObject32;
                                                                                                            i9 = i40;
                                                                                                            z103 = true;
                                                                                                            z104 = false;
                                                                                                        } else {
                                                                                                            this.currentCaption = charSequence3;
                                                                                                        }
                                                                                                    }
                                                                                                    i41 = 1;
                                                                                                    i265 += i41;
                                                                                                    messageObject23 = messageObject32;
                                                                                                    i9 = i40;
                                                                                                    z103 = true;
                                                                                                    z104 = false;
                                                                                                }
                                                                                                i39 = i264;
                                                                                                z34 = z103;
                                                                                                z33 = z104;
                                                                                            } else {
                                                                                                i39 = dp72;
                                                                                                z34 = z32;
                                                                                                z33 = z31;
                                                                                            }
                                                                                            i48 = i39;
                                                                                            i10 = round;
                                                                                            z35 = false;
                                                                                            r12 = z34;
                                                                                            r14 = z33;
                                                                                        } else {
                                                                                            this.currentCaption = messageObject23.caption;
                                                                                            int maxMessageTextWidth2 = this.currentMessageObject.getMaxMessageTextWidth();
                                                                                            if (!messageObject.needDrawBluredPreview()) {
                                                                                                if (this.currentCaption == null) {
                                                                                                    ReactionsLayoutInBubble reactionsLayoutInBubble30 = this.reactionsLayoutInBubble;
                                                                                                    if (!reactionsLayoutInBubble30.isEmpty) {
                                                                                                    }
                                                                                                }
                                                                                                if (i9 < maxMessageTextWidth2) {
                                                                                                    z38 = true;
                                                                                                    int dp74 = AndroidUtilities.dp(8.0f) + i9;
                                                                                                    this.backgroundWidth = dp74;
                                                                                                    if (!this.mediaBackground) {
                                                                                                        this.backgroundWidth = dp74 + AndroidUtilities.dp(9.0f);
                                                                                                    }
                                                                                                    z35 = z38;
                                                                                                    i38 = i9;
                                                                                                    i10 = dp69;
                                                                                                    i48 = maxMessageTextWidth2;
                                                                                                    r12 = z75;
                                                                                                    r14 = z73;
                                                                                                }
                                                                                            }
                                                                                            maxMessageTextWidth2 = i9 - AndroidUtilities.dp(10.0f);
                                                                                            z38 = false;
                                                                                            int dp742 = AndroidUtilities.dp(8.0f) + i9;
                                                                                            this.backgroundWidth = dp742;
                                                                                            if (!this.mediaBackground) {
                                                                                            }
                                                                                            z35 = z38;
                                                                                            i38 = i9;
                                                                                            i10 = dp69;
                                                                                            i48 = maxMessageTextWidth2;
                                                                                            r12 = z75;
                                                                                            r14 = z73;
                                                                                        }
                                                                                        if (this.currentCaption != null) {
                                                                                            try {
                                                                                                this.captionFullWidth = i48;
                                                                                                i48 -= getExtraTextX() * 2;
                                                                                                MessageObject.TextLayoutBlocks textLayoutBlocks13 = new MessageObject.TextLayoutBlocks(getPrimaryMessageObject(), this.currentCaption, Theme.chat_msgTextPaint, i48);
                                                                                                this.captionLayout = textLayoutBlocks13;
                                                                                                textLayoutBlocks13.bounceFrom(this.prevCaptionLayout);
                                                                                                if (z35) {
                                                                                                    int i271 = this.captionLayout.textWidth;
                                                                                                    this.captionWidth = i271;
                                                                                                    if (i271 > i48) {
                                                                                                        this.captionWidth = i48;
                                                                                                    }
                                                                                                } else {
                                                                                                    this.captionWidth = i48;
                                                                                                }
                                                                                                int textHeight4 = this.captionLayout.textHeight();
                                                                                                this.captionHeight = textHeight4;
                                                                                                this.addedCaptionHeight = textHeight4 + AndroidUtilities.dp(9.0f);
                                                                                                if (!this.captionAbove) {
                                                                                                    MessageObject.TextLayoutBlocks textLayoutBlocks14 = this.captionLayout;
                                                                                                    if (!textLayoutBlocks14.hasCodeAtBottom && !textLayoutBlocks14.hasQuoteAtBottom) {
                                                                                                    }
                                                                                                    this.captionHeight += AndroidUtilities.dp(14.0f);
                                                                                                    this.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                                                                }
                                                                                                MessageObject.GroupedMessagePosition groupedMessagePosition24 = this.currentPosition;
                                                                                                if (groupedMessagePosition24 != null && (groupedMessagePosition24.flags & captionFlag()) == 0) {
                                                                                                    this.captionLayout = null;
                                                                                                }
                                                                                                i54 = this.addedCaptionHeight;
                                                                                                try {
                                                                                                    max3 = Math.max(this.captionWidth, i9 - AndroidUtilities.dp(10.0f));
                                                                                                    reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
                                                                                                } catch (Exception e20) {
                                                                                                    e = e20;
                                                                                                    FileLog.e(e);
                                                                                                    c3 = 0;
                                                                                                    layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                                                    if (this.currentPosition == null) {
                                                                                                    }
                                                                                                    i55 = this.highlightCaptionToSetStart;
                                                                                                    if (i55 >= 0) {
                                                                                                    }
                                                                                                    this.highlightCaptionToSetEnd = -1;
                                                                                                    this.highlightCaptionToSetStart = -1;
                                                                                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                                                                                    }
                                                                                                    i11 = i54;
                                                                                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                                    if (this.currentMessagesGroup != null) {
                                                                                                    }
                                                                                                    if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                                    }
                                                                                                    if (z9) {
                                                                                                    }
                                                                                                    obj = null;
                                                                                                    Locale locale3 = Locale.US;
                                                                                                    Integer valueOf2 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                    Integer valueOf3 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                    Object[] objArr = new Object[2];
                                                                                                    objArr[r14] = valueOf2;
                                                                                                    objArr[r12] = valueOf3;
                                                                                                    String format8 = String.format(locale3, "%d_%d", objArr);
                                                                                                    this.currentPhotoFilterThumb = format8;
                                                                                                    this.currentPhotoFilter = format8;
                                                                                                    arrayList2 = messageObject23.photoThumbs;
                                                                                                    if (arrayList2 != null) {
                                                                                                    }
                                                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                                                    }
                                                                                                    int i272 = messageObject23.type;
                                                                                                    if (i272 == 3) {
                                                                                                    }
                                                                                                    tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                                                    }
                                                                                                    i57 = -1;
                                                                                                    tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                    }
                                                                                                    messageObject12 = this.currentMessageObject;
                                                                                                    if (messageObject12.sendPreviewEntry != null) {
                                                                                                    }
                                                                                                    f2 = 1.0f;
                                                                                                    r15 = bitmap2;
                                                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    if (this.photoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    setMessageObjectInternal(messageObject);
                                                                                                    if (this.drawForwardedName) {
                                                                                                    }
                                                                                                    if (this.drawNameLayout) {
                                                                                                    }
                                                                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                    }
                                                                                                    groupedMessagePosition6 = this.currentPosition;
                                                                                                    if (groupedMessagePosition6 != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.isDice()) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    i12 = 0;
                                                                                                    if (this.captionLayout != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.type == 19) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (messageObject.isRoundVideo()) {
                                                                                                    }
                                                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                                                    }
                                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                    if (spoilerEffect2 != null) {
                                                                                                    }
                                                                                                    invalidate();
                                                                                                    c2 = c3;
                                                                                                    z21 = z24;
                                                                                                    messageObject3 = messageObject4;
                                                                                                    z20 = true;
                                                                                                    i2 = 4;
                                                                                                    z14 = false;
                                                                                                    r3 = z20;
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (!messageObject.isSponsored()) {
                                                                                                    }
                                                                                                    c5 = c2;
                                                                                                    messageObject19 = this.currentMessageObject;
                                                                                                    if (messageObject19.eventId == 0) {
                                                                                                    }
                                                                                                    i127 = 3;
                                                                                                    this.botButtons.clear();
                                                                                                    if (z77) {
                                                                                                    }
                                                                                                    if (!messageObject3.isRestrictedMessage) {
                                                                                                    }
                                                                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                                                                    z66 = r3;
                                                                                                    if (this.drawCommentButton) {
                                                                                                    }
                                                                                                    if (this.hasFactCheck) {
                                                                                                    }
                                                                                                    z67 = this.drawPinnedBottom;
                                                                                                    if (z67) {
                                                                                                    }
                                                                                                    if (!z67) {
                                                                                                    }
                                                                                                    if (!this.mediaBackground) {
                                                                                                    }
                                                                                                    if (messageObject3.type != 19) {
                                                                                                    }
                                                                                                    if (this.drawPhotoImage) {
                                                                                                    }
                                                                                                    if (this.documentAttachType == 5) {
                                                                                                    }
                                                                                                    calculateUnlockXY();
                                                                                                    if (z21) {
                                                                                                    }
                                                                                                    updateAnimatedEmojis();
                                                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                                    if (stickerSetLinkIcon2 != null) {
                                                                                                    }
                                                                                                    textLayoutBlocks4 = null;
                                                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                                                    r32 = z66;
                                                                                                    r62 = textLayoutBlocks4;
                                                                                                    if (z77) {
                                                                                                    }
                                                                                                    transcribeButton = this.transcribeButton;
                                                                                                    if (transcribeButton != null) {
                                                                                                    }
                                                                                                    updateWaveform();
                                                                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                                    }
                                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                                    }
                                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                                    this.transitionParams.updatePhotoImageX = r32;
                                                                                                    this.highlightCaptionToSetEnd = -1;
                                                                                                    this.highlightCaptionToSetStart = -1;
                                                                                                    updateFlagSecure();
                                                                                                }
                                                                                            } catch (Exception e21) {
                                                                                                e = e21;
                                                                                                i54 = 0;
                                                                                            }
                                                                                            if (!reactionsLayoutInBubble7.isEmpty && !reactionsLayoutInBubble7.isSmall) {
                                                                                                c3 = 0;
                                                                                                layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                                                if (this.currentPosition == null && this.hasFactCheck) {
                                                                                                    i54 += AndroidUtilities.dp(12.0f) + layoutFactCheck;
                                                                                                }
                                                                                                i55 = this.highlightCaptionToSetStart;
                                                                                                if (i55 >= 0 && (textLayoutBlocks = this.captionLayout) != null) {
                                                                                                    highlight(i55, this.highlightCaptionToSetEnd, textLayoutBlocks.textLayoutBlocks);
                                                                                                }
                                                                                                this.highlightCaptionToSetEnd = -1;
                                                                                                this.highlightCaptionToSetStart = -1;
                                                                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                                                                    boolean z105 = this.backgroundWidth - AndroidUtilities.dp(24.0f) > i48;
                                                                                                    int max15 = Math.max(this.backgroundWidth - AndroidUtilities.dp(36.0f), i48);
                                                                                                    this.reactionsLayoutInBubble.measure(max15, 3);
                                                                                                    ReactionsLayoutInBubble reactionsLayoutInBubble31 = this.reactionsLayoutInBubble;
                                                                                                    if (!reactionsLayoutInBubble31.isEmpty) {
                                                                                                        if (this.isRoundVideo) {
                                                                                                            reactionsLayoutInBubble31.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
                                                                                                        } else if (shouldDrawTimeOnMedia()) {
                                                                                                            this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f;
                                                                                                        }
                                                                                                        int i273 = this.reactionsLayoutInBubble.height;
                                                                                                        if (this.captionLayout == null) {
                                                                                                            dp15 = i273 + AndroidUtilities.dp(12.0f) + AndroidUtilities.dp(4.0f);
                                                                                                        } else {
                                                                                                            dp15 = i273 + AndroidUtilities.dp(12.0f);
                                                                                                            this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(12.0f);
                                                                                                        }
                                                                                                        this.reactionsLayoutInBubble.totalHeight = dp15;
                                                                                                        i54 += dp15;
                                                                                                        if (this.isRoundVideo && (messageObject14 = this.currentMessageObject) != null && messageObject14.isVoiceTranscriptionOpen()) {
                                                                                                            this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(8.0f);
                                                                                                        }
                                                                                                        if (!shouldDrawTimeOnMedia()) {
                                                                                                            int min6 = Math.min(max15, this.reactionsLayoutInBubble.width + dp12 + getExtraTimeX() + AndroidUtilities.dp(2.0f));
                                                                                                            float f37 = this.reactionsLayoutInBubble.lastLineX;
                                                                                                            if (!shouldDrawTimeOnMedia() && min6 - f37 < getExtraTimeX() + dp12) {
                                                                                                                int dp75 = i54 + AndroidUtilities.dp(14.0f);
                                                                                                                this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(14.0f);
                                                                                                                this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(14.0f);
                                                                                                                if (!z105) {
                                                                                                                    int i274 = this.captionWidth;
                                                                                                                    int i275 = this.reactionsLayoutInBubble.width;
                                                                                                                    if (i274 < i275) {
                                                                                                                        this.captionWidth = i275;
                                                                                                                    }
                                                                                                                }
                                                                                                                i11 = dp75;
                                                                                                                c3 = 1;
                                                                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                                                if (this.currentMessagesGroup != null && (((i56 = this.documentAttachType) == 4 || i56 == 2) && i9 < measureText)) {
                                                                                                                    int dp76 = AndroidUtilities.dp(8.0f) + measureText;
                                                                                                                    this.backgroundWidth = dp76;
                                                                                                                    if (!this.mediaBackground) {
                                                                                                                        this.backgroundWidth = dp76 + AndroidUtilities.dp(9.0f);
                                                                                                                    }
                                                                                                                    i9 = measureText;
                                                                                                                }
                                                                                                                if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                                                    i9 = AndroidUtilities.dp(10.0f) + this.captionWidth;
                                                                                                                    int dp77 = AndroidUtilities.dp(8.0f) + i9;
                                                                                                                    this.backgroundWidth = dp77;
                                                                                                                    if (!this.mediaBackground) {
                                                                                                                        this.backgroundWidth = dp77 + AndroidUtilities.dp(9.0f);
                                                                                                                    }
                                                                                                                }
                                                                                                                if (z9 || z77 || z7) {
                                                                                                                    obj = null;
                                                                                                                    Locale locale32 = Locale.US;
                                                                                                                    Integer valueOf22 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                                    Integer valueOf32 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                                    Object[] objArr2 = new Object[2];
                                                                                                                    objArr2[r14] = valueOf22;
                                                                                                                    objArr2[r12] = valueOf32;
                                                                                                                    String format82 = String.format(locale32, "%d_%d", objArr2);
                                                                                                                    this.currentPhotoFilterThumb = format82;
                                                                                                                    this.currentPhotoFilter = format82;
                                                                                                                    arrayList2 = messageObject23.photoThumbs;
                                                                                                                    if ((arrayList2 != null && arrayList2.size() > r12) || (i59 = messageObject23.type) == 3 || i59 == 8 || i59 == 5) {
                                                                                                                        if (messageObject.needDrawBluredPreview()) {
                                                                                                                            this.currentPhotoFilterThumb += "_b";
                                                                                                                        } else {
                                                                                                                            this.photoImage.setColorFilter(getFancyBlurFilter());
                                                                                                                            if (!messageObject.isRoundOnce()) {
                                                                                                                                this.currentPhotoFilter += "_b2";
                                                                                                                            }
                                                                                                                            if (messageObject.isRoundOnce()) {
                                                                                                                                this.currentPhotoFilterThumb += "_b2r";
                                                                                                                            } else {
                                                                                                                                this.currentPhotoFilterThumb += "_b2";
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    Locale locale4 = Locale.US;
                                                                                                                    Integer valueOf4 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                                    Integer valueOf5 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                                    Object[] objArr3 = new Object[2];
                                                                                                                    objArr3[r14] = valueOf4;
                                                                                                                    objArr3[r12] = valueOf5;
                                                                                                                    String format9 = String.format(locale4, "%d_%d", objArr3);
                                                                                                                    if (!messageObject.needDrawBluredPreview() && !format9.equals(this.currentPhotoFilter)) {
                                                                                                                        forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                                                                                                                        if (forObject != 0) {
                                                                                                                            StringBuilder sb3 = new StringBuilder();
                                                                                                                            obj = null;
                                                                                                                            sb3.append(forObject.getKey(this.photoParentObject, null, r14));
                                                                                                                            sb3.append("@");
                                                                                                                            sb3.append(this.currentPhotoFilter);
                                                                                                                            if (ImageLoader.getInstance().isInMemCache(sb3.toString(), r14)) {
                                                                                                                                this.currentPhotoObjectThumb = this.currentPhotoObject;
                                                                                                                                this.currentPhotoFilterThumb = this.currentPhotoFilter;
                                                                                                                                this.currentPhotoFilter = format9;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else if (messageObject.needDrawBluredPreview()) {
                                                                                                                        this.photoImage.setColorFilter(getFancyBlurFilter());
                                                                                                                    }
                                                                                                                    obj = null;
                                                                                                                }
                                                                                                                int i2722 = messageObject23.type;
                                                                                                                boolean z106 = i2722 == 3 || i2722 == 8 || i2722 == 5;
                                                                                                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                                if (tLRPC$PhotoSize3 == null || z106 || tLRPC$PhotoSize3.size != 0) {
                                                                                                                    i57 = -1;
                                                                                                                } else {
                                                                                                                    i57 = -1;
                                                                                                                    tLRPC$PhotoSize3.size = -1;
                                                                                                                }
                                                                                                                tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                                if (tLRPC$PhotoSize4 != null && !z106 && tLRPC$PhotoSize4.size == 0) {
                                                                                                                    tLRPC$PhotoSize4.size = i57;
                                                                                                                }
                                                                                                                if (!this.currentMessageObject.isHiddenSensitive() && SharedConfig.isAutoplayVideo()) {
                                                                                                                    messageObject11 = this.currentMessageObject;
                                                                                                                    if (!messageObject11.isRepostPreview) {
                                                                                                                        if (messageObject11.hasMediaSpoilers()) {
                                                                                                                            MessageObject messageObject34 = this.currentMessageObject;
                                                                                                                            if (!messageObject34.isMediaSpoilersRevealed) {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        if (messageObject23.type == 3 && !messageObject.needDrawBluredPreview()) {
                                                                                                                            MessageObject messageObject35 = this.currentMessageObject;
                                                                                                                            if (messageObject35.mediaExists || messageObject35.attachPathExists || (messageObject.canStreamVideo() && DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject))) {
                                                                                                                                MessageObject.GroupedMessagePosition groupedMessagePosition25 = this.currentPosition;
                                                                                                                                if (groupedMessagePosition25 != null) {
                                                                                                                                    int i276 = groupedMessagePosition25.flags;
                                                                                                                                    if ((i276 & 1) != 0 && (i276 & 2) != 0) {
                                                                                                                                        z36 = true;
                                                                                                                                        this.autoPlayingMedia = z36;
                                                                                                                                        int i277 = !this.currentMessageObject.shouldEncryptPhotoOrVideo() ? 0 : 2;
                                                                                                                                        messageObject12 = this.currentMessageObject;
                                                                                                                                        if (messageObject12.sendPreviewEntry != null) {
                                                                                                                                            messageObject13 = messageObject23;
                                                                                                                                            this.photoImage.setCrossfadeWithOldImage(false);
                                                                                                                                            MediaController.PhotoEntry photoEntry = this.currentMessageObject.sendPreviewEntry;
                                                                                                                                            String str44 = photoEntry.thumbPath;
                                                                                                                                            if (str44 != null) {
                                                                                                                                                this.photoImage.setImage(ImageLocation.getForPath(str44), null, null, null, null, null, this.currentMessageObject.sendPreviewEntry.thumb, 0L, null, messageObject, 0);
                                                                                                                                            } else if (photoEntry.path != null) {
                                                                                                                                                if (photoEntry.isVideo) {
                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForPath("vthumb://" + this.currentMessageObject.sendPreviewEntry.imageId + ":" + this.currentMessageObject.sendPreviewEntry.path), null, null, null, null, null, this.currentMessageObject.sendPreviewEntry.thumb, 0L, null, messageObject, 0);
                                                                                                                                                } else {
                                                                                                                                                    this.photoImage.setOrientation(photoEntry.orientation, photoEntry.invert, true);
                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForPath("thumb://" + this.currentMessageObject.sendPreviewEntry.imageId + ":" + this.currentMessageObject.sendPreviewEntry.path), null, null, null, null, null, this.currentMessageObject.sendPreviewEntry.thumb, 0L, null, messageObject, 0);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            messageObject4 = messageObject13;
                                                                                                                                            z24 = z30;
                                                                                                                                            i8 = 1;
                                                                                                                                            bitmap2 = null;
                                                                                                                                        } else {
                                                                                                                                            if (this.autoPlayingMedia) {
                                                                                                                                                messageObject13 = messageObject23;
                                                                                                                                                this.photoImage.setAllowStartAnimation(true);
                                                                                                                                                this.photoImage.startAnimation();
                                                                                                                                                TLRPC$Document document4 = messageObject.getDocument();
                                                                                                                                                VideoEditedInfo videoEditedInfo = this.currentMessageObject.videoEditedInfo;
                                                                                                                                                if (videoEditedInfo != null && videoEditedInfo.canAutoPlaySourceVideo() && messageObject.getDocument() != null) {
                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForPath(this.currentMessageObject.videoEditedInfo.originalPath), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, document4), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                                                                                                    ImageReceiver imageReceiver4 = this.photoImage;
                                                                                                                                                    VideoEditedInfo videoEditedInfo2 = this.currentMessageObject.videoEditedInfo;
                                                                                                                                                    imageReceiver4.setMediaStartEndTime(videoEditedInfo2.startTime / 1000, videoEditedInfo2.endTime / 1000);
                                                                                                                                                } else if (messageObject.getDocument() != null) {
                                                                                                                                                    if (!z77 && !z7) {
                                                                                                                                                        this.photoImage.setCrossfadeWithOldImage(true);
                                                                                                                                                    }
                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForDocument(document4), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, document4), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                int i278 = messageObject23.type;
                                                                                                                                                if (i278 == 23 || i278 == 24) {
                                                                                                                                                    messageObject13 = messageObject23;
                                                                                                                                                    TL_stories$StoryItem tL_stories$StoryItem8 = messageObject13.messageOwner.media.storyItem;
                                                                                                                                                    if (tL_stories$StoryItem8 != null) {
                                                                                                                                                        if (tL_stories$StoryItem8 instanceof TL_stories$TL_storyItemDeleted) {
                                                                                                                                                            this.photoImage.setImageBitmap(StoriesUtilities.getExpiredStoryDrawable());
                                                                                                                                                        } else {
                                                                                                                                                            StoriesUtilities.setImage(this.photoImage, tL_stories$StoryItem8);
                                                                                                                                                        }
                                                                                                                                                    } else {
                                                                                                                                                        this.photoImage.clearImage();
                                                                                                                                                    }
                                                                                                                                                } else if (i278 == 20) {
                                                                                                                                                    messageObject13 = messageObject23;
                                                                                                                                                    this.photoImage.setImage(null, null, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, i277);
                                                                                                                                                } else if (i278 != r12) {
                                                                                                                                                    if (i278 == 8 || i278 == 5) {
                                                                                                                                                        messageObject13 = messageObject23;
                                                                                                                                                        String attachFileName2 = FileLoader.getAttachFileName(messageObject.getDocument());
                                                                                                                                                        if (messageObject13.attachPathExists) {
                                                                                                                                                            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                                                                                                                                                            c4 = 1;
                                                                                                                                                        } else {
                                                                                                                                                            c4 = !messageObject13.mediaExists ? (char) 0 : (char) 2;
                                                                                                                                                        }
                                                                                                                                                        TLRPC$Document document5 = messageObject.getDocument();
                                                                                                                                                        if (MessageObject.isGifDocument(document5, messageObject.hasValidGroupId())) {
                                                                                                                                                            i58 = 5;
                                                                                                                                                        } else {
                                                                                                                                                            i58 = 5;
                                                                                                                                                            if (messageObject13.type != 5) {
                                                                                                                                                                z37 = false;
                                                                                                                                                                if (messageObject.isHiddenSensitive()) {
                                                                                                                                                                    z37 = false;
                                                                                                                                                                }
                                                                                                                                                                documentVideoThumb = MessageObject.getDocumentVideoThumb(document5);
                                                                                                                                                                if (((MessageObject.isGifDocument(document5, messageObject.hasValidGroupId()) && messageObject13.videoEditedInfo == null) || (!messageObject.isSending() && !messageObject.isEditing())) && (c4 != 0 || FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName2) || z37)) {
                                                                                                                                                                    if (c4 != 1 && !messageObject.needDrawBluredPreview() && (c4 != 0 || (messageObject.canStreamVideo() && z37))) {
                                                                                                                                                                        this.autoPlayingMedia = true;
                                                                                                                                                                        if (!z77) {
                                                                                                                                                                            this.photoImage.setCrossfadeWithOldImage(true);
                                                                                                                                                                            this.photoImage.setCrossfadeDuration(NotificationCenter.playerDidStartPlaying);
                                                                                                                                                                        }
                                                                                                                                                                        if (c4 == 0 && documentVideoThumb != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                                                                                                            ImageReceiver imageReceiver5 = this.photoImage;
                                                                                                                                                                            ImageLocation forDocument3 = ImageLocation.getForDocument(document5);
                                                                                                                                                                            ImageLocation forDocument4 = ImageLocation.getForDocument(documentVideoThumb, this.documentAttach);
                                                                                                                                                                            tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                                                                                                                            if (tLRPC$PhotoSize5 == null) {
                                                                                                                                                                                tLRPC$PhotoSize5 = this.currentPhotoObjectThumb;
                                                                                                                                                                            }
                                                                                                                                                                            imageReceiver5.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forDocument4, null, ImageLocation.getForDocument(tLRPC$PhotoSize5, this.documentAttach), this.currentPhotoObject != null ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, i277);
                                                                                                                                                                        } else if (this.isRoundVideo && !z77 && this.photoImage.hasStaticThumb()) {
                                                                                                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, null, null, this.photoImage.getStaticThumb(), document5.size, null, messageObject, messageObject.isRoundOnce() ? 0 : i277);
                                                                                                                                                                        } else {
                                                                                                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, i277);
                                                                                                                                                                        }
                                                                                                                                                                    } else if (c4 == 1) {
                                                                                                                                                                        this.photoImage.setImage(ImageLocation.getForPath(!messageObject.isSendError() ? messageObject13.messageOwner.attachPath : null), null, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, i277);
                                                                                                                                                                    } else if (documentVideoThumb != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                                                                                                        ImageReceiver imageReceiver6 = this.photoImage;
                                                                                                                                                                        ImageLocation forDocument5 = ImageLocation.getForDocument(document5);
                                                                                                                                                                        ImageLocation forDocument6 = ImageLocation.getForDocument(documentVideoThumb, this.documentAttach);
                                                                                                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize42 = this.currentPhotoObject;
                                                                                                                                                                        if (tLRPC$PhotoSize42 == null) {
                                                                                                                                                                            tLRPC$PhotoSize42 = this.currentPhotoObjectThumb;
                                                                                                                                                                        }
                                                                                                                                                                        imageReceiver6.setImage(forDocument5, null, forDocument6, null, ImageLocation.getForDocument(tLRPC$PhotoSize42, this.documentAttach), this.currentPhotoObject == null ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, i277);
                                                                                                                                                                    } else {
                                                                                                                                                                        this.photoImage.setImage(ImageLocation.getForDocument(document5), null, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, !messageObject.isRoundOnce() ? 0 : i277);
                                                                                                                                                                    }
                                                                                                                                                                } else if (messageObject13.videoEditedInfo != null && messageObject13.type == i58 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForPath(messageObject13.videoEditedInfo.originalPath), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                                                                                                    ImageReceiver imageReceiver7 = this.photoImage;
                                                                                                                                                                    VideoEditedInfo videoEditedInfo3 = this.currentMessageObject.videoEditedInfo;
                                                                                                                                                                    imageReceiver7.setMediaStartEndTime(videoEditedInfo3.startTime / 1000, videoEditedInfo3.endTime / 1000);
                                                                                                                                                                } else {
                                                                                                                                                                    if (!z77 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                                                                                                        this.photoImage.setCrossfadeWithOldImage(true);
                                                                                                                                                                        this.photoImage.setCrossfadeDuration(NotificationCenter.playerDidStartPlaying);
                                                                                                                                                                    }
                                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, i277);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        z37 = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                                                                                                        if (messageObject.isHiddenSensitive()) {
                                                                                                                                                        }
                                                                                                                                                        documentVideoThumb = MessageObject.getDocumentVideoThumb(document5);
                                                                                                                                                        if (MessageObject.isGifDocument(document5, messageObject.hasValidGroupId())) {
                                                                                                                                                            if (c4 != 1) {
                                                                                                                                                                this.autoPlayingMedia = true;
                                                                                                                                                                if (!z77) {
                                                                                                                                                                }
                                                                                                                                                                if (c4 == 0) {
                                                                                                                                                                    ImageReceiver imageReceiver52 = this.photoImage;
                                                                                                                                                                    ImageLocation forDocument32 = ImageLocation.getForDocument(document5);
                                                                                                                                                                    ImageLocation forDocument42 = ImageLocation.getForDocument(documentVideoThumb, this.documentAttach);
                                                                                                                                                                    tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                                                                                                                    if (tLRPC$PhotoSize5 == null) {
                                                                                                                                                                    }
                                                                                                                                                                    imageReceiver52.setImage(forDocument32, ImageLoader.AUTOPLAY_FILTER, forDocument42, null, ImageLocation.getForDocument(tLRPC$PhotoSize5, this.documentAttach), this.currentPhotoObject != null ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, i277);
                                                                                                                                                                }
                                                                                                                                                                if (this.isRoundVideo) {
                                                                                                                                                                    this.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, null, null, this.photoImage.getStaticThumb(), document5.size, null, messageObject, messageObject.isRoundOnce() ? 0 : i277);
                                                                                                                                                                }
                                                                                                                                                                this.photoImage.setImage(ImageLocation.getForDocument(document5), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, document5.size, null, messageObject, i277);
                                                                                                                                                            }
                                                                                                                                                            if (c4 == 1) {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        if (c4 != 1) {
                                                                                                                                                        }
                                                                                                                                                        if (c4 == 1) {
                                                                                                                                                        }
                                                                                                                                                    } else if (messageObject23.videoEditedInfo != null && i278 == 5 && !messageObject12.needDrawBluredPreview()) {
                                                                                                                                                        messageObject13 = messageObject23;
                                                                                                                                                        this.photoImage.setImage(ImageLocation.getForPath(messageObject13.videoEditedInfo.originalPath), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, i277);
                                                                                                                                                        ImageReceiver imageReceiver8 = this.photoImage;
                                                                                                                                                        VideoEditedInfo videoEditedInfo4 = this.currentMessageObject.videoEditedInfo;
                                                                                                                                                        imageReceiver8.setMediaStartEndTime(videoEditedInfo4.startTime / 1000, videoEditedInfo4.endTime / 1000);
                                                                                                                                                    } else {
                                                                                                                                                        if (!z77 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                                                                                            this.photoImage.setCrossfadeWithOldImage(r12);
                                                                                                                                                            this.photoImage.setCrossfadeDuration(NotificationCenter.playerDidStartPlaying);
                                                                                                                                                        }
                                                                                                                                                        messageObject13 = messageObject23;
                                                                                                                                                        this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, i277);
                                                                                                                                                    }
                                                                                                                                                    messageObject4 = messageObject13;
                                                                                                                                                    z24 = z30;
                                                                                                                                                    i8 = 1;
                                                                                                                                                    bitmap2 = null;
                                                                                                                                                } else {
                                                                                                                                                    messageObject13 = messageObject23;
                                                                                                                                                    if (messageObject13.useCustomPhoto) {
                                                                                                                                                        this.photoImage.setImageBitmap(getResources().getDrawable(R.drawable.theme_preview_image));
                                                                                                                                                    } else {
                                                                                                                                                        TLRPC$PhotoSize tLRPC$PhotoSize43 = this.currentPhotoObject;
                                                                                                                                                        if (tLRPC$PhotoSize43 != null) {
                                                                                                                                                            String attachFileName3 = FileLoader.getAttachFileName(tLRPC$PhotoSize43);
                                                                                                                                                            if (messageObject13.mediaExists) {
                                                                                                                                                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                                                                                                                                                            } else if ((this.currentMessageObject.loadingCancelled || !DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject)) && !FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName3)) {
                                                                                                                                                                this.photoNotSet = true;
                                                                                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize44 = this.currentPhotoObjectThumb;
                                                                                                                                                                if (tLRPC$PhotoSize44 != null || this.currentPhotoObjectThumbStripped != null) {
                                                                                                                                                                    this.photoImage.setImage(null, null, ImageLocation.getForObject(tLRPC$PhotoSize44, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, i277);
                                                                                                                                                                } else {
                                                                                                                                                                    this.photoImage.setImageBitmap((Drawable) null);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.currentPhotoObject.size, null, this.currentMessageObject, i277);
                                                                                                                                                        } else {
                                                                                                                                                            this.photoImage.setImageBitmap((Drawable) null);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            messageObject4 = messageObject13;
                                                                                                                                            z24 = z30;
                                                                                                                                            i8 = 1;
                                                                                                                                            bitmap2 = null;
                                                                                                                                        }
                                                                                                                                        f2 = 1.0f;
                                                                                                                                        r15 = bitmap2;
                                                                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                                        }
                                                                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                                                                            this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(this.photoImage.getBitmap(), this.currentMessageObject.isRoundVideo()));
                                                                                                                                            this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
                                                                                                                                        }
                                                                                                                                        setMessageObjectInternal(messageObject);
                                                                                                                                        if (this.drawForwardedName) {
                                                                                                                                            if (messageObject4.type != 5) {
                                                                                                                                            }
                                                                                                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                                            }
                                                                                                                                            groupedMessagePosition6 = this.currentPosition;
                                                                                                                                            if (groupedMessagePosition6 != null) {
                                                                                                                                                this.totalHeight -= AndroidUtilities.dp(3.0f);
                                                                                                                                            }
                                                                                                                                            if (this.currentMessageObject.isDice()) {
                                                                                                                                            }
                                                                                                                                            if (this.currentPosition != null) {
                                                                                                                                                i9 += getAdditionalWidthForPosition(this.currentPosition);
                                                                                                                                                if ((this.currentPosition.flags & 4) == 0) {
                                                                                                                                                }
                                                                                                                                                if ((this.currentPosition.flags & 8) == 0) {
                                                                                                                                                }
                                                                                                                                                if (this.captionLayout != null) {
                                                                                                                                                    i12 = this.captionLayout.textHeight() + AndroidUtilities.dp(8.0f);
                                                                                                                                                }
                                                                                                                                                if (this.currentMessageObject.type == 19) {
                                                                                                                                                }
                                                                                                                                                if (this.currentPosition != null) {
                                                                                                                                                }
                                                                                                                                                if (messageObject.isRoundVideo()) {
                                                                                                                                                    this.photoImage.setImageCoords(0.0f, AndroidUtilities.dp(13.0f), AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                                                                                                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                                                                                                        if (this.mediaSpoilerEffect2 == null) {
                                                                                                                                                        }
                                                                                                                                                        invalidate();
                                                                                                                                                        c2 = c3;
                                                                                                                                                        z21 = z24;
                                                                                                                                                        messageObject3 = messageObject4;
                                                                                                                                                        z20 = true;
                                                                                                                                                        i2 = 4;
                                                                                                                                                        z14 = false;
                                                                                                                                                    }
                                                                                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                                                    if (spoilerEffect2 != null) {
                                                                                                                                                    }
                                                                                                                                                    invalidate();
                                                                                                                                                    c2 = c3;
                                                                                                                                                    z21 = z24;
                                                                                                                                                    messageObject3 = messageObject4;
                                                                                                                                                    z20 = true;
                                                                                                                                                    i2 = 4;
                                                                                                                                                    z14 = false;
                                                                                                                                                }
                                                                                                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                                                if (messageObject.hasMediaSpoilers()) {
                                                                                                                                                }
                                                                                                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                                                if (spoilerEffect2 != null) {
                                                                                                                                                }
                                                                                                                                                invalidate();
                                                                                                                                                c2 = c3;
                                                                                                                                                z21 = z24;
                                                                                                                                                messageObject3 = messageObject4;
                                                                                                                                                z20 = true;
                                                                                                                                                i2 = 4;
                                                                                                                                                z14 = false;
                                                                                                                                            }
                                                                                                                                            if (this.currentPosition != null) {
                                                                                                                                                i13 = this.currentPosition.flags;
                                                                                                                                                if ((i13 & 4) == 0) {
                                                                                                                                                    this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            i12 = 0;
                                                                                                                                            if (this.captionLayout != null) {
                                                                                                                                            }
                                                                                                                                            if (this.currentMessageObject.type == 19) {
                                                                                                                                            }
                                                                                                                                            if (this.currentPosition != null) {
                                                                                                                                            }
                                                                                                                                            if (messageObject.isRoundVideo()) {
                                                                                                                                            }
                                                                                                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                                            if (messageObject.hasMediaSpoilers()) {
                                                                                                                                            }
                                                                                                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                                            if (spoilerEffect2 != null) {
                                                                                                                                            }
                                                                                                                                            invalidate();
                                                                                                                                            c2 = c3;
                                                                                                                                            z21 = z24;
                                                                                                                                            messageObject3 = messageObject4;
                                                                                                                                            z20 = true;
                                                                                                                                            i2 = 4;
                                                                                                                                            z14 = false;
                                                                                                                                        }
                                                                                                                                        if (this.drawNameLayout) {
                                                                                                                                            this.namesOffset += AndroidUtilities.dp(7.0f);
                                                                                                                                        }
                                                                                                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                                        }
                                                                                                                                        groupedMessagePosition6 = this.currentPosition;
                                                                                                                                        if (groupedMessagePosition6 != null) {
                                                                                                                                        }
                                                                                                                                        if (this.currentMessageObject.isDice()) {
                                                                                                                                        }
                                                                                                                                        if (this.currentPosition != null) {
                                                                                                                                        }
                                                                                                                                        if (this.currentPosition != null) {
                                                                                                                                        }
                                                                                                                                        i12 = 0;
                                                                                                                                        if (this.captionLayout != null) {
                                                                                                                                        }
                                                                                                                                        if (this.currentMessageObject.type == 19) {
                                                                                                                                        }
                                                                                                                                        if (this.currentPosition != null) {
                                                                                                                                        }
                                                                                                                                        if (messageObject.isRoundVideo()) {
                                                                                                                                        }
                                                                                                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                                        if (messageObject.hasMediaSpoilers()) {
                                                                                                                                        }
                                                                                                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                                        if (spoilerEffect2 != null) {
                                                                                                                                        }
                                                                                                                                        invalidate();
                                                                                                                                        c2 = c3;
                                                                                                                                        z21 = z24;
                                                                                                                                        messageObject3 = messageObject4;
                                                                                                                                        z20 = true;
                                                                                                                                        i2 = 4;
                                                                                                                                        z14 = false;
                                                                                                                                    }
                                                                                                                                    z36 = false;
                                                                                                                                    this.autoPlayingMedia = z36;
                                                                                                                                    if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                                                    }
                                                                                                                                    messageObject12 = this.currentMessageObject;
                                                                                                                                    if (messageObject12.sendPreviewEntry != null) {
                                                                                                                                    }
                                                                                                                                    f2 = 1.0f;
                                                                                                                                    r15 = bitmap2;
                                                                                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                                    }
                                                                                                                                    if (this.photoImage.getBitmap() != null) {
                                                                                                                                    }
                                                                                                                                    setMessageObjectInternal(messageObject);
                                                                                                                                    if (this.drawForwardedName) {
                                                                                                                                    }
                                                                                                                                    if (this.drawNameLayout) {
                                                                                                                                    }
                                                                                                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                                    }
                                                                                                                                    groupedMessagePosition6 = this.currentPosition;
                                                                                                                                    if (groupedMessagePosition6 != null) {
                                                                                                                                    }
                                                                                                                                    if (this.currentMessageObject.isDice()) {
                                                                                                                                    }
                                                                                                                                    if (this.currentPosition != null) {
                                                                                                                                    }
                                                                                                                                    if (this.currentPosition != null) {
                                                                                                                                    }
                                                                                                                                    i12 = 0;
                                                                                                                                    if (this.captionLayout != null) {
                                                                                                                                    }
                                                                                                                                    if (this.currentMessageObject.type == 19) {
                                                                                                                                    }
                                                                                                                                    if (this.currentPosition != null) {
                                                                                                                                    }
                                                                                                                                    if (messageObject.isRoundVideo()) {
                                                                                                                                    }
                                                                                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                                                                                    }
                                                                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                                    if (spoilerEffect2 != null) {
                                                                                                                                    }
                                                                                                                                    invalidate();
                                                                                                                                    c2 = c3;
                                                                                                                                    z21 = z24;
                                                                                                                                    messageObject3 = messageObject4;
                                                                                                                                    z20 = true;
                                                                                                                                    i2 = 4;
                                                                                                                                    z14 = false;
                                                                                                                                } else {
                                                                                                                                    this.autoPlayingMedia = r12;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                                        }
                                                                                                                        messageObject12 = this.currentMessageObject;
                                                                                                                        if (messageObject12.sendPreviewEntry != null) {
                                                                                                                        }
                                                                                                                        f2 = 1.0f;
                                                                                                                        r15 = bitmap2;
                                                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                        }
                                                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                                                        }
                                                                                                                        setMessageObjectInternal(messageObject);
                                                                                                                        if (this.drawForwardedName) {
                                                                                                                        }
                                                                                                                        if (this.drawNameLayout) {
                                                                                                                        }
                                                                                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                        }
                                                                                                                        groupedMessagePosition6 = this.currentPosition;
                                                                                                                        if (groupedMessagePosition6 != null) {
                                                                                                                        }
                                                                                                                        if (this.currentMessageObject.isDice()) {
                                                                                                                        }
                                                                                                                        if (this.currentPosition != null) {
                                                                                                                        }
                                                                                                                        if (this.currentPosition != null) {
                                                                                                                        }
                                                                                                                        i12 = 0;
                                                                                                                        if (this.captionLayout != null) {
                                                                                                                        }
                                                                                                                        if (this.currentMessageObject.type == 19) {
                                                                                                                        }
                                                                                                                        if (this.currentPosition != null) {
                                                                                                                        }
                                                                                                                        if (messageObject.isRoundVideo()) {
                                                                                                                        }
                                                                                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                        if (messageObject.hasMediaSpoilers()) {
                                                                                                                        }
                                                                                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                        if (spoilerEffect2 != null) {
                                                                                                                        }
                                                                                                                        invalidate();
                                                                                                                        c2 = c3;
                                                                                                                        z21 = z24;
                                                                                                                        messageObject3 = messageObject4;
                                                                                                                        z20 = true;
                                                                                                                        i2 = 4;
                                                                                                                        z14 = false;
                                                                                                                    }
                                                                                                                }
                                                                                                                if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                                }
                                                                                                                messageObject12 = this.currentMessageObject;
                                                                                                                if (messageObject12.sendPreviewEntry != null) {
                                                                                                                }
                                                                                                                f2 = 1.0f;
                                                                                                                r15 = bitmap2;
                                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                setMessageObjectInternal(messageObject);
                                                                                                                if (this.drawForwardedName) {
                                                                                                                }
                                                                                                                if (this.drawNameLayout) {
                                                                                                                }
                                                                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                }
                                                                                                                groupedMessagePosition6 = this.currentPosition;
                                                                                                                if (groupedMessagePosition6 != null) {
                                                                                                                }
                                                                                                                if (this.currentMessageObject.isDice()) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                i12 = 0;
                                                                                                                if (this.captionLayout != null) {
                                                                                                                }
                                                                                                                if (this.currentMessageObject.type == 19) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                if (messageObject.isRoundVideo()) {
                                                                                                                }
                                                                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                if (messageObject.hasMediaSpoilers()) {
                                                                                                                }
                                                                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                if (spoilerEffect2 != null) {
                                                                                                                }
                                                                                                                invalidate();
                                                                                                                c2 = c3;
                                                                                                                z21 = z24;
                                                                                                                messageObject3 = messageObject4;
                                                                                                                z20 = true;
                                                                                                                i2 = 4;
                                                                                                                z14 = false;
                                                                                                            } else if (!z105) {
                                                                                                                ReactionsLayoutInBubble reactionsLayoutInBubble32 = this.reactionsLayoutInBubble;
                                                                                                                int i279 = reactionsLayoutInBubble32.lastLineX + dp12;
                                                                                                                if (i279 > this.captionWidth) {
                                                                                                                    this.captionWidth = i279;
                                                                                                                }
                                                                                                                int i280 = reactionsLayoutInBubble32.width;
                                                                                                                if (i280 > this.captionWidth) {
                                                                                                                    this.captionWidth = i280;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                i11 = i54;
                                                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                                if (this.currentMessagesGroup != null) {
                                                                                                    int dp762 = AndroidUtilities.dp(8.0f) + measureText;
                                                                                                    this.backgroundWidth = dp762;
                                                                                                    if (!this.mediaBackground) {
                                                                                                    }
                                                                                                    i9 = measureText;
                                                                                                }
                                                                                                if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                                }
                                                                                                if (z9) {
                                                                                                    Locale locale42 = Locale.US;
                                                                                                    Integer valueOf42 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                    Integer valueOf52 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                    Object[] objArr32 = new Object[2];
                                                                                                    objArr32[r14] = valueOf42;
                                                                                                    objArr32[r12] = valueOf52;
                                                                                                    String format92 = String.format(locale42, "%d_%d", objArr32);
                                                                                                    if (!messageObject.needDrawBluredPreview()) {
                                                                                                        forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                                                                                                        if (forObject != 0) {
                                                                                                        }
                                                                                                        obj = null;
                                                                                                        int i27222 = messageObject23.type;
                                                                                                        if (i27222 == 3) {
                                                                                                            tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                            if (tLRPC$PhotoSize3 == null) {
                                                                                                                i57 = -1;
                                                                                                                tLRPC$PhotoSize3.size = -1;
                                                                                                                tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                                if (tLRPC$PhotoSize4 != null) {
                                                                                                                    tLRPC$PhotoSize4.size = i57;
                                                                                                                }
                                                                                                                if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                                    messageObject11 = this.currentMessageObject;
                                                                                                                    if (!messageObject11.isRepostPreview) {
                                                                                                                    }
                                                                                                                }
                                                                                                                if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                                }
                                                                                                                messageObject12 = this.currentMessageObject;
                                                                                                                if (messageObject12.sendPreviewEntry != null) {
                                                                                                                }
                                                                                                                f2 = 1.0f;
                                                                                                                r15 = bitmap2;
                                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                                }
                                                                                                                setMessageObjectInternal(messageObject);
                                                                                                                if (this.drawForwardedName) {
                                                                                                                }
                                                                                                                if (this.drawNameLayout) {
                                                                                                                }
                                                                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                                }
                                                                                                                groupedMessagePosition6 = this.currentPosition;
                                                                                                                if (groupedMessagePosition6 != null) {
                                                                                                                }
                                                                                                                if (this.currentMessageObject.isDice()) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                i12 = 0;
                                                                                                                if (this.captionLayout != null) {
                                                                                                                }
                                                                                                                if (this.currentMessageObject.type == 19) {
                                                                                                                }
                                                                                                                if (this.currentPosition != null) {
                                                                                                                }
                                                                                                                if (messageObject.isRoundVideo()) {
                                                                                                                }
                                                                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                                if (messageObject.hasMediaSpoilers()) {
                                                                                                                }
                                                                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                                if (spoilerEffect2 != null) {
                                                                                                                }
                                                                                                                invalidate();
                                                                                                                c2 = c3;
                                                                                                                z21 = z24;
                                                                                                                messageObject3 = messageObject4;
                                                                                                                z20 = true;
                                                                                                                i2 = 4;
                                                                                                                z14 = false;
                                                                                                            }
                                                                                                            i57 = -1;
                                                                                                            tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                            if (tLRPC$PhotoSize4 != null) {
                                                                                                            }
                                                                                                            if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                            }
                                                                                                            if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                            }
                                                                                                            messageObject12 = this.currentMessageObject;
                                                                                                            if (messageObject12.sendPreviewEntry != null) {
                                                                                                            }
                                                                                                            f2 = 1.0f;
                                                                                                            r15 = bitmap2;
                                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                            }
                                                                                                            if (this.photoImage.getBitmap() != null) {
                                                                                                            }
                                                                                                            setMessageObjectInternal(messageObject);
                                                                                                            if (this.drawForwardedName) {
                                                                                                            }
                                                                                                            if (this.drawNameLayout) {
                                                                                                            }
                                                                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                            }
                                                                                                            groupedMessagePosition6 = this.currentPosition;
                                                                                                            if (groupedMessagePosition6 != null) {
                                                                                                            }
                                                                                                            if (this.currentMessageObject.isDice()) {
                                                                                                            }
                                                                                                            if (this.currentPosition != null) {
                                                                                                            }
                                                                                                            if (this.currentPosition != null) {
                                                                                                            }
                                                                                                            i12 = 0;
                                                                                                            if (this.captionLayout != null) {
                                                                                                            }
                                                                                                            if (this.currentMessageObject.type == 19) {
                                                                                                            }
                                                                                                            if (this.currentPosition != null) {
                                                                                                            }
                                                                                                            if (messageObject.isRoundVideo()) {
                                                                                                            }
                                                                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                            if (messageObject.hasMediaSpoilers()) {
                                                                                                            }
                                                                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                            if (spoilerEffect2 != null) {
                                                                                                            }
                                                                                                            invalidate();
                                                                                                            c2 = c3;
                                                                                                            z21 = z24;
                                                                                                            messageObject3 = messageObject4;
                                                                                                            z20 = true;
                                                                                                            i2 = 4;
                                                                                                            z14 = false;
                                                                                                        }
                                                                                                        tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                        if (tLRPC$PhotoSize3 == null) {
                                                                                                        }
                                                                                                        i57 = -1;
                                                                                                        tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                        if (tLRPC$PhotoSize4 != null) {
                                                                                                        }
                                                                                                        if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                        }
                                                                                                        if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                        }
                                                                                                        messageObject12 = this.currentMessageObject;
                                                                                                        if (messageObject12.sendPreviewEntry != null) {
                                                                                                        }
                                                                                                        f2 = 1.0f;
                                                                                                        r15 = bitmap2;
                                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                        }
                                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                                        }
                                                                                                        setMessageObjectInternal(messageObject);
                                                                                                        if (this.drawForwardedName) {
                                                                                                        }
                                                                                                        if (this.drawNameLayout) {
                                                                                                        }
                                                                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                        }
                                                                                                        groupedMessagePosition6 = this.currentPosition;
                                                                                                        if (groupedMessagePosition6 != null) {
                                                                                                        }
                                                                                                        if (this.currentMessageObject.isDice()) {
                                                                                                        }
                                                                                                        if (this.currentPosition != null) {
                                                                                                        }
                                                                                                        if (this.currentPosition != null) {
                                                                                                        }
                                                                                                        i12 = 0;
                                                                                                        if (this.captionLayout != null) {
                                                                                                        }
                                                                                                        if (this.currentMessageObject.type == 19) {
                                                                                                        }
                                                                                                        if (this.currentPosition != null) {
                                                                                                        }
                                                                                                        if (messageObject.isRoundVideo()) {
                                                                                                        }
                                                                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                        if (messageObject.hasMediaSpoilers()) {
                                                                                                        }
                                                                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                        if (spoilerEffect2 != null) {
                                                                                                        }
                                                                                                        invalidate();
                                                                                                        c2 = c3;
                                                                                                        z21 = z24;
                                                                                                        messageObject3 = messageObject4;
                                                                                                        z20 = true;
                                                                                                        i2 = 4;
                                                                                                        z14 = false;
                                                                                                    }
                                                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                                                    }
                                                                                                    obj = null;
                                                                                                    int i272222 = messageObject23.type;
                                                                                                    if (i272222 == 3) {
                                                                                                    }
                                                                                                    tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                                                    }
                                                                                                    i57 = -1;
                                                                                                    tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                    }
                                                                                                    messageObject12 = this.currentMessageObject;
                                                                                                    if (messageObject12.sendPreviewEntry != null) {
                                                                                                    }
                                                                                                    f2 = 1.0f;
                                                                                                    r15 = bitmap2;
                                                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    if (this.photoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    setMessageObjectInternal(messageObject);
                                                                                                    if (this.drawForwardedName) {
                                                                                                    }
                                                                                                    if (this.drawNameLayout) {
                                                                                                    }
                                                                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                    }
                                                                                                    groupedMessagePosition6 = this.currentPosition;
                                                                                                    if (groupedMessagePosition6 != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.isDice()) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    i12 = 0;
                                                                                                    if (this.captionLayout != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.type == 19) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (messageObject.isRoundVideo()) {
                                                                                                    }
                                                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                                                    }
                                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                    if (spoilerEffect2 != null) {
                                                                                                    }
                                                                                                    invalidate();
                                                                                                    c2 = c3;
                                                                                                    z21 = z24;
                                                                                                    messageObject3 = messageObject4;
                                                                                                    z20 = true;
                                                                                                    i2 = 4;
                                                                                                    z14 = false;
                                                                                                }
                                                                                                obj = null;
                                                                                                Locale locale322 = Locale.US;
                                                                                                Integer valueOf222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                Integer valueOf322 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                Object[] objArr22 = new Object[2];
                                                                                                objArr22[r14] = valueOf222;
                                                                                                objArr22[r12] = valueOf322;
                                                                                                String format822 = String.format(locale322, "%d_%d", objArr22);
                                                                                                this.currentPhotoFilterThumb = format822;
                                                                                                this.currentPhotoFilter = format822;
                                                                                                arrayList2 = messageObject23.photoThumbs;
                                                                                                if (arrayList2 != null) {
                                                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                                                    }
                                                                                                    int i2722222 = messageObject23.type;
                                                                                                    if (i2722222 == 3) {
                                                                                                    }
                                                                                                    tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                                                    }
                                                                                                    i57 = -1;
                                                                                                    tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                    }
                                                                                                    if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                    }
                                                                                                    messageObject12 = this.currentMessageObject;
                                                                                                    if (messageObject12.sendPreviewEntry != null) {
                                                                                                    }
                                                                                                    f2 = 1.0f;
                                                                                                    r15 = bitmap2;
                                                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    if (this.photoImage.getBitmap() != null) {
                                                                                                    }
                                                                                                    setMessageObjectInternal(messageObject);
                                                                                                    if (this.drawForwardedName) {
                                                                                                    }
                                                                                                    if (this.drawNameLayout) {
                                                                                                    }
                                                                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                    }
                                                                                                    groupedMessagePosition6 = this.currentPosition;
                                                                                                    if (groupedMessagePosition6 != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.isDice()) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    i12 = 0;
                                                                                                    if (this.captionLayout != null) {
                                                                                                    }
                                                                                                    if (this.currentMessageObject.type == 19) {
                                                                                                    }
                                                                                                    if (this.currentPosition != null) {
                                                                                                    }
                                                                                                    if (messageObject.isRoundVideo()) {
                                                                                                    }
                                                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                                                    }
                                                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                    if (spoilerEffect2 != null) {
                                                                                                    }
                                                                                                    invalidate();
                                                                                                    c2 = c3;
                                                                                                    z21 = z24;
                                                                                                    messageObject3 = messageObject4;
                                                                                                    z20 = true;
                                                                                                    i2 = 4;
                                                                                                    z14 = false;
                                                                                                }
                                                                                                if (messageObject.needDrawBluredPreview()) {
                                                                                                }
                                                                                                int i27222222 = messageObject23.type;
                                                                                                if (i27222222 == 3) {
                                                                                                }
                                                                                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                if (tLRPC$PhotoSize3 == null) {
                                                                                                }
                                                                                                i57 = -1;
                                                                                                tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                if (tLRPC$PhotoSize4 != null) {
                                                                                                }
                                                                                                if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                }
                                                                                                if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                }
                                                                                                messageObject12 = this.currentMessageObject;
                                                                                                if (messageObject12.sendPreviewEntry != null) {
                                                                                                }
                                                                                                f2 = 1.0f;
                                                                                                r15 = bitmap2;
                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                }
                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                }
                                                                                                setMessageObjectInternal(messageObject);
                                                                                                if (this.drawForwardedName) {
                                                                                                }
                                                                                                if (this.drawNameLayout) {
                                                                                                }
                                                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                }
                                                                                                groupedMessagePosition6 = this.currentPosition;
                                                                                                if (groupedMessagePosition6 != null) {
                                                                                                }
                                                                                                if (this.currentMessageObject.isDice()) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                i12 = 0;
                                                                                                if (this.captionLayout != null) {
                                                                                                }
                                                                                                if (this.currentMessageObject.type == 19) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                if (messageObject.isRoundVideo()) {
                                                                                                }
                                                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                if (messageObject.hasMediaSpoilers()) {
                                                                                                }
                                                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                if (spoilerEffect2 != null) {
                                                                                                }
                                                                                                invalidate();
                                                                                                c2 = c3;
                                                                                                z21 = z24;
                                                                                                messageObject3 = messageObject4;
                                                                                                z20 = true;
                                                                                                i2 = 4;
                                                                                                z14 = false;
                                                                                            }
                                                                                            if (!shouldDrawTimeOnMedia() && (max3 + AndroidUtilities.dp(2.0f)) - this.captionLayout.lastLineWidth < getExtraTimeX() + dp12 && !this.hasFactCheck) {
                                                                                                i54 += AndroidUtilities.dp(14.0f);
                                                                                                this.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                                                                c3 = 1;
                                                                                                layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                                                if (this.currentPosition == null) {
                                                                                                    i54 += AndroidUtilities.dp(12.0f) + layoutFactCheck;
                                                                                                }
                                                                                                i55 = this.highlightCaptionToSetStart;
                                                                                                if (i55 >= 0) {
                                                                                                    highlight(i55, this.highlightCaptionToSetEnd, textLayoutBlocks.textLayoutBlocks);
                                                                                                }
                                                                                                this.highlightCaptionToSetEnd = -1;
                                                                                                this.highlightCaptionToSetStart = -1;
                                                                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                                                                }
                                                                                                i11 = i54;
                                                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                                if (this.currentMessagesGroup != null) {
                                                                                                }
                                                                                                if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                                }
                                                                                                if (z9) {
                                                                                                }
                                                                                                obj = null;
                                                                                                Locale locale3222 = Locale.US;
                                                                                                Integer valueOf2222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                                Integer valueOf3222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                                Object[] objArr222 = new Object[2];
                                                                                                objArr222[r14] = valueOf2222;
                                                                                                objArr222[r12] = valueOf3222;
                                                                                                String format8222 = String.format(locale3222, "%d_%d", objArr222);
                                                                                                this.currentPhotoFilterThumb = format8222;
                                                                                                this.currentPhotoFilter = format8222;
                                                                                                arrayList2 = messageObject23.photoThumbs;
                                                                                                if (arrayList2 != null) {
                                                                                                }
                                                                                                if (messageObject.needDrawBluredPreview()) {
                                                                                                }
                                                                                                int i272222222 = messageObject23.type;
                                                                                                if (i272222222 == 3) {
                                                                                                }
                                                                                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                                if (tLRPC$PhotoSize3 == null) {
                                                                                                }
                                                                                                i57 = -1;
                                                                                                tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                                if (tLRPC$PhotoSize4 != null) {
                                                                                                }
                                                                                                if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                                }
                                                                                                if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                                }
                                                                                                messageObject12 = this.currentMessageObject;
                                                                                                if (messageObject12.sendPreviewEntry != null) {
                                                                                                }
                                                                                                f2 = 1.0f;
                                                                                                r15 = bitmap2;
                                                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                                }
                                                                                                if (this.photoImage.getBitmap() != null) {
                                                                                                }
                                                                                                setMessageObjectInternal(messageObject);
                                                                                                if (this.drawForwardedName) {
                                                                                                }
                                                                                                if (this.drawNameLayout) {
                                                                                                }
                                                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                                }
                                                                                                groupedMessagePosition6 = this.currentPosition;
                                                                                                if (groupedMessagePosition6 != null) {
                                                                                                }
                                                                                                if (this.currentMessageObject.isDice()) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                i12 = 0;
                                                                                                if (this.captionLayout != null) {
                                                                                                }
                                                                                                if (this.currentMessageObject.type == 19) {
                                                                                                }
                                                                                                if (this.currentPosition != null) {
                                                                                                }
                                                                                                if (messageObject.isRoundVideo()) {
                                                                                                }
                                                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                                if (messageObject.hasMediaSpoilers()) {
                                                                                                }
                                                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                                if (spoilerEffect2 != null) {
                                                                                                }
                                                                                                invalidate();
                                                                                                c2 = c3;
                                                                                                z21 = z24;
                                                                                                messageObject3 = messageObject4;
                                                                                                z20 = true;
                                                                                                i2 = 4;
                                                                                                z14 = false;
                                                                                            }
                                                                                            c3 = 0;
                                                                                            layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                                            if (this.currentPosition == null) {
                                                                                            }
                                                                                            i55 = this.highlightCaptionToSetStart;
                                                                                            if (i55 >= 0) {
                                                                                            }
                                                                                            this.highlightCaptionToSetEnd = -1;
                                                                                            this.highlightCaptionToSetStart = -1;
                                                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                                                            }
                                                                                            i11 = i54;
                                                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                            if (this.currentMessagesGroup != null) {
                                                                                            }
                                                                                            if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                            }
                                                                                            if (z9) {
                                                                                            }
                                                                                            obj = null;
                                                                                            Locale locale32222 = Locale.US;
                                                                                            Integer valueOf22222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                            Integer valueOf32222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                            Object[] objArr2222 = new Object[2];
                                                                                            objArr2222[r14] = valueOf22222;
                                                                                            objArr2222[r12] = valueOf32222;
                                                                                            String format82222 = String.format(locale32222, "%d_%d", objArr2222);
                                                                                            this.currentPhotoFilterThumb = format82222;
                                                                                            this.currentPhotoFilter = format82222;
                                                                                            arrayList2 = messageObject23.photoThumbs;
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (messageObject.needDrawBluredPreview()) {
                                                                                            }
                                                                                            int i2722222222 = messageObject23.type;
                                                                                            if (i2722222222 == 3) {
                                                                                            }
                                                                                            tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                            if (tLRPC$PhotoSize3 == null) {
                                                                                            }
                                                                                            i57 = -1;
                                                                                            tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                            if (tLRPC$PhotoSize4 != null) {
                                                                                            }
                                                                                            if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                            }
                                                                                            if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                            }
                                                                                            messageObject12 = this.currentMessageObject;
                                                                                            if (messageObject12.sendPreviewEntry != null) {
                                                                                            }
                                                                                            f2 = 1.0f;
                                                                                            r15 = bitmap2;
                                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                            }
                                                                                            if (this.photoImage.getBitmap() != null) {
                                                                                            }
                                                                                            setMessageObjectInternal(messageObject);
                                                                                            if (this.drawForwardedName) {
                                                                                            }
                                                                                            if (this.drawNameLayout) {
                                                                                            }
                                                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                            }
                                                                                            groupedMessagePosition6 = this.currentPosition;
                                                                                            if (groupedMessagePosition6 != null) {
                                                                                            }
                                                                                            if (this.currentMessageObject.isDice()) {
                                                                                            }
                                                                                            if (this.currentPosition != null) {
                                                                                            }
                                                                                            if (this.currentPosition != null) {
                                                                                            }
                                                                                            i12 = 0;
                                                                                            if (this.captionLayout != null) {
                                                                                            }
                                                                                            if (this.currentMessageObject.type == 19) {
                                                                                            }
                                                                                            if (this.currentPosition != null) {
                                                                                            }
                                                                                            if (messageObject.isRoundVideo()) {
                                                                                            }
                                                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                            if (messageObject.hasMediaSpoilers()) {
                                                                                            }
                                                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                            if (spoilerEffect2 != null) {
                                                                                            }
                                                                                            invalidate();
                                                                                            c2 = c3;
                                                                                            z21 = z24;
                                                                                            messageObject3 = messageObject4;
                                                                                            z20 = true;
                                                                                            i2 = 4;
                                                                                            z14 = false;
                                                                                        }
                                                                                        c3 = 0;
                                                                                        i54 = 0;
                                                                                        layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                                        if (this.currentPosition == null) {
                                                                                        }
                                                                                        i55 = this.highlightCaptionToSetStart;
                                                                                        if (i55 >= 0) {
                                                                                        }
                                                                                        this.highlightCaptionToSetEnd = -1;
                                                                                        this.highlightCaptionToSetStart = -1;
                                                                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                                                                        }
                                                                                        i11 = i54;
                                                                                        measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                                        if (this.currentMessagesGroup != null) {
                                                                                        }
                                                                                        if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                                        }
                                                                                        if (z9) {
                                                                                        }
                                                                                        obj = null;
                                                                                        Locale locale322222 = Locale.US;
                                                                                        Integer valueOf222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                                        Integer valueOf322222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                                        Object[] objArr22222 = new Object[2];
                                                                                        objArr22222[r14] = valueOf222222;
                                                                                        objArr22222[r12] = valueOf322222;
                                                                                        String format822222 = String.format(locale322222, "%d_%d", objArr22222);
                                                                                        this.currentPhotoFilterThumb = format822222;
                                                                                        this.currentPhotoFilter = format822222;
                                                                                        arrayList2 = messageObject23.photoThumbs;
                                                                                        if (arrayList2 != null) {
                                                                                        }
                                                                                        if (messageObject.needDrawBluredPreview()) {
                                                                                        }
                                                                                        int i27222222222 = messageObject23.type;
                                                                                        if (i27222222222 == 3) {
                                                                                        }
                                                                                        tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                                        if (tLRPC$PhotoSize3 == null) {
                                                                                        }
                                                                                        i57 = -1;
                                                                                        tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                                        if (tLRPC$PhotoSize4 != null) {
                                                                                        }
                                                                                        if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                                        }
                                                                                        if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                                        }
                                                                                        messageObject12 = this.currentMessageObject;
                                                                                        if (messageObject12.sendPreviewEntry != null) {
                                                                                        }
                                                                                        f2 = 1.0f;
                                                                                        r15 = bitmap2;
                                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                                        }
                                                                                        if (this.photoImage.getBitmap() != null) {
                                                                                        }
                                                                                        setMessageObjectInternal(messageObject);
                                                                                        if (this.drawForwardedName) {
                                                                                        }
                                                                                        if (this.drawNameLayout) {
                                                                                        }
                                                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                                                        }
                                                                                        groupedMessagePosition6 = this.currentPosition;
                                                                                        if (groupedMessagePosition6 != null) {
                                                                                        }
                                                                                        if (this.currentMessageObject.isDice()) {
                                                                                        }
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        i12 = 0;
                                                                                        if (this.captionLayout != null) {
                                                                                        }
                                                                                        if (this.currentMessageObject.type == 19) {
                                                                                        }
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (messageObject.isRoundVideo()) {
                                                                                        }
                                                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                                        if (messageObject.hasMediaSpoilers()) {
                                                                                        }
                                                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                                        if (spoilerEffect2 != null) {
                                                                                        }
                                                                                        invalidate();
                                                                                        c2 = c3;
                                                                                        z21 = z24;
                                                                                        messageObject3 = messageObject4;
                                                                                        z20 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                    }
                                                                                }
                                                                            }
                                                                            dp69 = i35;
                                                                            if (i9 != 0) {
                                                                            }
                                                                            i9 = AndroidUtilities.dp(150.0f);
                                                                            dp69 = i9;
                                                                            if (messageObject23.type == 3) {
                                                                                i9 = this.infoWidth + AndroidUtilities.dp(40.0f);
                                                                            }
                                                                            i37 = messageObject23.type;
                                                                            if (i37 != 23) {
                                                                            }
                                                                            double d92 = AndroidUtilities.displaySize.x;
                                                                            Double.isNaN(d92);
                                                                            i9 = (int) Math.min(d92 * 0.53d, AndroidUtilities.dp(300.0f));
                                                                            dp69 = (int) ((i9 * 16.0f) / 9.0f);
                                                                            if (this.commentLayout != null) {
                                                                                i9 = this.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                                                            }
                                                                            if (this.currentMessagesGroup == null) {
                                                                            }
                                                                            if (messageObject23.type == i147) {
                                                                            }
                                                                            measureTime(messageObject);
                                                                            dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                                            if (i9 < dp12) {
                                                                            }
                                                                            if (!messageObject.isRoundVideo()) {
                                                                            }
                                                                            if (this.currentMessagesGroup == null) {
                                                                            }
                                                                            if (this.currentCaption != null) {
                                                                            }
                                                                            c3 = 0;
                                                                            i54 = 0;
                                                                            layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                            if (this.currentPosition == null) {
                                                                            }
                                                                            i55 = this.highlightCaptionToSetStart;
                                                                            if (i55 >= 0) {
                                                                            }
                                                                            this.highlightCaptionToSetEnd = -1;
                                                                            this.highlightCaptionToSetStart = -1;
                                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                                            }
                                                                            i11 = i54;
                                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                            if (this.currentMessagesGroup != null) {
                                                                            }
                                                                            if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                            }
                                                                            if (z9) {
                                                                            }
                                                                            obj = null;
                                                                            Locale locale3222222 = Locale.US;
                                                                            Integer valueOf2222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                            Integer valueOf3222222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                            Object[] objArr222222 = new Object[2];
                                                                            objArr222222[r14] = valueOf2222222;
                                                                            objArr222222[r12] = valueOf3222222;
                                                                            String format8222222 = String.format(locale3222222, "%d_%d", objArr222222);
                                                                            this.currentPhotoFilterThumb = format8222222;
                                                                            this.currentPhotoFilter = format8222222;
                                                                            arrayList2 = messageObject23.photoThumbs;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (messageObject.needDrawBluredPreview()) {
                                                                            }
                                                                            int i272222222222 = messageObject23.type;
                                                                            if (i272222222222 == 3) {
                                                                            }
                                                                            tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize3 == null) {
                                                                            }
                                                                            i57 = -1;
                                                                            tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                            if (tLRPC$PhotoSize4 != null) {
                                                                            }
                                                                            if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                            }
                                                                            if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                            }
                                                                            messageObject12 = this.currentMessageObject;
                                                                            if (messageObject12.sendPreviewEntry != null) {
                                                                            }
                                                                            f2 = 1.0f;
                                                                            r15 = bitmap2;
                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                            }
                                                                            if (this.photoImage.getBitmap() != null) {
                                                                            }
                                                                            setMessageObjectInternal(messageObject);
                                                                            if (this.drawForwardedName) {
                                                                            }
                                                                            if (this.drawNameLayout) {
                                                                            }
                                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                                            }
                                                                            groupedMessagePosition6 = this.currentPosition;
                                                                            if (groupedMessagePosition6 != null) {
                                                                            }
                                                                            if (this.currentMessageObject.isDice()) {
                                                                            }
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            i12 = 0;
                                                                            if (this.captionLayout != null) {
                                                                            }
                                                                            if (this.currentMessageObject.type == 19) {
                                                                            }
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            if (messageObject.isRoundVideo()) {
                                                                            }
                                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                            if (messageObject.hasMediaSpoilers()) {
                                                                            }
                                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                            if (spoilerEffect2 != null) {
                                                                            }
                                                                            invalidate();
                                                                            c2 = c3;
                                                                            z21 = z24;
                                                                            messageObject3 = messageObject4;
                                                                            z20 = true;
                                                                            i2 = 4;
                                                                            z14 = false;
                                                                        }
                                                                        z29 = false;
                                                                        bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                                                        if (bitmapDrawable2 != null) {
                                                                        }
                                                                        if (messageObject23.type == 5) {
                                                                        }
                                                                        tLRPC$PhotoSize = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize != null) {
                                                                            this.currentPhotoObject = null;
                                                                        }
                                                                        tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize2 != null) {
                                                                            i60 = messageObject23.type;
                                                                            if (i60 == 1) {
                                                                                this.currentPhotoObject = null;
                                                                            }
                                                                            this.currentPhotoObjectThumb = null;
                                                                            this.currentPhotoObjectThumbStripped = null;
                                                                        }
                                                                        if (z29) {
                                                                            this.photoImage.setNeedsQualityThumb(true);
                                                                            this.photoImage.setShouldGenerateQualityThumb(true);
                                                                        }
                                                                        if (this.currentMessagesGroup == null) {
                                                                            this.mediaBackground = false;
                                                                        }
                                                                        if (i9 != 0) {
                                                                        }
                                                                        while (i36 < document.attributes.size()) {
                                                                        }
                                                                        dp69 = i35;
                                                                        if (i9 != 0) {
                                                                        }
                                                                        i9 = AndroidUtilities.dp(150.0f);
                                                                        dp69 = i9;
                                                                        if (messageObject23.type == 3) {
                                                                        }
                                                                        i37 = messageObject23.type;
                                                                        if (i37 != 23) {
                                                                        }
                                                                        double d922 = AndroidUtilities.displaySize.x;
                                                                        Double.isNaN(d922);
                                                                        i9 = (int) Math.min(d922 * 0.53d, AndroidUtilities.dp(300.0f));
                                                                        dp69 = (int) ((i9 * 16.0f) / 9.0f);
                                                                        if (this.commentLayout != null) {
                                                                        }
                                                                        if (this.currentMessagesGroup == null) {
                                                                        }
                                                                        if (messageObject23.type == i147) {
                                                                        }
                                                                        measureTime(messageObject);
                                                                        dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                                        if (i9 < dp12) {
                                                                        }
                                                                        if (!messageObject.isRoundVideo()) {
                                                                        }
                                                                        if (this.currentMessagesGroup == null) {
                                                                        }
                                                                        if (this.currentCaption != null) {
                                                                        }
                                                                        c3 = 0;
                                                                        i54 = 0;
                                                                        layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                        if (this.currentPosition == null) {
                                                                        }
                                                                        i55 = this.highlightCaptionToSetStart;
                                                                        if (i55 >= 0) {
                                                                        }
                                                                        this.highlightCaptionToSetEnd = -1;
                                                                        this.highlightCaptionToSetStart = -1;
                                                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                                                        }
                                                                        i11 = i54;
                                                                        measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                        if (this.currentMessagesGroup != null) {
                                                                        }
                                                                        if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                        }
                                                                        if (z9) {
                                                                        }
                                                                        obj = null;
                                                                        Locale locale32222222 = Locale.US;
                                                                        Integer valueOf22222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                        Integer valueOf32222222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                        Object[] objArr2222222 = new Object[2];
                                                                        objArr2222222[r14] = valueOf22222222;
                                                                        objArr2222222[r12] = valueOf32222222;
                                                                        String format82222222 = String.format(locale32222222, "%d_%d", objArr2222222);
                                                                        this.currentPhotoFilterThumb = format82222222;
                                                                        this.currentPhotoFilter = format82222222;
                                                                        arrayList2 = messageObject23.photoThumbs;
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (messageObject.needDrawBluredPreview()) {
                                                                        }
                                                                        int i2722222222222 = messageObject23.type;
                                                                        if (i2722222222222 == 3) {
                                                                        }
                                                                        tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize3 == null) {
                                                                        }
                                                                        i57 = -1;
                                                                        tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                        if (tLRPC$PhotoSize4 != null) {
                                                                        }
                                                                        if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                        }
                                                                        if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                        }
                                                                        messageObject12 = this.currentMessageObject;
                                                                        if (messageObject12.sendPreviewEntry != null) {
                                                                        }
                                                                        f2 = 1.0f;
                                                                        r15 = bitmap2;
                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                        }
                                                                        if (this.photoImage.getBitmap() != null) {
                                                                        }
                                                                        setMessageObjectInternal(messageObject);
                                                                        if (this.drawForwardedName) {
                                                                        }
                                                                        if (this.drawNameLayout) {
                                                                        }
                                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                                        }
                                                                        groupedMessagePosition6 = this.currentPosition;
                                                                        if (groupedMessagePosition6 != null) {
                                                                        }
                                                                        if (this.currentMessageObject.isDice()) {
                                                                        }
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i12 = 0;
                                                                        if (this.captionLayout != null) {
                                                                        }
                                                                        if (this.currentMessageObject.type == 19) {
                                                                        }
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        if (messageObject.isRoundVideo()) {
                                                                        }
                                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                        if (messageObject.hasMediaSpoilers()) {
                                                                        }
                                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                        if (spoilerEffect2 != null) {
                                                                        }
                                                                        invalidate();
                                                                        c2 = c3;
                                                                        z21 = z24;
                                                                        messageObject3 = messageObject4;
                                                                        z20 = true;
                                                                        i2 = 4;
                                                                        z14 = false;
                                                                    } else {
                                                                        minTabletSide4 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                                    }
                                                                }
                                                                i33 = (int) (minTabletSide4 * 0.7f);
                                                            }
                                                            z28 = false;
                                                            int dp692 = AndroidUtilities.dp(100.0f) + i33;
                                                            if (z28) {
                                                            }
                                                            i34 = messageObject23.type;
                                                            if (i34 == 1) {
                                                                if (i34 == 3) {
                                                                    if (i34 == 5) {
                                                                    }
                                                                    z29 = false;
                                                                    bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                                                    if (bitmapDrawable2 != null) {
                                                                    }
                                                                    if (messageObject23.type == 5) {
                                                                    }
                                                                    tLRPC$PhotoSize = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize != null) {
                                                                    }
                                                                    tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize2 != null) {
                                                                    }
                                                                    if (z29) {
                                                                    }
                                                                    if (this.currentMessagesGroup == null) {
                                                                    }
                                                                    if (i9 != 0) {
                                                                    }
                                                                    while (i36 < document.attributes.size()) {
                                                                    }
                                                                    dp692 = i35;
                                                                    if (i9 != 0) {
                                                                    }
                                                                    i9 = AndroidUtilities.dp(150.0f);
                                                                    dp692 = i9;
                                                                    if (messageObject23.type == 3) {
                                                                    }
                                                                    i37 = messageObject23.type;
                                                                    if (i37 != 23) {
                                                                    }
                                                                    double d9222 = AndroidUtilities.displaySize.x;
                                                                    Double.isNaN(d9222);
                                                                    i9 = (int) Math.min(d9222 * 0.53d, AndroidUtilities.dp(300.0f));
                                                                    dp692 = (int) ((i9 * 16.0f) / 9.0f);
                                                                    if (this.commentLayout != null) {
                                                                    }
                                                                    if (this.currentMessagesGroup == null) {
                                                                    }
                                                                    if (messageObject23.type == i147) {
                                                                    }
                                                                    measureTime(messageObject);
                                                                    dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                                    if (i9 < dp12) {
                                                                    }
                                                                    if (!messageObject.isRoundVideo()) {
                                                                    }
                                                                    if (this.currentMessagesGroup == null) {
                                                                    }
                                                                    if (this.currentCaption != null) {
                                                                    }
                                                                    c3 = 0;
                                                                    i54 = 0;
                                                                    layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                    if (this.currentPosition == null) {
                                                                    }
                                                                    i55 = this.highlightCaptionToSetStart;
                                                                    if (i55 >= 0) {
                                                                    }
                                                                    this.highlightCaptionToSetEnd = -1;
                                                                    this.highlightCaptionToSetStart = -1;
                                                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                                                    }
                                                                    i11 = i54;
                                                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                    if (this.currentMessagesGroup != null) {
                                                                    }
                                                                    if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                    }
                                                                    if (z9) {
                                                                    }
                                                                    obj = null;
                                                                    Locale locale322222222 = Locale.US;
                                                                    Integer valueOf222222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                    Integer valueOf322222222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                    Object[] objArr22222222 = new Object[2];
                                                                    objArr22222222[r14] = valueOf222222222;
                                                                    objArr22222222[r12] = valueOf322222222;
                                                                    String format822222222 = String.format(locale322222222, "%d_%d", objArr22222222);
                                                                    this.currentPhotoFilterThumb = format822222222;
                                                                    this.currentPhotoFilter = format822222222;
                                                                    arrayList2 = messageObject23.photoThumbs;
                                                                    if (arrayList2 != null) {
                                                                    }
                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                    }
                                                                    int i27222222222222 = messageObject23.type;
                                                                    if (i27222222222222 == 3) {
                                                                    }
                                                                    tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize3 == null) {
                                                                    }
                                                                    i57 = -1;
                                                                    tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                    if (tLRPC$PhotoSize4 != null) {
                                                                    }
                                                                    if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                    }
                                                                    if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                    }
                                                                    messageObject12 = this.currentMessageObject;
                                                                    if (messageObject12.sendPreviewEntry != null) {
                                                                    }
                                                                    f2 = 1.0f;
                                                                    r15 = bitmap2;
                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                    }
                                                                    if (this.photoImage.getBitmap() != null) {
                                                                    }
                                                                    setMessageObjectInternal(messageObject);
                                                                    if (this.drawForwardedName) {
                                                                    }
                                                                    if (this.drawNameLayout) {
                                                                    }
                                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                                    }
                                                                    groupedMessagePosition6 = this.currentPosition;
                                                                    if (groupedMessagePosition6 != null) {
                                                                    }
                                                                    if (this.currentMessageObject.isDice()) {
                                                                    }
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    i12 = 0;
                                                                    if (this.captionLayout != null) {
                                                                    }
                                                                    if (this.currentMessageObject.type == 19) {
                                                                    }
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    if (messageObject.isRoundVideo()) {
                                                                    }
                                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                    if (messageObject.hasMediaSpoilers()) {
                                                                    }
                                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                    if (spoilerEffect2 != null) {
                                                                    }
                                                                    invalidate();
                                                                    c2 = c3;
                                                                    z21 = z24;
                                                                    messageObject3 = messageObject4;
                                                                    z20 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                }
                                                                createDocumentLayout(0, messageObject23);
                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                                updateSecretTimeText(messageObject);
                                                                z29 = true;
                                                                bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                                                if (bitmapDrawable2 != null) {
                                                                }
                                                                if (messageObject23.type == 5) {
                                                                }
                                                                tLRPC$PhotoSize = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize != null) {
                                                                }
                                                                tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize2 != null) {
                                                                }
                                                                if (z29) {
                                                                }
                                                                if (this.currentMessagesGroup == null) {
                                                                }
                                                                if (i9 != 0) {
                                                                }
                                                                while (i36 < document.attributes.size()) {
                                                                }
                                                                dp692 = i35;
                                                                if (i9 != 0) {
                                                                }
                                                                i9 = AndroidUtilities.dp(150.0f);
                                                                dp692 = i9;
                                                                if (messageObject23.type == 3) {
                                                                }
                                                                i37 = messageObject23.type;
                                                                if (i37 != 23) {
                                                                }
                                                                double d92222 = AndroidUtilities.displaySize.x;
                                                                Double.isNaN(d92222);
                                                                i9 = (int) Math.min(d92222 * 0.53d, AndroidUtilities.dp(300.0f));
                                                                dp692 = (int) ((i9 * 16.0f) / 9.0f);
                                                                if (this.commentLayout != null) {
                                                                }
                                                                if (this.currentMessagesGroup == null) {
                                                                }
                                                                if (messageObject23.type == i147) {
                                                                }
                                                                measureTime(messageObject);
                                                                dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                                if (i9 < dp12) {
                                                                }
                                                                if (!messageObject.isRoundVideo()) {
                                                                }
                                                                if (this.currentMessagesGroup == null) {
                                                                }
                                                                if (this.currentCaption != null) {
                                                                }
                                                                c3 = 0;
                                                                i54 = 0;
                                                                layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                                if (this.currentPosition == null) {
                                                                }
                                                                i55 = this.highlightCaptionToSetStart;
                                                                if (i55 >= 0) {
                                                                }
                                                                this.highlightCaptionToSetEnd = -1;
                                                                this.highlightCaptionToSetStart = -1;
                                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                                }
                                                                i11 = i54;
                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                if (this.currentMessagesGroup != null) {
                                                                }
                                                                if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                }
                                                                if (z9) {
                                                                }
                                                                obj = null;
                                                                Locale locale3222222222 = Locale.US;
                                                                Integer valueOf2222222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                                Integer valueOf3222222222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                                Object[] objArr222222222 = new Object[2];
                                                                objArr222222222[r14] = valueOf2222222222;
                                                                objArr222222222[r12] = valueOf3222222222;
                                                                String format8222222222 = String.format(locale3222222222, "%d_%d", objArr222222222);
                                                                this.currentPhotoFilterThumb = format8222222222;
                                                                this.currentPhotoFilter = format8222222222;
                                                                arrayList2 = messageObject23.photoThumbs;
                                                                if (arrayList2 != null) {
                                                                }
                                                                if (messageObject.needDrawBluredPreview()) {
                                                                }
                                                                int i272222222222222 = messageObject23.type;
                                                                if (i272222222222222 == 3) {
                                                                }
                                                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize3 == null) {
                                                                }
                                                                i57 = -1;
                                                                tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize4 != null) {
                                                                }
                                                                if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                }
                                                                if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                                }
                                                                messageObject12 = this.currentMessageObject;
                                                                if (messageObject12.sendPreviewEntry != null) {
                                                                }
                                                                f2 = 1.0f;
                                                                r15 = bitmap2;
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                }
                                                                if (this.photoImage.getBitmap() != null) {
                                                                }
                                                                setMessageObjectInternal(messageObject);
                                                                if (this.drawForwardedName) {
                                                                }
                                                                if (this.drawNameLayout) {
                                                                }
                                                                this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                                if (messageObject.isVoiceTranscriptionOpen()) {
                                                                }
                                                                groupedMessagePosition6 = this.currentPosition;
                                                                if (groupedMessagePosition6 != null) {
                                                                }
                                                                if (this.currentMessageObject.isDice()) {
                                                                }
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (this.currentPosition != null) {
                                                                }
                                                                i12 = 0;
                                                                if (this.captionLayout != null) {
                                                                }
                                                                if (this.currentMessageObject.type == 19) {
                                                                }
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (messageObject.isRoundVideo()) {
                                                                }
                                                                this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                                if (messageObject.hasMediaSpoilers()) {
                                                                }
                                                                spoilerEffect2 = this.mediaSpoilerEffect2;
                                                                if (spoilerEffect2 != null) {
                                                                }
                                                                invalidate();
                                                                c2 = c3;
                                                                z21 = z24;
                                                                messageObject3 = messageObject4;
                                                                z20 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                            }
                                                            updateSecretTimeText(messageObject);
                                                            this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject23.photoThumbs, 40);
                                                            z29 = false;
                                                            bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                                            if (bitmapDrawable2 != null) {
                                                            }
                                                            if (messageObject23.type == 5) {
                                                            }
                                                            tLRPC$PhotoSize = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize != null) {
                                                            }
                                                            tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize2 != null) {
                                                            }
                                                            if (z29) {
                                                            }
                                                            if (this.currentMessagesGroup == null) {
                                                            }
                                                            if (i9 != 0) {
                                                            }
                                                            while (i36 < document.attributes.size()) {
                                                            }
                                                            dp692 = i35;
                                                            if (i9 != 0) {
                                                            }
                                                            i9 = AndroidUtilities.dp(150.0f);
                                                            dp692 = i9;
                                                            if (messageObject23.type == 3) {
                                                            }
                                                            i37 = messageObject23.type;
                                                            if (i37 != 23) {
                                                            }
                                                            double d922222 = AndroidUtilities.displaySize.x;
                                                            Double.isNaN(d922222);
                                                            i9 = (int) Math.min(d922222 * 0.53d, AndroidUtilities.dp(300.0f));
                                                            dp692 = (int) ((i9 * 16.0f) / 9.0f);
                                                            if (this.commentLayout != null) {
                                                            }
                                                            if (this.currentMessagesGroup == null) {
                                                            }
                                                            if (messageObject23.type == i147) {
                                                            }
                                                            measureTime(messageObject);
                                                            dp12 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius >= 10 ? 18 : 22) + (messageObject.isOutOwner() ? 0 : 20));
                                                            if (i9 < dp12) {
                                                            }
                                                            if (!messageObject.isRoundVideo()) {
                                                            }
                                                            if (this.currentMessagesGroup == null) {
                                                            }
                                                            if (this.currentCaption != null) {
                                                            }
                                                            c3 = 0;
                                                            i54 = 0;
                                                            layoutFactCheck = layoutFactCheck(i48 - AndroidUtilities.dp(30.0f));
                                                            if (this.currentPosition == null) {
                                                            }
                                                            i55 = this.highlightCaptionToSetStart;
                                                            if (i55 >= 0) {
                                                            }
                                                            this.highlightCaptionToSetEnd = -1;
                                                            this.highlightCaptionToSetStart = -1;
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            i11 = i54;
                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                            if (this.currentMessagesGroup != null) {
                                                            }
                                                            if (i9 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                            }
                                                            if (z9) {
                                                            }
                                                            obj = null;
                                                            Locale locale32222222222 = Locale.US;
                                                            Integer valueOf22222222222 = Integer.valueOf((int) (i38 / AndroidUtilities.density));
                                                            Integer valueOf32222222222 = Integer.valueOf((int) (i10 / AndroidUtilities.density));
                                                            Object[] objArr2222222222 = new Object[2];
                                                            objArr2222222222[r14] = valueOf22222222222;
                                                            objArr2222222222[r12] = valueOf32222222222;
                                                            String format82222222222 = String.format(locale32222222222, "%d_%d", objArr2222222222);
                                                            this.currentPhotoFilterThumb = format82222222222;
                                                            this.currentPhotoFilter = format82222222222;
                                                            arrayList2 = messageObject23.photoThumbs;
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (messageObject.needDrawBluredPreview()) {
                                                            }
                                                            int i2722222222222222 = messageObject23.type;
                                                            if (i2722222222222222 == 3) {
                                                            }
                                                            tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize3 == null) {
                                                            }
                                                            i57 = -1;
                                                            tLRPC$PhotoSize4 = this.currentPhotoObjectThumb;
                                                            if (tLRPC$PhotoSize4 != null) {
                                                            }
                                                            if (!this.currentMessageObject.isHiddenSensitive()) {
                                                            }
                                                            if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                                            }
                                                            messageObject12 = this.currentMessageObject;
                                                            if (messageObject12.sendPreviewEntry != null) {
                                                            }
                                                            f2 = 1.0f;
                                                            r15 = bitmap2;
                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                            }
                                                            if (this.photoImage.getBitmap() != null) {
                                                            }
                                                            setMessageObjectInternal(messageObject);
                                                            if (this.drawForwardedName) {
                                                            }
                                                            if (this.drawNameLayout) {
                                                            }
                                                            this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                            if (messageObject.isVoiceTranscriptionOpen()) {
                                                            }
                                                            groupedMessagePosition6 = this.currentPosition;
                                                            if (groupedMessagePosition6 != null) {
                                                            }
                                                            if (this.currentMessageObject.isDice()) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            i12 = 0;
                                                            if (this.captionLayout != null) {
                                                            }
                                                            if (this.currentMessageObject.type == 19) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (messageObject.isRoundVideo()) {
                                                            }
                                                            this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                            if (messageObject.hasMediaSpoilers()) {
                                                            }
                                                            spoilerEffect2 = this.mediaSpoilerEffect2;
                                                            if (spoilerEffect2 != null) {
                                                            }
                                                            invalidate();
                                                            c2 = c3;
                                                            z21 = z24;
                                                            messageObject3 = messageObject4;
                                                            z20 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                        }
                                                        i8 = 1;
                                                        bitmap2 = bitmap;
                                                        f2 = 1.0f;
                                                        r15 = bitmap2;
                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                        }
                                                        if (this.photoImage.getBitmap() != null) {
                                                        }
                                                        setMessageObjectInternal(messageObject);
                                                        if (this.drawForwardedName) {
                                                        }
                                                        if (this.drawNameLayout) {
                                                        }
                                                        this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                        if (messageObject.isVoiceTranscriptionOpen()) {
                                                        }
                                                        groupedMessagePosition6 = this.currentPosition;
                                                        if (groupedMessagePosition6 != null) {
                                                        }
                                                        if (this.currentMessageObject.isDice()) {
                                                        }
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (this.currentPosition != null) {
                                                        }
                                                        i12 = 0;
                                                        if (this.captionLayout != null) {
                                                        }
                                                        if (this.currentMessageObject.type == 19) {
                                                        }
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (messageObject.isRoundVideo()) {
                                                        }
                                                        this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                        if (messageObject.hasMediaSpoilers()) {
                                                        }
                                                        spoilerEffect2 = this.mediaSpoilerEffect2;
                                                        if (spoilerEffect2 != null) {
                                                        }
                                                        invalidate();
                                                        c2 = c3;
                                                        z21 = z24;
                                                        messageObject3 = messageObject4;
                                                        z20 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                    }
                                                    c3 = 0;
                                                    z23 = z25;
                                                    z24 = true;
                                                    r15 = z23;
                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                    }
                                                    if (this.photoImage.getBitmap() != null) {
                                                    }
                                                    setMessageObjectInternal(messageObject);
                                                    if (this.drawForwardedName) {
                                                    }
                                                    if (this.drawNameLayout) {
                                                    }
                                                    this.totalHeight = AndroidUtilities.dp(14.0f) + i10 + this.namesOffset + i11;
                                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                                    }
                                                    groupedMessagePosition6 = this.currentPosition;
                                                    if (groupedMessagePosition6 != null) {
                                                    }
                                                    if (this.currentMessageObject.isDice()) {
                                                    }
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (this.currentPosition != null) {
                                                    }
                                                    i12 = 0;
                                                    if (this.captionLayout != null) {
                                                    }
                                                    if (this.currentMessageObject.type == 19) {
                                                    }
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (messageObject.isRoundVideo()) {
                                                    }
                                                    this.photoImage.setImageCoords(0.0f, dp9 + this.namesOffset + i12, i9, i10);
                                                    if (messageObject.hasMediaSpoilers()) {
                                                    }
                                                    spoilerEffect2 = this.mediaSpoilerEffect2;
                                                    if (spoilerEffect2 != null) {
                                                    }
                                                    invalidate();
                                                    c2 = c3;
                                                    z21 = z24;
                                                    messageObject3 = messageObject4;
                                                    z20 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                }
                                                r3 = z20;
                                                if (this.currentPosition != null && !this.currentMessageObject.isMusic()) {
                                                    messageObject21 = this.currentMessageObject;
                                                    if (messageObject21.type != 29) {
                                                    }
                                                }
                                                if (!messageObject.isSponsored() && !messageObject.isAnyKindOfSticker() && this.addedCaptionHeight == 0 && !messageObject.isExpiredStory() && !messageObject.isUnsupported()) {
                                                    i120 = this.backgroundWidth;
                                                    if ((this.currentMessageObject.type != 2 || this.isRoundVideo) && messageObject.isVoiceTranscriptionOpen() && messageObject.getFactCheck() == null) {
                                                        if (!AndroidUtilities.isTablet()) {
                                                            minTabletSide9 = AndroidUtilities.getMinTabletSide();
                                                            dp20 = AndroidUtilities.dp(z10 ? 102.0f : 50.0f);
                                                        } else {
                                                            minTabletSide9 = getParentWidth();
                                                            dp20 = AndroidUtilities.dp(z10 ? 102.0f : 50.0f);
                                                        }
                                                        i120 = minTabletSide9 - dp20;
                                                    }
                                                    if (this.drawSideButton != 0 && this.isRoundVideo) {
                                                        i120 -= AndroidUtilities.dp(24.0f);
                                                    }
                                                    dp21 = (i120 - AndroidUtilities.dp((this.currentMessageObject.type != 5 ? 0 : 14) + 31)) - (getExtraTextX() * 2);
                                                    if (!messageObject3.isRestrictedMessage && this.captionLayout == null && (messageObject3.caption != null || messageObject.isVoiceTranscriptionOpen())) {
                                                        voiceTranscription = messageObject.isVoiceTranscriptionOpen() ? messageObject3.caption : messageObject.getVoiceTranscription();
                                                        this.currentCaption = voiceTranscription;
                                                        if (voiceTranscription != null && !TextUtils.isEmpty(messageObject3.messageOwner.voiceTranscription) && this.currentMessageObject.isVoiceTranscriptionOpen() && !this.currentMessageObject.messageOwner.voiceTranscriptionFinal) {
                                                            str22 = ((Object) this.currentCaption) + " ";
                                                            this.currentCaption = str22;
                                                            if (!(str22 instanceof Spannable)) {
                                                                this.currentCaption = new SpannableString(this.currentCaption);
                                                            }
                                                            ((SpannableString) this.currentCaption).setSpan(new TranscribeButton.LoadingPointsSpan(), this.currentCaption.length() - r3, this.currentCaption.length(), 33);
                                                        }
                                                        try {
                                                            this.captionFullWidth = dp21;
                                                            MessageObject.TextLayoutBlocks textLayoutBlocks52 = new MessageObject.TextLayoutBlocks(getPrimaryMessageObject(), this.currentCaption, Theme.chat_msgTextPaint, dp21);
                                                            this.captionLayout = textLayoutBlocks52;
                                                            textLayoutBlocks52.bounceFrom(this.prevCaptionLayout);
                                                            updateSeekBarWaveformWidth(null);
                                                        } catch (Exception e22) {
                                                            FileLog.e(e22);
                                                        }
                                                    }
                                                    i121 = this.highlightCaptionToSetStart;
                                                    if (i121 >= 0 && (textLayoutBlocks2 = this.captionLayout) != null) {
                                                        highlight(i121, this.highlightCaptionToSetEnd, textLayoutBlocks2.textLayoutBlocks);
                                                    }
                                                    this.highlightCaptionToSetEnd = -1;
                                                    this.highlightCaptionToSetStart = -1;
                                                    i122 = this.currentMessageObject.type;
                                                    if ((i122 != 9 || i122 == 2) && this.currentPosition == null) {
                                                        int layoutFactCheck22 = this.totalHeight + layoutFactCheck(dp21);
                                                        this.totalHeight = layoutFactCheck22;
                                                        if (this.hasFactCheck) {
                                                            if (this.captionLayout != null) {
                                                                i124 = 6;
                                                                i123 = 8;
                                                            } else {
                                                                i123 = 18;
                                                                i124 = 6;
                                                            }
                                                            this.totalHeight = layoutFactCheck22 + AndroidUtilities.dp(i123 + i124);
                                                        }
                                                    }
                                                    if (this.captionLayout == null || (i125 = this.currentMessageObject.type) == 2 || i125 == 5) {
                                                        try {
                                                            if (messageObject.isVoiceTranscriptionOpen() && this.captionLayout != null) {
                                                                float dp432 = ((this.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                                                                this.backgroundWidth = (int) (this.backgroundWidth + (Math.max(dp432, this.captionLayout.textWidth) - dp432));
                                                            }
                                                            dp22 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                                        } catch (Exception e23) {
                                                            FileLog.e(e23);
                                                        }
                                                        if (this.captionLayout == null) {
                                                            valueOf = Float.valueOf(textLayoutBlocks3.lastLineWidth);
                                                        } else if (this.currentMessageObject.type != 2) {
                                                            f8 = null;
                                                            if (f8 != null) {
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks15 = this.captionLayout;
                                                                if (textLayoutBlocks15 != null) {
                                                                    this.captionWidth = dp22;
                                                                    this.captionHeight = textLayoutBlocks15.textHeight();
                                                                }
                                                                this.totalHeight += this.captionHeight + AndroidUtilities.dp(9.0f);
                                                                MessageObject.TextLayoutBlocks textLayoutBlocks16 = this.captionLayout;
                                                                if (textLayoutBlocks16 != null) {
                                                                    if (!textLayoutBlocks16.hasCodeAtBottom && !textLayoutBlocks16.hasQuoteAtBottom) {
                                                                    }
                                                                    this.captionHeight += AndroidUtilities.dp(10.0f);
                                                                    this.totalHeight += AndroidUtilities.dp(10.0f);
                                                                }
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble33 = this.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble33.isEmpty && !reactionsLayoutInBubble33.isSmall) {
                                                                }
                                                                MessageObject.GroupedMessagePosition groupedMessagePosition26 = this.currentPosition;
                                                                if (groupedMessagePosition26 != null && (groupedMessagePosition26.flags & captionFlag()) == 0) {
                                                                }
                                                                if ((dp22 - AndroidUtilities.dp(8.0f)) - f8.floatValue() >= this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX() && !this.hasFactCheck) {
                                                                }
                                                                this.totalHeight += AndroidUtilities.dp(14.0f);
                                                                if (this.captionLayout != null) {
                                                                    this.captionHeight += AndroidUtilities.dp(14.0f);
                                                                    c5 = 2;
                                                                    messageObject19 = this.currentMessageObject;
                                                                    if (messageObject19.eventId == 0 || messageObject19.isMediaEmpty() || MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage == null) {
                                                                        i127 = 3;
                                                                    } else {
                                                                        int dp78 = this.backgroundWidth - AndroidUtilities.dp(41.0f);
                                                                        this.hasOldCaptionPreview = r3;
                                                                        this.linkPreviewHeight = z14 ? 1 : 0;
                                                                        TLRPC$WebPage tLRPC$WebPage2 = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                                                                        try {
                                                                            int ceil20 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(tLRPC$WebPage2.site_name) + 1.0f);
                                                                            this.siteNameWidth = ceil20;
                                                                            this.siteNameLayout = new StaticLayout(tLRPC$WebPage2.site_name, Theme.chat_replyNamePaint, Math.min(ceil20, dp78), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                            this.siteNameLayoutWidth = 0.0f;
                                                                            this.siteNameLeft = 0.0f;
                                                                            for (i129 = 0; i129 < this.siteNameLayout.getLineCount(); i129 += r3) {
                                                                                this.siteNameLeft = this.siteNameLayout.getLineLeft(i129);
                                                                                this.siteNameLayoutWidth = this.siteNameLayout.getLineWidth(i129);
                                                                            }
                                                                            StaticLayout staticLayout20 = this.siteNameLayout;
                                                                            int lineBottom5 = staticLayout20.getLineBottom(staticLayout20.getLineCount() - r3);
                                                                            this.linkPreviewHeight += lineBottom5;
                                                                            this.totalHeight += lineBottom5;
                                                                        } catch (Exception e24) {
                                                                            FileLog.e(e24);
                                                                        }
                                                                        try {
                                                                            this.descriptionX = z14 ? 1 : 0;
                                                                            if (this.linkPreviewHeight == 0) {
                                                                                this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                            }
                                                                            StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(tLRPC$WebPage2.description, Theme.chat_replyTextPaint, dp78, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, dp78, 6);
                                                                            this.descriptionLayout = createStaticLayout;
                                                                            int lineBottom6 = createStaticLayout.getLineBottom(createStaticLayout.getLineCount() - r3);
                                                                            this.linkPreviewHeight += lineBottom6;
                                                                            this.totalHeight += lineBottom6;
                                                                            z65 = false;
                                                                            for (i128 = 0; i128 < this.descriptionLayout.getLineCount(); i128 += r3) {
                                                                                int ceil21 = (int) Math.ceil(this.descriptionLayout.getLineLeft(i128));
                                                                                if (ceil21 == 0) {
                                                                                    z65 = true;
                                                                                } else {
                                                                                    int i281 = this.descriptionX;
                                                                                    if (i281 == 0) {
                                                                                        this.descriptionX = -ceil21;
                                                                                    } else {
                                                                                        this.descriptionX = Math.max(i281, -ceil21);
                                                                                    }
                                                                                }
                                                                            }
                                                                            if (!z65) {
                                                                                this.descriptionX = z14 ? 1 : 0;
                                                                            }
                                                                        } catch (Exception e25) {
                                                                            FileLog.e(e25);
                                                                        }
                                                                        i126 = messageObject3.type;
                                                                        i127 = 3;
                                                                        if (i126 != r3 || i126 == 3 || i126 == 20) {
                                                                            this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                        }
                                                                        int dp79 = this.totalHeight + AndroidUtilities.dp(17.0f);
                                                                        this.totalHeight = dp79;
                                                                        if (c5 != 0) {
                                                                            this.totalHeight = dp79 - AndroidUtilities.dp(14.0f);
                                                                            if (c5 == 2) {
                                                                                this.captionHeight -= AndroidUtilities.dp(14.0f);
                                                                            }
                                                                        }
                                                                    }
                                                                    this.botButtons.clear();
                                                                    if (z77) {
                                                                        this.botButtonsByData.clear();
                                                                        this.botButtonsByPosition.clear();
                                                                        this.botButtonsLayout = null;
                                                                    }
                                                                    if (!messageObject3.isRestrictedMessage && !messageObject3.isRepostPreview && this.currentPosition == null && (messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && !messageObject.hasExtendedMedia()) {
                                                                        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = messageObject3.messageOwner.reply_markup;
                                                                        int size15 = tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup ? 1 : tLRPC$ReplyMarkup.rows.size();
                                                                        int dp80 = (AndroidUtilities.dp(48.0f) * size15) + AndroidUtilities.dp(1.0f);
                                                                        this.keyboardHeight = dp80;
                                                                        this.substractBackgroundHeight = dp80;
                                                                        dp24 = this.backgroundWidth - AndroidUtilities.dp(this.mediaBackground ? 0.0f : 9.0f);
                                                                        this.widthForButtons = dp24;
                                                                        if (messageObject3.wantedBotKeyboardWidth > dp24) {
                                                                            int i282 = -AndroidUtilities.dp(!z10 ? 10.0f : 62.0f);
                                                                            if (AndroidUtilities.isTablet()) {
                                                                                minTabletSide10 = AndroidUtilities.getMinTabletSide();
                                                                            } else {
                                                                                minTabletSide10 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp(5.0f);
                                                                            }
                                                                            this.widthForButtons = Math.max(this.backgroundWidth, Math.min(messageObject3.wantedBotKeyboardWidth, i282 + minTabletSide10));
                                                                        }
                                                                        HashMap hashMap2 = new HashMap(this.botButtonsByData);
                                                                        sb = messageObject3.botButtonsLayout;
                                                                        if (sb != null && (str24 = this.botButtonsLayout) != null && str24.equals(sb.toString())) {
                                                                            hashMap = new HashMap(this.botButtonsByPosition);
                                                                        } else {
                                                                            sb2 = messageObject3.botButtonsLayout;
                                                                            if (sb2 != null) {
                                                                                this.botButtonsLayout = sb2.toString();
                                                                            }
                                                                            hashMap = null;
                                                                        }
                                                                        this.botButtonsByData.clear();
                                                                        if (messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) {
                                                                            int i283 = 0;
                                                                            int i284 = 0;
                                                                            boolean z107 = r3;
                                                                            while (i284 < size15) {
                                                                                TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject3.messageOwner.reply_markup.rows.get(i284);
                                                                                int size16 = tLRPC$TL_keyboardButtonRow.buttons.size();
                                                                                if (size16 != 0) {
                                                                                    int dp81 = ((this.widthForButtons - (AndroidUtilities.dp(5.0f) * (size16 - 1))) - AndroidUtilities.dp(2.0f)) / size16;
                                                                                    int i285 = 0;
                                                                                    z107 = z107;
                                                                                    while (i285 < tLRPC$TL_keyboardButtonRow.buttons.size()) {
                                                                                        BotButton botButton2 = new BotButton();
                                                                                        botButton2.button = tLRPC$TL_keyboardButtonRow.buttons.get(i285);
                                                                                        String bytesToHex = Utilities.bytesToHex(botButton2.button.data);
                                                                                        String str45 = tLRPC$TL_keyboardButtonRow + "" + i285;
                                                                                        if (hashMap != null) {
                                                                                            botButton = (BotButton) hashMap.get(str45);
                                                                                        } else {
                                                                                            botButton = (BotButton) hashMap2.get(bytesToHex);
                                                                                        }
                                                                                        if (botButton == null) {
                                                                                            str23 = str45;
                                                                                            botButton2.lastUpdateTime = System.currentTimeMillis();
                                                                                        } else {
                                                                                            str23 = str45;
                                                                                            botButton2.progressAlpha = botButton.progressAlpha;
                                                                                            botButton2.angle = botButton.angle;
                                                                                            botButton2.lastUpdateTime = botButton.lastUpdateTime;
                                                                                        }
                                                                                        this.botButtonsByData.put(bytesToHex, botButton2);
                                                                                        this.botButtonsByPosition.put(str23, botButton2);
                                                                                        botButton2.x = (AndroidUtilities.dp(5.0f) + dp81) * i285;
                                                                                        botButton2.y = (AndroidUtilities.dp(48.0f) * i284) + AndroidUtilities.dp(2.5f);
                                                                                        botButton2.width = dp81;
                                                                                        botButton2.height = AndroidUtilities.dp(44.0f);
                                                                                        if (i285 != 0) {
                                                                                            i136 = 1;
                                                                                        } else {
                                                                                            i136 = 1;
                                                                                            BotButton.access$3776(botButton2, 1);
                                                                                        }
                                                                                        if (i285 == tLRPC$TL_keyboardButtonRow.buttons.size() - i136) {
                                                                                            BotButton.access$3776(botButton2, 2);
                                                                                        }
                                                                                        if (i284 == 0) {
                                                                                            BotButton.access$3776(botButton2, 4);
                                                                                        }
                                                                                        if (i284 == size15 - 1) {
                                                                                            BotButton.access$3776(botButton2, 8);
                                                                                        }
                                                                                        TextPaint textPaint5 = (TextPaint) getThemedPaint("paintChatBotButton");
                                                                                        if ((botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) && (MessageObject.getMedia(messageObject3.messageOwner).flags & 4) != 0) {
                                                                                            string8 = LocaleController.getString(R.string.PaymentReceipt);
                                                                                            if ((botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) && (MessageObject.getMedia(messageObject3.messageOwner) instanceof TLRPC$TL_messageMediaInvoice)) {
                                                                                                string8 = StarsIntroActivity.replaceStars(string8);
                                                                                            }
                                                                                            botButton2.title = new StaticLayout(TextUtils.ellipsize(Emoji.replaceEmoji(string8, textPaint5.getFontMetricsInt(), AndroidUtilities.dp(15.0f), false), textPaint5, dp81 - AndroidUtilities.dp(10.0f), TextUtils.TruncateAt.END), textPaint5, dp81 - AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                                                                                            this.botButtons.add(botButton2);
                                                                                            if (i285 == tLRPC$TL_keyboardButtonRow.buttons.size() - 1) {
                                                                                                i283 = Math.max(i283, botButton2.x + botButton2.width);
                                                                                            }
                                                                                            if (messageObject.isFromUser() && (botButton2.button instanceof TLRPC$TL_keyboardButtonUrl)) {
                                                                                                try {
                                                                                                    parse2 = Uri.parse(botButton2.button.url);
                                                                                                    String lowerCase2 = parse2.getHost().toLowerCase();
                                                                                                    if (parse2.getQueryParameter("startgroup") != null) {
                                                                                                        if (!"http".equals(parse2.getScheme()) && !"https".equals(parse2.getScheme())) {
                                                                                                            if ("tg".equals(parse2.getScheme())) {
                                                                                                                if (botButton2.button.url.startsWith("tg:resolve")) {
                                                                                                                }
                                                                                                                z68 = true;
                                                                                                                botButton2.isInviteButton = z68;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!"t.me".equals(lowerCase2)) {
                                                                                                            if (!"telegram.me".equals(lowerCase2)) {
                                                                                                                if ("telegram.dog".equals(lowerCase2)) {
                                                                                                                }
                                                                                                                if ("tg".equals(parse2.getScheme())) {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        z68 = true;
                                                                                                        botButton2.isInviteButton = z68;
                                                                                                    }
                                                                                                    z68 = false;
                                                                                                    botButton2.isInviteButton = z68;
                                                                                                } catch (Exception unused7) {
                                                                                                }
                                                                                            }
                                                                                            z107 = true;
                                                                                            i285++;
                                                                                            messageObject3 = messageObject;
                                                                                        }
                                                                                        string8 = botButton2.button.text != null ? botButton2.button.text : "";
                                                                                        if (botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) {
                                                                                            string8 = StarsIntroActivity.replaceStars(string8);
                                                                                        }
                                                                                        botButton2.title = new StaticLayout(TextUtils.ellipsize(Emoji.replaceEmoji(string8, textPaint5.getFontMetricsInt(), AndroidUtilities.dp(15.0f), false), textPaint5, dp81 - AndroidUtilities.dp(10.0f), TextUtils.TruncateAt.END), textPaint5, dp81 - AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                                                                                        this.botButtons.add(botButton2);
                                                                                        if (i285 == tLRPC$TL_keyboardButtonRow.buttons.size() - 1) {
                                                                                        }
                                                                                        if (messageObject.isFromUser()) {
                                                                                            parse2 = Uri.parse(botButton2.button.url);
                                                                                            String lowerCase22 = parse2.getHost().toLowerCase();
                                                                                            if (parse2.getQueryParameter("startgroup") != null) {
                                                                                            }
                                                                                            z68 = false;
                                                                                            botButton2.isInviteButton = z68;
                                                                                        }
                                                                                        z107 = true;
                                                                                        i285++;
                                                                                        messageObject3 = messageObject;
                                                                                    }
                                                                                }
                                                                                i284 += z107 ? 1 : 0;
                                                                                messageObject3 = messageObject;
                                                                                i127 = 3;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                                z107 = z107;
                                                                            }
                                                                            i135 = i283;
                                                                            z69 = z107;
                                                                        } else {
                                                                            i135 = 0;
                                                                            z69 = r3;
                                                                        }
                                                                        this.widthForButtons = i135;
                                                                        z66 = z69;
                                                                    } else {
                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                        z66 = r3;
                                                                    }
                                                                    if (this.drawCommentButton) {
                                                                        this.totalHeight += AndroidUtilities.dp(!shouldDrawTimeOnMedia() ? 43.0f : 41.3f);
                                                                        createSelectorDrawable(z66 ? 1 : 0);
                                                                    }
                                                                    if (this.hasFactCheck && this.currentPosition != null) {
                                                                        int i286 = this.totalHeight;
                                                                        if (this.reactionsLayoutInBubble.isEmpty) {
                                                                            i134 = 2;
                                                                            i133 = 0;
                                                                        } else {
                                                                            i133 = 18;
                                                                            i134 = 2;
                                                                        }
                                                                        this.totalHeight = i286 + AndroidUtilities.dp(i133 + i134) + this.factCheckHeight;
                                                                    }
                                                                    z67 = this.drawPinnedBottom;
                                                                    if (z67 && this.drawPinnedTop) {
                                                                        this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                    } else if (!z67) {
                                                                        this.totalHeight -= AndroidUtilities.dp(1.0f);
                                                                    } else if (this.drawPinnedTop && this.pinnedBottom && (groupedMessagePosition13 = this.currentPosition) != null && groupedMessagePosition13.siblingHeights == null) {
                                                                        this.totalHeight -= AndroidUtilities.dp(1.0f);
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                        if (messageObject3.type == 0) {
                                                                            this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                        }
                                                                        if (this.drawPinnedBottom) {
                                                                            f9 = 1.0f;
                                                                            this.totalHeight -= AndroidUtilities.dp(1.0f);
                                                                        } else {
                                                                            f9 = 1.0f;
                                                                        }
                                                                        if (this.drawPinnedTop) {
                                                                            this.totalHeight -= AndroidUtilities.dp(f9);
                                                                        }
                                                                    }
                                                                    if (messageObject3.type != 19) {
                                                                        if (messageObject.isAnyKindOfSticker() && this.totalHeight < AndroidUtilities.dp(70.0f)) {
                                                                            int dp82 = AndroidUtilities.dp(70.0f);
                                                                            int i287 = this.totalHeight;
                                                                            int i288 = dp82 - i287;
                                                                            this.additionalTimeOffsetY = i288;
                                                                            this.totalHeight = i287 + i288;
                                                                        } else if (messageObject.isAnimatedEmoji()) {
                                                                            this.additionalTimeOffsetY = AndroidUtilities.dp(16.0f);
                                                                            this.totalHeight += AndroidUtilities.dp(16.0f);
                                                                        }
                                                                    }
                                                                    if (this.drawPhotoImage) {
                                                                        r6 = 0;
                                                                    } else {
                                                                        r6 = 0;
                                                                        r6 = 0;
                                                                        this.photoImage.setImageBitmap((Drawable) null);
                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                            this.blurredPhotoImage.getBitmap().recycle();
                                                                            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                                        }
                                                                    }
                                                                    if (this.documentAttachType == 5) {
                                                                        if (MessageObject.isDocumentHasThumb(this.documentAttach)) {
                                                                            this.radialProgress.setImageOverlay(FileLoader.getClosestPhotoSizeWithSize(this.documentAttach.thumbs, 90), this.documentAttach, messageObject3);
                                                                        } else {
                                                                            String artworkUrl = messageObject3.getArtworkUrl(z66);
                                                                            if (!TextUtils.isEmpty(artworkUrl)) {
                                                                                this.radialProgress.setImageOverlay(artworkUrl);
                                                                            } else {
                                                                                this.radialProgress.setImageOverlay(r6, r6, r6);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        this.radialProgress.setImageOverlay(r6, r6, r6);
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z21) {
                                                                        int dp83 = AndroidUtilities.dp(4.0f);
                                                                        int i289 = SharedConfig.bubbleRadius;
                                                                        if (i289 > 2) {
                                                                            dp23 = AndroidUtilities.dp(i289 - 2);
                                                                        } else {
                                                                            dp23 = AndroidUtilities.dp(i289);
                                                                        }
                                                                        int min7 = Math.min(AndroidUtilities.dp(3.0f), dp23);
                                                                        if (dp83 > dp23) {
                                                                            dp83 = dp23;
                                                                        }
                                                                        if (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
                                                                            dp23 = dp83;
                                                                        }
                                                                        int i290 = (this.forwardedNameLayout[z14 ? 1 : 0] == null && this.replyNameLayout == null && !this.drawNameLayout) ? dp23 : dp83;
                                                                        if (this.drawCommentButton || (((arrayList5 = this.botButtons) != null && !arrayList5.isEmpty()) || this.hasFactCheck)) {
                                                                            dp23 = dp83;
                                                                        }
                                                                        MessageObject.TextLayoutBlocks textLayoutBlocks17 = this.captionLayout;
                                                                        if (textLayoutBlocks17 != null) {
                                                                            if (this.captionAbove) {
                                                                                i290 = dp83;
                                                                            } else {
                                                                                dp23 = dp83;
                                                                            }
                                                                        }
                                                                        if (this.documentAttachType != z66) {
                                                                            i131 = dp23;
                                                                            i130 = i290;
                                                                        } else {
                                                                            i130 = dp83;
                                                                            i131 = i130;
                                                                        }
                                                                        MessageObject.GroupedMessagePosition groupedMessagePosition27 = this.currentPosition;
                                                                        if (groupedMessagePosition27 != null && this.currentMessagesGroup != null) {
                                                                            int i291 = groupedMessagePosition27.flags;
                                                                            if ((i291 & 2) == 0) {
                                                                                i130 = dp83;
                                                                                i131 = i130;
                                                                            }
                                                                            if ((i291 & 1) == 0) {
                                                                                dp23 = dp83;
                                                                                i290 = dp23;
                                                                            }
                                                                            if ((i291 & 8) == 0) {
                                                                                dp23 = dp83;
                                                                                i131 = dp23;
                                                                            }
                                                                            if ((i291 & i2) == 0) {
                                                                                i130 = dp83;
                                                                                if (!this.pinnedTop || (textLayoutBlocks17 != null && this.captionAbove)) {
                                                                                    i132 = dp83;
                                                                                } else if (this.currentMessageObject.isOutOwner()) {
                                                                                    i132 = min7;
                                                                                } else {
                                                                                    i132 = dp83;
                                                                                    i130 = min7;
                                                                                }
                                                                                if (this.pinnedBottom && (this.captionLayout == null || this.captionAbove)) {
                                                                                    if (this.currentMessageObject.isOutOwner()) {
                                                                                        dp23 = min7;
                                                                                    } else {
                                                                                        i131 = min7;
                                                                                    }
                                                                                }
                                                                                if (!this.mediaBackground && !this.currentMessageObject.isOutOwner()) {
                                                                                    dp23 = min7;
                                                                                }
                                                                                messageObject20 = this.currentMessageObject;
                                                                                if (messageObject20.type == i2 && ((MessageObject.getMedia(messageObject20) instanceof TLRPC$TL_messageMediaVenue) || (!this.locationExpired && (MessageObject.getMedia(this.currentMessageObject) instanceof TLRPC$TL_messageMediaGeoLive)))) {
                                                                                    dp23 = min7;
                                                                                    i131 = dp23;
                                                                                }
                                                                                if (this.documentAttachType == 10) {
                                                                                    dp23 = 0;
                                                                                    i130 = 0;
                                                                                    i131 = 0;
                                                                                    i132 = 0;
                                                                                }
                                                                                this.photoImage.setRoundRadius(i132, i130, i131, dp23);
                                                                            }
                                                                        }
                                                                        dp83 = i290;
                                                                        if (!this.pinnedTop) {
                                                                            if (this.currentMessageObject.isOutOwner()) {
                                                                            }
                                                                            if (this.pinnedBottom) {
                                                                                if (this.currentMessageObject.isOutOwner()) {
                                                                                }
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                                dp23 = min7;
                                                                            }
                                                                            messageObject20 = this.currentMessageObject;
                                                                            if (messageObject20.type == i2) {
                                                                                dp23 = min7;
                                                                                i131 = dp23;
                                                                            }
                                                                            if (this.documentAttachType == 10) {
                                                                            }
                                                                            this.photoImage.setRoundRadius(i132, i130, i131, dp23);
                                                                        }
                                                                        i132 = dp83;
                                                                        if (this.pinnedBottom) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        messageObject20 = this.currentMessageObject;
                                                                        if (messageObject20.type == i2) {
                                                                        }
                                                                        if (this.documentAttachType == 10) {
                                                                        }
                                                                        this.photoImage.setRoundRadius(i132, i130, i131, dp23);
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                    if (stickerSetLinkIcon2 != null && stickerSetLinkIcon2.die()) {
                                                                        this.stickerSetIcons.detach(this);
                                                                        textLayoutBlocks4 = null;
                                                                        this.stickerSetIcons = null;
                                                                    } else {
                                                                        textLayoutBlocks4 = null;
                                                                    }
                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                    r32 = z66;
                                                                    r62 = textLayoutBlocks4;
                                                                }
                                                            }
                                                        } else {
                                                            valueOf = Float.valueOf(AndroidUtilities.dp(64.0f));
                                                        }
                                                        f8 = valueOf;
                                                        if (f8 != null) {
                                                        }
                                                    }
                                                }
                                                c5 = c2;
                                                messageObject19 = this.currentMessageObject;
                                                if (messageObject19.eventId == 0) {
                                                    int dp782 = this.backgroundWidth - AndroidUtilities.dp(41.0f);
                                                    this.hasOldCaptionPreview = r3;
                                                    this.linkPreviewHeight = z14 ? 1 : 0;
                                                    TLRPC$WebPage tLRPC$WebPage22 = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                                                    int ceil202 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(tLRPC$WebPage22.site_name) + 1.0f);
                                                    this.siteNameWidth = ceil202;
                                                    this.siteNameLayout = new StaticLayout(tLRPC$WebPage22.site_name, Theme.chat_replyNamePaint, Math.min(ceil202, dp782), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    this.siteNameLayoutWidth = 0.0f;
                                                    this.siteNameLeft = 0.0f;
                                                    while (i129 < this.siteNameLayout.getLineCount()) {
                                                    }
                                                    StaticLayout staticLayout202 = this.siteNameLayout;
                                                    int lineBottom52 = staticLayout202.getLineBottom(staticLayout202.getLineCount() - r3);
                                                    this.linkPreviewHeight += lineBottom52;
                                                    this.totalHeight += lineBottom52;
                                                    this.descriptionX = z14 ? 1 : 0;
                                                    if (this.linkPreviewHeight == 0) {
                                                    }
                                                    StaticLayout createStaticLayout2 = StaticLayoutEx.createStaticLayout(tLRPC$WebPage22.description, Theme.chat_replyTextPaint, dp782, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, dp782, 6);
                                                    this.descriptionLayout = createStaticLayout2;
                                                    int lineBottom62 = createStaticLayout2.getLineBottom(createStaticLayout2.getLineCount() - r3);
                                                    this.linkPreviewHeight += lineBottom62;
                                                    this.totalHeight += lineBottom62;
                                                    z65 = false;
                                                    while (i128 < this.descriptionLayout.getLineCount()) {
                                                    }
                                                    if (!z65) {
                                                    }
                                                    i126 = messageObject3.type;
                                                    i127 = 3;
                                                    if (i126 != r3) {
                                                    }
                                                    this.totalHeight += AndroidUtilities.dp(6.0f);
                                                    int dp792 = this.totalHeight + AndroidUtilities.dp(17.0f);
                                                    this.totalHeight = dp792;
                                                    if (c5 != 0) {
                                                    }
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                        TLRPC$ReplyMarkup tLRPC$ReplyMarkup2 = messageObject3.messageOwner.reply_markup;
                                                        if (tLRPC$ReplyMarkup2 instanceof TLRPC$TL_replyInlineMarkup) {
                                                        }
                                                        int dp802 = (AndroidUtilities.dp(48.0f) * size15) + AndroidUtilities.dp(1.0f);
                                                        this.keyboardHeight = dp802;
                                                        this.substractBackgroundHeight = dp802;
                                                        dp24 = this.backgroundWidth - AndroidUtilities.dp(this.mediaBackground ? 0.0f : 9.0f);
                                                        this.widthForButtons = dp24;
                                                        if (messageObject3.wantedBotKeyboardWidth > dp24) {
                                                        }
                                                        HashMap hashMap22 = new HashMap(this.botButtonsByData);
                                                        sb = messageObject3.botButtonsLayout;
                                                        if (sb != null) {
                                                            hashMap = new HashMap(this.botButtonsByPosition);
                                                            this.botButtonsByData.clear();
                                                            if (messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) {
                                                            }
                                                            this.widthForButtons = i135;
                                                            z66 = z69;
                                                            if (this.drawCommentButton) {
                                                            }
                                                            if (this.hasFactCheck) {
                                                                int i2862 = this.totalHeight;
                                                                if (this.reactionsLayoutInBubble.isEmpty) {
                                                                }
                                                                this.totalHeight = i2862 + AndroidUtilities.dp(i133 + i134) + this.factCheckHeight;
                                                            }
                                                            z67 = this.drawPinnedBottom;
                                                            if (z67) {
                                                                this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject3.type != 19) {
                                                                }
                                                                if (this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType == 5) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z21) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                if (stickerSetLinkIcon2 != null) {
                                                                    this.stickerSetIcons.detach(this);
                                                                    textLayoutBlocks4 = null;
                                                                    this.stickerSetIcons = null;
                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                    r32 = z66;
                                                                    r62 = textLayoutBlocks4;
                                                                }
                                                                textLayoutBlocks4 = null;
                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                r32 = z66;
                                                                r62 = textLayoutBlocks4;
                                                            }
                                                            if (!z67) {
                                                            }
                                                            if (!this.mediaBackground) {
                                                            }
                                                            if (messageObject3.type != 19) {
                                                            }
                                                            if (this.drawPhotoImage) {
                                                            }
                                                            if (this.documentAttachType == 5) {
                                                            }
                                                            calculateUnlockXY();
                                                            if (z21) {
                                                            }
                                                            updateAnimatedEmojis();
                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                            if (stickerSetLinkIcon2 != null) {
                                                            }
                                                            textLayoutBlocks4 = null;
                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                            r32 = z66;
                                                            r62 = textLayoutBlocks4;
                                                        }
                                                        sb2 = messageObject3.botButtonsLayout;
                                                        if (sb2 != null) {
                                                        }
                                                        hashMap = null;
                                                        this.botButtonsByData.clear();
                                                        if (messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) {
                                                        }
                                                        this.widthForButtons = i135;
                                                        z66 = z69;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        if (this.hasFactCheck) {
                                                        }
                                                        z67 = this.drawPinnedBottom;
                                                        if (z67) {
                                                        }
                                                        if (!z67) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject3.type != 19) {
                                                        }
                                                        if (this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType == 5) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z21) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                        if (stickerSetLinkIcon2 != null) {
                                                        }
                                                        textLayoutBlocks4 = null;
                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                        r32 = z66;
                                                        r62 = textLayoutBlocks4;
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                }
                                                i127 = 3;
                                                this.botButtons.clear();
                                                if (z77) {
                                                }
                                                if (!messageObject3.isRestrictedMessage) {
                                                }
                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                this.keyboardHeight = z14 ? 1 : 0;
                                                z66 = r3;
                                                if (this.drawCommentButton) {
                                                }
                                                if (this.hasFactCheck) {
                                                }
                                                z67 = this.drawPinnedBottom;
                                                if (z67) {
                                                }
                                                if (!z67) {
                                                }
                                                if (!this.mediaBackground) {
                                                }
                                                if (messageObject3.type != 19) {
                                                }
                                                if (this.drawPhotoImage) {
                                                }
                                                if (this.documentAttachType == 5) {
                                                }
                                                calculateUnlockXY();
                                                if (z21) {
                                                }
                                                updateAnimatedEmojis();
                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                if (stickerSetLinkIcon2 != null) {
                                                }
                                                textLayoutBlocks4 = null;
                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                r32 = z66;
                                                r62 = textLayoutBlocks4;
                                            }
                                            messageObject3 = messageObject2;
                                            z13 = true;
                                            i2 = 4;
                                            z14 = false;
                                            z15 = true;
                                            z70 = z13;
                                            z21 = z15;
                                            c2 = 0;
                                            r3 = z70;
                                            if (this.currentPosition != null) {
                                            }
                                            if (!messageObject.isSponsored()) {
                                            }
                                            c5 = c2;
                                            messageObject19 = this.currentMessageObject;
                                            if (messageObject19.eventId == 0) {
                                            }
                                            i127 = 3;
                                            this.botButtons.clear();
                                            if (z77) {
                                            }
                                            if (!messageObject3.isRestrictedMessage) {
                                            }
                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                            this.keyboardHeight = z14 ? 1 : 0;
                                            z66 = r3;
                                            if (this.drawCommentButton) {
                                            }
                                            if (this.hasFactCheck) {
                                            }
                                            z67 = this.drawPinnedBottom;
                                            if (z67) {
                                            }
                                            if (!z67) {
                                            }
                                            if (!this.mediaBackground) {
                                            }
                                            if (messageObject3.type != 19) {
                                            }
                                            if (this.drawPhotoImage) {
                                            }
                                            if (this.documentAttachType == 5) {
                                            }
                                            calculateUnlockXY();
                                            if (z21) {
                                            }
                                            updateAnimatedEmojis();
                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                            if (stickerSetLinkIcon2 != null) {
                                            }
                                            textLayoutBlocks4 = null;
                                            this.prevCaptionLayout = textLayoutBlocks4;
                                            r32 = z66;
                                            r62 = textLayoutBlocks4;
                                        }
                                    }
                                    messageObject2 = messageObject23;
                                    messageObject3 = messageObject2;
                                    z13 = true;
                                    i2 = 4;
                                    z14 = false;
                                    z15 = true;
                                    z70 = z13;
                                    z21 = z15;
                                    c2 = 0;
                                    r3 = z70;
                                    if (this.currentPosition != null) {
                                    }
                                    if (!messageObject.isSponsored()) {
                                    }
                                    c5 = c2;
                                    messageObject19 = this.currentMessageObject;
                                    if (messageObject19.eventId == 0) {
                                    }
                                    i127 = 3;
                                    this.botButtons.clear();
                                    if (z77) {
                                    }
                                    if (!messageObject3.isRestrictedMessage) {
                                    }
                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                    this.keyboardHeight = z14 ? 1 : 0;
                                    z66 = r3;
                                    if (this.drawCommentButton) {
                                    }
                                    if (this.hasFactCheck) {
                                    }
                                    z67 = this.drawPinnedBottom;
                                    if (z67) {
                                    }
                                    if (!z67) {
                                    }
                                    if (!this.mediaBackground) {
                                    }
                                    if (messageObject3.type != 19) {
                                    }
                                    if (this.drawPhotoImage) {
                                    }
                                    if (this.documentAttachType == 5) {
                                    }
                                    calculateUnlockXY();
                                    if (z21) {
                                    }
                                    updateAnimatedEmojis();
                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                    if (stickerSetLinkIcon2 != null) {
                                    }
                                    textLayoutBlocks4 = null;
                                    this.prevCaptionLayout = textLayoutBlocks4;
                                    r32 = z66;
                                    r62 = textLayoutBlocks4;
                                } else {
                                    if (this.commentAvatarImages != null) {
                                        int i292 = 0;
                                        while (true) {
                                            ImageReceiver[] imageReceiverArr4 = this.commentAvatarImages;
                                            if (i292 >= imageReceiverArr4.length) {
                                                break;
                                            }
                                            imageReceiverArr4[i292].setImageBitmap((Drawable) null);
                                            this.commentAvatarImagesVisible[i292] = false;
                                            i292++;
                                        }
                                    }
                                    string9 = str26;
                                    i = 9;
                                }
                            }
                            i137 = 0;
                            int ceil42 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string9));
                            this.totalCommentWidth = ceil42;
                            this.commentWidth = ceil42;
                            this.commentLayout = new StaticLayout(string9, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            if (repliesCount != 0) {
                                this.drawCommentNumber = true;
                                animatedNumberLayout2 = this.commentNumberLayout;
                                if (animatedNumberLayout2 != null) {
                                }
                                messageObject23.animateComments = false;
                                int width22 = this.commentNumberLayout.getWidth();
                                this.commentNumberWidth = width22;
                                this.totalCommentWidth += width22 + AndroidUtilities.dp(4.0f);
                                this.totalCommentWidth += AndroidUtilities.dp(i137 + 70);
                                if (messageObject23.type != 27) {
                                }
                                messageObject2 = messageObject23;
                                messageObject3 = messageObject2;
                                z13 = true;
                                i2 = 4;
                                z14 = false;
                                z15 = true;
                                z70 = z13;
                                z21 = z15;
                                c2 = 0;
                                r3 = z70;
                                if (this.currentPosition != null) {
                                }
                                if (!messageObject.isSponsored()) {
                                }
                                c5 = c2;
                                messageObject19 = this.currentMessageObject;
                                if (messageObject19.eventId == 0) {
                                }
                                i127 = 3;
                                this.botButtons.clear();
                                if (z77) {
                                }
                                if (!messageObject3.isRestrictedMessage) {
                                }
                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                this.keyboardHeight = z14 ? 1 : 0;
                                z66 = r3;
                                if (this.drawCommentButton) {
                                }
                                if (this.hasFactCheck) {
                                }
                                z67 = this.drawPinnedBottom;
                                if (z67) {
                                }
                                if (!z67) {
                                }
                                if (!this.mediaBackground) {
                                }
                                if (messageObject3.type != 19) {
                                }
                                if (this.drawPhotoImage) {
                                }
                                if (this.documentAttachType == 5) {
                                }
                                calculateUnlockXY();
                                if (z21) {
                                }
                                updateAnimatedEmojis();
                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                if (stickerSetLinkIcon2 != null) {
                                }
                                textLayoutBlocks4 = null;
                                this.prevCaptionLayout = textLayoutBlocks4;
                                r32 = z66;
                                r62 = textLayoutBlocks4;
                            }
                            this.drawCommentNumber = false;
                            animatedNumberLayout = this.commentNumberLayout;
                            if (animatedNumberLayout != null) {
                            }
                            this.totalCommentWidth += AndroidUtilities.dp(i137 + 70);
                            if (messageObject23.type != 27) {
                            }
                            messageObject2 = messageObject23;
                            messageObject3 = messageObject2;
                            z13 = true;
                            i2 = 4;
                            z14 = false;
                            z15 = true;
                            z70 = z13;
                            z21 = z15;
                            c2 = 0;
                            r3 = z70;
                            if (this.currentPosition != null) {
                            }
                            if (!messageObject.isSponsored()) {
                            }
                            c5 = c2;
                            messageObject19 = this.currentMessageObject;
                            if (messageObject19.eventId == 0) {
                            }
                            i127 = 3;
                            this.botButtons.clear();
                            if (z77) {
                            }
                            if (!messageObject3.isRestrictedMessage) {
                            }
                            this.substractBackgroundHeight = z14 ? 1 : 0;
                            this.keyboardHeight = z14 ? 1 : 0;
                            z66 = r3;
                            if (this.drawCommentButton) {
                            }
                            if (this.hasFactCheck) {
                            }
                            z67 = this.drawPinnedBottom;
                            if (z67) {
                            }
                            if (!z67) {
                            }
                            if (!this.mediaBackground) {
                            }
                            if (messageObject3.type != 19) {
                            }
                            if (this.drawPhotoImage) {
                            }
                            if (this.documentAttachType == 5) {
                            }
                            calculateUnlockXY();
                            if (z21) {
                            }
                            updateAnimatedEmojis();
                            stickerSetLinkIcon2 = this.stickerSetIcons;
                            if (stickerSetLinkIcon2 != null) {
                            }
                            textLayoutBlocks4 = null;
                            this.prevCaptionLayout = textLayoutBlocks4;
                            r32 = z66;
                            r62 = textLayoutBlocks4;
                        } else {
                            if (!this.isRepliesChat && repliesCount > 0) {
                                String formatShortNumber = LocaleController.formatShortNumber(repliesCount, null);
                                int ceil22 = (int) Math.ceil(Theme.chat_stickerCommentCountPaint.measureText(formatShortNumber));
                                this.totalCommentWidth = ceil22;
                                this.commentWidth = ceil22;
                                i68 = 1065353216;
                                this.commentLayout = new StaticLayout(formatShortNumber, Theme.chat_stickerCommentCountPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            } else {
                                this.commentLayout = null;
                            }
                            this.drawCommentNumber = false;
                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                        }
                    } else {
                        this.commentLayout = null;
                        this.drawCommentNumber = false;
                    }
                    i = 9;
                    if (messageObject23.type != 27) {
                    }
                    messageObject2 = messageObject23;
                    messageObject3 = messageObject2;
                    z13 = true;
                    i2 = 4;
                    z14 = false;
                    z15 = true;
                    z70 = z13;
                    z21 = z15;
                    c2 = 0;
                    r3 = z70;
                    if (this.currentPosition != null) {
                    }
                    if (!messageObject.isSponsored()) {
                    }
                    c5 = c2;
                    messageObject19 = this.currentMessageObject;
                    if (messageObject19.eventId == 0) {
                    }
                    i127 = 3;
                    this.botButtons.clear();
                    if (z77) {
                    }
                    if (!messageObject3.isRestrictedMessage) {
                    }
                    this.substractBackgroundHeight = z14 ? 1 : 0;
                    this.keyboardHeight = z14 ? 1 : 0;
                    z66 = r3;
                    if (this.drawCommentButton) {
                    }
                    if (this.hasFactCheck) {
                    }
                    z67 = this.drawPinnedBottom;
                    if (z67) {
                    }
                    if (!z67) {
                    }
                    if (!this.mediaBackground) {
                    }
                    if (messageObject3.type != 19) {
                    }
                    if (this.drawPhotoImage) {
                    }
                    if (this.documentAttachType == 5) {
                    }
                    calculateUnlockXY();
                    if (z21) {
                    }
                    updateAnimatedEmojis();
                    stickerSetLinkIcon2 = this.stickerSetIcons;
                    if (stickerSetLinkIcon2 != null) {
                    }
                    textLayoutBlocks4 = null;
                    this.prevCaptionLayout = textLayoutBlocks4;
                    r32 = z66;
                    r62 = textLayoutBlocks4;
                } else {
                    messageObject3 = messageObject23;
                    i127 = 3;
                    r32 = 1;
                    i2 = 4;
                    z14 = false;
                    r62 = 0;
                }
                if (z77) {
                    this.currentUrl = r62;
                    this.currentWebFile = r62;
                    this.lastWebFile = r62;
                    this.loadingProgressLayout = r62;
                    this.animatingLoadingProgressProgress = 0.0f;
                    this.lastLoadingSizeTotal = 0L;
                    this.selectedBackgroundProgress = 0.0f;
                    ValueAnimator valueAnimator = this.statusDrawableAnimator;
                    if (valueAnimator != null) {
                        valueAnimator.removeAllListeners();
                        this.statusDrawableAnimator.cancel();
                    }
                    ?? r0 = this.translationLoadingFloat;
                    if (r0 != 0) {
                        r0.set(0.0f, r32);
                    }
                    LinkPath linkPath = this.translationLoadingPath;
                    if (linkPath == null) {
                        loadingDrawable = null;
                    } else {
                        linkPath.reset();
                        loadingDrawable = null;
                        this.translationLoadingPath = null;
                    }
                    LoadingDrawable loadingDrawable2 = this.translationLoadingDrawable;
                    if (loadingDrawable2 != null) {
                        loadingDrawable2.reset();
                        this.translationLoadingDrawable = loadingDrawable;
                    }
                    ?? r02 = this.timerParticlesAlpha;
                    if (r02 != 0) {
                        MessageObject messageObject36 = this.currentMessageObject;
                        r02.set((messageObject36 == null || !messageObject36.needDrawBluredPreview() || (tLRPC$Message4 = this.currentMessageObject.messageOwner) == null || tLRPC$Message4.destroyTime == 0 || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) ? false : true, r32);
                    }
                    this.transitionParams.lastStatusDrawableParams = -1;
                    this.statusDrawableAnimationInProgress = z14;
                    if (this.documentAttachType == 5) {
                        this.toSeekBarProgress = !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? 0.0f : 1.0f;
                    }
                    SeekBar seekBar = this.seekBar;
                    if (seekBar != null) {
                        seekBar.updateTimestamps(this.currentMessageObject, null);
                    }
                    this.seekBarWaveform.setProgress(0.0f);
                    AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
                    if (swapAnimatedEmojiDrawable != null) {
                        swapAnimatedEmojiDrawable.play();
                    }
                    ReplyMessageLine replyMessageLine = this.replyLine;
                    if (replyMessageLine != null) {
                        replyMessageLine.resetAnimation();
                    }
                    this.quoteHighlight = null;
                }
                transcribeButton = this.transcribeButton;
                if (transcribeButton != null) {
                    MessageObject messageObject37 = this.currentMessageObject;
                    TLRPC$Message tLRPC$Message12 = messageObject37.messageOwner;
                    boolean z108 = tLRPC$Message12 != null && tLRPC$Message12.voiceTranscriptionOpen && tLRPC$Message12.voiceTranscriptionFinal && TranscribeButton.isVideoTranscriptionOpen(messageObject37);
                    boolean z109 = !z77;
                    transcribeButton.setOpen(z108, z109);
                    this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), z109);
                    this.transcribeButton.setLock(TranscribeButton.showTranscribeLock(this.currentMessageObject), z109);
                }
                updateWaveform();
                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                if (!this.currentMessageObject.loadingCancelled && this.buttonState == 2 && this.documentAttachType == i127 && DownloadController.getInstance(this.currentAccount).canDownloadMedia(messageObject3)) {
                    ?? fileLoader = FileLoader.getInstance(this.currentAccount);
                    TLRPC$Document tLRPC$Document21 = this.documentAttach;
                    MessageObject messageObject38 = this.currentMessageObject;
                    fileLoader.loadFile(tLRPC$Document21, messageObject38, r32, messageObject38.shouldEncryptPhotoOrVideo() ? 0 : 2);
                    this.buttonState = i2;
                    this.radialProgress.setIcon(getIconForCurrentState(), z14, z14);
                }
                chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null && chatMessageCellDelegate2.getTextSelectionHelper() != null && !z77 && z9 && !messageObject3.preview) {
                    this.delegate.getTextSelectionHelper().checkDataChanged(messageObject3);
                }
                this.accessibilityVirtualViewBounds.clear();
                this.transitionParams.updatePhotoImageX = r32;
                this.highlightCaptionToSetEnd = -1;
                this.highlightCaptionToSetStart = -1;
                updateFlagSecure();
            }
            z6 = z5;
            z7 = true;
            if (!z3) {
                setCurrentDiceValue(this.isUpdating);
            }
            if (z3) {
                if (MessageObject.getMedia(messageObject23.messageOwner) instanceof TLRPC$TL_messageMediaPoll) {
                }
                if (arrayList8 == null) {
                    if (!z71) {
                        z71 = true;
                    }
                    tLRPC$Poll2 = this.lastPoll;
                    if (tLRPC$Poll2 == tLRPC$Poll) {
                        if (!this.pollVoted) {
                        }
                        z8 = true;
                        this.animatePollAvatars = false;
                        if (z8) {
                            this.pollAnimationProgressTime = 0.0f;
                            if (this.pollVoted) {
                                this.pollUnvoteInProgress = true;
                            }
                            int i1452 = this.lastPollResultsVoters;
                            if (i1452 == 0) {
                                this.animatePollAvatars = i1452 == 0 || (i1452 != 0 && i141 == 0);
                            }
                            this.animatePollAvatars = i1452 == 0 || (i1452 != 0 && i141 == 0);
                        }
                        if (!z77) {
                            size2 = tLRPC$TL_messageMediaPoll.results.results.size();
                            i142 = 0;
                            while (true) {
                                if (i142 < size2) {
                                }
                                i142++;
                            }
                            if (tLRPC$TL_pollAnswerVoters != null) {
                            }
                        }
                        if (!z6) {
                            if ((groupedMessages.messages.size() > 1 ? null : this.currentMessagesGroup.getPosition(this.currentMessageObject)) == this.currentPosition) {
                            }
                        }
                        if (z3) {
                            int i1472 = 5;
                            if (z9) {
                                messageObject3 = messageObject23;
                                i127 = 3;
                                r32 = 1;
                                i2 = 4;
                                z14 = false;
                                r62 = 0;
                                if (z77) {
                                }
                                transcribeButton = this.transcribeButton;
                                if (transcribeButton != null) {
                                }
                                updateWaveform();
                                if (z77) {
                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                    if (!this.currentMessageObject.loadingCancelled) {
                                        ?? fileLoader2 = FileLoader.getInstance(this.currentAccount);
                                        TLRPC$Document tLRPC$Document212 = this.documentAttach;
                                        MessageObject messageObject382 = this.currentMessageObject;
                                        fileLoader2.loadFile(tLRPC$Document212, messageObject382, r32, messageObject382.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                        this.buttonState = i2;
                                        this.radialProgress.setIcon(getIconForCurrentState(), z14, z14);
                                    }
                                    chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                        this.delegate.getTextSelectionHelper().checkDataChanged(messageObject3);
                                    }
                                    this.accessibilityVirtualViewBounds.clear();
                                    this.transitionParams.updatePhotoImageX = r32;
                                    this.highlightCaptionToSetEnd = -1;
                                    this.highlightCaptionToSetStart = -1;
                                    updateFlagSecure();
                                }
                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                if (!this.currentMessageObject.loadingCancelled) {
                                }
                                chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                }
                                this.accessibilityVirtualViewBounds.clear();
                                this.transitionParams.updatePhotoImageX = r32;
                                this.highlightCaptionToSetEnd = -1;
                                this.highlightCaptionToSetStart = -1;
                                updateFlagSecure();
                            }
                            this.updatedContent = true;
                            stickerSetLinkIcon = this.stickerSetIcons;
                            if (stickerSetLinkIcon != null) {
                            }
                            this.wasPinned = this.isPinned;
                            this.pinnedBottom = z;
                            this.pinnedTop = z2;
                            this.currentMessageObject = messageObject23;
                            this.currentMessagesGroup = groupedMessages;
                            this.lastTime = -2.0d;
                            this.lastPostAuthor = messageObject23.messageOwner.post_author;
                            if (!z77) {
                            }
                            this.isHighlightedAnimated = false;
                            this.wasTranscriptionOpen = false;
                            if (this.highlightedQuote) {
                            }
                            this.highlightedQuote = false;
                            this.widthBeforeNewTimeLine = -1;
                            groupedMessages2 = this.currentMessagesGroup;
                            if (groupedMessages2 != null) {
                                position = this.currentMessagesGroup.getPosition(this.currentMessageObject);
                                this.currentPosition = position;
                                if (position == null) {
                                }
                                groupedMessages3 = this.currentMessagesGroup;
                                if (groupedMessages3 == null) {
                                    if (this.pinnedTop) {
                                        this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition17 = this.currentPosition) == null || (groupedMessagePosition17.flags & 4) != 0);
                                        if (this.pinnedBottom) {
                                            this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 8) != 0);
                                            boolean z782 = this.isPlayingRound;
                                            if (!this.isRoundVideo) {
                                                this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                                                this.photoImage.setCrossfadeWithOldImage(false);
                                                this.photoImage.setCrossfadeDuration(150);
                                                this.photoImage.setCrossfadeByScale(0.0f);
                                                this.photoImage.setGradientBitmap(null);
                                                this.photoImage.clearDecorators();
                                                this.photoImage.setInvalidateAll(false);
                                                this.linkPreviewY = 0;
                                                this.factCheckY = 0;
                                                this.lastTranslated = messageObject23.translated;
                                                TLRPC$Message tLRPC$Message62 = messageObject23.messageOwner;
                                                this.lastSendState = tLRPC$Message62.send_state;
                                                this.lastDeleteDate = tLRPC$Message62.destroyTime;
                                                this.lastViewsCount = tLRPC$Message62.views;
                                                this.lastRepliesCount = getRepliesCount();
                                                if (z77) {
                                                }
                                                this.gamePreviewPressed = false;
                                                this.sideButtonPressed = false;
                                                this.pressedSideButton = 0;
                                                this.hasNewLineForTime = false;
                                                this.flipImage = false;
                                                if (this.isThreadChat) {
                                                    this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                                    if (needDrawAvatar()) {
                                                        this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                                        needDrawAvatar = needDrawAvatar();
                                                        if (messageObject23.customAvatarDrawable == null) {
                                                            z10 = needDrawAvatar;
                                                            this.wasLayout = false;
                                                            this.groupPhotoInvisible = false;
                                                            this.animatingDrawVideoImageButton = 0;
                                                            this.drawVideoSize = false;
                                                            this.canStreamVideo = false;
                                                            this.animatingNoSound = 0;
                                                            this.drawSideButton2 = 0;
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            this.hasReplyQuote = false;
                                                            this.isReplyQuote = false;
                                                            this.replyNameLayout = null;
                                                            this.adminLayout = null;
                                                            this.boostCounterBounds = null;
                                                            this.boostCounterSpan = null;
                                                            this.checkOnlyButtonPressed = false;
                                                            this.replyTextLayout = null;
                                                            AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                                            this.lastReplyMessage = null;
                                                            this.hasEmbed = false;
                                                            this.autoPlayingMedia = false;
                                                            this.replyNameWidth = 0;
                                                            this.replyTextWidth = 0;
                                                            this.replyTextHeight = 0;
                                                            this.viaWidth = 0;
                                                            this.viaNameWidth = 0;
                                                            this.viaOnly = false;
                                                            this.addedCaptionHeight = 0;
                                                            this.currentReplyPhoto = null;
                                                            this.currentUser = null;
                                                            this.currentChat = null;
                                                            this.currentViaBotUser = null;
                                                            this.instantViewLayout = null;
                                                            this.drawNameLayout = false;
                                                            this.linkPreviewAbove = false;
                                                            TLRPC$Message tLRPC$Message72 = this.currentMessageObject.messageOwner;
                                                            if (tLRPC$Message72 != null) {
                                                                this.captionAbove = (tLRPC$Message72 != null && tLRPC$Message72.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                                                this.isSmallImage = false;
                                                                this.lastLoadingSizeTotal = 0L;
                                                                if (this.scheduledInvalidate) {
                                                                }
                                                                this.links.clear();
                                                                this.pressedLink = null;
                                                                this.pressedEmoji = null;
                                                                this.pressedLinkType = -1;
                                                                messageObject23.forceUpdate = false;
                                                                this.drawPhotoImage = false;
                                                                this.drawMediaCheckBox = false;
                                                                this.hasLinkPreview = false;
                                                                this.hasFactCheck = false;
                                                                this.hasOldCaptionPreview = false;
                                                                this.hasGamePreview = false;
                                                                this.hasInvoicePreview = false;
                                                                this.hasInvoicePrice = false;
                                                                this.commentButtonPressed = false;
                                                                this.instantPressed = false;
                                                                this.gradientDrawable = null;
                                                                groupMedia = this.groupMedia;
                                                                if (groupMedia != null) {
                                                                    groupMedia.onDetachedFromWindow();
                                                                    this.groupMedia = null;
                                                                }
                                                                setInstantButtonPressed(false);
                                                                if (!z8) {
                                                                    i140 = 0;
                                                                    while (true) {
                                                                        drawableArr = this.selectorDrawable;
                                                                        if (i140 < drawableArr.length) {
                                                                        }
                                                                        i140++;
                                                                    }
                                                                }
                                                                resetContactButtonsPressedState();
                                                                buttonBounce = this.titleLabelBounce;
                                                                if (buttonBounce != null) {
                                                                }
                                                                this.drawnContactButtonsFlag = 0;
                                                                this.drawContact = false;
                                                                this.drawContactView = false;
                                                                this.drawContactSendMessage = false;
                                                                this.drawContactAdd = false;
                                                                this.spoilerPressed = null;
                                                                this.isSpoilerRevealing = false;
                                                                this.linkPreviewPressed = false;
                                                                this.buttonPressed = 0;
                                                                this.additionalTimeOffsetY = 0;
                                                                this.miniButtonPressed = 0;
                                                                this.pressedBotButton = -1;
                                                                this.pressedVoteButton = -1;
                                                                this.pollHintPressed = false;
                                                                this.psaHintPressed = false;
                                                                this.linkPreviewHeight = 0;
                                                                this.factCheckHeight = 0;
                                                                this.mediaOffsetY = 0;
                                                                this.documentAttachType = 0;
                                                                this.documentAttach = null;
                                                                this.descriptionLayout = null;
                                                                this.titleLayout = null;
                                                                this.videoInfoLayout = null;
                                                                this.photosCountLayout = null;
                                                                this.siteNameLayout = null;
                                                                this.titleLabelLayout = null;
                                                                this.authorLayout = null;
                                                                this.captionFullWidth = 0;
                                                                this.prevCaptionLayout = this.captionLayout;
                                                                this.captionLayout = null;
                                                                this.captionWidth = 0;
                                                                this.captionHeight = 0;
                                                                this.captionOffsetX = 0;
                                                                this.currentCaption = null;
                                                                this.docTitleLayout = null;
                                                                this.drawImageButton = false;
                                                                this.drawVideoImageButton = false;
                                                                this.currentPhotoLocation = null;
                                                                this.currentPhotoThumbLocation = null;
                                                                this.currentPhotoObject = null;
                                                                this.photoParentObject = null;
                                                                this.currentPhotoObjectThumb = null;
                                                                this.currentPhotoObjectThumbStripped = null;
                                                                if (!z9) {
                                                                }
                                                                this.currentPhotoFilter = null;
                                                                this.buttonState = -1;
                                                                this.miniButtonState = -1;
                                                                this.hasMiniProgress = 0;
                                                                if (this.addedForTest) {
                                                                    ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
                                                                }
                                                                this.addedForTest = false;
                                                                this.photoNotSet = false;
                                                                this.drawBackground = true;
                                                                this.drawName = false;
                                                                this.useSeekBarWaveform = false;
                                                                this.useTranscribeButton = false;
                                                                this.drawInstantView = false;
                                                                this.drawInstantViewType = 0;
                                                                this.instantViewButtonText = null;
                                                                this.drawForwardedName = false;
                                                                this.drawCommentButton = false;
                                                                this.photoImage.setSideClip(0.0f);
                                                                this.photoImage.setAspectFit(false);
                                                                this.photoImage.setRoundRadiusEnabled(true);
                                                                this.fitPhotoImage = false;
                                                                this.gradientShader = null;
                                                                this.motionBackgroundDrawable = null;
                                                                this.imageBackgroundColor = 0;
                                                                this.imageBackgroundGradientColor1 = 0;
                                                                this.imageBackgroundGradientColor2 = 0;
                                                                this.imageBackgroundIntensity = 0.0f;
                                                                this.imageBackgroundGradientColor3 = 0;
                                                                this.imageBackgroundGradientRotation = 45;
                                                                this.imageBackgroundSideColor = 0;
                                                                this.mediaBackground = false;
                                                                this.isMedia = false;
                                                                expiredStoryView = this.expiredStoryView;
                                                                if (expiredStoryView != null) {
                                                                }
                                                                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22 = messageObject23.messageOwner.fwd_from;
                                                                if (tLRPC$MessageFwdHeader22 == null) {
                                                                    this.hasPsaHint = z11;
                                                                    if (z11) {
                                                                    }
                                                                    this.photoImage.setAlpha(1.0f);
                                                                    if (!z9) {
                                                                    }
                                                                    this.pollButtons.clear();
                                                                    this.availableTimeWidth = 0;
                                                                    this.photoImage.setForceLoading(false);
                                                                    this.photoImage.setNeedsQualityThumb(false);
                                                                    this.photoImage.setShouldGenerateQualityThumb(false);
                                                                    this.photoImage.setAllowDecodeSingleFrame(false);
                                                                    this.photoImage.setColorFilter(null);
                                                                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                                    if (!z77) {
                                                                    }
                                                                    messageObject23.reactionsChanged = false;
                                                                    TLRPC$Message tLRPC$Message82 = messageObject23.messageOwner;
                                                                    if (tLRPC$Message82 == null) {
                                                                        if (messageObject.shouldDrawReactions()) {
                                                                            boolean z802 = !messageObject.shouldDrawReactionsInLayout();
                                                                            if (this.currentPosition == null) {
                                                                            }
                                                                            if (z9) {
                                                                            }
                                                                            groupedMessages4 = this.currentMessagesGroup;
                                                                            if (groupedMessages4 != null) {
                                                                                isLinkedToChat = this.currentMessagesGroup.messages.get(0).isLinkedToChat(this.linkedChatId);
                                                                                if (this.hasDiscussion) {
                                                                                    repliesCount = getRepliesCount();
                                                                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                                                                        this.drawCommentButton = true;
                                                                                        if (this.commentProgress == null) {
                                                                                        }
                                                                                        if (!this.isRepliesChat) {
                                                                                        }
                                                                                        i137 = 0;
                                                                                        int ceil422 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string9));
                                                                                        this.totalCommentWidth = ceil422;
                                                                                        this.commentWidth = ceil422;
                                                                                        this.commentLayout = new StaticLayout(string9, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                        if (repliesCount != 0) {
                                                                                        }
                                                                                        this.drawCommentNumber = false;
                                                                                        animatedNumberLayout = this.commentNumberLayout;
                                                                                        if (animatedNumberLayout != null) {
                                                                                        }
                                                                                        this.totalCommentWidth += AndroidUtilities.dp(i137 + 70);
                                                                                        if (messageObject23.type != 27) {
                                                                                        }
                                                                                        messageObject2 = messageObject23;
                                                                                        messageObject3 = messageObject2;
                                                                                        z13 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z15 = true;
                                                                                        z70 = z13;
                                                                                        z21 = z15;
                                                                                        c2 = 0;
                                                                                        r3 = z70;
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (!messageObject.isSponsored()) {
                                                                                        }
                                                                                        c5 = c2;
                                                                                        messageObject19 = this.currentMessageObject;
                                                                                        if (messageObject19.eventId == 0) {
                                                                                        }
                                                                                        i127 = 3;
                                                                                        this.botButtons.clear();
                                                                                        if (z77) {
                                                                                        }
                                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                                        }
                                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                                        z66 = r3;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z67 = this.drawPinnedBottom;
                                                                                        if (z67) {
                                                                                        }
                                                                                        if (!z67) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject3.type != 19) {
                                                                                        }
                                                                                        if (this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType == 5) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z21) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                        if (stickerSetLinkIcon2 != null) {
                                                                                        }
                                                                                        textLayoutBlocks4 = null;
                                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                                        r32 = z66;
                                                                                        r62 = textLayoutBlocks4;
                                                                                        if (z77) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                                        this.highlightCaptionToSetEnd = -1;
                                                                                        this.highlightCaptionToSetStart = -1;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                    if (!this.isRepliesChat) {
                                                                                        String formatShortNumber2 = LocaleController.formatShortNumber(repliesCount, null);
                                                                                        int ceil222 = (int) Math.ceil(Theme.chat_stickerCommentCountPaint.measureText(formatShortNumber2));
                                                                                        this.totalCommentWidth = ceil222;
                                                                                        this.commentWidth = ceil222;
                                                                                        i68 = 1065353216;
                                                                                        this.commentLayout = new StaticLayout(formatShortNumber2, Theme.chat_stickerCommentCountPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                        this.drawCommentNumber = false;
                                                                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                                        i = 9;
                                                                                        if (messageObject23.type != 27) {
                                                                                        }
                                                                                        messageObject2 = messageObject23;
                                                                                        messageObject3 = messageObject2;
                                                                                        z13 = true;
                                                                                        i2 = 4;
                                                                                        z14 = false;
                                                                                        z15 = true;
                                                                                        z70 = z13;
                                                                                        z21 = z15;
                                                                                        c2 = 0;
                                                                                        r3 = z70;
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        if (!messageObject.isSponsored()) {
                                                                                        }
                                                                                        c5 = c2;
                                                                                        messageObject19 = this.currentMessageObject;
                                                                                        if (messageObject19.eventId == 0) {
                                                                                        }
                                                                                        i127 = 3;
                                                                                        this.botButtons.clear();
                                                                                        if (z77) {
                                                                                        }
                                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                                        }
                                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                                        z66 = r3;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        if (this.hasFactCheck) {
                                                                                        }
                                                                                        z67 = this.drawPinnedBottom;
                                                                                        if (z67) {
                                                                                        }
                                                                                        if (!z67) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject3.type != 19) {
                                                                                        }
                                                                                        if (this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType == 5) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z21) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                        if (stickerSetLinkIcon2 != null) {
                                                                                        }
                                                                                        textLayoutBlocks4 = null;
                                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                                        r32 = z66;
                                                                                        r62 = textLayoutBlocks4;
                                                                                        if (z77) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                                        this.highlightCaptionToSetEnd = -1;
                                                                                        this.highlightCaptionToSetStart = -1;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                    this.commentLayout = null;
                                                                                    this.drawCommentNumber = false;
                                                                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                                    i = 9;
                                                                                    if (messageObject23.type != 27) {
                                                                                    }
                                                                                    messageObject2 = messageObject23;
                                                                                    messageObject3 = messageObject2;
                                                                                    z13 = true;
                                                                                    i2 = 4;
                                                                                    z14 = false;
                                                                                    z15 = true;
                                                                                    z70 = z13;
                                                                                    z21 = z15;
                                                                                    c2 = 0;
                                                                                    r3 = z70;
                                                                                    if (this.currentPosition != null) {
                                                                                    }
                                                                                    if (!messageObject.isSponsored()) {
                                                                                    }
                                                                                    c5 = c2;
                                                                                    messageObject19 = this.currentMessageObject;
                                                                                    if (messageObject19.eventId == 0) {
                                                                                    }
                                                                                    i127 = 3;
                                                                                    this.botButtons.clear();
                                                                                    if (z77) {
                                                                                    }
                                                                                    if (!messageObject3.isRestrictedMessage) {
                                                                                    }
                                                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                                                    z66 = r3;
                                                                                    if (this.drawCommentButton) {
                                                                                    }
                                                                                    if (this.hasFactCheck) {
                                                                                    }
                                                                                    z67 = this.drawPinnedBottom;
                                                                                    if (z67) {
                                                                                    }
                                                                                    if (!z67) {
                                                                                    }
                                                                                    if (!this.mediaBackground) {
                                                                                    }
                                                                                    if (messageObject3.type != 19) {
                                                                                    }
                                                                                    if (this.drawPhotoImage) {
                                                                                    }
                                                                                    if (this.documentAttachType == 5) {
                                                                                    }
                                                                                    calculateUnlockXY();
                                                                                    if (z21) {
                                                                                    }
                                                                                    updateAnimatedEmojis();
                                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                    if (stickerSetLinkIcon2 != null) {
                                                                                    }
                                                                                    textLayoutBlocks4 = null;
                                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                                    r32 = z66;
                                                                                    r62 = textLayoutBlocks4;
                                                                                    if (z77) {
                                                                                    }
                                                                                    transcribeButton = this.transcribeButton;
                                                                                    if (transcribeButton != null) {
                                                                                    }
                                                                                    updateWaveform();
                                                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                    }
                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                    }
                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                    this.transitionParams.updatePhotoImageX = r32;
                                                                                    this.highlightCaptionToSetEnd = -1;
                                                                                    this.highlightCaptionToSetStart = -1;
                                                                                    updateFlagSecure();
                                                                                }
                                                                                repliesCount = getRepliesCount();
                                                                                if (!messageObject.shouldDrawWithoutBackground()) {
                                                                                }
                                                                                if (!this.isRepliesChat) {
                                                                                }
                                                                                this.commentLayout = null;
                                                                                this.drawCommentNumber = false;
                                                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                                i = 9;
                                                                                if (messageObject23.type != 27) {
                                                                                }
                                                                                messageObject2 = messageObject23;
                                                                                messageObject3 = messageObject2;
                                                                                z13 = true;
                                                                                i2 = 4;
                                                                                z14 = false;
                                                                                z15 = true;
                                                                                z70 = z13;
                                                                                z21 = z15;
                                                                                c2 = 0;
                                                                                r3 = z70;
                                                                                if (this.currentPosition != null) {
                                                                                }
                                                                                if (!messageObject.isSponsored()) {
                                                                                }
                                                                                c5 = c2;
                                                                                messageObject19 = this.currentMessageObject;
                                                                                if (messageObject19.eventId == 0) {
                                                                                }
                                                                                i127 = 3;
                                                                                this.botButtons.clear();
                                                                                if (z77) {
                                                                                }
                                                                                if (!messageObject3.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                                z66 = r3;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                if (this.hasFactCheck) {
                                                                                }
                                                                                z67 = this.drawPinnedBottom;
                                                                                if (z67) {
                                                                                }
                                                                                if (!z67) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject3.type != 19) {
                                                                                }
                                                                                if (this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType == 5) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z21) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                                if (stickerSetLinkIcon2 != null) {
                                                                                }
                                                                                textLayoutBlocks4 = null;
                                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                                r32 = z66;
                                                                                r62 = textLayoutBlocks4;
                                                                                if (z77) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = r32;
                                                                                this.highlightCaptionToSetEnd = -1;
                                                                                this.highlightCaptionToSetStart = -1;
                                                                                updateFlagSecure();
                                                                            }
                                                                            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                                            if (this.hasDiscussion) {
                                                                            }
                                                                            repliesCount = getRepliesCount();
                                                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                                                            }
                                                                            if (!this.isRepliesChat) {
                                                                            }
                                                                            this.commentLayout = null;
                                                                            this.drawCommentNumber = false;
                                                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                            i = 9;
                                                                            if (messageObject23.type != 27) {
                                                                            }
                                                                            messageObject2 = messageObject23;
                                                                            messageObject3 = messageObject2;
                                                                            z13 = true;
                                                                            i2 = 4;
                                                                            z14 = false;
                                                                            z15 = true;
                                                                            z70 = z13;
                                                                            z21 = z15;
                                                                            c2 = 0;
                                                                            r3 = z70;
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            if (!messageObject.isSponsored()) {
                                                                            }
                                                                            c5 = c2;
                                                                            messageObject19 = this.currentMessageObject;
                                                                            if (messageObject19.eventId == 0) {
                                                                            }
                                                                            i127 = 3;
                                                                            this.botButtons.clear();
                                                                            if (z77) {
                                                                            }
                                                                            if (!messageObject3.isRestrictedMessage) {
                                                                            }
                                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                                            z66 = r3;
                                                                            if (this.drawCommentButton) {
                                                                            }
                                                                            if (this.hasFactCheck) {
                                                                            }
                                                                            z67 = this.drawPinnedBottom;
                                                                            if (z67) {
                                                                            }
                                                                            if (!z67) {
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                            }
                                                                            if (messageObject3.type != 19) {
                                                                            }
                                                                            if (this.drawPhotoImage) {
                                                                            }
                                                                            if (this.documentAttachType == 5) {
                                                                            }
                                                                            calculateUnlockXY();
                                                                            if (z21) {
                                                                            }
                                                                            updateAnimatedEmojis();
                                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                            if (stickerSetLinkIcon2 != null) {
                                                                            }
                                                                            textLayoutBlocks4 = null;
                                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                                            r32 = z66;
                                                                            r62 = textLayoutBlocks4;
                                                                            if (z77) {
                                                                            }
                                                                            transcribeButton = this.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                            if (chatMessageCellDelegate2 != null) {
                                                                            }
                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                            this.transitionParams.updatePhotoImageX = r32;
                                                                            this.highlightCaptionToSetEnd = -1;
                                                                            this.highlightCaptionToSetStart = -1;
                                                                            updateFlagSecure();
                                                                        }
                                                                        this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                                        if (z9) {
                                                                        }
                                                                        groupedMessages4 = this.currentMessagesGroup;
                                                                        if (groupedMessages4 != null) {
                                                                        }
                                                                        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                                        if (this.hasDiscussion) {
                                                                        }
                                                                        repliesCount = getRepliesCount();
                                                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                                                        }
                                                                        if (!this.isRepliesChat) {
                                                                        }
                                                                        this.commentLayout = null;
                                                                        this.drawCommentNumber = false;
                                                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                        i = 9;
                                                                        if (messageObject23.type != 27) {
                                                                        }
                                                                        messageObject2 = messageObject23;
                                                                        messageObject3 = messageObject2;
                                                                        z13 = true;
                                                                        i2 = 4;
                                                                        z14 = false;
                                                                        z15 = true;
                                                                        z70 = z13;
                                                                        z21 = z15;
                                                                        c2 = 0;
                                                                        r3 = z70;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        if (!messageObject.isSponsored()) {
                                                                        }
                                                                        c5 = c2;
                                                                        messageObject19 = this.currentMessageObject;
                                                                        if (messageObject19.eventId == 0) {
                                                                        }
                                                                        i127 = 3;
                                                                        this.botButtons.clear();
                                                                        if (z77) {
                                                                        }
                                                                        if (!messageObject3.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                                        z66 = r3;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        if (this.hasFactCheck) {
                                                                        }
                                                                        z67 = this.drawPinnedBottom;
                                                                        if (z67) {
                                                                        }
                                                                        if (!z67) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject3.type != 19) {
                                                                        }
                                                                        if (this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType == 5) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z21) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                        if (stickerSetLinkIcon2 != null) {
                                                                        }
                                                                        textLayoutBlocks4 = null;
                                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                                        r32 = z66;
                                                                        r62 = textLayoutBlocks4;
                                                                        if (z77) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = r32;
                                                                        this.highlightCaptionToSetEnd = -1;
                                                                        this.highlightCaptionToSetStart = -1;
                                                                        updateFlagSecure();
                                                                    }
                                                                    if (messageObject.shouldDrawReactions()) {
                                                                    }
                                                                    this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                                    if (z9) {
                                                                    }
                                                                    groupedMessages4 = this.currentMessagesGroup;
                                                                    if (groupedMessages4 != null) {
                                                                    }
                                                                    isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                                    if (this.hasDiscussion) {
                                                                    }
                                                                    repliesCount = getRepliesCount();
                                                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                                                    }
                                                                    if (!this.isRepliesChat) {
                                                                    }
                                                                    this.commentLayout = null;
                                                                    this.drawCommentNumber = false;
                                                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                    i = 9;
                                                                    if (messageObject23.type != 27) {
                                                                    }
                                                                    messageObject2 = messageObject23;
                                                                    messageObject3 = messageObject2;
                                                                    z13 = true;
                                                                    i2 = 4;
                                                                    z14 = false;
                                                                    z15 = true;
                                                                    z70 = z13;
                                                                    z21 = z15;
                                                                    c2 = 0;
                                                                    r3 = z70;
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    if (!messageObject.isSponsored()) {
                                                                    }
                                                                    c5 = c2;
                                                                    messageObject19 = this.currentMessageObject;
                                                                    if (messageObject19.eventId == 0) {
                                                                    }
                                                                    i127 = 3;
                                                                    this.botButtons.clear();
                                                                    if (z77) {
                                                                    }
                                                                    if (!messageObject3.isRestrictedMessage) {
                                                                    }
                                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                                    z66 = r3;
                                                                    if (this.drawCommentButton) {
                                                                    }
                                                                    if (this.hasFactCheck) {
                                                                    }
                                                                    z67 = this.drawPinnedBottom;
                                                                    if (z67) {
                                                                    }
                                                                    if (!z67) {
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                    }
                                                                    if (messageObject3.type != 19) {
                                                                    }
                                                                    if (this.drawPhotoImage) {
                                                                    }
                                                                    if (this.documentAttachType == 5) {
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z21) {
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                    if (stickerSetLinkIcon2 != null) {
                                                                    }
                                                                    textLayoutBlocks4 = null;
                                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                                    r32 = z66;
                                                                    r62 = textLayoutBlocks4;
                                                                    if (z77) {
                                                                    }
                                                                    transcribeButton = this.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                    if (chatMessageCellDelegate2 != null) {
                                                                    }
                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                    this.transitionParams.updatePhotoImageX = r32;
                                                                    this.highlightCaptionToSetEnd = -1;
                                                                    this.highlightCaptionToSetStart = -1;
                                                                    updateFlagSecure();
                                                                }
                                                                this.hasPsaHint = z11;
                                                                if (z11) {
                                                                }
                                                                this.photoImage.setAlpha(1.0f);
                                                                if (!z9) {
                                                                }
                                                                this.pollButtons.clear();
                                                                this.availableTimeWidth = 0;
                                                                this.photoImage.setForceLoading(false);
                                                                this.photoImage.setNeedsQualityThumb(false);
                                                                this.photoImage.setShouldGenerateQualityThumb(false);
                                                                this.photoImage.setAllowDecodeSingleFrame(false);
                                                                this.photoImage.setColorFilter(null);
                                                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                                if (!z77) {
                                                                }
                                                                messageObject23.reactionsChanged = false;
                                                                TLRPC$Message tLRPC$Message822 = messageObject23.messageOwner;
                                                                if (tLRPC$Message822 == null) {
                                                                }
                                                                if (messageObject.shouldDrawReactions()) {
                                                                }
                                                                this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                                if (z9) {
                                                                }
                                                                groupedMessages4 = this.currentMessagesGroup;
                                                                if (groupedMessages4 != null) {
                                                                }
                                                                isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                                if (this.hasDiscussion) {
                                                                }
                                                                repliesCount = getRepliesCount();
                                                                if (!messageObject.shouldDrawWithoutBackground()) {
                                                                }
                                                                if (!this.isRepliesChat) {
                                                                }
                                                                this.commentLayout = null;
                                                                this.drawCommentNumber = false;
                                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                i = 9;
                                                                if (messageObject23.type != 27) {
                                                                }
                                                                messageObject2 = messageObject23;
                                                                messageObject3 = messageObject2;
                                                                z13 = true;
                                                                i2 = 4;
                                                                z14 = false;
                                                                z15 = true;
                                                                z70 = z13;
                                                                z21 = z15;
                                                                c2 = 0;
                                                                r3 = z70;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                if (!messageObject.isSponsored()) {
                                                                }
                                                                c5 = c2;
                                                                messageObject19 = this.currentMessageObject;
                                                                if (messageObject19.eventId == 0) {
                                                                }
                                                                i127 = 3;
                                                                this.botButtons.clear();
                                                                if (z77) {
                                                                }
                                                                if (!messageObject3.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                                this.keyboardHeight = z14 ? 1 : 0;
                                                                z66 = r3;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                if (this.hasFactCheck) {
                                                                }
                                                                z67 = this.drawPinnedBottom;
                                                                if (z67) {
                                                                }
                                                                if (!z67) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject3.type != 19) {
                                                                }
                                                                if (this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType == 5) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z21) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                                if (stickerSetLinkIcon2 != null) {
                                                                }
                                                                textLayoutBlocks4 = null;
                                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                                r32 = z66;
                                                                r62 = textLayoutBlocks4;
                                                                if (z77) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = r32;
                                                                this.highlightCaptionToSetEnd = -1;
                                                                this.highlightCaptionToSetStart = -1;
                                                                updateFlagSecure();
                                                            }
                                                            this.captionAbove = (tLRPC$Message72 != null && tLRPC$Message72.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                                            this.isSmallImage = false;
                                                            this.lastLoadingSizeTotal = 0L;
                                                            if (this.scheduledInvalidate) {
                                                            }
                                                            this.links.clear();
                                                            this.pressedLink = null;
                                                            this.pressedEmoji = null;
                                                            this.pressedLinkType = -1;
                                                            messageObject23.forceUpdate = false;
                                                            this.drawPhotoImage = false;
                                                            this.drawMediaCheckBox = false;
                                                            this.hasLinkPreview = false;
                                                            this.hasFactCheck = false;
                                                            this.hasOldCaptionPreview = false;
                                                            this.hasGamePreview = false;
                                                            this.hasInvoicePreview = false;
                                                            this.hasInvoicePrice = false;
                                                            this.commentButtonPressed = false;
                                                            this.instantPressed = false;
                                                            this.gradientDrawable = null;
                                                            groupMedia = this.groupMedia;
                                                            if (groupMedia != null) {
                                                            }
                                                            setInstantButtonPressed(false);
                                                            if (!z8) {
                                                            }
                                                            resetContactButtonsPressedState();
                                                            buttonBounce = this.titleLabelBounce;
                                                            if (buttonBounce != null) {
                                                            }
                                                            this.drawnContactButtonsFlag = 0;
                                                            this.drawContact = false;
                                                            this.drawContactView = false;
                                                            this.drawContactSendMessage = false;
                                                            this.drawContactAdd = false;
                                                            this.spoilerPressed = null;
                                                            this.isSpoilerRevealing = false;
                                                            this.linkPreviewPressed = false;
                                                            this.buttonPressed = 0;
                                                            this.additionalTimeOffsetY = 0;
                                                            this.miniButtonPressed = 0;
                                                            this.pressedBotButton = -1;
                                                            this.pressedVoteButton = -1;
                                                            this.pollHintPressed = false;
                                                            this.psaHintPressed = false;
                                                            this.linkPreviewHeight = 0;
                                                            this.factCheckHeight = 0;
                                                            this.mediaOffsetY = 0;
                                                            this.documentAttachType = 0;
                                                            this.documentAttach = null;
                                                            this.descriptionLayout = null;
                                                            this.titleLayout = null;
                                                            this.videoInfoLayout = null;
                                                            this.photosCountLayout = null;
                                                            this.siteNameLayout = null;
                                                            this.titleLabelLayout = null;
                                                            this.authorLayout = null;
                                                            this.captionFullWidth = 0;
                                                            this.prevCaptionLayout = this.captionLayout;
                                                            this.captionLayout = null;
                                                            this.captionWidth = 0;
                                                            this.captionHeight = 0;
                                                            this.captionOffsetX = 0;
                                                            this.currentCaption = null;
                                                            this.docTitleLayout = null;
                                                            this.drawImageButton = false;
                                                            this.drawVideoImageButton = false;
                                                            this.currentPhotoLocation = null;
                                                            this.currentPhotoThumbLocation = null;
                                                            this.currentPhotoObject = null;
                                                            this.photoParentObject = null;
                                                            this.currentPhotoObjectThumb = null;
                                                            this.currentPhotoObjectThumbStripped = null;
                                                            if (!z9) {
                                                            }
                                                            this.currentPhotoFilter = null;
                                                            this.buttonState = -1;
                                                            this.miniButtonState = -1;
                                                            this.hasMiniProgress = 0;
                                                            if (this.addedForTest) {
                                                            }
                                                            this.addedForTest = false;
                                                            this.photoNotSet = false;
                                                            this.drawBackground = true;
                                                            this.drawName = false;
                                                            this.useSeekBarWaveform = false;
                                                            this.useTranscribeButton = false;
                                                            this.drawInstantView = false;
                                                            this.drawInstantViewType = 0;
                                                            this.instantViewButtonText = null;
                                                            this.drawForwardedName = false;
                                                            this.drawCommentButton = false;
                                                            this.photoImage.setSideClip(0.0f);
                                                            this.photoImage.setAspectFit(false);
                                                            this.photoImage.setRoundRadiusEnabled(true);
                                                            this.fitPhotoImage = false;
                                                            this.gradientShader = null;
                                                            this.motionBackgroundDrawable = null;
                                                            this.imageBackgroundColor = 0;
                                                            this.imageBackgroundGradientColor1 = 0;
                                                            this.imageBackgroundGradientColor2 = 0;
                                                            this.imageBackgroundIntensity = 0.0f;
                                                            this.imageBackgroundGradientColor3 = 0;
                                                            this.imageBackgroundGradientRotation = 45;
                                                            this.imageBackgroundSideColor = 0;
                                                            this.mediaBackground = false;
                                                            this.isMedia = false;
                                                            expiredStoryView = this.expiredStoryView;
                                                            if (expiredStoryView != null) {
                                                            }
                                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222 = messageObject23.messageOwner.fwd_from;
                                                            if (tLRPC$MessageFwdHeader222 == null) {
                                                            }
                                                            this.hasPsaHint = z11;
                                                            if (z11) {
                                                            }
                                                            this.photoImage.setAlpha(1.0f);
                                                            if (!z9) {
                                                            }
                                                            this.pollButtons.clear();
                                                            this.availableTimeWidth = 0;
                                                            this.photoImage.setForceLoading(false);
                                                            this.photoImage.setNeedsQualityThumb(false);
                                                            this.photoImage.setShouldGenerateQualityThumb(false);
                                                            this.photoImage.setAllowDecodeSingleFrame(false);
                                                            this.photoImage.setColorFilter(null);
                                                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                            if (!z77) {
                                                            }
                                                            messageObject23.reactionsChanged = false;
                                                            TLRPC$Message tLRPC$Message8222 = messageObject23.messageOwner;
                                                            if (tLRPC$Message8222 == null) {
                                                            }
                                                            if (messageObject.shouldDrawReactions()) {
                                                            }
                                                            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                            if (z9) {
                                                            }
                                                            groupedMessages4 = this.currentMessagesGroup;
                                                            if (groupedMessages4 != null) {
                                                            }
                                                            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                            if (this.hasDiscussion) {
                                                            }
                                                            repliesCount = getRepliesCount();
                                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                                            }
                                                            if (!this.isRepliesChat) {
                                                            }
                                                            this.commentLayout = null;
                                                            this.drawCommentNumber = false;
                                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                            i = 9;
                                                            if (messageObject23.type != 27) {
                                                            }
                                                            messageObject2 = messageObject23;
                                                            messageObject3 = messageObject2;
                                                            z13 = true;
                                                            i2 = 4;
                                                            z14 = false;
                                                            z15 = true;
                                                            z70 = z13;
                                                            z21 = z15;
                                                            c2 = 0;
                                                            r3 = z70;
                                                            if (this.currentPosition != null) {
                                                            }
                                                            if (!messageObject.isSponsored()) {
                                                            }
                                                            c5 = c2;
                                                            messageObject19 = this.currentMessageObject;
                                                            if (messageObject19.eventId == 0) {
                                                            }
                                                            i127 = 3;
                                                            this.botButtons.clear();
                                                            if (z77) {
                                                            }
                                                            if (!messageObject3.isRestrictedMessage) {
                                                            }
                                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                                            this.keyboardHeight = z14 ? 1 : 0;
                                                            z66 = r3;
                                                            if (this.drawCommentButton) {
                                                            }
                                                            if (this.hasFactCheck) {
                                                            }
                                                            z67 = this.drawPinnedBottom;
                                                            if (z67) {
                                                            }
                                                            if (!z67) {
                                                            }
                                                            if (!this.mediaBackground) {
                                                            }
                                                            if (messageObject3.type != 19) {
                                                            }
                                                            if (this.drawPhotoImage) {
                                                            }
                                                            if (this.documentAttachType == 5) {
                                                            }
                                                            calculateUnlockXY();
                                                            if (z21) {
                                                            }
                                                            updateAnimatedEmojis();
                                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                                            if (stickerSetLinkIcon2 != null) {
                                                            }
                                                            textLayoutBlocks4 = null;
                                                            this.prevCaptionLayout = textLayoutBlocks4;
                                                            r32 = z66;
                                                            r62 = textLayoutBlocks4;
                                                            if (z77) {
                                                            }
                                                            transcribeButton = this.transcribeButton;
                                                            if (transcribeButton != null) {
                                                            }
                                                            updateWaveform();
                                                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                            }
                                                            chatMessageCellDelegate2 = this.delegate;
                                                            if (chatMessageCellDelegate2 != null) {
                                                            }
                                                            this.accessibilityVirtualViewBounds.clear();
                                                            this.transitionParams.updatePhotoImageX = r32;
                                                            this.highlightCaptionToSetEnd = -1;
                                                            this.highlightCaptionToSetStart = -1;
                                                            updateFlagSecure();
                                                        }
                                                        this.isAvatarVisible = true;
                                                        z10 = true;
                                                        this.wasLayout = false;
                                                        this.groupPhotoInvisible = false;
                                                        this.animatingDrawVideoImageButton = 0;
                                                        this.drawVideoSize = false;
                                                        this.canStreamVideo = false;
                                                        this.animatingNoSound = 0;
                                                        this.drawSideButton2 = 0;
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        this.hasReplyQuote = false;
                                                        this.isReplyQuote = false;
                                                        this.replyNameLayout = null;
                                                        this.adminLayout = null;
                                                        this.boostCounterBounds = null;
                                                        this.boostCounterSpan = null;
                                                        this.checkOnlyButtonPressed = false;
                                                        this.replyTextLayout = null;
                                                        AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                                        this.lastReplyMessage = null;
                                                        this.hasEmbed = false;
                                                        this.autoPlayingMedia = false;
                                                        this.replyNameWidth = 0;
                                                        this.replyTextWidth = 0;
                                                        this.replyTextHeight = 0;
                                                        this.viaWidth = 0;
                                                        this.viaNameWidth = 0;
                                                        this.viaOnly = false;
                                                        this.addedCaptionHeight = 0;
                                                        this.currentReplyPhoto = null;
                                                        this.currentUser = null;
                                                        this.currentChat = null;
                                                        this.currentViaBotUser = null;
                                                        this.instantViewLayout = null;
                                                        this.drawNameLayout = false;
                                                        this.linkPreviewAbove = false;
                                                        TLRPC$Message tLRPC$Message722 = this.currentMessageObject.messageOwner;
                                                        this.captionAbove = (tLRPC$Message722 != null && tLRPC$Message722.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                                        this.isSmallImage = false;
                                                        this.lastLoadingSizeTotal = 0L;
                                                        if (this.scheduledInvalidate) {
                                                        }
                                                        this.links.clear();
                                                        this.pressedLink = null;
                                                        this.pressedEmoji = null;
                                                        this.pressedLinkType = -1;
                                                        messageObject23.forceUpdate = false;
                                                        this.drawPhotoImage = false;
                                                        this.drawMediaCheckBox = false;
                                                        this.hasLinkPreview = false;
                                                        this.hasFactCheck = false;
                                                        this.hasOldCaptionPreview = false;
                                                        this.hasGamePreview = false;
                                                        this.hasInvoicePreview = false;
                                                        this.hasInvoicePrice = false;
                                                        this.commentButtonPressed = false;
                                                        this.instantPressed = false;
                                                        this.gradientDrawable = null;
                                                        groupMedia = this.groupMedia;
                                                        if (groupMedia != null) {
                                                        }
                                                        setInstantButtonPressed(false);
                                                        if (!z8) {
                                                        }
                                                        resetContactButtonsPressedState();
                                                        buttonBounce = this.titleLabelBounce;
                                                        if (buttonBounce != null) {
                                                        }
                                                        this.drawnContactButtonsFlag = 0;
                                                        this.drawContact = false;
                                                        this.drawContactView = false;
                                                        this.drawContactSendMessage = false;
                                                        this.drawContactAdd = false;
                                                        this.spoilerPressed = null;
                                                        this.isSpoilerRevealing = false;
                                                        this.linkPreviewPressed = false;
                                                        this.buttonPressed = 0;
                                                        this.additionalTimeOffsetY = 0;
                                                        this.miniButtonPressed = 0;
                                                        this.pressedBotButton = -1;
                                                        this.pressedVoteButton = -1;
                                                        this.pollHintPressed = false;
                                                        this.psaHintPressed = false;
                                                        this.linkPreviewHeight = 0;
                                                        this.factCheckHeight = 0;
                                                        this.mediaOffsetY = 0;
                                                        this.documentAttachType = 0;
                                                        this.documentAttach = null;
                                                        this.descriptionLayout = null;
                                                        this.titleLayout = null;
                                                        this.videoInfoLayout = null;
                                                        this.photosCountLayout = null;
                                                        this.siteNameLayout = null;
                                                        this.titleLabelLayout = null;
                                                        this.authorLayout = null;
                                                        this.captionFullWidth = 0;
                                                        this.prevCaptionLayout = this.captionLayout;
                                                        this.captionLayout = null;
                                                        this.captionWidth = 0;
                                                        this.captionHeight = 0;
                                                        this.captionOffsetX = 0;
                                                        this.currentCaption = null;
                                                        this.docTitleLayout = null;
                                                        this.drawImageButton = false;
                                                        this.drawVideoImageButton = false;
                                                        this.currentPhotoLocation = null;
                                                        this.currentPhotoThumbLocation = null;
                                                        this.currentPhotoObject = null;
                                                        this.photoParentObject = null;
                                                        this.currentPhotoObjectThumb = null;
                                                        this.currentPhotoObjectThumbStripped = null;
                                                        if (!z9) {
                                                        }
                                                        this.currentPhotoFilter = null;
                                                        this.buttonState = -1;
                                                        this.miniButtonState = -1;
                                                        this.hasMiniProgress = 0;
                                                        if (this.addedForTest) {
                                                        }
                                                        this.addedForTest = false;
                                                        this.photoNotSet = false;
                                                        this.drawBackground = true;
                                                        this.drawName = false;
                                                        this.useSeekBarWaveform = false;
                                                        this.useTranscribeButton = false;
                                                        this.drawInstantView = false;
                                                        this.drawInstantViewType = 0;
                                                        this.instantViewButtonText = null;
                                                        this.drawForwardedName = false;
                                                        this.drawCommentButton = false;
                                                        this.photoImage.setSideClip(0.0f);
                                                        this.photoImage.setAspectFit(false);
                                                        this.photoImage.setRoundRadiusEnabled(true);
                                                        this.fitPhotoImage = false;
                                                        this.gradientShader = null;
                                                        this.motionBackgroundDrawable = null;
                                                        this.imageBackgroundColor = 0;
                                                        this.imageBackgroundGradientColor1 = 0;
                                                        this.imageBackgroundGradientColor2 = 0;
                                                        this.imageBackgroundIntensity = 0.0f;
                                                        this.imageBackgroundGradientColor3 = 0;
                                                        this.imageBackgroundGradientRotation = 45;
                                                        this.imageBackgroundSideColor = 0;
                                                        this.mediaBackground = false;
                                                        this.isMedia = false;
                                                        expiredStoryView = this.expiredStoryView;
                                                        if (expiredStoryView != null) {
                                                        }
                                                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222 = messageObject23.messageOwner.fwd_from;
                                                        if (tLRPC$MessageFwdHeader2222 == null) {
                                                        }
                                                        this.hasPsaHint = z11;
                                                        if (z11) {
                                                        }
                                                        this.photoImage.setAlpha(1.0f);
                                                        if (!z9) {
                                                        }
                                                        this.pollButtons.clear();
                                                        this.availableTimeWidth = 0;
                                                        this.photoImage.setForceLoading(false);
                                                        this.photoImage.setNeedsQualityThumb(false);
                                                        this.photoImage.setShouldGenerateQualityThumb(false);
                                                        this.photoImage.setAllowDecodeSingleFrame(false);
                                                        this.photoImage.setColorFilter(null);
                                                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                        if (!z77) {
                                                        }
                                                        messageObject23.reactionsChanged = false;
                                                        TLRPC$Message tLRPC$Message82222 = messageObject23.messageOwner;
                                                        if (tLRPC$Message82222 == null) {
                                                        }
                                                        if (messageObject.shouldDrawReactions()) {
                                                        }
                                                        this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                        if (z9) {
                                                        }
                                                        groupedMessages4 = this.currentMessagesGroup;
                                                        if (groupedMessages4 != null) {
                                                        }
                                                        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                        if (this.hasDiscussion) {
                                                        }
                                                        repliesCount = getRepliesCount();
                                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                                        }
                                                        if (!this.isRepliesChat) {
                                                        }
                                                        this.commentLayout = null;
                                                        this.drawCommentNumber = false;
                                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                        i = 9;
                                                        if (messageObject23.type != 27) {
                                                        }
                                                        messageObject2 = messageObject23;
                                                        messageObject3 = messageObject2;
                                                        z13 = true;
                                                        i2 = 4;
                                                        z14 = false;
                                                        z15 = true;
                                                        z70 = z13;
                                                        z21 = z15;
                                                        c2 = 0;
                                                        r3 = z70;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        if (!messageObject.isSponsored()) {
                                                        }
                                                        c5 = c2;
                                                        messageObject19 = this.currentMessageObject;
                                                        if (messageObject19.eventId == 0) {
                                                        }
                                                        i127 = 3;
                                                        this.botButtons.clear();
                                                        if (z77) {
                                                        }
                                                        if (!messageObject3.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                                        this.keyboardHeight = z14 ? 1 : 0;
                                                        z66 = r3;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        if (this.hasFactCheck) {
                                                        }
                                                        z67 = this.drawPinnedBottom;
                                                        if (z67) {
                                                        }
                                                        if (!z67) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject3.type != 19) {
                                                        }
                                                        if (this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType == 5) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z21) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                                        if (stickerSetLinkIcon2 != null) {
                                                        }
                                                        textLayoutBlocks4 = null;
                                                        this.prevCaptionLayout = textLayoutBlocks4;
                                                        r32 = z66;
                                                        r62 = textLayoutBlocks4;
                                                        if (z77) {
                                                        }
                                                        transcribeButton = this.transcribeButton;
                                                        if (transcribeButton != null) {
                                                        }
                                                        updateWaveform();
                                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                        }
                                                        chatMessageCellDelegate2 = this.delegate;
                                                        if (chatMessageCellDelegate2 != null) {
                                                        }
                                                        this.accessibilityVirtualViewBounds.clear();
                                                        this.transitionParams.updatePhotoImageX = r32;
                                                        this.highlightCaptionToSetEnd = -1;
                                                        this.highlightCaptionToSetStart = -1;
                                                        updateFlagSecure();
                                                    }
                                                    this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                                    needDrawAvatar = needDrawAvatar();
                                                    if (messageObject23.customAvatarDrawable == null) {
                                                    }
                                                    this.isAvatarVisible = true;
                                                    z10 = true;
                                                    this.wasLayout = false;
                                                    this.groupPhotoInvisible = false;
                                                    this.animatingDrawVideoImageButton = 0;
                                                    this.drawVideoSize = false;
                                                    this.canStreamVideo = false;
                                                    this.animatingNoSound = 0;
                                                    this.drawSideButton2 = 0;
                                                    if (messageObject.isSponsored()) {
                                                    }
                                                    this.hasReplyQuote = false;
                                                    this.isReplyQuote = false;
                                                    this.replyNameLayout = null;
                                                    this.adminLayout = null;
                                                    this.boostCounterBounds = null;
                                                    this.boostCounterSpan = null;
                                                    this.checkOnlyButtonPressed = false;
                                                    this.replyTextLayout = null;
                                                    AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                                    this.lastReplyMessage = null;
                                                    this.hasEmbed = false;
                                                    this.autoPlayingMedia = false;
                                                    this.replyNameWidth = 0;
                                                    this.replyTextWidth = 0;
                                                    this.replyTextHeight = 0;
                                                    this.viaWidth = 0;
                                                    this.viaNameWidth = 0;
                                                    this.viaOnly = false;
                                                    this.addedCaptionHeight = 0;
                                                    this.currentReplyPhoto = null;
                                                    this.currentUser = null;
                                                    this.currentChat = null;
                                                    this.currentViaBotUser = null;
                                                    this.instantViewLayout = null;
                                                    this.drawNameLayout = false;
                                                    this.linkPreviewAbove = false;
                                                    TLRPC$Message tLRPC$Message7222 = this.currentMessageObject.messageOwner;
                                                    this.captionAbove = (tLRPC$Message7222 != null && tLRPC$Message7222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                                    this.isSmallImage = false;
                                                    this.lastLoadingSizeTotal = 0L;
                                                    if (this.scheduledInvalidate) {
                                                    }
                                                    this.links.clear();
                                                    this.pressedLink = null;
                                                    this.pressedEmoji = null;
                                                    this.pressedLinkType = -1;
                                                    messageObject23.forceUpdate = false;
                                                    this.drawPhotoImage = false;
                                                    this.drawMediaCheckBox = false;
                                                    this.hasLinkPreview = false;
                                                    this.hasFactCheck = false;
                                                    this.hasOldCaptionPreview = false;
                                                    this.hasGamePreview = false;
                                                    this.hasInvoicePreview = false;
                                                    this.hasInvoicePrice = false;
                                                    this.commentButtonPressed = false;
                                                    this.instantPressed = false;
                                                    this.gradientDrawable = null;
                                                    groupMedia = this.groupMedia;
                                                    if (groupMedia != null) {
                                                    }
                                                    setInstantButtonPressed(false);
                                                    if (!z8) {
                                                    }
                                                    resetContactButtonsPressedState();
                                                    buttonBounce = this.titleLabelBounce;
                                                    if (buttonBounce != null) {
                                                    }
                                                    this.drawnContactButtonsFlag = 0;
                                                    this.drawContact = false;
                                                    this.drawContactView = false;
                                                    this.drawContactSendMessage = false;
                                                    this.drawContactAdd = false;
                                                    this.spoilerPressed = null;
                                                    this.isSpoilerRevealing = false;
                                                    this.linkPreviewPressed = false;
                                                    this.buttonPressed = 0;
                                                    this.additionalTimeOffsetY = 0;
                                                    this.miniButtonPressed = 0;
                                                    this.pressedBotButton = -1;
                                                    this.pressedVoteButton = -1;
                                                    this.pollHintPressed = false;
                                                    this.psaHintPressed = false;
                                                    this.linkPreviewHeight = 0;
                                                    this.factCheckHeight = 0;
                                                    this.mediaOffsetY = 0;
                                                    this.documentAttachType = 0;
                                                    this.documentAttach = null;
                                                    this.descriptionLayout = null;
                                                    this.titleLayout = null;
                                                    this.videoInfoLayout = null;
                                                    this.photosCountLayout = null;
                                                    this.siteNameLayout = null;
                                                    this.titleLabelLayout = null;
                                                    this.authorLayout = null;
                                                    this.captionFullWidth = 0;
                                                    this.prevCaptionLayout = this.captionLayout;
                                                    this.captionLayout = null;
                                                    this.captionWidth = 0;
                                                    this.captionHeight = 0;
                                                    this.captionOffsetX = 0;
                                                    this.currentCaption = null;
                                                    this.docTitleLayout = null;
                                                    this.drawImageButton = false;
                                                    this.drawVideoImageButton = false;
                                                    this.currentPhotoLocation = null;
                                                    this.currentPhotoThumbLocation = null;
                                                    this.currentPhotoObject = null;
                                                    this.photoParentObject = null;
                                                    this.currentPhotoObjectThumb = null;
                                                    this.currentPhotoObjectThumbStripped = null;
                                                    if (!z9) {
                                                    }
                                                    this.currentPhotoFilter = null;
                                                    this.buttonState = -1;
                                                    this.miniButtonState = -1;
                                                    this.hasMiniProgress = 0;
                                                    if (this.addedForTest) {
                                                    }
                                                    this.addedForTest = false;
                                                    this.photoNotSet = false;
                                                    this.drawBackground = true;
                                                    this.drawName = false;
                                                    this.useSeekBarWaveform = false;
                                                    this.useTranscribeButton = false;
                                                    this.drawInstantView = false;
                                                    this.drawInstantViewType = 0;
                                                    this.instantViewButtonText = null;
                                                    this.drawForwardedName = false;
                                                    this.drawCommentButton = false;
                                                    this.photoImage.setSideClip(0.0f);
                                                    this.photoImage.setAspectFit(false);
                                                    this.photoImage.setRoundRadiusEnabled(true);
                                                    this.fitPhotoImage = false;
                                                    this.gradientShader = null;
                                                    this.motionBackgroundDrawable = null;
                                                    this.imageBackgroundColor = 0;
                                                    this.imageBackgroundGradientColor1 = 0;
                                                    this.imageBackgroundGradientColor2 = 0;
                                                    this.imageBackgroundIntensity = 0.0f;
                                                    this.imageBackgroundGradientColor3 = 0;
                                                    this.imageBackgroundGradientRotation = 45;
                                                    this.imageBackgroundSideColor = 0;
                                                    this.mediaBackground = false;
                                                    this.isMedia = false;
                                                    expiredStoryView = this.expiredStoryView;
                                                    if (expiredStoryView != null) {
                                                    }
                                                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222 = messageObject23.messageOwner.fwd_from;
                                                    if (tLRPC$MessageFwdHeader22222 == null) {
                                                    }
                                                    this.hasPsaHint = z11;
                                                    if (z11) {
                                                    }
                                                    this.photoImage.setAlpha(1.0f);
                                                    if (!z9) {
                                                    }
                                                    this.pollButtons.clear();
                                                    this.availableTimeWidth = 0;
                                                    this.photoImage.setForceLoading(false);
                                                    this.photoImage.setNeedsQualityThumb(false);
                                                    this.photoImage.setShouldGenerateQualityThumb(false);
                                                    this.photoImage.setAllowDecodeSingleFrame(false);
                                                    this.photoImage.setColorFilter(null);
                                                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                    if (!z77) {
                                                    }
                                                    messageObject23.reactionsChanged = false;
                                                    TLRPC$Message tLRPC$Message822222 = messageObject23.messageOwner;
                                                    if (tLRPC$Message822222 == null) {
                                                    }
                                                    if (messageObject.shouldDrawReactions()) {
                                                    }
                                                    this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                    if (z9) {
                                                    }
                                                    groupedMessages4 = this.currentMessagesGroup;
                                                    if (groupedMessages4 != null) {
                                                    }
                                                    isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                    if (this.hasDiscussion) {
                                                    }
                                                    repliesCount = getRepliesCount();
                                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                                    }
                                                    if (!this.isRepliesChat) {
                                                    }
                                                    this.commentLayout = null;
                                                    this.drawCommentNumber = false;
                                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                    i = 9;
                                                    if (messageObject23.type != 27) {
                                                    }
                                                    messageObject2 = messageObject23;
                                                    messageObject3 = messageObject2;
                                                    z13 = true;
                                                    i2 = 4;
                                                    z14 = false;
                                                    z15 = true;
                                                    z70 = z13;
                                                    z21 = z15;
                                                    c2 = 0;
                                                    r3 = z70;
                                                    if (this.currentPosition != null) {
                                                    }
                                                    if (!messageObject.isSponsored()) {
                                                    }
                                                    c5 = c2;
                                                    messageObject19 = this.currentMessageObject;
                                                    if (messageObject19.eventId == 0) {
                                                    }
                                                    i127 = 3;
                                                    this.botButtons.clear();
                                                    if (z77) {
                                                    }
                                                    if (!messageObject3.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                                    this.keyboardHeight = z14 ? 1 : 0;
                                                    z66 = r3;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    if (this.hasFactCheck) {
                                                    }
                                                    z67 = this.drawPinnedBottom;
                                                    if (z67) {
                                                    }
                                                    if (!z67) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject3.type != 19) {
                                                    }
                                                    if (this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType == 5) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z21) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                                    if (stickerSetLinkIcon2 != null) {
                                                    }
                                                    textLayoutBlocks4 = null;
                                                    this.prevCaptionLayout = textLayoutBlocks4;
                                                    r32 = z66;
                                                    r62 = textLayoutBlocks4;
                                                    if (z77) {
                                                    }
                                                    transcribeButton = this.transcribeButton;
                                                    if (transcribeButton != null) {
                                                    }
                                                    updateWaveform();
                                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                    }
                                                    chatMessageCellDelegate2 = this.delegate;
                                                    if (chatMessageCellDelegate2 != null) {
                                                    }
                                                    this.accessibilityVirtualViewBounds.clear();
                                                    this.transitionParams.updatePhotoImageX = r32;
                                                    this.highlightCaptionToSetEnd = -1;
                                                    this.highlightCaptionToSetStart = -1;
                                                    updateFlagSecure();
                                                }
                                                this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                                this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                                needDrawAvatar = needDrawAvatar();
                                                if (messageObject23.customAvatarDrawable == null) {
                                                }
                                                this.isAvatarVisible = true;
                                                z10 = true;
                                                this.wasLayout = false;
                                                this.groupPhotoInvisible = false;
                                                this.animatingDrawVideoImageButton = 0;
                                                this.drawVideoSize = false;
                                                this.canStreamVideo = false;
                                                this.animatingNoSound = 0;
                                                this.drawSideButton2 = 0;
                                                if (messageObject.isSponsored()) {
                                                }
                                                this.hasReplyQuote = false;
                                                this.isReplyQuote = false;
                                                this.replyNameLayout = null;
                                                this.adminLayout = null;
                                                this.boostCounterBounds = null;
                                                this.boostCounterSpan = null;
                                                this.checkOnlyButtonPressed = false;
                                                this.replyTextLayout = null;
                                                AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                                this.lastReplyMessage = null;
                                                this.hasEmbed = false;
                                                this.autoPlayingMedia = false;
                                                this.replyNameWidth = 0;
                                                this.replyTextWidth = 0;
                                                this.replyTextHeight = 0;
                                                this.viaWidth = 0;
                                                this.viaNameWidth = 0;
                                                this.viaOnly = false;
                                                this.addedCaptionHeight = 0;
                                                this.currentReplyPhoto = null;
                                                this.currentUser = null;
                                                this.currentChat = null;
                                                this.currentViaBotUser = null;
                                                this.instantViewLayout = null;
                                                this.drawNameLayout = false;
                                                this.linkPreviewAbove = false;
                                                TLRPC$Message tLRPC$Message72222 = this.currentMessageObject.messageOwner;
                                                this.captionAbove = (tLRPC$Message72222 != null && tLRPC$Message72222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                                this.isSmallImage = false;
                                                this.lastLoadingSizeTotal = 0L;
                                                if (this.scheduledInvalidate) {
                                                }
                                                this.links.clear();
                                                this.pressedLink = null;
                                                this.pressedEmoji = null;
                                                this.pressedLinkType = -1;
                                                messageObject23.forceUpdate = false;
                                                this.drawPhotoImage = false;
                                                this.drawMediaCheckBox = false;
                                                this.hasLinkPreview = false;
                                                this.hasFactCheck = false;
                                                this.hasOldCaptionPreview = false;
                                                this.hasGamePreview = false;
                                                this.hasInvoicePreview = false;
                                                this.hasInvoicePrice = false;
                                                this.commentButtonPressed = false;
                                                this.instantPressed = false;
                                                this.gradientDrawable = null;
                                                groupMedia = this.groupMedia;
                                                if (groupMedia != null) {
                                                }
                                                setInstantButtonPressed(false);
                                                if (!z8) {
                                                }
                                                resetContactButtonsPressedState();
                                                buttonBounce = this.titleLabelBounce;
                                                if (buttonBounce != null) {
                                                }
                                                this.drawnContactButtonsFlag = 0;
                                                this.drawContact = false;
                                                this.drawContactView = false;
                                                this.drawContactSendMessage = false;
                                                this.drawContactAdd = false;
                                                this.spoilerPressed = null;
                                                this.isSpoilerRevealing = false;
                                                this.linkPreviewPressed = false;
                                                this.buttonPressed = 0;
                                                this.additionalTimeOffsetY = 0;
                                                this.miniButtonPressed = 0;
                                                this.pressedBotButton = -1;
                                                this.pressedVoteButton = -1;
                                                this.pollHintPressed = false;
                                                this.psaHintPressed = false;
                                                this.linkPreviewHeight = 0;
                                                this.factCheckHeight = 0;
                                                this.mediaOffsetY = 0;
                                                this.documentAttachType = 0;
                                                this.documentAttach = null;
                                                this.descriptionLayout = null;
                                                this.titleLayout = null;
                                                this.videoInfoLayout = null;
                                                this.photosCountLayout = null;
                                                this.siteNameLayout = null;
                                                this.titleLabelLayout = null;
                                                this.authorLayout = null;
                                                this.captionFullWidth = 0;
                                                this.prevCaptionLayout = this.captionLayout;
                                                this.captionLayout = null;
                                                this.captionWidth = 0;
                                                this.captionHeight = 0;
                                                this.captionOffsetX = 0;
                                                this.currentCaption = null;
                                                this.docTitleLayout = null;
                                                this.drawImageButton = false;
                                                this.drawVideoImageButton = false;
                                                this.currentPhotoLocation = null;
                                                this.currentPhotoThumbLocation = null;
                                                this.currentPhotoObject = null;
                                                this.photoParentObject = null;
                                                this.currentPhotoObjectThumb = null;
                                                this.currentPhotoObjectThumbStripped = null;
                                                if (!z9) {
                                                }
                                                this.currentPhotoFilter = null;
                                                this.buttonState = -1;
                                                this.miniButtonState = -1;
                                                this.hasMiniProgress = 0;
                                                if (this.addedForTest) {
                                                }
                                                this.addedForTest = false;
                                                this.photoNotSet = false;
                                                this.drawBackground = true;
                                                this.drawName = false;
                                                this.useSeekBarWaveform = false;
                                                this.useTranscribeButton = false;
                                                this.drawInstantView = false;
                                                this.drawInstantViewType = 0;
                                                this.instantViewButtonText = null;
                                                this.drawForwardedName = false;
                                                this.drawCommentButton = false;
                                                this.photoImage.setSideClip(0.0f);
                                                this.photoImage.setAspectFit(false);
                                                this.photoImage.setRoundRadiusEnabled(true);
                                                this.fitPhotoImage = false;
                                                this.gradientShader = null;
                                                this.motionBackgroundDrawable = null;
                                                this.imageBackgroundColor = 0;
                                                this.imageBackgroundGradientColor1 = 0;
                                                this.imageBackgroundGradientColor2 = 0;
                                                this.imageBackgroundIntensity = 0.0f;
                                                this.imageBackgroundGradientColor3 = 0;
                                                this.imageBackgroundGradientRotation = 45;
                                                this.imageBackgroundSideColor = 0;
                                                this.mediaBackground = false;
                                                this.isMedia = false;
                                                expiredStoryView = this.expiredStoryView;
                                                if (expiredStoryView != null) {
                                                }
                                                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222 = messageObject23.messageOwner.fwd_from;
                                                if (tLRPC$MessageFwdHeader222222 == null) {
                                                }
                                                this.hasPsaHint = z11;
                                                if (z11) {
                                                }
                                                this.photoImage.setAlpha(1.0f);
                                                if (!z9) {
                                                }
                                                this.pollButtons.clear();
                                                this.availableTimeWidth = 0;
                                                this.photoImage.setForceLoading(false);
                                                this.photoImage.setNeedsQualityThumb(false);
                                                this.photoImage.setShouldGenerateQualityThumb(false);
                                                this.photoImage.setAllowDecodeSingleFrame(false);
                                                this.photoImage.setColorFilter(null);
                                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                if (!z77) {
                                                }
                                                messageObject23.reactionsChanged = false;
                                                TLRPC$Message tLRPC$Message8222222 = messageObject23.messageOwner;
                                                if (tLRPC$Message8222222 == null) {
                                                }
                                                if (messageObject.shouldDrawReactions()) {
                                                }
                                                this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                                if (z9) {
                                                }
                                                groupedMessages4 = this.currentMessagesGroup;
                                                if (groupedMessages4 != null) {
                                                }
                                                isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                                if (this.hasDiscussion) {
                                                }
                                                repliesCount = getRepliesCount();
                                                if (!messageObject.shouldDrawWithoutBackground()) {
                                                }
                                                if (!this.isRepliesChat) {
                                                }
                                                this.commentLayout = null;
                                                this.drawCommentNumber = false;
                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                i = 9;
                                                if (messageObject23.type != 27) {
                                                }
                                                messageObject2 = messageObject23;
                                                messageObject3 = messageObject2;
                                                z13 = true;
                                                i2 = 4;
                                                z14 = false;
                                                z15 = true;
                                                z70 = z13;
                                                z21 = z15;
                                                c2 = 0;
                                                r3 = z70;
                                                if (this.currentPosition != null) {
                                                }
                                                if (!messageObject.isSponsored()) {
                                                }
                                                c5 = c2;
                                                messageObject19 = this.currentMessageObject;
                                                if (messageObject19.eventId == 0) {
                                                }
                                                i127 = 3;
                                                this.botButtons.clear();
                                                if (z77) {
                                                }
                                                if (!messageObject3.isRestrictedMessage) {
                                                }
                                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                                this.keyboardHeight = z14 ? 1 : 0;
                                                z66 = r3;
                                                if (this.drawCommentButton) {
                                                }
                                                if (this.hasFactCheck) {
                                                }
                                                z67 = this.drawPinnedBottom;
                                                if (z67) {
                                                }
                                                if (!z67) {
                                                }
                                                if (!this.mediaBackground) {
                                                }
                                                if (messageObject3.type != 19) {
                                                }
                                                if (this.drawPhotoImage) {
                                                }
                                                if (this.documentAttachType == 5) {
                                                }
                                                calculateUnlockXY();
                                                if (z21) {
                                                }
                                                updateAnimatedEmojis();
                                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                                if (stickerSetLinkIcon2 != null) {
                                                }
                                                textLayoutBlocks4 = null;
                                                this.prevCaptionLayout = textLayoutBlocks4;
                                                r32 = z66;
                                                r62 = textLayoutBlocks4;
                                                if (z77) {
                                                }
                                                transcribeButton = this.transcribeButton;
                                                if (transcribeButton != null) {
                                                }
                                                updateWaveform();
                                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                                if (!this.currentMessageObject.loadingCancelled) {
                                                }
                                                chatMessageCellDelegate2 = this.delegate;
                                                if (chatMessageCellDelegate2 != null) {
                                                }
                                                this.accessibilityVirtualViewBounds.clear();
                                                this.transitionParams.updatePhotoImageX = r32;
                                                this.highlightCaptionToSetEnd = -1;
                                                this.highlightCaptionToSetStart = -1;
                                                updateFlagSecure();
                                            }
                                            this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                                            this.photoImage.setCrossfadeWithOldImage(false);
                                            this.photoImage.setCrossfadeDuration(150);
                                            this.photoImage.setCrossfadeByScale(0.0f);
                                            this.photoImage.setGradientBitmap(null);
                                            this.photoImage.clearDecorators();
                                            this.photoImage.setInvalidateAll(false);
                                            this.linkPreviewY = 0;
                                            this.factCheckY = 0;
                                            this.lastTranslated = messageObject23.translated;
                                            TLRPC$Message tLRPC$Message622 = messageObject23.messageOwner;
                                            this.lastSendState = tLRPC$Message622.send_state;
                                            this.lastDeleteDate = tLRPC$Message622.destroyTime;
                                            this.lastViewsCount = tLRPC$Message622.views;
                                            this.lastRepliesCount = getRepliesCount();
                                            if (z77) {
                                            }
                                            this.gamePreviewPressed = false;
                                            this.sideButtonPressed = false;
                                            this.pressedSideButton = 0;
                                            this.hasNewLineForTime = false;
                                            this.flipImage = false;
                                            this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                            this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                            needDrawAvatar = needDrawAvatar();
                                            if (messageObject23.customAvatarDrawable == null) {
                                            }
                                            this.isAvatarVisible = true;
                                            z10 = true;
                                            this.wasLayout = false;
                                            this.groupPhotoInvisible = false;
                                            this.animatingDrawVideoImageButton = 0;
                                            this.drawVideoSize = false;
                                            this.canStreamVideo = false;
                                            this.animatingNoSound = 0;
                                            this.drawSideButton2 = 0;
                                            if (messageObject.isSponsored()) {
                                            }
                                            this.hasReplyQuote = false;
                                            this.isReplyQuote = false;
                                            this.replyNameLayout = null;
                                            this.adminLayout = null;
                                            this.boostCounterBounds = null;
                                            this.boostCounterSpan = null;
                                            this.checkOnlyButtonPressed = false;
                                            this.replyTextLayout = null;
                                            AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                            this.lastReplyMessage = null;
                                            this.hasEmbed = false;
                                            this.autoPlayingMedia = false;
                                            this.replyNameWidth = 0;
                                            this.replyTextWidth = 0;
                                            this.replyTextHeight = 0;
                                            this.viaWidth = 0;
                                            this.viaNameWidth = 0;
                                            this.viaOnly = false;
                                            this.addedCaptionHeight = 0;
                                            this.currentReplyPhoto = null;
                                            this.currentUser = null;
                                            this.currentChat = null;
                                            this.currentViaBotUser = null;
                                            this.instantViewLayout = null;
                                            this.drawNameLayout = false;
                                            this.linkPreviewAbove = false;
                                            TLRPC$Message tLRPC$Message722222 = this.currentMessageObject.messageOwner;
                                            this.captionAbove = (tLRPC$Message722222 != null && tLRPC$Message722222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                            this.isSmallImage = false;
                                            this.lastLoadingSizeTotal = 0L;
                                            if (this.scheduledInvalidate) {
                                            }
                                            this.links.clear();
                                            this.pressedLink = null;
                                            this.pressedEmoji = null;
                                            this.pressedLinkType = -1;
                                            messageObject23.forceUpdate = false;
                                            this.drawPhotoImage = false;
                                            this.drawMediaCheckBox = false;
                                            this.hasLinkPreview = false;
                                            this.hasFactCheck = false;
                                            this.hasOldCaptionPreview = false;
                                            this.hasGamePreview = false;
                                            this.hasInvoicePreview = false;
                                            this.hasInvoicePrice = false;
                                            this.commentButtonPressed = false;
                                            this.instantPressed = false;
                                            this.gradientDrawable = null;
                                            groupMedia = this.groupMedia;
                                            if (groupMedia != null) {
                                            }
                                            setInstantButtonPressed(false);
                                            if (!z8) {
                                            }
                                            resetContactButtonsPressedState();
                                            buttonBounce = this.titleLabelBounce;
                                            if (buttonBounce != null) {
                                            }
                                            this.drawnContactButtonsFlag = 0;
                                            this.drawContact = false;
                                            this.drawContactView = false;
                                            this.drawContactSendMessage = false;
                                            this.drawContactAdd = false;
                                            this.spoilerPressed = null;
                                            this.isSpoilerRevealing = false;
                                            this.linkPreviewPressed = false;
                                            this.buttonPressed = 0;
                                            this.additionalTimeOffsetY = 0;
                                            this.miniButtonPressed = 0;
                                            this.pressedBotButton = -1;
                                            this.pressedVoteButton = -1;
                                            this.pollHintPressed = false;
                                            this.psaHintPressed = false;
                                            this.linkPreviewHeight = 0;
                                            this.factCheckHeight = 0;
                                            this.mediaOffsetY = 0;
                                            this.documentAttachType = 0;
                                            this.documentAttach = null;
                                            this.descriptionLayout = null;
                                            this.titleLayout = null;
                                            this.videoInfoLayout = null;
                                            this.photosCountLayout = null;
                                            this.siteNameLayout = null;
                                            this.titleLabelLayout = null;
                                            this.authorLayout = null;
                                            this.captionFullWidth = 0;
                                            this.prevCaptionLayout = this.captionLayout;
                                            this.captionLayout = null;
                                            this.captionWidth = 0;
                                            this.captionHeight = 0;
                                            this.captionOffsetX = 0;
                                            this.currentCaption = null;
                                            this.docTitleLayout = null;
                                            this.drawImageButton = false;
                                            this.drawVideoImageButton = false;
                                            this.currentPhotoLocation = null;
                                            this.currentPhotoThumbLocation = null;
                                            this.currentPhotoObject = null;
                                            this.photoParentObject = null;
                                            this.currentPhotoObjectThumb = null;
                                            this.currentPhotoObjectThumbStripped = null;
                                            if (!z9) {
                                            }
                                            this.currentPhotoFilter = null;
                                            this.buttonState = -1;
                                            this.miniButtonState = -1;
                                            this.hasMiniProgress = 0;
                                            if (this.addedForTest) {
                                            }
                                            this.addedForTest = false;
                                            this.photoNotSet = false;
                                            this.drawBackground = true;
                                            this.drawName = false;
                                            this.useSeekBarWaveform = false;
                                            this.useTranscribeButton = false;
                                            this.drawInstantView = false;
                                            this.drawInstantViewType = 0;
                                            this.instantViewButtonText = null;
                                            this.drawForwardedName = false;
                                            this.drawCommentButton = false;
                                            this.photoImage.setSideClip(0.0f);
                                            this.photoImage.setAspectFit(false);
                                            this.photoImage.setRoundRadiusEnabled(true);
                                            this.fitPhotoImage = false;
                                            this.gradientShader = null;
                                            this.motionBackgroundDrawable = null;
                                            this.imageBackgroundColor = 0;
                                            this.imageBackgroundGradientColor1 = 0;
                                            this.imageBackgroundGradientColor2 = 0;
                                            this.imageBackgroundIntensity = 0.0f;
                                            this.imageBackgroundGradientColor3 = 0;
                                            this.imageBackgroundGradientRotation = 45;
                                            this.imageBackgroundSideColor = 0;
                                            this.mediaBackground = false;
                                            this.isMedia = false;
                                            expiredStoryView = this.expiredStoryView;
                                            if (expiredStoryView != null) {
                                            }
                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222 = messageObject23.messageOwner.fwd_from;
                                            if (tLRPC$MessageFwdHeader2222222 == null) {
                                            }
                                            this.hasPsaHint = z11;
                                            if (z11) {
                                            }
                                            this.photoImage.setAlpha(1.0f);
                                            if (!z9) {
                                            }
                                            this.pollButtons.clear();
                                            this.availableTimeWidth = 0;
                                            this.photoImage.setForceLoading(false);
                                            this.photoImage.setNeedsQualityThumb(false);
                                            this.photoImage.setShouldGenerateQualityThumb(false);
                                            this.photoImage.setAllowDecodeSingleFrame(false);
                                            this.photoImage.setColorFilter(null);
                                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                                            if (!z77) {
                                            }
                                            messageObject23.reactionsChanged = false;
                                            TLRPC$Message tLRPC$Message82222222 = messageObject23.messageOwner;
                                            if (tLRPC$Message82222222 == null) {
                                            }
                                            if (messageObject.shouldDrawReactions()) {
                                            }
                                            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                            if (z9) {
                                            }
                                            groupedMessages4 = this.currentMessagesGroup;
                                            if (groupedMessages4 != null) {
                                            }
                                            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                            if (this.hasDiscussion) {
                                            }
                                            repliesCount = getRepliesCount();
                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                            }
                                            if (!this.isRepliesChat) {
                                            }
                                            this.commentLayout = null;
                                            this.drawCommentNumber = false;
                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                            i = 9;
                                            if (messageObject23.type != 27) {
                                            }
                                            messageObject2 = messageObject23;
                                            messageObject3 = messageObject2;
                                            z13 = true;
                                            i2 = 4;
                                            z14 = false;
                                            z15 = true;
                                            z70 = z13;
                                            z21 = z15;
                                            c2 = 0;
                                            r3 = z70;
                                            if (this.currentPosition != null) {
                                            }
                                            if (!messageObject.isSponsored()) {
                                            }
                                            c5 = c2;
                                            messageObject19 = this.currentMessageObject;
                                            if (messageObject19.eventId == 0) {
                                            }
                                            i127 = 3;
                                            this.botButtons.clear();
                                            if (z77) {
                                            }
                                            if (!messageObject3.isRestrictedMessage) {
                                            }
                                            this.substractBackgroundHeight = z14 ? 1 : 0;
                                            this.keyboardHeight = z14 ? 1 : 0;
                                            z66 = r3;
                                            if (this.drawCommentButton) {
                                            }
                                            if (this.hasFactCheck) {
                                            }
                                            z67 = this.drawPinnedBottom;
                                            if (z67) {
                                            }
                                            if (!z67) {
                                            }
                                            if (!this.mediaBackground) {
                                            }
                                            if (messageObject3.type != 19) {
                                            }
                                            if (this.drawPhotoImage) {
                                            }
                                            if (this.documentAttachType == 5) {
                                            }
                                            calculateUnlockXY();
                                            if (z21) {
                                            }
                                            updateAnimatedEmojis();
                                            stickerSetLinkIcon2 = this.stickerSetIcons;
                                            if (stickerSetLinkIcon2 != null) {
                                            }
                                            textLayoutBlocks4 = null;
                                            this.prevCaptionLayout = textLayoutBlocks4;
                                            r32 = z66;
                                            r62 = textLayoutBlocks4;
                                            if (z77) {
                                            }
                                            transcribeButton = this.transcribeButton;
                                            if (transcribeButton != null) {
                                            }
                                            updateWaveform();
                                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                            if (!this.currentMessageObject.loadingCancelled) {
                                            }
                                            chatMessageCellDelegate2 = this.delegate;
                                            if (chatMessageCellDelegate2 != null) {
                                            }
                                            this.accessibilityVirtualViewBounds.clear();
                                            this.transitionParams.updatePhotoImageX = r32;
                                            this.highlightCaptionToSetEnd = -1;
                                            this.highlightCaptionToSetStart = -1;
                                            updateFlagSecure();
                                        }
                                        this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 8) != 0);
                                        boolean z7822 = this.isPlayingRound;
                                        this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                                        this.photoImage.setCrossfadeWithOldImage(false);
                                        this.photoImage.setCrossfadeDuration(150);
                                        this.photoImage.setCrossfadeByScale(0.0f);
                                        this.photoImage.setGradientBitmap(null);
                                        this.photoImage.clearDecorators();
                                        this.photoImage.setInvalidateAll(false);
                                        this.linkPreviewY = 0;
                                        this.factCheckY = 0;
                                        this.lastTranslated = messageObject23.translated;
                                        TLRPC$Message tLRPC$Message6222 = messageObject23.messageOwner;
                                        this.lastSendState = tLRPC$Message6222.send_state;
                                        this.lastDeleteDate = tLRPC$Message6222.destroyTime;
                                        this.lastViewsCount = tLRPC$Message6222.views;
                                        this.lastRepliesCount = getRepliesCount();
                                        if (z77) {
                                        }
                                        this.gamePreviewPressed = false;
                                        this.sideButtonPressed = false;
                                        this.pressedSideButton = 0;
                                        this.hasNewLineForTime = false;
                                        this.flipImage = false;
                                        this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                        this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                        needDrawAvatar = needDrawAvatar();
                                        if (messageObject23.customAvatarDrawable == null) {
                                        }
                                        this.isAvatarVisible = true;
                                        z10 = true;
                                        this.wasLayout = false;
                                        this.groupPhotoInvisible = false;
                                        this.animatingDrawVideoImageButton = 0;
                                        this.drawVideoSize = false;
                                        this.canStreamVideo = false;
                                        this.animatingNoSound = 0;
                                        this.drawSideButton2 = 0;
                                        if (messageObject.isSponsored()) {
                                        }
                                        this.hasReplyQuote = false;
                                        this.isReplyQuote = false;
                                        this.replyNameLayout = null;
                                        this.adminLayout = null;
                                        this.boostCounterBounds = null;
                                        this.boostCounterSpan = null;
                                        this.checkOnlyButtonPressed = false;
                                        this.replyTextLayout = null;
                                        AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                        this.lastReplyMessage = null;
                                        this.hasEmbed = false;
                                        this.autoPlayingMedia = false;
                                        this.replyNameWidth = 0;
                                        this.replyTextWidth = 0;
                                        this.replyTextHeight = 0;
                                        this.viaWidth = 0;
                                        this.viaNameWidth = 0;
                                        this.viaOnly = false;
                                        this.addedCaptionHeight = 0;
                                        this.currentReplyPhoto = null;
                                        this.currentUser = null;
                                        this.currentChat = null;
                                        this.currentViaBotUser = null;
                                        this.instantViewLayout = null;
                                        this.drawNameLayout = false;
                                        this.linkPreviewAbove = false;
                                        TLRPC$Message tLRPC$Message7222222 = this.currentMessageObject.messageOwner;
                                        this.captionAbove = (tLRPC$Message7222222 != null && tLRPC$Message7222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                        this.isSmallImage = false;
                                        this.lastLoadingSizeTotal = 0L;
                                        if (this.scheduledInvalidate) {
                                        }
                                        this.links.clear();
                                        this.pressedLink = null;
                                        this.pressedEmoji = null;
                                        this.pressedLinkType = -1;
                                        messageObject23.forceUpdate = false;
                                        this.drawPhotoImage = false;
                                        this.drawMediaCheckBox = false;
                                        this.hasLinkPreview = false;
                                        this.hasFactCheck = false;
                                        this.hasOldCaptionPreview = false;
                                        this.hasGamePreview = false;
                                        this.hasInvoicePreview = false;
                                        this.hasInvoicePrice = false;
                                        this.commentButtonPressed = false;
                                        this.instantPressed = false;
                                        this.gradientDrawable = null;
                                        groupMedia = this.groupMedia;
                                        if (groupMedia != null) {
                                        }
                                        setInstantButtonPressed(false);
                                        if (!z8) {
                                        }
                                        resetContactButtonsPressedState();
                                        buttonBounce = this.titleLabelBounce;
                                        if (buttonBounce != null) {
                                        }
                                        this.drawnContactButtonsFlag = 0;
                                        this.drawContact = false;
                                        this.drawContactView = false;
                                        this.drawContactSendMessage = false;
                                        this.drawContactAdd = false;
                                        this.spoilerPressed = null;
                                        this.isSpoilerRevealing = false;
                                        this.linkPreviewPressed = false;
                                        this.buttonPressed = 0;
                                        this.additionalTimeOffsetY = 0;
                                        this.miniButtonPressed = 0;
                                        this.pressedBotButton = -1;
                                        this.pressedVoteButton = -1;
                                        this.pollHintPressed = false;
                                        this.psaHintPressed = false;
                                        this.linkPreviewHeight = 0;
                                        this.factCheckHeight = 0;
                                        this.mediaOffsetY = 0;
                                        this.documentAttachType = 0;
                                        this.documentAttach = null;
                                        this.descriptionLayout = null;
                                        this.titleLayout = null;
                                        this.videoInfoLayout = null;
                                        this.photosCountLayout = null;
                                        this.siteNameLayout = null;
                                        this.titleLabelLayout = null;
                                        this.authorLayout = null;
                                        this.captionFullWidth = 0;
                                        this.prevCaptionLayout = this.captionLayout;
                                        this.captionLayout = null;
                                        this.captionWidth = 0;
                                        this.captionHeight = 0;
                                        this.captionOffsetX = 0;
                                        this.currentCaption = null;
                                        this.docTitleLayout = null;
                                        this.drawImageButton = false;
                                        this.drawVideoImageButton = false;
                                        this.currentPhotoLocation = null;
                                        this.currentPhotoThumbLocation = null;
                                        this.currentPhotoObject = null;
                                        this.photoParentObject = null;
                                        this.currentPhotoObjectThumb = null;
                                        this.currentPhotoObjectThumbStripped = null;
                                        if (!z9) {
                                        }
                                        this.currentPhotoFilter = null;
                                        this.buttonState = -1;
                                        this.miniButtonState = -1;
                                        this.hasMiniProgress = 0;
                                        if (this.addedForTest) {
                                        }
                                        this.addedForTest = false;
                                        this.photoNotSet = false;
                                        this.drawBackground = true;
                                        this.drawName = false;
                                        this.useSeekBarWaveform = false;
                                        this.useTranscribeButton = false;
                                        this.drawInstantView = false;
                                        this.drawInstantViewType = 0;
                                        this.instantViewButtonText = null;
                                        this.drawForwardedName = false;
                                        this.drawCommentButton = false;
                                        this.photoImage.setSideClip(0.0f);
                                        this.photoImage.setAspectFit(false);
                                        this.photoImage.setRoundRadiusEnabled(true);
                                        this.fitPhotoImage = false;
                                        this.gradientShader = null;
                                        this.motionBackgroundDrawable = null;
                                        this.imageBackgroundColor = 0;
                                        this.imageBackgroundGradientColor1 = 0;
                                        this.imageBackgroundGradientColor2 = 0;
                                        this.imageBackgroundIntensity = 0.0f;
                                        this.imageBackgroundGradientColor3 = 0;
                                        this.imageBackgroundGradientRotation = 45;
                                        this.imageBackgroundSideColor = 0;
                                        this.mediaBackground = false;
                                        this.isMedia = false;
                                        expiredStoryView = this.expiredStoryView;
                                        if (expiredStoryView != null) {
                                        }
                                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222 = messageObject23.messageOwner.fwd_from;
                                        if (tLRPC$MessageFwdHeader22222222 == null) {
                                        }
                                        this.hasPsaHint = z11;
                                        if (z11) {
                                        }
                                        this.photoImage.setAlpha(1.0f);
                                        if (!z9) {
                                        }
                                        this.pollButtons.clear();
                                        this.availableTimeWidth = 0;
                                        this.photoImage.setForceLoading(false);
                                        this.photoImage.setNeedsQualityThumb(false);
                                        this.photoImage.setShouldGenerateQualityThumb(false);
                                        this.photoImage.setAllowDecodeSingleFrame(false);
                                        this.photoImage.setColorFilter(null);
                                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                                        if (!z77) {
                                        }
                                        messageObject23.reactionsChanged = false;
                                        TLRPC$Message tLRPC$Message822222222 = messageObject23.messageOwner;
                                        if (tLRPC$Message822222222 == null) {
                                        }
                                        if (messageObject.shouldDrawReactions()) {
                                        }
                                        this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                        if (z9) {
                                        }
                                        groupedMessages4 = this.currentMessagesGroup;
                                        if (groupedMessages4 != null) {
                                        }
                                        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                        if (this.hasDiscussion) {
                                        }
                                        repliesCount = getRepliesCount();
                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                        }
                                        if (!this.isRepliesChat) {
                                        }
                                        this.commentLayout = null;
                                        this.drawCommentNumber = false;
                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                        i = 9;
                                        if (messageObject23.type != 27) {
                                        }
                                        messageObject2 = messageObject23;
                                        messageObject3 = messageObject2;
                                        z13 = true;
                                        i2 = 4;
                                        z14 = false;
                                        z15 = true;
                                        z70 = z13;
                                        z21 = z15;
                                        c2 = 0;
                                        r3 = z70;
                                        if (this.currentPosition != null) {
                                        }
                                        if (!messageObject.isSponsored()) {
                                        }
                                        c5 = c2;
                                        messageObject19 = this.currentMessageObject;
                                        if (messageObject19.eventId == 0) {
                                        }
                                        i127 = 3;
                                        this.botButtons.clear();
                                        if (z77) {
                                        }
                                        if (!messageObject3.isRestrictedMessage) {
                                        }
                                        this.substractBackgroundHeight = z14 ? 1 : 0;
                                        this.keyboardHeight = z14 ? 1 : 0;
                                        z66 = r3;
                                        if (this.drawCommentButton) {
                                        }
                                        if (this.hasFactCheck) {
                                        }
                                        z67 = this.drawPinnedBottom;
                                        if (z67) {
                                        }
                                        if (!z67) {
                                        }
                                        if (!this.mediaBackground) {
                                        }
                                        if (messageObject3.type != 19) {
                                        }
                                        if (this.drawPhotoImage) {
                                        }
                                        if (this.documentAttachType == 5) {
                                        }
                                        calculateUnlockXY();
                                        if (z21) {
                                        }
                                        updateAnimatedEmojis();
                                        stickerSetLinkIcon2 = this.stickerSetIcons;
                                        if (stickerSetLinkIcon2 != null) {
                                        }
                                        textLayoutBlocks4 = null;
                                        this.prevCaptionLayout = textLayoutBlocks4;
                                        r32 = z66;
                                        r62 = textLayoutBlocks4;
                                        if (z77) {
                                        }
                                        transcribeButton = this.transcribeButton;
                                        if (transcribeButton != null) {
                                        }
                                        updateWaveform();
                                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                        if (!this.currentMessageObject.loadingCancelled) {
                                        }
                                        chatMessageCellDelegate2 = this.delegate;
                                        if (chatMessageCellDelegate2 != null) {
                                        }
                                        this.accessibilityVirtualViewBounds.clear();
                                        this.transitionParams.updatePhotoImageX = r32;
                                        this.highlightCaptionToSetEnd = -1;
                                        this.highlightCaptionToSetStart = -1;
                                        updateFlagSecure();
                                    }
                                    this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition17 = this.currentPosition) == null || (groupedMessagePosition17.flags & 4) != 0);
                                    this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 8) != 0);
                                    boolean z78222 = this.isPlayingRound;
                                    this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                                    this.photoImage.setCrossfadeWithOldImage(false);
                                    this.photoImage.setCrossfadeDuration(150);
                                    this.photoImage.setCrossfadeByScale(0.0f);
                                    this.photoImage.setGradientBitmap(null);
                                    this.photoImage.clearDecorators();
                                    this.photoImage.setInvalidateAll(false);
                                    this.linkPreviewY = 0;
                                    this.factCheckY = 0;
                                    this.lastTranslated = messageObject23.translated;
                                    TLRPC$Message tLRPC$Message62222 = messageObject23.messageOwner;
                                    this.lastSendState = tLRPC$Message62222.send_state;
                                    this.lastDeleteDate = tLRPC$Message62222.destroyTime;
                                    this.lastViewsCount = tLRPC$Message62222.views;
                                    this.lastRepliesCount = getRepliesCount();
                                    if (z77) {
                                    }
                                    this.gamePreviewPressed = false;
                                    this.sideButtonPressed = false;
                                    this.pressedSideButton = 0;
                                    this.hasNewLineForTime = false;
                                    this.flipImage = false;
                                    this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                    this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                    needDrawAvatar = needDrawAvatar();
                                    if (messageObject23.customAvatarDrawable == null) {
                                    }
                                    this.isAvatarVisible = true;
                                    z10 = true;
                                    this.wasLayout = false;
                                    this.groupPhotoInvisible = false;
                                    this.animatingDrawVideoImageButton = 0;
                                    this.drawVideoSize = false;
                                    this.canStreamVideo = false;
                                    this.animatingNoSound = 0;
                                    this.drawSideButton2 = 0;
                                    if (messageObject.isSponsored()) {
                                    }
                                    this.hasReplyQuote = false;
                                    this.isReplyQuote = false;
                                    this.replyNameLayout = null;
                                    this.adminLayout = null;
                                    this.boostCounterBounds = null;
                                    this.boostCounterSpan = null;
                                    this.checkOnlyButtonPressed = false;
                                    this.replyTextLayout = null;
                                    AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                    this.lastReplyMessage = null;
                                    this.hasEmbed = false;
                                    this.autoPlayingMedia = false;
                                    this.replyNameWidth = 0;
                                    this.replyTextWidth = 0;
                                    this.replyTextHeight = 0;
                                    this.viaWidth = 0;
                                    this.viaNameWidth = 0;
                                    this.viaOnly = false;
                                    this.addedCaptionHeight = 0;
                                    this.currentReplyPhoto = null;
                                    this.currentUser = null;
                                    this.currentChat = null;
                                    this.currentViaBotUser = null;
                                    this.instantViewLayout = null;
                                    this.drawNameLayout = false;
                                    this.linkPreviewAbove = false;
                                    TLRPC$Message tLRPC$Message72222222 = this.currentMessageObject.messageOwner;
                                    this.captionAbove = (tLRPC$Message72222222 != null && tLRPC$Message72222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                    this.isSmallImage = false;
                                    this.lastLoadingSizeTotal = 0L;
                                    if (this.scheduledInvalidate) {
                                    }
                                    this.links.clear();
                                    this.pressedLink = null;
                                    this.pressedEmoji = null;
                                    this.pressedLinkType = -1;
                                    messageObject23.forceUpdate = false;
                                    this.drawPhotoImage = false;
                                    this.drawMediaCheckBox = false;
                                    this.hasLinkPreview = false;
                                    this.hasFactCheck = false;
                                    this.hasOldCaptionPreview = false;
                                    this.hasGamePreview = false;
                                    this.hasInvoicePreview = false;
                                    this.hasInvoicePrice = false;
                                    this.commentButtonPressed = false;
                                    this.instantPressed = false;
                                    this.gradientDrawable = null;
                                    groupMedia = this.groupMedia;
                                    if (groupMedia != null) {
                                    }
                                    setInstantButtonPressed(false);
                                    if (!z8) {
                                    }
                                    resetContactButtonsPressedState();
                                    buttonBounce = this.titleLabelBounce;
                                    if (buttonBounce != null) {
                                    }
                                    this.drawnContactButtonsFlag = 0;
                                    this.drawContact = false;
                                    this.drawContactView = false;
                                    this.drawContactSendMessage = false;
                                    this.drawContactAdd = false;
                                    this.spoilerPressed = null;
                                    this.isSpoilerRevealing = false;
                                    this.linkPreviewPressed = false;
                                    this.buttonPressed = 0;
                                    this.additionalTimeOffsetY = 0;
                                    this.miniButtonPressed = 0;
                                    this.pressedBotButton = -1;
                                    this.pressedVoteButton = -1;
                                    this.pollHintPressed = false;
                                    this.psaHintPressed = false;
                                    this.linkPreviewHeight = 0;
                                    this.factCheckHeight = 0;
                                    this.mediaOffsetY = 0;
                                    this.documentAttachType = 0;
                                    this.documentAttach = null;
                                    this.descriptionLayout = null;
                                    this.titleLayout = null;
                                    this.videoInfoLayout = null;
                                    this.photosCountLayout = null;
                                    this.siteNameLayout = null;
                                    this.titleLabelLayout = null;
                                    this.authorLayout = null;
                                    this.captionFullWidth = 0;
                                    this.prevCaptionLayout = this.captionLayout;
                                    this.captionLayout = null;
                                    this.captionWidth = 0;
                                    this.captionHeight = 0;
                                    this.captionOffsetX = 0;
                                    this.currentCaption = null;
                                    this.docTitleLayout = null;
                                    this.drawImageButton = false;
                                    this.drawVideoImageButton = false;
                                    this.currentPhotoLocation = null;
                                    this.currentPhotoThumbLocation = null;
                                    this.currentPhotoObject = null;
                                    this.photoParentObject = null;
                                    this.currentPhotoObjectThumb = null;
                                    this.currentPhotoObjectThumbStripped = null;
                                    if (!z9) {
                                    }
                                    this.currentPhotoFilter = null;
                                    this.buttonState = -1;
                                    this.miniButtonState = -1;
                                    this.hasMiniProgress = 0;
                                    if (this.addedForTest) {
                                    }
                                    this.addedForTest = false;
                                    this.photoNotSet = false;
                                    this.drawBackground = true;
                                    this.drawName = false;
                                    this.useSeekBarWaveform = false;
                                    this.useTranscribeButton = false;
                                    this.drawInstantView = false;
                                    this.drawInstantViewType = 0;
                                    this.instantViewButtonText = null;
                                    this.drawForwardedName = false;
                                    this.drawCommentButton = false;
                                    this.photoImage.setSideClip(0.0f);
                                    this.photoImage.setAspectFit(false);
                                    this.photoImage.setRoundRadiusEnabled(true);
                                    this.fitPhotoImage = false;
                                    this.gradientShader = null;
                                    this.motionBackgroundDrawable = null;
                                    this.imageBackgroundColor = 0;
                                    this.imageBackgroundGradientColor1 = 0;
                                    this.imageBackgroundGradientColor2 = 0;
                                    this.imageBackgroundIntensity = 0.0f;
                                    this.imageBackgroundGradientColor3 = 0;
                                    this.imageBackgroundGradientRotation = 45;
                                    this.imageBackgroundSideColor = 0;
                                    this.mediaBackground = false;
                                    this.isMedia = false;
                                    expiredStoryView = this.expiredStoryView;
                                    if (expiredStoryView != null) {
                                    }
                                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222 = messageObject23.messageOwner.fwd_from;
                                    if (tLRPC$MessageFwdHeader222222222 == null) {
                                    }
                                    this.hasPsaHint = z11;
                                    if (z11) {
                                    }
                                    this.photoImage.setAlpha(1.0f);
                                    if (!z9) {
                                    }
                                    this.pollButtons.clear();
                                    this.availableTimeWidth = 0;
                                    this.photoImage.setForceLoading(false);
                                    this.photoImage.setNeedsQualityThumb(false);
                                    this.photoImage.setShouldGenerateQualityThumb(false);
                                    this.photoImage.setAllowDecodeSingleFrame(false);
                                    this.photoImage.setColorFilter(null);
                                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                                    if (!z77) {
                                    }
                                    messageObject23.reactionsChanged = false;
                                    TLRPC$Message tLRPC$Message8222222222 = messageObject23.messageOwner;
                                    if (tLRPC$Message8222222222 == null) {
                                    }
                                    if (messageObject.shouldDrawReactions()) {
                                    }
                                    this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                    if (z9) {
                                    }
                                    groupedMessages4 = this.currentMessagesGroup;
                                    if (groupedMessages4 != null) {
                                    }
                                    isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                    if (this.hasDiscussion) {
                                    }
                                    repliesCount = getRepliesCount();
                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                    }
                                    if (!this.isRepliesChat) {
                                    }
                                    this.commentLayout = null;
                                    this.drawCommentNumber = false;
                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                    i = 9;
                                    if (messageObject23.type != 27) {
                                    }
                                    messageObject2 = messageObject23;
                                    messageObject3 = messageObject2;
                                    z13 = true;
                                    i2 = 4;
                                    z14 = false;
                                    z15 = true;
                                    z70 = z13;
                                    z21 = z15;
                                    c2 = 0;
                                    r3 = z70;
                                    if (this.currentPosition != null) {
                                    }
                                    if (!messageObject.isSponsored()) {
                                    }
                                    c5 = c2;
                                    messageObject19 = this.currentMessageObject;
                                    if (messageObject19.eventId == 0) {
                                    }
                                    i127 = 3;
                                    this.botButtons.clear();
                                    if (z77) {
                                    }
                                    if (!messageObject3.isRestrictedMessage) {
                                    }
                                    this.substractBackgroundHeight = z14 ? 1 : 0;
                                    this.keyboardHeight = z14 ? 1 : 0;
                                    z66 = r3;
                                    if (this.drawCommentButton) {
                                    }
                                    if (this.hasFactCheck) {
                                    }
                                    z67 = this.drawPinnedBottom;
                                    if (z67) {
                                    }
                                    if (!z67) {
                                    }
                                    if (!this.mediaBackground) {
                                    }
                                    if (messageObject3.type != 19) {
                                    }
                                    if (this.drawPhotoImage) {
                                    }
                                    if (this.documentAttachType == 5) {
                                    }
                                    calculateUnlockXY();
                                    if (z21) {
                                    }
                                    updateAnimatedEmojis();
                                    stickerSetLinkIcon2 = this.stickerSetIcons;
                                    if (stickerSetLinkIcon2 != null) {
                                    }
                                    textLayoutBlocks4 = null;
                                    this.prevCaptionLayout = textLayoutBlocks4;
                                    r32 = z66;
                                    r62 = textLayoutBlocks4;
                                    if (z77) {
                                    }
                                    transcribeButton = this.transcribeButton;
                                    if (transcribeButton != null) {
                                    }
                                    updateWaveform();
                                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                    if (!this.currentMessageObject.loadingCancelled) {
                                    }
                                    chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                    }
                                    this.accessibilityVirtualViewBounds.clear();
                                    this.transitionParams.updatePhotoImageX = r32;
                                    this.highlightCaptionToSetEnd = -1;
                                    this.highlightCaptionToSetStart = -1;
                                    updateFlagSecure();
                                }
                                this.drawPinnedTop = this.pinnedTop;
                                this.drawPinnedBottom = this.pinnedBottom;
                                boolean z782222 = this.isPlayingRound;
                                this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                                this.photoImage.setCrossfadeWithOldImage(false);
                                this.photoImage.setCrossfadeDuration(150);
                                this.photoImage.setCrossfadeByScale(0.0f);
                                this.photoImage.setGradientBitmap(null);
                                this.photoImage.clearDecorators();
                                this.photoImage.setInvalidateAll(false);
                                this.linkPreviewY = 0;
                                this.factCheckY = 0;
                                this.lastTranslated = messageObject23.translated;
                                TLRPC$Message tLRPC$Message622222 = messageObject23.messageOwner;
                                this.lastSendState = tLRPC$Message622222.send_state;
                                this.lastDeleteDate = tLRPC$Message622222.destroyTime;
                                this.lastViewsCount = tLRPC$Message622222.views;
                                this.lastRepliesCount = getRepliesCount();
                                if (z77) {
                                }
                                this.gamePreviewPressed = false;
                                this.sideButtonPressed = false;
                                this.pressedSideButton = 0;
                                this.hasNewLineForTime = false;
                                this.flipImage = false;
                                this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                                this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                                needDrawAvatar = needDrawAvatar();
                                if (messageObject23.customAvatarDrawable == null) {
                                }
                                this.isAvatarVisible = true;
                                z10 = true;
                                this.wasLayout = false;
                                this.groupPhotoInvisible = false;
                                this.animatingDrawVideoImageButton = 0;
                                this.drawVideoSize = false;
                                this.canStreamVideo = false;
                                this.animatingNoSound = 0;
                                this.drawSideButton2 = 0;
                                if (messageObject.isSponsored()) {
                                }
                                this.hasReplyQuote = false;
                                this.isReplyQuote = false;
                                this.replyNameLayout = null;
                                this.adminLayout = null;
                                this.boostCounterBounds = null;
                                this.boostCounterSpan = null;
                                this.checkOnlyButtonPressed = false;
                                this.replyTextLayout = null;
                                AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                                this.lastReplyMessage = null;
                                this.hasEmbed = false;
                                this.autoPlayingMedia = false;
                                this.replyNameWidth = 0;
                                this.replyTextWidth = 0;
                                this.replyTextHeight = 0;
                                this.viaWidth = 0;
                                this.viaNameWidth = 0;
                                this.viaOnly = false;
                                this.addedCaptionHeight = 0;
                                this.currentReplyPhoto = null;
                                this.currentUser = null;
                                this.currentChat = null;
                                this.currentViaBotUser = null;
                                this.instantViewLayout = null;
                                this.drawNameLayout = false;
                                this.linkPreviewAbove = false;
                                TLRPC$Message tLRPC$Message722222222 = this.currentMessageObject.messageOwner;
                                this.captionAbove = (tLRPC$Message722222222 != null && tLRPC$Message722222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                                this.isSmallImage = false;
                                this.lastLoadingSizeTotal = 0L;
                                if (this.scheduledInvalidate) {
                                }
                                this.links.clear();
                                this.pressedLink = null;
                                this.pressedEmoji = null;
                                this.pressedLinkType = -1;
                                messageObject23.forceUpdate = false;
                                this.drawPhotoImage = false;
                                this.drawMediaCheckBox = false;
                                this.hasLinkPreview = false;
                                this.hasFactCheck = false;
                                this.hasOldCaptionPreview = false;
                                this.hasGamePreview = false;
                                this.hasInvoicePreview = false;
                                this.hasInvoicePrice = false;
                                this.commentButtonPressed = false;
                                this.instantPressed = false;
                                this.gradientDrawable = null;
                                groupMedia = this.groupMedia;
                                if (groupMedia != null) {
                                }
                                setInstantButtonPressed(false);
                                if (!z8) {
                                }
                                resetContactButtonsPressedState();
                                buttonBounce = this.titleLabelBounce;
                                if (buttonBounce != null) {
                                }
                                this.drawnContactButtonsFlag = 0;
                                this.drawContact = false;
                                this.drawContactView = false;
                                this.drawContactSendMessage = false;
                                this.drawContactAdd = false;
                                this.spoilerPressed = null;
                                this.isSpoilerRevealing = false;
                                this.linkPreviewPressed = false;
                                this.buttonPressed = 0;
                                this.additionalTimeOffsetY = 0;
                                this.miniButtonPressed = 0;
                                this.pressedBotButton = -1;
                                this.pressedVoteButton = -1;
                                this.pollHintPressed = false;
                                this.psaHintPressed = false;
                                this.linkPreviewHeight = 0;
                                this.factCheckHeight = 0;
                                this.mediaOffsetY = 0;
                                this.documentAttachType = 0;
                                this.documentAttach = null;
                                this.descriptionLayout = null;
                                this.titleLayout = null;
                                this.videoInfoLayout = null;
                                this.photosCountLayout = null;
                                this.siteNameLayout = null;
                                this.titleLabelLayout = null;
                                this.authorLayout = null;
                                this.captionFullWidth = 0;
                                this.prevCaptionLayout = this.captionLayout;
                                this.captionLayout = null;
                                this.captionWidth = 0;
                                this.captionHeight = 0;
                                this.captionOffsetX = 0;
                                this.currentCaption = null;
                                this.docTitleLayout = null;
                                this.drawImageButton = false;
                                this.drawVideoImageButton = false;
                                this.currentPhotoLocation = null;
                                this.currentPhotoThumbLocation = null;
                                this.currentPhotoObject = null;
                                this.photoParentObject = null;
                                this.currentPhotoObjectThumb = null;
                                this.currentPhotoObjectThumbStripped = null;
                                if (!z9) {
                                }
                                this.currentPhotoFilter = null;
                                this.buttonState = -1;
                                this.miniButtonState = -1;
                                this.hasMiniProgress = 0;
                                if (this.addedForTest) {
                                }
                                this.addedForTest = false;
                                this.photoNotSet = false;
                                this.drawBackground = true;
                                this.drawName = false;
                                this.useSeekBarWaveform = false;
                                this.useTranscribeButton = false;
                                this.drawInstantView = false;
                                this.drawInstantViewType = 0;
                                this.instantViewButtonText = null;
                                this.drawForwardedName = false;
                                this.drawCommentButton = false;
                                this.photoImage.setSideClip(0.0f);
                                this.photoImage.setAspectFit(false);
                                this.photoImage.setRoundRadiusEnabled(true);
                                this.fitPhotoImage = false;
                                this.gradientShader = null;
                                this.motionBackgroundDrawable = null;
                                this.imageBackgroundColor = 0;
                                this.imageBackgroundGradientColor1 = 0;
                                this.imageBackgroundGradientColor2 = 0;
                                this.imageBackgroundIntensity = 0.0f;
                                this.imageBackgroundGradientColor3 = 0;
                                this.imageBackgroundGradientRotation = 45;
                                this.imageBackgroundSideColor = 0;
                                this.mediaBackground = false;
                                this.isMedia = false;
                                expiredStoryView = this.expiredStoryView;
                                if (expiredStoryView != null) {
                                }
                                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222222 = messageObject23.messageOwner.fwd_from;
                                if (tLRPC$MessageFwdHeader2222222222 == null) {
                                }
                                this.hasPsaHint = z11;
                                if (z11) {
                                }
                                this.photoImage.setAlpha(1.0f);
                                if (!z9) {
                                }
                                this.pollButtons.clear();
                                this.availableTimeWidth = 0;
                                this.photoImage.setForceLoading(false);
                                this.photoImage.setNeedsQualityThumb(false);
                                this.photoImage.setShouldGenerateQualityThumb(false);
                                this.photoImage.setAllowDecodeSingleFrame(false);
                                this.photoImage.setColorFilter(null);
                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                if (!z77) {
                                }
                                messageObject23.reactionsChanged = false;
                                TLRPC$Message tLRPC$Message82222222222 = messageObject23.messageOwner;
                                if (tLRPC$Message82222222222 == null) {
                                }
                                if (messageObject.shouldDrawReactions()) {
                                }
                                this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                                if (z9) {
                                }
                                groupedMessages4 = this.currentMessagesGroup;
                                if (groupedMessages4 != null) {
                                }
                                isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                                if (this.hasDiscussion) {
                                }
                                repliesCount = getRepliesCount();
                                if (!messageObject.shouldDrawWithoutBackground()) {
                                }
                                if (!this.isRepliesChat) {
                                }
                                this.commentLayout = null;
                                this.drawCommentNumber = false;
                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                i = 9;
                                if (messageObject23.type != 27) {
                                }
                                messageObject2 = messageObject23;
                                messageObject3 = messageObject2;
                                z13 = true;
                                i2 = 4;
                                z14 = false;
                                z15 = true;
                                z70 = z13;
                                z21 = z15;
                                c2 = 0;
                                r3 = z70;
                                if (this.currentPosition != null) {
                                }
                                if (!messageObject.isSponsored()) {
                                }
                                c5 = c2;
                                messageObject19 = this.currentMessageObject;
                                if (messageObject19.eventId == 0) {
                                }
                                i127 = 3;
                                this.botButtons.clear();
                                if (z77) {
                                }
                                if (!messageObject3.isRestrictedMessage) {
                                }
                                this.substractBackgroundHeight = z14 ? 1 : 0;
                                this.keyboardHeight = z14 ? 1 : 0;
                                z66 = r3;
                                if (this.drawCommentButton) {
                                }
                                if (this.hasFactCheck) {
                                }
                                z67 = this.drawPinnedBottom;
                                if (z67) {
                                }
                                if (!z67) {
                                }
                                if (!this.mediaBackground) {
                                }
                                if (messageObject3.type != 19) {
                                }
                                if (this.drawPhotoImage) {
                                }
                                if (this.documentAttachType == 5) {
                                }
                                calculateUnlockXY();
                                if (z21) {
                                }
                                updateAnimatedEmojis();
                                stickerSetLinkIcon2 = this.stickerSetIcons;
                                if (stickerSetLinkIcon2 != null) {
                                }
                                textLayoutBlocks4 = null;
                                this.prevCaptionLayout = textLayoutBlocks4;
                                r32 = z66;
                                r62 = textLayoutBlocks4;
                                if (z77) {
                                }
                                transcribeButton = this.transcribeButton;
                                if (transcribeButton != null) {
                                }
                                updateWaveform();
                                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                                if (!this.currentMessageObject.loadingCancelled) {
                                }
                                chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                }
                                this.accessibilityVirtualViewBounds.clear();
                                this.transitionParams.updatePhotoImageX = r32;
                                this.highlightCaptionToSetEnd = -1;
                                this.highlightCaptionToSetStart = -1;
                                updateFlagSecure();
                            }
                            this.currentMessagesGroup = null;
                            this.currentPosition = null;
                            groupedMessages3 = this.currentMessagesGroup;
                            if (groupedMessages3 == null) {
                            }
                            this.drawPinnedTop = this.pinnedTop;
                            this.drawPinnedBottom = this.pinnedBottom;
                            boolean z7822222 = this.isPlayingRound;
                            this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                            this.photoImage.setCrossfadeWithOldImage(false);
                            this.photoImage.setCrossfadeDuration(150);
                            this.photoImage.setCrossfadeByScale(0.0f);
                            this.photoImage.setGradientBitmap(null);
                            this.photoImage.clearDecorators();
                            this.photoImage.setInvalidateAll(false);
                            this.linkPreviewY = 0;
                            this.factCheckY = 0;
                            this.lastTranslated = messageObject23.translated;
                            TLRPC$Message tLRPC$Message6222222 = messageObject23.messageOwner;
                            this.lastSendState = tLRPC$Message6222222.send_state;
                            this.lastDeleteDate = tLRPC$Message6222222.destroyTime;
                            this.lastViewsCount = tLRPC$Message6222222.views;
                            this.lastRepliesCount = getRepliesCount();
                            if (z77) {
                            }
                            this.gamePreviewPressed = false;
                            this.sideButtonPressed = false;
                            this.pressedSideButton = 0;
                            this.hasNewLineForTime = false;
                            this.flipImage = false;
                            this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                            this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                            needDrawAvatar = needDrawAvatar();
                            if (messageObject23.customAvatarDrawable == null) {
                            }
                            this.isAvatarVisible = true;
                            z10 = true;
                            this.wasLayout = false;
                            this.groupPhotoInvisible = false;
                            this.animatingDrawVideoImageButton = 0;
                            this.drawVideoSize = false;
                            this.canStreamVideo = false;
                            this.animatingNoSound = 0;
                            this.drawSideButton2 = 0;
                            if (messageObject.isSponsored()) {
                            }
                            this.hasReplyQuote = false;
                            this.isReplyQuote = false;
                            this.replyNameLayout = null;
                            this.adminLayout = null;
                            this.boostCounterBounds = null;
                            this.boostCounterSpan = null;
                            this.checkOnlyButtonPressed = false;
                            this.replyTextLayout = null;
                            AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                            this.lastReplyMessage = null;
                            this.hasEmbed = false;
                            this.autoPlayingMedia = false;
                            this.replyNameWidth = 0;
                            this.replyTextWidth = 0;
                            this.replyTextHeight = 0;
                            this.viaWidth = 0;
                            this.viaNameWidth = 0;
                            this.viaOnly = false;
                            this.addedCaptionHeight = 0;
                            this.currentReplyPhoto = null;
                            this.currentUser = null;
                            this.currentChat = null;
                            this.currentViaBotUser = null;
                            this.instantViewLayout = null;
                            this.drawNameLayout = false;
                            this.linkPreviewAbove = false;
                            TLRPC$Message tLRPC$Message7222222222 = this.currentMessageObject.messageOwner;
                            this.captionAbove = (tLRPC$Message7222222222 != null && tLRPC$Message7222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                            this.isSmallImage = false;
                            this.lastLoadingSizeTotal = 0L;
                            if (this.scheduledInvalidate) {
                            }
                            this.links.clear();
                            this.pressedLink = null;
                            this.pressedEmoji = null;
                            this.pressedLinkType = -1;
                            messageObject23.forceUpdate = false;
                            this.drawPhotoImage = false;
                            this.drawMediaCheckBox = false;
                            this.hasLinkPreview = false;
                            this.hasFactCheck = false;
                            this.hasOldCaptionPreview = false;
                            this.hasGamePreview = false;
                            this.hasInvoicePreview = false;
                            this.hasInvoicePrice = false;
                            this.commentButtonPressed = false;
                            this.instantPressed = false;
                            this.gradientDrawable = null;
                            groupMedia = this.groupMedia;
                            if (groupMedia != null) {
                            }
                            setInstantButtonPressed(false);
                            if (!z8) {
                            }
                            resetContactButtonsPressedState();
                            buttonBounce = this.titleLabelBounce;
                            if (buttonBounce != null) {
                            }
                            this.drawnContactButtonsFlag = 0;
                            this.drawContact = false;
                            this.drawContactView = false;
                            this.drawContactSendMessage = false;
                            this.drawContactAdd = false;
                            this.spoilerPressed = null;
                            this.isSpoilerRevealing = false;
                            this.linkPreviewPressed = false;
                            this.buttonPressed = 0;
                            this.additionalTimeOffsetY = 0;
                            this.miniButtonPressed = 0;
                            this.pressedBotButton = -1;
                            this.pressedVoteButton = -1;
                            this.pollHintPressed = false;
                            this.psaHintPressed = false;
                            this.linkPreviewHeight = 0;
                            this.factCheckHeight = 0;
                            this.mediaOffsetY = 0;
                            this.documentAttachType = 0;
                            this.documentAttach = null;
                            this.descriptionLayout = null;
                            this.titleLayout = null;
                            this.videoInfoLayout = null;
                            this.photosCountLayout = null;
                            this.siteNameLayout = null;
                            this.titleLabelLayout = null;
                            this.authorLayout = null;
                            this.captionFullWidth = 0;
                            this.prevCaptionLayout = this.captionLayout;
                            this.captionLayout = null;
                            this.captionWidth = 0;
                            this.captionHeight = 0;
                            this.captionOffsetX = 0;
                            this.currentCaption = null;
                            this.docTitleLayout = null;
                            this.drawImageButton = false;
                            this.drawVideoImageButton = false;
                            this.currentPhotoLocation = null;
                            this.currentPhotoThumbLocation = null;
                            this.currentPhotoObject = null;
                            this.photoParentObject = null;
                            this.currentPhotoObjectThumb = null;
                            this.currentPhotoObjectThumbStripped = null;
                            if (!z9) {
                            }
                            this.currentPhotoFilter = null;
                            this.buttonState = -1;
                            this.miniButtonState = -1;
                            this.hasMiniProgress = 0;
                            if (this.addedForTest) {
                            }
                            this.addedForTest = false;
                            this.photoNotSet = false;
                            this.drawBackground = true;
                            this.drawName = false;
                            this.useSeekBarWaveform = false;
                            this.useTranscribeButton = false;
                            this.drawInstantView = false;
                            this.drawInstantViewType = 0;
                            this.instantViewButtonText = null;
                            this.drawForwardedName = false;
                            this.drawCommentButton = false;
                            this.photoImage.setSideClip(0.0f);
                            this.photoImage.setAspectFit(false);
                            this.photoImage.setRoundRadiusEnabled(true);
                            this.fitPhotoImage = false;
                            this.gradientShader = null;
                            this.motionBackgroundDrawable = null;
                            this.imageBackgroundColor = 0;
                            this.imageBackgroundGradientColor1 = 0;
                            this.imageBackgroundGradientColor2 = 0;
                            this.imageBackgroundIntensity = 0.0f;
                            this.imageBackgroundGradientColor3 = 0;
                            this.imageBackgroundGradientRotation = 45;
                            this.imageBackgroundSideColor = 0;
                            this.mediaBackground = false;
                            this.isMedia = false;
                            expiredStoryView = this.expiredStoryView;
                            if (expiredStoryView != null) {
                            }
                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222222 = messageObject23.messageOwner.fwd_from;
                            if (tLRPC$MessageFwdHeader22222222222 == null) {
                            }
                            this.hasPsaHint = z11;
                            if (z11) {
                            }
                            this.photoImage.setAlpha(1.0f);
                            if (!z9) {
                            }
                            this.pollButtons.clear();
                            this.availableTimeWidth = 0;
                            this.photoImage.setForceLoading(false);
                            this.photoImage.setNeedsQualityThumb(false);
                            this.photoImage.setShouldGenerateQualityThumb(false);
                            this.photoImage.setAllowDecodeSingleFrame(false);
                            this.photoImage.setColorFilter(null);
                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                            if (!z77) {
                            }
                            messageObject23.reactionsChanged = false;
                            TLRPC$Message tLRPC$Message822222222222 = messageObject23.messageOwner;
                            if (tLRPC$Message822222222222 == null) {
                            }
                            if (messageObject.shouldDrawReactions()) {
                            }
                            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                            if (z9) {
                            }
                            groupedMessages4 = this.currentMessagesGroup;
                            if (groupedMessages4 != null) {
                            }
                            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                            if (this.hasDiscussion) {
                            }
                            repliesCount = getRepliesCount();
                            if (!messageObject.shouldDrawWithoutBackground()) {
                            }
                            if (!this.isRepliesChat) {
                            }
                            this.commentLayout = null;
                            this.drawCommentNumber = false;
                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                            i = 9;
                            if (messageObject23.type != 27) {
                            }
                            messageObject2 = messageObject23;
                            messageObject3 = messageObject2;
                            z13 = true;
                            i2 = 4;
                            z14 = false;
                            z15 = true;
                            z70 = z13;
                            z21 = z15;
                            c2 = 0;
                            r3 = z70;
                            if (this.currentPosition != null) {
                            }
                            if (!messageObject.isSponsored()) {
                            }
                            c5 = c2;
                            messageObject19 = this.currentMessageObject;
                            if (messageObject19.eventId == 0) {
                            }
                            i127 = 3;
                            this.botButtons.clear();
                            if (z77) {
                            }
                            if (!messageObject3.isRestrictedMessage) {
                            }
                            this.substractBackgroundHeight = z14 ? 1 : 0;
                            this.keyboardHeight = z14 ? 1 : 0;
                            z66 = r3;
                            if (this.drawCommentButton) {
                            }
                            if (this.hasFactCheck) {
                            }
                            z67 = this.drawPinnedBottom;
                            if (z67) {
                            }
                            if (!z67) {
                            }
                            if (!this.mediaBackground) {
                            }
                            if (messageObject3.type != 19) {
                            }
                            if (this.drawPhotoImage) {
                            }
                            if (this.documentAttachType == 5) {
                            }
                            calculateUnlockXY();
                            if (z21) {
                            }
                            updateAnimatedEmojis();
                            stickerSetLinkIcon2 = this.stickerSetIcons;
                            if (stickerSetLinkIcon2 != null) {
                            }
                            textLayoutBlocks4 = null;
                            this.prevCaptionLayout = textLayoutBlocks4;
                            r32 = z66;
                            r62 = textLayoutBlocks4;
                            if (z77) {
                            }
                            transcribeButton = this.transcribeButton;
                            if (transcribeButton != null) {
                            }
                            updateWaveform();
                            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                            if (!this.currentMessageObject.loadingCancelled) {
                            }
                            chatMessageCellDelegate2 = this.delegate;
                            if (chatMessageCellDelegate2 != null) {
                            }
                            this.accessibilityVirtualViewBounds.clear();
                            this.transitionParams.updatePhotoImageX = r32;
                            this.highlightCaptionToSetEnd = -1;
                            this.highlightCaptionToSetStart = -1;
                            updateFlagSecure();
                        }
                        int i14722 = 5;
                        if (z9) {
                        }
                        this.updatedContent = true;
                        stickerSetLinkIcon = this.stickerSetIcons;
                        if (stickerSetLinkIcon != null) {
                        }
                        this.wasPinned = this.isPinned;
                        this.pinnedBottom = z;
                        this.pinnedTop = z2;
                        this.currentMessageObject = messageObject23;
                        this.currentMessagesGroup = groupedMessages;
                        this.lastTime = -2.0d;
                        this.lastPostAuthor = messageObject23.messageOwner.post_author;
                        if (!z77) {
                        }
                        this.isHighlightedAnimated = false;
                        this.wasTranscriptionOpen = false;
                        if (this.highlightedQuote) {
                        }
                        this.highlightedQuote = false;
                        this.widthBeforeNewTimeLine = -1;
                        groupedMessages2 = this.currentMessagesGroup;
                        if (groupedMessages2 != null) {
                        }
                        this.currentMessagesGroup = null;
                        this.currentPosition = null;
                        groupedMessages3 = this.currentMessagesGroup;
                        if (groupedMessages3 == null) {
                        }
                        this.drawPinnedTop = this.pinnedTop;
                        this.drawPinnedBottom = this.pinnedBottom;
                        boolean z78222222 = this.isPlayingRound;
                        this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                        this.photoImage.setCrossfadeWithOldImage(false);
                        this.photoImage.setCrossfadeDuration(150);
                        this.photoImage.setCrossfadeByScale(0.0f);
                        this.photoImage.setGradientBitmap(null);
                        this.photoImage.clearDecorators();
                        this.photoImage.setInvalidateAll(false);
                        this.linkPreviewY = 0;
                        this.factCheckY = 0;
                        this.lastTranslated = messageObject23.translated;
                        TLRPC$Message tLRPC$Message62222222 = messageObject23.messageOwner;
                        this.lastSendState = tLRPC$Message62222222.send_state;
                        this.lastDeleteDate = tLRPC$Message62222222.destroyTime;
                        this.lastViewsCount = tLRPC$Message62222222.views;
                        this.lastRepliesCount = getRepliesCount();
                        if (z77) {
                        }
                        this.gamePreviewPressed = false;
                        this.sideButtonPressed = false;
                        this.pressedSideButton = 0;
                        this.hasNewLineForTime = false;
                        this.flipImage = false;
                        this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                        this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                        needDrawAvatar = needDrawAvatar();
                        if (messageObject23.customAvatarDrawable == null) {
                        }
                        this.isAvatarVisible = true;
                        z10 = true;
                        this.wasLayout = false;
                        this.groupPhotoInvisible = false;
                        this.animatingDrawVideoImageButton = 0;
                        this.drawVideoSize = false;
                        this.canStreamVideo = false;
                        this.animatingNoSound = 0;
                        this.drawSideButton2 = 0;
                        if (messageObject.isSponsored()) {
                        }
                        this.hasReplyQuote = false;
                        this.isReplyQuote = false;
                        this.replyNameLayout = null;
                        this.adminLayout = null;
                        this.boostCounterBounds = null;
                        this.boostCounterSpan = null;
                        this.checkOnlyButtonPressed = false;
                        this.replyTextLayout = null;
                        AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                        this.lastReplyMessage = null;
                        this.hasEmbed = false;
                        this.autoPlayingMedia = false;
                        this.replyNameWidth = 0;
                        this.replyTextWidth = 0;
                        this.replyTextHeight = 0;
                        this.viaWidth = 0;
                        this.viaNameWidth = 0;
                        this.viaOnly = false;
                        this.addedCaptionHeight = 0;
                        this.currentReplyPhoto = null;
                        this.currentUser = null;
                        this.currentChat = null;
                        this.currentViaBotUser = null;
                        this.instantViewLayout = null;
                        this.drawNameLayout = false;
                        this.linkPreviewAbove = false;
                        TLRPC$Message tLRPC$Message72222222222 = this.currentMessageObject.messageOwner;
                        this.captionAbove = (tLRPC$Message72222222222 != null && tLRPC$Message72222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                        this.isSmallImage = false;
                        this.lastLoadingSizeTotal = 0L;
                        if (this.scheduledInvalidate) {
                        }
                        this.links.clear();
                        this.pressedLink = null;
                        this.pressedEmoji = null;
                        this.pressedLinkType = -1;
                        messageObject23.forceUpdate = false;
                        this.drawPhotoImage = false;
                        this.drawMediaCheckBox = false;
                        this.hasLinkPreview = false;
                        this.hasFactCheck = false;
                        this.hasOldCaptionPreview = false;
                        this.hasGamePreview = false;
                        this.hasInvoicePreview = false;
                        this.hasInvoicePrice = false;
                        this.commentButtonPressed = false;
                        this.instantPressed = false;
                        this.gradientDrawable = null;
                        groupMedia = this.groupMedia;
                        if (groupMedia != null) {
                        }
                        setInstantButtonPressed(false);
                        if (!z8) {
                        }
                        resetContactButtonsPressedState();
                        buttonBounce = this.titleLabelBounce;
                        if (buttonBounce != null) {
                        }
                        this.drawnContactButtonsFlag = 0;
                        this.drawContact = false;
                        this.drawContactView = false;
                        this.drawContactSendMessage = false;
                        this.drawContactAdd = false;
                        this.spoilerPressed = null;
                        this.isSpoilerRevealing = false;
                        this.linkPreviewPressed = false;
                        this.buttonPressed = 0;
                        this.additionalTimeOffsetY = 0;
                        this.miniButtonPressed = 0;
                        this.pressedBotButton = -1;
                        this.pressedVoteButton = -1;
                        this.pollHintPressed = false;
                        this.psaHintPressed = false;
                        this.linkPreviewHeight = 0;
                        this.factCheckHeight = 0;
                        this.mediaOffsetY = 0;
                        this.documentAttachType = 0;
                        this.documentAttach = null;
                        this.descriptionLayout = null;
                        this.titleLayout = null;
                        this.videoInfoLayout = null;
                        this.photosCountLayout = null;
                        this.siteNameLayout = null;
                        this.titleLabelLayout = null;
                        this.authorLayout = null;
                        this.captionFullWidth = 0;
                        this.prevCaptionLayout = this.captionLayout;
                        this.captionLayout = null;
                        this.captionWidth = 0;
                        this.captionHeight = 0;
                        this.captionOffsetX = 0;
                        this.currentCaption = null;
                        this.docTitleLayout = null;
                        this.drawImageButton = false;
                        this.drawVideoImageButton = false;
                        this.currentPhotoLocation = null;
                        this.currentPhotoThumbLocation = null;
                        this.currentPhotoObject = null;
                        this.photoParentObject = null;
                        this.currentPhotoObjectThumb = null;
                        this.currentPhotoObjectThumbStripped = null;
                        if (!z9) {
                        }
                        this.currentPhotoFilter = null;
                        this.buttonState = -1;
                        this.miniButtonState = -1;
                        this.hasMiniProgress = 0;
                        if (this.addedForTest) {
                        }
                        this.addedForTest = false;
                        this.photoNotSet = false;
                        this.drawBackground = true;
                        this.drawName = false;
                        this.useSeekBarWaveform = false;
                        this.useTranscribeButton = false;
                        this.drawInstantView = false;
                        this.drawInstantViewType = 0;
                        this.instantViewButtonText = null;
                        this.drawForwardedName = false;
                        this.drawCommentButton = false;
                        this.photoImage.setSideClip(0.0f);
                        this.photoImage.setAspectFit(false);
                        this.photoImage.setRoundRadiusEnabled(true);
                        this.fitPhotoImage = false;
                        this.gradientShader = null;
                        this.motionBackgroundDrawable = null;
                        this.imageBackgroundColor = 0;
                        this.imageBackgroundGradientColor1 = 0;
                        this.imageBackgroundGradientColor2 = 0;
                        this.imageBackgroundIntensity = 0.0f;
                        this.imageBackgroundGradientColor3 = 0;
                        this.imageBackgroundGradientRotation = 45;
                        this.imageBackgroundSideColor = 0;
                        this.mediaBackground = false;
                        this.isMedia = false;
                        expiredStoryView = this.expiredStoryView;
                        if (expiredStoryView != null) {
                        }
                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222222 = messageObject23.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader222222222222 == null) {
                        }
                        this.hasPsaHint = z11;
                        if (z11) {
                        }
                        this.photoImage.setAlpha(1.0f);
                        if (!z9) {
                        }
                        this.pollButtons.clear();
                        this.availableTimeWidth = 0;
                        this.photoImage.setForceLoading(false);
                        this.photoImage.setNeedsQualityThumb(false);
                        this.photoImage.setShouldGenerateQualityThumb(false);
                        this.photoImage.setAllowDecodeSingleFrame(false);
                        this.photoImage.setColorFilter(null);
                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                        if (!z77) {
                        }
                        messageObject23.reactionsChanged = false;
                        TLRPC$Message tLRPC$Message8222222222222 = messageObject23.messageOwner;
                        if (tLRPC$Message8222222222222 == null) {
                        }
                        if (messageObject.shouldDrawReactions()) {
                        }
                        this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                        if (z9) {
                        }
                        groupedMessages4 = this.currentMessagesGroup;
                        if (groupedMessages4 != null) {
                        }
                        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                        if (this.hasDiscussion) {
                        }
                        repliesCount = getRepliesCount();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                        }
                        if (!this.isRepliesChat) {
                        }
                        this.commentLayout = null;
                        this.drawCommentNumber = false;
                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                        i = 9;
                        if (messageObject23.type != 27) {
                        }
                        messageObject2 = messageObject23;
                        messageObject3 = messageObject2;
                        z13 = true;
                        i2 = 4;
                        z14 = false;
                        z15 = true;
                        z70 = z13;
                        z21 = z15;
                        c2 = 0;
                        r3 = z70;
                        if (this.currentPosition != null) {
                        }
                        if (!messageObject.isSponsored()) {
                        }
                        c5 = c2;
                        messageObject19 = this.currentMessageObject;
                        if (messageObject19.eventId == 0) {
                        }
                        i127 = 3;
                        this.botButtons.clear();
                        if (z77) {
                        }
                        if (!messageObject3.isRestrictedMessage) {
                        }
                        this.substractBackgroundHeight = z14 ? 1 : 0;
                        this.keyboardHeight = z14 ? 1 : 0;
                        z66 = r3;
                        if (this.drawCommentButton) {
                        }
                        if (this.hasFactCheck) {
                        }
                        z67 = this.drawPinnedBottom;
                        if (z67) {
                        }
                        if (!z67) {
                        }
                        if (!this.mediaBackground) {
                        }
                        if (messageObject3.type != 19) {
                        }
                        if (this.drawPhotoImage) {
                        }
                        if (this.documentAttachType == 5) {
                        }
                        calculateUnlockXY();
                        if (z21) {
                        }
                        updateAnimatedEmojis();
                        stickerSetLinkIcon2 = this.stickerSetIcons;
                        if (stickerSetLinkIcon2 != null) {
                        }
                        textLayoutBlocks4 = null;
                        this.prevCaptionLayout = textLayoutBlocks4;
                        r32 = z66;
                        r62 = textLayoutBlocks4;
                        if (z77) {
                        }
                        transcribeButton = this.transcribeButton;
                        if (transcribeButton != null) {
                        }
                        updateWaveform();
                        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                        if (!this.currentMessageObject.loadingCancelled) {
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null) {
                        }
                        this.accessibilityVirtualViewBounds.clear();
                        this.transitionParams.updatePhotoImageX = r32;
                        this.highlightCaptionToSetEnd = -1;
                        this.highlightCaptionToSetStart = -1;
                        updateFlagSecure();
                    }
                    z8 = z71;
                    this.animatePollAvatars = false;
                    if (z8) {
                    }
                    if (!z77) {
                    }
                    if (!z6) {
                    }
                    if (z3) {
                    }
                    int i147222 = 5;
                    if (z9) {
                    }
                    this.updatedContent = true;
                    stickerSetLinkIcon = this.stickerSetIcons;
                    if (stickerSetLinkIcon != null) {
                    }
                    this.wasPinned = this.isPinned;
                    this.pinnedBottom = z;
                    this.pinnedTop = z2;
                    this.currentMessageObject = messageObject23;
                    this.currentMessagesGroup = groupedMessages;
                    this.lastTime = -2.0d;
                    this.lastPostAuthor = messageObject23.messageOwner.post_author;
                    if (!z77) {
                    }
                    this.isHighlightedAnimated = false;
                    this.wasTranscriptionOpen = false;
                    if (this.highlightedQuote) {
                    }
                    this.highlightedQuote = false;
                    this.widthBeforeNewTimeLine = -1;
                    groupedMessages2 = this.currentMessagesGroup;
                    if (groupedMessages2 != null) {
                    }
                    this.currentMessagesGroup = null;
                    this.currentPosition = null;
                    groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 == null) {
                    }
                    this.drawPinnedTop = this.pinnedTop;
                    this.drawPinnedBottom = this.pinnedBottom;
                    boolean z782222222 = this.isPlayingRound;
                    this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                    this.photoImage.setCrossfadeWithOldImage(false);
                    this.photoImage.setCrossfadeDuration(150);
                    this.photoImage.setCrossfadeByScale(0.0f);
                    this.photoImage.setGradientBitmap(null);
                    this.photoImage.clearDecorators();
                    this.photoImage.setInvalidateAll(false);
                    this.linkPreviewY = 0;
                    this.factCheckY = 0;
                    this.lastTranslated = messageObject23.translated;
                    TLRPC$Message tLRPC$Message622222222 = messageObject23.messageOwner;
                    this.lastSendState = tLRPC$Message622222222.send_state;
                    this.lastDeleteDate = tLRPC$Message622222222.destroyTime;
                    this.lastViewsCount = tLRPC$Message622222222.views;
                    this.lastRepliesCount = getRepliesCount();
                    if (z77) {
                    }
                    this.gamePreviewPressed = false;
                    this.sideButtonPressed = false;
                    this.pressedSideButton = 0;
                    this.hasNewLineForTime = false;
                    this.flipImage = false;
                    this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                    this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                    needDrawAvatar = needDrawAvatar();
                    if (messageObject23.customAvatarDrawable == null) {
                    }
                    this.isAvatarVisible = true;
                    z10 = true;
                    this.wasLayout = false;
                    this.groupPhotoInvisible = false;
                    this.animatingDrawVideoImageButton = 0;
                    this.drawVideoSize = false;
                    this.canStreamVideo = false;
                    this.animatingNoSound = 0;
                    this.drawSideButton2 = 0;
                    if (messageObject.isSponsored()) {
                    }
                    this.hasReplyQuote = false;
                    this.isReplyQuote = false;
                    this.replyNameLayout = null;
                    this.adminLayout = null;
                    this.boostCounterBounds = null;
                    this.boostCounterSpan = null;
                    this.checkOnlyButtonPressed = false;
                    this.replyTextLayout = null;
                    AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                    this.lastReplyMessage = null;
                    this.hasEmbed = false;
                    this.autoPlayingMedia = false;
                    this.replyNameWidth = 0;
                    this.replyTextWidth = 0;
                    this.replyTextHeight = 0;
                    this.viaWidth = 0;
                    this.viaNameWidth = 0;
                    this.viaOnly = false;
                    this.addedCaptionHeight = 0;
                    this.currentReplyPhoto = null;
                    this.currentUser = null;
                    this.currentChat = null;
                    this.currentViaBotUser = null;
                    this.instantViewLayout = null;
                    this.drawNameLayout = false;
                    this.linkPreviewAbove = false;
                    TLRPC$Message tLRPC$Message722222222222 = this.currentMessageObject.messageOwner;
                    this.captionAbove = (tLRPC$Message722222222222 != null && tLRPC$Message722222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                    this.isSmallImage = false;
                    this.lastLoadingSizeTotal = 0L;
                    if (this.scheduledInvalidate) {
                    }
                    this.links.clear();
                    this.pressedLink = null;
                    this.pressedEmoji = null;
                    this.pressedLinkType = -1;
                    messageObject23.forceUpdate = false;
                    this.drawPhotoImage = false;
                    this.drawMediaCheckBox = false;
                    this.hasLinkPreview = false;
                    this.hasFactCheck = false;
                    this.hasOldCaptionPreview = false;
                    this.hasGamePreview = false;
                    this.hasInvoicePreview = false;
                    this.hasInvoicePrice = false;
                    this.commentButtonPressed = false;
                    this.instantPressed = false;
                    this.gradientDrawable = null;
                    groupMedia = this.groupMedia;
                    if (groupMedia != null) {
                    }
                    setInstantButtonPressed(false);
                    if (!z8) {
                    }
                    resetContactButtonsPressedState();
                    buttonBounce = this.titleLabelBounce;
                    if (buttonBounce != null) {
                    }
                    this.drawnContactButtonsFlag = 0;
                    this.drawContact = false;
                    this.drawContactView = false;
                    this.drawContactSendMessage = false;
                    this.drawContactAdd = false;
                    this.spoilerPressed = null;
                    this.isSpoilerRevealing = false;
                    this.linkPreviewPressed = false;
                    this.buttonPressed = 0;
                    this.additionalTimeOffsetY = 0;
                    this.miniButtonPressed = 0;
                    this.pressedBotButton = -1;
                    this.pressedVoteButton = -1;
                    this.pollHintPressed = false;
                    this.psaHintPressed = false;
                    this.linkPreviewHeight = 0;
                    this.factCheckHeight = 0;
                    this.mediaOffsetY = 0;
                    this.documentAttachType = 0;
                    this.documentAttach = null;
                    this.descriptionLayout = null;
                    this.titleLayout = null;
                    this.videoInfoLayout = null;
                    this.photosCountLayout = null;
                    this.siteNameLayout = null;
                    this.titleLabelLayout = null;
                    this.authorLayout = null;
                    this.captionFullWidth = 0;
                    this.prevCaptionLayout = this.captionLayout;
                    this.captionLayout = null;
                    this.captionWidth = 0;
                    this.captionHeight = 0;
                    this.captionOffsetX = 0;
                    this.currentCaption = null;
                    this.docTitleLayout = null;
                    this.drawImageButton = false;
                    this.drawVideoImageButton = false;
                    this.currentPhotoLocation = null;
                    this.currentPhotoThumbLocation = null;
                    this.currentPhotoObject = null;
                    this.photoParentObject = null;
                    this.currentPhotoObjectThumb = null;
                    this.currentPhotoObjectThumbStripped = null;
                    if (!z9) {
                    }
                    this.currentPhotoFilter = null;
                    this.buttonState = -1;
                    this.miniButtonState = -1;
                    this.hasMiniProgress = 0;
                    if (this.addedForTest) {
                    }
                    this.addedForTest = false;
                    this.photoNotSet = false;
                    this.drawBackground = true;
                    this.drawName = false;
                    this.useSeekBarWaveform = false;
                    this.useTranscribeButton = false;
                    this.drawInstantView = false;
                    this.drawInstantViewType = 0;
                    this.instantViewButtonText = null;
                    this.drawForwardedName = false;
                    this.drawCommentButton = false;
                    this.photoImage.setSideClip(0.0f);
                    this.photoImage.setAspectFit(false);
                    this.photoImage.setRoundRadiusEnabled(true);
                    this.fitPhotoImage = false;
                    this.gradientShader = null;
                    this.motionBackgroundDrawable = null;
                    this.imageBackgroundColor = 0;
                    this.imageBackgroundGradientColor1 = 0;
                    this.imageBackgroundGradientColor2 = 0;
                    this.imageBackgroundIntensity = 0.0f;
                    this.imageBackgroundGradientColor3 = 0;
                    this.imageBackgroundGradientRotation = 45;
                    this.imageBackgroundSideColor = 0;
                    this.mediaBackground = false;
                    this.isMedia = false;
                    expiredStoryView = this.expiredStoryView;
                    if (expiredStoryView != null) {
                    }
                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222222222 = messageObject23.messageOwner.fwd_from;
                    if (tLRPC$MessageFwdHeader2222222222222 == null) {
                    }
                    this.hasPsaHint = z11;
                    if (z11) {
                    }
                    this.photoImage.setAlpha(1.0f);
                    if (!z9) {
                    }
                    this.pollButtons.clear();
                    this.availableTimeWidth = 0;
                    this.photoImage.setForceLoading(false);
                    this.photoImage.setNeedsQualityThumb(false);
                    this.photoImage.setShouldGenerateQualityThumb(false);
                    this.photoImage.setAllowDecodeSingleFrame(false);
                    this.photoImage.setColorFilter(null);
                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                    if (!z77) {
                    }
                    messageObject23.reactionsChanged = false;
                    TLRPC$Message tLRPC$Message82222222222222 = messageObject23.messageOwner;
                    if (tLRPC$Message82222222222222 == null) {
                    }
                    if (messageObject.shouldDrawReactions()) {
                    }
                    this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                    if (z9) {
                    }
                    groupedMessages4 = this.currentMessagesGroup;
                    if (groupedMessages4 != null) {
                    }
                    isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                    if (this.hasDiscussion) {
                    }
                    repliesCount = getRepliesCount();
                    if (!messageObject.shouldDrawWithoutBackground()) {
                    }
                    if (!this.isRepliesChat) {
                    }
                    this.commentLayout = null;
                    this.drawCommentNumber = false;
                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                    i = 9;
                    if (messageObject23.type != 27) {
                    }
                    messageObject2 = messageObject23;
                    messageObject3 = messageObject2;
                    z13 = true;
                    i2 = 4;
                    z14 = false;
                    z15 = true;
                    z70 = z13;
                    z21 = z15;
                    c2 = 0;
                    r3 = z70;
                    if (this.currentPosition != null) {
                    }
                    if (!messageObject.isSponsored()) {
                    }
                    c5 = c2;
                    messageObject19 = this.currentMessageObject;
                    if (messageObject19.eventId == 0) {
                    }
                    i127 = 3;
                    this.botButtons.clear();
                    if (z77) {
                    }
                    if (!messageObject3.isRestrictedMessage) {
                    }
                    this.substractBackgroundHeight = z14 ? 1 : 0;
                    this.keyboardHeight = z14 ? 1 : 0;
                    z66 = r3;
                    if (this.drawCommentButton) {
                    }
                    if (this.hasFactCheck) {
                    }
                    z67 = this.drawPinnedBottom;
                    if (z67) {
                    }
                    if (!z67) {
                    }
                    if (!this.mediaBackground) {
                    }
                    if (messageObject3.type != 19) {
                    }
                    if (this.drawPhotoImage) {
                    }
                    if (this.documentAttachType == 5) {
                    }
                    calculateUnlockXY();
                    if (z21) {
                    }
                    updateAnimatedEmojis();
                    stickerSetLinkIcon2 = this.stickerSetIcons;
                    if (stickerSetLinkIcon2 != null) {
                    }
                    textLayoutBlocks4 = null;
                    this.prevCaptionLayout = textLayoutBlocks4;
                    r32 = z66;
                    r62 = textLayoutBlocks4;
                    if (z77) {
                    }
                    transcribeButton = this.transcribeButton;
                    if (transcribeButton != null) {
                    }
                    updateWaveform();
                    updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                    if (!this.currentMessageObject.loadingCancelled) {
                    }
                    chatMessageCellDelegate2 = this.delegate;
                    if (chatMessageCellDelegate2 != null) {
                    }
                    this.accessibilityVirtualViewBounds.clear();
                    this.transitionParams.updatePhotoImageX = r32;
                    this.highlightCaptionToSetEnd = -1;
                    this.highlightCaptionToSetStart = -1;
                    updateFlagSecure();
                }
                if (!z71) {
                }
                tLRPC$Poll2 = this.lastPoll;
                if (tLRPC$Poll2 == tLRPC$Poll) {
                }
                z8 = z71;
                this.animatePollAvatars = false;
                if (z8) {
                }
                if (!z77) {
                }
                if (!z6) {
                }
                if (z3) {
                }
                int i1472222 = 5;
                if (z9) {
                }
                this.updatedContent = true;
                stickerSetLinkIcon = this.stickerSetIcons;
                if (stickerSetLinkIcon != null) {
                }
                this.wasPinned = this.isPinned;
                this.pinnedBottom = z;
                this.pinnedTop = z2;
                this.currentMessageObject = messageObject23;
                this.currentMessagesGroup = groupedMessages;
                this.lastTime = -2.0d;
                this.lastPostAuthor = messageObject23.messageOwner.post_author;
                if (!z77) {
                }
                this.isHighlightedAnimated = false;
                this.wasTranscriptionOpen = false;
                if (this.highlightedQuote) {
                }
                this.highlightedQuote = false;
                this.widthBeforeNewTimeLine = -1;
                groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                }
                this.currentMessagesGroup = null;
                this.currentPosition = null;
                groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 == null) {
                }
                this.drawPinnedTop = this.pinnedTop;
                this.drawPinnedBottom = this.pinnedBottom;
                boolean z7822222222 = this.isPlayingRound;
                this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                this.photoImage.setCrossfadeWithOldImage(false);
                this.photoImage.setCrossfadeDuration(150);
                this.photoImage.setCrossfadeByScale(0.0f);
                this.photoImage.setGradientBitmap(null);
                this.photoImage.clearDecorators();
                this.photoImage.setInvalidateAll(false);
                this.linkPreviewY = 0;
                this.factCheckY = 0;
                this.lastTranslated = messageObject23.translated;
                TLRPC$Message tLRPC$Message6222222222 = messageObject23.messageOwner;
                this.lastSendState = tLRPC$Message6222222222.send_state;
                this.lastDeleteDate = tLRPC$Message6222222222.destroyTime;
                this.lastViewsCount = tLRPC$Message6222222222.views;
                this.lastRepliesCount = getRepliesCount();
                if (z77) {
                }
                this.gamePreviewPressed = false;
                this.sideButtonPressed = false;
                this.pressedSideButton = 0;
                this.hasNewLineForTime = false;
                this.flipImage = false;
                this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                needDrawAvatar = needDrawAvatar();
                if (messageObject23.customAvatarDrawable == null) {
                }
                this.isAvatarVisible = true;
                z10 = true;
                this.wasLayout = false;
                this.groupPhotoInvisible = false;
                this.animatingDrawVideoImageButton = 0;
                this.drawVideoSize = false;
                this.canStreamVideo = false;
                this.animatingNoSound = 0;
                this.drawSideButton2 = 0;
                if (messageObject.isSponsored()) {
                }
                this.hasReplyQuote = false;
                this.isReplyQuote = false;
                this.replyNameLayout = null;
                this.adminLayout = null;
                this.boostCounterBounds = null;
                this.boostCounterSpan = null;
                this.checkOnlyButtonPressed = false;
                this.replyTextLayout = null;
                AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                this.lastReplyMessage = null;
                this.hasEmbed = false;
                this.autoPlayingMedia = false;
                this.replyNameWidth = 0;
                this.replyTextWidth = 0;
                this.replyTextHeight = 0;
                this.viaWidth = 0;
                this.viaNameWidth = 0;
                this.viaOnly = false;
                this.addedCaptionHeight = 0;
                this.currentReplyPhoto = null;
                this.currentUser = null;
                this.currentChat = null;
                this.currentViaBotUser = null;
                this.instantViewLayout = null;
                this.drawNameLayout = false;
                this.linkPreviewAbove = false;
                TLRPC$Message tLRPC$Message7222222222222 = this.currentMessageObject.messageOwner;
                this.captionAbove = (tLRPC$Message7222222222222 != null && tLRPC$Message7222222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                this.isSmallImage = false;
                this.lastLoadingSizeTotal = 0L;
                if (this.scheduledInvalidate) {
                }
                this.links.clear();
                this.pressedLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
                messageObject23.forceUpdate = false;
                this.drawPhotoImage = false;
                this.drawMediaCheckBox = false;
                this.hasLinkPreview = false;
                this.hasFactCheck = false;
                this.hasOldCaptionPreview = false;
                this.hasGamePreview = false;
                this.hasInvoicePreview = false;
                this.hasInvoicePrice = false;
                this.commentButtonPressed = false;
                this.instantPressed = false;
                this.gradientDrawable = null;
                groupMedia = this.groupMedia;
                if (groupMedia != null) {
                }
                setInstantButtonPressed(false);
                if (!z8) {
                }
                resetContactButtonsPressedState();
                buttonBounce = this.titleLabelBounce;
                if (buttonBounce != null) {
                }
                this.drawnContactButtonsFlag = 0;
                this.drawContact = false;
                this.drawContactView = false;
                this.drawContactSendMessage = false;
                this.drawContactAdd = false;
                this.spoilerPressed = null;
                this.isSpoilerRevealing = false;
                this.linkPreviewPressed = false;
                this.buttonPressed = 0;
                this.additionalTimeOffsetY = 0;
                this.miniButtonPressed = 0;
                this.pressedBotButton = -1;
                this.pressedVoteButton = -1;
                this.pollHintPressed = false;
                this.psaHintPressed = false;
                this.linkPreviewHeight = 0;
                this.factCheckHeight = 0;
                this.mediaOffsetY = 0;
                this.documentAttachType = 0;
                this.documentAttach = null;
                this.descriptionLayout = null;
                this.titleLayout = null;
                this.videoInfoLayout = null;
                this.photosCountLayout = null;
                this.siteNameLayout = null;
                this.titleLabelLayout = null;
                this.authorLayout = null;
                this.captionFullWidth = 0;
                this.prevCaptionLayout = this.captionLayout;
                this.captionLayout = null;
                this.captionWidth = 0;
                this.captionHeight = 0;
                this.captionOffsetX = 0;
                this.currentCaption = null;
                this.docTitleLayout = null;
                this.drawImageButton = false;
                this.drawVideoImageButton = false;
                this.currentPhotoLocation = null;
                this.currentPhotoThumbLocation = null;
                this.currentPhotoObject = null;
                this.photoParentObject = null;
                this.currentPhotoObjectThumb = null;
                this.currentPhotoObjectThumbStripped = null;
                if (!z9) {
                }
                this.currentPhotoFilter = null;
                this.buttonState = -1;
                this.miniButtonState = -1;
                this.hasMiniProgress = 0;
                if (this.addedForTest) {
                }
                this.addedForTest = false;
                this.photoNotSet = false;
                this.drawBackground = true;
                this.drawName = false;
                this.useSeekBarWaveform = false;
                this.useTranscribeButton = false;
                this.drawInstantView = false;
                this.drawInstantViewType = 0;
                this.instantViewButtonText = null;
                this.drawForwardedName = false;
                this.drawCommentButton = false;
                this.photoImage.setSideClip(0.0f);
                this.photoImage.setAspectFit(false);
                this.photoImage.setRoundRadiusEnabled(true);
                this.fitPhotoImage = false;
                this.gradientShader = null;
                this.motionBackgroundDrawable = null;
                this.imageBackgroundColor = 0;
                this.imageBackgroundGradientColor1 = 0;
                this.imageBackgroundGradientColor2 = 0;
                this.imageBackgroundIntensity = 0.0f;
                this.imageBackgroundGradientColor3 = 0;
                this.imageBackgroundGradientRotation = 45;
                this.imageBackgroundSideColor = 0;
                this.mediaBackground = false;
                this.isMedia = false;
                expiredStoryView = this.expiredStoryView;
                if (expiredStoryView != null) {
                }
                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222222222 = messageObject23.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader22222222222222 == null) {
                }
                this.hasPsaHint = z11;
                if (z11) {
                }
                this.photoImage.setAlpha(1.0f);
                if (!z9) {
                }
                this.pollButtons.clear();
                this.availableTimeWidth = 0;
                this.photoImage.setForceLoading(false);
                this.photoImage.setNeedsQualityThumb(false);
                this.photoImage.setShouldGenerateQualityThumb(false);
                this.photoImage.setAllowDecodeSingleFrame(false);
                this.photoImage.setColorFilter(null);
                this.photoImage.setMediaStartEndTime(-1L, -1L);
                if (!z77) {
                }
                messageObject23.reactionsChanged = false;
                TLRPC$Message tLRPC$Message822222222222222 = messageObject23.messageOwner;
                if (tLRPC$Message822222222222222 == null) {
                }
                if (messageObject.shouldDrawReactions()) {
                }
                this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                if (z9) {
                }
                groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                }
                isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                if (this.hasDiscussion) {
                }
                repliesCount = getRepliesCount();
                if (!messageObject.shouldDrawWithoutBackground()) {
                }
                if (!this.isRepliesChat) {
                }
                this.commentLayout = null;
                this.drawCommentNumber = false;
                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                i = 9;
                if (messageObject23.type != 27) {
                }
                messageObject2 = messageObject23;
                messageObject3 = messageObject2;
                z13 = true;
                i2 = 4;
                z14 = false;
                z15 = true;
                z70 = z13;
                z21 = z15;
                c2 = 0;
                r3 = z70;
                if (this.currentPosition != null) {
                }
                if (!messageObject.isSponsored()) {
                }
                c5 = c2;
                messageObject19 = this.currentMessageObject;
                if (messageObject19.eventId == 0) {
                }
                i127 = 3;
                this.botButtons.clear();
                if (z77) {
                }
                if (!messageObject3.isRestrictedMessage) {
                }
                this.substractBackgroundHeight = z14 ? 1 : 0;
                this.keyboardHeight = z14 ? 1 : 0;
                z66 = r3;
                if (this.drawCommentButton) {
                }
                if (this.hasFactCheck) {
                }
                z67 = this.drawPinnedBottom;
                if (z67) {
                }
                if (!z67) {
                }
                if (!this.mediaBackground) {
                }
                if (messageObject3.type != 19) {
                }
                if (this.drawPhotoImage) {
                }
                if (this.documentAttachType == 5) {
                }
                calculateUnlockXY();
                if (z21) {
                }
                updateAnimatedEmojis();
                stickerSetLinkIcon2 = this.stickerSetIcons;
                if (stickerSetLinkIcon2 != null) {
                }
                textLayoutBlocks4 = null;
                this.prevCaptionLayout = textLayoutBlocks4;
                r32 = z66;
                r62 = textLayoutBlocks4;
                if (z77) {
                }
                transcribeButton = this.transcribeButton;
                if (transcribeButton != null) {
                }
                updateWaveform();
                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                if (!this.currentMessageObject.loadingCancelled) {
                }
                chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null) {
                }
                this.accessibilityVirtualViewBounds.clear();
                this.transitionParams.updatePhotoImageX = r32;
                this.highlightCaptionToSetEnd = -1;
                this.highlightCaptionToSetStart = -1;
                updateFlagSecure();
            }
            z8 = false;
            if (!z6) {
            }
            if (z3) {
            }
            int i14722222 = 5;
            if (z9) {
            }
            this.updatedContent = true;
            stickerSetLinkIcon = this.stickerSetIcons;
            if (stickerSetLinkIcon != null) {
            }
            this.wasPinned = this.isPinned;
            this.pinnedBottom = z;
            this.pinnedTop = z2;
            this.currentMessageObject = messageObject23;
            this.currentMessagesGroup = groupedMessages;
            this.lastTime = -2.0d;
            this.lastPostAuthor = messageObject23.messageOwner.post_author;
            if (!z77) {
            }
            this.isHighlightedAnimated = false;
            this.wasTranscriptionOpen = false;
            if (this.highlightedQuote) {
            }
            this.highlightedQuote = false;
            this.widthBeforeNewTimeLine = -1;
            groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
            }
            this.currentMessagesGroup = null;
            this.currentPosition = null;
            groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 == null) {
            }
            this.drawPinnedTop = this.pinnedTop;
            this.drawPinnedBottom = this.pinnedBottom;
            boolean z78222222222 = this.isPlayingRound;
            this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
            this.photoImage.setCrossfadeWithOldImage(false);
            this.photoImage.setCrossfadeDuration(150);
            this.photoImage.setCrossfadeByScale(0.0f);
            this.photoImage.setGradientBitmap(null);
            this.photoImage.clearDecorators();
            this.photoImage.setInvalidateAll(false);
            this.linkPreviewY = 0;
            this.factCheckY = 0;
            this.lastTranslated = messageObject23.translated;
            TLRPC$Message tLRPC$Message62222222222 = messageObject23.messageOwner;
            this.lastSendState = tLRPC$Message62222222222.send_state;
            this.lastDeleteDate = tLRPC$Message62222222222.destroyTime;
            this.lastViewsCount = tLRPC$Message62222222222.views;
            this.lastRepliesCount = getRepliesCount();
            if (z77) {
            }
            this.gamePreviewPressed = false;
            this.sideButtonPressed = false;
            this.pressedSideButton = 0;
            this.hasNewLineForTime = false;
            this.flipImage = false;
            this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
            this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
            needDrawAvatar = needDrawAvatar();
            if (messageObject23.customAvatarDrawable == null) {
            }
            this.isAvatarVisible = true;
            z10 = true;
            this.wasLayout = false;
            this.groupPhotoInvisible = false;
            this.animatingDrawVideoImageButton = 0;
            this.drawVideoSize = false;
            this.canStreamVideo = false;
            this.animatingNoSound = 0;
            this.drawSideButton2 = 0;
            if (messageObject.isSponsored()) {
            }
            this.hasReplyQuote = false;
            this.isReplyQuote = false;
            this.replyNameLayout = null;
            this.adminLayout = null;
            this.boostCounterBounds = null;
            this.boostCounterSpan = null;
            this.checkOnlyButtonPressed = false;
            this.replyTextLayout = null;
            AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
            this.lastReplyMessage = null;
            this.hasEmbed = false;
            this.autoPlayingMedia = false;
            this.replyNameWidth = 0;
            this.replyTextWidth = 0;
            this.replyTextHeight = 0;
            this.viaWidth = 0;
            this.viaNameWidth = 0;
            this.viaOnly = false;
            this.addedCaptionHeight = 0;
            this.currentReplyPhoto = null;
            this.currentUser = null;
            this.currentChat = null;
            this.currentViaBotUser = null;
            this.instantViewLayout = null;
            this.drawNameLayout = false;
            this.linkPreviewAbove = false;
            TLRPC$Message tLRPC$Message72222222222222 = this.currentMessageObject.messageOwner;
            this.captionAbove = (tLRPC$Message72222222222222 != null && tLRPC$Message72222222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
            this.isSmallImage = false;
            this.lastLoadingSizeTotal = 0L;
            if (this.scheduledInvalidate) {
            }
            this.links.clear();
            this.pressedLink = null;
            this.pressedEmoji = null;
            this.pressedLinkType = -1;
            messageObject23.forceUpdate = false;
            this.drawPhotoImage = false;
            this.drawMediaCheckBox = false;
            this.hasLinkPreview = false;
            this.hasFactCheck = false;
            this.hasOldCaptionPreview = false;
            this.hasGamePreview = false;
            this.hasInvoicePreview = false;
            this.hasInvoicePrice = false;
            this.commentButtonPressed = false;
            this.instantPressed = false;
            this.gradientDrawable = null;
            groupMedia = this.groupMedia;
            if (groupMedia != null) {
            }
            setInstantButtonPressed(false);
            if (!z8) {
            }
            resetContactButtonsPressedState();
            buttonBounce = this.titleLabelBounce;
            if (buttonBounce != null) {
            }
            this.drawnContactButtonsFlag = 0;
            this.drawContact = false;
            this.drawContactView = false;
            this.drawContactSendMessage = false;
            this.drawContactAdd = false;
            this.spoilerPressed = null;
            this.isSpoilerRevealing = false;
            this.linkPreviewPressed = false;
            this.buttonPressed = 0;
            this.additionalTimeOffsetY = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewHeight = 0;
            this.factCheckHeight = 0;
            this.mediaOffsetY = 0;
            this.documentAttachType = 0;
            this.documentAttach = null;
            this.descriptionLayout = null;
            this.titleLayout = null;
            this.videoInfoLayout = null;
            this.photosCountLayout = null;
            this.siteNameLayout = null;
            this.titleLabelLayout = null;
            this.authorLayout = null;
            this.captionFullWidth = 0;
            this.prevCaptionLayout = this.captionLayout;
            this.captionLayout = null;
            this.captionWidth = 0;
            this.captionHeight = 0;
            this.captionOffsetX = 0;
            this.currentCaption = null;
            this.docTitleLayout = null;
            this.drawImageButton = false;
            this.drawVideoImageButton = false;
            this.currentPhotoLocation = null;
            this.currentPhotoThumbLocation = null;
            this.currentPhotoObject = null;
            this.photoParentObject = null;
            this.currentPhotoObjectThumb = null;
            this.currentPhotoObjectThumbStripped = null;
            if (!z9) {
            }
            this.currentPhotoFilter = null;
            this.buttonState = -1;
            this.miniButtonState = -1;
            this.hasMiniProgress = 0;
            if (this.addedForTest) {
            }
            this.addedForTest = false;
            this.photoNotSet = false;
            this.drawBackground = true;
            this.drawName = false;
            this.useSeekBarWaveform = false;
            this.useTranscribeButton = false;
            this.drawInstantView = false;
            this.drawInstantViewType = 0;
            this.instantViewButtonText = null;
            this.drawForwardedName = false;
            this.drawCommentButton = false;
            this.photoImage.setSideClip(0.0f);
            this.photoImage.setAspectFit(false);
            this.photoImage.setRoundRadiusEnabled(true);
            this.fitPhotoImage = false;
            this.gradientShader = null;
            this.motionBackgroundDrawable = null;
            this.imageBackgroundColor = 0;
            this.imageBackgroundGradientColor1 = 0;
            this.imageBackgroundGradientColor2 = 0;
            this.imageBackgroundIntensity = 0.0f;
            this.imageBackgroundGradientColor3 = 0;
            this.imageBackgroundGradientRotation = 45;
            this.imageBackgroundSideColor = 0;
            this.mediaBackground = false;
            this.isMedia = false;
            expiredStoryView = this.expiredStoryView;
            if (expiredStoryView != null) {
            }
            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222222222 = messageObject23.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader222222222222222 == null) {
            }
            this.hasPsaHint = z11;
            if (z11) {
            }
            this.photoImage.setAlpha(1.0f);
            if (!z9) {
            }
            this.pollButtons.clear();
            this.availableTimeWidth = 0;
            this.photoImage.setForceLoading(false);
            this.photoImage.setNeedsQualityThumb(false);
            this.photoImage.setShouldGenerateQualityThumb(false);
            this.photoImage.setAllowDecodeSingleFrame(false);
            this.photoImage.setColorFilter(null);
            this.photoImage.setMediaStartEndTime(-1L, -1L);
            if (!z77) {
            }
            messageObject23.reactionsChanged = false;
            TLRPC$Message tLRPC$Message8222222222222222 = messageObject23.messageOwner;
            if (tLRPC$Message8222222222222222 == null) {
            }
            if (messageObject.shouldDrawReactions()) {
            }
            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
            if (z9) {
            }
            groupedMessages4 = this.currentMessagesGroup;
            if (groupedMessages4 != null) {
            }
            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
            if (this.hasDiscussion) {
            }
            repliesCount = getRepliesCount();
            if (!messageObject.shouldDrawWithoutBackground()) {
            }
            if (!this.isRepliesChat) {
            }
            this.commentLayout = null;
            this.drawCommentNumber = false;
            this.drawSideButton = this.isRepliesChat ? 3 : 2;
            i = 9;
            if (messageObject23.type != 27) {
            }
            messageObject2 = messageObject23;
            messageObject3 = messageObject2;
            z13 = true;
            i2 = 4;
            z14 = false;
            z15 = true;
            z70 = z13;
            z21 = z15;
            c2 = 0;
            r3 = z70;
            if (this.currentPosition != null) {
            }
            if (!messageObject.isSponsored()) {
            }
            c5 = c2;
            messageObject19 = this.currentMessageObject;
            if (messageObject19.eventId == 0) {
            }
            i127 = 3;
            this.botButtons.clear();
            if (z77) {
            }
            if (!messageObject3.isRestrictedMessage) {
            }
            this.substractBackgroundHeight = z14 ? 1 : 0;
            this.keyboardHeight = z14 ? 1 : 0;
            z66 = r3;
            if (this.drawCommentButton) {
            }
            if (this.hasFactCheck) {
            }
            z67 = this.drawPinnedBottom;
            if (z67) {
            }
            if (!z67) {
            }
            if (!this.mediaBackground) {
            }
            if (messageObject3.type != 19) {
            }
            if (this.drawPhotoImage) {
            }
            if (this.documentAttachType == 5) {
            }
            calculateUnlockXY();
            if (z21) {
            }
            updateAnimatedEmojis();
            stickerSetLinkIcon2 = this.stickerSetIcons;
            if (stickerSetLinkIcon2 != null) {
            }
            textLayoutBlocks4 = null;
            this.prevCaptionLayout = textLayoutBlocks4;
            r32 = z66;
            r62 = textLayoutBlocks4;
            if (z77) {
            }
            transcribeButton = this.transcribeButton;
            if (transcribeButton != null) {
            }
            updateWaveform();
            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
            if (!this.currentMessageObject.loadingCancelled) {
            }
            chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 != null) {
            }
            this.accessibilityVirtualViewBounds.clear();
            this.transitionParams.updatePhotoImageX = r32;
            this.highlightCaptionToSetEnd = -1;
            this.highlightCaptionToSetStart = -1;
            updateFlagSecure();
        }
        z3 = true;
        MessageObject messageObject252 = this.currentMessageObject;
        if (messageObject252 != null) {
            if (groupedMessages != this.currentMessagesGroup) {
            }
            if (!z77) {
                i144 = messageObject23.stableId;
                messageObject23.copyStableParams(messageObject22);
                if (this.currentMessageObject.isSavedFiltered) {
                    messageObject23.stableId = i144;
                }
            }
            this.accessibilityText = null;
            if (!this.drawCommentButton) {
                if (this.drawSideButton == 3) {
                }
                z7 = z4;
                if (!z3) {
                }
                if (z3) {
                }
                z8 = false;
                if (!z6) {
                }
                if (z3) {
                }
                int i147222222 = 5;
                if (z9) {
                }
                this.updatedContent = true;
                stickerSetLinkIcon = this.stickerSetIcons;
                if (stickerSetLinkIcon != null) {
                }
                this.wasPinned = this.isPinned;
                this.pinnedBottom = z;
                this.pinnedTop = z2;
                this.currentMessageObject = messageObject23;
                this.currentMessagesGroup = groupedMessages;
                this.lastTime = -2.0d;
                this.lastPostAuthor = messageObject23.messageOwner.post_author;
                if (!z77) {
                }
                this.isHighlightedAnimated = false;
                this.wasTranscriptionOpen = false;
                if (this.highlightedQuote) {
                }
                this.highlightedQuote = false;
                this.widthBeforeNewTimeLine = -1;
                groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                }
                this.currentMessagesGroup = null;
                this.currentPosition = null;
                groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 == null) {
                }
                this.drawPinnedTop = this.pinnedTop;
                this.drawPinnedBottom = this.pinnedBottom;
                boolean z782222222222 = this.isPlayingRound;
                this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
                this.photoImage.setCrossfadeWithOldImage(false);
                this.photoImage.setCrossfadeDuration(150);
                this.photoImage.setCrossfadeByScale(0.0f);
                this.photoImage.setGradientBitmap(null);
                this.photoImage.clearDecorators();
                this.photoImage.setInvalidateAll(false);
                this.linkPreviewY = 0;
                this.factCheckY = 0;
                this.lastTranslated = messageObject23.translated;
                TLRPC$Message tLRPC$Message622222222222 = messageObject23.messageOwner;
                this.lastSendState = tLRPC$Message622222222222.send_state;
                this.lastDeleteDate = tLRPC$Message622222222222.destroyTime;
                this.lastViewsCount = tLRPC$Message622222222222.views;
                this.lastRepliesCount = getRepliesCount();
                if (z77) {
                }
                this.gamePreviewPressed = false;
                this.sideButtonPressed = false;
                this.pressedSideButton = 0;
                this.hasNewLineForTime = false;
                this.flipImage = false;
                this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
                this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
                needDrawAvatar = needDrawAvatar();
                if (messageObject23.customAvatarDrawable == null) {
                }
                this.isAvatarVisible = true;
                z10 = true;
                this.wasLayout = false;
                this.groupPhotoInvisible = false;
                this.animatingDrawVideoImageButton = 0;
                this.drawVideoSize = false;
                this.canStreamVideo = false;
                this.animatingNoSound = 0;
                this.drawSideButton2 = 0;
                if (messageObject.isSponsored()) {
                }
                this.hasReplyQuote = false;
                this.isReplyQuote = false;
                this.replyNameLayout = null;
                this.adminLayout = null;
                this.boostCounterBounds = null;
                this.boostCounterSpan = null;
                this.checkOnlyButtonPressed = false;
                this.replyTextLayout = null;
                AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
                this.lastReplyMessage = null;
                this.hasEmbed = false;
                this.autoPlayingMedia = false;
                this.replyNameWidth = 0;
                this.replyTextWidth = 0;
                this.replyTextHeight = 0;
                this.viaWidth = 0;
                this.viaNameWidth = 0;
                this.viaOnly = false;
                this.addedCaptionHeight = 0;
                this.currentReplyPhoto = null;
                this.currentUser = null;
                this.currentChat = null;
                this.currentViaBotUser = null;
                this.instantViewLayout = null;
                this.drawNameLayout = false;
                this.linkPreviewAbove = false;
                TLRPC$Message tLRPC$Message722222222222222 = this.currentMessageObject.messageOwner;
                this.captionAbove = (tLRPC$Message722222222222222 != null && tLRPC$Message722222222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
                this.isSmallImage = false;
                this.lastLoadingSizeTotal = 0L;
                if (this.scheduledInvalidate) {
                }
                this.links.clear();
                this.pressedLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
                messageObject23.forceUpdate = false;
                this.drawPhotoImage = false;
                this.drawMediaCheckBox = false;
                this.hasLinkPreview = false;
                this.hasFactCheck = false;
                this.hasOldCaptionPreview = false;
                this.hasGamePreview = false;
                this.hasInvoicePreview = false;
                this.hasInvoicePrice = false;
                this.commentButtonPressed = false;
                this.instantPressed = false;
                this.gradientDrawable = null;
                groupMedia = this.groupMedia;
                if (groupMedia != null) {
                }
                setInstantButtonPressed(false);
                if (!z8) {
                }
                resetContactButtonsPressedState();
                buttonBounce = this.titleLabelBounce;
                if (buttonBounce != null) {
                }
                this.drawnContactButtonsFlag = 0;
                this.drawContact = false;
                this.drawContactView = false;
                this.drawContactSendMessage = false;
                this.drawContactAdd = false;
                this.spoilerPressed = null;
                this.isSpoilerRevealing = false;
                this.linkPreviewPressed = false;
                this.buttonPressed = 0;
                this.additionalTimeOffsetY = 0;
                this.miniButtonPressed = 0;
                this.pressedBotButton = -1;
                this.pressedVoteButton = -1;
                this.pollHintPressed = false;
                this.psaHintPressed = false;
                this.linkPreviewHeight = 0;
                this.factCheckHeight = 0;
                this.mediaOffsetY = 0;
                this.documentAttachType = 0;
                this.documentAttach = null;
                this.descriptionLayout = null;
                this.titleLayout = null;
                this.videoInfoLayout = null;
                this.photosCountLayout = null;
                this.siteNameLayout = null;
                this.titleLabelLayout = null;
                this.authorLayout = null;
                this.captionFullWidth = 0;
                this.prevCaptionLayout = this.captionLayout;
                this.captionLayout = null;
                this.captionWidth = 0;
                this.captionHeight = 0;
                this.captionOffsetX = 0;
                this.currentCaption = null;
                this.docTitleLayout = null;
                this.drawImageButton = false;
                this.drawVideoImageButton = false;
                this.currentPhotoLocation = null;
                this.currentPhotoThumbLocation = null;
                this.currentPhotoObject = null;
                this.photoParentObject = null;
                this.currentPhotoObjectThumb = null;
                this.currentPhotoObjectThumbStripped = null;
                if (!z9) {
                }
                this.currentPhotoFilter = null;
                this.buttonState = -1;
                this.miniButtonState = -1;
                this.hasMiniProgress = 0;
                if (this.addedForTest) {
                }
                this.addedForTest = false;
                this.photoNotSet = false;
                this.drawBackground = true;
                this.drawName = false;
                this.useSeekBarWaveform = false;
                this.useTranscribeButton = false;
                this.drawInstantView = false;
                this.drawInstantViewType = 0;
                this.instantViewButtonText = null;
                this.drawForwardedName = false;
                this.drawCommentButton = false;
                this.photoImage.setSideClip(0.0f);
                this.photoImage.setAspectFit(false);
                this.photoImage.setRoundRadiusEnabled(true);
                this.fitPhotoImage = false;
                this.gradientShader = null;
                this.motionBackgroundDrawable = null;
                this.imageBackgroundColor = 0;
                this.imageBackgroundGradientColor1 = 0;
                this.imageBackgroundGradientColor2 = 0;
                this.imageBackgroundIntensity = 0.0f;
                this.imageBackgroundGradientColor3 = 0;
                this.imageBackgroundGradientRotation = 45;
                this.imageBackgroundSideColor = 0;
                this.mediaBackground = false;
                this.isMedia = false;
                expiredStoryView = this.expiredStoryView;
                if (expiredStoryView != null) {
                }
                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222222222222 = messageObject23.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader2222222222222222 == null) {
                }
                this.hasPsaHint = z11;
                if (z11) {
                }
                this.photoImage.setAlpha(1.0f);
                if (!z9) {
                }
                this.pollButtons.clear();
                this.availableTimeWidth = 0;
                this.photoImage.setForceLoading(false);
                this.photoImage.setNeedsQualityThumb(false);
                this.photoImage.setShouldGenerateQualityThumb(false);
                this.photoImage.setAllowDecodeSingleFrame(false);
                this.photoImage.setColorFilter(null);
                this.photoImage.setMediaStartEndTime(-1L, -1L);
                if (!z77) {
                }
                messageObject23.reactionsChanged = false;
                TLRPC$Message tLRPC$Message82222222222222222 = messageObject23.messageOwner;
                if (tLRPC$Message82222222222222222 == null) {
                }
                if (messageObject.shouldDrawReactions()) {
                }
                this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
                if (z9) {
                }
                groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                }
                isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
                if (this.hasDiscussion) {
                }
                repliesCount = getRepliesCount();
                if (!messageObject.shouldDrawWithoutBackground()) {
                }
                if (!this.isRepliesChat) {
                }
                this.commentLayout = null;
                this.drawCommentNumber = false;
                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                i = 9;
                if (messageObject23.type != 27) {
                }
                messageObject2 = messageObject23;
                messageObject3 = messageObject2;
                z13 = true;
                i2 = 4;
                z14 = false;
                z15 = true;
                z70 = z13;
                z21 = z15;
                c2 = 0;
                r3 = z70;
                if (this.currentPosition != null) {
                }
                if (!messageObject.isSponsored()) {
                }
                c5 = c2;
                messageObject19 = this.currentMessageObject;
                if (messageObject19.eventId == 0) {
                }
                i127 = 3;
                this.botButtons.clear();
                if (z77) {
                }
                if (!messageObject3.isRestrictedMessage) {
                }
                this.substractBackgroundHeight = z14 ? 1 : 0;
                this.keyboardHeight = z14 ? 1 : 0;
                z66 = r3;
                if (this.drawCommentButton) {
                }
                if (this.hasFactCheck) {
                }
                z67 = this.drawPinnedBottom;
                if (z67) {
                }
                if (!z67) {
                }
                if (!this.mediaBackground) {
                }
                if (messageObject3.type != 19) {
                }
                if (this.drawPhotoImage) {
                }
                if (this.documentAttachType == 5) {
                }
                calculateUnlockXY();
                if (z21) {
                }
                updateAnimatedEmojis();
                stickerSetLinkIcon2 = this.stickerSetIcons;
                if (stickerSetLinkIcon2 != null) {
                }
                textLayoutBlocks4 = null;
                this.prevCaptionLayout = textLayoutBlocks4;
                r32 = z66;
                r62 = textLayoutBlocks4;
                if (z77) {
                }
                transcribeButton = this.transcribeButton;
                if (transcribeButton != null) {
                }
                updateWaveform();
                updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
                if (!this.currentMessageObject.loadingCancelled) {
                }
                chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null) {
                }
                this.accessibilityVirtualViewBounds.clear();
                this.transitionParams.updatePhotoImageX = r32;
                this.highlightCaptionToSetEnd = -1;
                this.highlightCaptionToSetStart = -1;
                updateFlagSecure();
            }
            z6 = z5;
            z7 = true;
            if (!z3) {
            }
            if (z3) {
            }
            z8 = false;
            if (!z6) {
            }
            if (z3) {
            }
            int i1472222222 = 5;
            if (z9) {
            }
            this.updatedContent = true;
            stickerSetLinkIcon = this.stickerSetIcons;
            if (stickerSetLinkIcon != null) {
            }
            this.wasPinned = this.isPinned;
            this.pinnedBottom = z;
            this.pinnedTop = z2;
            this.currentMessageObject = messageObject23;
            this.currentMessagesGroup = groupedMessages;
            this.lastTime = -2.0d;
            this.lastPostAuthor = messageObject23.messageOwner.post_author;
            if (!z77) {
            }
            this.isHighlightedAnimated = false;
            this.wasTranscriptionOpen = false;
            if (this.highlightedQuote) {
            }
            this.highlightedQuote = false;
            this.widthBeforeNewTimeLine = -1;
            groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
            }
            this.currentMessagesGroup = null;
            this.currentPosition = null;
            groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 == null) {
            }
            this.drawPinnedTop = this.pinnedTop;
            this.drawPinnedBottom = this.pinnedBottom;
            boolean z7822222222222 = this.isPlayingRound;
            this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
            this.photoImage.setCrossfadeWithOldImage(false);
            this.photoImage.setCrossfadeDuration(150);
            this.photoImage.setCrossfadeByScale(0.0f);
            this.photoImage.setGradientBitmap(null);
            this.photoImage.clearDecorators();
            this.photoImage.setInvalidateAll(false);
            this.linkPreviewY = 0;
            this.factCheckY = 0;
            this.lastTranslated = messageObject23.translated;
            TLRPC$Message tLRPC$Message6222222222222 = messageObject23.messageOwner;
            this.lastSendState = tLRPC$Message6222222222222.send_state;
            this.lastDeleteDate = tLRPC$Message6222222222222.destroyTime;
            this.lastViewsCount = tLRPC$Message6222222222222.views;
            this.lastRepliesCount = getRepliesCount();
            if (z77) {
            }
            this.gamePreviewPressed = false;
            this.sideButtonPressed = false;
            this.pressedSideButton = 0;
            this.hasNewLineForTime = false;
            this.flipImage = false;
            this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
            this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
            needDrawAvatar = needDrawAvatar();
            if (messageObject23.customAvatarDrawable == null) {
            }
            this.isAvatarVisible = true;
            z10 = true;
            this.wasLayout = false;
            this.groupPhotoInvisible = false;
            this.animatingDrawVideoImageButton = 0;
            this.drawVideoSize = false;
            this.canStreamVideo = false;
            this.animatingNoSound = 0;
            this.drawSideButton2 = 0;
            if (messageObject.isSponsored()) {
            }
            this.hasReplyQuote = false;
            this.isReplyQuote = false;
            this.replyNameLayout = null;
            this.adminLayout = null;
            this.boostCounterBounds = null;
            this.boostCounterSpan = null;
            this.checkOnlyButtonPressed = false;
            this.replyTextLayout = null;
            AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
            this.lastReplyMessage = null;
            this.hasEmbed = false;
            this.autoPlayingMedia = false;
            this.replyNameWidth = 0;
            this.replyTextWidth = 0;
            this.replyTextHeight = 0;
            this.viaWidth = 0;
            this.viaNameWidth = 0;
            this.viaOnly = false;
            this.addedCaptionHeight = 0;
            this.currentReplyPhoto = null;
            this.currentUser = null;
            this.currentChat = null;
            this.currentViaBotUser = null;
            this.instantViewLayout = null;
            this.drawNameLayout = false;
            this.linkPreviewAbove = false;
            TLRPC$Message tLRPC$Message7222222222222222 = this.currentMessageObject.messageOwner;
            this.captionAbove = (tLRPC$Message7222222222222222 != null && tLRPC$Message7222222222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
            this.isSmallImage = false;
            this.lastLoadingSizeTotal = 0L;
            if (this.scheduledInvalidate) {
            }
            this.links.clear();
            this.pressedLink = null;
            this.pressedEmoji = null;
            this.pressedLinkType = -1;
            messageObject23.forceUpdate = false;
            this.drawPhotoImage = false;
            this.drawMediaCheckBox = false;
            this.hasLinkPreview = false;
            this.hasFactCheck = false;
            this.hasOldCaptionPreview = false;
            this.hasGamePreview = false;
            this.hasInvoicePreview = false;
            this.hasInvoicePrice = false;
            this.commentButtonPressed = false;
            this.instantPressed = false;
            this.gradientDrawable = null;
            groupMedia = this.groupMedia;
            if (groupMedia != null) {
            }
            setInstantButtonPressed(false);
            if (!z8) {
            }
            resetContactButtonsPressedState();
            buttonBounce = this.titleLabelBounce;
            if (buttonBounce != null) {
            }
            this.drawnContactButtonsFlag = 0;
            this.drawContact = false;
            this.drawContactView = false;
            this.drawContactSendMessage = false;
            this.drawContactAdd = false;
            this.spoilerPressed = null;
            this.isSpoilerRevealing = false;
            this.linkPreviewPressed = false;
            this.buttonPressed = 0;
            this.additionalTimeOffsetY = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewHeight = 0;
            this.factCheckHeight = 0;
            this.mediaOffsetY = 0;
            this.documentAttachType = 0;
            this.documentAttach = null;
            this.descriptionLayout = null;
            this.titleLayout = null;
            this.videoInfoLayout = null;
            this.photosCountLayout = null;
            this.siteNameLayout = null;
            this.titleLabelLayout = null;
            this.authorLayout = null;
            this.captionFullWidth = 0;
            this.prevCaptionLayout = this.captionLayout;
            this.captionLayout = null;
            this.captionWidth = 0;
            this.captionHeight = 0;
            this.captionOffsetX = 0;
            this.currentCaption = null;
            this.docTitleLayout = null;
            this.drawImageButton = false;
            this.drawVideoImageButton = false;
            this.currentPhotoLocation = null;
            this.currentPhotoThumbLocation = null;
            this.currentPhotoObject = null;
            this.photoParentObject = null;
            this.currentPhotoObjectThumb = null;
            this.currentPhotoObjectThumbStripped = null;
            if (!z9) {
            }
            this.currentPhotoFilter = null;
            this.buttonState = -1;
            this.miniButtonState = -1;
            this.hasMiniProgress = 0;
            if (this.addedForTest) {
            }
            this.addedForTest = false;
            this.photoNotSet = false;
            this.drawBackground = true;
            this.drawName = false;
            this.useSeekBarWaveform = false;
            this.useTranscribeButton = false;
            this.drawInstantView = false;
            this.drawInstantViewType = 0;
            this.instantViewButtonText = null;
            this.drawForwardedName = false;
            this.drawCommentButton = false;
            this.photoImage.setSideClip(0.0f);
            this.photoImage.setAspectFit(false);
            this.photoImage.setRoundRadiusEnabled(true);
            this.fitPhotoImage = false;
            this.gradientShader = null;
            this.motionBackgroundDrawable = null;
            this.imageBackgroundColor = 0;
            this.imageBackgroundGradientColor1 = 0;
            this.imageBackgroundGradientColor2 = 0;
            this.imageBackgroundIntensity = 0.0f;
            this.imageBackgroundGradientColor3 = 0;
            this.imageBackgroundGradientRotation = 45;
            this.imageBackgroundSideColor = 0;
            this.mediaBackground = false;
            this.isMedia = false;
            expiredStoryView = this.expiredStoryView;
            if (expiredStoryView != null) {
            }
            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222222222222 = messageObject23.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader22222222222222222 == null) {
            }
            this.hasPsaHint = z11;
            if (z11) {
            }
            this.photoImage.setAlpha(1.0f);
            if (!z9) {
            }
            this.pollButtons.clear();
            this.availableTimeWidth = 0;
            this.photoImage.setForceLoading(false);
            this.photoImage.setNeedsQualityThumb(false);
            this.photoImage.setShouldGenerateQualityThumb(false);
            this.photoImage.setAllowDecodeSingleFrame(false);
            this.photoImage.setColorFilter(null);
            this.photoImage.setMediaStartEndTime(-1L, -1L);
            if (!z77) {
            }
            messageObject23.reactionsChanged = false;
            TLRPC$Message tLRPC$Message822222222222222222 = messageObject23.messageOwner;
            if (tLRPC$Message822222222222222222 == null) {
            }
            if (messageObject.shouldDrawReactions()) {
            }
            this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
            if (z9) {
            }
            groupedMessages4 = this.currentMessagesGroup;
            if (groupedMessages4 != null) {
            }
            isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
            if (this.hasDiscussion) {
            }
            repliesCount = getRepliesCount();
            if (!messageObject.shouldDrawWithoutBackground()) {
            }
            if (!this.isRepliesChat) {
            }
            this.commentLayout = null;
            this.drawCommentNumber = false;
            this.drawSideButton = this.isRepliesChat ? 3 : 2;
            i = 9;
            if (messageObject23.type != 27) {
            }
            messageObject2 = messageObject23;
            messageObject3 = messageObject2;
            z13 = true;
            i2 = 4;
            z14 = false;
            z15 = true;
            z70 = z13;
            z21 = z15;
            c2 = 0;
            r3 = z70;
            if (this.currentPosition != null) {
            }
            if (!messageObject.isSponsored()) {
            }
            c5 = c2;
            messageObject19 = this.currentMessageObject;
            if (messageObject19.eventId == 0) {
            }
            i127 = 3;
            this.botButtons.clear();
            if (z77) {
            }
            if (!messageObject3.isRestrictedMessage) {
            }
            this.substractBackgroundHeight = z14 ? 1 : 0;
            this.keyboardHeight = z14 ? 1 : 0;
            z66 = r3;
            if (this.drawCommentButton) {
            }
            if (this.hasFactCheck) {
            }
            z67 = this.drawPinnedBottom;
            if (z67) {
            }
            if (!z67) {
            }
            if (!this.mediaBackground) {
            }
            if (messageObject3.type != 19) {
            }
            if (this.drawPhotoImage) {
            }
            if (this.documentAttachType == 5) {
            }
            calculateUnlockXY();
            if (z21) {
            }
            updateAnimatedEmojis();
            stickerSetLinkIcon2 = this.stickerSetIcons;
            if (stickerSetLinkIcon2 != null) {
            }
            textLayoutBlocks4 = null;
            this.prevCaptionLayout = textLayoutBlocks4;
            r32 = z66;
            r62 = textLayoutBlocks4;
            if (z77) {
            }
            transcribeButton = this.transcribeButton;
            if (transcribeButton != null) {
            }
            updateWaveform();
            updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
            if (!this.currentMessageObject.loadingCancelled) {
            }
            chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 != null) {
            }
            this.accessibilityVirtualViewBounds.clear();
            this.transitionParams.updatePhotoImageX = r32;
            this.highlightCaptionToSetEnd = -1;
            this.highlightCaptionToSetStart = -1;
            updateFlagSecure();
        }
        if (groupedMessages != this.currentMessagesGroup) {
        }
        if (!z77) {
        }
        this.accessibilityText = null;
        if (!this.drawCommentButton) {
        }
        z6 = z5;
        z7 = true;
        if (!z3) {
        }
        if (z3) {
        }
        z8 = false;
        if (!z6) {
        }
        if (z3) {
        }
        int i14722222222 = 5;
        if (z9) {
        }
        this.updatedContent = true;
        stickerSetLinkIcon = this.stickerSetIcons;
        if (stickerSetLinkIcon != null) {
        }
        this.wasPinned = this.isPinned;
        this.pinnedBottom = z;
        this.pinnedTop = z2;
        this.currentMessageObject = messageObject23;
        this.currentMessagesGroup = groupedMessages;
        this.lastTime = -2.0d;
        this.lastPostAuthor = messageObject23.messageOwner.post_author;
        if (!z77) {
        }
        this.isHighlightedAnimated = false;
        this.wasTranscriptionOpen = false;
        if (this.highlightedQuote) {
        }
        this.highlightedQuote = false;
        this.widthBeforeNewTimeLine = -1;
        groupedMessages2 = this.currentMessagesGroup;
        if (groupedMessages2 != null) {
        }
        this.currentMessagesGroup = null;
        this.currentPosition = null;
        groupedMessages3 = this.currentMessagesGroup;
        if (groupedMessages3 == null) {
        }
        this.drawPinnedTop = this.pinnedTop;
        this.drawPinnedBottom = this.pinnedBottom;
        boolean z78222222222222 = this.isPlayingRound;
        this.isPlayingRound = (!this.isRoundVideo || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.keyboardIsOpened() || this.delegate.isLandscape()) ? false : true;
        this.photoImage.setCrossfadeWithOldImage(false);
        this.photoImage.setCrossfadeDuration(150);
        this.photoImage.setCrossfadeByScale(0.0f);
        this.photoImage.setGradientBitmap(null);
        this.photoImage.clearDecorators();
        this.photoImage.setInvalidateAll(false);
        this.linkPreviewY = 0;
        this.factCheckY = 0;
        this.lastTranslated = messageObject23.translated;
        TLRPC$Message tLRPC$Message62222222222222 = messageObject23.messageOwner;
        this.lastSendState = tLRPC$Message62222222222222.send_state;
        this.lastDeleteDate = tLRPC$Message62222222222222.destroyTime;
        this.lastViewsCount = tLRPC$Message62222222222222.views;
        this.lastRepliesCount = getRepliesCount();
        if (z77) {
        }
        this.gamePreviewPressed = false;
        this.sideButtonPressed = false;
        this.pressedSideButton = 0;
        this.hasNewLineForTime = false;
        this.flipImage = false;
        this.isThreadPost = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message3 = messageObject23.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message3.reply_to == null;
        this.isAvatarVisible = needDrawAvatar() && ((groupedMessagePosition15 = this.currentPosition) == null || groupedMessagePosition15.edge);
        needDrawAvatar = needDrawAvatar();
        if (messageObject23.customAvatarDrawable == null) {
        }
        this.isAvatarVisible = true;
        z10 = true;
        this.wasLayout = false;
        this.groupPhotoInvisible = false;
        this.animatingDrawVideoImageButton = 0;
        this.drawVideoSize = false;
        this.canStreamVideo = false;
        this.animatingNoSound = 0;
        this.drawSideButton2 = 0;
        if (messageObject.isSponsored()) {
        }
        this.hasReplyQuote = false;
        this.isReplyQuote = false;
        this.replyNameLayout = null;
        this.adminLayout = null;
        this.boostCounterBounds = null;
        this.boostCounterSpan = null;
        this.checkOnlyButtonPressed = false;
        this.replyTextLayout = null;
        AnimatedEmojiSpan.release((View) this, this.animatedEmojiReplyStack);
        this.lastReplyMessage = null;
        this.hasEmbed = false;
        this.autoPlayingMedia = false;
        this.replyNameWidth = 0;
        this.replyTextWidth = 0;
        this.replyTextHeight = 0;
        this.viaWidth = 0;
        this.viaNameWidth = 0;
        this.viaOnly = false;
        this.addedCaptionHeight = 0;
        this.currentReplyPhoto = null;
        this.currentUser = null;
        this.currentChat = null;
        this.currentViaBotUser = null;
        this.instantViewLayout = null;
        this.drawNameLayout = false;
        this.linkPreviewAbove = false;
        TLRPC$Message tLRPC$Message72222222222222222 = this.currentMessageObject.messageOwner;
        this.captionAbove = (tLRPC$Message72222222222222222 != null && tLRPC$Message72222222222222222.invert_media) || (groupedMessages != null && groupedMessages.captionAbove);
        this.isSmallImage = false;
        this.lastLoadingSizeTotal = 0L;
        if (this.scheduledInvalidate) {
        }
        this.links.clear();
        this.pressedLink = null;
        this.pressedEmoji = null;
        this.pressedLinkType = -1;
        messageObject23.forceUpdate = false;
        this.drawPhotoImage = false;
        this.drawMediaCheckBox = false;
        this.hasLinkPreview = false;
        this.hasFactCheck = false;
        this.hasOldCaptionPreview = false;
        this.hasGamePreview = false;
        this.hasInvoicePreview = false;
        this.hasInvoicePrice = false;
        this.commentButtonPressed = false;
        this.instantPressed = false;
        this.gradientDrawable = null;
        groupMedia = this.groupMedia;
        if (groupMedia != null) {
        }
        setInstantButtonPressed(false);
        if (!z8) {
        }
        resetContactButtonsPressedState();
        buttonBounce = this.titleLabelBounce;
        if (buttonBounce != null) {
        }
        this.drawnContactButtonsFlag = 0;
        this.drawContact = false;
        this.drawContactView = false;
        this.drawContactSendMessage = false;
        this.drawContactAdd = false;
        this.spoilerPressed = null;
        this.isSpoilerRevealing = false;
        this.linkPreviewPressed = false;
        this.buttonPressed = 0;
        this.additionalTimeOffsetY = 0;
        this.miniButtonPressed = 0;
        this.pressedBotButton = -1;
        this.pressedVoteButton = -1;
        this.pollHintPressed = false;
        this.psaHintPressed = false;
        this.linkPreviewHeight = 0;
        this.factCheckHeight = 0;
        this.mediaOffsetY = 0;
        this.documentAttachType = 0;
        this.documentAttach = null;
        this.descriptionLayout = null;
        this.titleLayout = null;
        this.videoInfoLayout = null;
        this.photosCountLayout = null;
        this.siteNameLayout = null;
        this.titleLabelLayout = null;
        this.authorLayout = null;
        this.captionFullWidth = 0;
        this.prevCaptionLayout = this.captionLayout;
        this.captionLayout = null;
        this.captionWidth = 0;
        this.captionHeight = 0;
        this.captionOffsetX = 0;
        this.currentCaption = null;
        this.docTitleLayout = null;
        this.drawImageButton = false;
        this.drawVideoImageButton = false;
        this.currentPhotoLocation = null;
        this.currentPhotoThumbLocation = null;
        this.currentPhotoObject = null;
        this.photoParentObject = null;
        this.currentPhotoObjectThumb = null;
        this.currentPhotoObjectThumbStripped = null;
        if (!z9) {
        }
        this.currentPhotoFilter = null;
        this.buttonState = -1;
        this.miniButtonState = -1;
        this.hasMiniProgress = 0;
        if (this.addedForTest) {
        }
        this.addedForTest = false;
        this.photoNotSet = false;
        this.drawBackground = true;
        this.drawName = false;
        this.useSeekBarWaveform = false;
        this.useTranscribeButton = false;
        this.drawInstantView = false;
        this.drawInstantViewType = 0;
        this.instantViewButtonText = null;
        this.drawForwardedName = false;
        this.drawCommentButton = false;
        this.photoImage.setSideClip(0.0f);
        this.photoImage.setAspectFit(false);
        this.photoImage.setRoundRadiusEnabled(true);
        this.fitPhotoImage = false;
        this.gradientShader = null;
        this.motionBackgroundDrawable = null;
        this.imageBackgroundColor = 0;
        this.imageBackgroundGradientColor1 = 0;
        this.imageBackgroundGradientColor2 = 0;
        this.imageBackgroundIntensity = 0.0f;
        this.imageBackgroundGradientColor3 = 0;
        this.imageBackgroundGradientRotation = 45;
        this.imageBackgroundSideColor = 0;
        this.mediaBackground = false;
        this.isMedia = false;
        expiredStoryView = this.expiredStoryView;
        if (expiredStoryView != null) {
        }
        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222222222222 = messageObject23.messageOwner.fwd_from;
        if (tLRPC$MessageFwdHeader222222222222222222 == null) {
        }
        this.hasPsaHint = z11;
        if (z11) {
        }
        this.photoImage.setAlpha(1.0f);
        if (!z9) {
        }
        this.pollButtons.clear();
        this.availableTimeWidth = 0;
        this.photoImage.setForceLoading(false);
        this.photoImage.setNeedsQualityThumb(false);
        this.photoImage.setShouldGenerateQualityThumb(false);
        this.photoImage.setAllowDecodeSingleFrame(false);
        this.photoImage.setColorFilter(null);
        this.photoImage.setMediaStartEndTime(-1L, -1L);
        if (!z77) {
        }
        messageObject23.reactionsChanged = false;
        TLRPC$Message tLRPC$Message8222222222222222222 = messageObject23.messageOwner;
        if (tLRPC$Message8222222222222222222 == null) {
        }
        if (messageObject.shouldDrawReactions()) {
        }
        this.reactionsLayoutInBubble.setMessage(null, false, false, this.resourcesProvider);
        if (z9) {
        }
        groupedMessages4 = this.currentMessagesGroup;
        if (groupedMessages4 != null) {
        }
        isLinkedToChat = messageObject23.isLinkedToChat(this.linkedChatId);
        if (this.hasDiscussion) {
        }
        repliesCount = getRepliesCount();
        if (!messageObject.shouldDrawWithoutBackground()) {
        }
        if (!this.isRepliesChat) {
        }
        this.commentLayout = null;
        this.drawCommentNumber = false;
        this.drawSideButton = this.isRepliesChat ? 3 : 2;
        i = 9;
        if (messageObject23.type != 27) {
        }
        messageObject2 = messageObject23;
        messageObject3 = messageObject2;
        z13 = true;
        i2 = 4;
        z14 = false;
        z15 = true;
        z70 = z13;
        z21 = z15;
        c2 = 0;
        r3 = z70;
        if (this.currentPosition != null) {
        }
        if (!messageObject.isSponsored()) {
        }
        c5 = c2;
        messageObject19 = this.currentMessageObject;
        if (messageObject19.eventId == 0) {
        }
        i127 = 3;
        this.botButtons.clear();
        if (z77) {
        }
        if (!messageObject3.isRestrictedMessage) {
        }
        this.substractBackgroundHeight = z14 ? 1 : 0;
        this.keyboardHeight = z14 ? 1 : 0;
        z66 = r3;
        if (this.drawCommentButton) {
        }
        if (this.hasFactCheck) {
        }
        z67 = this.drawPinnedBottom;
        if (z67) {
        }
        if (!z67) {
        }
        if (!this.mediaBackground) {
        }
        if (messageObject3.type != 19) {
        }
        if (this.drawPhotoImage) {
        }
        if (this.documentAttachType == 5) {
        }
        calculateUnlockXY();
        if (z21) {
        }
        updateAnimatedEmojis();
        stickerSetLinkIcon2 = this.stickerSetIcons;
        if (stickerSetLinkIcon2 != null) {
        }
        textLayoutBlocks4 = null;
        this.prevCaptionLayout = textLayoutBlocks4;
        r32 = z66;
        r62 = textLayoutBlocks4;
        if (z77) {
        }
        transcribeButton = this.transcribeButton;
        if (transcribeButton != null) {
        }
        updateWaveform();
        updateButtonState(z14, (z77 || messageObject3.cancelEditing) ? false : true, r32);
        if (!this.currentMessageObject.loadingCancelled) {
        }
        chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null) {
        }
        this.accessibilityVirtualViewBounds.clear();
        this.transitionParams.updatePhotoImageX = r32;
        this.highlightCaptionToSetEnd = -1;
        this.highlightCaptionToSetStart = -1;
        updateFlagSecure();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageContent$7(TLRPC$User tLRPC$User, int i, TLRPC$Chat tLRPC$Chat, long j) {
        if (tLRPC$User != null) {
            this.commentAvatarDrawables[i].setInfo(this.currentAccount, tLRPC$User);
            this.commentAvatarImages[i].setForUserOrChat(tLRPC$User, this.commentAvatarDrawables[i]);
        } else if (tLRPC$Chat != null) {
            this.commentAvatarDrawables[i].setInfo(this.currentAccount, tLRPC$Chat);
            this.commentAvatarImages[i].setForUserOrChat(tLRPC$Chat, this.commentAvatarDrawables[i]);
        } else {
            this.commentAvatarDrawables[i].setInfo(j, "", "");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$setMessageContent$8(PollButton pollButton, PollButton pollButton2) {
        if (pollButton.decimal > pollButton2.decimal) {
            return -1;
        }
        if (pollButton.decimal < pollButton2.decimal) {
            return 1;
        }
        if (pollButton.decimal == pollButton2.decimal) {
            if (pollButton.percent > pollButton2.percent) {
                return 1;
            }
            return pollButton.percent < pollButton2.percent ? -1 : 0;
        }
        return 0;
    }

    private boolean loopStickers() {
        return LiteMode.isEnabled(2);
    }

    private void calculateUnlockXY() {
        if (this.currentMessageObject.type != 20 || this.unlockLayout == null) {
            return;
        }
        this.unlockX = this.backgroundDrawableLeft + ((this.photoImage.getImageWidth() - this.unlockLayout.getWidth()) / 2.0f);
        this.unlockY = this.backgroundDrawableTop + this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - this.unlockLayout.getHeight()) / 2.0f);
    }

    private void updateFlagSecure() {
        if (this.flagSecure == null) {
            Activity findActivity = AndroidUtilities.findActivity(getContext());
            Window window = findActivity == null ? null : findActivity.getWindow();
            if (window != null) {
                FlagSecureReason flagSecureReason = new FlagSecureReason(window, new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda7
                    @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
                    public final boolean run() {
                        boolean lambda$updateFlagSecure$9;
                        lambda$updateFlagSecure$9 = ChatMessageCell.this.lambda$updateFlagSecure$9();
                        return lambda$updateFlagSecure$9;
                    }
                });
                this.flagSecure = flagSecureReason;
                if (this.attachedToWindow) {
                    flagSecureReason.attach();
                }
            }
        }
        FlagSecureReason flagSecureReason2 = this.flagSecure;
        if (flagSecureReason2 != null) {
            flagSecureReason2.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updateFlagSecure$9() {
        TLRPC$Message tLRPC$Message;
        GroupMedia groupMedia;
        MessageObject messageObject = this.currentMessageObject;
        return (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || ((messageObject.type != 29 || ((groupMedia = this.groupMedia) != null && !groupMedia.hidden)) && !tLRPC$Message.noforwards && !messageObject.isVoiceOnce() && !this.currentMessageObject.hasRevealedExtendedMedia())) ? false : true;
    }

    public void checkVideoPlayback(boolean z, Bitmap bitmap) {
        if (this.currentMessageObject.isVideo()) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                this.photoImage.setAllowStartAnimation(false);
                this.photoImage.stopAnimation();
                return;
            }
            this.photoImage.setAllowStartAnimation(true);
            this.photoImage.startAnimation();
            return;
        }
        if (z) {
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            z = playingMessageObject == null || !playingMessageObject.isRoundVideo();
        }
        this.photoImage.setAllowStartAnimation(z);
        if (bitmap != null) {
            this.photoImage.startCrossfadeFromStaticThumb(bitmap);
        }
        if (z) {
            this.photoImage.startAnimation();
        } else {
            this.photoImage.stopAnimation();
        }
    }

    private static boolean spanSupportsLongPress(CharacterStyle characterStyle) {
        return (characterStyle instanceof URLSpanMono) || (characterStyle instanceof URLSpan);
    }

    @Override // org.telegram.ui.Cells.BaseCell
    protected boolean onLongPress() {
        int i;
        int i2;
        boolean z = false;
        if (this.isRoundVideo && this.isPlayingRound && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && ((this.lastTouchX - this.photoImage.getCenterX()) * (this.lastTouchX - this.photoImage.getCenterX())) + ((this.lastTouchY - this.photoImage.getCenterY()) * (this.lastTouchY - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f) && (this.lastTouchX > this.photoImage.getCenterX() + (this.photoImage.getImageWidth() / 4.0f) || this.lastTouchX < this.photoImage.getCenterX() - (this.photoImage.getImageWidth() / 4.0f))) {
            boolean z2 = this.lastTouchX > this.photoImage.getCenterX();
            if (this.videoPlayerRewinder == null) {
                this.videoForwardDrawable = new VideoForwardDrawable(true);
                this.videoPlayerRewinder = new VideoPlayerRewinder() { // from class: org.telegram.ui.Cells.ChatMessageCell.5
                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindCanceled() {
                        ChatMessageCell.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                        ChatMessageCell.this.videoForwardDrawable.setShowing(false);
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void updateRewindProgressUi(long j, float f, boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setTime(Math.abs(j));
                        if (z3) {
                            ChatMessageCell.this.currentMessageObject.audioProgress = f;
                            ChatMessageCell.this.updatePlayingMessageProgress();
                        }
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindStart(boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.5.1
                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void onAnimationEnd() {
                            }

                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void invalidate() {
                                ChatMessageCell.this.invalidate();
                            }
                        });
                        ChatMessageCell.this.videoForwardDrawable.setOneShootAnimation(false);
                        ChatMessageCell.this.videoForwardDrawable.setLeftSide(!z3);
                        ChatMessageCell.this.videoForwardDrawable.setShowing(true);
                        ChatMessageCell.this.invalidate();
                    }
                };
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            this.videoPlayerRewinder.startRewind(MediaController.getInstance().getVideoPlayer(), z2, MediaController.getInstance().getPlaybackSpeed(false));
            return false;
        }
        Drawable drawable = this.replySelector;
        if (drawable != null) {
            this.replySelectorPressed = false;
            drawable.setState(StateSet.NOTHING);
            invalidate();
        }
        Drawable drawable2 = this.nameStatusSelector;
        if (drawable2 != null) {
            drawable2.setState(StateSet.NOTHING);
        }
        Drawable drawable3 = this.nameLayoutSelector;
        if (drawable3 != null) {
            drawable3.setState(StateSet.NOTHING);
        }
        Drawable drawable4 = this.boostCounterLayoutSelector;
        if (drawable4 != null) {
            drawable4.setState(StateSet.NOTHING);
        }
        resetCodeSelectors();
        ButtonBounce buttonBounce = this.replyBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(false);
        }
        ButtonBounce buttonBounce2 = this.titleLabelBounce;
        if (buttonBounce2 != null) {
            buttonBounce2.setPressed(false);
        }
        ButtonBounce buttonBounce3 = this.factCheckWhatBounce;
        if (buttonBounce3 != null) {
            buttonBounce3.setPressed(false);
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.resetClick();
        }
        this.forwardNamePressed = false;
        ForwardBackground forwardBackground = this.forwardBg;
        if (forwardBackground != null) {
            forwardBackground.setPressed(false);
        }
        this.pressedEffect = false;
        ButtonBounce buttonBounce4 = this.effectDrawableBounce;
        if (buttonBounce4 != null) {
            buttonBounce4.setPressed(false);
        }
        if (this.pressedEmoji != null) {
            this.pressedEmoji = null;
        }
        LinkSpanDrawable linkSpanDrawable = this.pressedFactCheckLink;
        if (linkSpanDrawable != null) {
            if (linkSpanDrawable.getSpan() instanceof URLSpanMono) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedFactCheckLink.getSpan(), true);
                return true;
            } else if (this.pressedFactCheckLink.getSpan() instanceof URLSpanNoUnderline) {
                URLSpanNoUnderline uRLSpanNoUnderline = (URLSpanNoUnderline) this.pressedFactCheckLink.getSpan();
                if (ChatActivity.isClickableLink(uRLSpanNoUnderline.getURL()) || uRLSpanNoUnderline.getURL().startsWith("/")) {
                    this.hadLongPress = true;
                    this.delegate.didPressUrl(this, this.pressedFactCheckLink.getSpan(), true);
                    return true;
                }
            } else if (this.pressedFactCheckLink.getSpan() instanceof URLSpan) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedFactCheckLink.getSpan(), true);
                return true;
            }
        }
        LinkSpanDrawable linkSpanDrawable2 = this.pressedLink;
        if (linkSpanDrawable2 != null) {
            if (linkSpanDrawable2.getSpan() instanceof URLSpanMono) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            } else if (this.pressedLink.getSpan() instanceof URLSpanNoUnderline) {
                URLSpanNoUnderline uRLSpanNoUnderline2 = (URLSpanNoUnderline) this.pressedLink.getSpan();
                if (ChatActivity.isClickableLink(uRLSpanNoUnderline2.getURL()) || uRLSpanNoUnderline2.getURL().startsWith("/") || uRLSpanNoUnderline2.getURL().startsWith("tel:")) {
                    this.hadLongPress = true;
                    this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                    return true;
                }
            } else if (this.pressedLink.getSpan() instanceof URLSpan) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            }
        }
        resetPressedLink(-1);
        if (this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.pressedBotButton != -1) {
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.videoButtonPressed = 0;
            this.pressedBotButton = -1;
            invalidate();
        }
        this.linkPreviewPressed = false;
        this.sideButtonPressed = false;
        this.pressedSideButton = 0;
        this.imagePressed = false;
        this.timePressed = false;
        this.gamePreviewPressed = false;
        this.giveawayMessageCell.setButtonPressed(false);
        this.giveawayResultsMessageCell.setButtonPressed(false);
        resetContactButtonsPressedState();
        if (this.pressedVoteButton != -1 || this.pollHintPressed || this.psaHintPressed || this.instantPressed || this.otherPressed || this.commentButtonPressed) {
            this.commentButtonPressed = false;
            this.instantPressed = false;
            setInstantButtonPressed(false);
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.otherPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i3 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i3 >= drawableArr.length) {
                        break;
                    }
                    Drawable drawable5 = drawableArr[i3];
                    if (drawable5 != null) {
                        drawable5.setState(StateSet.NOTHING);
                    }
                    i3++;
                }
                Drawable drawable6 = this.linkPreviewSelector;
                if (drawable6 != null) {
                    drawable6.setState(StateSet.NOTHING);
                }
            }
            ButtonBounce buttonBounce5 = this.linkPreviewBounce;
            if (buttonBounce5 != null) {
                buttonBounce5.setPressed(false);
            }
            invalidate();
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null) {
            if (this.avatarPressed) {
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null) {
                    if (tLRPC$User.id != 0) {
                        z = chatMessageCellDelegate.didLongPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    }
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader != null) {
                            if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                                i2 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                            } else {
                                i2 = tLRPC$MessageFwdHeader.channel_post;
                            }
                            i = i2;
                        } else {
                            i = 0;
                        }
                        z = chatMessageCellDelegate.didLongPressChannelAvatar(this, tLRPC$Chat, i, this.lastTouchX, this.lastTouchY);
                    }
                }
            }
            if (!z) {
                this.delegate.didLongPress(this, this.lastTouchX, this.lastTouchY);
            }
        }
        return true;
    }

    public void showHintButton(boolean z, boolean z2, int i) {
        if (i == -1 || i == 0) {
            if (this.hintButtonVisible == z) {
                return;
            }
            this.hintButtonVisible = z;
            if (!z2) {
                this.hintButtonProgress = z ? 1.0f : 0.0f;
            } else {
                invalidate();
            }
        }
        if ((i == -1 || i == 1) && this.psaButtonVisible != z) {
            this.psaButtonVisible = z;
            if (!z2) {
                this.psaButtonProgress = z ? 1.0f : 0.0f;
                return;
            }
            setInvalidatesParent(true);
            invalidate();
        }
    }

    public void setCheckPressed(boolean z, boolean z2) {
        this.isCheckPressed = z;
        this.isPressed = z2;
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    public void setInvalidateSpoilersParent(boolean z) {
        this.invalidateSpoilersParent = z;
    }

    public void setInvalidatesParent(boolean z) {
        this.invalidatesParent = z;
    }

    private boolean invalidateParentForce() {
        MessageObject messageObject;
        return (this.links.isEmpty() && this.reactionsLayoutInBubble.isEmpty && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) ? false : true;
    }

    public void invalidateOutbounds() {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent()) {
            if (getParent() instanceof View) {
                ((View) getParent()).invalidate();
                return;
            }
            return;
        }
        super.invalidate();
    }

    @Override // org.telegram.ui.Cells.BaseCell, android.view.View
    public void invalidate() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.invalidateCallback;
        if (runnable != null) {
            runnable.run();
        }
        Runnable runnable2 = this.overrideInvalidate;
        if (runnable2 != null) {
            runnable2.run();
            return;
        }
        Runnable runnable3 = this.invalidateListener;
        if (runnable3 != null) {
            runnable3.run();
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && invalidateParentForce())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public void invalidateLite() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.overrideInvalidate;
        if (runnable != null) {
            runnable.run();
            return;
        }
        Runnable runnable2 = this.invalidateListener;
        if (runnable2 != null) {
            runnable2.run();
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && invalidateParentForce())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    public void setOverrideInvalidate(Runnable runnable) {
        this.overrideInvalidate = runnable;
    }

    public void setInvalidateListener(Runnable runnable) {
        this.invalidateListener = runnable;
    }

    @Override // android.view.View
    public void invalidate(int i, int i2, int i3, int i4) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.overrideInvalidate;
        if (runnable != null) {
            runnable.run();
            return;
        }
        Runnable runnable2 = this.invalidateListener;
        if (runnable2 != null) {
            runnable2.run();
        }
        super.invalidate(i, i2, i3, i4);
        if (this.invalidatesParent && getParent() != null) {
            ((View) getParent()).invalidate(((int) getX()) + i, ((int) getY()) + i2, ((int) getX()) + i3, ((int) getY()) + i4);
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    public boolean isHighlightedAnimated() {
        return this.isHighlightedAnimated;
    }

    public void setHighlightedAnimated() {
        this.isHighlightedAnimated = true;
        this.highlightProgress = 1000;
        this.lastHighlightProgressTime = System.currentTimeMillis();
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    public boolean isHighlighted() {
        return this.isHighlighted;
    }

    public void setHighlighted(boolean z) {
        if (this.isHighlighted == z) {
            return;
        }
        this.isHighlighted = z;
        if (z) {
            this.quoteHighlight = null;
        }
        if (!z) {
            this.lastHighlightProgressTime = System.currentTimeMillis();
            this.isHighlightedAnimated = true;
            this.highlightProgress = 300;
        } else {
            this.isHighlightedAnimated = false;
            this.highlightProgress = 0;
        }
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    @Override // android.view.View
    public void setPressed(boolean z) {
        super.setPressed(z);
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    private void updateRadialProgressBackground() {
        if (this.drawRadialCheckBackground) {
            return;
        }
        boolean z = true;
        boolean z2 = (this.isHighlighted || this.isPressed || isPressed()) && !(this.drawPhotoImage && this.photoImage.hasBitmapImage());
        this.radialProgress.setPressed(z2 || this.buttonPressed != 0, false);
        if (this.hasMiniProgress != 0) {
            this.radialProgress.setPressed(z2 || this.miniButtonPressed != 0, true);
        }
        RadialProgress2 radialProgress2 = this.videoRadialProgress;
        if (!z2 && this.videoButtonPressed == 0) {
            z = false;
        }
        radialProgress2.setPressed(z, false);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarPressed() {
        requestDisallowInterceptTouchEvent(true);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarReleased() {
        requestDisallowInterceptTouchEvent(false);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public boolean isSeekBarDragAllowed() {
        MessageObject messageObject = this.currentMessageObject;
        return messageObject == null || !messageObject.isVoiceOnce();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public boolean reverseWaveform() {
        MessageObject messageObject = this.currentMessageObject;
        return messageObject != null && messageObject.isVoiceOnce();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        MediaController.getInstance().seekToProgress(this.currentMessageObject, f);
        updatePlayingMessageProgress();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarContinuousDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        double duration = messageObject.getDuration();
        double d = f;
        Double.isNaN(d);
        messageObject.audioProgressSec = (int) (duration * d);
        updatePlayingMessageProgress();
    }

    public boolean isAnimatingPollAnswer() {
        return this.animatePollAnswerAlpha;
    }

    /* JADX WARN: Code restructure failed: missing block: B:50:0x00b7, code lost:
        if (r3.voiceTranscriptionForce != false) goto L52;
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x00c1, code lost:
        if (r0.getDuration() >= 60.0d) goto L52;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateWaveform() {
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            int i = this.documentAttachType;
            if (i == 3 || i == 7) {
                byte[] waveform = messageObject.getWaveform();
                boolean z = false;
                this.useSeekBarWaveform = waveform != null;
                SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
                if (seekBarWaveform != null) {
                    seekBarWaveform.setWaveform(waveform);
                }
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2 != null && !messageObject2.isQuickReply()) {
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (!messageObject3.isRepostPreview && (!messageObject3.isOutOwner() || this.currentMessageObject.isSent())) {
                        if (!UserConfig.getInstance(this.currentAccount).isPremium()) {
                            if (MessagesController.getInstance(this.currentAccount).transcribeAudioTrialWeeklyNumber > 0 && this.currentMessageObject.getDuration() <= MessagesController.getInstance(this.currentAccount).transcribeAudioTrialDurationMax) {
                                TLRPC$Message tLRPC$Message2 = this.currentMessageObject.messageOwner;
                                if (tLRPC$Message2 == null || (TextUtils.isEmpty(tLRPC$Message2.voiceTranscription) && !this.currentMessageObject.messageOwner.voiceTranscriptionFinal)) {
                                    TranscribeButton.canTranscribeTrial(this.currentMessageObject);
                                }
                            } else if (MessagesController.getInstance(this.currentAccount).transcribeAudioTrialWeeklyNumber <= 0) {
                                if (!MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked()) {
                                    if (!MessagesController.getInstance(this.currentAccount).didPressTranscribeButtonEnough()) {
                                        if (!this.currentMessageObject.isOutOwner()) {
                                            MessageObject messageObject4 = this.currentMessageObject;
                                            TLRPC$Message tLRPC$Message3 = messageObject4.messageOwner;
                                            if (tLRPC$Message3 != null) {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (((this.currentMessageObject.isVoice() && this.useSeekBarWaveform) || this.currentMessageObject.isRoundVideo()) && (tLRPC$Message = this.currentMessageObject.messageOwner) != null && !(MessageObject.getMedia(tLRPC$Message) instanceof TLRPC$TL_messageMediaWebPage) && ((tLRPC$MessageMedia = this.currentMessageObject.messageOwner.media) == null || tLRPC$MessageMedia.ttl_seconds == 0)) {
                            z = true;
                        }
                    }
                }
                this.useTranscribeButton = z;
                updateSeekBarWaveformWidth(null);
            }
        }
    }

    private void updateSeekBarWaveformWidth(Canvas canvas) {
        int i;
        this.seekBarWaveformTranslateX = 0;
        this.seekBarTranslateX = 0;
        int i2 = -AndroidUtilities.dp((this.hasLinkPreview ? 10 : 0) + 92);
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner && ((i = this.documentAttachType) == 3 || i == 7)) {
            int i3 = this.backgroundWidth;
            float f = i3;
            int i4 = (int) ((f - transitionParams.toDeltaLeft) + transitionParams.toDeltaRight);
            int i5 = (int) ((f - transitionParams.deltaLeft) + transitionParams.deltaRight);
            if (this.isRoundVideo && !this.drawBackground) {
                i5 = (int) (i5 + (getVideoTranscriptionProgress() * AndroidUtilities.dp(8.0f)));
                i4 += AndroidUtilities.dp(8.0f);
            }
            TransitionParams transitionParams2 = this.transitionParams;
            if (transitionParams2.toDeltaLeft == 0.0f && transitionParams2.toDeltaRight == 0.0f) {
                i4 = i5;
            }
            SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
            if (seekBarWaveform != null) {
                if (transitionParams2.animateUseTranscribeButton) {
                    seekBarWaveform.setSize(((i5 + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f), i3 + i2 + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0), i4 + i2 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0));
                } else {
                    seekBarWaveform.setSize(((i5 + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f), (i3 + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), (i4 + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())));
                }
            }
            SeekBar seekBar = this.seekBar;
            if (seekBar != null) {
                seekBar.setSize((i5 - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)))) - AndroidUtilities.dp((this.documentAttachType == 5 ? 65 : 72) + (this.hasLinkPreview ? 20 : 0)), AndroidUtilities.dp(30.0f));
                return;
            }
            return;
        }
        SeekBarWaveform seekBarWaveform2 = this.seekBarWaveform;
        if (seekBarWaveform2 != null) {
            if (transitionParams.animateUseTranscribeButton) {
                seekBarWaveform2.setSize(((this.backgroundWidth + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f), ((this.backgroundWidth + i2) + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0)) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), this.backgroundWidth + i2 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0));
            } else {
                seekBarWaveform2.setSize(((this.backgroundWidth + i2) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f));
            }
        }
        SeekBar seekBar2 = this.seekBar;
        if (seekBar2 != null) {
            seekBar2.setSize((this.backgroundWidth - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)))) - AndroidUtilities.dp((this.documentAttachType == 5 ? 65 : 72) + (this.hasLinkPreview ? 20 : 0)), AndroidUtilities.dp(30.0f));
        }
    }

    private int createDocumentLayout(int i, MessageObject messageObject) {
        int i2;
        int i3 = i;
        int i4 = 0;
        TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.sponsoredMedia;
        if (tLRPC$MessageMedia != null) {
            this.documentAttach = tLRPC$MessageMedia.document;
        } else if (messageObject.type == 0) {
            this.documentAttach = MessageObject.getMedia(messageObject.messageOwner).webpage.document;
        } else {
            this.documentAttach = messageObject.getDocument();
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        if (tLRPC$Document == null) {
            return 0;
        }
        double d = 0.0d;
        if (MessageObject.isVoiceDocument(tLRPC$Document)) {
            this.documentAttachType = 3;
            int i5 = 0;
            while (true) {
                if (i5 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute = this.documentAttach.attributes.get(i5);
                if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeAudio) {
                    d = tLRPC$DocumentAttribute.duration;
                    break;
                }
                i5++;
            }
            this.widthBeforeNewTimeLine = (i3 - AndroidUtilities.dp(94.0f)) - ((int) Math.ceil(Theme.chat_audioTimePaint.measureText("00:00")));
            this.availableTimeWidth = i3 - AndroidUtilities.dp(18.0f);
            measureTime(messageObject);
            int dp = AndroidUtilities.dp(174.0f) + this.timeWidth;
            if (!this.hasLinkPreview) {
                this.backgroundWidth = Math.min(i3, dp + ((int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatLongDuration((int) d)))));
            }
            this.seekBarWaveform.setMessageObject(messageObject);
            return 0;
        } else if (MessageObject.isVideoDocument(this.documentAttach)) {
            this.documentAttachType = 4;
            if (!messageObject.needDrawBluredPreview()) {
                updatePlayingMessageProgress();
                String format = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                this.docTitleLayout = new StaticLayout(format, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        } else if (MessageObject.isMusicDocument(this.documentAttach)) {
            this.documentAttachType = 5;
            int dp2 = i3 - AndroidUtilities.dp(92.0f);
            if (dp2 < 0) {
                dp2 = AndroidUtilities.dp(100.0f);
            }
            int i6 = dp2;
            TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
            CharSequence ellipsize = TextUtils.ellipsize(messageObject.getMusicTitle().replace('\n', ' '), Theme.chat_audioTitlePaint, i6 - AndroidUtilities.dp(12.0f), truncateAt);
            TextPaint textPaint = Theme.chat_audioTitlePaint;
            Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
            StaticLayout staticLayout = new StaticLayout(ellipsize, textPaint, i6, alignment, 1.0f, 0.0f, false);
            this.songLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
                this.songX = -((int) Math.ceil(this.songLayout.getLineLeft(0)));
            }
            StaticLayout staticLayout2 = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicAuthor().replace('\n', ' '), Theme.chat_audioPerformerPaint, i6, truncateAt), Theme.chat_audioPerformerPaint, i6, alignment, 1.0f, 0.0f, false);
            this.performerLayout = staticLayout2;
            if (staticLayout2.getLineCount() > 0) {
                this.performerX = -((int) Math.ceil(this.performerLayout.getLineLeft(0)));
            }
            while (true) {
                if (i4 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i4);
                if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                    d = tLRPC$DocumentAttribute2.duration;
                    break;
                }
                i4++;
            }
            int i7 = (int) d;
            int ceil = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatShortDuration(i7, i7)));
            this.widthBeforeNewTimeLine = (this.backgroundWidth - AndroidUtilities.dp(86.0f)) - ceil;
            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(28.0f);
            return ceil;
        } else if (MessageObject.isGifDocument(this.documentAttach, messageObject.hasValidGroupId())) {
            this.documentAttachType = 2;
            if (!messageObject.needDrawBluredPreview()) {
                String string = LocaleController.getString("AttachGif", R.string.AttachGif);
                this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(string));
                TextPaint textPaint2 = Theme.chat_infoPaint;
                int i8 = this.infoWidth;
                Layout.Alignment alignment2 = Layout.Alignment.ALIGN_NORMAL;
                this.infoLayout = new StaticLayout(string, textPaint2, i8, alignment2, 1.0f, 0.0f, false);
                String format2 = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                this.docTitleLayout = new StaticLayout(format2, Theme.chat_infoPaint, this.docTitleWidth, alignment2, 1.0f, 0.0f, false);
            }
            return 0;
        } else {
            String str = this.documentAttach.mime_type;
            boolean z = (str != null && (str.toLowerCase().startsWith("image/") || this.documentAttach.mime_type.toLowerCase().startsWith("video/mp4"))) || MessageObject.isDocumentHasThumb(this.documentAttach);
            this.drawPhotoImage = z;
            if (!z) {
                i3 += AndroidUtilities.dp(30.0f);
            }
            this.documentAttachType = 1;
            String documentFileName = FileLoader.getDocumentFileName(this.documentAttach);
            if (documentFileName.length() == 0) {
                documentFileName = LocaleController.getString("AttachDocument", R.string.AttachDocument);
            }
            StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(documentFileName, Theme.chat_docNamePaint, i3, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, i3, 2, false);
            this.docTitleLayout = createStaticLayout;
            this.docTitleOffsetX = Integer.MIN_VALUE;
            if (createStaticLayout != null && createStaticLayout.getLineCount() > 0) {
                int i9 = 0;
                while (i4 < this.docTitleLayout.getLineCount()) {
                    i9 = Math.max(i9, (int) Math.ceil(this.docTitleLayout.getLineWidth(i4)));
                    this.docTitleOffsetX = Math.max(this.docTitleOffsetX, (int) Math.ceil(-this.docTitleLayout.getLineLeft(i4)));
                    i4++;
                }
                i2 = Math.min(i3, i9);
            } else {
                this.docTitleOffsetX = 0;
                i2 = i3;
            }
            int dp3 = i3 - AndroidUtilities.dp(30.0f);
            TextPaint textPaint3 = Theme.chat_infoPaint;
            int min = Math.min(dp3, (int) Math.ceil(textPaint3.measureText("000.0 mm / " + AndroidUtilities.formatFileSize(this.documentAttach.size))));
            this.infoWidth = min;
            CharSequence ellipsize2 = TextUtils.ellipsize(AndroidUtilities.formatFileSize(this.documentAttach.size) + " " + FileLoader.getDocumentExtension(this.documentAttach), Theme.chat_infoPaint, (float) min, TextUtils.TruncateAt.END);
            try {
                if (this.infoWidth < 0) {
                    this.infoWidth = AndroidUtilities.dp(10.0f);
                }
                this.infoLayout = new StaticLayout(ellipsize2, Theme.chat_infoPaint, this.infoWidth + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.drawPhotoImage) {
                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                if (this.currentMessageObject.isHiddenSensitive() || (DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) == 0) {
                    this.currentPhotoObject = null;
                }
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                if (tLRPC$PhotoSize == null || tLRPC$PhotoSize == this.currentPhotoObjectThumb) {
                    this.currentPhotoObject = null;
                    this.photoImage.setNeedsQualityThumb(true);
                    this.photoImage.setShouldGenerateQualityThumb(true);
                } else {
                    BitmapDrawable bitmapDrawable = this.currentMessageObject.strippedThumb;
                    if (bitmapDrawable != null) {
                        this.currentPhotoObjectThumb = null;
                        this.currentPhotoObjectThumbStripped = bitmapDrawable;
                    }
                }
                this.currentPhotoFilter = "86_86_b";
                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, messageObject.photoThumbsObject), "86_86", ImageLocation.getForObject(this.currentPhotoObjectThumb, messageObject.photoThumbsObject), this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 1);
            }
            return i2;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:52:0x0087, code lost:
        if (r0.isSmall == false) goto L46;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x0095, code lost:
        if (r0.isSmall == false) goto L52;
     */
    /* JADX WARN: Removed duplicated region for block: B:64:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x00dc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcBackgroundWidth(int i, int i2, int i3) {
        int i4;
        if (this.currentMessageObject.isSponsored()) {
            this.backgroundWidth = i3 + AndroidUtilities.dp(31.0f);
            return;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        boolean z = reactionsLayoutInBubble.isEmpty;
        int i5 = (z || reactionsLayoutInBubble.isSmall) ? this.currentMessageObject.lastLineWidth : reactionsLayoutInBubble.lastLineX;
        boolean z2 = false;
        if (!z && !reactionsLayoutInBubble.isSmall) {
            z2 = (i - i5 < i2 || this.currentMessageObject.hasRtl) ? true : true;
            if (this.hasInvoicePreview) {
                this.totalHeight += AndroidUtilities.dp(14.0f);
            }
        } else if ((!this.linkPreviewAbove && ((this.hasLinkPreview && !this.currentMessageObject.isSponsored()) || this.hasFactCheck || this.hasOldCaptionPreview || this.hasGamePreview || this.hasInvoicePreview)) || i - i5 < i2 || this.currentMessageObject.hasRtl) {
            z2 = true;
        }
        if (this.currentMessageObject.isUnsupported()) {
            z2 = true;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.hasCodeAtBottom) {
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble2.isEmpty) {
            }
            i4 = 18;
            z2 = true;
            if (!z2) {
                this.totalHeight += AndroidUtilities.dp(i4);
                this.hasNewLineForTime = true;
                int max = Math.max(i3, i5) + AndroidUtilities.dp(31.0f);
                this.backgroundWidth = max;
                this.backgroundWidth = Math.max(max, (this.currentMessageObject.isOutOwner() ? this.timeWidth + AndroidUtilities.dp(17.0f) : this.timeWidth) + AndroidUtilities.dp(31.0f));
                return;
            }
            int extraTextX = (i3 - getExtraTextX()) - i5;
            if (extraTextX >= 0 && extraTextX <= i2) {
                this.backgroundWidth = ((i3 + i2) - extraTextX) + AndroidUtilities.dp(31.0f);
                return;
            } else {
                this.backgroundWidth = Math.max(i3, i5 + i2) + AndroidUtilities.dp(31.0f);
                return;
            }
        }
        if (messageObject.hasQuoteAtBottom) {
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble3.isEmpty) {
            }
            i4 = 18;
            z2 = true;
            if (!z2) {
            }
        }
        if (!messageObject.isGiveawayOrGiveawayResults()) {
            i4 = 14;
            if (!z2) {
            }
        }
        i4 = 18;
        z2 = true;
        if (!z2) {
        }
    }

    public boolean setHighlightedText(String str) {
        return setHighlightedText(str, false, -1, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:92:0x011a, code lost:
        if (r0.end == r6) goto L61;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean setHighlightedText(String str, boolean z, int i, boolean z2) {
        String str2;
        String str3;
        int i2;
        int i3;
        int i4;
        if (this.highlightedQuote && !z && TextUtils.isEmpty(str)) {
            return false;
        }
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        MessageObject messageObject2 = messageObject;
        this.highlightedQuote = z;
        if (messageObject2 == null || TextUtils.isEmpty(str)) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (!z) {
            this.quoteHighlight = null;
        }
        CharSequence charSequence = this.currentCaption;
        if (charSequence != null) {
            str2 = charSequence.toString();
        } else {
            str2 = messageObject2.messageOwner.message;
        }
        if (str2 == null || TextUtils.isEmpty(str2)) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (z) {
            str3 = str;
        } else {
            str3 = str.toLowerCase();
            str2 = str2.toLowerCase();
        }
        if (z) {
            i3 = MessageObject.findQuoteStart(str2, str3, i);
            i2 = str3.length();
        } else {
            int length = str2.length();
            int i5 = -1;
            int i6 = -1;
            for (int i7 = 0; i7 < length; i7++) {
                int min = Math.min(str3.length(), length - i7);
                int i8 = 0;
                int i9 = 0;
                while (i8 < min) {
                    boolean z3 = str2.charAt(i7 + i8) == str3.charAt(i8);
                    if (z3) {
                        if (i9 != 0 || i7 == 0 || " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(str2.charAt(i7 - 1)) >= 0) {
                            i9++;
                        } else {
                            i4 = i9;
                            z3 = false;
                            if (z3 || i8 == min - 1) {
                                if (i4 > 0 && i4 > i5) {
                                    i6 = i7;
                                    i5 = i4;
                                }
                            } else {
                                i8++;
                                i9 = i4;
                            }
                        }
                    }
                    i4 = i9;
                    if (z3) {
                    }
                    if (i4 > 0) {
                        i6 = i7;
                        i5 = i4;
                    }
                }
            }
            i2 = i5;
            i3 = i6;
        }
        if (i3 == -1) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (!z) {
            int length2 = str2.length();
            for (int i10 = i3 + i2; i10 < length2 && " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(str2.charAt(i10)) < 0; i10++) {
                i2++;
            }
        }
        this.highlightedQuote = z;
        int i11 = i3 + i2;
        if (z && this.currentMessagesGroup == null && this.groupedMessagesToSet == null) {
            QuoteHighlight quoteHighlight = this.quoteHighlight;
            boolean z4 = quoteHighlight == null || !quoteHighlight.done();
            QuoteHighlight quoteHighlight2 = this.quoteHighlight;
            if (quoteHighlight2 != null && quoteHighlight2.id == messageObject2.getId()) {
                QuoteHighlight quoteHighlight3 = this.quoteHighlight;
                if (quoteHighlight3.start == i3) {
                }
            }
            if (this.captionLayout != null) {
                ViewParent parent = getParent();
                int id = messageObject2.getId();
                MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                this.quoteHighlight = new QuoteHighlight(this, parent, id, textLayoutBlocks.textLayoutBlocks, i3, i11, textLayoutBlocks.textXOffset);
            } else {
                this.quoteHighlight = new QuoteHighlight(this, getParent(), messageObject2.getId(), messageObject2.textLayoutBlocks, i3, i11, messageObject2.textXOffset);
            }
            QuoteHighlight quoteHighlight4 = this.quoteHighlight;
            if (quoteHighlight4 == null || quoteHighlight4.quotesToExpand.isEmpty()) {
                return true;
            }
            if (!z2) {
                if (z4) {
                    return true;
                }
                this.quoteHighlight = null;
                return true;
            }
            MessageObject primaryMessageObject = getPrimaryMessageObject();
            if (primaryMessageObject != null) {
                messageObject2 = primaryMessageObject;
            }
            HashSet<Integer> hashSet = messageObject2.expandedQuotes == null ? new HashSet<>() : new HashSet<>(messageObject2.expandedQuotes);
            messageObject2.expandedQuotes = hashSet;
            hashSet.addAll(this.quoteHighlight.quotesToExpand);
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            if (chatMessageCellDelegate != null) {
                chatMessageCellDelegate.forceUpdate(this, false);
                return true;
            }
            return true;
        } else if (!TextUtils.isEmpty(this.currentCaption)) {
            MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
            if (textLayoutBlocks2 == null) {
                this.highlightCaptionToSetStart = i3;
                this.highlightCaptionToSetEnd = i11;
                return true;
            }
            highlight(i3, i11, textLayoutBlocks2.textLayoutBlocks);
            return true;
        } else {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject2.textLayoutBlocks;
            if (arrayList != null) {
                highlight(i3, i11, arrayList);
                return true;
            }
            return true;
        }
    }

    private void highlight(int i, int i2, ArrayList<MessageObject.TextLayoutBlock> arrayList) {
        if (arrayList == null) {
            return;
        }
        int i3 = i2 - i;
        int i4 = 0;
        while (true) {
            if (i4 >= arrayList.size()) {
                break;
            }
            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i4);
            if (i < textLayoutBlock.charactersOffset || i >= textLayoutBlock.charactersEnd) {
                i4++;
            } else {
                this.linkSelectionBlockNum = i4;
                resetUrlPaths();
                try {
                    LinkPath obtainNewUrlPath = obtainNewUrlPath();
                    obtainNewUrlPath.setUseCornerPathImplementation(true);
                    obtainNewUrlPath.setCurrentLayout(textLayoutBlock.textLayout, i, 0.0f);
                    textLayoutBlock.textLayout.getSelectionPath(i, i2, obtainNewUrlPath);
                    obtainNewUrlPath.closeRects();
                    float f = textLayoutBlock.height + textLayoutBlock.padBottom;
                    if (i2 >= textLayoutBlock.charactersOffset + i3) {
                        for (int i5 = i4 + 1; i5 < arrayList.size(); i5++) {
                            MessageObject.TextLayoutBlock textLayoutBlock2 = arrayList.get(i5);
                            int i6 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                            LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                            obtainNewUrlPath2.setUseCornerPathImplementation(true);
                            float f2 = f + textLayoutBlock2.padTop;
                            obtainNewUrlPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, f2);
                            f = f2 + textLayoutBlock2.height + textLayoutBlock2.padBottom;
                            textLayoutBlock2.textLayout.getSelectionPath(0, i2 - textLayoutBlock2.charactersOffset, obtainNewUrlPath2);
                            obtainNewUrlPath2.closeRects();
                            if (i2 < (textLayoutBlock.charactersOffset + i6) - 1) {
                                break;
                            }
                        }
                    }
                    if (this.highlightedQuote) {
                        this.isHighlightedAnimated = true;
                        this.highlightProgress = 2500;
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                invalidate();
            }
        }
        this.highlightCaptionToSetStart = -1;
        this.highlightCaptionToSetEnd = -1;
    }

    public boolean setHighlightedSpan(CharacterStyle characterStyle) {
        int i;
        int i2;
        int i3;
        int i4;
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.highlightedQuote = false;
        if (messageObject == null || messageObject.messageOwner.message == null || characterStyle == null) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (this.captionLayout != null && !TextUtils.isEmpty(messageObject.caption)) {
            CharSequence charSequence = messageObject.caption;
            if (charSequence instanceof Spannable) {
                Spanned spanned = (Spanned) charSequence;
                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spanned.getSpans(0, spanned.length(), CharacterStyle.class);
                if (characterStyleArr != null && characterStyleArr.length > 0) {
                    for (CharacterStyle characterStyle2 : characterStyleArr) {
                        if (characterStyle2 == characterStyle) {
                            i4 = spanned.getSpanStart(characterStyle);
                            i3 = spanned.getSpanEnd(characterStyle);
                            break;
                        }
                    }
                }
                i3 = -1;
                i4 = -1;
                if (i4 >= 0 && i3 >= 0) {
                    int i5 = i3 - i4;
                    for (int i6 = 0; i6 < this.captionLayout.textLayoutBlocks.size(); i6++) {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i6);
                        if (i4 >= textLayoutBlock.charactersOffset && i4 < textLayoutBlock.charactersEnd) {
                            this.linkSelectionBlockNum = i6;
                            this.highlightedQuote = false;
                            resetUrlPaths();
                            try {
                                LinkPath obtainNewUrlPath = obtainNewUrlPath();
                                obtainNewUrlPath.setCurrentLayout(textLayoutBlock.textLayout, i4, 0.0f);
                                textLayoutBlock.textLayout.getSelectionPath(i4, i3, obtainNewUrlPath);
                                if (i3 >= textLayoutBlock.charactersOffset + i5) {
                                    for (int i7 = i6 + 1; i7 < this.captionLayout.textLayoutBlocks.size(); i7++) {
                                        MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i7);
                                        int i8 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                                        LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                                        obtainNewUrlPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.height);
                                        textLayoutBlock2.textLayout.getSelectionPath(0, i3 - textLayoutBlock2.charactersOffset, obtainNewUrlPath2);
                                        if (i3 < (textLayoutBlock.charactersOffset + i8) - 1) {
                                            break;
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                FileLog.e(e);
                            }
                            invalidate();
                            return true;
                        }
                    }
                }
            }
        }
        CharSequence charSequence2 = messageObject.messageText;
        if ((charSequence2 instanceof Spanned) && messageObject.textLayoutBlocks != null) {
            Spanned spanned2 = (Spanned) charSequence2;
            CharacterStyle[] characterStyleArr2 = (CharacterStyle[]) spanned2.getSpans(0, spanned2.length(), CharacterStyle.class);
            if (characterStyleArr2 != null && characterStyleArr2.length > 0) {
                for (CharacterStyle characterStyle3 : characterStyleArr2) {
                    if (characterStyle3 == characterStyle) {
                        i2 = spanned2.getSpanStart(characterStyle);
                        i = spanned2.getSpanEnd(characterStyle);
                        break;
                    }
                }
            }
            i = -1;
            i2 = -1;
            if (i2 >= 0 && i >= 0) {
                int i9 = i - i2;
                for (int i10 = 0; i10 < messageObject.textLayoutBlocks.size(); i10++) {
                    MessageObject.TextLayoutBlock textLayoutBlock3 = messageObject.textLayoutBlocks.get(i10);
                    if (i2 >= textLayoutBlock3.charactersOffset && i2 < textLayoutBlock3.charactersEnd) {
                        this.linkSelectionBlockNum = i10;
                        this.highlightedQuote = false;
                        resetUrlPaths();
                        try {
                            LinkPath obtainNewUrlPath3 = obtainNewUrlPath();
                            obtainNewUrlPath3.setCurrentLayout(textLayoutBlock3.textLayout, i2, 0.0f);
                            textLayoutBlock3.textLayout.getSelectionPath(i2, i, obtainNewUrlPath3);
                            if (i >= textLayoutBlock3.charactersOffset + i9) {
                                for (int i11 = i10 + 1; i11 < messageObject.textLayoutBlocks.size(); i11++) {
                                    MessageObject.TextLayoutBlock textLayoutBlock4 = messageObject.textLayoutBlocks.get(i11);
                                    int i12 = textLayoutBlock4.charactersEnd - textLayoutBlock4.charactersOffset;
                                    LinkPath obtainNewUrlPath4 = obtainNewUrlPath();
                                    obtainNewUrlPath4.setCurrentLayout(textLayoutBlock4.textLayout, 0, textLayoutBlock4.height);
                                    textLayoutBlock4.textLayout.getSelectionPath(0, i - textLayoutBlock4.charactersOffset, obtainNewUrlPath4);
                                    if (i < (textLayoutBlock3.charactersOffset + i12) - 1) {
                                        break;
                                    }
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                        invalidate();
                        return true;
                    }
                }
            }
        }
        if (!this.urlPathSelection.isEmpty()) {
            this.linkSelectionBlockNum = -1;
            this.highlightedQuote = false;
            resetUrlPaths();
            invalidate();
        }
        return false;
    }

    @Override // android.view.View
    protected boolean verifyDrawable(Drawable drawable) {
        if (super.verifyDrawable(drawable)) {
            return true;
        }
        Drawable[] drawableArr = this.selectorDrawable;
        if (drawable == drawableArr[0] || drawable == drawableArr[1] || drawable == this.linkPreviewSelector || drawable == this.nameLayoutSelector || drawable == this.replySelector) {
            return true;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        return (reactionsLayoutInBubble != null && reactionsLayoutInBubble.verifyDrawable(drawable)) || (drawable instanceof LoadingDrawable);
    }

    @Override // android.view.View, android.graphics.drawable.Drawable.Callback
    public void invalidateDrawable(Drawable drawable) {
        super.invalidateDrawable(drawable);
        if (this.currentMessagesGroup != null) {
            invalidateWithParent();
        }
    }

    private boolean isCurrentLocationTimeExpired(MessageObject messageObject) {
        int i = MessageObject.getMedia(this.currentMessageObject.messageOwner).period;
        int currentTime = ConnectionsManager.getInstance(this.currentAccount).getCurrentTime();
        if (i == Integer.MAX_VALUE) {
            return false;
        }
        return i % 60 == 0 ? Math.abs(currentTime - messageObject.messageOwner.date) > i : Math.abs(currentTime - messageObject.messageOwner.date) > i + (-5);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkLocationExpired() {
        boolean isCurrentLocationTimeExpired;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject)) == this.locationExpired) {
            return;
        }
        this.locationExpired = isCurrentLocationTimeExpired;
        if (!isCurrentLocationTimeExpired) {
            AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
            this.scheduledInvalidate = true;
            int dp = this.backgroundWidth - AndroidUtilities.dp(91.0f);
            this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString(R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        this.currentMessageObject = null;
        setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    public void setIsUpdating(boolean z) {
        this.isUpdating = true;
    }

    public void setMessageObject(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        if (this.attachedToWindow && !this.frozen) {
            setMessageContent(messageObject, groupedMessages, z, z2);
            return;
        }
        this.messageObjectToSet = messageObject;
        this.groupedMessagesToSet = groupedMessages;
        this.bottomNearToSet = z;
        this.topNearToSet = z2;
    }

    private int getAdditionalWidthForPosition(MessageObject.GroupedMessagePosition groupedMessagePosition) {
        if (groupedMessagePosition != null) {
            int dp = (groupedMessagePosition.flags & 2) == 0 ? AndroidUtilities.dp(4.0f) : 0;
            return (groupedMessagePosition.flags & 1) == 0 ? dp + AndroidUtilities.dp(4.0f) : dp;
        }
        return 0;
    }

    public void createSelectorDrawable(final int i) {
        int themedColor;
        ReplyMessageLine replyMessageLine;
        ReplyMessageLine replyMessageLine2;
        if (Build.VERSION.SDK_INT < 21) {
            return;
        }
        if (this.currentMessageObject.isUnsupported()) {
            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText);
        } else if (i == 0 && this.psaHintPressed) {
            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViews : Theme.key_chat_inViews);
        } else if (i == 0 && (replyMessageLine2 = this.linkLine) != null) {
            themedColor = replyMessageLine2.getColor();
        } else if (i == 0 && (replyMessageLine = this.contactLine) != null) {
            themedColor = replyMessageLine.getColor();
        } else {
            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText);
        }
        Drawable drawable = this.selectorDrawable[i];
        if (drawable == null) {
            this.selectorMaskDrawable[i] = new MaskDrawable() { // from class: org.telegram.ui.Cells.ChatMessageCell.6
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                {
                    super();
                }

                @Override // org.telegram.ui.Cells.ChatMessageCell.MaskDrawable
                public void updatePath() {
                    Rect bounds = getBounds();
                    RectF rectF = this.rect;
                    int i2 = bounds.left;
                    this.pathX = i2;
                    int i3 = bounds.top;
                    this.pathY = i3;
                    rectF.set(i2, i3, bounds.right, bounds.bottom);
                    this.path.rewind();
                    if (ChatMessageCell.this.selectorDrawableMaskType[i] != 3 && ChatMessageCell.this.selectorDrawableMaskType[i] != 4) {
                        if (ChatMessageCell.this.selectorDrawableMaskType[i] == 2) {
                            boolean z = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOutOwner();
                            for (int i4 = 0; i4 < 4; i4++) {
                                if (!ChatMessageCell.this.instantTextNewLine) {
                                    if (i4 == (z ? 3 : 2)) {
                                        float[] fArr = ChatMessageCell.radii;
                                        int i5 = i4 * 2;
                                        float dp = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i5 + 1] = dp;
                                        fArr[i5] = dp;
                                    } else if (((ChatMessageCell.this.mediaBackground && ChatMessageCell.this.currentPosition == null) || ChatMessageCell.this.pinnedBottom) && (i4 == 2 || i4 == 3)) {
                                        float[] fArr2 = ChatMessageCell.radii;
                                        int i6 = i4 * 2;
                                        float[] fArr3 = ChatMessageCell.radii;
                                        int i7 = i6 + 1;
                                        float dp2 = AndroidUtilities.dp(ChatMessageCell.this.pinnedBottom ? Math.min(5, SharedConfig.bubbleRadius) : SharedConfig.bubbleRadius);
                                        fArr3[i7] = dp2;
                                        fArr2[i6] = dp2;
                                    }
                                }
                                float[] fArr4 = ChatMessageCell.radii;
                                int i8 = i4 * 2;
                                ChatMessageCell.radii[i8 + 1] = 0.0f;
                                fArr4[i8] = 0.0f;
                            }
                            if (!z) {
                                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                                if (!chatMessageCell.drawPinnedBottom && chatMessageCell.currentPosition == null && (ChatMessageCell.this.currentPosition == null || ChatMessageCell.this.pollInstantViewTouchesBottom)) {
                                    this.path.moveTo(this.rect.left + AndroidUtilities.dp(6.0f), this.rect.top);
                                    this.path.lineTo(this.rect.left + AndroidUtilities.dp(6.0f), (this.rect.bottom - AndroidUtilities.dp(6.0f)) - AndroidUtilities.dp(5.0f));
                                    RectF rectF2 = AndroidUtilities.rectTmp;
                                    rectF2.set(this.rect.left + AndroidUtilities.dp(-7.0f), this.rect.bottom - AndroidUtilities.dp(23.0f), this.rect.left + AndroidUtilities.dp(6.0f), this.rect.bottom);
                                    this.path.arcTo(rectF2, 0.0f, 83.0f, false);
                                    RectF rectF3 = this.rect;
                                    rectF2.set(this.rect.right - (ChatMessageCell.radii[4] * 2.0f), this.rect.bottom - (ChatMessageCell.radii[5] * 2.0f), rectF3.right, rectF3.bottom);
                                    this.path.arcTo(rectF2, 90.0f, -90.0f, false);
                                    Path path = this.path;
                                    RectF rectF4 = this.rect;
                                    path.lineTo(rectF4.right, rectF4.top);
                                    this.path.close();
                                    this.path.close();
                                    return;
                                }
                            }
                            this.path.addRoundRect(this.rect, ChatMessageCell.radii, Path.Direction.CW);
                            this.path.close();
                            return;
                        }
                        float dp3 = ChatMessageCell.this.selectorDrawableMaskType[i] == 0 ? AndroidUtilities.dp(6.0f) : 0.0f;
                        this.path.addRoundRect(this.rect, dp3, dp3, Path.Direction.CW);
                        return;
                    }
                    this.path.addCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(ChatMessageCell.this.selectorDrawableMaskType[i] == 3 ? 16.0f : 20.0f), Path.Direction.CW);
                }
            };
            this.selectorDrawable[i] = new BaseCell.RippleDrawableSafe(new ColorStateList(new int[][]{StateSet.WILD_CARD}, new int[]{436207615 & getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText)}), null, this.selectorMaskDrawable[i]);
            this.selectorDrawable[i].setCallback(this);
        } else {
            Theme.setSelectorDrawableColor(drawable, themedColor & 436207615, true);
        }
        this.selectorDrawable[i].setVisible(true, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public static class MaskDrawable extends Drawable {
        protected final Paint maskPaint;
        public final Path path;
        public int pathX;
        public int pathY;
        public final RectF rect;

        @Override // android.graphics.drawable.Drawable
        public int getOpacity() {
            return -2;
        }

        @Override // android.graphics.drawable.Drawable
        public void setAlpha(int i) {
        }

        @Override // android.graphics.drawable.Drawable
        public void setColorFilter(ColorFilter colorFilter) {
        }

        public void updatePath() {
            throw null;
        }

        private MaskDrawable() {
            Paint paint = new Paint(1);
            this.maskPaint = paint;
            paint.setColor(-1);
            this.rect = new RectF();
            this.path = new Path();
        }

        @Override // android.graphics.drawable.Drawable
        public void draw(Canvas canvas) {
            updatePath();
            canvas.drawPath(this.path, this.maskPaint);
        }
    }

    private void createInstantViewButton() {
        int measureText;
        if (Build.VERSION.SDK_INT >= 21 && this.drawInstantView) {
            createSelectorDrawable(0);
        }
        if (this.drawInstantView && this.instantViewLayout == null) {
            this.instantWidth = AndroidUtilities.dp(33.0f);
            String str = this.instantViewButtonText;
            if (str == null) {
                int i = this.drawInstantViewType;
                if (i == 12) {
                    str = LocaleController.getString(R.string.OpenChannelPost);
                } else if (i == 1) {
                    str = LocaleController.getString(R.string.OpenChannel);
                } else if (i == 13) {
                    str = LocaleController.getString(R.string.SendMessage).toUpperCase();
                } else if (i == 32) {
                    str = LocaleController.getString(R.string.OpenProfile).toUpperCase();
                } else if (i == 10) {
                    str = LocaleController.getString(R.string.OpenBot);
                } else if (i == 2) {
                    str = LocaleController.getString(R.string.OpenGroup);
                } else if (i == 3) {
                    str = LocaleController.getString(R.string.OpenMessage);
                } else if (i == 5) {
                    str = LocaleController.getString(R.string.ViewContact);
                } else if (i == 6) {
                    str = LocaleController.getString(R.string.OpenBackground);
                } else if (i == 7) {
                    str = LocaleController.getString(R.string.OpenTheme);
                } else if (i == 8) {
                    if (this.pollVoted || this.pollClosed) {
                        str = LocaleController.getString(R.string.PollViewResults);
                    } else {
                        str = LocaleController.getString(R.string.PollSubmitVotes);
                    }
                } else if (i == 9 || i == 11) {
                    TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                    if (tLRPC$TL_webPage != null && tLRPC$TL_webPage.url.contains("voicechat=")) {
                        str = LocaleController.getString(R.string.VoipGroupJoinAsSpeaker);
                    } else {
                        str = LocaleController.getString(R.string.VoipGroupJoinAsLinstener);
                    }
                } else if (i == 25) {
                    str = LocaleController.getString(R.string.VoipGroupJoinAsLinstener);
                } else if (i == 14) {
                    str = LocaleController.getString(R.string.ViewChatList).toUpperCase();
                } else if (i == 15) {
                    str = LocaleController.getString(R.string.BotWebAppInstantViewOpen).toUpperCase();
                } else if (i == 16) {
                    str = LocaleController.getString(R.string.OpenLink).toUpperCase();
                } else if (i == 17) {
                    str = LocaleController.getString(R.string.ViewStory).toUpperCase();
                } else if (i == 18 || i == 22) {
                    str = LocaleController.getString(R.string.BoostLinkButton);
                } else if (i == 19) {
                    str = LocaleController.getString(R.string.BoostingHowItWork);
                } else if (i == 20) {
                    str = LocaleController.getString(R.string.OpenGift);
                } else if (i == 21) {
                    str = LocaleController.getString(R.string.AppUpdate);
                } else if (i == 23) {
                    str = LocaleController.getString(R.string.OpenStickerSet);
                } else if (i == 24) {
                    str = LocaleController.getString(R.string.OpenEmojiSet);
                } else {
                    str = LocaleController.getString(R.string.InstantView);
                }
            }
            if (this.currentMessageObject.isSponsored() && this.backgroundWidth < (measureText = (int) (Theme.chat_instantViewPaint.measureText(str) + AndroidUtilities.dp(75.0f)))) {
                this.backgroundWidth = measureText;
            }
            int dp = this.backgroundWidth - AndroidUtilities.dp(75.0f);
            StaticLayout staticLayout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, dp, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, dp + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.instantViewLayout = staticLayout;
            this.instantViewLayoutWidth = staticLayout.getLineCount() > 0 ? this.instantViewLayout.getLineWidth(0) : 0.0f;
            this.instantViewLayoutLeft = this.instantViewLayout.getLineCount() > 0 ? this.instantViewLayout.getLineLeft(0) : 0.0f;
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(this.drawInstantViewType == 8 ? 13.0f : 34.0f);
            int dp2 = this.totalHeight + AndroidUtilities.dp(46.0f);
            this.totalHeight = dp2;
            if (this.currentMessageObject.type == 12) {
                this.totalHeight = dp2 + AndroidUtilities.dp(14.0f);
            }
            if (this.currentMessageObject.isSponsored()) {
                this.totalHeight += AndroidUtilities.dp(2.0f);
            }
            StaticLayout staticLayout2 = this.instantViewLayout;
            if (staticLayout2 == null || staticLayout2.getLineCount() <= 0) {
                return;
            }
            double d = this.instantWidth;
            double ceil = Math.ceil(this.instantViewLayout.getLineWidth(0));
            Double.isNaN(d);
            this.instantTextX = (((int) (d - ceil)) / 2) + (this.drawInstantViewType == 0 ? AndroidUtilities.dp(8.0f) : 0);
            int lineLeft = (int) this.instantViewLayout.getLineLeft(0);
            this.instantTextLeftX = lineLeft;
            this.instantTextX += -lineLeft;
        }
    }

    private void createContactButtons() {
        int i;
        if (Build.VERSION.SDK_INT >= 21) {
            createSelectorDrawable(0);
        }
        if (this.drawContact) {
            boolean z = this.drawContactView;
            if (this.drawContactSendMessage) {
                boolean z2 = (z ? 1 : 0) | true;
                i = (z ? 1 : 0) + 1;
                z = z2;
            } else {
                i = z ? 1 : 0;
            }
            if (this.drawContactAdd) {
                z = (z ? 1 : 0) | true;
                i++;
            }
            if (i == 0) {
                this.contactButtons = null;
                this.drawnContactButtonsFlag = 0;
                return;
            }
            this.totalHeight += AndroidUtilities.dp(60.0f);
            if (z != this.drawnContactButtonsFlag) {
                this.drawnContactButtonsFlag = 0;
                int dp = (this.backgroundWidth - AndroidUtilities.dp(75.0f)) / i;
                float dpf2 = (this.backgroundWidth - AndroidUtilities.dpf2(37.0f)) / i;
                ArrayList<InstantViewButton> arrayList = this.contactButtons;
                if (arrayList == null) {
                    this.contactButtons = new ArrayList<>(i);
                } else {
                    arrayList.clear();
                }
                if (this.drawContactView) {
                    this.drawnContactButtonsFlag |= 1;
                    this.contactButtons.add(createInstantViewButton(5, LocaleController.getString("ViewContact", R.string.ViewContact), dp, dpf2));
                }
                if (this.drawContactSendMessage) {
                    this.drawnContactButtonsFlag |= 2;
                    this.contactButtons.add(createInstantViewButton(30, LocaleController.getString("SharedContactMessage", R.string.SharedContactMessage), dp, dpf2));
                }
                if (this.drawContactAdd) {
                    this.drawnContactButtonsFlag |= 4;
                    this.contactButtons.add(createInstantViewButton(31, LocaleController.getString("SharedContactAdd", R.string.SharedContactAdd), dp, dpf2));
                }
            }
        }
    }

    private InstantViewButton createInstantViewButton(int i, String str, int i2, float f) {
        InstantViewButton instantViewButton = new InstantViewButton();
        instantViewButton.type = i;
        instantViewButton.layout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, i2, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, i2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        instantViewButton.buttonWidth = f;
        if (instantViewButton.layout.getLineCount() > 0) {
            double d = instantViewButton.buttonWidth;
            double ceil = Math.ceil(instantViewButton.layout.getLineWidth(0));
            Double.isNaN(d);
            instantViewButton.textX = ((float) (d - ceil)) / 2.0f;
            InstantViewButton.access$5024(instantViewButton, (int) instantViewButton.layout.getLineLeft(0));
        }
        return instantViewButton;
    }

    @Override // android.view.View, android.view.ViewParent
    public void requestLayout() {
        if (this.inLayout) {
            return;
        }
        super.requestLayout();
    }

    @Override // android.view.View
    protected void onMeasure(int i, int i2) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && (messageObject.checkLayout() || this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.inLayout = true;
            MessageObject messageObject2 = this.currentMessageObject;
            this.currentMessageObject = null;
            setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            this.inLayout = false;
        }
        updateSelectionTextPosition();
        setMeasuredDimension(isWidthAdaptive() ? getBoundsRight() - getBoundsLeft() : View.MeasureSpec.getSize(i), this.totalHeight + this.keyboardHeight);
    }

    public void forceResetMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.currentMessageObject = null;
        setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    private int getGroupPhotosWidth() {
        int parentWidth = getParentWidth();
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.preview) {
            parentWidth = this.parentWidth;
        }
        if (AndroidUtilities.isInMultiwindow || !AndroidUtilities.isTablet()) {
            return parentWidth;
        }
        if (!AndroidUtilities.isSmallTablet() || getResources().getConfiguration().orientation == 2) {
            int i = (parentWidth / 100) * 35;
            if (i < AndroidUtilities.dp(320.0f)) {
                i = AndroidUtilities.dp(320.0f);
            }
            return parentWidth - i;
        }
        return parentWidth;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getExtraTextX() {
        int i = SharedConfig.bubbleRadius;
        if (i >= 15) {
            return AndroidUtilities.dp(2.0f);
        }
        if (i >= 11) {
            return AndroidUtilities.dp(1.0f);
        }
        return 0;
    }

    private int getExtraTimeX() {
        int i;
        if (!this.currentMessageObject.isOutOwner() && ((!this.mediaBackground || this.captionLayout != null) && (i = SharedConfig.bubbleRadius) > 11)) {
            return AndroidUtilities.dp((i - 11) / 1.5f);
        }
        if (!this.currentMessageObject.isOutOwner() && this.isPlayingRound && this.isAvatarVisible && this.currentMessageObject.type == 5) {
            return (int) ((AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f);
        }
        return 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // android.view.ViewGroup, android.view.View
    @SuppressLint({"DrawAllocation"})
    public void onLayout(boolean z, int i, int i2, int i3, int i4) {
        int i5;
        int i6;
        int dp;
        int dp2;
        MessageObject messageObject;
        int i7;
        int dp3;
        int i8;
        int i9;
        int dp4;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        MessageObject.TextLayoutBlocks textLayoutBlocks2;
        int dp5;
        int dp6;
        int i10;
        int dp7;
        int i11;
        int i12;
        int dp8;
        int dp9;
        MessageObject.TextLayoutBlocks textLayoutBlocks3;
        MessageObject.TextLayoutBlocks textLayoutBlocks4;
        MessageObject.TextLayoutBlocks textLayoutBlocks5;
        int dp10;
        int dp11;
        int dp12;
        if (this.currentMessageObject == null) {
            return;
        }
        int measuredHeight = getMeasuredHeight() + (getMeasuredWidth() << 16);
        int i13 = 0;
        if (this.lastSize != measuredHeight || !this.wasLayout) {
            this.layoutWidth = getMeasuredWidth();
            this.layoutHeight = getMeasuredHeight() - this.substractBackgroundHeight;
            if (this.timeTextWidth < 0) {
                this.timeTextWidth = AndroidUtilities.dp(10.0f);
            }
            if (this.currentTimeString != null) {
                this.timeLayout = new StaticLayout(this.currentTimeString, Theme.chat_timePaint, this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.timeLayout = null;
            }
            if (this.mediaBackground) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(42.0f);
                } else {
                    this.timeX = (this.backgroundWidth - AndroidUtilities.dp(4.0f)) - this.timeWidth;
                    if (this.currentMessageObject.isAnyKindOfSticker()) {
                        this.timeX = Math.max(AndroidUtilities.dp(26.0f), this.timeX);
                    }
                    if (this.isAvatarVisible && !isWidthAdaptive()) {
                        this.timeX += AndroidUtilities.dp(48.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null && (i5 = groupedMessagePosition.leftSpanOffset) != 0) {
                        this.timeX += (int) Math.ceil((i5 / 1000.0f) * getGroupPhotosWidth());
                    }
                    if (this.captionLayout != null && this.currentPosition != null) {
                        this.timeX += AndroidUtilities.dp(4.0f);
                    }
                }
                if (SharedConfig.bubbleRadius >= 10 && this.captionLayout == null && (i6 = this.documentAttachType) != 7 && i6 != 6) {
                    this.timeX -= AndroidUtilities.dp(2.0f);
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(38.5f);
            } else {
                this.timeX = (this.backgroundWidth - AndroidUtilities.dp(9.0f)) - this.timeWidth;
                if (this.currentMessageObject.isAnyKindOfSticker()) {
                    this.timeX = Math.max(0, this.timeX);
                }
                if (this.isAvatarVisible && !isWidthAdaptive()) {
                    this.timeX += AndroidUtilities.dp(48.0f);
                }
                if (shouldDrawTimeOnMedia()) {
                    this.timeX -= AndroidUtilities.dp(7.0f);
                }
            }
            int extraTimeX = this.timeX - getExtraTimeX();
            this.timeX = extraTimeX;
            if (this.effectId != 0) {
                this.timeX = extraTimeX + AndroidUtilities.dp(18.0f);
            }
            if ((this.currentMessageObject.messageOwner.flags & 1024) != 0) {
                String str = this.currentViewsString;
                if (str == null) {
                    str = "";
                }
                this.viewsLayout = new StaticLayout(str, Theme.chat_timePaint, this.viewsTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.viewsLayout = null;
            }
            if (this.currentRepliesString != null && !this.currentMessageObject.scheduled) {
                this.repliesLayout = new StaticLayout(this.currentRepliesString, Theme.chat_timePaint, this.repliesTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.repliesLayout = null;
            }
            if (this.isAvatarVisible) {
                this.avatarImage.setImageCoords(AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 15.0f : 6.0f), this.avatarImage.getImageY(), AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 36.0f : 42.0f), AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 36.0f : 42.0f));
            }
            if (this.currentMessageObject.type == 20 && this.currentUnlockString != null) {
                this.unlockLayout = new StaticLayout(this.currentUnlockString, Theme.chat_unlockExtendedMediaTextPaint, this.unlockTextWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                int i14 = ((TLRPC$TL_messageExtendedMediaPreview) this.currentMessageObject.messageOwner.media.extended_media.get(0)).video_duration;
                if (i14 != 0) {
                    String formatDuration = AndroidUtilities.formatDuration(i14, false);
                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatDuration));
                    this.videoInfoLayout = new StaticLayout(formatDuration, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                } else {
                    this.videoInfoLayout = null;
                }
            } else {
                this.unlockLayout = null;
            }
            this.wasLayout = true;
        }
        this.lastSize = measuredHeight;
        if (this.currentMessageObject.type == 0) {
            this.textY = AndroidUtilities.dp(10.0f) + this.namesOffset;
            if (this.currentMessageObject.isSponsored()) {
                this.linkPreviewY = this.textY + AndroidUtilities.dp(14.0f);
            } else if (this.linkPreviewAbove) {
                this.linkPreviewY = this.textY + AndroidUtilities.dp(10.0f);
                this.textY += this.linkPreviewHeight + AndroidUtilities.dp(13.0f);
                if (this.drawInstantView && !this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults()) {
                    this.textY += AndroidUtilities.dp(44.0f);
                }
            } else {
                this.linkPreviewY = this.textY + this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(10.0f);
            }
            if (this.linkPreviewAbove) {
                dp11 = this.textY + this.currentMessageObject.textHeight(this.transitionParams);
                dp12 = AndroidUtilities.dp(10.0f);
            } else {
                dp11 = this.linkPreviewY + this.linkPreviewHeight + AndroidUtilities.dp(this.drawInstantView ? 46.0f : 0.0f);
                dp12 = AndroidUtilities.dp(this.linkPreviewHeight > 0 ? 4.0f : -8.0f);
            }
            this.factCheckY = dp11 + dp12;
        }
        if (this.groupMedia != null) {
            if (this.currentMessageObject.isOutOwner()) {
                if (this.mediaBackground) {
                    dp10 = (this.layoutWidth - this.backgroundWidth) - AndroidUtilities.dp(3.0f);
                } else {
                    dp10 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(6.0f);
                }
            } else if ((this.isChat || this.currentMessageObject.isRepostPreview) && this.isAvatarVisible && !this.isPlayingRound) {
                dp10 = AndroidUtilities.dp(63.0f);
            } else {
                dp10 = AndroidUtilities.dp(15.0f);
            }
            this.groupMedia.x = dp10 - AndroidUtilities.dp(2.0f);
        }
        if (this.isRoundVideo) {
            updatePlayingMessageProgress();
        }
        int i15 = this.documentAttachType;
        if (i15 == 3 || i15 == 7) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(57.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(114.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(66.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks2 = this.captionLayout) == null) ? 0 : textLayoutBlocks2.textHeight(this.transitionParams));
            int dp13 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks = this.captionLayout) == null) ? 0 : textLayoutBlocks.textHeight(this.transitionParams));
            this.buttonY = dp13;
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i16 = this.buttonX;
            radialProgress2.setProgressRect(i16, dp13, AndroidUtilities.dp(44.0f) + i16, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
            if (this.documentAttachType == 7) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                    if (this.hasGamePreview) {
                        i7 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                    } else {
                        if (this.hasInvoicePreview) {
                            i9 = this.unmovedTextX;
                            dp4 = AndroidUtilities.dp(1.0f);
                        } else {
                            i9 = this.unmovedTextX;
                            dp4 = AndroidUtilities.dp(1.0f);
                        }
                        i7 = i9 + dp4;
                    }
                    if (this.isSmallImage) {
                        dp = i7 + this.backgroundWidth;
                        dp2 = AndroidUtilities.dp(81.0f);
                        dp -= dp2;
                    } else {
                        dp3 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                        dp = i7 + dp3;
                    }
                } else {
                    if (messageObject2.isOutOwner()) {
                        if (this.mediaBackground) {
                            dp = this.layoutWidth - this.backgroundWidth;
                            dp2 = AndroidUtilities.dp(3.0f);
                        } else {
                            i7 = this.layoutWidth - this.backgroundWidth;
                            dp3 = AndroidUtilities.dp(6.0f);
                            dp = i7 + dp3;
                        }
                    } else {
                        if ((this.isChat || ((messageObject = this.currentMessageObject) != null && messageObject.forceAvatar)) && this.isAvatarVisible && (!this.isPlayingRound || this.currentMessageObject.isVoiceTranscriptionOpen())) {
                            dp = AndroidUtilities.dp(63.0f);
                        } else {
                            dp = AndroidUtilities.dp(15.0f);
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                        if (groupedMessagePosition2 != null && !groupedMessagePosition2.edge) {
                            dp2 = AndroidUtilities.dp(10.0f);
                        }
                    }
                    dp -= dp2;
                }
                MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                if (groupedMessagePosition3 != null) {
                    if ((groupedMessagePosition3.flags & 1) == 0) {
                        dp -= AndroidUtilities.dp(2.0f);
                    }
                    if (this.currentPosition.leftSpanOffset != 0) {
                        dp += (int) Math.ceil((i8 / 1000.0f) * getGroupPhotosWidth());
                    }
                }
                if (this.currentMessageObject.type != 0) {
                    dp -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentMessageObject.isVoiceTranscriptionOpen()) {
                    dp += AndroidUtilities.dp(10.0f);
                }
                TransitionParams transitionParams = this.transitionParams;
                if (!transitionParams.imageChangeBoundsTransition || transitionParams.updatePhotoImageX) {
                    transitionParams.updatePhotoImageX = false;
                    ImageReceiver imageReceiver = this.photoImage;
                    imageReceiver.setImageCoords(dp, this.currentMessageObject.type != 5 ? this.linkPreviewY : imageReceiver.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                }
            }
        } else if (i15 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(56.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(113.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(65.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(29.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks5 = this.captionLayout) == null) ? 0 : textLayoutBlocks5.textHeight(this.transitionParams));
            int dp14 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            if (this.captionAbove && (textLayoutBlocks4 = this.captionLayout) != null) {
                i13 = textLayoutBlocks4.textHeight(this.transitionParams);
            }
            int i17 = dp14 + i13;
            this.buttonY = i17;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i18 = this.buttonX;
            radialProgress22.setProgressRect(i18, i17, AndroidUtilities.dp(44.0f) + i18, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
        } else if (i15 == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
            } else if (needDrawAvatar()) {
                this.buttonX = AndroidUtilities.dp(71.0f);
            } else {
                this.buttonX = AndroidUtilities.dp(23.0f);
            }
            if (this.hasLinkPreview) {
                this.buttonX += AndroidUtilities.dp(10.0f);
            }
            int dp15 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            if (this.captionAbove && (textLayoutBlocks3 = this.captionLayout) != null) {
                i13 = textLayoutBlocks3.textHeight(this.transitionParams);
            }
            int i19 = dp15 + i13;
            this.buttonY = i19;
            RadialProgress2 radialProgress23 = this.radialProgress;
            int i20 = this.buttonX;
            radialProgress23.setProgressRect(i20, i19, AndroidUtilities.dp(44.0f) + i20, this.buttonY + AndroidUtilities.dp(44.0f));
            this.photoImage.setImageCoords(this.buttonX - AndroidUtilities.dp(10.0f), this.buttonY - AndroidUtilities.dp(10.0f), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        } else {
            MessageObject messageObject3 = this.currentMessageObject;
            int i21 = messageObject3.type;
            if (i21 == 12) {
                if (messageObject3.isOutOwner()) {
                    dp9 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(26.0f);
                } else if (needDrawAvatar()) {
                    dp9 = AndroidUtilities.dp(84.0f);
                } else {
                    dp9 = AndroidUtilities.dp(35.0f);
                }
                this.photoImage.setImageCoords(dp9, AndroidUtilities.dp(24.0f) + this.namesOffset, AndroidUtilities.dp(46.0f), AndroidUtilities.dp(46.0f));
                return;
            }
            if (i21 == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                if (this.hasGamePreview) {
                    i10 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                } else {
                    if (this.hasInvoicePreview) {
                        i12 = this.unmovedTextX;
                        dp8 = AndroidUtilities.dp(1.0f);
                    } else {
                        i12 = this.unmovedTextX;
                        dp8 = AndroidUtilities.dp(1.0f);
                    }
                    i10 = i12 + dp8;
                }
                if (this.isSmallImage) {
                    dp5 = i10 + this.backgroundWidth;
                    dp6 = AndroidUtilities.dp(81.0f);
                    dp5 -= dp6;
                } else {
                    dp7 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                    dp5 = i10 + dp7;
                }
            } else {
                if (messageObject3.isOutOwner()) {
                    if (this.mediaBackground) {
                        dp5 = this.layoutWidth - this.backgroundWidth;
                        dp6 = AndroidUtilities.dp(3.0f);
                    } else {
                        i10 = this.layoutWidth - this.backgroundWidth;
                        dp7 = AndroidUtilities.dp(6.0f);
                        dp5 = i10 + dp7;
                    }
                } else {
                    if ((this.isChat || this.currentMessageObject.isRepostPreview) && this.isAvatarVisible && !this.isPlayingRound) {
                        dp5 = AndroidUtilities.dp(63.0f);
                    } else {
                        dp5 = AndroidUtilities.dp(15.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                    if (groupedMessagePosition4 != null && !groupedMessagePosition4.edge) {
                        dp6 = AndroidUtilities.dp(10.0f);
                    }
                }
                dp5 -= dp6;
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 != null) {
                if ((groupedMessagePosition5.flags & 1) == 0) {
                    dp5 -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    dp5 += (int) Math.ceil((i11 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            if (this.currentMessageObject.type != 0) {
                dp5 -= AndroidUtilities.dp(2.0f);
            }
            if (this.drawInstantViewType == 17) {
                dp5 = (int) (dp5 + AndroidUtilities.dp(10.0f) + ((this.instantWidth - this.photoImage.getImageWidth()) / 2.0f));
            }
            TransitionParams transitionParams2 = this.transitionParams;
            if (!transitionParams2.imageChangeBoundsTransition || transitionParams2.updatePhotoImageX) {
                transitionParams2.updatePhotoImageX = false;
                ImageReceiver imageReceiver2 = this.photoImage;
                imageReceiver2.setImageCoords(dp5, imageReceiver2.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            }
            this.buttonX = (int) (dp5 + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY;
            RadialProgress2 radialProgress24 = this.radialProgress;
            int i22 = this.buttonX;
            radialProgress24.setProgressRect(i22, imageY, AndroidUtilities.dp(48.0f) + i22, this.buttonY + AndroidUtilities.dp(48.0f));
            this.deleteProgressRect.set(this.buttonX + AndroidUtilities.dp(5.0f), this.buttonY + AndroidUtilities.dp(5.0f), this.buttonX + AndroidUtilities.dp(43.0f), this.buttonY + AndroidUtilities.dp(43.0f));
            int i23 = this.documentAttachType;
            if (i23 == 4 || i23 == 2) {
                this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                this.videoButtonY = imageY2;
                RadialProgress2 radialProgress25 = this.videoRadialProgress;
                int i24 = this.videoButtonX;
                radialProgress25.setProgressRect(i24, imageY2, AndroidUtilities.dp(24.0f) + i24, this.videoButtonY + AndroidUtilities.dp(24.0f));
            }
        }
    }

    public boolean needDelayRoundProgressDraw() {
        MessageObject messageObject;
        int i = this.documentAttachType;
        return (i == 7 || i == 4) && (messageObject = this.currentMessageObject) != null && messageObject.type != 5 && MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x02dd  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x02f3  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x007f  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0094  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x009e  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00a7  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00cc  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0129  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0146  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x014d  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01a9  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01ae  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0278  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0281  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0299  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawRoundProgress(Canvas canvas) {
        float interpolation;
        TransitionParams transitionParams;
        int i;
        VideoForwardDrawable videoForwardDrawable;
        int i2;
        float f;
        int i3;
        float dp = this.isPlayingRound ? AndroidUtilities.dp(4.0f) : 0.0f;
        boolean z = false;
        boolean z2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isMessagePaused();
        if (z2 && this.roundSeekbarTouched == 1) {
            z = true;
        }
        if (z2) {
            float f2 = this.roundToPauseProgress;
            if (f2 != 1.0f) {
                float f3 = f2 + 0.07272727f;
                this.roundToPauseProgress = f3;
                if (f3 > 1.0f) {
                    this.roundToPauseProgress = 1.0f;
                } else {
                    invalidate();
                }
                if (z) {
                    float f4 = this.roundToPauseProgress2;
                    if (f4 != 1.0f) {
                        float f5 = f4 + 0.10666667f;
                        this.roundToPauseProgress2 = f5;
                        if (f5 > 1.0f) {
                            this.roundToPauseProgress2 = 1.0f;
                        } else {
                            invalidate();
                        }
                        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                        transitionParams = this.transitionParams;
                        if (transitionParams.animatePlayingRound) {
                            dp = (this.isPlayingRound ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) * AndroidUtilities.dp(4.0f);
                        }
                        float dp2 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                        if (this.roundToPauseProgress > 0.0f) {
                            Theme.getRadialSeekbarShadowDrawable().draw(canvas, this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.roundToPauseProgress);
                        }
                        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp2, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp2, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp2, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp2);
                        if (this.roundProgressAlpha == 1.0f || (!this.hasLinkPreview && getVideoTranscriptionProgress() > 0.0f)) {
                            int alpha = Theme.chat_radialProgressPaint.getAlpha();
                            Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha));
                            i = alpha;
                        } else {
                            i = -1;
                        }
                        videoForwardDrawable = this.videoForwardDrawable;
                        if (videoForwardDrawable != null && videoForwardDrawable.isAnimating()) {
                            this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                            this.videoForwardDrawable.draw(canvas);
                        }
                        int alpha2 = Theme.chat_radialProgressPaint.getAlpha();
                        float strokeWidth = Theme.chat_radialProgressPaint.getStrokeWidth();
                        float f6 = this.roundProgressAlpha == 1.0f ? this.currentMessageObject.audioProgress : this.lastDrawingAudioProgress;
                        if (interpolation > 0.0f) {
                            float width = this.rect.width() / 2.0f;
                            Theme.chat_radialProgressPaint.setStrokeWidth((0.5f * strokeWidth * this.roundToPauseProgress) + strokeWidth);
                            Theme.chat_radialProgressPaint.setAlpha((int) (alpha2 * this.roundToPauseProgress * 0.3f));
                            canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), width, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha(alpha2);
                            double centerX = this.rect.centerX();
                            double d = ((-360.0f) * f6) + 180.0f;
                            double sin = Math.sin(Math.toRadians(d));
                            i2 = i;
                            double d2 = width;
                            Double.isNaN(d2);
                            Double.isNaN(centerX);
                            this.seekbarRoundX = (float) (centerX + (sin * d2));
                            double centerY = this.rect.centerY();
                            double cos = Math.cos(Math.toRadians(d));
                            Double.isNaN(d2);
                            Double.isNaN(centerY);
                            this.seekbarRoundY = (float) (centerY + (cos * d2));
                            Theme.chat_radialProgressPausedSeekbarPaint.setColor(-1);
                            Theme.chat_radialProgressPausedSeekbarPaint.setAlpha((int) (Math.min(1.0f, interpolation) * 255.0f * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f)));
                            canvas.drawCircle(this.seekbarRoundX, this.seekbarRoundY, AndroidUtilities.dp(3.0f) + (AndroidUtilities.dp(5.0f) * interpolation) + (AndroidUtilities.dp(3.0f) * this.roundToPauseProgress2), Theme.chat_radialProgressPausedSeekbarPaint);
                        } else {
                            i2 = i;
                        }
                        f = this.roundSeekbarOutAlpha;
                        if (f != 0.0f) {
                            float f7 = f - 0.10666667f;
                            this.roundSeekbarOutAlpha = f7;
                            if (f7 < 0.0f) {
                                this.roundSeekbarOutAlpha = 0.0f;
                            } else {
                                invalidate();
                            }
                        }
                        if (this.roundSeekbarOutAlpha != 0.0f) {
                            int i4 = i2;
                            i3 = i4 == -1 ? Theme.chat_radialProgressPaint.getAlpha() : i4;
                            float f8 = alpha2;
                            Theme.chat_radialProgressPaint.setAlpha((int) ((1.0f - this.roundSeekbarOutAlpha) * f8));
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha((int) (f8 * this.roundSeekbarOutAlpha));
                            canvas.drawArc(this.rect, -90.0f, this.roundSeekbarOutProgress * 360.0f, false, Theme.chat_radialProgressPaint);
                        } else {
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            i3 = i2;
                        }
                        if (i3 != -1) {
                            Theme.chat_radialProgressPaint.setAlpha(i3);
                        }
                        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth);
                    }
                }
                if (!z) {
                    float f9 = this.roundToPauseProgress2;
                    if (f9 != 0.0f) {
                        float f10 = f9 - 0.10666667f;
                        this.roundToPauseProgress2 = f10;
                        if (f10 < 0.0f) {
                            this.roundToPauseProgress2 = 0.0f;
                        } else {
                            invalidate();
                        }
                    }
                }
                interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                transitionParams = this.transitionParams;
                if (transitionParams.animatePlayingRound) {
                }
                float dp22 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                if (this.roundToPauseProgress > 0.0f) {
                }
                this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp22, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp22, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp22, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp22);
                if (this.roundProgressAlpha == 1.0f) {
                }
                int alpha3 = Theme.chat_radialProgressPaint.getAlpha();
                Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha3));
                i = alpha3;
                videoForwardDrawable = this.videoForwardDrawable;
                if (videoForwardDrawable != null) {
                    this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                    this.videoForwardDrawable.draw(canvas);
                }
                int alpha22 = Theme.chat_radialProgressPaint.getAlpha();
                float strokeWidth2 = Theme.chat_radialProgressPaint.getStrokeWidth();
                if (this.roundProgressAlpha == 1.0f) {
                }
                if (interpolation > 0.0f) {
                }
                f = this.roundSeekbarOutAlpha;
                if (f != 0.0f) {
                }
                if (this.roundSeekbarOutAlpha != 0.0f) {
                }
                if (i3 != -1) {
                }
                Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth2);
            }
        }
        if (!z2) {
            float f11 = this.roundToPauseProgress;
            if (f11 != 0.0f) {
                float f12 = f11 - 0.10666667f;
                this.roundToPauseProgress = f12;
                if (f12 < 0.0f) {
                    this.roundToPauseProgress = 0.0f;
                } else {
                    invalidate();
                }
            }
        }
        if (z) {
        }
        if (!z) {
        }
        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
        transitionParams = this.transitionParams;
        if (transitionParams.animatePlayingRound) {
        }
        float dp222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
        if (this.roundToPauseProgress > 0.0f) {
        }
        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp222);
        if (this.roundProgressAlpha == 1.0f) {
        }
        int alpha32 = Theme.chat_radialProgressPaint.getAlpha();
        Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha32));
        i = alpha32;
        videoForwardDrawable = this.videoForwardDrawable;
        if (videoForwardDrawable != null) {
        }
        int alpha222 = Theme.chat_radialProgressPaint.getAlpha();
        float strokeWidth22 = Theme.chat_radialProgressPaint.getStrokeWidth();
        if (this.roundProgressAlpha == 1.0f) {
        }
        if (interpolation > 0.0f) {
        }
        f = this.roundSeekbarOutAlpha;
        if (f != 0.0f) {
        }
        if (this.roundSeekbarOutAlpha != 0.0f) {
        }
        if (i3 != -1) {
        }
        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth22);
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:62:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePollAnimations(long j) {
        float f;
        if (this.pollVoteInProgress) {
            this.voteRadOffset = (this.voteRadOffset + (((float) (360 * j)) / 2000.0f)) - (((int) (f / 360.0f)) * 360);
            float f2 = this.voteCurrentProgressTime + ((float) j);
            this.voteCurrentProgressTime = f2;
            if (f2 >= 500.0f) {
                this.voteCurrentProgressTime = 500.0f;
            }
            if (this.voteRisingCircleLength) {
                this.voteCurrentCircleLength = (AndroidUtilities.accelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f) * 266.0f) + 4.0f;
            } else {
                this.voteCurrentCircleLength = 4.0f - ((this.firstCircleLength ? 360 : NotificationCenter.onRequestPermissionResultReceived) * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f)));
            }
            if (this.voteCurrentProgressTime == 500.0f) {
                boolean z = this.voteRisingCircleLength;
                if (z) {
                    this.voteRadOffset += 270.0f;
                    this.voteCurrentCircleLength = -266.0f;
                }
                this.voteRisingCircleLength = !z;
                if (this.firstCircleLength) {
                    this.firstCircleLength = false;
                }
                this.voteCurrentProgressTime = 0.0f;
            }
            invalidate();
        }
        boolean z2 = this.hintButtonVisible;
        if (z2) {
            float f3 = this.hintButtonProgress;
            if (f3 < 1.0f) {
                float f4 = f3 + (((float) j) / 180.0f);
                this.hintButtonProgress = f4;
                if (f4 > 1.0f) {
                    this.hintButtonProgress = 1.0f;
                }
                invalidate();
                if (this.animatePollAnswer) {
                    return;
                }
                float f5 = this.pollAnimationProgressTime + ((float) j);
                this.pollAnimationProgressTime = f5;
                if (f5 >= 300.0f) {
                    this.pollAnimationProgressTime = 300.0f;
                }
                float interpolation = AndroidUtilities.decelerateInterpolator.getInterpolation(this.pollAnimationProgressTime / 300.0f);
                this.pollAnimationProgress = interpolation;
                if (interpolation >= 1.0f) {
                    this.pollAnimationProgress = 1.0f;
                    this.animatePollAnswer = false;
                    this.animatePollAnswerAlpha = false;
                    this.pollVoteInProgress = false;
                    if (this.pollUnvoteInProgress && this.animatePollAvatars) {
                        int i = 0;
                        while (true) {
                            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                            if (i >= imageReceiverArr.length) {
                                break;
                            }
                            imageReceiverArr[i].setImageBitmap((Drawable) null);
                            this.pollAvatarImagesVisible[i] = false;
                            i++;
                        }
                    }
                    this.pollUnvoteInProgress = false;
                    int size = this.pollButtons.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        this.pollButtons.get(i2).prevChosen = false;
                    }
                }
                invalidate();
                return;
            }
        }
        if (!z2) {
            float f6 = this.hintButtonProgress;
            if (f6 > 0.0f) {
                float f7 = f6 - (((float) j) / 180.0f);
                this.hintButtonProgress = f7;
                if (f7 < 0.0f) {
                    this.hintButtonProgress = 0.0f;
                }
                invalidate();
            }
        }
        if (this.animatePollAnswer) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:477:0x0921, code lost:
        if (r1 < 1.0f) goto L370;
     */
    /* JADX WARN: Code restructure failed: missing block: B:633:0x0ce6, code lost:
        if (r1 < 1.0f) goto L531;
     */
    /* JADX WARN: Removed duplicated region for block: B:1030:0x17a9  */
    /* JADX WARN: Removed duplicated region for block: B:254:0x053a  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x06f6  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x077e  */
    /* JADX WARN: Removed duplicated region for block: B:496:0x0994  */
    /* JADX WARN: Removed duplicated region for block: B:501:0x09e7  */
    /* JADX WARN: Removed duplicated region for block: B:504:0x09f1  */
    /* JADX WARN: Removed duplicated region for block: B:514:0x0a8c  */
    /* JADX WARN: Removed duplicated region for block: B:786:0x10d5  */
    /* JADX WARN: Removed duplicated region for block: B:789:0x10de  */
    /* JADX WARN: Removed duplicated region for block: B:807:0x111c  */
    /* JADX WARN: Removed duplicated region for block: B:808:0x111f  */
    /* JADX WARN: Removed duplicated region for block: B:811:0x113b  */
    /* JADX WARN: Removed duplicated region for block: B:812:0x113e  */
    /* JADX WARN: Removed duplicated region for block: B:815:0x1162  */
    /* JADX WARN: Removed duplicated region for block: B:816:0x116a  */
    /* JADX WARN: Removed duplicated region for block: B:819:0x119e  */
    /* JADX WARN: Removed duplicated region for block: B:828:0x11e8  */
    /* JADX WARN: Removed duplicated region for block: B:831:0x11f1  */
    /* JADX WARN: Removed duplicated region for block: B:832:0x11fd  */
    /* JADX WARN: Removed duplicated region for block: B:835:0x120c  */
    /* JADX WARN: Removed duplicated region for block: B:840:0x125f  */
    /* JADX WARN: Removed duplicated region for block: B:842:0x1267  */
    /* JADX WARN: Removed duplicated region for block: B:845:0x1270  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawContent(final Canvas canvas, boolean z) {
        boolean z2;
        boolean z3;
        MessageObject messageObject;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        ChatMessageCellDelegate chatMessageCellDelegate;
        boolean z4;
        ViewGroup viewGroup;
        MessageObject messageObject2;
        Paint paint;
        int i;
        float f;
        float f2;
        boolean isPlayingMessage;
        float currentBackgroundRight;
        MessageObject messageObject3;
        float f3;
        int i2;
        Drawable drawable;
        float f4;
        float f5;
        MessageObject messageObject4;
        int i3;
        int i4;
        int i5;
        MessageObject messageObject5;
        Drawable drawable2;
        float dp;
        int dp2;
        int dp3;
        StaticLayout staticLayout;
        StaticLayout staticLayout2;
        int imageX;
        Path path;
        float f6;
        MessageObject messageObject6 = this.currentMessageObject;
        if (messageObject6 == null || !messageObject6.preview) {
            z2 = z;
            z3 = false;
        } else {
            z2 = z;
            z3 = true;
        }
        if (z2 != z3) {
            return;
        }
        boolean z5 = this.needNewVisiblePart && messageObject6.type == 0;
        boolean hasSpoilers = hasSpoilers();
        if (z5 || hasSpoilers) {
            getLocalVisibleRect(this.scrollRect);
            if (hasSpoilers) {
                Rect rect = this.scrollRect;
                updateSpoilersVisiblePart(rect.top, rect.bottom);
            }
            if (z5) {
                Rect rect2 = this.scrollRect;
                int i6 = rect2.top;
                setVisiblePart(i6, rect2.bottom - i6, this.parentHeight, this.parentViewTopOffset, this.viewTop, this.parentWidth, this.backgroundHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
                this.needNewVisiblePart = false;
            }
        }
        float f7 = this.buttonX;
        float f8 = this.buttonY;
        if (this.transitionParams.animateButton) {
            f7 = AndroidUtilities.lerp(this.transitionParams.animateFromButtonX, this.buttonX, this.transitionParams.animateChangeProgress);
            f8 = AndroidUtilities.lerp(this.transitionParams.animateFromButtonY, this.buttonY, this.transitionParams.animateChangeProgress);
            int i7 = (int) f7;
            int i8 = (int) f8;
            this.radialProgress.setProgressRect(i7, i8, AndroidUtilities.dp(44.0f) + i7, AndroidUtilities.dp(44.0f) + i8);
        }
        float f9 = f8;
        updateSeekBarWaveformWidth(canvas);
        this.forceNotDrawTime = this.currentMessagesGroup != null;
        this.photoImage.setPressed(((this.isHighlightedAnimated || this.isHighlighted) && this.currentPosition != null) ? 2 : 0);
        this.photoImage.setVisible((PhotoViewer.isShowingImage(this.currentMessageObject) || SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject) || StoryViewer.isShowingImage(this.currentMessageObject)) ? false : true, false);
        this.blurredPhotoImage.setVisible(this.fitPhotoImage || !(PhotoViewer.isShowingImage(this.currentMessageObject) || SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject) || StoryViewer.isShowingImage(this.currentMessageObject)), false);
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia == null ? !this.photoImage.getVisible() : !groupMedia.allVisible()) {
            this.mediaWasInvisible = true;
            this.timeWasInvisible = true;
            int i9 = this.animatingNoSound;
            if (i9 == 1) {
                this.animatingNoSoundProgress = 0.0f;
                this.animatingNoSound = 0;
            } else if (i9 == 2) {
                this.animatingNoSoundProgress = 1.0f;
                this.animatingNoSound = 0;
            }
        } else if (this.groupPhotoInvisible) {
            this.timeWasInvisible = true;
        } else {
            boolean z6 = this.mediaWasInvisible;
            if (z6 || this.timeWasInvisible) {
                if (z6) {
                    this.controlsAlpha = 0.0f;
                    this.mediaWasInvisible = false;
                }
                if (this.timeWasInvisible) {
                    this.timeAlpha = 0.0f;
                    this.timeWasInvisible = false;
                }
                this.lastControlsAlphaChangeTime = System.currentTimeMillis();
                this.totalChangeTime = 0L;
            }
        }
        RadialProgress2 radialProgress2 = this.radialProgress;
        int i10 = Theme.key_chat_mediaProgress;
        radialProgress2.setProgressColor(getThemedColor(i10));
        this.videoRadialProgress.setProgressColor(getThemedColor(i10));
        this.imageDrawn = false;
        this.radialProgress.setCircleCrossfadeColor(-1, 0.0f, 1.0f);
        GroupMedia groupMedia2 = this.groupMedia;
        if (groupMedia2 != null) {
            this.drawTime = groupMedia2.allVisible();
            this.groupMedia.draw(canvas);
        } else {
            MessageObject messageObject7 = this.currentMessageObject;
            int i11 = messageObject7.type;
            if (i11 == 0 || i11 == 24 || i11 == 19 || messageObject7.isGiveawayOrGiveawayResults()) {
                layoutTextXY(false);
                if (!this.enterTransitionInProgress && (messageObject = this.currentMessageObject) != null && !messageObject.preview && (!this.transitionParams.animateExpandedQuotes || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.canDrawOutboundsContent())) {
                    if (!this.drawForBlur && !(canvas instanceof SizeNotifierFrameLayout.SimplerCanvas) && this.animatedEmojiStack != null && (((arrayList = this.currentMessageObject.textLayoutBlocks) != null && !arrayList.isEmpty()) || (this.transitionParams.animateOutTextBlocks != null && !this.transitionParams.animateOutTextBlocks.isEmpty()))) {
                        this.animatedEmojiStack.clearPositions();
                    }
                    drawMessageText(canvas);
                }
                if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                    drawLinkPreview(canvas, 1.0f);
                    getIconForCurrentState();
                }
                this.drawTime = true;
            } else if (this.drawPhotoImage) {
                float f10 = this.roundVideoPlayPipFloat.get();
                if (f10 > 0.0f) {
                    if (this.drillHolePaint == null) {
                        this.drillHolePaint = new Paint(1);
                    }
                    this.drillHolePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLoader : Theme.key_chat_inLoader));
                    this.drillHolePaint.setAlpha((int) (paint.getAlpha() * getVideoTranscriptionProgress()));
                    canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.drillHolePaint);
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated() && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.isVoiceTranscriptionOpen() || f10 >= 1.0f)) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    if (this.currentMessageObject.type == 5 && Theme.chat_roundVideoShadow != null) {
                        float imageX2 = this.photoImage.getImageX() - AndroidUtilities.dp(3.0f);
                        float imageY = this.photoImage.getImageY() - AndroidUtilities.dp(2.0f);
                        Theme.chat_roundVideoShadow.setAlpha((int) ((1.0f - getVideoTranscriptionProgress()) * 255.0f));
                        Theme.chat_roundVideoShadow.setBounds((int) imageX2, (int) imageY, (int) (imageX2 + this.photoImage.getImageWidth() + AndroidUtilities.dp(6.0f)), (int) (imageY + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f)));
                        Theme.chat_roundVideoShadow.draw(canvas);
                        Theme.chat_roundVideoShadow.setAlpha(NotificationCenter.voipServiceCreated);
                        if (!this.photoImage.hasBitmapImage() || this.photoImage.getCurrentAlpha() != 1.0f) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubble : Theme.key_chat_inBubble));
                            canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, Theme.chat_docBackPaint);
                        }
                    }
                    CheckBoxBase checkBoxBase = this.mediaCheckBox;
                    boolean z7 = checkBoxBase != null && (this.checkBoxVisible || checkBoxBase.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z7;
                    if (z7 && ((this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && !textIsSelectionMode())) {
                        if (!this.currentMessagesGroup.isDocuments) {
                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubbleSelected : Theme.key_chat_inBubbleSelected));
                            this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                            int[] roundRadius = this.photoImage.getRoundRadius();
                            this.rectPath.reset();
                            for (int i12 = 0; i12 < roundRadius.length; i12++) {
                                float[] fArr = radii;
                                int i13 = i12 * 2;
                                float f11 = roundRadius[i12];
                                fArr[i13 + 1] = f11;
                                fArr[i13] = f11;
                            }
                            this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                            this.rectPath.close();
                            canvas.drawPath(this.rectPath, Theme.chat_replyLinePaint);
                        }
                        this.photoImage.setSideClip(AndroidUtilities.dp(14.0f) * this.mediaCheckBox.getProgress());
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                        } else {
                            CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
                            checkBoxBase2.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase2.getProgress());
                        }
                    } else {
                        this.photoImage.setSideClip(0.0f);
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f10 > 0.0f) {
                        canvas.save();
                        Path path2 = this.drillHolePath;
                        if (path2 == null) {
                            this.drillHolePath = new Path();
                        } else {
                            path2.rewind();
                        }
                        this.drillHolePath.addCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), (this.photoImage.getImageWidth() / 2.0f) * (1.0f - f10), Path.Direction.CW);
                        canvas.clipPath(this.drillHolePath);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                    boolean z8 = (chatMessageCellDelegate2 == null || chatMessageCellDelegate2.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) ? false : true;
                    if (!z8 || this.fitPhotoImage) {
                        float y = getY() + this.photoImage.getImageY();
                        float imageHeight = this.photoImage.getImageHeight() + y;
                        this.photoImageOutOfBounds = false;
                        if (!SizeNotifierFrameLayout.drawingBlur) {
                            float f12 = this.parentBoundsTop;
                            if ((f12 != 0.0f || this.parentBoundsBottom != 0) && (imageHeight < f12 || y > this.parentBoundsBottom)) {
                                this.photoImageOutOfBounds = true;
                            }
                        }
                        if (!this.photoImageOutOfBounds || this.drawForBlur) {
                            this.photoImage.setSkipUpdateFrame(this.drawForBlur || this.skipFrameUpdate);
                            if (this.flipImage) {
                                canvas.save();
                                canvas.scale(-1.0f, 1.0f, this.photoImage.getCenterX(), this.photoImage.getCenterY());
                                ImageReceiver imageReceiver = this.blurredPhotoImage;
                                if (imageReceiver != null && this.fitPhotoImage) {
                                    imageReceiver.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                                    this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
                                    this.blurredPhotoImage.draw(canvas);
                                }
                                if (!z8) {
                                    if (allowDrawPhotoImage()) {
                                        this.imageDrawn = drawPhotoImage(canvas);
                                    } else {
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        drawBlurredPhoto(canvas);
                                    }
                                }
                                canvas.restore();
                            } else {
                                ImageReceiver imageReceiver2 = this.blurredPhotoImage;
                                if (imageReceiver2 != null && this.fitPhotoImage) {
                                    imageReceiver2.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                                    this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
                                    this.blurredPhotoImage.draw(canvas);
                                }
                                if (!z8) {
                                    if (allowDrawPhotoImage()) {
                                        ButtonBounce buttonBounce = this.contactBounce;
                                        if (buttonBounce != null) {
                                            float scale = buttonBounce.getScale(0.0125f);
                                            if (scale != 1.0f) {
                                                canvas.save();
                                                canvas.scale(scale, scale, this.contactRect.centerX(), this.contactRect.centerY());
                                                z4 = true;
                                                this.imageDrawn = drawPhotoImage(canvas);
                                                if (z4) {
                                                    canvas.restore();
                                                }
                                            }
                                        }
                                        z4 = false;
                                        this.imageDrawn = drawPhotoImage(canvas);
                                        if (z4) {
                                        }
                                    } else {
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        drawBlurredPhoto(canvas);
                                    }
                                }
                            }
                            this.photoImage.setSkipUpdateFrame(this.skipFrameUpdate);
                        }
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f10 > 0.0f) {
                        canvas.restore();
                    }
                    boolean z9 = this.drawTime;
                    boolean visible = this.photoImage.getVisible();
                    boolean z10 = visible || (this.currentMessageObject.shouldDrawReactionsInLayout() && this.currentMessageObject.hasReactions());
                    this.drawTime = z10;
                    if (this.currentPosition != null && z9 != z10 && (viewGroup = (ViewGroup) getParent()) != null) {
                        if (!this.currentPosition.last) {
                            int childCount = viewGroup.getChildCount();
                            for (int i14 = 0; i14 < childCount; i14++) {
                                View childAt = viewGroup.getChildAt(i14);
                                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                                    if (chatMessageCell.getCurrentMessagesGroup() == this.currentMessagesGroup) {
                                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                        if (currentPosition.last && currentPosition.maxY == this.currentPosition.maxY && (chatMessageCell.timeX - AndroidUtilities.dp(4.0f)) + chatMessageCell.getLeft() < getRight()) {
                                            chatMessageCell.groupPhotoInvisible = !visible;
                                            chatMessageCell.invalidate();
                                            viewGroup.invalidate();
                                        }
                                    }
                                }
                            }
                        } else {
                            viewGroup.invalidate();
                        }
                    }
                }
            } else {
                int i15 = this.documentAttachType;
                if (i15 == 5 || i15 == 1) {
                    CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
                    boolean z11 = checkBoxBase3 != null && (this.checkBoxVisible || checkBoxBase3.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z11;
                    if (z11) {
                        this.radialProgress.setCircleCrossfadeColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText, this.checkBoxAnimationProgress, 1.0f - this.mediaCheckBox.getProgress());
                    }
                    if (this.drawMediaCheckBox && !textIsSelectionMode() && (this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress)) {
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                            if (this.radialProgress.getMiniIcon() == 4) {
                                this.radialProgress.setMiniIconScale(this.checkBoxAnimationProgress);
                            }
                        } else {
                            CheckBoxBase checkBoxBase4 = this.mediaCheckBox;
                            checkBoxBase4.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase4.getProgress());
                        }
                    } else {
                        CheckBoxBase checkBoxBase5 = this.mediaCheckBox;
                        if (checkBoxBase5 != null) {
                            checkBoxBase5.setBackgroundAlpha(1.0f);
                        }
                    }
                }
            }
            i = this.documentAttachType;
            if (i != 2) {
                if (this.drawPhotoImage) {
                    MessageObject messageObject8 = this.currentMessageObject;
                    if (!messageObject8.isRepostPreview && !messageObject8.isSponsored() && this.photoImage.getVisible() && !this.hasGamePreview && !this.currentMessageObject.needDrawBluredPreview()) {
                        MessageObject messageObject9 = this.currentMessageObject;
                        if (!messageObject9.preview && !this.isSmallImage && !messageObject9.isSponsored()) {
                            int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                            Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                            Drawable drawable3 = Theme.chat_msgMediaMenuDrawable;
                            int imageX3 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                            this.otherX = imageX3;
                            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                            this.otherY = imageY2;
                            BaseCell.setDrawableBounds(drawable3, imageX3, imageY2);
                            Theme.chat_msgMediaMenuDrawable.draw(canvas);
                            Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                        }
                    }
                }
                f = 1.0f;
            } else if (i == 5) {
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_outAudioTitleText));
                    Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioPerformerSelectedText : Theme.key_chat_outAudioPerformerText));
                    Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioDurationSelectedText : Theme.key_chat_outAudioDurationText));
                    this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress));
                } else {
                    ReplyMessageLine replyMessageLine = this.linkLine;
                    if (replyMessageLine != null && this.hasLinkPreview) {
                        Theme.chat_audioTitlePaint.setColor(replyMessageLine.getColor());
                        Theme.chat_audioPerformerPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioPerformerSelectedText : Theme.key_chat_inAudioPerformerText), this.linkLine.getColor()));
                        Theme.chat_audioTimePaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText), this.linkLine.getColor()));
                        this.radialProgress.setProgressColor(Theme.adaptHue(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress), this.linkLine.getColor()));
                        SeekBar seekBar = this.seekBar;
                        int adaptHue = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                        int adaptHue2 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                        int i16 = Theme.key_chat_inAudioSeekbarFill;
                        seekBar.setColors(adaptHue, adaptHue2, Theme.adaptHue(getThemedColor(i16), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i16), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                    } else {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_inAudioTitleText));
                        Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioPerformerSelectedText : Theme.key_chat_inAudioPerformerText));
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText));
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
                    }
                }
                this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                this.radialProgress.iconScale = 1.0f;
                if (this.drawPhotoImage && (messageObject4 = this.currentMessageObject) != null && messageObject4.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                        float f13 = this.mediaSpoilerRevealProgress;
                        if (f13 != 0.0f) {
                        }
                    }
                    this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                }
                this.radialProgress.draw(canvas);
                canvas.save();
                canvas.translate(this.timeAudioX + this.songX, AndroidUtilities.dp(13.0f) + this.namesOffset + getMediaOffsetY());
                this.songLayout.draw(canvas);
                canvas.restore();
                boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                if (isPlayingMessage2) {
                    float f14 = this.toSeekBarProgress;
                    if (f14 != 1.0f) {
                        float f15 = f14 + 0.16f;
                        this.toSeekBarProgress = f15;
                        if (f15 > 1.0f) {
                            this.toSeekBarProgress = 1.0f;
                        }
                        invalidate();
                        f3 = this.toSeekBarProgress;
                        if (f3 <= 0.0f) {
                            if (f3 != 1.0f) {
                                int i17 = this.seekBarX;
                                i2 = NotificationCenter.voipServiceCreated;
                                f = 1.0f;
                                canvas.saveLayerAlpha(i17, this.seekBarY, i17 + this.seekBar.getWidth() + AndroidUtilities.dp(24.0f), this.seekBarY + AndroidUtilities.dp(24.0f), (int) (this.toSeekBarProgress * 255.0f), 31);
                            } else {
                                i2 = NotificationCenter.voipServiceCreated;
                                f = 1.0f;
                                canvas.save();
                            }
                            canvas.translate(this.seekBarX, this.seekBarY);
                            this.seekBar.draw(canvas);
                            canvas.restore();
                        } else {
                            i2 = NotificationCenter.voipServiceCreated;
                            f = 1.0f;
                        }
                        if (this.toSeekBarProgress < f) {
                            float f16 = this.timeAudioX + this.performerX;
                            float dp4 = AndroidUtilities.dp(35.0f) + this.namesOffset + getMediaOffsetY();
                            if (this.toSeekBarProgress != 0.0f) {
                                f4 = dp4;
                                f5 = f16;
                                canvas.saveLayerAlpha(f16, dp4, f16 + this.performerLayout.getWidth(), dp4 + this.performerLayout.getHeight(), (int) ((f - this.toSeekBarProgress) * 255.0f), 31);
                            } else {
                                f4 = dp4;
                                f5 = f16;
                                canvas.save();
                            }
                            float f17 = this.toSeekBarProgress;
                            if (f17 != 0.0f) {
                                float f18 = ((f - f17) * 0.3f) + 0.7f;
                                canvas.scale(f18, f18, f5, f4 + (this.performerLayout.getHeight() / 2.0f));
                            }
                            canvas.translate(f5, f4);
                            this.performerLayout.draw(canvas);
                            canvas.restore();
                        }
                        canvas.save();
                        canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + getMediaOffsetY());
                        this.durationLayout.draw(canvas);
                        canvas.restore();
                        if (shouldDrawMenuDrawable()) {
                            if (this.currentMessageObject.isOutOwner()) {
                                drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                            } else {
                                drawable = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                            }
                            int dp5 = ((((int) f7) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f)) - AndroidUtilities.dp(this.hasLinkPreview ? 18.0f : 0.0f);
                            this.otherX = dp5;
                            int dp6 = ((int) f9) - AndroidUtilities.dp(2.0f);
                            this.otherY = dp6;
                            BaseCell.setDrawableBounds(drawable, dp5, dp6);
                            TransitionParams transitionParams = this.transitionParams;
                            if (transitionParams.animateChangeProgress != f && transitionParams.animateShouldDrawMenuDrawable) {
                                drawable.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                            }
                            drawable.draw(canvas);
                            TransitionParams transitionParams2 = this.transitionParams;
                            if (transitionParams2.animateChangeProgress != f && transitionParams2.animateShouldDrawMenuDrawable) {
                                drawable.setAlpha(i2);
                            }
                        }
                    }
                }
                if (!isPlayingMessage2) {
                    float f19 = this.toSeekBarProgress;
                    if (f19 != 0.0f) {
                        float f20 = f19 - 0.16f;
                        this.toSeekBarProgress = f20;
                        if (f20 < 0.0f) {
                            this.toSeekBarProgress = 0.0f;
                        }
                        invalidate();
                    }
                }
                f3 = this.toSeekBarProgress;
                if (f3 <= 0.0f) {
                }
                if (this.toSeekBarProgress < f) {
                }
                canvas.save();
                canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + getMediaOffsetY());
                this.durationLayout.draw(canvas);
                canvas.restore();
                if (shouldDrawMenuDrawable()) {
                }
            } else {
                f = 1.0f;
                if (i == 3 || i == 7) {
                    if (this.currentMessageObject.isOutOwner()) {
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioDurationSelectedText : Theme.key_chat_outAudioDurationText));
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress));
                    } else if (this.hasLinkPreview && this.linkLine != null) {
                        Theme.chat_audioTimePaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText), this.linkLine.getColor()));
                        this.radialProgress.setProgressColor(Theme.adaptHue(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress), this.linkLine.getColor()));
                        SeekBar seekBar2 = this.seekBar;
                        int adaptHue3 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                        int adaptHue4 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                        int i18 = Theme.key_chat_inAudioSeekbarFill;
                        seekBar2.setColors(adaptHue3, adaptHue4, Theme.adaptHue(getThemedColor(i18), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i18), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                    } else {
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText));
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
                    }
                    AudioVisualizerDrawable audioVisualizerDrawable = this.overridenAudioVisualizer;
                    if (audioVisualizerDrawable == null) {
                        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                            audioVisualizerDrawable = Theme.getCurrentAudiVisualizerDrawable();
                        } else {
                            audioVisualizerDrawable = Theme.getAnimatedOutAudioVisualizerDrawable(this.currentMessageObject);
                        }
                    }
                    if (audioVisualizerDrawable != null && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                        audioVisualizerDrawable.setParentView(this);
                        if (this.linkLine != null) {
                            audioVisualizerDrawable.draw(canvas, f7 + AndroidUtilities.dp(22.0f), f9 + AndroidUtilities.dp(22.0f), this.linkLine.getColor(), this.documentAttachType == 7 ? getVideoTranscriptionProgress() : 1.0f, this.resourcesProvider);
                        } else {
                            audioVisualizerDrawable.draw(canvas, f7 + AndroidUtilities.dp(22.0f), f9 + AndroidUtilities.dp(22.0f), this.currentMessageObject.isOutOwner(), this.documentAttachType == 7 ? getVideoTranscriptionProgress() : 1.0f, this.resourcesProvider);
                        }
                    }
                    if (!this.enterTransitionInProgress && this.documentAttachType == 3) {
                        this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                        this.radialProgress.iconScale = 1.0f;
                        if (this.drawPhotoImage && (messageObject3 = this.currentMessageObject) != null && messageObject3.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                float f21 = this.mediaSpoilerRevealProgress;
                                if (f21 != 0.0f) {
                                }
                            }
                            this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                        }
                        SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
                        drawVoiceOnce(canvas, seekBarWaveform == null ? 1.0f : 1.0f - seekBarWaveform.explosionRate, new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$drawContent$10(canvas);
                            }
                        });
                    }
                    int i19 = this.seekBarX;
                    int i20 = this.timeAudioX;
                    if (this.transitionParams.animateButton) {
                        int i21 = this.buttonX;
                        float f22 = this.transitionParams.animateFromButtonX;
                        float f23 = this.transitionParams.animateChangeProgress;
                        int i22 = i21 - ((int) ((f22 * (1.0f - f23)) + (this.buttonX * f23)));
                        i19 -= i22;
                        i20 -= i22;
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isOutOwner()) {
                        i19 = getCurrentBackgroundLeft() + AndroidUtilities.dp(57.0f);
                        i20 = getCurrentBackgroundLeft() + AndroidUtilities.dp(67.0f);
                    }
                    int videoTranscriptionProgress = this.isRoundVideo ? (int) (0 + ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize)) : 0;
                    canvas.save();
                    if (this.documentAttachType != 7 || !this.hasLinkPreview) {
                        if (this.useSeekBarWaveform) {
                            canvas.translate((AndroidUtilities.dp(13.0f) + i19) - this.seekBarWaveformTranslateX, this.seekBarY + videoTranscriptionProgress);
                            this.seekBarWaveform.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                            this.seekBarWaveform.draw(canvas, this);
                        } else {
                            canvas.translate(i19, this.seekBarY + videoTranscriptionProgress);
                            this.seekBar.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                            this.seekBar.draw(canvas);
                        }
                    }
                    canvas.restore();
                    float useTranscribeButtonProgress = getUseTranscribeButtonProgress();
                    TransitionParams transitionParams3 = this.transitionParams;
                    if (transitionParams3.animatePlayingRound) {
                        if (this.isPlayingRound) {
                            f2 = transitionParams3.animateChangeProgress;
                        } else {
                            f2 = 1.0f - transitionParams3.animateChangeProgress;
                        }
                    } else {
                        f2 = this.isPlayingRound ? 1.0f : 0.0f;
                    }
                    if (!this.wasTranscriptionOpen) {
                        useTranscribeButtonProgress = AndroidUtilities.lerp((1.0f - f2) * useTranscribeButtonProgress, useTranscribeButtonProgress, getVideoTranscriptionProgress());
                    }
                    if (useTranscribeButtonProgress > 0.0f && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                        canvas.save();
                        int currentBackgroundRight2 = ((getCurrentBackgroundRight() - getCurrentBackgroundLeft()) + AndroidUtilities.dp(this.pinnedBottom ? 6.0f : 0.0f)) - AndroidUtilities.dp((this.hasLinkPreview ? 10 : 0) + 128);
                        if (this.transcribeButton == null) {
                            TranscribeButton transcribeButton = new TranscribeButton(this, this.seekBarWaveform) { // from class: org.telegram.ui.Cells.ChatMessageCell.7
                                @Override // org.telegram.ui.Components.TranscribeButton
                                public void drawGradientBackground(Canvas canvas2, Rect rect3, float f24) {
                                    Paint themedPaint;
                                    if (ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground()) {
                                        themedPaint = ChatMessageCell.this.getThemedPaint("paintChatActionBackground");
                                    } else {
                                        themedPaint = ChatMessageCell.this.getThemedPaint("paintChatTimeBackground");
                                    }
                                    int alpha2 = themedPaint.getAlpha();
                                    themedPaint.setAlpha((int) (alpha2 * f24));
                                    ChatMessageCell.this.applyServiceShaderMatrix();
                                    canvas2.drawRect(rect3, themedPaint);
                                    if (themedPaint == ChatMessageCell.this.getThemedPaint("paintChatActionBackground") && ChatMessageCell.this.hasGradientService()) {
                                        int alpha3 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha3 * f24));
                                        canvas2.drawRect(rect3, Theme.chat_actionBackgroundGradientDarkenPaint);
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha3);
                                    }
                                    themedPaint.setAlpha(alpha2);
                                }

                                @Override // org.telegram.ui.Components.TranscribeButton
                                protected void onOpen() {
                                    ChatMessageCell.this.wasTranscriptionOpen = true;
                                }
                            };
                            this.transcribeButton = transcribeButton;
                            MessageObject messageObject10 = this.currentMessageObject;
                            TLRPC$Message tLRPC$Message = messageObject10.messageOwner;
                            transcribeButton.setOpen(tLRPC$Message != null && tLRPC$Message.voiceTranscriptionOpen && tLRPC$Message.voiceTranscriptionFinal && TranscribeButton.isVideoTranscriptionOpen(messageObject10), false);
                            this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), false);
                            this.transcribeButton.setLock(TranscribeButton.showTranscribeLock(this.currentMessageObject), false);
                        }
                        if (this.drawSideButton != 0) {
                            this.transcribeX = AndroidUtilities.lerp(i19 + AndroidUtilities.dp(21.0f) + currentBackgroundRight2, this.sideStartX, 1.0f - getVideoTranscriptionProgress());
                            this.transcribeY = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), this.sideStartY - AndroidUtilities.dp(40.0f), 1.0f - getVideoTranscriptionProgress());
                        } else {
                            float dp7 = i19 + AndroidUtilities.dp(21.0f) + currentBackgroundRight2;
                            MessageObject messageObject11 = this.currentMessageObject;
                            if (messageObject11 != null && messageObject11.isOutOwner()) {
                                currentBackgroundRight = (getCurrentBackgroundLeft() - AndroidUtilities.dp(40.0f)) + (AndroidUtilities.dp(28.0f) * f2);
                            } else {
                                currentBackgroundRight = (getCurrentBackgroundRight() + AndroidUtilities.dp(8.0f)) - (AndroidUtilities.dp(40.0f) * f2);
                            }
                            this.transcribeX = AndroidUtilities.lerp(dp7, currentBackgroundRight, 1.0f - getVideoTranscriptionProgress());
                            float dp8 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble.isEmpty) {
                                dp8 -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                            }
                            this.transcribeY = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), ((AndroidUtilities.lerp(dp8, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + getMediaOffsetY()) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress()) + AndroidUtilities.dp(1.7f)) - AndroidUtilities.dp(12.0f)) - (this.currentMessageObject.isOutOwner() ? 0.0f : AndroidUtilities.dp(28.0f) * f2), 1.0f - getVideoTranscriptionProgress());
                        }
                        this.transcribeButton.setBounds((int) this.transcribeX, (int) this.transcribeY, AndroidUtilities.lerp(AndroidUtilities.dp(30.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(24.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(16.0f), 1.0f - getVideoTranscriptionProgress()));
                        this.transcribeButton.setColor(ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outReactionButtonBackground : Theme.key_chat_inReactionButtonBackground), this.documentAttachType == 3 ? 1.0f : getVideoTranscriptionProgress()), getThemedColor(Theme.key_windowBackgroundWhiteGrayText), this.currentMessageObject.isOut(), this.documentAttachType == 3 ? 0.0f : 1.0f - getVideoTranscriptionProgress());
                        this.transcribeButton.draw(canvas, useTranscribeButtonProgress);
                        canvas.restore();
                    }
                    if (this.documentAttachType == 3) {
                        canvas.save();
                        canvas.translate(i20, AndroidUtilities.dp(44.0f) + this.namesOffset + getMediaOffsetY() + videoTranscriptionProgress);
                        this.durationLayout.draw(canvas);
                        canvas.restore();
                        MessageObject messageObject12 = this.currentMessageObject;
                        if (messageObject12.type != 0 && messageObject12.isContentUnread()) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarFill : Theme.key_chat_inVoiceSeekbarFill));
                            canvas.drawCircle(i20 + this.timeWidthAudio + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(51.0f) + this.namesOffset + getMediaOffsetY(), AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                        }
                    }
                    if (this.documentAttachType == 7 && this.durationLayout != null && ((isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) || this.roundProgressAlpha != 0.0f)) {
                        if (isPlayingMessage) {
                            this.roundProgressAlpha = 1.0f;
                        } else {
                            float f24 = this.roundProgressAlpha - 0.10666667f;
                            this.roundProgressAlpha = f24;
                            if (f24 < 0.0f) {
                                this.roundProgressAlpha = 0.0f;
                            } else {
                                invalidate();
                            }
                        }
                        drawRoundProgress(canvas);
                    }
                }
            }
            if (this.captionLayout == null || this.hasFactCheck || this.transitionParams.animateFactCheck) {
                updateCaptionLayout();
            }
            updateReactionLayoutPosition();
            if (!shouldDrawCaptionLayout() && !this.currentMessageObject.preview) {
                drawCaptionLayout(canvas, false, f);
                drawReactionsLayout(canvas, f, null);
            }
            if (this.currentMessagesGroup == null) {
                drawFactCheck(canvas, f);
            }
            if (this.hasOldCaptionPreview) {
                i3 = 1;
                i4 = -1;
                i5 = 4;
            } else {
                MessageObject messageObject13 = this.currentMessageObject;
                int i23 = messageObject13.type;
                if (i23 != 1 && i23 != 20) {
                    if (this.documentAttachType != 4 && i23 != 8) {
                        imageX = this.backgroundDrawableLeft + AndroidUtilities.dp(messageObject13.isOutOwner() ? 11.0f : 17.0f);
                        float dp9 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(11.0f);
                        Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewLine : Theme.key_chat_inPreviewLine));
                        RectF rectF = AndroidUtilities.rectTmp;
                        float f25 = imageX;
                        rectF.set(f25, dp9 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(6.0f) + imageX, this.linkPreviewHeight + dp9);
                        path = this.replyRoundRectPath;
                        if (path != null) {
                            this.replyRoundRectPath = new Path();
                        } else {
                            path.rewind();
                        }
                        canvas.save();
                        float f26 = rectF.left;
                        canvas.clipRect(f26, rectF.top, AndroidUtilities.dp(3.0f) + f26, rectF.bottom);
                        this.replyRoundRectPath.addRoundRect(rectF, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                        canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                        canvas.restore();
                        if (this.siteNameLayout == null) {
                            Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outSiteNameText : Theme.key_chat_inSiteNameText));
                            canvas.save();
                            canvas.translate(f25 + (-this.siteNameLeft) + (this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f)), dp9 - AndroidUtilities.dp(3.0f));
                            SpoilerEffect.layoutDrawMaybe(this.siteNameLayout, canvas);
                            canvas.restore();
                            StaticLayout staticLayout3 = this.siteNameLayout;
                            f6 = staticLayout3.getLineBottom(staticLayout3.getLineCount() - 1) + dp9;
                        } else {
                            f6 = dp9;
                        }
                        if (!this.currentMessageObject.isOutOwner()) {
                            Theme.chat_replyTextPaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                        } else {
                            Theme.chat_replyTextPaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                        }
                        if (this.descriptionLayout == null) {
                            if (f6 != dp9) {
                                f6 += AndroidUtilities.dp(2.0f);
                            }
                            this.descriptionY = ((int) f6) - AndroidUtilities.dp(3.0f);
                            canvas.save();
                            canvas.translate(imageX + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
                            SpoilerEffect.layoutDrawMaybe(this.descriptionLayout, canvas);
                            StaticLayout staticLayout4 = this.descriptionLayout;
                            i4 = -1;
                            i5 = 4;
                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout4, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, staticLayout4.getPaint().getColor()));
                            canvas.restore();
                        } else {
                            i4 = -1;
                            i5 = 4;
                        }
                        i3 = 1;
                        this.drawTime = true;
                    }
                }
                imageX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(5.0f));
                float dp92 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(11.0f);
                Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewLine : Theme.key_chat_inPreviewLine));
                RectF rectF2 = AndroidUtilities.rectTmp;
                float f252 = imageX;
                rectF2.set(f252, dp92 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(6.0f) + imageX, this.linkPreviewHeight + dp92);
                path = this.replyRoundRectPath;
                if (path != null) {
                }
                canvas.save();
                float f262 = rectF2.left;
                canvas.clipRect(f262, rectF2.top, AndroidUtilities.dp(3.0f) + f262, rectF2.bottom);
                this.replyRoundRectPath.addRoundRect(rectF2, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                canvas.restore();
                if (this.siteNameLayout == null) {
                }
                if (!this.currentMessageObject.isOutOwner()) {
                }
                if (this.descriptionLayout == null) {
                }
                i3 = 1;
                this.drawTime = true;
            }
            if (this.documentAttachType == i3) {
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_docNamePaint.setColor(getThemedColor(Theme.key_chat_outFileNameText));
                    Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileInfoSelectedText : Theme.key_chat_outFileInfoText));
                    Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileBackgroundSelected : Theme.key_chat_outFileBackground));
                    drawable2 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                } else if (this.linkLine != null && this.hasLinkPreview) {
                    Theme.chat_docNamePaint.setColor(Theme.adaptHue(getThemedColor(Theme.key_chat_inFileNameText), this.linkLine.getColor()));
                    Theme.chat_infoPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileInfoSelectedText : Theme.key_chat_inFileInfoText), this.linkLine.getColor()));
                    Theme.chat_docBackPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileBackgroundSelected : Theme.key_chat_inFileBackground), this.linkLine.getColor()));
                    drawable2 = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                } else {
                    Theme.chat_docNamePaint.setColor(getThemedColor(Theme.key_chat_inFileNameText));
                    Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileInfoSelectedText : Theme.key_chat_inFileInfoText));
                    Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileBackgroundSelected : Theme.key_chat_inFileBackground));
                    drawable2 = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                }
                if (this.drawPhotoImage) {
                    if (this.currentMessageObject.type == 0) {
                        int imageX4 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp((this.hasLinkPreview ? 12 : 0) + 56));
                        this.otherX = imageX4;
                        int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                        this.otherY = imageY3;
                        BaseCell.setDrawableBounds(drawable2, imageX4, imageY3);
                    } else {
                        int imageX5 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp((this.hasLinkPreview ? 12 : 0) + 40));
                        this.otherX = imageX5;
                        int imageY4 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                        this.otherY = imageY4;
                        BaseCell.setDrawableBounds(drawable2, imageX5, imageY4);
                    }
                    dp = (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(10.0f));
                    dp2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                    dp3 = (int) (this.photoImage.getImageY() + (this.docTitleLayout != null ? staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1) + AndroidUtilities.dp(13.0f) : AndroidUtilities.dp(8.0f)));
                    if (!this.imageDrawn) {
                        if (this.currentMessageObject.isOutOwner()) {
                            RadialProgress2 radialProgress22 = this.radialProgress;
                            int i24 = Theme.key_chat_outLoader;
                            int i25 = Theme.key_chat_outLoaderSelected;
                            int i26 = Theme.key_chat_outMediaIcon;
                            int i27 = Theme.key_chat_outMediaIconSelected;
                            radialProgress22.setColorKeys(i24, i25, i26, i27);
                            this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileProgressSelected : Theme.key_chat_outFileProgress));
                            this.videoRadialProgress.setColorKeys(i24, i25, i26, i27);
                            this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileProgressSelected : Theme.key_chat_outFileProgress));
                        } else {
                            ReplyMessageLine replyMessageLine2 = this.linkLine;
                            if (replyMessageLine2 != null && this.hasLinkPreview) {
                                this.radialProgress.setColors(replyMessageLine2.getColor(), this.linkLine.getColor(), Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                                this.radialProgress.setProgressColor(Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.01f)));
                                this.videoRadialProgress.setColors(this.linkLine.getColor(), this.linkLine.getColor(), Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                                this.videoRadialProgress.setProgressColor(Theme.blendOver(i4, Theme.multAlpha(this.linkLine.getColor(), 0.01f)));
                            } else {
                                RadialProgress2 radialProgress23 = this.radialProgress;
                                int i28 = Theme.key_chat_inLoader;
                                int i29 = Theme.key_chat_inLoaderSelected;
                                int i30 = Theme.key_chat_inMediaIcon;
                                int i31 = Theme.key_chat_inMediaIconSelected;
                                radialProgress23.setColorKeys(i28, i29, i30, i31);
                                this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileProgressSelected : Theme.key_chat_inFileProgress));
                                this.videoRadialProgress.setColorKeys(i28, i29, i30, i31);
                                this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileProgressSelected : Theme.key_chat_inFileProgress));
                            }
                        }
                        this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                        int[] roundRadius2 = this.photoImage.getRoundRadius();
                        this.rectPath.reset();
                        for (int i32 = 0; i32 < roundRadius2.length; i32++) {
                            float[] fArr2 = radii;
                            int i33 = i32 * 2;
                            float f27 = roundRadius2[i32];
                            fArr2[i33] = f27;
                            fArr2[i33 + 1] = f27;
                        }
                        this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                        this.rectPath.close();
                        canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                    } else {
                        RadialProgress2 radialProgress24 = this.radialProgress;
                        int i34 = Theme.key_chat_mediaLoaderPhoto;
                        int i35 = Theme.key_chat_mediaLoaderPhotoSelected;
                        int i36 = Theme.key_chat_mediaLoaderPhotoIcon;
                        int i37 = Theme.key_chat_mediaLoaderPhotoIconSelected;
                        radialProgress24.setColorKeys(i34, i35, i36, i37);
                        RadialProgress2 radialProgress25 = this.radialProgress;
                        int i38 = Theme.key_chat_mediaProgress;
                        radialProgress25.setProgressColor(getThemedColor(i38));
                        this.videoRadialProgress.setColorKeys(i34, i35, i36, i37);
                        this.videoRadialProgress.setProgressColor(getThemedColor(i38));
                        if (this.buttonState == i4 && this.radialProgress.getIcon() != i5) {
                            this.radialProgress.setIcon(i5, true, true);
                        }
                    }
                } else {
                    int dp10 = ((((int) f7) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f)) - AndroidUtilities.dp(this.hasLinkPreview ? 24.0f : 0.0f);
                    this.otherX = dp10;
                    int i39 = (int) f9;
                    int dp11 = i39 - AndroidUtilities.dp(2.0f);
                    this.otherY = dp11;
                    BaseCell.setDrawableBounds(drawable2, dp10, dp11);
                    dp = f7 + AndroidUtilities.dp(53.0f);
                    dp2 = AndroidUtilities.dp(4.0f) + i39;
                    dp3 = i39 + AndroidUtilities.dp(27.0f);
                    StaticLayout staticLayout5 = this.docTitleLayout;
                    if (staticLayout5 != null && staticLayout5.getLineCount() > 1) {
                        dp3 += ((this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f)) + AndroidUtilities.dp(2.0f);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress));
                        this.videoRadialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.videoButtonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress));
                    } else {
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
                        this.videoRadialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.videoButtonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
                    }
                }
                int i40 = dp2;
                float f28 = dp;
                if (shouldDrawMenuDrawable()) {
                    TransitionParams transitionParams4 = this.transitionParams;
                    if (transitionParams4.animateChangeProgress != 1.0f && transitionParams4.animateShouldDrawMenuDrawable) {
                        drawable2.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                    }
                    drawable2.draw(canvas);
                    TransitionParams transitionParams5 = this.transitionParams;
                    if (transitionParams5.animateChangeProgress != 1.0f && transitionParams5.animateShouldDrawMenuDrawable) {
                        drawable2.setAlpha(NotificationCenter.voipServiceCreated);
                    }
                }
                try {
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.docTitleOffsetX + f28, i40);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                try {
                    if (this.infoLayout != null) {
                        canvas.save();
                        canvas.translate(f28, dp3);
                        if (this.buttonState == 1 && (staticLayout = this.loadingProgressLayout) != null) {
                            staticLayout.draw(canvas);
                        } else {
                            this.infoLayout.draw(canvas);
                        }
                        canvas.restore();
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
            messageObject5 = this.currentMessageObject;
            if (messageObject5.type == i5 && !(MessageObject.getMedia(messageObject5.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive) && this.currentMapProvider == 2 && this.photoImage.hasNotThumb()) {
                Drawable redLocationIcon = this.sharedResources.getRedLocationIcon();
                int intrinsicWidth = (int) (redLocationIcon.getIntrinsicWidth() * 0.8f);
                int intrinsicHeight = (int) (redLocationIcon.getIntrinsicHeight() * 0.8f);
                int imageX6 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth) / 2.0f));
                int imageY5 = (int) ((this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(this.photoImage.getCurrentAlpha()))));
                redLocationIcon.setAlpha((int) (Math.min(1.0f, this.photoImage.getCurrentAlpha() * 5.0f) * 255.0f));
                redLocationIcon.setBounds(imageX6, imageY5, intrinsicWidth + imageX6, intrinsicHeight + imageY5);
                redLocationIcon.draw(canvas);
                if (this.photoImage.getCurrentAlpha() < 1.0f) {
                    invalidate();
                }
            }
            this.transitionParams.recordDrawingState();
        }
        i = this.documentAttachType;
        if (i != 2) {
        }
        if (this.captionLayout == null) {
        }
        updateCaptionLayout();
        updateReactionLayoutPosition();
        if (!shouldDrawCaptionLayout()) {
        }
        if (this.currentMessagesGroup == null) {
        }
        if (this.hasOldCaptionPreview) {
        }
        if (this.documentAttachType == i3) {
        }
        messageObject5 = this.currentMessageObject;
        if (messageObject5.type == i5) {
            Drawable redLocationIcon2 = this.sharedResources.getRedLocationIcon();
            int intrinsicWidth2 = (int) (redLocationIcon2.getIntrinsicWidth() * 0.8f);
            int intrinsicHeight2 = (int) (redLocationIcon2.getIntrinsicHeight() * 0.8f);
            int imageX62 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth2) / 2.0f));
            int imageY52 = (int) ((this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight2)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(this.photoImage.getCurrentAlpha()))));
            redLocationIcon2.setAlpha((int) (Math.min(1.0f, this.photoImage.getCurrentAlpha() * 5.0f) * 255.0f));
            redLocationIcon2.setBounds(imageX62, imageY52, intrinsicWidth2 + imageX62, intrinsicHeight2 + imageY52);
            redLocationIcon2.draw(canvas);
            if (this.photoImage.getCurrentAlpha() < 1.0f) {
            }
        }
        this.transitionParams.recordDrawingState();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$drawContent$10(Canvas canvas) {
        this.radialProgress.draw(canvas);
    }

    public void startRevealMedia() {
        startRevealMedia(this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f), this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f));
    }

    public void startRevealMedia(float f, float f2) {
        float sqrt = (float) Math.sqrt(Math.pow(this.photoImage.getImageWidth(), 2.0d) + Math.pow(this.photoImage.getImageHeight(), 2.0d));
        this.mediaSpoilerRevealMaxRadius = sqrt;
        startRevealMedia(f, f2, sqrt);
    }

    private void startRevealMedia(float f, float f2, float f3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress != 0.0f) {
            return;
        }
        if (messageObject.type == 3) {
            messageObject.forceUpdate = true;
            messageObject.revealingMediaSpoilers = true;
            setMessageContent(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            MessageObject messageObject2 = this.currentMessageObject;
            messageObject2.revealingMediaSpoilers = false;
            messageObject2.forceUpdate = false;
            if (this.currentMessagesGroup != null) {
                this.radialProgress.setProgress(0.0f, false);
            }
        }
        this.mediaSpoilerRevealX = f;
        this.mediaSpoilerRevealY = f2;
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(MathUtils.clamp(this.mediaSpoilerRevealMaxRadius * 0.3f, 250.0f, 550.0f));
        duration.setInterpolator(CubicBezierInterpolator.EASE_BOTH);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda8
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatMessageCell.this.lambda$startRevealMedia$11(valueAnimator);
            }
        });
        duration.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.8
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatMessageCell.this.currentMessageObject.isMediaSpoilersRevealed = true;
                ChatMessageCell.this.invalidate();
            }
        });
        duration.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startRevealMedia$11(ValueAnimator valueAnimator) {
        this.mediaSpoilerRevealProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
    }

    public void drawBlurredPhoto(Canvas canvas) {
        if (this.currentMessageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress == 1.0f) {
            return;
        }
        int[] roundRadius = this.photoImage.getRoundRadius();
        float[] fArr = this.mediaSpoilerRadii;
        float f = roundRadius[0];
        fArr[1] = f;
        fArr[0] = f;
        float f2 = roundRadius[1];
        fArr[3] = f2;
        fArr[2] = f2;
        float f3 = roundRadius[2];
        fArr[5] = f3;
        fArr[4] = f3;
        float f4 = roundRadius[3];
        fArr[7] = f4;
        fArr[6] = f4;
        this.mediaSpoilerPath.rewind();
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
        Path path = this.mediaSpoilerPath;
        float[] fArr2 = this.mediaSpoilerRadii;
        Path.Direction direction = Path.Direction.CW;
        path.addRoundRect(rectF, fArr2, direction);
        canvas.save();
        canvas.clipPath(this.mediaSpoilerPath);
        if (this.mediaSpoilerRevealProgress != 0.0f) {
            this.mediaSpoilerPath.rewind();
            this.mediaSpoilerPath.addCircle(this.mediaSpoilerRevealX, this.mediaSpoilerRevealY, this.mediaSpoilerRevealMaxRadius * this.mediaSpoilerRevealProgress, direction);
            canvas.clipPath(this.mediaSpoilerPath, Region.Op.DIFFERENCE);
        }
        if (this.currentMessageObject.needDrawBluredPreview()) {
            this.photoImage.draw(canvas);
        } else {
            this.blurredPhotoImage.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
            this.blurredPhotoImage.draw(canvas);
        }
        drawBlurredPhotoParticles(canvas);
        canvas.restore();
    }

    public void drawBlurredPhotoParticles(Canvas canvas) {
        if (this.mediaSpoilerEffect2 != null) {
            canvas.translate(this.photoImage.getImageX(), this.photoImage.getImageY());
            this.mediaSpoilerEffect2.draw(canvas, this, (int) this.photoImage.getImageWidth(), (int) this.photoImage.getImageHeight(), this.photoImage.getAlpha(), this.drawingToBitmap);
            invalidate();
            return;
        }
        this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.photoImage.getAlpha())));
        this.mediaSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
        this.mediaSpoilerEffect.draw(canvas);
        invalidate();
    }

    private float getUseTranscribeButtonProgress() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateUseTranscribeButton) {
            return this.useTranscribeButton ? 1.0f : 0.0f;
        } else if (this.useTranscribeButton) {
            return transitionParams.animateChangeProgress;
        } else {
            return 1.0f - transitionParams.animateChangeProgress;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:12:0x0020, code lost:
        if ((r1 & 1) != 0) goto L13;
     */
    /* JADX WARN: Removed duplicated region for block: B:104:0x01bb  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01d5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateReactionLayoutPosition() {
        int i;
        float dp;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        int i2;
        if (this.currentMessageObject.shouldDrawReactions()) {
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            int i3 = 0;
            if (!reactionsLayoutInBubble2.isEmpty) {
                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                if (groupedMessagePosition != null) {
                    int i4 = groupedMessagePosition.flags;
                    if ((i4 & 8) != 0) {
                    }
                }
                if (!reactionsLayoutInBubble2.isSmall) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (messageObject.type == 19 || messageObject.isAnimatedEmoji() || this.currentMessageObject.isAnyKindOfSticker()) {
                        if (this.currentMessageObject.isOutOwner()) {
                            this.reactionsLayoutInBubble.x = (getMeasuredWidth() - this.reactionsLayoutInBubble.width) - AndroidUtilities.dp(16.0f);
                        } else {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft();
                        }
                    } else {
                        float f = 11.0f;
                        if (this.currentMessageObject.isOutOwner()) {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                        } else if (this.isRoundVideo) {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f) + AndroidUtilities.dp(AndroidUtilities.lerp(0, !this.drawPinnedBottom ? 6 : 0, getVideoTranscriptionProgress()));
                            this.reactionsLayoutInBubble.x -= (int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f));
                        } else {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 17.0f);
                            if (this.mediaBackground) {
                                this.reactionsLayoutInBubble.x -= AndroidUtilities.dp(9.0f);
                            }
                        }
                    }
                    ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                    int backgroundDrawableBottom = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                    ReactionsLayoutInBubble reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                    reactionsLayoutInBubble3.y = backgroundDrawableBottom - reactionsLayoutInBubble4.height;
                    int i5 = reactionsLayoutInBubble4.y;
                    if (this.drawCommentButton) {
                        i2 = AndroidUtilities.dp((this.currentMessageObject.type == 29 && hasCaptionLayout()) ? 28.0f : 43.0f);
                    } else {
                        i2 = 0;
                    }
                    reactionsLayoutInBubble4.y = i5 - i2;
                    if (this.hasNewLineForTime && (!this.drawForwardedName || !this.hasLinkPreview || this.documentAttachType != 3)) {
                        this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(16.0f);
                    }
                    MessageObject messageObject2 = this.currentMessageObject;
                    int i6 = messageObject2.type;
                    if (i6 != 9 && this.captionLayout != null && ((i6 != 2 && (!messageObject2.isOut() || !this.drawForwardedName || this.drawPhotoImage)) || ((this.currentPosition != null && this.currentMessagesGroup != null) || this.currentMessageObject.type == 29))) {
                        this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(14.0f);
                    }
                    ReactionsLayoutInBubble reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                    reactionsLayoutInBubble5.y += reactionsLayoutInBubble5.positionOffsetY;
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble6.isSmall || reactionsLayoutInBubble6.isEmpty) {
                return;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.drawCommentButton) {
                    i3 = AndroidUtilities.dp(41.3f);
                }
            } else if (this.currentMessageObject.isSponsored()) {
                i = -AndroidUtilities.dp(48.0f);
                if (this.hasNewLineForTime) {
                    i -= AndroidUtilities.dp(16.0f);
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
                if (shouldDrawTimeOnMedia()) {
                    dp = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + i;
                } else {
                    dp = ((getPhotoBottom() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
                }
                reactionsLayoutInBubble7.y = (int) dp;
                this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
                this.reactionsLayoutInBubble.x = this.timeX;
            } else if (this.drawCommentButton) {
                i3 = AndroidUtilities.dp(43.0f);
            }
            i = -i3;
            ReactionsLayoutInBubble reactionsLayoutInBubble72 = this.reactionsLayoutInBubble;
            if (shouldDrawTimeOnMedia()) {
            }
            reactionsLayoutInBubble72.y = (int) dp;
            this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
            this.reactionsLayoutInBubble.x = this.timeX;
        }
    }

    public float getPhotoBottom() {
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            return groupMedia.y + groupMedia.height;
        }
        return this.photoImage.getImageY2();
    }

    public void drawVoiceOnce(Canvas canvas, float f, Runnable runnable) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.isVoiceOnce()) {
            float centerX = this.radialProgress.progressRect.centerX();
            double lerp = AndroidUtilities.lerp((int) NotificationCenter.storiesSendAsUpdate, 45, f) / 180.0f;
            Double.isNaN(lerp);
            float cos = centerX + (((float) Math.cos(lerp * 3.141592653589793d)) * AndroidUtilities.dp(22.6274f));
            float centerY = this.radialProgress.progressRect.centerY();
            double lerp2 = AndroidUtilities.lerp((int) NotificationCenter.storiesSendAsUpdate, 45, f) / 180.0f;
            Double.isNaN(lerp2);
            float sin = centerY + (((float) Math.sin(lerp2 * 3.141592653589793d)) * AndroidUtilities.dp(22.6274f));
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.radialProgress.progressRect);
            rectF.inset(-AndroidUtilities.dp(1.0f), -AndroidUtilities.dp(1.0f));
            canvas.saveLayerAlpha(rectF, NotificationCenter.voipServiceCreated, 31);
            this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
            this.radialProgress.iconScale = f;
            runnable.run();
            if (this.onceClearPaint == null) {
                Paint paint = new Paint(1);
                this.onceClearPaint = paint;
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            if (f < 1.0f) {
                canvas.save();
                float f2 = 1.0f - f;
                float f3 = 0.7f * f2;
                float centerX2 = this.radialProgress.progressRect.centerX();
                RectF rectF2 = this.radialProgress.progressRect;
                canvas.scale(f3, f3, centerX2, AndroidUtilities.lerp(rectF2.top, rectF2.bottom, 0.5f));
                if (this.onceFire == null) {
                    RLottieDrawable rLottieDrawable = new RLottieDrawable(R.raw.fire_once, "fire_once", AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), true, null);
                    this.onceFire = rLottieDrawable;
                    rLottieDrawable.setMasterParent(this);
                    this.onceFire.setAllowDecodeSingleFrame(true);
                    this.onceFire.setAutoRepeat(1);
                    this.onceFire.start();
                    this.onceFire.scaleByCanvas = true;
                }
                RLottieDrawable rLottieDrawable2 = this.onceFire;
                RectF rectF3 = this.radialProgress.progressRect;
                rLottieDrawable2.setBounds((int) rectF3.left, (int) rectF3.top, (int) rectF3.right, (int) rectF3.bottom);
                if (this.onceRadialPaint == null) {
                    this.onceRadialPaint = new Paint(1);
                }
                if (this.onceRadialCutPaint == null) {
                    Paint paint2 = new Paint(1);
                    this.onceRadialCutPaint = paint2;
                    paint2.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
                }
                if (this.onceRadialStrokePaint == null) {
                    Paint paint3 = new Paint(1);
                    this.onceRadialStrokePaint = paint3;
                    paint3.setStyle(Paint.Style.STROKE);
                }
                RadialProgress2 radialProgress2 = this.radialProgress;
                int i = radialProgress2.iconColorKey;
                int themedColor = i >= 0 ? getThemedColor(i) : radialProgress2.iconColor;
                this.onceRadialPaint.setColor(themedColor);
                this.onceRadialStrokePaint.setColor(themedColor);
                this.radialProgress.mediaActionDrawable.applyShaderMatrix(false);
                this.onceRadialPaint.setShader(this.radialProgress.mediaActionDrawable.paint2.getShader());
                this.onceRadialStrokePaint.setShader(this.radialProgress.mediaActionDrawable.paint2.getShader());
                rectF.set(this.onceFire.getBounds());
                canvas.saveLayerAlpha(rectF, NotificationCenter.voipServiceCreated, 31);
                rectF.inset(1.0f, 1.0f);
                canvas.drawRect(rectF, this.onceRadialPaint);
                this.onceFire.draw(canvas, this.onceRadialCutPaint);
                canvas.restore();
                canvas.restore();
                this.onceRadialStrokePaint.setAlpha((int) (255.0f * f2));
                this.onceRadialStrokePaint.setStrokeWidth(AndroidUtilities.dp(1.66f));
                this.rect.set(this.radialProgress.progressRect);
                this.rect.inset(AndroidUtilities.dp(3.0f), AndroidUtilities.dp(3.0f));
                canvas.drawArc(this.rect, -90.0f, (1.0f - this.seekBarWaveform.explodeProgress) * (-360.0f), false, this.onceRadialStrokePaint);
                if (this.timerParticles == null) {
                    this.timerParticles = new TimerParticles();
                }
                this.timerParticles.draw(canvas, this.onceRadialStrokePaint, this.rect, (1.0f - this.seekBarWaveform.explodeProgress) * (-360.0f), f2);
            } else {
                RLottieDrawable rLottieDrawable3 = this.onceFire;
                if (rLottieDrawable3 != null) {
                    rLottieDrawable3.recycle(true);
                    this.onceFire = null;
                    if (this.timerParticles != null) {
                        this.timerParticles = null;
                    }
                }
            }
            canvas.drawCircle(cos, sin, AndroidUtilities.dp((f * 1.5f) + 10.0f) * f, this.onceClearPaint);
            canvas.restore();
            if (this.oncePeriod == null) {
                CaptionContainerView.PeriodDrawable periodDrawable = new CaptionContainerView.PeriodDrawable(3);
                this.oncePeriod = periodDrawable;
                periodDrawable.updateColors(-1, 0, 0);
                CaptionContainerView.PeriodDrawable periodDrawable2 = this.oncePeriod;
                periodDrawable2.diameterDp = 14.0f;
                periodDrawable2.setTextSize(10.0f);
                this.oncePeriod.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.5f));
                this.oncePeriod.setValue(1, false, false);
                this.oncePeriod.textOffsetX = -AndroidUtilities.dpf2(0.33f);
                this.oncePeriod.textOffsetY = AndroidUtilities.dpf2(0.33f);
            }
            CaptionContainerView.PeriodDrawable periodDrawable3 = this.oncePeriod;
            periodDrawable3.diameterDp = f * 14.0f;
            periodDrawable3.setTextSize(f * 10.0f);
            canvas.saveLayerAlpha(cos - AndroidUtilities.dp(10.0f), sin - AndroidUtilities.dp(10.0f), cos + AndroidUtilities.dp(10.0f), sin + AndroidUtilities.dp(10.0f), NotificationCenter.voipServiceCreated, 31);
            canvas.drawCircle(cos, sin, AndroidUtilities.dp(10.0f) * f, this.radialProgress.circlePaint);
            this.oncePeriod.setClear(AndroidUtilities.computePerceivedBrightness(this.radialProgress.circlePaint.getColor()) > 0.8f);
            this.oncePeriod.setCenterXY(cos, sin);
            this.oncePeriod.draw(canvas, f);
            canvas.restore();
            return;
        }
        runnable.run();
    }

    /* JADX WARN: Removed duplicated region for block: B:429:0x0abf  */
    /* JADX WARN: Removed duplicated region for block: B:430:0x0adf  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0b02  */
    /* JADX WARN: Removed duplicated region for block: B:449:0x0b86  */
    /* JADX WARN: Removed duplicated region for block: B:464:0x0c06  */
    /* JADX WARN: Removed duplicated region for block: B:504:0x0d23  */
    /* JADX WARN: Removed duplicated region for block: B:509:0x0d2f  */
    /* JADX WARN: Removed duplicated region for block: B:512:0x0d3e  */
    /* JADX WARN: Removed duplicated region for block: B:513:0x0d5a  */
    /* JADX WARN: Removed duplicated region for block: B:558:0x0e69  */
    /* JADX WARN: Removed duplicated region for block: B:566:0x0ea3  */
    /* JADX WARN: Removed duplicated region for block: B:575:0x0ecb  */
    /* JADX WARN: Removed duplicated region for block: B:580:0x0f0f  */
    /* JADX WARN: Removed duplicated region for block: B:585:0x0faf  */
    /* JADX WARN: Removed duplicated region for block: B:601:0x103c  */
    /* JADX WARN: Removed duplicated region for block: B:606:0x1099  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x10a6  */
    /* JADX WARN: Removed duplicated region for block: B:619:0x10f3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawLinkPreview(Canvas canvas, float f) {
        int dp;
        int extraTextX;
        int i;
        int dp2;
        int i2;
        int i3;
        int dp3;
        boolean z;
        int i4;
        float f2;
        int i5;
        int i6;
        int i7;
        boolean z2;
        int i8;
        int i9;
        int i10;
        float f3;
        float f4;
        Canvas canvas2;
        int i11;
        Paint themedPaint;
        Drawable drawable;
        float f5;
        int i12;
        int i13;
        int dp4;
        TransitionParams transitionParams;
        int i14;
        ChatMessageCellDelegate chatMessageCellDelegate;
        float f6;
        MessageObject messageObject;
        ReplyMessageLine replyMessageLine;
        float f7;
        float f8;
        float f9;
        float f10;
        float f11;
        int i15;
        float f12;
        float f13;
        int i16;
        int i17;
        int i18;
        if (this.currentMessageObject.isSponsored() || this.currentMessageObject.isUnsupported() || this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
            int saveCount = canvas.getSaveCount();
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp5 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            if (this.hasGamePreview) {
                i2 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                dp2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i2 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                    i3 = this.unmovedTextX;
                    dp3 = AndroidUtilities.dp(1.0f);
                } else if (this.currentMessageObject.isSponsored()) {
                    i2 = this.linkPreviewY - AndroidUtilities.dp(2.0f);
                    i3 = this.unmovedTextX;
                    dp3 = AndroidUtilities.dp(1.0f);
                } else {
                    if (this.currentMessageObject.isOutOwner()) {
                        i = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                        if (this.currentMessageObject.type == 19) {
                            i -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + i) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                        }
                    } else {
                        if (this.mediaBackground) {
                            dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                            extraTextX = getExtraTextX();
                        } else {
                            dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                            extraTextX = getExtraTextX();
                        }
                        i = dp + extraTextX;
                    }
                    dp2 = ((int) (i + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
                    i2 = this.linkPreviewY;
                    TransitionParams transitionParams3 = this.transitionParams;
                    if (transitionParams3.animateLinkPreviewY) {
                        i2 = AndroidUtilities.lerp(transitionParams3.animateFromLinkPreviewY, i2, transitionParams3.animateChangeProgress);
                    }
                }
                dp2 = i3 + dp3;
            }
            int i19 = i2;
            int i20 = dp2;
            float f14 = i20;
            int i21 = (int) (dp5 - f14);
            int i22 = this.linkPreviewHeight;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4 != null && transitionParams4.animateLinkPreviewHeight) {
                i22 = AndroidUtilities.lerp(transitionParams4.animateFromLinkPreviewHeight, i22, transitionParams4.animateChangeProgress);
            }
            int i23 = i22;
            if (this.linkLine == null) {
                this.linkLine = new ReplyMessageLine(this);
            }
            Theme.chat_replyNamePaint.setColor(this.linkLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 3));
            ReplyMessageLine replyMessageLine2 = this.linkLine;
            int i24 = this.drawInstantViewType;
            replyMessageLine2.setEmojiAlpha((i24 == 23 || i24 == 24) ? 0.5f : 1.0f);
            boolean z3 = this.currentMessageObject.isSponsored() && !this.isSmallImage;
            boolean z4 = !(z3 || !this.drawInstantView || (i18 = this.drawInstantViewType) == 9 || i18 == 2 || i18 == 13 || i18 == 11 || i18 == 25 || i18 == 1 || i18 == 18 || i18 == 22) || (this.drawInstantViewType == 6 && this.imageBackgroundColor != 0);
            boolean z5 = !z3 && (!this.drawInstantView || (i17 = this.drawInstantViewType) == 9 || i17 == 2 || i17 == 11 || i17 == 25 || i17 == 13 || i17 == 1 || i17 == 18 || i17 == 22 || i17 == 32 || this.isSmallImage);
            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
            boolean z6 = chatMessageCellDelegate2 != null && chatMessageCellDelegate2.isProgressLoading(this, 2);
            if (this.hasInvoicePreview || this.currentMessageObject.isGiveawayOrGiveawayResults() || this.currentMessageObject.isUnsupported()) {
                z = z6;
                i4 = i21;
                f2 = f14;
                i5 = i20;
                i6 = saveCount;
                i7 = i19;
                z2 = false;
            } else {
                if (this.linkPreviewBounce == null) {
                    this.linkPreviewBounce = new ButtonBounce(this, 2.0f, 2.0f);
                }
                canvas.save();
                float scale = this.linkPreviewBounce.getScale(0.01f);
                canvas.scale(scale, scale, (i21 / 2.0f) + f14, i19 + ((i23 + (this.drawInstantView ? AndroidUtilities.dp(42.0f) : 0)) / 2.0f));
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(f14, i19 - AndroidUtilities.dp(6.0f), i20 + i21, i19 + i23 + (this.drawInstantView ? AndroidUtilities.dp(42.0f) : 0));
                this.linkLine.setLoading(z6);
                boolean z7 = z6;
                float floor = (float) Math.floor(SharedConfig.bubbleRadius / (this.currentMessageObject.isSponsored() ? 2.0f : 3.0f));
                ReplyMessageLine replyMessageLine3 = this.linkLine;
                if (z4) {
                    float isSmallImage = 1.0f - isSmallImage();
                    float dp6 = AndroidUtilities.dp(18.0f) + this.photoImage.getImageHeight();
                    StaticLayout staticLayout = this.siteNameLayout;
                    if (staticLayout != null) {
                        z = z7;
                        i16 = staticLayout.getLineBottom(staticLayout.getLineCount() - 1);
                    } else {
                        z = z7;
                        i16 = 0;
                    }
                    f13 = isSmallImage * (dp6 + i16);
                } else {
                    z = z7;
                    f13 = 0.0f;
                }
                i4 = i21;
                i6 = saveCount;
                i5 = i20;
                f2 = f14;
                i7 = i19;
                replyMessageLine3.offsetEmoji(0.0f, f13).drawBackground(canvas, rectF, floor, floor, floor, f);
                int backgroundColor = this.linkLine.getBackgroundColor();
                Drawable drawable2 = this.linkPreviewSelector;
                if (drawable2 == null) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    Drawable createRadSelectorDrawable = Theme.createRadSelectorDrawable(backgroundColor, 0, 0);
                    this.linkPreviewSelector = createRadSelectorDrawable;
                    createRadSelectorDrawable.setCallback(this);
                    Theme.setMaskDrawableRad(this.linkPreviewSelector, 3.0f, 6.0f, 6.0f, 3.0f);
                    this.linkPreviewSelector.setCallback(this);
                } else if (this.linkPreviewSelectorColor != backgroundColor) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    Theme.setSelectorDrawableColor(drawable2, backgroundColor, true);
                }
                this.linkPreviewSelector.setBounds((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                this.linkPreviewSelector.draw(canvas);
                this.linkLine.drawLine(canvas, rectF, f);
                this.linkLine.drawLoadingBackground(canvas, rectF, floor, floor, floor, f);
                z2 = true;
            }
            if (this.drawPhotoImage && z3) {
                int dp7 = i4 - AndroidUtilities.dp(17.0f);
                if (this.isSmallImage) {
                    ImageReceiver imageReceiver = this.photoImage;
                    imageReceiver.setImageX(((i5 + i4) - imageReceiver.getImageWidth()) - AndroidUtilities.dp(6.0f));
                    this.photoImage.setImageY(0);
                } else {
                    this.photoImage.setImageX(i5 + (this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)));
                    this.photoImage.setImageY(i7);
                }
                TransitionParams transitionParams5 = this.transitionParams;
                if (transitionParams5 != null && transitionParams5.animateSmallImage) {
                    if (!this.isSmallImage && this.documentAttachType != 1) {
                        this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams5.photoImageFromWidth, dp7, transitionParams5.animateChangeProgress));
                    }
                    ImageReceiver imageReceiver2 = this.photoImage;
                    imageReceiver2.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver2.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / 2.0f));
                    ImageReceiver imageReceiver3 = this.photoImage;
                    imageReceiver3.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver3.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / 2.0f));
                } else if (!this.isSmallImage && (i15 = this.documentAttachType) != 7 && i15 != 1) {
                    this.photoImage.setImageWidth(dp7);
                }
                if (!this.isSmallImage && this.drawImageButton) {
                    int dp8 = AndroidUtilities.dp(48.0f);
                    float f15 = dp8;
                    this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f15) / 2.0f));
                    int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f15) / 2.0f));
                    this.buttonY = imageY;
                    RadialProgress2 radialProgress2 = this.radialProgress;
                    int i25 = this.buttonX;
                    radialProgress2.setProgressRect(i25, imageY, i25 + dp8, dp8 + imageY);
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                    if (chatMessageCellDelegate3 == null || chatMessageCellDelegate3.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            if (allowDrawPhotoImage()) {
                                this.imageDrawn = this.photoImage.draw(canvas);
                            } else {
                                this.imageDrawn = true;
                            }
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                this.blurredPhotoImage.setAlpha(f);
                                drawBlurredPhoto(canvas);
                                f12 = 1.0f;
                                this.blurredPhotoImage.setAlpha(1.0f);
                            } else {
                                f12 = 1.0f;
                            }
                            this.photoImage.setAlpha(f12);
                        } else {
                            if (allowDrawPhotoImage()) {
                                this.imageDrawn = this.photoImage.draw(canvas);
                            } else {
                                this.imageDrawn = true;
                            }
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                drawBlurredPhoto(canvas);
                            }
                        }
                    }
                }
                i8 = (int) (i7 + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f));
            } else {
                i8 = i7;
            }
            if (this.siteNameLayout != null) {
                if (this.titleLabelLayout != null) {
                    f10 = 1.0f;
                    i8 += AndroidUtilities.dp(1.0f);
                } else {
                    f10 = 1.0f;
                }
                int dp9 = i8 - AndroidUtilities.dp(f10);
                int alpha = Theme.chat_replyNamePaint.getAlpha();
                if (f != f10) {
                    Theme.chat_replyNamePaint.setAlpha((int) (alpha * f));
                }
                canvas.save();
                if (Math.abs(this.siteNameLeft) > 1.0f) {
                    f11 = ((i4 - AndroidUtilities.dp(this.hasInvoicePreview ? 0.0f : 20.0f)) - this.siteNameWidth) - this.siteNameLeft;
                } else {
                    f11 = 0.0f;
                }
                float dp10 = f2 + f11 + (this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f));
                canvas.translate(dp10, i8 - AndroidUtilities.dp(1.0f));
                SpoilerEffect.layoutDrawMaybe(this.siteNameLayout, canvas);
                canvas.restore();
                if (this.titleLabelLayout != null) {
                    float dp11 = dp10 + this.siteNameLayoutWidth + AndroidUtilities.dp(12.0f);
                    this.titleLabelX = dp11;
                    this.titleLabelY = i8;
                    this.rect.set(dp11 - AndroidUtilities.dp(6.0f), this.titleLabelY - AndroidUtilities.dp(2.0f), this.titleLabelX + this.titleLabelLayoutWidth + AndroidUtilities.dp(6.0f), this.titleLabelY + this.titleLabelLayoutHeight + AndroidUtilities.dp(2.0f));
                    if (this.titleLabelBounce == null) {
                        this.titleLabelBounce = new ButtonBounce(this);
                    }
                    float scale2 = this.titleLabelBounce.getScale(0.1f);
                    boolean z8 = scale2 != 1.0f;
                    if (z8) {
                        canvas.save();
                        canvas.scale(scale2, scale2, this.rect.centerX(), this.rect.centerY());
                    }
                    Theme.chat_instantViewPaint.setColor(Theme.chat_replyNamePaint.getColor());
                    int alpha2 = Theme.chat_instantViewPaint.getAlpha();
                    Theme.chat_instantViewPaint.setAlpha((int) (alpha * 0.11f));
                    RectF rectF2 = this.rect;
                    canvas.drawRoundRect(rectF2, rectF2.height(), this.rect.height(), Theme.chat_instantViewPaint);
                    Theme.chat_instantViewPaint.setAlpha(alpha2);
                    Theme.chat_titleLabelTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                    Theme.chat_titleLabelTextPaint.setAlpha(Theme.chat_replyNamePaint.getAlpha());
                    canvas.save();
                    canvas.translate(this.titleLabelX, this.titleLabelY);
                    this.titleLabelLayout.draw(canvas);
                    canvas.restore();
                    if (z8) {
                        canvas.restore();
                    }
                }
                StaticLayout staticLayout2 = this.siteNameLayout;
                int lineBottom = i8 + staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1);
                Theme.chat_replyNamePaint.setAlpha(alpha);
                i9 = lineBottom;
                i10 = dp9;
            } else {
                i9 = i8;
                i10 = 0;
            }
            if ((this.hasGamePreview || this.hasInvoicePreview) && this.currentMessageObject.textHeight(this.transitionParams) != 0) {
                i9 += this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f);
                i7 = this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f) + i7;
            }
            if (this.drawPhotoImage && z4) {
                if (this.isSmallImage) {
                    TransitionParams transitionParams6 = this.transitionParams;
                    if (transitionParams6 != null && transitionParams6.animateSmallImage) {
                        i9 = (int) (i9 + (((i9 != i7 ? AndroidUtilities.dp(2.0f) : 0) + this.transitionParams.photoImageFromHeight + AndroidUtilities.dp(6.0f)) * (1.0f - this.transitionParams.animateChangeProgress)));
                    }
                } else {
                    TransitionParams transitionParams7 = this.transitionParams;
                    float f16 = (transitionParams7 == null || !transitionParams7.animateSmallImage) ? 1.0f : transitionParams7.animateChangeProgress;
                    if (i9 != i7) {
                        i9 = (int) (i9 + (AndroidUtilities.dp(2.0f) * f16));
                    }
                    int i26 = i9;
                    int dp12 = i4 - AndroidUtilities.dp(17.0f);
                    if (this.isSmallImage || this.drawInstantViewType != 17) {
                        f8 = 0.0f;
                    } else {
                        Rect rect = AndroidUtilities.rectTmp2;
                        rect.set(i5 + AndroidUtilities.dp(10.0f), i26, AndroidUtilities.dp(10.0f) + i5 + dp12, ((int) this.photoImage.getImageHeight()) + i26);
                        RectF rectF3 = AndroidUtilities.rectTmp;
                        rectF3.set(rect);
                        if (this.gradientDrawable == null) {
                            TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                            if (tLRPC$PhotoSize != null && tLRPC$PhotoSize.gradientTopColor != 0 && tLRPC$PhotoSize.gradientBottomColor != 0) {
                                GradientDrawable.Orientation orientation = GradientDrawable.Orientation.TOP_BOTTOM;
                                TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
                                this.gradientDrawable = new GradientDrawable(orientation, new int[]{tLRPC$PhotoSize2.gradientTopColor, tLRPC$PhotoSize2.gradientBottomColor});
                            } else if (this.photoImage.getBitmap() != null) {
                                int[] colorsSync = DominantColors.getColorsSync(false, this.photoImage.getBitmap(), Theme.isCurrentThemeDark());
                                this.gradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, colorsSync);
                                TLRPC$PhotoSize tLRPC$PhotoSize3 = this.currentPhotoObject;
                                if (tLRPC$PhotoSize3 != null) {
                                    tLRPC$PhotoSize3.gradientTopColor = colorsSync[0];
                                    tLRPC$PhotoSize3.gradientBottomColor = colorsSync[1];
                                }
                            }
                        }
                        if (this.gradientDrawable != null) {
                            canvas.save();
                            Path path = this.drillHolePath;
                            if (path != null) {
                                path.rewind();
                            } else {
                                this.drillHolePath = new Path();
                            }
                            this.drillHolePath.addRoundRect(rectF3, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                            canvas.clipPath(this.drillHolePath);
                            this.gradientDrawable.setBounds(rect);
                            this.gradientDrawable.draw(canvas);
                            canvas.restore();
                        }
                        f8 = (((this.instantWidth - this.photoImage.getImageWidth()) - AndroidUtilities.dp(10.0f)) - (this.transitionParams == null ? 0.0f : this.currentMessageObject.isOutOwner() ? this.transitionParams.deltaLeft : -this.transitionParams.deltaRight)) / 2.0f;
                    }
                    if (this.imageBackgroundSideColor != 0) {
                        int dp13 = i5 + AndroidUtilities.dp(10.0f);
                        ImageReceiver imageReceiver4 = this.photoImage;
                        float f17 = dp13;
                        imageReceiver4.setImageX(f8 + f17 + ((this.imageBackgroundSideWidth - imageReceiver4.getImageWidth()) / 2.0f));
                        this.photoImage.setImageY(i26);
                        this.rect.set(f17, this.photoImage.getImageY(), dp13 + this.imageBackgroundSideWidth, this.photoImage.getImageY2());
                        Theme.chat_instantViewPaint.setColor(ColorUtils.setAlphaComponent(this.imageBackgroundSideColor, (int) (f * 255.0f)));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                    } else {
                        this.photoImage.setImageX(f8 + f2 + AndroidUtilities.dp(10.0f));
                        this.photoImage.setImageY(i26);
                    }
                    if (this.drawInstantViewType != 17) {
                        TransitionParams transitionParams8 = this.transitionParams;
                        if (transitionParams8 != null && transitionParams8.animateSmallImage) {
                            if (!this.isSmallImage && this.documentAttachType != 1) {
                                this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams8.photoImageFromWidth, dp12, transitionParams8.animateChangeProgress));
                            }
                            ImageReceiver imageReceiver5 = this.photoImage;
                            imageReceiver5.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver5.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / 2.0f));
                            ImageReceiver imageReceiver6 = this.photoImage;
                            imageReceiver6.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver6.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / 2.0f));
                        } else if (!this.isSmallImage && this.documentAttachType != 1) {
                            this.photoImage.setImageWidth(dp12);
                        }
                    }
                    if (this.imageBackgroundColor != 0) {
                        this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                        if (this.imageBackgroundGradientColor1 != 0) {
                            if (this.imageBackgroundGradientColor2 != 0) {
                                if (this.motionBackgroundDrawable == null) {
                                    MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable(this.imageBackgroundColor, this.imageBackgroundGradientColor1, this.imageBackgroundGradientColor2, this.imageBackgroundGradientColor3, true);
                                    this.motionBackgroundDrawable = motionBackgroundDrawable;
                                    if (this.imageBackgroundIntensity < 0.0f) {
                                        this.photoImage.setGradientBitmap(motionBackgroundDrawable.getBitmap());
                                    }
                                    if (!this.photoImage.hasImageSet()) {
                                        this.motionBackgroundDrawable.setRoundRadius(AndroidUtilities.dp(4.0f));
                                    }
                                }
                            } else {
                                if (this.gradientShader == null) {
                                    Rect gradientPoints = BackgroundGradientDrawable.getGradientPoints(AndroidUtilities.getWallpaperRotation(this.imageBackgroundGradientRotation, false), (int) this.rect.width(), (int) this.rect.height());
                                    this.gradientShader = new LinearGradient(gradientPoints.left, gradientPoints.top, gradientPoints.right, gradientPoints.bottom, new int[]{this.imageBackgroundColor, this.imageBackgroundGradientColor1}, (float[]) null, Shader.TileMode.CLAMP);
                                }
                                Theme.chat_instantViewPaint.setShader(this.gradientShader);
                                if (f != 1.0f) {
                                    Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                                }
                            }
                        } else {
                            Theme.chat_instantViewPaint.setShader(null);
                            Theme.chat_instantViewPaint.setColor(this.imageBackgroundColor);
                            if (f != 1.0f) {
                                Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                            }
                        }
                        MotionBackgroundDrawable motionBackgroundDrawable2 = this.motionBackgroundDrawable;
                        if (motionBackgroundDrawable2 != null) {
                            RectF rectF4 = this.rect;
                            motionBackgroundDrawable2.setBounds((int) rectF4.left, (int) rectF4.top, (int) rectF4.right, (int) rectF4.bottom);
                            this.motionBackgroundDrawable.draw(canvas);
                        } else if (this.imageBackgroundSideColor != 0) {
                            canvas.drawRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2(), Theme.chat_instantViewPaint);
                        } else {
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                        }
                        Theme.chat_instantViewPaint.setShader(null);
                        Theme.chat_instantViewPaint.setAlpha(NotificationCenter.voipServiceCreated);
                    }
                    if (this.drawPhotoImage && this.drawInstantView && this.drawInstantViewType != 9) {
                        if (this.drawImageButton) {
                            int dp14 = AndroidUtilities.dp(48.0f);
                            float f18 = dp14;
                            this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f18) / 2.0f));
                            int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f18) / 2.0f));
                            this.buttonY = imageY2;
                            RadialProgress2 radialProgress22 = this.radialProgress;
                            int i27 = this.buttonX;
                            radialProgress22.setProgressRect(i27, imageY2, i27 + dp14, dp14 + imageY2);
                        }
                        ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                        if (chatMessageCellDelegate4 == null || chatMessageCellDelegate4.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                            if (f != 1.0f) {
                                this.photoImage.setAlpha(f);
                                if (allowDrawPhotoImage()) {
                                    this.imageDrawn = this.photoImage.draw(canvas);
                                } else {
                                    this.imageDrawn = true;
                                }
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    this.blurredPhotoImage.setAlpha(f);
                                    drawBlurredPhoto(canvas);
                                    f9 = 1.0f;
                                    this.blurredPhotoImage.setAlpha(1.0f);
                                } else {
                                    f9 = 1.0f;
                                }
                                this.photoImage.setAlpha(f9);
                            } else {
                                if (allowDrawPhotoImage()) {
                                    this.imageDrawn = this.photoImage.draw(canvas);
                                } else {
                                    this.imageDrawn = true;
                                }
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    drawBlurredPhoto(canvas);
                                }
                            }
                        }
                    }
                    TransitionParams transitionParams9 = this.transitionParams;
                    if (transitionParams9 != null && transitionParams9.animateChange) {
                        i9 = (int) (i26 + (f16 * (transitionParams9.animateToImageH + AndroidUtilities.dp(6.0f))));
                    } else {
                        i9 = (int) (i26 + (f16 * (this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f))));
                    }
                    if (!this.currentMessageObject.isOutOwner()) {
                        TextPaint textPaint = Theme.chat_replyNamePaint;
                        int i28 = Theme.key_chat_messageTextOut;
                        int i29 = (int) (f * 255.0f);
                        textPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i28), i29));
                        Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i28), i29));
                    } else {
                        TextPaint textPaint2 = Theme.chat_replyNamePaint;
                        int i30 = Theme.key_chat_messageTextIn;
                        int i31 = (int) (f * 255.0f);
                        textPaint2.setColor(ColorUtils.setAlphaComponent(getThemedColor(i30), i31));
                        Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i30), i31));
                    }
                    if (this.titleLayout != null) {
                        if (i9 != i7) {
                            i9 += AndroidUtilities.dp(4.0f);
                            f7 = 1.0f;
                            AndroidUtilities.dp(1.0f);
                        } else {
                            f7 = 1.0f;
                        }
                        if (i10 == 0) {
                            i10 = i9 - AndroidUtilities.dp(f7);
                        }
                        canvas.save();
                        float dp15 = i5 + AndroidUtilities.dp(10.0f) + (Math.abs(this.titleLayoutLeft) > 1 ? ((i4 - AndroidUtilities.dp(20.0f)) - this.titleLayoutWidth) - this.titleLayoutLeft : 0);
                        float dp16 = i9 - AndroidUtilities.dp(3.0f);
                        TransitionParams transitionParams10 = this.transitionParams;
                        canvas.translate(dp15, dp16 + (!transitionParams10.animateLinkPreviewY ? transitionParams10.deltaBottom + (-transitionParams10.deltaTop) : 0.0f));
                        TextPaint paint = this.titleLayout.getPaint();
                        int alpha3 = paint.getAlpha();
                        paint.setAlpha((int) (alpha3 * f));
                        SpoilerEffect.layoutDrawMaybe(this.titleLayout, canvas);
                        paint.setAlpha(alpha3);
                        canvas.restore();
                        StaticLayout staticLayout3 = this.titleLayout;
                        i9 += staticLayout3.getLineBottom(staticLayout3.getLineCount() - 1);
                    }
                    if (this.authorLayout != null) {
                        if (i9 != i7) {
                            i9 += AndroidUtilities.dp(2.0f);
                        }
                        if (i10 == 0) {
                            i10 = i9 - AndroidUtilities.dp(1.0f);
                        }
                        canvas.save();
                        float dp17 = i5 + AndroidUtilities.dp(10.0f) + (Math.abs(this.authorLayoutLeft) > 1 ? ((i4 - AndroidUtilities.dp(20.0f)) - this.authorLayoutWidth) - this.authorLayoutLeft : 0);
                        float dp18 = i9 - AndroidUtilities.dp(3.0f);
                        TransitionParams transitionParams11 = this.transitionParams;
                        canvas.translate(dp17, dp18 + (!transitionParams11.animateLinkPreviewY ? transitionParams11.deltaBottom + (-transitionParams11.deltaTop) : 0.0f));
                        TextPaint paint2 = this.authorLayout.getPaint();
                        int alpha4 = paint2.getAlpha();
                        paint2.setAlpha((int) (alpha4 * f));
                        SpoilerEffect.layoutDrawMaybe(this.authorLayout, canvas);
                        paint2.setAlpha(alpha4);
                        canvas.restore();
                        StaticLayout staticLayout4 = this.authorLayout;
                        i9 += staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                    }
                    if (this.descriptionLayout == null) {
                        if (i9 != i7) {
                            i9 += AndroidUtilities.dp(2.0f);
                        }
                        int i32 = i9;
                        if (i10 == 0) {
                            i10 = i32 - AndroidUtilities.dp(1.0f);
                        }
                        int i33 = i10;
                        this.descriptionY = i32 - AndroidUtilities.dp(3.0f);
                        canvas.save();
                        float dp19 = i5 + AndroidUtilities.dp(10.0f) + (Math.abs(this.descriptionLayoutLeft) > 1 ? ((i4 - AndroidUtilities.dp(20.0f)) - this.descriptionLayoutWidth) - this.descriptionLayoutLeft : 0);
                        float f19 = this.descriptionY;
                        TransitionParams transitionParams12 = this.transitionParams;
                        canvas.translate(dp19, f19 + (!transitionParams12.animateLinkPreviewY ? transitionParams12.deltaBottom + (-transitionParams12.deltaTop) : 0.0f));
                        if (this.linkBlockNum == -10 && this.links.draw(canvas)) {
                            invalidate();
                        }
                        drawProgressLoadingLink(canvas, -2);
                        ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                        if (chatMessageCellDelegate5 != null && chatMessageCellDelegate5.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                            this.delegate.getTextSelectionHelper().drawDescription(this.currentMessageObject.isOutOwner(), this.descriptionLayout, canvas);
                        }
                        TextPaint paint3 = this.descriptionLayout.getPaint();
                        if (z2 && (messageObject = this.currentMessageObject) != null && !messageObject.isOutOwner() && (replyMessageLine = this.linkLine) != null) {
                            paint3.linkColor = replyMessageLine.getColor();
                        }
                        int alpha5 = paint3.getAlpha();
                        paint3.setAlpha((int) (alpha5 * f));
                        SpoilerEffect.layoutDrawMaybe(this.descriptionLayout, canvas);
                        paint3.setAlpha(alpha5);
                        StaticLayout staticLayout5 = this.descriptionLayout;
                        f4 = 2.0f;
                        f3 = 1.0f;
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout5, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, staticLayout5.getPaint().getColor()));
                        canvas.restore();
                        paint3.linkColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageLinkOut : Theme.key_chat_messageLinkIn);
                        StaticLayout staticLayout6 = this.descriptionLayout;
                        i9 = i32 + staticLayout6.getLineBottom(staticLayout6.getLineCount() - 1);
                        i10 = i33;
                    } else {
                        f3 = 1.0f;
                        f4 = 2.0f;
                    }
                    if (this.drawPhotoImage && z5) {
                        if (i9 != i7) {
                            i9 += AndroidUtilities.dp(f4);
                        }
                        dp4 = i4 - AndroidUtilities.dp(17.0f);
                        if (!this.isSmallImage) {
                            ImageReceiver imageReceiver7 = this.photoImage;
                            imageReceiver7.setImageX(((i5 + i4) - imageReceiver7.getImageWidth()) - AndroidUtilities.dp(6.0f));
                            this.photoImage.setImageY(i10);
                        } else {
                            this.photoImage.setImageX(i5 + (this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)));
                            this.photoImage.setImageY(i9);
                        }
                        transitionParams = this.transitionParams;
                        if (transitionParams == null && transitionParams.animateSmallImage) {
                            if (!this.isSmallImage && this.documentAttachType != 1) {
                                this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams.photoImageFromWidth, dp4, transitionParams.animateChangeProgress));
                            }
                            ImageReceiver imageReceiver8 = this.photoImage;
                            imageReceiver8.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver8.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / f4));
                            ImageReceiver imageReceiver9 = this.photoImage;
                            imageReceiver9.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver9.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / f4));
                        } else if (!this.isSmallImage && (i14 = this.documentAttachType) != 7 && i14 != 1) {
                            this.photoImage.setImageWidth(dp4);
                        }
                        if (!this.isSmallImage && this.drawImageButton) {
                            int dp20 = AndroidUtilities.dp(48.0f);
                            float f20 = dp20;
                            this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f20) / f4));
                            int imageY3 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f20) / f4));
                            this.buttonY = imageY3;
                            RadialProgress2 radialProgress23 = this.radialProgress;
                            int i34 = this.buttonX;
                            radialProgress23.setProgressRect(i34, imageY3, i34 + dp20, dp20 + imageY3);
                        }
                        if (!this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                            this.imageDrawn = true;
                            this.drawTime = true;
                        } else {
                            chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate != null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                                if (f == f3) {
                                    this.photoImage.setAlpha(f);
                                    if (allowDrawPhotoImage()) {
                                        canvas2 = canvas;
                                        f6 = 1.0f;
                                        this.imageDrawn = this.photoImage.draw(canvas2);
                                    } else {
                                        canvas2 = canvas;
                                        f6 = 1.0f;
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        this.blurredPhotoImage.setAlpha(f);
                                        drawBlurredPhoto(canvas);
                                        this.blurredPhotoImage.setAlpha(f6);
                                    }
                                    this.photoImage.setAlpha(f6);
                                } else {
                                    canvas2 = canvas;
                                    if (allowDrawPhotoImage()) {
                                        this.imageDrawn = this.photoImage.draw(canvas2);
                                    } else {
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        drawBlurredPhoto(canvas);
                                    }
                                }
                                i11 = this.documentAttachType;
                                if (i11 != 4 || i11 == 2) {
                                    this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                                    int imageY4 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                                    this.videoButtonY = imageY4;
                                    RadialProgress2 radialProgress24 = this.videoRadialProgress;
                                    int i35 = this.videoButtonX;
                                    radialProgress24.setProgressRect(i35, imageY4, AndroidUtilities.dp(24.0f) + i35, this.videoButtonY + AndroidUtilities.dp(24.0f));
                                }
                                themedPaint = getThemedPaint("paintChatTimeBackground");
                                if (this.photosCountLayout != null && this.photoImage.getVisible()) {
                                    int imageX = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                                    int imageY5 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                                    this.rect.set(imageX - AndroidUtilities.dp(4.0f), imageY5 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX + AndroidUtilities.dp(4.0f), imageY5 + AndroidUtilities.dp(14.5f));
                                    int alpha6 = themedPaint.getAlpha();
                                    themedPaint.setAlpha((int) (alpha6 * this.controlsAlpha));
                                    Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                                    canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                                    themedPaint.setAlpha(alpha6);
                                    canvas.save();
                                    canvas2.translate(imageX, imageY5);
                                    this.photosCountLayout.draw(canvas2);
                                    canvas.restore();
                                    Theme.chat_durationPaint.setAlpha(NotificationCenter.voipServiceCreated);
                                }
                                if (this.videoInfoLayout != null && ((!this.drawPhotoImage || this.photoImage.getVisible()) && this.imageBackgroundSideColor == 0)) {
                                    if (!this.hasGamePreview || this.hasInvoicePreview || this.documentAttachType == 8) {
                                        if (this.drawPhotoImage) {
                                            i13 = i5;
                                        } else {
                                            i13 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.5f));
                                            i9 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                                            this.rect.set(i13 - AndroidUtilities.dp(4.0f), i9 - AndroidUtilities.dp(1.5f), this.durationWidth + i13 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(this.documentAttachType == 8 ? 14.5f : 16.5f) + i9);
                                            canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                                        }
                                    } else {
                                        i13 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.durationWidth);
                                        i9 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                                        this.rect.set(i13 - AndroidUtilities.dp(4.0f), i9 - AndroidUtilities.dp(1.5f), this.durationWidth + i13 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(14.5f) + i9);
                                        canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatTimeBackground"));
                                    }
                                    canvas.save();
                                    canvas2.translate(i13, i9);
                                    if (this.hasInvoicePreview) {
                                        if (this.drawPhotoImage) {
                                            Theme.chat_shipmentPaint.setColor(getThemedColor(Theme.key_chat_previewGameText));
                                        } else if (this.currentMessageObject.isOutOwner()) {
                                            Theme.chat_shipmentPaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                                        } else {
                                            Theme.chat_shipmentPaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                                        }
                                    }
                                    this.videoInfoLayout.draw(canvas2);
                                    canvas.restore();
                                }
                                this.giveawayMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                                this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                                if (this.drawInstantView) {
                                    if (this.currentMessageObject.isOutOwner()) {
                                        Drawable themedDrawable = getThemedDrawable("drawableMsgOutInstant");
                                        TextPaint textPaint3 = Theme.chat_instantViewPaint;
                                        int i36 = Theme.key_chat_outPreviewInstantText;
                                        textPaint3.setColor(getThemedColor(i36));
                                        Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(getThemedColor(i36), 0.1f));
                                        LoadingDrawable loadingDrawable = this.instantButtonLoading;
                                        if (loadingDrawable != null) {
                                            loadingDrawable.setColors(Theme.multAlpha(getThemedColor(i36), 0.1f), Theme.multAlpha(getThemedColor(i36), 0.3f), Theme.multAlpha(getThemedColor(i36), 0.3f), Theme.multAlpha(getThemedColor(i36), 1.2f));
                                        }
                                        drawable = themedDrawable;
                                    } else {
                                        int themedColor = getThemedColor(Theme.key_chat_inPreviewInstantText);
                                        if (this.linkLine != null && !this.currentMessageObject.isUnsupported()) {
                                            themedColor = this.linkLine.getColor();
                                        }
                                        if (this.instantDrawable == null) {
                                            if (this.drawInstantViewType == 16) {
                                                this.instantDrawable = getContext().getResources().getDrawable(R.drawable.mini_external_link).mutate();
                                            } else {
                                                this.instantDrawable = getContext().getResources().getDrawable(R.drawable.msg_instant).mutate();
                                            }
                                        }
                                        if (this.instantDrawableColor != themedColor) {
                                            Drawable drawable3 = this.instantDrawable;
                                            this.instantDrawableColor = themedColor;
                                            drawable3.setColorFilter(new PorterDuffColorFilter(themedColor, PorterDuff.Mode.SRC_IN));
                                        }
                                        Drawable drawable4 = this.instantDrawable;
                                        Theme.chat_instantViewPaint.setColor(themedColor);
                                        Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(themedColor, 0.1f));
                                        LoadingDrawable loadingDrawable2 = this.instantButtonLoading;
                                        if (loadingDrawable2 != null) {
                                            loadingDrawable2.setColors(Theme.multAlpha(themedColor, 0.1f), Theme.multAlpha(themedColor, 0.3f), Theme.multAlpha(themedColor, 0.3f), Theme.multAlpha(themedColor, 1.2f));
                                        }
                                        drawable = drawable4;
                                    }
                                    if (z2) {
                                        int dp21 = i7 + i23 + AndroidUtilities.dp(14.0f);
                                        int alpha7 = Theme.chat_instantViewPaint.getAlpha();
                                        Theme.chat_instantViewPaint.setAlpha((int) (alpha7 * 0.18f));
                                        canvas.drawRect(i5 + AndroidUtilities.dp(10.0f), AndroidUtilities.dp(f4) + i12, (i5 + i4) - AndroidUtilities.dp(7.0f), i12 + AndroidUtilities.dp(f4) + Math.max(1, AndroidUtilities.dp(0.66f)), Theme.chat_instantViewPaint);
                                        Theme.chat_instantViewPaint.setAlpha(alpha7);
                                        float dp22 = AndroidUtilities.dp(this.drawInstantViewType == 0 ? 15.0f : 0.0f) + this.instantViewLayoutWidth;
                                        float f21 = f2 + ((i4 - dp22) / f4);
                                        int i37 = this.drawInstantViewType;
                                        if (i37 == 0) {
                                            BaseCell.setDrawableBounds(drawable, f21, AndroidUtilities.dp(1.0f) + dp21, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                                            drawable.setAlpha((int) (f * 255.0f));
                                            drawable.draw(canvas2);
                                            f21 += AndroidUtilities.dp(15.0f);
                                        } else if (i37 == 16) {
                                            f21 -= AndroidUtilities.dp(11.0f);
                                            BaseCell.setDrawableBounds(drawable, dp22 + f21 + AndroidUtilities.dp(4.0f), dp21 - AndroidUtilities.dp(f4), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f));
                                            drawable.setAlpha((int) (f * 255.0f));
                                            drawable.draw(canvas2);
                                        }
                                        if (this.instantViewLayout != null) {
                                            canvas.save();
                                            canvas2.translate(f21 - this.instantViewLayoutLeft, dp21);
                                            SpoilerEffect.layoutDrawMaybe(this.instantViewLayout, canvas2);
                                            canvas.restore();
                                        }
                                    } else {
                                        int dp23 = i7 + i23 + AndroidUtilities.dp(this.currentMessageObject.isUnsupported() ? -5.0f : 10.0f);
                                        LoadingDrawable loadingDrawable3 = this.instantButtonLoading;
                                        if (loadingDrawable3 != null && !z && !loadingDrawable3.isDisappeared() && !this.instantButtonLoading.isDisappearing()) {
                                            this.instantButtonLoading.disappear();
                                        }
                                        LoadingDrawable loadingDrawable4 = this.instantButtonLoading;
                                        if (loadingDrawable4 == null && z) {
                                            LoadingDrawable loadingDrawable5 = new LoadingDrawable();
                                            this.instantButtonLoading = loadingDrawable5;
                                            loadingDrawable5.strokePaint.setStrokeWidth(AndroidUtilities.dp(1.25f));
                                            this.instantButtonLoading.setAppearByGradient(true);
                                        } else if (loadingDrawable4 != null && z && (loadingDrawable4.isDisappeared() || this.instantButtonLoading.isDisappearing())) {
                                            this.instantButtonLoading.reset();
                                            this.instantButtonLoading.resetDisappear();
                                        }
                                        this.instantButtonRect.set(f2, dp23, i5 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp23);
                                        float scale3 = this.instantButtonBounce.getScale(0.02f);
                                        boolean z9 = scale3 != 1.0f;
                                        if (z9) {
                                            canvas.save();
                                            canvas2.scale(scale3, scale3, this.instantButtonRect.centerX(), this.instantButtonRect.centerY());
                                        }
                                        if (Build.VERSION.SDK_INT >= 21) {
                                            this.selectorDrawableMaskType[0] = 0;
                                            createSelectorDrawable(0);
                                            this.selectorDrawable[0].setBounds(i5, dp23, i5 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp23);
                                            this.selectorDrawable[0].draw(canvas2);
                                        }
                                        LoadingDrawable loadingDrawable6 = this.instantButtonLoading;
                                        if (loadingDrawable6 == null || loadingDrawable6.isDisappeared()) {
                                            f5 = 6.0f;
                                        } else {
                                            this.instantButtonLoading.setBounds(this.instantButtonRect);
                                            f5 = 6.0f;
                                            this.instantButtonLoading.setRadiiDp(6.0f);
                                            this.instantButtonLoading.draw(canvas2);
                                            invalidate();
                                        }
                                        canvas2.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(f5), AndroidUtilities.dp(f5), Theme.chat_instantViewButtonPaint);
                                        int i38 = this.drawInstantViewType;
                                        if (i38 == 0) {
                                            BaseCell.setDrawableBounds(drawable, ((this.instantTextLeftX + this.instantTextX) + i5) - AndroidUtilities.dp(15.0f), AndroidUtilities.dp(11.5f) + dp23, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                                            drawable.setAlpha((int) (f * 255.0f));
                                            drawable.draw(canvas2);
                                        } else if (i38 == 16) {
                                            if (this.instantLinkArrowPaint == null) {
                                                Paint paint4 = new Paint(1);
                                                this.instantLinkArrowPaint = paint4;
                                                paint4.setStyle(Paint.Style.STROKE);
                                                this.instantLinkArrowPaint.setStrokeCap(Paint.Cap.ROUND);
                                                this.instantLinkArrowPaint.setStrokeJoin(Paint.Join.ROUND);
                                            }
                                            this.instantLinkArrowPaint.setColor(Theme.chat_instantViewPaint.getColor());
                                            this.instantLinkArrowPaint.setStrokeWidth(AndroidUtilities.dpf2(1.333f));
                                            Path path2 = this.instantLinkArrowPath;
                                            if (path2 == null) {
                                                this.instantLinkArrowPath = new Path();
                                            } else {
                                                path2.rewind();
                                            }
                                            this.instantLinkArrowPath.moveTo(this.instantButtonRect.right - AndroidUtilities.dp(11.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                            this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                            this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(11.0f));
                                            this.instantLinkArrowPath.moveTo(this.instantButtonRect.right - AndroidUtilities.dpf2(11.66f), this.instantButtonRect.top + AndroidUtilities.dp(11.66f));
                                            this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                            canvas2.drawPath(this.instantLinkArrowPath, this.instantLinkArrowPaint);
                                        }
                                        if (this.instantViewLayout != null) {
                                            canvas.save();
                                            canvas2.translate(i5 + this.instantTextX, dp23 + AndroidUtilities.dp(10.5f));
                                            SpoilerEffect.layoutDrawMaybe(this.instantViewLayout, canvas2);
                                            canvas.restore();
                                        }
                                        if (z9) {
                                            canvas.restore();
                                        }
                                    }
                                }
                                canvas2.restoreToCount(i6);
                            }
                        }
                    }
                    canvas2 = canvas;
                    i11 = this.documentAttachType;
                    if (i11 != 4) {
                    }
                    this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                    int imageY42 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                    this.videoButtonY = imageY42;
                    RadialProgress2 radialProgress242 = this.videoRadialProgress;
                    int i352 = this.videoButtonX;
                    radialProgress242.setProgressRect(i352, imageY42, AndroidUtilities.dp(24.0f) + i352, this.videoButtonY + AndroidUtilities.dp(24.0f));
                    themedPaint = getThemedPaint("paintChatTimeBackground");
                    if (this.photosCountLayout != null) {
                        int imageX2 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                        int imageY52 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                        this.rect.set(imageX2 - AndroidUtilities.dp(4.0f), imageY52 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX2 + AndroidUtilities.dp(4.0f), imageY52 + AndroidUtilities.dp(14.5f));
                        int alpha62 = themedPaint.getAlpha();
                        themedPaint.setAlpha((int) (alpha62 * this.controlsAlpha));
                        Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                        canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                        themedPaint.setAlpha(alpha62);
                        canvas.save();
                        canvas2.translate(imageX2, imageY52);
                        this.photosCountLayout.draw(canvas2);
                        canvas.restore();
                        Theme.chat_durationPaint.setAlpha(NotificationCenter.voipServiceCreated);
                    }
                    if (this.videoInfoLayout != null) {
                        if (!this.hasGamePreview) {
                        }
                        if (this.drawPhotoImage) {
                        }
                        canvas.save();
                        canvas2.translate(i13, i9);
                        if (this.hasInvoicePreview) {
                        }
                        this.videoInfoLayout.draw(canvas2);
                        canvas.restore();
                    }
                    this.giveawayMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                    this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                    if (this.drawInstantView) {
                    }
                    canvas2.restoreToCount(i6);
                }
            }
            if (!this.currentMessageObject.isOutOwner()) {
            }
            if (this.titleLayout != null) {
            }
            if (this.authorLayout != null) {
            }
            if (this.descriptionLayout == null) {
            }
            if (this.drawPhotoImage) {
                if (i9 != i7) {
                }
                dp4 = i4 - AndroidUtilities.dp(17.0f);
                if (!this.isSmallImage) {
                }
                transitionParams = this.transitionParams;
                if (transitionParams == null) {
                }
                if (!this.isSmallImage) {
                    this.photoImage.setImageWidth(dp4);
                }
                if (!this.isSmallImage) {
                    int dp202 = AndroidUtilities.dp(48.0f);
                    float f202 = dp202;
                    this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f202) / f4));
                    int imageY32 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f202) / f4));
                    this.buttonY = imageY32;
                    RadialProgress2 radialProgress232 = this.radialProgress;
                    int i342 = this.buttonX;
                    radialProgress232.setProgressRect(i342, imageY32, i342 + dp202, dp202 + imageY32);
                }
                if (!this.isRoundVideo) {
                }
                chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                }
                if (f == f3) {
                }
                i11 = this.documentAttachType;
                if (i11 != 4) {
                }
                this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                int imageY422 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                this.videoButtonY = imageY422;
                RadialProgress2 radialProgress2422 = this.videoRadialProgress;
                int i3522 = this.videoButtonX;
                radialProgress2422.setProgressRect(i3522, imageY422, AndroidUtilities.dp(24.0f) + i3522, this.videoButtonY + AndroidUtilities.dp(24.0f));
                themedPaint = getThemedPaint("paintChatTimeBackground");
                if (this.photosCountLayout != null) {
                }
                if (this.videoInfoLayout != null) {
                }
                this.giveawayMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
                if (this.drawInstantView) {
                }
                canvas2.restoreToCount(i6);
            }
            canvas2 = canvas;
            i11 = this.documentAttachType;
            if (i11 != 4) {
            }
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY4222 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY4222;
            RadialProgress2 radialProgress24222 = this.videoRadialProgress;
            int i35222 = this.videoButtonX;
            radialProgress24222.setProgressRect(i35222, imageY4222, AndroidUtilities.dp(24.0f) + i35222, this.videoButtonY + AndroidUtilities.dp(24.0f));
            themedPaint = getThemedPaint("paintChatTimeBackground");
            if (this.photosCountLayout != null) {
            }
            if (this.videoInfoLayout != null) {
            }
            this.giveawayMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
            this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i5, this.resourcesProvider);
            if (this.drawInstantView) {
            }
            canvas2.restoreToCount(i6);
        }
    }

    public void drawFactCheck(Canvas canvas, float f) {
        int dp;
        int extraTextX;
        int i;
        int dp2;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || groupedMessagePosition.last) {
            float f2 = this.hasFactCheck ? 1.0f : 0.0f;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateFactCheck) {
                f2 = AndroidUtilities.lerp(1.0f - f2, f2, transitionParams.animateChangeProgress);
            }
            float f3 = f * f2;
            if (f3 <= 0.0f) {
                return;
            }
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp3 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && !groupedMessages.isDocuments) {
                i = (int) this.captionX;
            } else if (this.currentMessageObject.isOutOwner()) {
                i = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                if (this.currentMessageObject.type == 19) {
                    i -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + i) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else {
                if (this.mediaBackground) {
                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                    extraTextX = getExtraTextX();
                } else {
                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                    extraTextX = getExtraTextX();
                }
                i = dp + extraTextX;
            }
            int dp4 = ((int) (i + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i2 = this.factCheckY;
            float f4 = dp4;
            int i3 = (int) (dp3 - f4);
            int i4 = this.factCheckHeight;
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateFactCheckHeight) {
                i4 = AndroidUtilities.lerp(transitionParams3.animateFactCheckHeightFrom, i4, transitionParams3.animateChangeProgress);
            }
            float f5 = (!this.factCheckLarge || (getPrimaryMessageObject() != null && getPrimaryMessageObject().factCheckExpanded)) ? 1.0f : 0.0f;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4.animateFactCheckExpanded) {
                AndroidUtilities.lerp(1.0f - f5, f5, transitionParams4.animateChangeProgress);
            }
            if (this.factCheckLine == null) {
                this.factCheckLine = new ReplyMessageLine(this);
            }
            int factCheck = this.factCheckLine.setFactCheck(this.resourcesProvider);
            canvas.save();
            canvas.translate(f4, i2);
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(0.0f, 0.0f, i3, i4);
            ButtonBounce buttonBounce = this.factCheckBounce;
            float scale = buttonBounce != null ? buttonBounce.getScale(0.01f) : 1.0f;
            canvas.scale(scale, scale, rectF.centerX(), rectF.centerY());
            this.factCheckLine.drawBackground(canvas, rectF, 5.0f, 5.0f, 5.0f, f3, false, false);
            this.factCheckLine.drawLine(canvas, rectF, f3);
            Text text = this.factCheckTitle;
            if (text != null) {
                text.draw(canvas, AndroidUtilities.dp(10.0f), AndroidUtilities.dp(12.0f), factCheck, f3);
                if (this.factCheckWhat != null) {
                    rectF.set((int) (AndroidUtilities.dp(10.0f) + this.factCheckTitle.getCurrentWidth() + AndroidUtilities.dp(4.0f)), AndroidUtilities.dp(4.33f), AndroidUtilities.dp(10.0f) + dp2 + this.factCheckWhat.getCurrentWidth(), AndroidUtilities.dp(21.66f));
                    ButtonBounce buttonBounce2 = this.factCheckWhatBounce;
                    float scale2 = buttonBounce2 != null ? buttonBounce2.getScale(0.1f) : 1.0f;
                    canvas.save();
                    canvas.scale(scale2, scale2, rectF.centerX(), rectF.centerY());
                    canvas.drawRoundRect(rectF, AndroidUtilities.dp(17.0f), AndroidUtilities.dp(17.0f), this.factCheckLine.backgroundPaint);
                    this.factCheckWhat.draw(canvas, dp2 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(12.0f), factCheck, f3);
                    canvas.restore();
                }
            }
            canvas.restore();
        }
    }

    public void drawFactCheckText(Canvas canvas, float f) {
        int dp;
        int extraTextX;
        int i;
        float f2;
        int i2;
        float f3;
        float f4;
        RectF rectF;
        TextPaint textPaint;
        TextPaint textPaint2;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || groupedMessagePosition.last) {
            float f5 = this.hasFactCheck ? 1.0f : 0.0f;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateFactCheck) {
                f5 = AndroidUtilities.lerp(1.0f - f5, f5, transitionParams.animateChangeProgress);
            }
            float f6 = f * f5;
            if (f6 <= 0.0f) {
                return;
            }
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp2 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && !groupedMessages.isDocuments) {
                i = (int) this.captionX;
            } else {
                if (this.currentMessageObject.isOutOwner()) {
                    i = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                    if (this.currentMessageObject.type == 19) {
                        i -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + i) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                    }
                } else {
                    if (this.mediaBackground) {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                        extraTextX = getExtraTextX();
                    } else {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                        extraTextX = getExtraTextX();
                    }
                    i = dp + extraTextX;
                }
            }
            int dp3 = ((int) (i + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i3 = this.factCheckY;
            float f7 = dp3;
            int i4 = (int) (dp2 - f7);
            int i5 = this.factCheckHeight;
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateFactCheckHeight) {
                i5 = AndroidUtilities.lerp(transitionParams3.animateFactCheckHeightFrom, i5, transitionParams3.animateChangeProgress);
            }
            int i6 = i5;
            float f8 = (!this.factCheckLarge || (getPrimaryMessageObject() != null && getPrimaryMessageObject().factCheckExpanded)) ? 1.0f : 0.0f;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4.animateFactCheckExpanded) {
                f8 = AndroidUtilities.lerp(1.0f - f8, f8, transitionParams4.animateChangeProgress);
            }
            float f9 = f8;
            if (this.factCheckLine == null) {
                this.factCheckLine = new ReplyMessageLine(this);
            }
            int factCheck = this.factCheckLine.setFactCheck(this.resourcesProvider);
            canvas.save();
            canvas.translate(f7, i3);
            RectF rectF2 = AndroidUtilities.rectTmp;
            float f10 = i4;
            float f11 = i6;
            rectF2.set(0.0f, 0.0f, f10, f11);
            ButtonBounce buttonBounce = this.factCheckBounce;
            float scale = buttonBounce != null ? buttonBounce.getScale(0.01f) : 1.0f;
            canvas.scale(scale, scale, rectF2.centerX(), rectF2.centerY());
            if (this.factCheckTextLayout != null) {
                if (this.factCheckLarge) {
                    f3 = f11;
                    f4 = f10;
                    rectF = rectF2;
                    f2 = f9;
                    i2 = factCheck;
                    canvas.saveLayerAlpha(0.0f, 0.0f, f10, i6 - 1, NotificationCenter.voipServiceCreated, 31);
                } else {
                    f3 = f11;
                    f4 = f10;
                    rectF = rectF2;
                    f2 = f9;
                    i2 = factCheck;
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) - this.factCheckTextLayoutLeft, AndroidUtilities.dp(22.0f));
                Theme.chat_replyTextPaint.linkColor = i2;
                LinkSpanDrawable.LinkCollector linkCollector = this.factCheckLinks;
                if (linkCollector != null && linkCollector.draw(canvas)) {
                    invalidateOutbounds();
                }
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_replyTextPaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                } else {
                    Theme.chat_replyTextPaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                }
                int alpha = Theme.chat_replyTextPaint.getAlpha();
                Theme.chat_replyTextPaint.setAlpha((int) (alpha * f6));
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null && chatMessageCellDelegate.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                    this.delegate.getTextSelectionHelper().drawFactCheck(this.currentMessageObject.isOutOwner(), this.factCheckTextLayout, canvas);
                }
                this.factCheckTextLayout.draw(canvas);
                canvas.restore();
                Theme.chat_replyTextPaint.setAlpha(alpha);
                rectF.set(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(6.33f), i4 - AndroidUtilities.dp(10.0f), AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(6.33f) + 1);
                Theme.chat_titleLabelTextPaint.setColor(i2);
                Theme.chat_titleLabelTextPaint.setAlpha((int) (textPaint.getAlpha() * 0.5f * f6));
                canvas.drawRect(rectF, Theme.chat_titleLabelTextPaint);
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) - this.factCheckText2LayoutLeft, AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(12.66f));
                Theme.chat_titleLabelTextPaint.setColor(i2);
                Theme.chat_titleLabelTextPaint.setAlpha((int) (textPaint2.getAlpha() * f6));
                this.factCheckText2Layout.draw(canvas);
                canvas.restore();
                if (this.clip == null) {
                    this.clip = new GradientClip();
                }
                if (this.factCheckLarge) {
                    canvas.save();
                    int dp4 = AndroidUtilities.dp((AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight) + AndroidUtilities.dp(12.66f) < i6 ? 20.0f : 24.0f);
                    rectF.set(0.0f, (i6 - AndroidUtilities.dp(6.66f)) - dp4, f4, f3);
                    float f12 = (1.0f - f2) * f6;
                    this.clip.draw(canvas, rectF, 3, f12);
                    float f13 = i6 - dp4;
                    rectF.set(i4 - AndroidUtilities.dp(60.0f), f13, i4 - AndroidUtilities.dp(32.0f), f3);
                    this.clip.draw(canvas, rectF, 2, f12);
                    rectF.set(i4 - AndroidUtilities.dp(32.0f), f13, f4, f3);
                    canvas.drawRect(rectF, this.clip.getPaint(2, f12));
                    canvas.restore();
                    canvas.restore();
                }
            } else {
                f2 = f9;
                i2 = factCheck;
            }
            if (this.factCheckLarge) {
                if (this.factCheckArrow == null) {
                    Drawable mutate = getContext().getResources().getDrawable(R.drawable.arrow_more).mutate();
                    this.factCheckArrow = mutate;
                    this.factCheckArrowColor = i2;
                    mutate.setColorFilter(new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN));
                }
                if (i2 != this.factCheckArrowColor) {
                    Drawable drawable = this.factCheckArrow;
                    this.factCheckArrowColor = i2;
                    drawable.setColorFilter(new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN));
                }
                canvas.save();
                int dp5 = AndroidUtilities.dp(16.0f);
                this.factCheckArrow.setBounds((i4 - dp5) - AndroidUtilities.dp(7.0f), (i6 - dp5) - AndroidUtilities.dp(5.0f), i4 - AndroidUtilities.dp(7.0f), i6 - AndroidUtilities.dp(5.0f));
                canvas.rotate(AndroidUtilities.lerp(0, (int) NotificationCenter.updateBotMenuButton, f2), this.factCheckArrow.getBounds().centerX(), this.factCheckArrow.getBounds().centerY());
                this.factCheckArrow.setAlpha((int) (f6 * 255.0f));
                this.factCheckArrow.draw(canvas);
                canvas.restore();
            }
            canvas.restore();
        }
    }

    private float isSmallImage() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateSmallImage) {
            return this.isSmallImage ? 1.0f : 0.0f;
        }
        boolean z = this.isSmallImage;
        float f = transitionParams.animateChangeProgress;
        return z ? f : 1.0f - f;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean shouldDrawMenuDrawable() {
        MessageObject messageObject;
        return (this.currentMessagesGroup == null || (this.currentPosition.flags & 4) != 0) && !this.hasLinkPreview && ((messageObject = this.currentMessageObject) == null || !(messageObject.isRepostPreview || messageObject.isSponsored()));
    }

    private void drawContact(Canvas canvas) {
        boolean z;
        float f;
        Drawable drawable;
        if (this.contactLine == null) {
            this.contactLine = new ReplyMessageLine(this);
        }
        int check = this.contactLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 4);
        if (this.contactBounce == null) {
            this.contactBounce = new ButtonBounce(this, 2.0f, 2.0f);
        }
        int imageX = (int) (this.photoImage.getImageX() - AndroidUtilities.dp(13.0f));
        int dp = this.layoutHeight - AndroidUtilities.dp(62.0f);
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble.isEmpty && !reactionsLayoutInBubble.isSmall) {
            dp -= reactionsLayoutInBubble.totalHeight;
        }
        if (this.drawCommentButton) {
            dp -= AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 39.3f : 41.0f);
        }
        int i = dp;
        if (this.contactRect == null) {
            this.contactRect = new RectF();
        }
        int backgroundDrawableRight = (getBackgroundDrawableRight() - (AndroidUtilities.dp(10.0f) + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : AndroidUtilities.dp(6.0f)))) - getExtraTextX();
        this.contactRect.set(imageX, this.photoImage.getImageY() - AndroidUtilities.dp(9.0f), backgroundDrawableRight, AndroidUtilities.dp(38.0f) + i);
        float scale = this.contactBounce.getScale(0.0125f);
        boolean z2 = scale != 1.0f;
        if (z2) {
            canvas.save();
            canvas.scale(scale, scale, this.contactRect.centerX(), this.contactRect.centerY());
        }
        if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
            this.selectorDrawableMaskType[0] = 0;
            drawable.setBounds(imageX, (int) (this.photoImage.getImageY() - AndroidUtilities.dp(9.0f)), backgroundDrawableRight, AndroidUtilities.dp(38.0f) + i);
            if (this.selectorDrawableColor != Theme.multAlpha(this.contactLine.getColor(), 0.1f)) {
                Drawable drawable2 = this.selectorDrawable[0];
                int multAlpha = Theme.multAlpha(this.contactLine.getColor(), 0.1f);
                this.selectorDrawableColor = multAlpha;
                Theme.setSelectorDrawableColor(drawable2, multAlpha, true);
            }
            this.selectorDrawable[0].draw(canvas);
        }
        float floor = (float) Math.floor(SharedConfig.bubbleRadius / 3.0f);
        int i2 = (int) floor;
        this.contactLine.drawBackground(canvas, this.contactRect, floor, floor, floor, 1.0f);
        this.contactLine.drawLine(canvas, this.contactRect, 1.0f);
        Theme.chat_contactNamePaint.setColor(check);
        Theme.chat_contactPhonePaint.setColor(getThemedColor(Theme.key_chat_inContactPhoneSelectedText));
        if (this.currentMessageObject.isOutOwner()) {
            Theme.chat_contactPhonePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
        } else {
            Theme.chat_contactPhonePaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
        }
        if (this.titleLayout != null) {
            canvas.save();
            canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(27.0f) + this.namesOffset);
            SpoilerEffect.layoutDrawMaybe(this.titleLayout, canvas);
            canvas.restore();
        }
        if (this.docTitleLayout != null) {
            canvas.save();
            canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(50.0f) + this.namesOffset);
            SpoilerEffect.layoutDrawMaybe(this.docTitleLayout, canvas);
            canvas.restore();
        }
        ArrayList<InstantViewButton> arrayList = this.contactButtons;
        if (arrayList != null && arrayList.size() > 0) {
            Theme.chat_instantViewPaint.setColor(check);
            Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(check, 0.1f));
            int alpha = Theme.chat_instantViewPaint.getAlpha();
            Theme.chat_instantViewPaint.setAlpha((int) (alpha * 0.18f));
            canvas.drawRect(AndroidUtilities.dp(10.0f) + this.contactRect.left, AndroidUtilities.dp(2.0f) + i, this.contactRect.right - AndroidUtilities.dp(7.0f), AndroidUtilities.dp(2.0f) + i + Math.max(1, AndroidUtilities.dp(0.66f)), Theme.chat_instantViewPaint);
            Theme.chat_instantViewPaint.setAlpha(alpha);
            int dp2 = i + AndroidUtilities.dp(2.0f);
            float dp3 = imageX + AndroidUtilities.dp(3.0f);
            ArrayList<InstantViewButton> arrayList2 = this.contactButtons;
            boolean z3 = arrayList2 != null && arrayList2.size() > 1;
            int backgroundColor = this.contactLine.getBackgroundColor();
            int i3 = 0;
            while (i3 < this.contactButtons.size()) {
                InstantViewButton instantViewButton = this.contactButtons.get(i3);
                float min = Math.min(instantViewButton.buttonWidth + dp3, this.contactRect.right);
                instantViewButton.rect.set(dp3, dp2, min, AndroidUtilities.dp(36.0f) + dp2);
                if (z3 && instantViewButton.selectorDrawable == null) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    instantViewButton.selectorDrawable = Theme.createRadSelectorDrawable(backgroundColor, 0, 0, i3 == this.contactButtons.size() - 1 ? i2 : 0, 0);
                    instantViewButton.selectorDrawable.setCallback(this);
                }
                if (instantViewButton.selectorDrawable != null) {
                    instantViewButton.selectorDrawable.setBounds((int) dp3, dp2, (int) min, AndroidUtilities.dp(36.0f) + dp2);
                    instantViewButton.selectorDrawable.draw(canvas);
                }
                if (z2 || instantViewButton.buttonBounce == null) {
                    z = false;
                    f = 1.0f;
                } else {
                    f = instantViewButton.buttonBounce.getScale(0.02f);
                    z = f != 1.0f;
                }
                if (z) {
                    canvas.save();
                    canvas.scale(f, f, instantViewButton.rect.centerX(), instantViewButton.rect.centerY());
                }
                if (instantViewButton.layout != null) {
                    canvas.save();
                    canvas.translate(instantViewButton.textX + dp3, AndroidUtilities.dp(10.5f) + dp2);
                    instantViewButton.layout.draw(canvas);
                    canvas.restore();
                }
                if (z) {
                    canvas.restore();
                }
                dp3 += instantViewButton.buttonWidth;
                i3++;
            }
        }
        if (z2) {
            canvas.restore();
        }
    }

    private void drawBotButtons(Canvas canvas, ArrayList<BotButton> arrayList, int i) {
        int dp;
        Drawable themedDrawable;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (SizeNotifierFrameLayout.drawingBlur) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        float f = 1.0f;
        if (messageObject != null && messageObject.isOutOwner()) {
            dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
        } else {
            dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
        }
        float f2 = 2.0f;
        float dp2 = (this.layoutHeight - AndroidUtilities.dp(2.0f)) + this.transitionParams.deltaBottom;
        float f3 = 0.0f;
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            BotButton botButton = arrayList.get(i2);
            float f4 = botButton.y + botButton.height;
            if (f4 > f3) {
                f3 = f4;
            }
        }
        this.rect.set(0.0f, dp2, getMeasuredWidth(), f3 + dp2);
        if (i != 255) {
            canvas.saveLayerAlpha(this.rect, i, 31);
        } else {
            canvas.save();
        }
        int i3 = 0;
        while (i3 < arrayList.size()) {
            BotButton botButton2 = arrayList.get(i3);
            float dp3 = ((botButton2.y + this.layoutHeight) - AndroidUtilities.dp(f2)) + this.transitionParams.deltaBottom;
            float pressScale = botButton2.getPressScale();
            this.rect.set(botButton2.x + dp, dp3, botButton2.x + dp + botButton2.width, botButton2.height + dp3);
            canvas.save();
            if (pressScale != f) {
                canvas.scale(pressScale, pressScale, this.rect.centerX(), this.rect.centerY());
            }
            applyServiceShaderMatrix();
            Arrays.fill(this.botButtonRadii, AndroidUtilities.dp(Math.min(6.75f, SharedConfig.bubbleRadius)));
            if (botButton2.hasPositionFlag(9)) {
                float[] fArr = this.botButtonRadii;
                float dp4 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                fArr[7] = dp4;
                fArr[6] = dp4;
            }
            if (botButton2.hasPositionFlag(10)) {
                float[] fArr2 = this.botButtonRadii;
                float dp5 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                fArr2[5] = dp5;
                fArr2[4] = dp5;
            }
            this.botButtonPath.rewind();
            this.botButtonPath.addRoundRect(this.rect, this.botButtonRadii, Path.Direction.CW);
            canvas.drawPath(this.botButtonPath, getThemedPaint("paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawPath(this.botButtonPath, Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            boolean z = (((botButton2.button instanceof TLRPC$TL_keyboardButtonCallback) || (botButton2.button instanceof TLRPC$TL_keyboardButtonGame) || (botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) || (botButton2.button instanceof TLRPC$TL_keyboardButtonUrlAuth)) && SendMessagesHelper.getInstance(this.currentAccount).isSendingCallback(this.currentMessageObject, botButton2.button)) || ((botButton2.button instanceof TLRPC$TL_keyboardButtonRequestGeoLocation) && SendMessagesHelper.getInstance(this.currentAccount).isSendingCurrentLocation(this.currentMessageObject, botButton2.button)) || ((botButton2.button instanceof TLRPC$TL_keyboardButtonUrl) && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.isProgressLoading(this, 3) && this.delegate.getProgressLoadingBotButtonUrl(this) == botButton2.button.url);
            canvas.save();
            canvas.clipPath(this.botButtonPath);
            if (z) {
                if (botButton2.loadingDrawable == null) {
                    botButton2.loadingDrawable = new LoadingDrawable();
                    botButton2.loadingDrawable.setRadiiDp(5.5f);
                    botButton2.loadingDrawable.setAppearByGradient(true);
                    botButton2.loadingDrawable.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.25f));
                } else if (botButton2.loadingDrawable.isDisappeared() || botButton2.loadingDrawable.isDisappearing()) {
                    botButton2.loadingDrawable.reset();
                    botButton2.loadingDrawable.resetDisappear();
                }
            } else if (botButton2.loadingDrawable != null && !botButton2.loadingDrawable.isDisappearing() && !botButton2.loadingDrawable.isDisappeared()) {
                botButton2.loadingDrawable.disappear();
            }
            if (botButton2.loadingDrawable != null && (z || botButton2.loadingDrawable.isDisappearing())) {
                this.rect.inset(AndroidUtilities.dpf2(0.625f), AndroidUtilities.dpf2(0.625f));
                botButton2.loadingDrawable.setRadii(this.botButtonRadii);
                botButton2.loadingDrawable.setBounds(this.rect);
                LoadingDrawable loadingDrawable = botButton2.loadingDrawable;
                int i4 = Theme.key_chat_serviceBackgroundSelector;
                loadingDrawable.setColors(Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 2.5f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 3.0f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 10.0f));
                botButton2.loadingDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                botButton2.loadingDrawable.draw(canvas);
                invalidateOutbounds();
            }
            if (botButton2.selectorDrawable != null) {
                int i5 = (int) dp3;
                botButton2.selectorDrawable.setBounds(botButton2.x + dp, i5, botButton2.x + dp + botButton2.width, botButton2.height + i5);
                botButton2.selectorDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                botButton2.selectorDrawable.draw(canvas);
            }
            canvas.restore();
            canvas.save();
            canvas.translate(botButton2.x + dp + AndroidUtilities.dp(5.0f), ((AndroidUtilities.dp(44.0f) - botButton2.title.getLineBottom(botButton2.title.getLineCount() - 1)) / 2) + dp3);
            botButton2.title.draw(canvas);
            canvas.restore();
            if (!(botButton2.button instanceof TLRPC$TL_keyboardButtonWebView)) {
                if (botButton2.button instanceof TLRPC$TL_keyboardButtonUrl) {
                    if (!AndroidUtilities.isWebAppLink(botButton2.button.url)) {
                        if (botButton2.isInviteButton) {
                            themedDrawable = getThemedDrawable("drawable_botInvite");
                        } else {
                            themedDrawable = getThemedDrawable("drawableBotLink");
                        }
                    } else {
                        themedDrawable = getThemedDrawable("drawableBotWebView");
                    }
                    BaseCell.setDrawableBounds(themedDrawable, (((botButton2.x + botButton2.width) - AndroidUtilities.dp(3.0f)) - themedDrawable.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(3.0f));
                    themedDrawable.draw(canvas);
                } else if (!(botButton2.button instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(botButton2.button instanceof TLRPC$TL_keyboardButtonRequestPeer)) {
                    if ((botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) && this.hasInvoicePreview && this.hasInvoicePrice) {
                        BaseCell.setDrawableBounds(Theme.chat_botCardDrawable, (((botButton2.x + botButton2.width) - AndroidUtilities.dp(5.0f)) - Theme.chat_botCardDrawable.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(4.0f));
                        Theme.chat_botCardDrawable.draw(canvas);
                    }
                } else {
                    Drawable themedDrawable2 = getThemedDrawable("drawableBotInline");
                    BaseCell.setDrawableBounds(themedDrawable2, (((botButton2.x + botButton2.width) - AndroidUtilities.dp(3.0f)) - themedDrawable2.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(3.0f));
                    themedDrawable2.draw(canvas);
                }
            } else {
                Drawable themedDrawable3 = getThemedDrawable("drawableBotWebView");
                BaseCell.setDrawableBounds(themedDrawable3, (((botButton2.x + botButton2.width) - AndroidUtilities.dp(3.0f)) - themedDrawable3.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(3.0f));
                themedDrawable3.draw(canvas);
            }
            canvas.restore();
            i3++;
            f = 1.0f;
            f2 = 2.0f;
        }
        canvas.restore();
    }

    private boolean allowDrawPhotoImage() {
        return !this.currentMessageObject.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress != 0.0f || this.blurredPhotoImage.getBitmap() == null;
    }

    public void layoutTextXY(boolean z) {
        int dp;
        int i;
        int dp2;
        int dp3;
        if (this.currentMessageObject.isOutOwner()) {
            this.textX = (z ? (int) (this.backgroundDrawableLeft + this.transitionParams.deltaLeft) : getCurrentBackgroundLeft()) + AndroidUtilities.dp(11.0f) + getExtraTextX();
        } else {
            int currentBackgroundLeft = z ? (int) (this.backgroundDrawableLeft + this.transitionParams.deltaLeft) : getCurrentBackgroundLeft();
            if (this.currentMessageObject.type == 19) {
                dp = 0;
            } else {
                dp = AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f);
            }
            this.textX = currentBackgroundLeft + dp + getExtraTextX();
        }
        if (this.hasGamePreview) {
            this.textX += AndroidUtilities.dp(11.0f);
            int dp4 = AndroidUtilities.dp(14.0f) + this.namesOffset;
            this.textY = dp4;
            StaticLayout staticLayout = this.siteNameLayout;
            if (staticLayout != null) {
                this.textY = dp4 + staticLayout.getLineBottom(staticLayout.getLineCount() - 1);
            }
        } else if (this.hasInvoicePreview) {
            int dp5 = AndroidUtilities.dp(14.0f) + this.namesOffset;
            this.textY = dp5;
            StaticLayout staticLayout2 = this.siteNameLayout;
            if (staticLayout2 != null) {
                this.textY = dp5 + staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1);
            }
        } else if (this.currentMessageObject.type == 19) {
            this.textY = AndroidUtilities.dp(6.0f) + this.namesOffset;
            if (!this.currentMessageObject.isOut()) {
                this.textX = getCurrentBackgroundLeft();
            } else {
                this.textX -= AndroidUtilities.dp(4.0f);
            }
        } else {
            int dp6 = AndroidUtilities.dp(8.0f) + this.namesOffset;
            this.textY = dp6;
            if (this.currentMessageObject.hasCodeAtTop && (i = SharedConfig.bubbleRadius) > 10) {
                this.textY = dp6 + AndroidUtilities.dp(i < 15 ? 1.0f : 2.0f);
            }
            if (this.currentMessageObject.hasCodeAtTop && this.namesOffset > 0) {
                this.textY += AndroidUtilities.dp(5.0f);
            }
        }
        if (this.currentMessageObject.isSponsored()) {
            this.linkPreviewY = this.textY + AndroidUtilities.dp(14.0f);
        } else if (this.linkPreviewAbove) {
            this.linkPreviewY = this.textY + AndroidUtilities.dp(10.0f);
            this.textY += this.linkPreviewHeight + AndroidUtilities.dp(13.0f);
            if (this.drawInstantView && !this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults()) {
                this.textY += AndroidUtilities.dp(44.0f);
            }
        } else {
            this.linkPreviewY = this.textY + this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(10.0f);
        }
        if (this.linkPreviewAbove) {
            dp2 = this.textY + this.currentMessageObject.textHeight(this.transitionParams);
            dp3 = AndroidUtilities.dp(10.0f);
        } else {
            dp2 = this.linkPreviewY + this.linkPreviewHeight + AndroidUtilities.dp(this.drawInstantView ? 46.0f : 0.0f);
            dp3 = AndroidUtilities.dp(this.linkPreviewHeight <= 0 ? -8.0f : 4.0f);
        }
        this.factCheckY = dp2 + dp3;
        this.unmovedTextX = this.textX;
        if (this.currentMessageObject.textXOffset == 0.0f || this.replyNameLayout == null) {
            return;
        }
        int dp7 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
        MessageObject messageObject = this.currentMessageObject;
        int i2 = dp7 - messageObject.textWidth;
        if (!this.hasNewLineForTime) {
            i2 -= this.timeWidth + AndroidUtilities.dp((messageObject.isOutOwner() ? 20 : 0) + 4);
        }
        if (i2 > 0) {
            this.textX += i2 - getExtraTimeX();
        }
    }

    public void drawMessageText(Canvas canvas) {
        float f;
        float f2;
        TransitionParams transitionParams;
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSponsored()) {
            return;
        }
        float f3 = this.textY;
        TransitionParams transitionParams2 = this.transitionParams;
        if (transitionParams2.animateText) {
            float f4 = transitionParams2.animateFromTextY;
            float f5 = transitionParams2.animateChangeProgress;
            f = (f4 * (1.0f - f5)) + (f5 * f3);
        } else {
            f = f3;
        }
        if (transitionParams2.animateChangeProgress != 1.0f && transitionParams2.animateMessageText) {
            canvas.save();
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                Rect bounds = messageDrawable.getBounds();
                if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                } else {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                }
            }
            float f6 = f;
            drawMessageText(this.textX, f6, canvas, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutTextXOffset, false, 1.0f - this.transitionParams.animateChangeProgress, true, false, false);
            float f7 = this.textX;
            MessageObject messageObject2 = this.currentMessageObject;
            drawMessageText(f7, f6, canvas, messageObject2.textLayoutBlocks, messageObject2.textXOffset, true, this.transitionParams.animateChangeProgress, true, false, false);
            canvas.restore();
            return;
        }
        boolean z = transitionParams2.animateLinkAbove;
        if (z && this.currentBackgroundDrawable != null) {
            if (z) {
                float textHeight = (this.linkPreviewAbove ? 1 : -1) * this.currentMessageObject.textHeight(transitionParams2);
                TransitionParams transitionParams3 = this.transitionParams;
                f = f3 + (textHeight * (1.0f - transitionParams3.animateChangeProgress));
                f2 = transitionParams3.animateFromTextY - (((this.linkPreviewAbove ? 1 : -1) * this.currentMessageObject.textHeight(transitionParams3)) * this.transitionParams.animateChangeProgress);
            } else {
                f2 = f;
            }
            canvas.save();
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.currentBackgroundDrawable.getBounds());
            if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                rectF.left += AndroidUtilities.dp(4.0f);
                rectF.right -= AndroidUtilities.dp(10.0f);
            } else {
                rectF.left += AndroidUtilities.dp(4.0f);
                rectF.right -= AndroidUtilities.dp(4.0f);
            }
            float f8 = rectF.left;
            float f9 = this.transitionParams.animateFromTextY;
            canvas.clipRect(f8, f9, rectF.right, this.currentMessageObject.textHeight(transitionParams) + f9 + AndroidUtilities.dp(4.0f));
            float f10 = this.textX;
            MessageObject messageObject3 = this.currentMessageObject;
            drawMessageText(f10, f2, canvas, messageObject3.textLayoutBlocks, messageObject3.textXOffset, false, 1.0f - this.transitionParams.animateChangeProgress, true, false, false);
            canvas.restore();
            canvas.save();
            rectF.set(this.currentBackgroundDrawable.getBounds());
            if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                rectF.left += AndroidUtilities.dp(4.0f);
                rectF.right -= AndroidUtilities.dp(10.0f);
            } else {
                rectF.left += AndroidUtilities.dp(4.0f);
                rectF.right -= AndroidUtilities.dp(4.0f);
            }
            canvas.clipRect(rectF.left, this.textY, rectF.right, i + this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f));
            float f11 = this.textX;
            MessageObject messageObject4 = this.currentMessageObject;
            drawMessageText(f11, f, canvas, messageObject4.textLayoutBlocks, messageObject4.textXOffset, true, 1.0f, true, false, false);
            canvas.restore();
            return;
        }
        float f12 = this.textX;
        MessageObject messageObject5 = this.currentMessageObject;
        drawMessageText(f12, f, canvas, messageObject5.textLayoutBlocks, messageObject5.textXOffset, true, 1.0f, true, false, false);
    }

    public void drawMessageText(Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, boolean z, float f, boolean z2) {
        float f2;
        float f3 = this.textY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f4 = transitionParams.animateFromTextY;
            float f5 = transitionParams.animateChangeProgress;
            f2 = (f4 * (1.0f - f5)) + (f3 * f5);
        } else {
            f2 = f3;
        }
        float f6 = this.textX;
        MessageObject messageObject = this.currentMessageObject;
        drawMessageText(f6, f2, canvas, arrayList, messageObject == null ? 0.0f : messageObject.textXOffset, z, f, false, z2, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:117:0x0246  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x030a  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0317  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x033c  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x03b2  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x03ce  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x03dc  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x03f5  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x0418  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x041b  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x042c  */
    /* JADX WARN: Removed duplicated region for block: B:226:0x068c  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x0787  */
    /* JADX WARN: Removed duplicated region for block: B:277:0x07b8  */
    /* JADX WARN: Removed duplicated region for block: B:280:0x07da  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0857  */
    /* JADX WARN: Removed duplicated region for block: B:308:0x085b  */
    /* JADX WARN: Removed duplicated region for block: B:311:0x0866  */
    /* JADX WARN: Removed duplicated region for block: B:312:0x086b  */
    /* JADX WARN: Removed duplicated region for block: B:316:0x087c A[LOOP:3: B:314:0x0874->B:316:0x087c, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:326:0x08a3  */
    /* JADX WARN: Removed duplicated region for block: B:327:0x08af  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x08cb  */
    /* JADX WARN: Removed duplicated region for block: B:331:0x08ce  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x08f3  */
    /* JADX WARN: Removed duplicated region for block: B:352:0x0944  */
    /* JADX WARN: Removed duplicated region for block: B:355:0x095d  */
    /* JADX WARN: Removed duplicated region for block: B:372:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:373:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0186  */
    @SuppressLint({"Range"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawMessageText(float f, float f2, Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, float f3, boolean z, float f4, boolean z2, boolean z3, boolean z4) {
        int size;
        int i;
        float backgroundDrawableRight;
        int i2;
        int i3;
        int i4;
        boolean z5;
        int i5;
        int i6;
        int i7;
        int i8;
        int i9;
        MessageObject.TextLayoutBlock textLayoutBlock;
        int i10;
        int i11;
        MessageObject.TextLayoutBlock textLayoutBlock2;
        int i12;
        int i13;
        float f5;
        int min;
        float f6;
        int i14;
        Text text;
        int i15;
        ChatMessageCellDelegate chatMessageCellDelegate;
        int i16;
        int i17;
        float f7;
        int i18;
        ButtonBounce buttonBounce;
        Theme.MessageDrawable messageDrawable;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int parentWidth;
        int i19;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        StaticLayout staticLayout;
        float f8 = f;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        float f9 = 0.0f;
        if (f4 == 0.0f) {
            return;
        }
        if (z && !z2) {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        } else {
            size = arrayList.size();
            i = 0;
        }
        boolean isTranslating = MessagesController.getInstance(this.currentAccount).getTranslateController().isTranslating(getMessageObject());
        boolean z6 = !z;
        MessageObject messageObject = this.currentMessageObject;
        if (z6 == (messageObject != null && messageObject.translated)) {
            if (this.translationLoadingFloat == null) {
                this.translationLoadingFloat = new AnimatedFloat(this, 350L, CubicBezierInterpolator.EASE_OUT_QUINT);
            }
            float f10 = this.translationLoadingFloat.set(isTranslating ? 1.0f : 0.0f);
            if (f10 > 0.0f) {
                if (this.translationLoadingDrawable == null) {
                    LoadingDrawable loadingDrawable = new LoadingDrawable();
                    this.translationLoadingDrawable = loadingDrawable;
                    loadingDrawable.setAppearByGradient(true);
                    if (this.translationLoadingPath == null) {
                        LinkPath linkPath = new LinkPath(true);
                        this.translationLoadingPath = linkPath;
                        linkPath.setUseCornerPathImplementation(true);
                    }
                    this.translationLoadingDrawable.usePath(this.translationLoadingPath);
                    this.translationLoadingDrawable.setRadiiDp(5.0f);
                    this.translationLoadingDrawable.reset();
                }
                if (this.translationLoadingDrawableText != arrayList) {
                    this.translationLoadingDrawableText = arrayList;
                    this.translationLoadingPath.reset();
                    int i20 = 0;
                    while (i20 < arrayList.size()) {
                        MessageObject.TextLayoutBlock textLayoutBlock3 = arrayList.get(i20);
                        if (textLayoutBlock3 != null && (staticLayout = textLayoutBlock3.textLayout) != null) {
                            LinkPath linkPath2 = this.translationLoadingPath;
                            if (textLayoutBlock3.isRtl()) {
                                f9 = f3;
                            }
                            linkPath2.setCurrentLayout(staticLayout, 0, f9, textLayoutBlock3.textYOffset(arrayList, this.transitionParams));
                            StaticLayout staticLayout2 = textLayoutBlock3.textLayout;
                            staticLayout2.getSelectionPath(0, staticLayout2.getText().length(), this.translationLoadingPath);
                        }
                        i20++;
                        f9 = 0.0f;
                    }
                    this.translationLoadingPath.closeRects();
                    this.translationLoadingDrawable.updateBounds();
                }
                if (isTranslating && (this.translationLoadingDrawable.isDisappearing() || this.translationLoadingDrawable.isDisappeared())) {
                    this.translationLoadingDrawable.reset();
                    this.translationLoadingDrawable.resetDisappear();
                } else if (!isTranslating && !this.translationLoadingDrawable.isDisappearing() && !this.translationLoadingDrawable.isDisappeared()) {
                    this.translationLoadingDrawable.disappear();
                }
                MessageObject messageObject2 = this.currentMessageObject;
                int themedColor = getThemedColor((messageObject2 == null || !messageObject2.isOutOwner()) ? Theme.key_chat_messageLinkIn : Theme.key_chat_messageLinkOut);
                this.translationLoadingDrawable.setColors(Theme.multAlpha(themedColor, 0.05f), Theme.multAlpha(themedColor, 0.15f), Theme.multAlpha(themedColor, 0.1f), Theme.multAlpha(themedColor, 0.3f));
                canvas.save();
                canvas.translate(f8, f2 + this.transitionYOffsetForDrawables);
                this.translationLoadingDrawable.setAlpha((int) (f4 * 255.0f * f10));
                this.translationLoadingDrawable.draw(canvas);
                canvas.restore();
                invalidate();
                if (i >= 0) {
                    return;
                }
                if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
                    int i21 = groupedMessagePosition.flags;
                    if ((i21 & 1) == 0 || (i21 & 2) == 0) {
                        if (AndroidUtilities.isTablet()) {
                            parentWidth = AndroidUtilities.getMinTabletSide();
                        } else {
                            parentWidth = getParentWidth();
                        }
                        int i22 = 0;
                        for (int i23 = 0; i23 < this.currentMessagesGroup.posArray.size(); i23++) {
                            if (this.currentMessagesGroup.posArray.get(i23).minY != 0) {
                                break;
                            }
                            double d = i22;
                            double ceil = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / 1000.0f) * parentWidth);
                            Double.isNaN(d);
                            i22 = (int) (d + ceil);
                        }
                        if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            i19 = (this.backgroundDrawableLeft + i22) - AndroidUtilities.dp(6.0f);
                        } else {
                            i19 = this.backgroundDrawableLeft + i22;
                        }
                        backgroundDrawableRight = i19 - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                        float dp = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f8;
                        if (f4 != 1.0f) {
                            i2 = 0;
                            i3 = 0;
                            i4 = Integer.MIN_VALUE;
                        } else if (z3 || z4) {
                            int alpha = Theme.chat_msgTextPaint.getAlpha();
                            int alpha2 = Color.alpha(Theme.chat_msgTextPaint.linkColor);
                            Theme.chat_msgTextPaint.setAlpha((int) (alpha * f4));
                            TextPaint textPaint = Theme.chat_msgTextPaint;
                            textPaint.linkColor = ColorUtils.setAlphaComponent(textPaint.linkColor, (int) (alpha2 * f4));
                            i3 = alpha;
                            i2 = alpha2;
                            i4 = Integer.MIN_VALUE;
                            z5 = true;
                            int color = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                            if (this.quoteHighlight == null && this.currentMessagesGroup == null && (messageDrawable = this.currentBackgroundDrawable) != null) {
                                canvas.save();
                                canvas.clipPath(messageDrawable.makePath());
                                Paint paint = this.quoteHighlight.paint;
                                MessageObject messageObject3 = this.currentMessageObject;
                                int themedColor2 = getThemedColor((messageObject3 == null || !messageObject3.isOutOwner() || this.currentMessageObject.preview) ? Theme.key_chat_inReplyLine : Theme.key_chat_outReplyLine);
                                Theme.isCurrentThemeDark();
                                paint.setColor(Theme.multAlpha(themedColor2, 0.2f));
                                i5 = i2;
                                i6 = i3;
                                i7 = i4;
                                this.quoteHighlight.draw(canvas, f, f2, messageDrawable.getBounds(), getHighlightAlpha(true));
                                canvas.restore();
                            } else {
                                i5 = i2;
                                i6 = i3;
                                i7 = i4;
                            }
                            i8 = i;
                            while (i8 <= size && i8 < arrayList.size()) {
                                textLayoutBlock = arrayList.get(i8);
                                int saveCount = canvas.getSaveCount();
                                canvas.save();
                                float dp2 = textLayoutBlock.isRtl() ? 0.0f : f3 - (textLayoutBlock.quote ? AndroidUtilities.dp(10.0f) : 0);
                                canvas.translate(f8 - dp2, f2 + textLayoutBlock.textYOffset(arrayList, this.transitionParams) + this.transitionYOffsetForDrawables + textLayoutBlock.padTop);
                                if (i8 == this.linkBlockNum) {
                                    if (!z3 && this.links.draw(canvas)) {
                                        invalidate();
                                    }
                                    drawProgressLoadingLink(canvas, i8);
                                }
                                int dp3 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) <= 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                                if (!textLayoutBlock.quote) {
                                    if (this.quoteLine == null) {
                                        this.quoteLine = new ReplyMessageLine(this);
                                    }
                                    this.quoteLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 1);
                                    RectF rectF = AndroidUtilities.rectTmp;
                                    float f11 = dp3;
                                    rectF.set(0.0f, (-textLayoutBlock.padTop) + AndroidUtilities.dp(textLayoutBlock.first ? 4.66f : 3.0f), f11, textLayoutBlock.height(this.transitionParams) + AndroidUtilities.dp(4.0f));
                                    rectF.offset(dp2, 0.0f);
                                    if (textLayoutBlock.quoteCollapse && (buttonBounce = textLayoutBlock.collapsedBounce) != null) {
                                        float scale = buttonBounce.getScale(0.01f);
                                        canvas.scale(scale, scale, rectF.centerX(), rectF.centerY());
                                    }
                                    i11 = saveCount;
                                    i12 = i8;
                                    this.quoteLine.drawBackground(canvas, rectF, 5.0f, 5.0f, 5.0f, f4);
                                    this.quoteLine.drawLine(canvas, rectF, f4);
                                    if (this.quoteDrawable == null) {
                                        this.quoteDrawable = new Drawable[2];
                                    }
                                    if (this.quoteDrawableColor == null) {
                                        this.quoteDrawableColor = new int[2];
                                    }
                                    boolean z7 = textLayoutBlock.quoteCollapse;
                                    Drawable[] drawableArr = this.quoteDrawable;
                                    if (drawableArr[z7 ? 1 : 0] == null) {
                                        drawableArr[z7 ? 1 : 0] = getContext().getResources().getDrawable(R.drawable.mini_quote).mutate();
                                    }
                                    if (this.quoteLine.getColor() != this.quoteDrawableColor[z7 ? 1 : 0]) {
                                        Drawable drawable = this.quoteDrawable[z7 ? 1 : 0];
                                        int[] iArr = this.quoteDrawableColor;
                                        int color2 = this.quoteLine.getColor();
                                        iArr[z7 ? 1 : 0] = color2;
                                        drawable.setColorFilter(new PorterDuffColorFilter(color2, PorterDuff.Mode.SRC_IN));
                                    }
                                    this.quoteDrawable[z7 ? 1 : 0].setBounds((int) ((rectF.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)) - this.quoteDrawable[z7 ? 1 : 0].getIntrinsicWidth()), (int) (rectF.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (rectF.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (rectF.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2) + this.quoteDrawable[z7 ? 1 : 0].getIntrinsicHeight()));
                                    int i24 = (int) (f4 * 255.0f);
                                    this.quoteDrawable[z7 ? 1 : 0].setAlpha(i24);
                                    this.quoteDrawable[z7 ? 1 : 0].draw(canvas);
                                    int color3 = this.quoteLine.getColor();
                                    TextPaint textPaint2 = Theme.chat_msgGameTextPaint;
                                    TextPaint textPaint3 = Theme.chat_replyTextPaint;
                                    TextPaint textPaint4 = Theme.chat_quoteTextPaint;
                                    TextPaint textPaint5 = Theme.chat_msgTextPaint;
                                    int color4 = this.currentMessageObject.isOutOwner() ? Theme.getColor(Theme.key_chat_messageLinkOut, this.resourcesProvider) : this.quoteLine.getColor();
                                    textPaint5.linkColor = color4;
                                    textPaint4.linkColor = color4;
                                    textPaint3.linkColor = color4;
                                    textPaint2.linkColor = color4;
                                    if (!textLayoutBlock.quoteCollapse || textLayoutBlock.height <= textLayoutBlock.collapsedHeight) {
                                        textLayoutBlock2 = textLayoutBlock;
                                        i10 = dp3;
                                        i13 = color3;
                                        f5 = 1.0f;
                                    } else {
                                        float collapsed = textLayoutBlock.collapsed(this.transitionParams);
                                        if (this.quoteArrow == null) {
                                            Drawable mutate = getContext().getResources().getDrawable(R.drawable.arrow_more).mutate();
                                            this.quoteArrow = mutate;
                                            int color5 = this.quoteLine.getColor();
                                            this.quoteArrowColor = color5;
                                            mutate.setColorFilter(new PorterDuffColorFilter(color5, PorterDuff.Mode.SRC_IN));
                                        }
                                        if (this.quoteLine.getColor() != this.quoteArrowColor) {
                                            Drawable drawable2 = this.quoteArrow;
                                            int color6 = this.quoteLine.getColor();
                                            this.quoteArrowColor = color6;
                                            drawable2.setColorFilter(new PorterDuffColorFilter(color6, PorterDuff.Mode.SRC_IN));
                                        }
                                        canvas.save();
                                        int dp4 = AndroidUtilities.dp(16.0f);
                                        int i25 = ((int) dp2) + dp3;
                                        this.quoteArrow.setBounds((i25 - dp4) - AndroidUtilities.dp(7.0f), (textLayoutBlock.height(this.transitionParams) - dp4) - AndroidUtilities.dp(2.0f), i25 - AndroidUtilities.dp(7.0f), textLayoutBlock.height(this.transitionParams) - AndroidUtilities.dp(2.0f));
                                        canvas.rotate(AndroidUtilities.lerp((int) NotificationCenter.updateBotMenuButton, 0, collapsed), this.quoteArrow.getBounds().centerX(), this.quoteArrow.getBounds().centerY());
                                        this.quoteArrow.setAlpha(i24);
                                        this.quoteArrow.draw(canvas);
                                        canvas.restore();
                                        i10 = dp3;
                                        textLayoutBlock2 = textLayoutBlock;
                                        canvas.saveLayerAlpha(dp2, 0.0f, f11 + dp2, textLayoutBlock.height(this.transitionParams) - 1, NotificationCenter.voipServiceCreated, 31);
                                        i13 = color3;
                                        f5 = collapsed;
                                    }
                                } else {
                                    i10 = dp3;
                                    i11 = saveCount;
                                    textLayoutBlock2 = textLayoutBlock;
                                    i12 = i8;
                                    TextPaint textPaint6 = Theme.chat_msgGameTextPaint;
                                    TextPaint textPaint7 = Theme.chat_replyTextPaint;
                                    TextPaint textPaint8 = Theme.chat_quoteTextPaint;
                                    TextPaint textPaint9 = Theme.chat_msgTextPaint;
                                    int themedColor3 = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageLinkOut : Theme.key_chat_messageLinkIn);
                                    textPaint9.linkColor = themedColor3;
                                    textPaint8.linkColor = themedColor3;
                                    textPaint7.linkColor = themedColor3;
                                    textPaint6.linkColor = themedColor3;
                                    if (textLayoutBlock2.code) {
                                        if (this.quoteLine == null) {
                                            this.quoteLine = new ReplyMessageLine(this);
                                        }
                                        this.quoteLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 2);
                                        if (this.currentMessageObject.isOutOwner() && (Theme.isCurrentThemeDark() || Theme.isCustomTheme())) {
                                            this.quoteLine.setBackgroundColor(getThemedColor(Theme.key_chat_outCodeBackground));
                                        }
                                        RectF rectF2 = AndroidUtilities.rectTmp;
                                        rectF2.set(0.0f, (-AndroidUtilities.dp(6.0f)) - textLayoutBlock2.languageHeight, this.namesOffset <= 0 ? dp + AndroidUtilities.dp(4.0f) : dp, textLayoutBlock2.height + AndroidUtilities.dp(6.0f));
                                        rectF2.offset(textLayoutBlock2.isRtl() ? f3 : 0.0f, 0.0f);
                                        if (textLayoutBlock2.hasCodeCopyButton) {
                                            rectF2.bottom += AndroidUtilities.dp(38.0f);
                                        }
                                        if (!textLayoutBlock2.first || this.namesOffset > 0 || z4) {
                                            min = Math.min(5, SharedConfig.bubbleRadius);
                                        } else if (this.currentMessageObject.isOutOwner() && this.pinnedTop) {
                                            min = Math.min(6, SharedConfig.bubbleRadius);
                                        } else {
                                            f6 = (SharedConfig.bubbleRadius / 3.0f) * 2.0f;
                                            float f12 = f6;
                                            this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f12, Math.min(5, SharedConfig.bubbleRadius), f4);
                                            i14 = textLayoutBlock2.languageHeight;
                                            if (i14 > 0) {
                                                float f13 = rectF2.bottom;
                                                rectF2.bottom = rectF2.top + i14;
                                                this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f12, 0.0f, (Theme.isCurrentThemeDark() ? 0.6f : 0.8f) * f4);
                                                rectF2.bottom = f13;
                                            }
                                            this.quoteLine.drawLine(canvas, rectF2, f4);
                                            if (textLayoutBlock2.hasCodeCopyButton) {
                                                textLayoutBlock2.drawCopyCodeButton(canvas, rectF2, this.quoteLine.getColor(), this.quoteLine.getBackgroundColor(), f4);
                                            }
                                            canvas.translate(AndroidUtilities.dp(10.0f), 0.0f);
                                            text = textLayoutBlock2.languageLayout;
                                            if (text != null) {
                                                text.ellipsize((int) (dp - AndroidUtilities.dp(12.0f))).draw(canvas, 0.0f, (-AndroidUtilities.dp(6.0f)) - (textLayoutBlock2.languageHeight / 2.0f), this.quoteLine.color3, f4);
                                                i13 = color;
                                                f5 = 1.0f;
                                            }
                                        }
                                        f6 = min;
                                        float f122 = f6;
                                        this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f122, Math.min(5, SharedConfig.bubbleRadius), f4);
                                        i14 = textLayoutBlock2.languageHeight;
                                        if (i14 > 0) {
                                        }
                                        this.quoteLine.drawLine(canvas, rectF2, f4);
                                        if (textLayoutBlock2.hasCodeCopyButton) {
                                        }
                                        canvas.translate(AndroidUtilities.dp(10.0f), 0.0f);
                                        text = textLayoutBlock2.languageLayout;
                                        if (text != null) {
                                        }
                                    }
                                    i13 = color;
                                    f5 = 1.0f;
                                }
                                i15 = i12;
                                if (i15 == this.linkSelectionBlockNum && this.quoteHighlight == null && !this.urlPathSelection.isEmpty() && !z3) {
                                    MessageObject messageObject4 = this.currentMessageObject;
                                    Paint paint2 = (messageObject4 == null && messageObject4.isOutOwner()) ? Theme.chat_outUrlPaint : Theme.chat_urlPaint;
                                    MessageObject messageObject5 = this.currentMessageObject;
                                    paint2.setColor(getThemedColor((messageObject5 == null && messageObject5.isOutOwner() && !this.currentMessageObject.preview) ? Theme.key_chat_outReplyLine : Theme.key_chat_inReplyLine));
                                    int alpha3 = (int) (paint2.getAlpha() * (!Theme.isCurrentThemeDark() ? 0.2f : 0.3f));
                                    paint2.setAlpha((int) (alpha3 * (!this.highlightedQuote ? getHighlightAlpha() : 1.0f)));
                                    for (i18 = 0; i18 < this.urlPathSelection.size(); i18++) {
                                        canvas.drawPath(this.urlPathSelection.get(i18), paint2);
                                    }
                                    paint2.setAlpha(alpha3);
                                }
                                chatMessageCellDelegate = this.delegate;
                                if (chatMessageCellDelegate != null && chatMessageCellDelegate.getTextSelectionHelper() != null && this.transitionParams.animateChangeProgress == 1.0f && !z3) {
                                    if (!z4) {
                                        this.delegate.getTextSelectionHelper().drawCaption(this.currentMessageObject, textLayoutBlock2, canvas);
                                    } else {
                                        this.delegate.getTextSelectionHelper().draw(this.currentMessageObject, textLayoutBlock2, canvas);
                                    }
                                }
                                try {
                                    Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                                    i16 = i15;
                                    i17 = size;
                                    f7 = f5;
                                } catch (Exception e) {
                                    e = e;
                                    i16 = i15;
                                    i17 = size;
                                    f7 = f5;
                                }
                                try {
                                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i13, 0, textLayoutBlock2.spoilersPatchedTextLayout, textLayoutBlock2.textLayout, textLayoutBlock2.spoilers, canvas, this.currentPosition == null);
                                    Emoji.emojiDrawingYOffset = 0.0f;
                                } catch (Exception e2) {
                                    e = e2;
                                    FileLog.e(e);
                                    if (!textLayoutBlock2.quoteCollapse) {
                                    }
                                    canvas.restoreToCount(i11);
                                    i8 = i16 + 1;
                                    f8 = f;
                                    size = i17;
                                }
                                if (!textLayoutBlock2.quoteCollapse && textLayoutBlock2.height > textLayoutBlock2.collapsedHeight) {
                                    if (this.clip == null) {
                                        this.clip = new GradientClip();
                                    }
                                    canvas.save();
                                    RectF rectF3 = AndroidUtilities.rectTmp;
                                    rectF3.set(0.0f, textLayoutBlock2.height(this.transitionParams) - AndroidUtilities.dp(24.0f), i10, textLayoutBlock2.height(this.transitionParams));
                                    this.clip.draw(canvas, rectF3, 3, f7);
                                    canvas.restore();
                                }
                                canvas.restoreToCount(i11);
                                i8 = i16 + 1;
                                f8 = f;
                                size = i17;
                            }
                            if (z5) {
                                Theme.chat_msgTextPaint.setAlpha(i6);
                                TextPaint textPaint10 = Theme.chat_msgTextPaint;
                                textPaint10.linkColor = ColorUtils.setAlphaComponent(textPaint10.linkColor, i5);
                            }
                            i9 = i7;
                            if (i9 != Integer.MIN_VALUE) {
                                canvas.restoreToCount(i9);
                                return;
                            }
                            return;
                        } else {
                            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                            if (messageDrawable2 != null) {
                                int i26 = messageDrawable2.getBounds().top;
                                int i27 = this.currentBackgroundDrawable.getBounds().bottom;
                                if (z4) {
                                    this.rect.set(getCurrentBackgroundLeft() - AndroidUtilities.dp(10.0f), i26, this.currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(10.0f), i27);
                                } else {
                                    if (getY() < 0.0f) {
                                        i26 = (int) (-getY());
                                    }
                                    float y = getY() + getMeasuredHeight();
                                    float f14 = this.parentHeight;
                                    if (y > f14) {
                                        i27 = (int) (f14 - getY());
                                    }
                                    this.rect.set(getCurrentBackgroundLeft(), i26, this.currentBackgroundDrawable.getBounds().right, i27);
                                }
                            } else {
                                this.rect.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                            }
                            i4 = canvas.saveLayerAlpha(this.rect, (int) (f4 * 255.0f), 31);
                            i2 = 0;
                            i3 = 0;
                        }
                        z5 = false;
                        int color7 = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                        if (this.quoteHighlight == null) {
                        }
                        i5 = i2;
                        i6 = i3;
                        i7 = i4;
                        i8 = i;
                        while (i8 <= size) {
                            textLayoutBlock = arrayList.get(i8);
                            int saveCount2 = canvas.getSaveCount();
                            canvas.save();
                            if (textLayoutBlock.isRtl()) {
                            }
                            canvas.translate(f8 - dp2, f2 + textLayoutBlock.textYOffset(arrayList, this.transitionParams) + this.transitionYOffsetForDrawables + textLayoutBlock.padTop);
                            if (i8 == this.linkBlockNum) {
                            }
                            int dp32 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) <= 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                            if (!textLayoutBlock.quote) {
                            }
                            i15 = i12;
                            if (i15 == this.linkSelectionBlockNum) {
                                MessageObject messageObject42 = this.currentMessageObject;
                                if (messageObject42 == null) {
                                }
                                MessageObject messageObject52 = this.currentMessageObject;
                                paint2.setColor(getThemedColor((messageObject52 == null && messageObject52.isOutOwner() && !this.currentMessageObject.preview) ? Theme.key_chat_outReplyLine : Theme.key_chat_inReplyLine));
                                int alpha32 = (int) (paint2.getAlpha() * (!Theme.isCurrentThemeDark() ? 0.2f : 0.3f));
                                paint2.setAlpha((int) (alpha32 * (!this.highlightedQuote ? getHighlightAlpha() : 1.0f)));
                                while (i18 < this.urlPathSelection.size()) {
                                }
                                paint2.setAlpha(alpha32);
                            }
                            chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate != null) {
                                if (!z4) {
                                }
                            }
                            Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                            i16 = i15;
                            i17 = size;
                            f7 = f5;
                            SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i13, 0, textLayoutBlock2.spoilersPatchedTextLayout, textLayoutBlock2.textLayout, textLayoutBlock2.spoilers, canvas, this.currentPosition == null);
                            Emoji.emojiDrawingYOffset = 0.0f;
                            if (!textLayoutBlock2.quoteCollapse) {
                            }
                            canvas.restoreToCount(i11);
                            i8 = i16 + 1;
                            f8 = f;
                            size = i17;
                        }
                        if (z5) {
                        }
                        i9 = i7;
                        if (i9 != Integer.MIN_VALUE) {
                        }
                    }
                }
                backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
                float dp5 = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f8;
                if (f4 != 1.0f) {
                }
                z5 = false;
                int color72 = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                if (this.quoteHighlight == null) {
                }
                i5 = i2;
                i6 = i3;
                i7 = i4;
                i8 = i;
                while (i8 <= size) {
                }
                if (z5) {
                }
                i9 = i7;
                if (i9 != Integer.MIN_VALUE) {
                }
            }
        }
        if (i >= 0) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0021  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0038  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0043  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x004a  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0050  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0061 A[LOOP:1: B:35:0x0061->B:37:0x0064, LOOP_START, PHI: r3 r5 
      PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:34:0x005f, B:37:0x0064] A[DONT_GENERATE, DONT_INLINE]
      PHI: (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:34:0x005f, B:37:0x0064] A[DONT_GENERATE, DONT_INLINE]] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public AnimatedEmojiSpan[] getAnimatedEmojiSpans() {
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        MessageObject messageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr2;
        int i;
        MessageObject messageObject2 = this.currentMessageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr3 = null;
        int i2 = 0;
        if (messageObject2 != null) {
            CharSequence charSequence = messageObject2.messageText;
            if (charSequence instanceof Spanned) {
                animatedEmojiSpanArr = (AnimatedEmojiSpan[]) ((Spanned) charSequence).getSpans(0, charSequence.length(), AnimatedEmojiSpan.class);
                messageObject = this.currentMessageObject;
                if (messageObject != null) {
                    CharSequence charSequence2 = messageObject.caption;
                    if (charSequence2 instanceof Spanned) {
                        animatedEmojiSpanArr2 = (AnimatedEmojiSpan[]) ((Spanned) charSequence2).getSpans(0, charSequence2.length(), AnimatedEmojiSpan.class);
                        if ((animatedEmojiSpanArr != null && animatedEmojiSpanArr.length != 0) || (animatedEmojiSpanArr2 != null && animatedEmojiSpanArr2.length != 0)) {
                            animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                            if (animatedEmojiSpanArr == null) {
                                int i3 = 0;
                                i = 0;
                                while (i3 < animatedEmojiSpanArr.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr[i3];
                                    i3++;
                                    i++;
                                }
                            } else {
                                i = 0;
                            }
                            if (animatedEmojiSpanArr2 != null) {
                                while (i2 < animatedEmojiSpanArr2.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr2[i2];
                                    i2++;
                                    i++;
                                }
                            }
                        }
                        return animatedEmojiSpanArr3;
                    }
                }
                animatedEmojiSpanArr2 = null;
                if (animatedEmojiSpanArr != null) {
                    animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                    if (animatedEmojiSpanArr == null) {
                    }
                    if (animatedEmojiSpanArr2 != null) {
                    }
                    return animatedEmojiSpanArr3;
                }
                animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                if (animatedEmojiSpanArr == null) {
                }
                if (animatedEmojiSpanArr2 != null) {
                }
                return animatedEmojiSpanArr3;
            }
        }
        animatedEmojiSpanArr = null;
        messageObject = this.currentMessageObject;
        if (messageObject != null) {
        }
        animatedEmojiSpanArr2 = null;
        if (animatedEmojiSpanArr != null) {
        }
        animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
        if (animatedEmojiSpanArr == null) {
        }
        if (animatedEmojiSpanArr2 != null) {
        }
        return animatedEmojiSpanArr3;
    }

    public void updateCaptionLayout() {
        float imageX;
        float imageY;
        float imageHeight;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        float f;
        int i;
        MessageObject.TextLayoutBlocks textLayoutBlocks2;
        int i2;
        MessageObject messageObject = this.currentMessageObject;
        int i3 = messageObject.type;
        boolean z = true;
        if (i3 == 1 || i3 == 20 || this.documentAttachType == 4 || i3 == 8 || i3 == 23) {
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.imageChangeBoundsTransition) {
                imageX = transitionParams.animateToImageX;
                imageY = transitionParams.animateToImageY;
                imageHeight = transitionParams.animateToImageH;
            } else {
                imageX = this.photoImage.getImageX();
                imageY = this.photoImage.getImageY();
                imageHeight = this.photoImage.getImageHeight();
            }
            this.captionX = imageX + AndroidUtilities.dp(5.0f) + this.captionOffsetX;
            float dp = imageY + imageHeight + AndroidUtilities.dp(6.0f);
            this.captionY = imageY + AndroidUtilities.lerp(imageHeight + AndroidUtilities.dp(6.0f), (this.captionLayout == null ? 0 : -textLayoutBlocks.textHeight()) - AndroidUtilities.dp(4.0f), mediaAbove());
            f = dp;
            z = false;
        } else {
            float f2 = 43.0f;
            float f3 = 0.0f;
            if (this.hasOldCaptionPreview) {
                this.captionX = this.backgroundDrawableLeft + AndroidUtilities.dp(messageObject.isOutOwner() ? 11.0f : 17.0f) + this.captionOffsetX;
                int dp2 = (((this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f);
                if (!this.drawCommentButton || this.drawSideButton == 3) {
                    f2 = 0.0f;
                } else if (shouldDrawTimeOnMedia()) {
                    f2 = 41.3f;
                }
                f = dp2 - AndroidUtilities.dp(f2);
                this.captionY = AndroidUtilities.lerp(f, AndroidUtilities.dp(9.0f) + this.namesOffset, mediaAbove());
            } else {
                if (this.isRoundVideo) {
                    this.captionX = getBackgroundDrawableLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() ? 0 : 6) + 11);
                } else {
                    int i4 = this.backgroundDrawableLeft;
                    if (!messageObject.isOutOwner() && !this.mediaBackground && !this.drawPinnedBottom) {
                        r9 = 17.0f;
                    }
                    this.captionX = i4 + AndroidUtilities.dp(r9) + this.captionOffsetX;
                }
                int dp3 = (this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                if (!this.drawCommentButton || this.drawSideButton == 3) {
                    f2 = 0.0f;
                } else if (shouldDrawTimeOnMedia()) {
                    f2 = 41.3f;
                }
                int dp4 = dp3 - AndroidUtilities.dp(f2);
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                    i2 = 0;
                } else {
                    if (this.currentMessageObject.type == 9 && this.currentPosition == null) {
                        f3 = 10.0f;
                    }
                    i2 = AndroidUtilities.dp(f3) + this.reactionsLayoutInBubble.totalHeight;
                }
                f = dp4 - i2;
                this.captionY = AndroidUtilities.lerp(f, AndroidUtilities.dp(9.0f) + this.namesOffset, mediaAbove());
            }
        }
        this.captionX += getExtraTextX();
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null || (i = messageObject2.type) == 0 || i == 24 || messageObject2.isGiveawayOrGiveawayResults() || this.currentMessageObject.isSponsored()) {
            return;
        }
        if (z && this.hasFactCheck) {
            this.captionY -= (this.factCheckHeight + AndroidUtilities.dp(16.0f)) * (1.0f - mediaAbove());
        }
        this.factCheckY = (int) (((f - (z ? this.factCheckHeight + AndroidUtilities.dp(14.0f) : 0)) + AndroidUtilities.lerp(this.captionLayout != null ? textLayoutBlocks2.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f) : 0, AndroidUtilities.dp(6.0f), mediaAbove())) - this.transitionParams.deltaTop);
    }

    private float mediaAbove() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateMediaAbove) {
            return this.captionAbove ? 1.0f : 0.0f;
        }
        boolean z = this.captionAbove;
        return AndroidUtilities.lerp(z ? 0.0f : 1.0f, z ? 1.0f : 0.0f, transitionParams.animateChangeProgress);
    }

    public int captionFlag() {
        return this.captionAbove ? 4 : 8;
    }

    private boolean textIsSelectionMode() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        return getCurrentMessagesGroup() == null && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.getTextSelectionHelper() != null && this.delegate.getTextSelectionHelper().isSelected(this.currentMessageObject);
    }

    public float getViewTop() {
        return this.viewTop;
    }

    public int getBackgroundHeight() {
        return this.backgroundHeight;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMiniIconForCurrentState() {
        int i = this.miniButtonState;
        if (i < 0) {
            return 4;
        }
        return i == 0 ? 2 : 3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getIconForCurrentState() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.hasExtendedMedia()) {
            return 4;
        }
        if (this.documentAttachType == 7 && this.currentMessageObject.isVoiceTranscriptionOpen() && this.canStreamVideo) {
            int i = this.buttonState;
            return (i == 1 || i == 4) ? 1 : 0;
        }
        int i2 = this.documentAttachType;
        if (i2 == 3 || i2 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColorKeys(Theme.key_chat_outLoader, Theme.key_chat_outLoaderSelected, Theme.key_chat_outMediaIcon, Theme.key_chat_outMediaIconSelected);
            } else {
                ReplyMessageLine replyMessageLine = this.linkLine;
                if (replyMessageLine != null && this.hasLinkPreview) {
                    this.radialProgress.setColors(replyMessageLine.getColor(), this.linkLine.getColor(), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                } else {
                    this.radialProgress.setColorKeys(Theme.key_chat_inLoader, Theme.key_chat_inLoaderSelected, Theme.key_chat_inMediaIcon, Theme.key_chat_inMediaIconSelected);
                }
            }
            int i3 = this.buttonState;
            if (i3 == 1) {
                return 1;
            }
            if (i3 == 2) {
                return 2;
            }
            return i3 == 4 ? 3 : 0;
        }
        if (i2 == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColorKeys(Theme.key_chat_outLoader, Theme.key_chat_outLoaderSelected, Theme.key_chat_outMediaIcon, Theme.key_chat_outMediaIconSelected);
            } else {
                ReplyMessageLine replyMessageLine2 = this.linkLine;
                if (replyMessageLine2 != null && this.hasLinkPreview) {
                    this.radialProgress.setColors(replyMessageLine2.getColor(), this.linkLine.getColor(), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                } else {
                    this.radialProgress.setColorKeys(Theme.key_chat_inLoader, Theme.key_chat_inLoaderSelected, Theme.key_chat_inMediaIcon, Theme.key_chat_inMediaIconSelected);
                }
            }
            int i4 = this.buttonState;
            if (i4 == -1) {
                return 5;
            }
            if (i4 == 0) {
                return 2;
            }
            if (i4 == 1) {
                return 3;
            }
        } else {
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i5 = Theme.key_chat_mediaLoaderPhoto;
            int i6 = Theme.key_chat_mediaLoaderPhotoSelected;
            int i7 = Theme.key_chat_mediaLoaderPhotoIcon;
            int i8 = Theme.key_chat_mediaLoaderPhotoIconSelected;
            radialProgress2.setColorKeys(i5, i6, i7, i8);
            this.videoRadialProgress.setColorKeys(i5, i6, i7, i8);
            int i9 = this.buttonState;
            if (i9 >= 0 && i9 < 4) {
                if (i9 == 0) {
                    return 2;
                }
                if (i9 == 1) {
                    return 3;
                }
                return (i9 != 2 && this.autoPlayingMedia) ? 4 : 0;
            } else if (i9 == -1) {
                if (this.documentAttachType == 1) {
                    if (this.drawPhotoImage && (this.currentPhotoObject != null || this.currentPhotoObjectThumb != null)) {
                        if (this.photoImage.hasBitmapImage()) {
                            return 4;
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2.mediaExists || messageObject2.attachPathExists) {
                            return 4;
                        }
                    }
                    return 5;
                } else if (this.currentMessageObject.needDrawBluredPreview()) {
                    return 7;
                } else {
                    if (this.hasEmbed) {
                        return 0;
                    }
                }
            }
        }
        MessageObject messageObject3 = this.currentMessageObject;
        return (messageObject3 != null && this.isRoundVideo && messageObject3.isVoiceTranscriptionOpen()) ? 0 : 4;
    }

    public int getMaxNameWidth() {
        int min;
        int dp;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i;
        int parentWidth;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i2 = this.documentAttachType;
        if (i2 == 6 || i2 == 8 || (i = (messageObject2 = this.currentMessageObject).type) == 5) {
            if (AndroidUtilities.isTablet()) {
                min = AndroidUtilities.getMinTabletSide();
                dp = AndroidUtilities.dp(needDrawAvatar() ? 42.0f : 0.0f);
            } else {
                min = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                dp = AndroidUtilities.dp(needDrawAvatar() ? 42.0f : 0.0f);
            }
            int i3 = min - dp;
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3 != null && messageObject3.isSaved && messageObject3.isOutOwner() && checkNeedDrawShareButton(this.currentMessageObject)) {
                i3 -= AndroidUtilities.dp(25.0f);
            }
            if (this.isPlayingRound && ((messageObject = this.currentMessageObject) == null || !messageObject.isVoiceTranscriptionOpen())) {
                return (i3 - (this.backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize))) - AndroidUtilities.dp(57.0f);
            }
            return (i3 - this.backgroundWidth) - AndroidUtilities.dp(57.0f);
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || groupedMessages.isDocuments) {
            if (i == 19) {
                return Math.max(messageObject2.textWidth, (int) (((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52.0f)) - (this.isAvatarVisible ? AndroidUtilities.dp(48.0f) : 0)) * 0.5f));
            }
            int i4 = this.backgroundWidth;
            if (messageObject2.isSaved && messageObject2.isOutOwner() && checkNeedDrawShareButton(this.currentMessageObject)) {
                i4 -= AndroidUtilities.dp(25.0f);
            }
            return i4 - AndroidUtilities.dp(this.mediaBackground ? 22.0f : 31.0f);
        }
        if (AndroidUtilities.isTablet()) {
            parentWidth = AndroidUtilities.getMinTabletSide();
        } else {
            parentWidth = getParentWidth();
        }
        int i5 = 0;
        for (int i6 = 0; i6 < this.currentMessagesGroup.posArray.size(); i6++) {
            if (this.currentMessagesGroup.posArray.get(i6).minY != 0) {
                break;
            }
            double d = i5;
            double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * parentWidth);
            Double.isNaN(d);
            i5 = (int) (d + ceil);
        }
        return i5 - AndroidUtilities.dp((needDrawAvatar() ? 48 : 0) + 31);
    }

    /* JADX WARN: Code restructure failed: missing block: B:96:0x013b, code lost:
        if ((r2 & 2) != 0) goto L58;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateButtonState(boolean z, boolean z2, boolean z3) {
        String fileName;
        boolean z4;
        int i;
        int i2;
        int i3;
        boolean z5;
        boolean z6;
        boolean isLoadingVideo;
        String key;
        int i4;
        boolean z7;
        int i5;
        boolean z8;
        int i6;
        int i7;
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null) {
            return;
        }
        if (messageObject2.type == 23 && messageObject2.isVideoStory()) {
            this.buttonState = 2;
            getIconForCurrentState();
            return;
        }
        boolean z9 = (!z2 || (!PhotoViewer.isShowingImage(this.currentMessageObject) && this.attachedToWindow)) ? z2 : false;
        this.drawRadialCheckBackground = false;
        MessageObject messageObject3 = this.currentMessageObject;
        int i8 = messageObject3.type;
        if (i8 == 1) {
            TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
            if (tLRPC$PhotoSize == null) {
                this.radialProgress.setIcon(4, z, z9);
                return;
            } else {
                fileName = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                z4 = this.currentMessageObject.mediaExists;
            }
        } else if (i8 == 8 || (i2 = this.documentAttachType) == 7 || i2 == 4 || i2 == 8 || i8 == 9 || i2 == 3 || i2 == 5) {
            if (messageObject3.useCustomPhoto) {
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), z, z9);
                return;
            } else if (messageObject3.attachPathExists && !TextUtils.isEmpty(messageObject3.messageOwner.attachPath)) {
                fileName = this.currentMessageObject.messageOwner.attachPath;
                z4 = true;
            } else {
                if (!this.currentMessageObject.isSendError() || (i = this.documentAttachType) == 3 || i == 5) {
                    fileName = this.currentMessageObject.getFileName();
                    z4 = this.currentMessageObject.mediaExists;
                }
                fileName = null;
                z4 = false;
            }
        } else if (i2 != 0) {
            fileName = FileLoader.getAttachFileName(this.documentAttach);
            z4 = this.currentMessageObject.mediaExists;
        } else {
            TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
            if (tLRPC$PhotoSize2 != null) {
                fileName = FileLoader.getAttachFileName(tLRPC$PhotoSize2);
                z4 = this.currentMessageObject.mediaExists;
            }
            fileName = null;
            z4 = false;
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        boolean canDownloadMedia = (tLRPC$Document == null || tLRPC$Document.dc_id != Integer.MIN_VALUE) ? DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject) : false;
        if (this.currentMessageObject.isHiddenSensitive()) {
            canDownloadMedia = false;
        }
        this.canStreamVideo = (this.currentMessageObject.isSent() || this.currentMessageObject.isForwarded()) && ((i3 = this.documentAttachType) == 4 || i3 == 7 || (i3 == 2 && canDownloadMedia)) && this.currentMessageObject.canStreamVideo() && !this.currentMessageObject.needDrawBluredPreview();
        if (SharedConfig.streamMedia) {
            z5 = z9;
            if (((int) this.currentMessageObject.getDialogId()) != 0 && !this.currentMessageObject.isSecretMedia()) {
                if (this.documentAttachType != 5) {
                    if (this.canStreamVideo && (groupedMessagePosition = this.currentPosition) != null) {
                        int i9 = groupedMessagePosition.flags;
                        if ((i9 & 1) != 0) {
                        }
                    }
                }
                this.hasMiniProgress = z4 ? 1 : 2;
                z4 = true;
            }
        } else {
            z5 = z9;
        }
        if (this.currentMessageObject.isSendError() || (TextUtils.isEmpty(fileName) && (this.currentMessageObject.isAnyKindOfSticker() || (!this.currentMessageObject.isSending() && !this.currentMessageObject.isEditing())))) {
            this.radialProgress.setIcon(4, z, false);
            this.radialProgress.setMiniIcon(4, z, false);
            this.videoRadialProgress.setIcon(4, z, false);
            this.videoRadialProgress.setMiniIcon(4, z, false);
            return;
        }
        HashMap<String, String> hashMap = this.currentMessageObject.messageOwner.params;
        boolean z10 = hashMap != null && hashMap.containsKey("query_id");
        int i10 = this.documentAttachType;
        if (i10 == 3 || i10 == 5 || (i10 == 7 && (messageObject = this.currentMessageObject) != null && messageObject.isVoiceTranscriptionOpen() && this.canStreamVideo)) {
            z6 = z5;
            if ((this.currentMessageObject.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) || (this.currentMessageObject.isSendError() && z10)) {
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController downloadController = DownloadController.getInstance(this.currentAccount);
                    MessageObject messageObject4 = this.currentMessageObject;
                    downloadController.addLoadingFileObserver(messageObject4.messageOwner.attachPath, messageObject4, this);
                    this.wasSending = true;
                    this.buttonState = 4;
                    boolean isSendingMessage = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                    if (this.currentPosition != null && isSendingMessage && this.buttonState == 4) {
                        this.drawRadialCheckBackground = true;
                        getIconForCurrentState();
                        this.radialProgress.setIcon(6, z, z6);
                    } else {
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                    }
                    this.radialProgress.setMiniIcon(4, z, z6);
                    if (!z10) {
                        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                        if (fileProgressSizes == null && isSendingMessage) {
                            r15 = 1.0f;
                        } else if (fileProgressSizes != null) {
                            r15 = DownloadController.getProgress(fileProgressSizes);
                        }
                        this.radialProgress.setProgress(r15, false);
                    } else {
                        this.radialProgress.setProgress(0.0f, false);
                    }
                } else {
                    this.buttonState = -1;
                    getIconForCurrentState();
                    this.radialProgress.setIcon(12, z, false);
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(4, z, false);
                }
            } else if (this.hasMiniProgress != 0) {
                this.radialProgress.setMiniProgressBackgroundColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLoader : Theme.key_chat_inLoader));
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.buttonState = 0;
                } else {
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                if (this.hasMiniProgress == 1) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    this.miniButtonState = -1;
                } else {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(fileName, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(fileName)) {
                        createLoadingProgressLayout(this.documentAttach);
                        this.miniButtonState = 0;
                    } else {
                        this.miniButtonState = 1;
                        long[] fileProgressSizes2 = ImageLoader.getInstance().getFileProgressSizes(fileName);
                        if (fileProgressSizes2 != null) {
                            this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes2), z6);
                            createLoadingProgressLayout(fileProgressSizes2[0], fileProgressSizes2[1]);
                        } else {
                            this.radialProgress.setProgress(0.0f, z6);
                            createLoadingProgressLayout(0L, this.currentMessageObject.getSize());
                        }
                    }
                }
                this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z6);
            } else if (z4) {
                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.buttonState = 0;
                } else {
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
            } else {
                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(fileName, this.currentMessageObject, this);
                if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(fileName)) {
                    this.buttonState = 2;
                } else {
                    this.buttonState = 4;
                    long[] fileProgressSizes3 = ImageLoader.getInstance().getFileProgressSizes(fileName);
                    if (fileProgressSizes3 != null) {
                        this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes3), z6);
                        createLoadingProgressLayout(fileProgressSizes3[0], fileProgressSizes3[1]);
                    } else {
                        createLoadingProgressLayout(this.documentAttach);
                        this.radialProgress.setProgress(0.0f, z6);
                    }
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
            }
            updatePlayingMessageProgress();
        } else {
            MessageObject messageObject5 = this.currentMessageObject;
            if (messageObject5.type == 0 && (i6 = this.documentAttachType) != 1 && i6 != 10 && i6 != 2 && i6 != 4 && i6 != 8 && i6 != 9) {
                if (this.currentPhotoObject == null || !this.drawImageButton) {
                    return;
                }
                if (!z4) {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(fileName, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(fileName)) {
                        MessageObject messageObject6 = this.currentMessageObject;
                        if (!messageObject6.loadingCancelled && canDownloadMedia && ((i7 = this.documentAttachType) == 0 || (i7 == 2 && MessageObject.isGifDocument(this.documentAttach, messageObject6.hasValidGroupId())))) {
                            this.buttonState = 1;
                        } else {
                            this.buttonState = 0;
                        }
                    } else {
                        this.buttonState = 1;
                        long[] fileProgressSizes4 = ImageLoader.getInstance().getFileProgressSizes(fileName);
                        r15 = fileProgressSizes4 != null ? DownloadController.getProgress(fileProgressSizes4) : 0.0f;
                        if (fileProgressSizes4 != null) {
                            long j = fileProgressSizes4[0];
                            long j2 = fileProgressSizes4[1];
                            if (j == j2) {
                                createLoadingProgressLayout(j, j2);
                            }
                        }
                        if (this.currentMessageObject.getDocument() != null) {
                            MessageObject messageObject7 = this.currentMessageObject;
                            createLoadingProgressLayout(messageObject7.loadedFileSize, messageObject7.getSize());
                        }
                    }
                    this.radialProgress.setProgress(r15, false);
                } else {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    if (this.documentAttachType == 2 && !this.photoImage.isAllowStartAnimation()) {
                        this.buttonState = 2;
                    } else {
                        this.buttonState = -1;
                    }
                }
                z6 = z5;
                this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                invalidate();
            } else {
                z6 = z5;
                if (messageObject5.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) {
                    if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                        DownloadController downloadController2 = DownloadController.getInstance(this.currentAccount);
                        MessageObject messageObject8 = this.currentMessageObject;
                        downloadController2.addLoadingFileObserver(messageObject8.messageOwner.attachPath, messageObject8, this);
                        this.wasSending = true;
                        String str = this.currentMessageObject.messageOwner.attachPath;
                        boolean z11 = str == null || !str.startsWith("http");
                        TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                        HashMap<String, String> hashMap2 = tLRPC$Message.params;
                        if (tLRPC$Message.message != null && hashMap2 != null && (hashMap2.containsKey("url") || hashMap2.containsKey("bot"))) {
                            this.buttonState = -1;
                            z11 = false;
                        } else {
                            this.buttonState = 1;
                        }
                        boolean isSendingMessage2 = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                        if (this.currentPosition != null && isSendingMessage2 && this.buttonState == 1) {
                            this.drawRadialCheckBackground = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon(6, z, z6);
                        } else {
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                        }
                        if (z11) {
                            long[] fileProgressSizes5 = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                            if (fileProgressSizes5 == null && isSendingMessage2) {
                                z8 = false;
                                r15 = 1.0f;
                            } else if (fileProgressSizes5 != null) {
                                r15 = DownloadController.getProgress(fileProgressSizes5);
                                z8 = false;
                                createLoadingProgressLayout(fileProgressSizes5[0], fileProgressSizes5[1]);
                            } else {
                                z8 = false;
                            }
                            this.radialProgress.setProgress(r15, z8);
                        } else {
                            this.radialProgress.setProgress(0.0f, false);
                        }
                        invalidate();
                        z7 = false;
                    } else {
                        getIconForCurrentState();
                        if (this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedSticker() || this.currentMessageObject.isLocation() || this.currentMessageObject.isGif()) {
                            z7 = false;
                            i5 = -1;
                        } else if (this.documentAttachType == 10) {
                            i5 = -1;
                            z7 = false;
                        } else {
                            this.buttonState = 1;
                            z7 = false;
                            this.radialProgress.setIcon(12, z, false);
                            this.radialProgress.setProgress(0.0f, z7);
                        }
                        this.buttonState = i5;
                        this.radialProgress.setIcon(4, z, z7);
                        this.radialProgress.setProgress(0.0f, z7);
                    }
                    this.videoRadialProgress.setIcon(4, z, z7);
                } else {
                    if (this.wasSending && !TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    }
                    int i11 = this.documentAttachType;
                    if ((i11 == 4 || i11 == 2 || i11 == 7) && this.autoPlayingMedia) {
                        isLoadingVideo = FileLoader.getInstance(this.currentAccount).isLoadingVideo(this.documentAttach, MediaController.getInstance().isPlayingMessage(this.currentMessageObject));
                        AnimatedFileDrawable animation = this.photoImage.getAnimation();
                        if (animation != null) {
                            MessageObject messageObject9 = this.currentMessageObject;
                            if (messageObject9.hadAnimationNotReadyLoading) {
                                if (animation.hasBitmap()) {
                                    this.currentMessageObject.hadAnimationNotReadyLoading = false;
                                }
                            } else {
                                messageObject9.hadAnimationNotReadyLoading = isLoadingVideo && !animation.hasBitmap();
                            }
                        } else {
                            int i12 = this.documentAttachType;
                            if (i12 == 2 && !z4) {
                                this.currentMessageObject.hadAnimationNotReadyLoading = true;
                            } else if (i12 == 4 && !isLoadingVideo && (key = ImageLocation.getForDocument(this.documentAttach).getKey(null, null, false)) != null) {
                                isLoadingVideo = ImageLoader.getInstance().imageLoadingKeys.contains(key);
                            }
                        }
                    } else {
                        isLoadingVideo = false;
                    }
                    if (this.hasMiniProgress != 0) {
                        this.radialProgress.setMiniProgressBackgroundColor(getThemedColor(Theme.key_chat_inLoaderPhoto));
                        this.buttonState = 3;
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                        if (this.hasMiniProgress == 1 || this.currentMessageObject.sendPreview) {
                            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            this.miniButtonState = -1;
                        } else {
                            DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(fileName, this.currentMessageObject, this);
                            if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(fileName)) {
                                this.miniButtonState = 0;
                            } else {
                                this.miniButtonState = 1;
                                long[] fileProgressSizes6 = ImageLoader.getInstance().getFileProgressSizes(fileName);
                                if (fileProgressSizes6 != null) {
                                    createLoadingProgressLayout(fileProgressSizes6[0], fileProgressSizes6[1]);
                                    this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes6), z6);
                                } else {
                                    createLoadingProgressLayout(this.documentAttach);
                                    this.radialProgress.setProgress(0.0f, z6);
                                }
                            }
                        }
                        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z6);
                    } else if (z4 || (((i4 = this.documentAttachType) == 4 || i4 == 2 || i4 == 7) && this.autoPlayingMedia && !this.currentMessageObject.hadAnimationNotReadyLoading && !isLoadingVideo)) {
                        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                        if (this.drawVideoImageButton && z6) {
                            int i13 = this.animatingDrawVideoImageButton;
                            if (i13 != 1 && this.animatingDrawVideoImageButtonProgress > 0.0f) {
                                if (i13 == 0) {
                                    this.animatingDrawVideoImageButtonProgress = 1.0f;
                                }
                                this.animatingDrawVideoImageButton = 1;
                            }
                        } else if (this.animatingDrawVideoImageButton == 0) {
                            this.animatingDrawVideoImageButton = 1;
                        }
                        this.drawVideoImageButton = false;
                        this.drawVideoSize = false;
                        if (this.currentMessageObject.needDrawBluredPreview()) {
                            this.buttonState = -1;
                        } else {
                            int i14 = this.documentAttachType;
                            if (i14 == 2 && this.currentMessageObject.gifState == 1.0f) {
                                if (this.photoImage.isAnimationRunning()) {
                                    this.currentMessageObject.gifState = 0.0f;
                                    this.buttonState = -1;
                                } else {
                                    this.buttonState = 2;
                                }
                            } else if (i14 == 4 && !this.hasEmbed) {
                                this.buttonState = 3;
                            } else {
                                this.buttonState = -1;
                            }
                        }
                        this.videoRadialProgress.setIcon(4, z, this.animatingDrawVideoImageButton != 0);
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                        if (!z3 && this.photoNotSet) {
                            setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                        }
                        invalidate();
                    } else {
                        this.drawVideoSize = i4 == 4 || i4 == 2;
                        if ((i4 == 4 || i4 == 2 || i4 == 7) && this.canStreamVideo && !this.drawVideoImageButton && z6) {
                            int i15 = this.animatingDrawVideoImageButton;
                            if (i15 != 2 && this.animatingDrawVideoImageButtonProgress < 1.0f) {
                                if (i15 == 0) {
                                    this.animatingDrawVideoImageButtonProgress = 0.0f;
                                }
                                this.animatingDrawVideoImageButton = 2;
                            }
                        } else if (this.animatingDrawVideoImageButton == 0) {
                            this.animatingDrawVideoImageButtonProgress = 1.0f;
                        }
                        DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(fileName, this.currentMessageObject, this);
                        if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(fileName)) {
                            MessageObject messageObject10 = this.currentMessageObject;
                            if (!messageObject10.hadAnimationNotReadyLoading) {
                                if (!messageObject10.loadingCancelled && canDownloadMedia) {
                                    this.buttonState = 1;
                                } else if (messageObject10.type == 4) {
                                    this.buttonState = -1;
                                } else {
                                    this.buttonState = 0;
                                }
                                int i16 = messageObject10.type;
                                boolean z12 = i16 == 3 || i16 == 8 || this.documentAttachType == 4;
                                MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                                boolean z13 = groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 3) == 3;
                                int i17 = this.documentAttachType;
                                if ((i17 == 4 || (i17 == 2 && canDownloadMedia)) && this.canStreamVideo && z12 && z13) {
                                    this.drawVideoImageButton = true;
                                    getIconForCurrentState();
                                    this.radialProgress.setIcon(this.autoPlayingMedia ? 4 : 0, z, z6);
                                    this.videoRadialProgress.setIcon(2, z, z6);
                                } else {
                                    this.drawVideoImageButton = false;
                                    this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                                    this.videoRadialProgress.setIcon(4, z, false);
                                    if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                        this.animatingDrawVideoImageButtonProgress = 0.0f;
                                    }
                                }
                                invalidate();
                            }
                        }
                        this.buttonState = 1;
                        long[] fileProgressSizes7 = ImageLoader.getInstance().getFileProgressSizes(fileName);
                        if (fileProgressSizes7 != null) {
                            createLoadingProgressLayout(fileProgressSizes7[0], fileProgressSizes7[1]);
                        } else {
                            createLoadingProgressLayout(this.documentAttach);
                        }
                        MessageObject messageObject11 = this.currentMessageObject;
                        int i18 = messageObject11.type;
                        boolean z14 = i18 == 3 || i18 == 8 || this.documentAttachType == 4;
                        MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                        boolean z15 = groupedMessagePosition3 == null || (groupedMessagePosition3.flags & 3) == 3;
                        if ((this.documentAttachType == 4 || (MessageObject.isGifDocument(this.documentAttach, messageObject11.hasValidGroupId()) && canDownloadMedia)) && this.canStreamVideo && z14 && z15) {
                            this.drawVideoImageButton = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon((this.autoPlayingMedia || this.documentAttachType == 2) ? 4 : 0, z, z6);
                            this.videoRadialProgress.setProgress(fileProgressSizes7 != null ? DownloadController.getProgress(fileProgressSizes7) : 0.0f, z6);
                            this.videoRadialProgress.setIcon(14, z, z6);
                        } else {
                            this.drawVideoImageButton = false;
                            this.radialProgress.setProgress(fileProgressSizes7 != null ? DownloadController.getProgress(fileProgressSizes7) : 0.0f, z6);
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z6);
                            this.videoRadialProgress.setIcon(4, z, false);
                            if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                        }
                        invalidate();
                    }
                }
            }
        }
        if (this.hasMiniProgress == 0) {
            this.radialProgress.setMiniIcon(4, false, z6);
        }
    }

    private void didPressMiniButton(boolean z) {
        int i = this.miniButtonState;
        if (i != 0) {
            if (i == 1) {
                int i2 = this.documentAttachType;
                if ((i2 == 3 || i2 == 5 || i2 == 7) && MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    MediaController.getInstance().cleanupPlayer(true, true);
                }
                this.miniButtonState = 0;
                this.currentMessageObject.loadingCancelled = true;
                FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                invalidate();
                return;
            }
            return;
        }
        this.miniButtonState = 1;
        this.radialProgress.setProgress(0.0f, false);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i3 = this.documentAttachType;
        if (i3 == 3 || i3 == 5) {
            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
            TLRPC$Document tLRPC$Document = this.documentAttach;
            MessageObject messageObject2 = this.currentMessageObject;
            fileLoader.loadFile(tLRPC$Document, messageObject2, 2, messageObject2.shouldEncryptPhotoOrVideo() ? 2 : 0);
            this.currentMessageObject.loadingCancelled = false;
        } else if (i3 == 4 || i3 == 7) {
            createLoadingProgressLayout(this.documentAttach);
            FileLoader fileLoader2 = FileLoader.getInstance(this.currentAccount);
            TLRPC$Document tLRPC$Document2 = this.documentAttach;
            MessageObject messageObject3 = this.currentMessageObject;
            fileLoader2.loadFile(tLRPC$Document2, messageObject3, 2, messageObject3.shouldEncryptPhotoOrVideo() ? 2 : 0);
            this.currentMessageObject.loadingCancelled = false;
        }
        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
        invalidate();
    }

    private void didPressButton(boolean z, boolean z2) {
        MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str;
        MessageObject messageObject3;
        if (this.delegate != null && this.currentMessageObject.isSensitive() && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.needDrawBluredPreview() && !this.currentMessageObject.isMediaSpoilersRevealed) {
            this.delegate.didPressRevealSensitiveContent(this);
            return;
        }
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null && !messageObject4.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i = this.buttonState;
        if (i == 0 && (!this.drawVideoImageButton || z2)) {
            int i2 = this.documentAttachType;
            if (i2 == 3 || i2 == 5 || (i2 == 7 && (messageObject3 = this.currentMessageObject) != null && messageObject3.isVoiceTranscriptionOpen() && this.currentMessageObject.mediaExists)) {
                if (this.miniButtonState == 0) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                    this.currentMessageObject.loadingCancelled = false;
                }
                if (this.delegate.needPlayMessage(this, this.currentMessageObject, false)) {
                    if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                        this.miniButtonState = 1;
                        this.radialProgress.setProgress(0.0f, false);
                        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                    }
                    updatePlayingMessageProgress();
                    this.buttonState = 1;
                    this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                    invalidate();
                    return;
                }
                return;
            }
            if (z2) {
                this.videoRadialProgress.setProgress(0.0f, false);
            } else {
                this.radialProgress.setProgress(0.0f, false);
            }
            if (this.currentPhotoObject != null && (this.photoImage.hasNotThumb() || this.currentPhotoObjectThumb == null)) {
                tLRPC$PhotoSize = this.currentPhotoObject;
                str = ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize.type)) ? this.currentPhotoFilterThumb : this.currentPhotoFilter;
            } else {
                tLRPC$PhotoSize = this.currentPhotoObjectThumb;
                str = this.currentPhotoFilterThumb;
            }
            String str2 = str;
            int i3 = this.currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0;
            MessageObject messageObject5 = this.currentMessageObject;
            int i4 = messageObject5.type;
            if (i4 == 1 || i4 == 20) {
                this.photoImage.setForceLoading(true);
                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.currentPhotoObject.size, null, this.currentMessageObject, i3);
            } else if (i4 == 8) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else if (this.isRoundVideo) {
                if (messageObject5.isSecretMedia()) {
                    FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                    TLRPC$Document document = this.currentMessageObject.getDocument();
                    MessageObject messageObject6 = this.currentMessageObject;
                    fileLoader.loadFile(document, messageObject6, 2, messageObject6.shouldEncryptPhotoOrVideo() ? 2 : 1);
                } else {
                    MessageObject messageObject7 = this.currentMessageObject;
                    messageObject7.gifState = 2.0f;
                    TLRPC$Document document2 = messageObject7.getDocument();
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(document2), null, ImageLocation.getForObject(tLRPC$PhotoSize, document2), str2, document2.size, null, this.currentMessageObject, 0);
                }
                this.wouldBeInPip = true;
                invalidate();
            } else if (i4 == 9) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else {
                int i5 = this.documentAttachType;
                if (i5 == 4) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, i3);
                    MessageObject messageObject8 = this.currentMessageObject;
                    if (messageObject8.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject8.getDocument());
                    }
                } else if (i4 != 0 || i5 == 0) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, 0);
                } else if (i5 == 2) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), this.currentPhotoFilterThumb, this.documentAttach.size, null, this.currentMessageObject, i3);
                    MessageObject messageObject9 = this.currentMessageObject;
                    messageObject9.gifState = 2.0f;
                    if (messageObject9.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject9.getDocument());
                    }
                } else if (i5 == 1) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                } else if (i5 == 8) {
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", 0L, "jpg", this.currentMessageObject, 1);
                }
            }
            this.currentMessageObject.loadingCancelled = false;
            this.buttonState = 1;
            if (z2) {
                this.videoRadialProgress.setIcon(14, false, z);
            } else {
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
            }
            invalidate();
        } else if (i == 1 && (!this.drawVideoImageButton || z2)) {
            this.photoImage.setForceLoading(false);
            int i6 = this.documentAttachType;
            if (i6 == 3 || i6 == 5 || (i6 == 7 && (messageObject2 = this.currentMessageObject) != null && messageObject2.isVoiceTranscriptionOpen())) {
                if (MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject)) {
                    this.buttonState = 0;
                    this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                    invalidate();
                }
            } else if (this.currentMessageObject.isOut() && !this.drawVideoImageButton && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) {
                if (this.radialProgress.getIcon() != 6) {
                    this.delegate.didPressCancelSendButton(this);
                }
            } else {
                MessageObject messageObject10 = this.currentMessageObject;
                messageObject10.loadingCancelled = true;
                int i7 = this.documentAttachType;
                if (i7 == 2 || i7 == 4 || i7 == 1 || i7 == 8) {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                } else {
                    int i8 = messageObject10.type;
                    if (i8 == 0 || i8 == 1 || i8 == 20 || i8 == 8 || i8 == 5) {
                        ImageLoader.getInstance().cancelForceLoadingForImageReceiver(this.photoImage);
                        this.photoImage.cancelLoadImage();
                    } else if (i8 == 9) {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
                    }
                }
                this.buttonState = 0;
                if (z2) {
                    this.videoRadialProgress.setIcon(2, false, z);
                } else {
                    this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                }
                invalidate();
            }
        } else if (i != 2) {
            if (i == 3 || i == 0) {
                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                    this.miniButtonState = 1;
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, z);
                }
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    chatMessageCellDelegate.didPressImage(this, 0.0f, 0.0f);
                }
            } else if (i == 4) {
                int i9 = this.documentAttachType;
                if (i9 == 3 || i9 == 5 || (i9 == 7 && (messageObject = this.currentMessageObject) != null && messageObject.isVoiceTranscriptionOpen())) {
                    if ((this.currentMessageObject.isOut() && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) || this.currentMessageObject.isSendError()) {
                        if (this.delegate == null || this.radialProgress.getIcon() == 6) {
                            return;
                        }
                        this.delegate.didPressCancelSendButton(this);
                        return;
                    }
                    this.currentMessageObject.loadingCancelled = true;
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                    this.buttonState = 2;
                    this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                    invalidate();
                }
            }
        } else {
            MessageObject messageObject11 = this.currentMessageObject;
            if (messageObject11 != null && messageObject11.type == 23) {
                this.delegate.didPressImage(this, 0.0f, 0.0f);
            } else if (this.documentAttachType == 7 && messageObject11 != null && messageObject11.isVoiceTranscriptionOpen()) {
                if (this.miniButtonState == 0) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                    this.currentMessageObject.loadingCancelled = false;
                }
                if (this.delegate.needPlayMessage(this, this.currentMessageObject, false)) {
                    if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                        this.miniButtonState = 1;
                        this.radialProgress.setProgress(0.0f, false);
                        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                    }
                    updatePlayingMessageProgress();
                    this.buttonState = 1;
                    this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                    invalidate();
                }
                if (this.isRoundVideo) {
                    this.wouldBeInPip = true;
                    invalidate();
                }
            } else {
                int i10 = this.documentAttachType;
                if (i10 == 3 || i10 == 5) {
                    this.radialProgress.setProgress(0.0f, false);
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                    this.currentMessageObject.loadingCancelled = false;
                    this.buttonState = 4;
                    this.radialProgress.setIcon(getIconForCurrentState(), true, z);
                    invalidate();
                    return;
                }
                if (this.isRoundVideo) {
                    MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                    if (playingMessageObject == null || !playingMessageObject.isRoundVideo()) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    }
                } else {
                    this.photoImage.setAllowStartAnimation(true);
                    this.photoImage.startAnimation();
                }
                this.currentMessageObject.gifState = 0.0f;
                this.buttonState = -1;
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
            }
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onFailedDownload(String str, boolean z) {
        int i = this.documentAttachType;
        updateButtonState(true, i == 3 || i == 5, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:49:0x00cf, code lost:
        if ((r1 & 2) != 0) goto L48;
     */
    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onSuccessDownload(String str) {
        TLRPC$Document tLRPC$Document;
        if (this.documentAttachType == 6 && this.currentMessageObject.isDice()) {
            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
            setCurrentDiceValue(true);
            return;
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            updateButtonState(false, true, false);
            updateWaveform();
            return;
        }
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(1.0f, true);
        } else {
            this.radialProgress.setProgress(1.0f, true);
        }
        if (!this.currentMessageObject.needDrawBluredPreview() && !this.autoPlayingMedia && (tLRPC$Document = this.documentAttach) != null) {
            if (this.documentAttachType == 7) {
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forDocument = ImageLocation.getForDocument(tLRPC$Document);
                ImageLocation forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                imageReceiver.setImage(forDocument, ImageLoader.AUTOPLAY_FILTER, forObject, ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize != null && "s".equals(tLRPC$PhotoSize.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
                this.autoPlayingMedia = true;
            } else {
                if (!this.isSmallImage && !this.currentMessageObject.isHiddenSensitive() && SharedConfig.isAutoplayVideo() && !this.currentMessageObject.isRepostPreview && this.documentAttachType == 4) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null) {
                        int i2 = groupedMessagePosition.flags;
                        if ((i2 & 1) != 0) {
                        }
                    }
                    this.animatingNoSound = 2;
                    ImageReceiver imageReceiver2 = this.photoImage;
                    ImageLocation forDocument2 = ImageLocation.getForDocument(this.documentAttach);
                    ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
                    imageReceiver2.setImage(forDocument2, ImageLoader.AUTOPLAY_FILTER, forObject2, ((tLRPC$PhotoSize2 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize2 != null && "s".equals(tLRPC$PhotoSize2.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (!PhotoViewer.isPlayingMessage(this.currentMessageObject)) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                    }
                    this.autoPlayingMedia = true;
                }
                if (this.documentAttachType == 2) {
                    ImageReceiver imageReceiver3 = this.photoImage;
                    ImageLocation forDocument3 = ImageLocation.getForDocument(this.documentAttach);
                    ImageLocation forObject3 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize3 = this.currentPhotoObject;
                    imageReceiver3.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forObject3, ((tLRPC$PhotoSize3 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize3 != null && "s".equals(tLRPC$PhotoSize3.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (!this.currentMessageObject.isHiddenSensitive() && SharedConfig.isAutoplayGifs() && !this.currentMessageObject.isRepostPreview) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                        this.photoImage.stopAnimation();
                    }
                    this.autoPlayingMedia = true;
                }
            }
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 0) {
            if (!this.autoPlayingMedia && this.documentAttachType == 2 && messageObject.gifState != 1.0f) {
                this.buttonState = 2;
                didPressButton(true, false);
                return;
            } else if (!this.photoNotSet) {
                updateButtonState(false, true, false);
                return;
            } else {
                setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                return;
            }
        }
        if (!this.photoNotSet) {
            updateButtonState(false, true, false);
        }
        if (this.photoNotSet) {
            setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:18:0x0024, code lost:
        if (r8.mediaExists == false) goto L18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x003f, code lost:
        if (r8 == 6) goto L18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x0041, code lost:
        if (r7 == 1) goto L18;
     */
    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && z) {
            if (setCurrentDiceValue((z3 || messageObject.wasUnread) ? false : true)) {
                return;
            }
            if (z2) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type == 20) {
                }
            }
            if (!z2) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (!messageObject3.mediaExists) {
                    if (!messageObject3.attachPathExists) {
                        int i = messageObject3.type;
                        if (i == 0) {
                            int i2 = this.documentAttachType;
                            if (i2 != 8) {
                                if (i2 != 0) {
                                }
                            }
                            this.currentMessageObject.mediaExists = true;
                            updateButtonState(false, true, false);
                        }
                    }
                }
            }
        }
        if (!z || this.currentMessageObject == null) {
            return;
        }
        if (this.blurredPhotoImage.getBitmap() != null) {
            this.blurredPhotoImage.getBitmap().recycle();
            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
        }
        if ((!this.currentMessageObject.hasMediaSpoilers() && !this.fitPhotoImage) || imageReceiver.getBitmap() == null || imageReceiver.getBitmap().isRecycled()) {
            return;
        }
        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(imageReceiver.getBitmap(), this.currentMessageObject.isRoundVideo()));
        this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
    }

    public boolean setCurrentDiceValue(boolean z) {
        MessagesController.DiceFrameSuccess diceFrameSuccess;
        if (this.currentMessageObject.isDice()) {
            Drawable drawable = this.photoImage.getDrawable();
            if (drawable instanceof RLottieDrawable) {
                RLottieDrawable rLottieDrawable = (RLottieDrawable) drawable;
                String diceEmoji = this.currentMessageObject.getDiceEmoji();
                TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                if (stickerSetByEmojiOrName != null) {
                    int diceValue = this.currentMessageObject.getDiceValue();
                    if ("🎰".equals(this.currentMessageObject.getDiceEmoji())) {
                        if (diceValue >= 0 && diceValue <= 64) {
                            ((SlotsDrawable) rLottieDrawable).setDiceNumber(this, diceValue, stickerSetByEmojiOrName, z);
                            if (this.currentMessageObject.isOut()) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, ConnectionsManager.DEFAULT_DATACENTER_ID);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            ((SlotsDrawable) rLottieDrawable).setBaseDice(this, stickerSetByEmojiOrName);
                        }
                    } else {
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            TLRPC$Document tLRPC$Document = stickerSetByEmojiOrName.documents.get(0);
                            if (rLottieDrawable.setBaseDice(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document, true))) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document, stickerSetByEmojiOrName, 1, 1);
                            }
                        }
                        if (diceValue >= 0 && diceValue < stickerSetByEmojiOrName.documents.size()) {
                            if (!z && this.currentMessageObject.isOut() && (diceFrameSuccess = MessagesController.getInstance(this.currentAccount).diceSuccess.get(diceEmoji)) != null && diceFrameSuccess.num == diceValue) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, diceFrameSuccess.frame);
                            }
                            TLRPC$Document tLRPC$Document2 = stickerSetByEmojiOrName.documents.get(Math.max(diceValue, 0));
                            if (rLottieDrawable.setDiceNumber(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document2, true), z)) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document2), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document2, stickerSetByEmojiOrName, 1, 1);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                    }
                } else {
                    MediaDataController.getInstance(this.currentAccount).loadStickersByEmojiOrName(diceEmoji, true, true);
                }
            }
            return true;
        }
        return false;
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public void onAnimationReady(ImageReceiver imageReceiver) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && imageReceiver == this.photoImage && messageObject.isAnimatedSticker()) {
            this.delegate.setShouldNotRepeatSticker(this.currentMessageObject);
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressDownload(String str, long j, long j2) {
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        createLoadingProgressLayout(j, j2);
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(min, true);
        } else {
            this.radialProgress.setProgress(min, true);
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            if (this.hasMiniProgress != 0) {
                if (this.miniButtonState != 1) {
                    updateButtonState(false, false, false);
                }
            } else if (this.buttonState != 4) {
                updateButtonState(false, false, false);
            }
        } else if (this.hasMiniProgress != 0) {
            if (this.miniButtonState != 1) {
                updateButtonState(false, false, false);
            }
        } else if (this.buttonState != 1) {
            updateButtonState(false, false, false);
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressUpload(String str, long j, long j2, boolean z) {
        int i;
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        this.radialProgress.setProgress(min, true);
        if (j == j2 && this.currentPosition != null && SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId()) && ((i = this.buttonState) == 1 || (i == 4 && this.documentAttachType == 5))) {
            this.drawRadialCheckBackground = true;
            getIconForCurrentState();
            this.radialProgress.setIcon(6, false, true);
        }
        long j3 = this.lastLoadingSizeTotal;
        if (j3 > 0 && Math.abs(j3 - j2) > 1048576) {
            this.lastLoadingSizeTotal = j2;
        }
        createLoadingProgressLayout(j, j2);
    }

    private void createLoadingProgressLayout(TLRPC$Document tLRPC$Document) {
        if (tLRPC$Document == null) {
            return;
        }
        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(FileLoader.getDocumentFileName(tLRPC$Document));
        if (fileProgressSizes != null) {
            createLoadingProgressLayout(fileProgressSizes[0], fileProgressSizes[1]);
        } else {
            createLoadingProgressLayout(this.currentMessageObject.loadedFileSize, tLRPC$Document.size);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:22:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x007d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createLoadingProgressLayout(long j, long j2) {
        boolean z;
        String format;
        int ceil;
        String str;
        int i;
        long j3 = j2;
        if (j3 <= 0 || this.documentAttach == null) {
            this.loadingProgressLayout = null;
            return;
        }
        long j4 = (j << 16) + j3;
        if (this.loadingProgressLayout == null || this.loadingProgressLayoutHash != j4) {
            this.loadingProgressLayoutHash = j4;
            long j5 = this.lastLoadingSizeTotal;
            if (j5 == 0) {
                this.lastLoadingSizeTotal = j3;
            } else if (j > j5) {
                j3 = j5;
                String formatFileSize = AndroidUtilities.formatFileSize(j3);
                int ceil2 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize)));
                if (this.documentAttachType != 1) {
                    format = ceil2 <= Math.max(this.infoWidth, this.docTitleWidth) ? String.format("%s / %s", AndroidUtilities.formatFileSize(j5), formatFileSize) : AndroidUtilities.formatFileSize(j5);
                    z = true;
                } else {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    z = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                    if (z) {
                        format = String.format("%s / %s", AndroidUtilities.formatFileSize(j5), formatFileSize);
                    } else {
                        int min = (int) (Math.min(1.0f, ((float) j5) / ((float) j3)) * 100.0f);
                        format = min >= 100 ? "100%" : String.format(Locale.US, "%2d%%", Integer.valueOf(min));
                    }
                }
                ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                if (z || ceil <= this.backgroundWidth - AndroidUtilities.dp(48.0f)) {
                    str = format;
                    i = ceil;
                } else {
                    int min2 = (int) (Math.min(1.0f, ((float) j5) / ((float) j3)) * 100.0f);
                    String format2 = min2 < 100 ? String.format(Locale.US, "%2d%%", Integer.valueOf(min2)) : "100%";
                    i = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                    str = format2;
                }
                this.loadingProgressLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                j3 = j5;
            }
            j5 = j;
            String formatFileSize2 = AndroidUtilities.formatFileSize(j3);
            int ceil22 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize2)));
            if (this.documentAttachType != 1) {
            }
            ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
            if (z) {
            }
            str = format;
            i = ceil;
            this.loadingProgressLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        }
    }

    @Override // android.view.View
    public void onProvideStructure(ViewStructure viewStructure) {
        CharSequence charSequence;
        CharSequence charSequence2;
        super.onProvideStructure(viewStructure);
        if (!this.allowAssistant || Build.VERSION.SDK_INT < 23) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && (charSequence2 = messageObject.messageText) != null && charSequence2.length() > 0) {
            viewStructure.setText(this.currentMessageObject.messageText);
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null || (charSequence = messageObject2.caption) == null || charSequence.length() <= 0) {
            return;
        }
        viewStructure.setText(this.currentMessageObject.caption);
    }

    public void setDelegate(ChatMessageCellDelegate chatMessageCellDelegate) {
        this.delegate = chatMessageCellDelegate;
    }

    public ChatMessageCellDelegate getDelegate() {
        return this.delegate;
    }

    public void setAllowAssistant(boolean z) {
        this.allowAssistant = z;
    }

    /* JADX WARN: Removed duplicated region for block: B:109:0x01e8  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0218  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x02b0  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x02f8  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x0300  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0303  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x031c  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0396  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x03f2  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x0455  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x046d  */
    /* JADX WARN: Removed duplicated region for block: B:188:0x04a6  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x04c4  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x04c7  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x04cd  */
    /* JADX WARN: Removed duplicated region for block: B:225:0x053e  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x054f  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x05de  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01c4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void measureTime(MessageObject messageObject) {
        String str;
        MessageObject messageObject2;
        String str2;
        CharSequence charSequence;
        MessageObject messageObject3;
        TLRPC$Message tLRPC$Message;
        TLRPC$TL_availableEffect effect;
        int dp;
        String format;
        Locale locale;
        String format2;
        MessageObject messageObject4;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        int i;
        TLRPC$Message tLRPC$Message2;
        MessageObject.GroupedMessages groupedMessages;
        TLRPC$Chat chat;
        TLRPC$User user;
        String str3;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        long fromChatId = messageObject.getFromChatId();
        CharSequence charSequence2 = "";
        if (!messageObject.scheduled) {
            if (primaryMessageObject.messageOwner.via_business_bot_id != 0) {
                TLRPC$User user2 = MessagesController.getInstance(messageObject.currentAccount).getUser(Long.valueOf(primaryMessageObject.messageOwner.via_business_bot_id));
                if (user2 != null) {
                    str = UserObject.getUserName(user2);
                }
            } else {
                TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
                if (tLRPC$Message3.post_author != null) {
                    if (!this.isMegagroup || messageObject.getFromChatId() != messageObject.getDialogId()) {
                        str = messageObject.messageOwner.post_author.replace("\n", "");
                    }
                } else {
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = tLRPC$Message3.fwd_from;
                    if (tLRPC$MessageFwdHeader2 != null && (str3 = tLRPC$MessageFwdHeader2.post_author) != null) {
                        str = str3.replace("\n", "");
                    } else if (tLRPC$MessageFwdHeader2 != null && tLRPC$MessageFwdHeader2.imported) {
                        str = tLRPC$MessageFwdHeader2.date == tLRPC$Message3.date ? LocaleController.getString("ImportedMessage", R.string.ImportedMessage) : LocaleController.formatImportedDate(messageObject.messageOwner.fwd_from.date) + " " + LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
                    } else if (!messageObject.isOutOwner() && fromChatId > 0 && messageObject.messageOwner.post && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId))) != null) {
                        str = ContactsController.formatName(user.first_name, user.last_name).replace('\n', ' ');
                    }
                }
            }
            if (messageObject.getDialogId() < 0 && (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-messageObject.getDialogId()))) != null && chat.signature_profiles) {
                str = null;
            }
            TLRPC$User user3 = !this.currentMessageObject.isFromUser() ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId)) : null;
            boolean hasReplies = messageObject.hasReplies();
            if (!messageObject.scheduled && !messageObject.isLiveLocation() && !messageObject.messageOwner.edit_hide && messageObject.getDialogId() != 777000) {
                tLRPC$Message2 = messageObject.messageOwner;
                if (tLRPC$Message2.via_bot_id == 0 && tLRPC$Message2.via_bot_name == null && (user3 == null || !user3.bot)) {
                    if (this.currentPosition != null || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.isEmpty()) {
                        this.edited = (messageObject.messageOwner.flags & LiteMode.FLAG_CHAT_SCALE) == 0 || messageObject.isEditing();
                    } else {
                        this.edited = false;
                        hasReplies = this.currentMessagesGroup.messages.get(0).hasReplies();
                        if (!this.currentMessagesGroup.messages.get(0).messageOwner.edit_hide) {
                            int size = this.currentMessagesGroup.messages.size();
                            for (int i2 = 0; i2 < size; i2++) {
                                MessageObject messageObject5 = this.currentMessagesGroup.messages.get(i2);
                                if ((messageObject5.messageOwner.flags & LiteMode.FLAG_CHAT_SCALE) != 0 || messageObject5.isEditing()) {
                                    this.edited = true;
                                    break;
                                }
                            }
                        }
                    }
                    messageObject2 = this.currentMessageObject;
                    if (!messageObject2.notime && !messageObject2.isSponsored() && !this.currentMessageObject.isQuickReply()) {
                        messageObject4 = this.currentMessageObject;
                        if (messageObject4.scheduled || messageObject4.messageOwner.date != 2147483646) {
                            if (messageObject4.realDate == 0) {
                                str2 = LocaleController.formatSmallDateChat(this.currentMessageObject.realDate) + ", " + LocaleController.getInstance().getFormatterDay().format(this.currentMessageObject.realDate * 1000);
                            } else if (messageObject4.isRepostPreview) {
                                str2 = LocaleController.formatSmallDateChat(messageObject.messageOwner.date) + ", " + LocaleController.getInstance().getFormatterDay().format(messageObject.messageOwner.date * 1000);
                            } else if (this.edited) {
                                str2 = LocaleController.getString("EditedMessage", R.string.EditedMessage) + " " + LocaleController.getInstance().getFormatterDay().format(messageObject.messageOwner.date * 1000);
                            } else if (messageObject4.isSaved && (tLRPC$MessageFwdHeader = messageObject4.messageOwner.fwd_from) != null && ((i = tLRPC$MessageFwdHeader.date) != 0 || tLRPC$MessageFwdHeader.saved_date != 0)) {
                                int i3 = tLRPC$MessageFwdHeader.saved_date;
                                if (i3 != 0) {
                                    i = i3;
                                }
                                str2 = LocaleController.formatSeenDate(i);
                            } else {
                                str2 = LocaleController.getInstance().getFormatterDay().format(messageObject.messageOwner.date * 1000);
                            }
                            if (str == null) {
                                TLRPC$Message tLRPC$Message4 = messageObject.messageOwner;
                                if (tLRPC$Message4.via_business_bot_id != 0) {
                                    this.currentTimeString = str2 + ", ";
                                } else {
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader3 = tLRPC$Message4.fwd_from;
                                    if (tLRPC$MessageFwdHeader3 != null && tLRPC$MessageFwdHeader3.imported) {
                                        this.currentTimeString = " " + str2;
                                    } else {
                                        this.currentTimeString = ", " + str2;
                                    }
                                }
                            } else {
                                this.currentTimeString = str2;
                            }
                            TextPaint textPaint = Theme.chat_timePaint;
                            int ceil = (int) Math.ceil(textPaint.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                            this.timeWidth = ceil;
                            this.timeTextWidth = ceil;
                            messageObject3 = this.currentMessageObject;
                            if ((messageObject3.scheduled && messageObject3.messageOwner.date == 2147483646) || messageObject3.notime) {
                                this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
                            }
                            tLRPC$Message = messageObject.messageOwner;
                            if ((tLRPC$Message.flags & 1024) != 0) {
                                this.currentViewsString = String.format("%s", LocaleController.formatShortNumber(Math.max(1, tLRPC$Message.views), null));
                                this.viewsTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(format2));
                                this.timeWidth = (int) (this.timeWidth + this.viewsTextWidth + ((Theme.chat_msgInViewsDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInViewsDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                            }
                            if (messageObject.type == 20) {
                                int i4 = R.string.PaymentCheckoutPay;
                                LocaleController localeController = LocaleController.getInstance();
                                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                                String formatString = LocaleController.formatString(i4, localeController.formatCurrencyString(tLRPC$MessageMedia.total_amount, tLRPC$MessageMedia.currency).toUpperCase(Locale.ROOT));
                                if (formatString.length() >= 2) {
                                    formatString = formatString.substring(0, 1).toUpperCase(locale) + formatString.substring(1).toLowerCase(locale);
                                }
                                this.currentUnlockString = formatString;
                                this.unlockTextWidth = (int) Math.ceil(Theme.chat_unlockExtendedMediaTextPaint.measureText(formatString));
                            }
                            if (!this.isChat && this.isMegagroup && !this.isThreadChat && hasReplies) {
                                this.currentRepliesString = String.format("%s", LocaleController.formatShortNumber(getRepliesCount(), null));
                                this.repliesTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(format));
                                this.timeWidth = (int) (this.timeWidth + this.repliesTextWidth + ((Theme.chat_msgInRepliesDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInRepliesDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                            } else {
                                this.currentRepliesString = null;
                            }
                            if (this.isPinned) {
                                this.timeWidth += Theme.chat_msgInPinnedDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3.0f);
                            }
                            if (messageObject.scheduled) {
                                if (messageObject.isSendError()) {
                                    this.timeWidth += AndroidUtilities.dp(18.0f);
                                } else if (messageObject.isSending() && messageObject.messageOwner.peer_id.channel_id != 0 && !messageObject.isSupergroup()) {
                                    this.timeWidth += AndroidUtilities.dp(18.0f);
                                }
                            }
                            if (this.currentMessageObject.shouldDrawReactions()) {
                                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                if (reactionsLayoutInBubble.isSmall) {
                                    reactionsLayoutInBubble.measure(ConnectionsManager.DEFAULT_DATACENTER_ID, 3);
                                    this.timeWidth += this.reactionsLayoutInBubble.width;
                                }
                            }
                            effect = getEffect();
                            if (this.effectId != (effect != null ? effect.id : 0L)) {
                                if (this.effectDrawable == null) {
                                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                                    this.effectDrawable = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable(this, chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent(), AndroidUtilities.dp(14.0f), 23);
                                }
                                boolean z = this.effectMessageId == this.currentMessageObject.getId();
                                if (effect != null) {
                                    if (!TextUtils.isEmpty(effect.emoticon)) {
                                        this.effectDrawable.set(Emoji.getEmojiDrawable(effect.emoticon), z);
                                    } else if ((effect.flags & 1) != 0) {
                                        this.effectDrawable.set(effect.static_icon_id, z);
                                    }
                                } else {
                                    this.effectDrawable.set((Drawable) null, z);
                                }
                                this.effectId = effect != null ? effect.id : 0L;
                                this.effectMessageId = this.currentMessageObject.getId();
                            }
                            if (this.effectId != 0 && !this.currentMessageObject.notime) {
                                this.timeWidth += AndroidUtilities.dp(18.0f);
                            }
                            if (str != null) {
                                if (this.availableTimeWidth == 0) {
                                    this.availableTimeWidth = AndroidUtilities.dp(1000.0f);
                                }
                                int i5 = this.availableTimeWidth - this.timeWidth;
                                if (messageObject.isOutOwner()) {
                                    if (messageObject.type == 5) {
                                        dp = AndroidUtilities.dp(20.0f);
                                    } else {
                                        dp = AndroidUtilities.dp(96.0f);
                                    }
                                    i5 -= dp;
                                }
                                CharSequence replaceEmoji = Emoji.replaceEmoji((CharSequence) str, Theme.chat_timePaint.getFontMetricsInt(), AndroidUtilities.dp(10.0f), false);
                                int ceil2 = (int) Math.ceil(Theme.chat_timePaint.measureText(replaceEmoji, 0, replaceEmoji.length()));
                                this.signWidth = Math.min(ceil2, i5);
                                if (ceil2 <= i5) {
                                    charSequence2 = replaceEmoji;
                                    i5 = ceil2;
                                } else if (i5 <= 0) {
                                    i5 = 0;
                                } else {
                                    charSequence2 = TextUtils.ellipsize(replaceEmoji, Theme.chat_timePaint, i5, TextUtils.TruncateAt.END);
                                }
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                                if (messageObject.messageOwner.via_business_bot_id != 0) {
                                    spannableStringBuilder.append(this.currentTimeString);
                                    spannableStringBuilder.append(charSequence2);
                                } else {
                                    spannableStringBuilder.append(charSequence2);
                                    spannableStringBuilder.append(this.currentTimeString);
                                }
                                this.currentTimeString = spannableStringBuilder;
                                this.timeTextWidth += i5;
                                this.timeWidth += i5;
                                return;
                            }
                            this.signWidth = 0;
                            return;
                        }
                    }
                    str2 = "";
                    if (str == null) {
                    }
                    TextPaint textPaint2 = Theme.chat_timePaint;
                    int ceil3 = (int) Math.ceil(textPaint2.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                    this.timeWidth = ceil3;
                    this.timeTextWidth = ceil3;
                    messageObject3 = this.currentMessageObject;
                    if (messageObject3.scheduled) {
                        this.timeWidth = ceil3 - AndroidUtilities.dp(8.0f);
                        tLRPC$Message = messageObject.messageOwner;
                        if ((tLRPC$Message.flags & 1024) != 0) {
                        }
                        if (messageObject.type == 20) {
                        }
                        if (!this.isChat) {
                        }
                        this.currentRepliesString = null;
                        if (this.isPinned) {
                        }
                        if (messageObject.scheduled) {
                        }
                        if (this.currentMessageObject.shouldDrawReactions()) {
                        }
                        effect = getEffect();
                        if (this.effectId != (effect != null ? effect.id : 0L)) {
                        }
                        if (this.effectId != 0) {
                            this.timeWidth += AndroidUtilities.dp(18.0f);
                        }
                        if (str != null) {
                        }
                    }
                    this.timeWidth = ceil3 - AndroidUtilities.dp(8.0f);
                    tLRPC$Message = messageObject.messageOwner;
                    if ((tLRPC$Message.flags & 1024) != 0) {
                    }
                    if (messageObject.type == 20) {
                    }
                    if (!this.isChat) {
                    }
                    this.currentRepliesString = null;
                    if (this.isPinned) {
                    }
                    if (messageObject.scheduled) {
                    }
                    if (this.currentMessageObject.shouldDrawReactions()) {
                    }
                    effect = getEffect();
                    if (this.effectId != (effect != null ? effect.id : 0L)) {
                    }
                    if (this.effectId != 0) {
                    }
                    if (str != null) {
                    }
                }
            }
            this.edited = false;
            messageObject2 = this.currentMessageObject;
            if (!messageObject2.notime) {
                messageObject4 = this.currentMessageObject;
                if (messageObject4.scheduled) {
                }
                if (messageObject4.realDate == 0) {
                }
                if (str == null) {
                }
                TextPaint textPaint22 = Theme.chat_timePaint;
                int ceil32 = (int) Math.ceil(textPaint22.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                this.timeWidth = ceil32;
                this.timeTextWidth = ceil32;
                messageObject3 = this.currentMessageObject;
                if (messageObject3.scheduled) {
                }
                this.timeWidth = ceil32 - AndroidUtilities.dp(8.0f);
                tLRPC$Message = messageObject.messageOwner;
                if ((tLRPC$Message.flags & 1024) != 0) {
                }
                if (messageObject.type == 20) {
                }
                if (!this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                if (this.currentMessageObject.shouldDrawReactions()) {
                }
                effect = getEffect();
                if (this.effectId != (effect != null ? effect.id : 0L)) {
                }
                if (this.effectId != 0) {
                }
                if (str != null) {
                }
            }
            str2 = "";
            if (str == null) {
            }
            TextPaint textPaint222 = Theme.chat_timePaint;
            int ceil322 = (int) Math.ceil(textPaint222.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
            this.timeWidth = ceil322;
            this.timeTextWidth = ceil322;
            messageObject3 = this.currentMessageObject;
            if (messageObject3.scheduled) {
            }
            this.timeWidth = ceil322 - AndroidUtilities.dp(8.0f);
            tLRPC$Message = messageObject.messageOwner;
            if ((tLRPC$Message.flags & 1024) != 0) {
            }
            if (messageObject.type == 20) {
            }
            if (!this.isChat) {
            }
            this.currentRepliesString = null;
            if (this.isPinned) {
            }
            if (messageObject.scheduled) {
            }
            if (this.currentMessageObject.shouldDrawReactions()) {
            }
            effect = getEffect();
            if (this.effectId != (effect != null ? effect.id : 0L)) {
            }
            if (this.effectId != 0) {
            }
            if (str != null) {
            }
        }
        str = null;
        if (messageObject.getDialogId() < 0) {
            str = null;
        }
        if (!this.currentMessageObject.isFromUser()) {
        }
        boolean hasReplies2 = messageObject.hasReplies();
        if (!messageObject.scheduled) {
            tLRPC$Message2 = messageObject.messageOwner;
            if (tLRPC$Message2.via_bot_id == 0) {
                if (this.currentPosition != null) {
                }
                this.edited = (messageObject.messageOwner.flags & LiteMode.FLAG_CHAT_SCALE) == 0 || messageObject.isEditing();
                messageObject2 = this.currentMessageObject;
                if (!messageObject2.notime) {
                }
                str2 = "";
                if (str == null) {
                }
                TextPaint textPaint2222 = Theme.chat_timePaint;
                int ceil3222 = (int) Math.ceil(textPaint2222.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                this.timeWidth = ceil3222;
                this.timeTextWidth = ceil3222;
                messageObject3 = this.currentMessageObject;
                if (messageObject3.scheduled) {
                }
                this.timeWidth = ceil3222 - AndroidUtilities.dp(8.0f);
                tLRPC$Message = messageObject.messageOwner;
                if ((tLRPC$Message.flags & 1024) != 0) {
                }
                if (messageObject.type == 20) {
                }
                if (!this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                if (this.currentMessageObject.shouldDrawReactions()) {
                }
                effect = getEffect();
                if (this.effectId != (effect != null ? effect.id : 0L)) {
                }
                if (this.effectId != 0) {
                }
                if (str != null) {
                }
            }
        }
        this.edited = false;
        messageObject2 = this.currentMessageObject;
        if (!messageObject2.notime) {
        }
        str2 = "";
        if (str == null) {
        }
        TextPaint textPaint22222 = Theme.chat_timePaint;
        int ceil32222 = (int) Math.ceil(textPaint22222.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
        this.timeWidth = ceil32222;
        this.timeTextWidth = ceil32222;
        messageObject3 = this.currentMessageObject;
        if (messageObject3.scheduled) {
        }
        this.timeWidth = ceil32222 - AndroidUtilities.dp(8.0f);
        tLRPC$Message = messageObject.messageOwner;
        if ((tLRPC$Message.flags & 1024) != 0) {
        }
        if (messageObject.type == 20) {
        }
        if (!this.isChat) {
        }
        this.currentRepliesString = null;
        if (this.isPinned) {
        }
        if (messageObject.scheduled) {
        }
        if (this.currentMessageObject.shouldDrawReactions()) {
        }
        effect = getEffect();
        if (this.effectId != (effect != null ? effect.id : 0L)) {
        }
        if (this.effectId != 0) {
        }
        if (str != null) {
        }
    }

    private boolean shouldDrawSelectionOverlay() {
        return hasSelectionOverlay() && ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted || this.isHighlightedAnimated)) && !textIsSelectionMode() && ((this.currentMessagesGroup == null || this.drawSelectionBackground) && this.currentBackgroundDrawable != null);
    }

    private int getSelectionOverlayColor() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider == null) {
            return 0;
        }
        MessageObject messageObject = this.currentMessageObject;
        return resourcesProvider.getColor((messageObject == null || !messageObject.isOut()) ? Theme.key_chat_inBubbleSelectedOverlay : Theme.key_chat_outBubbleSelectedOverlay);
    }

    private boolean hasSelectionOverlay() {
        int selectionOverlayColor = getSelectionOverlayColor();
        return (selectionOverlayColor == 0 || selectionOverlayColor == -65536) ? false : true;
    }

    private boolean isDrawSelectionBackground() {
        MessageObject messageObject;
        return ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted)) && !textIsSelectionMode() && !hasSelectionOverlay() && ((messageObject = this.currentMessageObject) == null || !messageObject.preview);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isOpenChatByShare(MessageObject messageObject) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
        return (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.saved_from_peer == null || ((chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.isReplyOrSelf())) ? false : true;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* JADX WARN: Code restructure failed: missing block: B:20:0x002b, code lost:
        if ((r0 & (r5.isOutOwner() ? 1 : 2)) != 0) goto L20;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean checkNeedDrawShareButton(MessageObject messageObject) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        boolean z;
        MessageObject messageObject2 = this.currentMessageObject;
        if ((!messageObject2.deleted || messageObject2.deletedByThanos) && !messageObject2.isSponsored()) {
            if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
                int i = groupedMessagePosition.flags;
                if ((i & 8) != 0) {
                    z = true;
                }
                z = false;
                if (!this.currentMessagesGroup.isDocuments && !z) {
                    return false;
                }
            }
            return messageObject.needDrawShareButton();
        }
        return false;
    }

    public boolean isInsideBackground(float f, float f2) {
        if (this.currentBackgroundDrawable != null) {
            int i = this.backgroundDrawableLeft;
            if (f >= i && f <= i + this.backgroundDrawableRight) {
                return true;
            }
        }
        return false;
    }

    private void updateCurrentUserAndChat() {
        TLRPC$Peer tLRPC$Peer;
        if (this.currentMessageObject == null) {
            return;
        }
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerChannel) && (this.currentMessageObject.getDialogId() == clientUserId || this.currentMessageObject.getDialogId() == UserObject.REPLY_BOT)) {
            this.currentChat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(tLRPC$MessageFwdHeader.from_id.channel_id));
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer) != null) {
            long j = tLRPC$Peer.user_id;
            if (j != 0) {
                if (!this.isSavedChat) {
                    TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer2.user_id));
                        return;
                    }
                }
                this.currentUser = messagesController.getUser(Long.valueOf(j));
            } else if (tLRPC$Peer.channel_id != 0) {
                if (this.currentMessageObject.isSavedFromMegagroup()) {
                    TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer3.user_id));
                        return;
                    }
                }
                this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$MessageFwdHeader.saved_from_peer.channel_id));
            } else {
                long j2 = tLRPC$Peer.chat_id;
                if (j2 != 0) {
                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer4.user_id));
                    } else {
                        this.currentChat = messagesController.getChat(Long.valueOf(j2));
                    }
                }
            }
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerUser) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$MessageFwdHeader.from_id.user_id));
        } else if (tLRPC$MessageFwdHeader != null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader.saved_from_name) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
            this.currentUser = tLRPC$TL_user;
            tLRPC$TL_user.first_name = tLRPC$MessageFwdHeader.saved_from_name;
        } else if (tLRPC$MessageFwdHeader != null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader.from_name) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            TLRPC$TL_user tLRPC$TL_user2 = new TLRPC$TL_user();
            this.currentUser = tLRPC$TL_user2;
            tLRPC$TL_user2.first_name = tLRPC$MessageFwdHeader.from_name;
        } else {
            long dialogId = this.currentMessageObject.getDialogId();
            long fromChatId = this.currentMessageObject.getFromChatId();
            TLRPC$Chat chat = DialogObject.isChatDialog(fromChatId) ? messagesController.getChat(Long.valueOf(-fromChatId)) : null;
            TLRPC$Chat chat2 = DialogObject.isChatDialog(dialogId) ? messagesController.getChat(Long.valueOf(-dialogId)) : null;
            if (DialogObject.isEncryptedDialog(this.currentMessageObject.getDialogId())) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.currentUser = UserConfig.getInstance(this.currentAccount).getCurrentUser();
                    return;
                }
                TLRPC$EncryptedChat encryptedChat = messagesController.getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(this.currentMessageObject.getDialogId())));
                if (encryptedChat != null) {
                    this.currentUser = messagesController.getUser(Long.valueOf(encryptedChat.user_id));
                }
            } else if (DialogObject.isUserDialog(fromChatId) && (!this.currentMessageObject.messageOwner.post || (chat != null && chat.signature_profiles))) {
                this.currentUser = messagesController.getUser(Long.valueOf(fromChatId));
            } else if (this.currentMessageObject.messageOwner.post && chat2 != null && !chat2.signature_profiles) {
                this.currentChat = chat2;
            } else if (DialogObject.isChatDialog(fromChatId)) {
                this.currentChat = chat;
            } else {
                TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                if (tLRPC$Message.post) {
                    this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$Message.peer_id.channel_id));
                }
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(33:206|(1:715)(2:210|(1:(1:712))(1:214))|215|(1:710)(1:219)|220|(4:222|(1:224)|225|(3:701|(1:705)|706))(2:707|(1:709))|229|(1:700)(1:235)|236|(1:699)(1:240)|241|(1:698)(1:245)|(1:250)|251|(1:697)(1:255)|256|257|(8:(22:406|(9:482|483|(1:485)(1:694)|486|(3:488|(3:490|(3:492|(1:494)(1:690)|495)(1:691)|496)(1:692)|(1:498)(1:689))(1:693)|499|(2:656|(1:688)(10:670|(1:672)(1:687)|673|(1:675)(1:686)|676|(1:678)(1:685)|679|680|(1:682)(1:684)|683))(3:505|(1:507)(2:653|(1:655))|(1:509)(8:639|(1:641)(1:652)|642|(1:644)(1:651)|645|646|(1:648)(1:650)|649))|510|(5:512|(3:586|(1:588)|589)(1:516)|(1:518)|519|(5:578|579|(1:581)(1:585)|582|(1:584))(1:(2:533|(2:538|(1:540)(2:541|(1:543)(2:544|(2:559|(1:577)(8:565|(1:567)|568|(1:570)|571|(1:573)|574|(1:576)))(6:548|(1:550)|551|(1:553)|554|(2:556|(1:558))))))(1:537))(1:532)))(10:590|(2:595|(2:597|(2:599|(3:601|(1:603)|589)(1:604))(1:605))(2:606|(1:608)(2:609|(2:(3:617|(1:619)(1:638)|(2:621|(2:623|(1:625))(2:626|(2:628|(1:630))(2:631|(1:637)))))|589)(1:615))))(1:594)|(0)|519|(3:521|523|525)|578|579|(0)(0)|582|(0)))(4:422|(4:424|(1:426)(2:430|(1:432)(2:433|(1:435)))|427|(1:429))|436|(17:443|(1:445)|446|(2:448|(1:450)(1:477))(2:478|(1:480)(12:481|452|(1:454)(1:476)|455|(1:457)(1:475)|458|(1:460)(1:474)|461|(1:465)|466|(1:472)(1:470)|471))|451|452|(0)(0)|455|(0)(0)|458|(0)(0)|461|(1:473)(2:463|465)|466|(1:468)|472|471)(1:442))|268|269|270|(1:272)|273|(1:275)(1:398)|276|277|(1:279)(1:394)|280|(2:282|(1:284))|285|(1:393)(3:290|(1:292)(1:392)|293)|294|295|(1:297)(1:388)|298|(22:300|(3:302|(2:304|305)(1:307)|306)|308|309|(1:311)|312|(1:383)(2:(1:319)|320)|(13:322|(1:324)|325|326|(4:328|(1:332)|333|(4:335|(2:337|(2:339|340))|341|340))(1:381)|342|(1:346)|347|(4:349|(4:352|(1:366)(4:354|(1:356)(1:365)|(1:358)(1:364)|(2:360|361)(1:363))|362|350)|367|368)|369|(2:376|377)|378|377)|382|325|326|(0)(0)|342|(8:344|346|347|(0)|369|(3:371|376|377)|378|377)|379|346|347|(0)|369|(0)|378|377)|384|(1:386))(3:261|(3:(1:402)(1:405)|403|404)(1:265)|266)|294|295|(0)(0)|298|(0)|384|(0))|267|268|269|270|(0)|273|(0)(0)|276|277|(0)(0)|280|(0)|285|(0)|393) */
    /* JADX WARN: Can't wrap try/catch for region: R(40:21|22|(1:24)|25|(1:941)(2:31|(34:33|34|(3:(1:37)|38|(1:40)(1:41))|(1:43)(1:910)|44|45|(1:47)(1:(1:908)(1:909))|48|(1:50)(1:906)|51|52|53|54|55|56|57|(1:59)(1:900)|60|(7:62|(1:64)|65|(1:67)(3:894|(1:896)(1:898)|897)|68|(3:70|(1:72)|73)(1:893)|74)(1:899)|75|76|77|(3:79|(1:81)|82)(1:889)|83|(1:85)|86|(1:88)(1:888)|89|(2:91|(1:93))|94|(1:96)(2:882|(1:884)(2:885|(1:887)))|97|(1:99)|100))|911|(3:918|(4:931|(1:933)(1:940)|934|(3:936|(1:938)|939))|922)(1:917)|34|(0)|(0)(0)|44|45|(0)(0)|48|(0)(0)|51|52|53|54|55|56|57|(0)(0)|60|(0)(0)|75|76|77|(0)(0)|83|(0)|86|(0)(0)|89|(0)|94|(0)(0)|97|(0)|100) */
    /* JADX WARN: Code restructure failed: missing block: B:108:0x02a5, code lost:
        r45 = "5_5_b";
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x044a, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x04b3, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:798:0x12cd, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:818:0x1347, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:925:0x1586, code lost:
        if ((r2.action instanceof org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate) == false) goto L182;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0275  */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0278  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x02af  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x02b2  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x02bd  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x03ec  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x041f A[Catch: Exception -> 0x044a, TryCatch #3 {Exception -> 0x044a, blocks: (B:136:0x03f9, B:138:0x041f, B:140:0x0436, B:143:0x044c, B:145:0x045e, B:147:0x0462, B:148:0x046d, B:150:0x0474, B:151:0x04ad, B:144:0x0456), top: B:955:0x03f9 }] */
    /* JADX WARN: Removed duplicated region for block: B:144:0x0456 A[Catch: Exception -> 0x044a, TryCatch #3 {Exception -> 0x044a, blocks: (B:136:0x03f9, B:138:0x041f, B:140:0x0436, B:143:0x044c, B:145:0x045e, B:147:0x0462, B:148:0x046d, B:150:0x0474, B:151:0x04ad, B:144:0x0456), top: B:955:0x03f9 }] */
    /* JADX WARN: Removed duplicated region for block: B:147:0x0462 A[Catch: Exception -> 0x044a, TryCatch #3 {Exception -> 0x044a, blocks: (B:136:0x03f9, B:138:0x041f, B:140:0x0436, B:143:0x044c, B:145:0x045e, B:147:0x0462, B:148:0x046d, B:150:0x0474, B:151:0x04ad, B:144:0x0456), top: B:955:0x03f9 }] */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0474 A[Catch: Exception -> 0x044a, TryCatch #3 {Exception -> 0x044a, blocks: (B:136:0x03f9, B:138:0x041f, B:140:0x0436, B:143:0x044c, B:145:0x045e, B:147:0x0462, B:148:0x046d, B:150:0x0474, B:151:0x04ad, B:144:0x0456), top: B:955:0x03f9 }] */
    /* JADX WARN: Removed duplicated region for block: B:151:0x04ad A[Catch: Exception -> 0x044a, TRY_LEAVE, TryCatch #3 {Exception -> 0x044a, blocks: (B:136:0x03f9, B:138:0x041f, B:140:0x0436, B:143:0x044c, B:145:0x045e, B:147:0x0462, B:148:0x046d, B:150:0x0474, B:151:0x04ad, B:144:0x0456), top: B:955:0x03f9 }] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x04ba  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x04d3  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x04db  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0500  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0527  */
    /* JADX WARN: Removed duplicated region for block: B:211:0x05c3  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x05f1  */
    /* JADX WARN: Removed duplicated region for block: B:232:0x068f  */
    /* JADX WARN: Removed duplicated region for block: B:248:0x0719  */
    /* JADX WARN: Removed duplicated region for block: B:251:0x0729  */
    /* JADX WARN: Removed duplicated region for block: B:252:0x072c  */
    /* JADX WARN: Removed duplicated region for block: B:255:0x074b  */
    /* JADX WARN: Removed duplicated region for block: B:256:0x074f  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x0766  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x07b1  */
    /* JADX WARN: Removed duplicated region for block: B:278:0x086b A[Catch: Exception -> 0x0873, TryCatch #6 {Exception -> 0x0873, blocks: (B:276:0x081a, B:278:0x086b, B:281:0x0876, B:283:0x0882, B:285:0x0886, B:287:0x088a, B:291:0x0891, B:293:0x08bd, B:294:0x08c4, B:296:0x08e3, B:300:0x08ed, B:302:0x090a, B:298:0x08e9), top: B:960:0x081a }] */
    /* JADX WARN: Removed duplicated region for block: B:293:0x08bd A[Catch: Exception -> 0x0873, TryCatch #6 {Exception -> 0x0873, blocks: (B:276:0x081a, B:278:0x086b, B:281:0x0876, B:283:0x0882, B:285:0x0886, B:287:0x088a, B:291:0x0891, B:293:0x08bd, B:294:0x08c4, B:296:0x08e3, B:300:0x08ed, B:302:0x090a, B:298:0x08e9), top: B:960:0x081a }] */
    /* JADX WARN: Removed duplicated region for block: B:302:0x090a A[Catch: Exception -> 0x0873, TRY_LEAVE, TryCatch #6 {Exception -> 0x0873, blocks: (B:276:0x081a, B:278:0x086b, B:281:0x0876, B:283:0x0882, B:285:0x0886, B:287:0x088a, B:291:0x0891, B:293:0x08bd, B:294:0x08c4, B:296:0x08e3, B:300:0x08ed, B:302:0x090a, B:298:0x08e9), top: B:960:0x081a }] */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0922  */
    /* JADX WARN: Removed duplicated region for block: B:345:0x09c1  */
    /* JADX WARN: Removed duplicated region for block: B:359:0x09ea  */
    /* JADX WARN: Removed duplicated region for block: B:362:0x09f3  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x0a0f  */
    /* JADX WARN: Removed duplicated region for block: B:371:0x0a1f  */
    /* JADX WARN: Removed duplicated region for block: B:548:0x0d1f  */
    /* JADX WARN: Removed duplicated region for block: B:549:0x0d22  */
    /* JADX WARN: Removed duplicated region for block: B:552:0x0d31  */
    /* JADX WARN: Removed duplicated region for block: B:553:0x0d34  */
    /* JADX WARN: Removed duplicated region for block: B:556:0x0d44  */
    /* JADX WARN: Removed duplicated region for block: B:557:0x0d48  */
    /* JADX WARN: Removed duplicated region for block: B:717:0x10e3  */
    /* JADX WARN: Removed duplicated region for block: B:780:0x123f  */
    /* JADX WARN: Removed duplicated region for block: B:781:0x1245  */
    /* JADX WARN: Removed duplicated region for block: B:784:0x1263  */
    /* JADX WARN: Removed duplicated region for block: B:790:0x1293  */
    /* JADX WARN: Removed duplicated region for block: B:793:0x129d  */
    /* JADX WARN: Removed duplicated region for block: B:794:0x12a0  */
    /* JADX WARN: Removed duplicated region for block: B:797:0x12b9 A[Catch: Exception -> 0x12cd, TryCatch #2 {Exception -> 0x12cd, blocks: (B:795:0x12b1, B:797:0x12b9, B:801:0x12d1, B:803:0x12d6, B:805:0x12f7, B:806:0x1318, B:809:0x131e, B:811:0x1322, B:815:0x132b, B:816:0x133d), top: B:954:0x12b1 }] */
    /* JADX WARN: Removed duplicated region for block: B:800:0x12d0  */
    /* JADX WARN: Removed duplicated region for block: B:803:0x12d6 A[Catch: Exception -> 0x12cd, TryCatch #2 {Exception -> 0x12cd, blocks: (B:795:0x12b1, B:797:0x12b9, B:801:0x12d1, B:803:0x12d6, B:805:0x12f7, B:806:0x1318, B:809:0x131e, B:811:0x1322, B:815:0x132b, B:816:0x133d), top: B:954:0x12b1 }] */
    /* JADX WARN: Removed duplicated region for block: B:821:0x1352 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:824:0x135c  */
    /* JADX WARN: Removed duplicated region for block: B:827:0x1362 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01fa  */
    /* JADX WARN: Removed duplicated region for block: B:854:0x13f7 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:868:0x1445 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:878:0x14a5 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:896:0x1508 A[Catch: Exception -> 0x1359, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:906:0x1543 A[Catch: Exception -> 0x1359, TRY_LEAVE, TryCatch #4 {Exception -> 0x1359, blocks: (B:819:0x134a, B:821:0x1352, B:825:0x135d, B:827:0x1362, B:829:0x1379, B:831:0x1385, B:832:0x1389, B:833:0x138b, B:835:0x1395, B:836:0x139a, B:838:0x139e, B:840:0x13a2, B:844:0x13aa, B:847:0x13e0, B:852:0x13ef, B:854:0x13f7, B:856:0x1410, B:858:0x1416, B:859:0x1420, B:861:0x142c, B:863:0x1432, B:867:0x1442, B:869:0x1466, B:871:0x1474, B:875:0x147f, B:876:0x149d, B:878:0x14a5, B:879:0x14af, B:881:0x14b7, B:883:0x14d5, B:891:0x14e3, B:892:0x14e9, B:893:0x14f3, B:894:0x14ff, B:896:0x1508, B:898:0x1510, B:903:0x152f, B:902:0x151d, B:873:0x1479, B:868:0x1445, B:851:0x13e7, B:904:0x153d, B:906:0x1543), top: B:956:0x134a }] */
    /* JADX WARN: Removed duplicated region for block: B:911:0x1560  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0251  */
    /* JADX WARN: Removed duplicated region for block: B:921:0x157a  */
    /* JADX WARN: Removed duplicated region for block: B:928:0x158c  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x1598  */
    /* JADX WARN: Removed duplicated region for block: B:936:0x15bd  */
    /* JADX WARN: Removed duplicated region for block: B:939:0x15d0  */
    /* JADX WARN: Removed duplicated region for block: B:940:0x15d6  */
    /* JADX WARN: Removed duplicated region for block: B:945:0x1608  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x025c  */
    /* JADX WARN: Type inference failed for: r0v10, types: [android.text.StaticLayout[]] */
    /* JADX WARN: Type inference failed for: r11v48, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r12v41 */
    /* JADX WARN: Type inference failed for: r14v10, types: [org.telegram.tgnet.TLRPC$Document] */
    /* JADX WARN: Type inference failed for: r2v1 */
    /* JADX WARN: Type inference failed for: r2v2, types: [org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$User, java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v93 */
    /* JADX WARN: Type inference failed for: r3v7 */
    /* JADX WARN: Type inference failed for: r3v8, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r3v83 */
    /* JADX WARN: Type inference failed for: r6v122 */
    /* JADX WARN: Type inference failed for: r6v17, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r6v19, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r6v43, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r8v13 */
    /* JADX WARN: Type inference failed for: r8v3 */
    /* JADX WARN: Type inference failed for: r8v4, types: [boolean] */
    /* JADX WARN: Type inference failed for: r8v6 */
    /* JADX WARN: Type inference failed for: r8v7 */
    /* JADX WARN: Type inference failed for: r9v172 */
    /* JADX WARN: Type inference failed for: r9v173, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r9v174 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageObjectInternal(MessageObject messageObject) {
        String str;
        SpannableStringBuilder replaceTags;
        String str2;
        String str3;
        SpannableStringBuilder spannableStringBuilder;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        ?? r2;
        String str9;
        ?? r3;
        String str10;
        boolean z;
        CharSequence ellipsize;
        int i;
        int i2;
        SpannableStringBuilder spannableStringBuilder2;
        int i3;
        boolean z2;
        String str11;
        SpannableStringBuilder spannableStringBuilder3;
        boolean z3;
        String str12;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        TLObject peerObject;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        MessageObject messageObject2;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        StaticLayout staticLayout;
        float f;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        boolean z4;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        int i4;
        TLRPC$Photo tLRPC$Photo;
        int i5;
        boolean z5;
        CharSequence charSequence;
        String str13;
        TextPaint textPaint;
        String str14;
        String str15;
        ?? r8;
        CharSequence charSequence2;
        MessageObject messageObject3;
        CharSequence removeDiacritics;
        TLRPC$Chat chat;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        String str16;
        boolean z6;
        CharSequence replaceEmoji;
        ArrayList<TLRPC$MessageEntity> arrayList;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader3;
        CharSequence charSequence3;
        CharSequence charSequence4;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader4;
        TLRPC$MessageMedia tLRPC$MessageMedia2;
        TLRPC$Photo tLRPC$Photo2;
        TLObject tLObject;
        TLRPC$PhotoSize tLRPC$PhotoSize3;
        int i6;
        int i7;
        int i8;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader5;
        boolean z7;
        SpannableStringBuilder spannableStringBuilder4;
        int i9;
        int i10;
        String ellipsize2;
        int i11;
        int i12;
        SpannableStringBuilder spannableStringBuilder5;
        ?? r9;
        StaticLayout.Builder obtain;
        StaticLayout.Builder alignment;
        StaticLayout.Builder includePad;
        StaticLayout build;
        boolean z8;
        StaticLayout.Builder maxLines;
        MessageTopicButton messageTopicButton;
        ChatMessageCellDelegate chatMessageCellDelegate3;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        int dp;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        String str17;
        String str18;
        ChatMessageCellDelegate chatMessageCellDelegate4;
        SpannableStringBuilder spannableStringBuilder6;
        int i13;
        int i14;
        String str19;
        Object obj;
        StaticLayout staticLayout2;
        int themedColor;
        SpannableStringBuilder spannableStringBuilder7;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if ((tLRPC$Message.flags & 1024) != 0 || tLRPC$Message.replies != null) {
            MessageObject messageObject4 = this.currentMessageObject;
            if (!messageObject4.scheduled && !messageObject4.isSponsored() && !this.currentMessageObject.viewsReloaded) {
                MessagesController.getInstance(this.currentAccount).addToViewsQueue(this.currentMessageObject);
                this.currentMessageObject.viewsReloaded = true;
            }
        }
        updateCurrentUserAndChat();
        setAvatar(messageObject);
        measureTime(messageObject);
        this.namesOffset = 0;
        TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
        if (tLRPC$Message2.via_bot_id != 0) {
            TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.via_bot_id));
            if (user != null && !TextUtils.isEmpty(user.username)) {
                String str20 = "@" + user.username;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str20));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
                this.currentViaBotUser = user;
                str = str20;
            }
            str = null;
            replaceTags = null;
        } else {
            if (!TextUtils.isEmpty(tLRPC$Message2.via_bot_name)) {
                str = "@" + messageObject.messageOwner.via_bot_name;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
            }
            str = null;
            replaceTags = null;
        }
        boolean isNeedAuthorName = isNeedAuthorName();
        boolean z9 = (messageObject.messageOwner.fwd_from == null || messageObject.type == 14) && str != null;
        if (this.hasPsaHint || (!isNeedAuthorName && !z9)) {
            str2 = "5_5_b";
            str3 = "ViaBot";
            spannableStringBuilder = replaceTags;
            str4 = "";
            str5 = "%s (%s)";
            str6 = "Loading";
            str7 = "A ";
            str8 = "\n";
            r2 = 0;
            str9 = str;
            this.currentNameString = null;
            this.nameLayout = null;
            r3 = 0;
            this.nameWidth = 0;
            this.nameOffsetX = 0.0f;
        } else {
            this.drawNameLayout = true;
            int maxNameWidth = getMaxNameWidth();
            this.nameWidth = maxNameWidth;
            if (maxNameWidth < 0) {
                this.nameWidth = AndroidUtilities.dp(100.0f);
            }
            if (!this.isMegagroup || (tLRPC$Chat = this.currentChat) == null || messageObject.messageOwner.post_author == null) {
                str17 = str;
                spannableStringBuilder = replaceTags;
                str18 = "Loading";
                str7 = "A ";
            } else {
                str18 = "Loading";
                str7 = "A ";
                str17 = str;
                spannableStringBuilder = replaceTags;
                if (tLRPC$Chat.id == (-this.currentMessageObject.getFromChatId())) {
                    spannableStringBuilder6 = new SpannableStringBuilder(messageObject.messageOwner.post_author.replace("\n", ""));
                    i13 = this.currentMessageObject.messageOwner.from_boosts_applied;
                    if (i13 > 0) {
                        if (spannableStringBuilder6 == null) {
                            spannableStringBuilder6 = new SpannableStringBuilder();
                        }
                        Pair<SpannableString, BoostCounterSpan> create = BoostCounterSpan.create(this, Theme.chat_namePaint, i13);
                        BoostCounterSpan boostCounterSpan = (BoostCounterSpan) create.second;
                        this.boostCounterSpan = boostCounterSpan;
                        boostCounterSpan.isRtl = AndroidUtilities.isRTL(spannableStringBuilder6);
                        if (this.boostCounterSpan.isRtl) {
                            spannableStringBuilder6.insert(0, (CharSequence) create.first);
                        } else {
                            spannableStringBuilder6.append((CharSequence) create.first);
                        }
                    }
                    if (spannableStringBuilder6 == null) {
                        i14 = (int) new StaticLayout(spannableStringBuilder6, Theme.chat_adminPaint, AndroidUtilities.dp(300.0f), Layout.Alignment.ALIGN_NORMAL, 0.0f, 0.0f, false).getLineWidth(0);
                        this.nameWidth -= i14;
                    } else {
                        i14 = 0;
                    }
                    this.currentNameStatus = null;
                    str19 = messageObject.customName;
                    if (str19 == null) {
                        this.currentNameString = str19;
                    } else if (isNeedAuthorName) {
                        this.currentNameString = getAuthorName();
                        this.currentNameStatus = getAuthorStatus();
                    } else {
                        this.currentNameString = "";
                    }
                    int dp2 = AndroidUtilities.dp(!this.currentMessageObject.isSponsored() ? -24.0f : 0.0f);
                    CharSequence removeDiacritics2 = AndroidUtilities.removeDiacritics(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '));
                    str2 = "5_5_b";
                    removeDiacritics2 = Emoji.replaceEmoji(removeDiacritics2, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                    TextPaint textPaint2 = Theme.chat_namePaint;
                    int i15 = this.nameWidth + dp2;
                    int i16 = z9 ? this.viaWidth : 0;
                    TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
                    CharSequence ellipsize3 = TextUtils.ellipsize(removeDiacritics2, textPaint2, i15 - i16, truncateAt);
                    if (z9) {
                        int ceil = (int) Math.ceil(Theme.chat_namePaint.measureText(ellipsize3, 0, ellipsize3.length()));
                        this.viaNameWidth = ceil;
                        if (ceil != 0) {
                            this.viaNameWidth = ceil + AndroidUtilities.dp(4.0f);
                        }
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            themedColor = getThemedColor(Theme.key_chat_stickerViaBotNameText);
                        } else {
                            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                        }
                        String string = LocaleController.getString("ViaBot", R.string.ViaBot);
                        if (this.currentNameString.length() > 0) {
                            SpannableStringBuilder spannableStringBuilder8 = new SpannableStringBuilder();
                            str4 = "";
                            str8 = "\n";
                            str9 = str17;
                            spannableStringBuilder8.append(ellipsize3).append((CharSequence) " ").append((CharSequence) string).append((CharSequence) " ").append((CharSequence) str9);
                            str6 = str18;
                            str3 = "ViaBot";
                            TypefaceSpan typefaceSpan = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan;
                            str5 = "%s (%s)";
                            spannableStringBuilder8.setSpan(typefaceSpan, ellipsize3.length() + 1, ellipsize3.length() + 1 + string.length(), 33);
                            if (this.currentNameStatus != null) {
                                this.viaNameWidth += AndroidUtilities.dp(28.0f);
                                spannableStringBuilder8.setSpan(new DialogCell.FixedWidthSpan(AndroidUtilities.dp(28.0f)), ellipsize3.length(), ellipsize3.length() + 1, 33);
                            }
                            TypefaceSpan typefaceSpan2 = new TypefaceSpan(AndroidUtilities.bold(), 0, themedColor);
                            this.viaSpan2 = typefaceSpan2;
                            spannableStringBuilder8.setSpan(typefaceSpan2, ellipsize3.length() + 2 + string.length(), spannableStringBuilder8.length(), 33);
                            spannableStringBuilder7 = spannableStringBuilder8;
                        } else {
                            str3 = "ViaBot";
                            str5 = "%s (%s)";
                            str4 = "";
                            str8 = "\n";
                            str9 = str17;
                            str6 = str18;
                            this.viaOnly = true;
                            SpannableStringBuilder spannableStringBuilder9 = new SpannableStringBuilder();
                            spannableStringBuilder9.append((CharSequence) string).append((CharSequence) " ").append((CharSequence) str9);
                            TypefaceSpan typefaceSpan3 = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan3;
                            spannableStringBuilder9.setSpan(typefaceSpan3, 0, string.length() + 1, 33);
                            TypefaceSpan typefaceSpan4 = new TypefaceSpan(AndroidUtilities.bold(), 0, themedColor);
                            this.viaSpan2 = typefaceSpan4;
                            spannableStringBuilder9.setSpan(typefaceSpan4, string.length() + 1, spannableStringBuilder9.length(), 33);
                            spannableStringBuilder7 = spannableStringBuilder9;
                        }
                        ellipsize3 = TextUtils.ellipsize(spannableStringBuilder7, Theme.chat_namePaint, this.nameWidth + dp2, truncateAt);
                    } else {
                        str3 = "ViaBot";
                        str4 = "";
                        str5 = "%s (%s)";
                        str8 = "\n";
                        str9 = str17;
                        str6 = str18;
                    }
                    CharSequence charSequence5 = ellipsize3;
                    TextPaint textPaint3 = Theme.chat_namePaint;
                    int dp3 = this.nameWidth + dp2 + AndroidUtilities.dp(2.0f);
                    Layout.Alignment alignment2 = Layout.Alignment.ALIGN_NORMAL;
                    staticLayout2 = new StaticLayout(charSequence5, textPaint3, dp3, alignment2, 1.0f, 0.0f, false);
                    this.nameLayout = staticLayout2;
                    if (staticLayout2.getLineCount() > 0) {
                        int ceil2 = (int) Math.ceil(this.nameLayout.getLineWidth(0));
                        this.nameLayoutWidth = ceil2;
                        this.nameWidth = ceil2;
                        if (!messageObject.isAnyKindOfSticker()) {
                            this.namesOffset = (int) (this.namesOffset + AndroidUtilities.dp(5.0f) + Theme.chat_namePaint.getTextSize());
                        }
                        this.nameOffsetX = this.nameLayout.getLineLeft(0);
                    } else {
                        this.nameLayoutWidth = 0;
                        this.nameWidth = 0;
                        this.nameOffsetX = 0.0f;
                    }
                    if (this.currentNameStatus != null) {
                        this.nameWidth += AndroidUtilities.dp(20.0f);
                    }
                    this.nameWidth -= dp2;
                    if (spannableStringBuilder6 != null) {
                        StaticLayout staticLayout3 = new StaticLayout(spannableStringBuilder6, Theme.chat_adminPaint, i14 + AndroidUtilities.dp(2.0f), alignment2, 1.0f, 0.0f, false);
                        this.adminLayout = staticLayout3;
                        this.nameWidth = (int) (this.nameWidth + staticLayout3.getLineWidth(0) + AndroidUtilities.dp(8.0f));
                        this.boostCounterBounds = new RectF();
                    } else {
                        this.adminLayout = null;
                        this.boostCounterBounds = null;
                    }
                    if (this.currentNameStatusDrawable == null) {
                        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(20.0f));
                        this.currentNameStatusDrawable = swapAnimatedEmojiDrawable;
                        if (this.attachedToWindow) {
                            swapAnimatedEmojiDrawable.attach();
                        }
                    }
                    obj = this.currentNameStatus;
                    if (obj == null) {
                        this.currentNameStatusDrawable.set((Drawable) null, false);
                    } else if (obj instanceof Long) {
                        this.currentNameStatusDrawable.set(((Long) obj).longValue(), false);
                    } else if (obj instanceof Drawable) {
                        this.currentNameStatusDrawable.set((Drawable) obj, false);
                    }
                    r2 = 0;
                    if (this.currentNameString.length() == 0) {
                        this.currentNameString = null;
                    }
                    r3 = 0;
                }
            }
            if (this.isMegagroup && this.currentChat != null && this.currentMessageObject.isForwardedChannelPost()) {
                spannableStringBuilder6 = new SpannableStringBuilder(LocaleController.getString("DiscussChannel", R.string.DiscussChannel));
            } else {
                if ((this.currentUser != null || this.currentChat != null) && !this.currentMessageObject.isOutOwner() && !this.currentMessageObject.isAnyKindOfSticker() && this.currentMessageObject.type != 5 && (chatMessageCellDelegate4 = this.delegate) != null) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    String adminRank = chatMessageCellDelegate4.getAdminRank(tLRPC$User != null ? tLRPC$User.id : this.currentChat.id);
                    if (adminRank != null) {
                        if (adminRank.length() == 0) {
                            adminRank = LocaleController.getString("ChatAdmin", R.string.ChatAdmin);
                        }
                        spannableStringBuilder6 = new SpannableStringBuilder(adminRank);
                    }
                }
                spannableStringBuilder6 = null;
            }
            i13 = this.currentMessageObject.messageOwner.from_boosts_applied;
            if (i13 > 0) {
            }
            if (spannableStringBuilder6 == null) {
            }
            this.currentNameStatus = null;
            str19 = messageObject.customName;
            if (str19 == null) {
            }
            int dp22 = AndroidUtilities.dp(!this.currentMessageObject.isSponsored() ? -24.0f : 0.0f);
            CharSequence removeDiacritics22 = AndroidUtilities.removeDiacritics(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '));
            str2 = "5_5_b";
            removeDiacritics22 = Emoji.replaceEmoji(removeDiacritics22, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
            TextPaint textPaint22 = Theme.chat_namePaint;
            int i152 = this.nameWidth + dp22;
            if (z9) {
            }
            TextUtils.TruncateAt truncateAt2 = TextUtils.TruncateAt.END;
            CharSequence ellipsize32 = TextUtils.ellipsize(removeDiacritics22, textPaint22, i152 - i16, truncateAt2);
            if (z9) {
            }
            CharSequence charSequence52 = ellipsize32;
            TextPaint textPaint32 = Theme.chat_namePaint;
            int dp32 = this.nameWidth + dp22 + AndroidUtilities.dp(2.0f);
            Layout.Alignment alignment22 = Layout.Alignment.ALIGN_NORMAL;
            staticLayout2 = new StaticLayout(charSequence52, textPaint32, dp32, alignment22, 1.0f, 0.0f, false);
            this.nameLayout = staticLayout2;
            if (staticLayout2.getLineCount() > 0) {
            }
            if (this.currentNameStatus != null) {
            }
            this.nameWidth -= dp22;
            if (spannableStringBuilder6 != null) {
            }
            if (this.currentNameStatusDrawable == null) {
            }
            obj = this.currentNameStatus;
            if (obj == null) {
            }
            r2 = 0;
            if (this.currentNameString.length() == 0) {
            }
            r3 = 0;
        }
        this.currentForwardUser = r2;
        this.currentForwardNameString = r2;
        this.currentForwardChannel = r2;
        this.currentForwardName = r2;
        ?? r0 = this.forwardedNameLayout;
        r0[r3] = r2;
        r0[1] = r2;
        this.replyPanelIsForward = r3;
        this.forwardedNameWidth = r3;
        if (messageObject.isForwarded()) {
            TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.from_id;
            if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
                this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
            }
        }
        if (messageObject.type != 23 || (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition2 = this.currentPosition) == null || groupedMessagePosition2.minY == 0))) {
            int i17 = messageObject.type;
            if (i17 != 23 && (str12 = messageObject.messageOwner.fwd_from.from_name) != null) {
                this.currentForwardName = str12;
            }
            if (i17 != 23 || this.currentForwardUser != null || this.currentForwardChannel != null || this.currentForwardName != null) {
                if (this.forwardAvatar == null) {
                    AvatarSpan avatarSpan = new AvatarSpan(this, this.currentAccount);
                    this.forwardAvatar = avatarSpan;
                    avatarSpan.translate(0.0f, AndroidUtilities.dp(-0.33f));
                }
                this.forwardAvatar.setSize((((int) Theme.chat_forwardNamePaint.getTextSize()) * 1.23f) / AndroidUtilities.density);
                if (messageObject.type != 23) {
                    str11 = LocaleController.getString(R.string.ForwardedStory);
                    this.currentForwardNameString = str11;
                    long peerDialogId = DialogObject.getPeerDialogId(messageObject.messageOwner.media.peer);
                    if (peerDialogId > 0) {
                        AvatarSpan avatarSpan2 = this.forwardAvatar;
                        TLRPC$User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerDialogId));
                        this.currentForwardUser = user2;
                        avatarSpan2.setUser(user2);
                    } else {
                        AvatarSpan avatarSpan3 = this.forwardAvatar;
                        TLRPC$Chat chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerDialogId));
                        this.currentForwardChannel = chat2;
                        avatarSpan3.setChat(chat2);
                    }
                    String removeDiacritics3 = AndroidUtilities.removeDiacritics(getNameFromDialogId(peerDialogId));
                    if (peerDialogId >= 0 || this.currentForwardChannel != null) {
                        z3 = true;
                    } else {
                        removeDiacritics3 = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate);
                        z3 = false;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append(z3 ? str7 : str4);
                    sb.append(removeDiacritics3);
                    SpannableStringBuilder spannableStringBuilder10 = new SpannableStringBuilder(sb.toString());
                    spannableStringBuilder10.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder10.length(), 33);
                    if (z3) {
                        spannableStringBuilder10.setSpan(this.forwardAvatar, 0, 1, 33);
                    }
                    this.forwardedNameWidth = getMaxNameWidth();
                    str10 = str5;
                    z2 = false;
                    spannableStringBuilder3 = spannableStringBuilder10;
                } else {
                    TLRPC$Chat tLRPC$Chat2 = this.currentForwardChannel;
                    if (tLRPC$Chat2 != null) {
                        TLRPC$User tLRPC$User2 = this.currentForwardUser;
                        if (tLRPC$User2 != null) {
                            Object[] objArr = {tLRPC$Chat2.title, UserObject.getUserName(tLRPC$User2)};
                            str10 = str5;
                            this.currentForwardNameString = String.format(str10, objArr);
                            this.forwardAvatar.setUser(this.currentForwardUser);
                        } else {
                            str10 = str5;
                            if (!TextUtils.isEmpty(messageObject.messageOwner.fwd_from.post_author)) {
                                this.currentForwardNameString = String.format(str10, this.currentForwardChannel.title, messageObject.messageOwner.fwd_from.post_author);
                                this.forwardAvatar.setChat(this.currentForwardChannel);
                            } else {
                                TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                                this.currentForwardNameString = tLRPC$Chat3.title;
                                this.forwardAvatar.setChat(tLRPC$Chat3);
                            }
                        }
                    } else {
                        str10 = str5;
                        TLRPC$User tLRPC$User3 = this.currentForwardUser;
                        if (tLRPC$User3 != null) {
                            this.currentForwardNameString = UserObject.getUserName(tLRPC$User3);
                            this.forwardAvatar.setUser(this.currentForwardUser);
                        } else {
                            this.currentForwardNameString = this.currentForwardName;
                            z = false;
                            this.forwardedNameWidth = getMaxNameWidth();
                            String forwardedMessageText = getForwardedMessageText(messageObject);
                            if (this.hasPsaHint) {
                                this.forwardedNameWidth -= AndroidUtilities.dp(36.0f);
                            }
                            StringBuilder sb2 = new StringBuilder();
                            sb2.append(!z ? str7 : str4);
                            sb2.append(this.currentForwardNameString.replace('\n', ' '));
                            String removeDiacritics4 = AndroidUtilities.removeDiacritics(TextUtils.ellipsize(sb2.toString(), Theme.chat_replyNamePaint, (this.forwardedNameWidth - this.viaWidth) - AndroidUtilities.dp(!z ? 17.33f : 0.0f), TextUtils.TruncateAt.END).toString());
                            if (spannableStringBuilder == null) {
                                spannableStringBuilder2 = new SpannableStringBuilder(String.format("%s %s %s", removeDiacritics4, LocaleController.getString(str3, R.string.ViaBot), str9));
                                this.viaNameWidth = (int) Math.ceil(Theme.chat_forwardNamePaint.measureText(removeDiacritics4));
                                TypefaceSpan typefaceSpan5 = new TypefaceSpan(AndroidUtilities.bold());
                                int length = spannableStringBuilder2.length() - str9.length();
                                i = 1;
                                i2 = 33;
                                spannableStringBuilder2.setSpan(typefaceSpan5, length - 1, spannableStringBuilder2.length(), 33);
                            } else {
                                i = 1;
                                i2 = 33;
                                spannableStringBuilder2 = new SpannableStringBuilder(removeDiacritics4);
                            }
                            if (z || spannableStringBuilder2.length() <= i) {
                                i3 = 0;
                            } else {
                                i3 = 0;
                                spannableStringBuilder2.setSpan(this.forwardAvatar, 0, i, i2);
                            }
                            this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(ellipsize, i3, ellipsize.length()))) / 2;
                            if (this.currentForwardName == null && messageObject.messageOwner.fwd_from.from_id == null) {
                                z2 = false;
                            } else {
                                z2 = false;
                                spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 33);
                            }
                            str11 = forwardedMessageText;
                            spannableStringBuilder3 = spannableStringBuilder2;
                        }
                    }
                    z = true;
                    this.forwardedNameWidth = getMaxNameWidth();
                    String forwardedMessageText2 = getForwardedMessageText(messageObject);
                    if (this.hasPsaHint) {
                    }
                    StringBuilder sb22 = new StringBuilder();
                    sb22.append(!z ? str7 : str4);
                    sb22.append(this.currentForwardNameString.replace('\n', ' '));
                    String removeDiacritics42 = AndroidUtilities.removeDiacritics(TextUtils.ellipsize(sb22.toString(), Theme.chat_replyNamePaint, (this.forwardedNameWidth - this.viaWidth) - AndroidUtilities.dp(!z ? 17.33f : 0.0f), TextUtils.TruncateAt.END).toString());
                    if (spannableStringBuilder == null) {
                    }
                    if (z) {
                    }
                    i3 = 0;
                    this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(ellipsize, i3, ellipsize.length()))) / 2;
                    if (this.currentForwardName == null) {
                    }
                    z2 = false;
                    spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 33);
                    str11 = forwardedMessageText2;
                    spannableStringBuilder3 = spannableStringBuilder2;
                }
                try {
                    spannableStringBuilder3 = Emoji.replaceEmoji((CharSequence) spannableStringBuilder3, Theme.chat_forwardNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), z2);
                } catch (Exception unused) {
                }
                TextUtils.TruncateAt truncateAt3 = TextUtils.TruncateAt.END;
                CharSequence ellipsize4 = TextUtils.ellipsize(spannableStringBuilder3, Theme.chat_forwardNamePaint, this.forwardedNameWidth, truncateAt3);
                try {
                    StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                    Layout.Alignment alignment3 = Layout.Alignment.ALIGN_NORMAL;
                    staticLayoutArr[1] = new StaticLayout(ellipsize4, Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), alignment3, 1.0f, 0.0f, false);
                    this.forwardedNameLayout[0] = new StaticLayout(TextUtils.ellipsize(AndroidUtilities.replaceTags(str11), Theme.chat_forwardNamePaint, this.forwardedNameWidth, truncateAt3), Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), alignment3, 1.0f, 0.0f, false);
                    if (this.forwardBg == null) {
                        this.forwardBg = new ForwardBackground(this);
                    }
                    this.forwardBg.set(this.forwardedNameLayout, this.currentMessageObject.isOutOwner() && (!this.drawNameLayout || this.nameLayout == null) && this.pinnedTop);
                    int max = Math.max((int) Math.ceil(this.forwardedNameLayout[0].getLineWidth(0)), (int) Math.ceil(this.forwardedNameLayout[1].getLineWidth(0)));
                    this.forwardedNameWidth = max;
                    if (this.hasPsaHint) {
                        this.forwardedNameWidth = max + AndroidUtilities.dp(36.0f);
                    }
                    this.forwardNameOffsetX[0] = this.forwardedNameLayout[0].getLineLeft(0);
                    this.forwardNameOffsetX[1] = this.forwardedNameLayout[1].getLineLeft(0);
                    if ((messageObject.type != 5 && !messageObject.isAnyKindOfSticker()) || messageObject.type == 19) {
                        int dp4 = (int) (this.namesOffset + AndroidUtilities.dp(8.0f) + (Theme.chat_forwardNamePaint.getTextSize() * 2.0f));
                        this.namesOffset = dp4;
                        if (messageObject.type == 19) {
                            this.namesOffset = dp4 + AndroidUtilities.dp(8.0f);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                this.drawTopic = false;
                float f2 = 10.0f;
                if (this.isThreadChat && (chatMessageCellDelegate3 = this.delegate) != null && chatMessageCellDelegate3.shouldShowTopicButton(this) && !this.pinnedTop && (MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true) != 0 || messageObject.replyToForumTopic != null)) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                    if (groupedMessagePosition3 == null || groupedMessagePosition3.minY == 0) {
                        long topicId = messageObject.replyToForumTopic == null ? MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true) : tLRPC$TL_forumTopic.id;
                        TLRPC$TL_forumTopic tLRPC$TL_forumTopic2 = messageObject.replyToForumTopic;
                        if (tLRPC$TL_forumTopic2 == null) {
                            tLRPC$TL_forumTopic2 = MessagesController.getInstance(this.currentAccount).getTopicsController().findTopic(-messageObject.getDialogId(), topicId);
                        }
                        if (tLRPC$TL_forumTopic2 != null) {
                            this.drawTopic = true;
                            int maxNameWidth2 = getMaxNameWidth();
                            if (!messageObject.shouldDrawWithoutBackground()) {
                                maxNameWidth2 -= AndroidUtilities.dp(10.0f);
                            } else {
                                if (messageObject.type == 5) {
                                    dp = AndroidUtilities.dp(48.0f);
                                } else if (messageObject.isAnyKindOfSticker()) {
                                    dp = AndroidUtilities.dp(25.0f);
                                }
                                maxNameWidth2 += dp;
                            }
                            if (this.topicButton == null) {
                                this.topicButton = new MessageTopicButton(getContext(), this.resourcesProvider) { // from class: org.telegram.ui.Cells.ChatMessageCell.9
                                    @Override // org.telegram.ui.Components.Forum.MessageTopicButton
                                    protected void onClick() {
                                        if (ChatMessageCell.this.delegate != null) {
                                            ChatMessageCell.this.delegate.didPressTopicButton(ChatMessageCell.this);
                                        }
                                    }
                                };
                            }
                            this.namesOffset += this.topicButton.set(this, messageObject, tLRPC$TL_forumTopic2, maxNameWidth2);
                        }
                    }
                } else {
                    chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null && chatMessageCellDelegate.shouldShowDialogButton(this) && !this.pinnedTop && messageObject.searchType == 1 && (((groupedMessagePosition = this.currentPosition) == null || groupedMessagePosition.minY == 0) && (peerObject = messageObject.getPeerObject()) != null)) {
                        this.drawTopic = true;
                        int maxNameWidth3 = getMaxNameWidth();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                            maxNameWidth3 -= AndroidUtilities.dp(10.0f);
                        }
                        if (this.topicButton == null) {
                            this.topicButton = new MessageTopicButton(getContext(), this.resourcesProvider) { // from class: org.telegram.ui.Cells.ChatMessageCell.10
                                @Override // org.telegram.ui.Components.Forum.MessageTopicButton
                                protected void onClick() {
                                    if (ChatMessageCell.this.delegate != null) {
                                        ChatMessageCell.this.delegate.didPressDialogButton(ChatMessageCell.this);
                                    }
                                }
                            };
                        }
                        this.namesOffset += this.topicButton.set(this, messageObject, peerObject, maxNameWidth3);
                    }
                }
                if (!this.drawTopic && (messageTopicButton = this.topicButton) != null) {
                    messageTopicButton.onDetached(this);
                    this.topicButton = null;
                }
                if (((messageObject.isGiveawayResults() && ((!this.isThreadChat || messageObject.isQuickReply() || this.isSavedChat || messageObject.getReplyTopMsgId(this.isForum) != 0 || this.isForumGeneral) && messageObject.hasValidReplyMessageObject())) || ((messageObject.messageOwner.fwd_from != null && messageObject.isDice()) || ((tLRPC$MessageReplyHeader = messageObject.messageOwner.reply_to) != null && (tLRPC$MessageReplyHeader.story_id != 0 || !TextUtils.isEmpty(tLRPC$MessageReplyHeader.quote_text) || messageObject.messageOwner.reply_to.reply_from != null)))) && !messageObject.isRepostPreview) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                    if (groupedMessagePosition4 == null || groupedMessagePosition4.minY == 0) {
                        if ((messageObject.isAnyKindOfSticker() || messageObject.type == 5) && messageObject.type != 19) {
                            f = 20.0f;
                        } else {
                            f = 20.0f;
                            int dp5 = (int) (this.namesOffset + AndroidUtilities.dp(20.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                            this.namesOffset = dp5;
                            int i18 = messageObject.type;
                            if (i18 == 19 && !this.drawForwardedName) {
                                this.namesOffset = dp5 + AndroidUtilities.dp(12.0f);
                            } else if (i18 != 0) {
                                this.namesOffset = dp5 + AndroidUtilities.dp(5.0f);
                            }
                        }
                        if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                            this.namesOffset += AndroidUtilities.dp(2.0f);
                        }
                        int maxNameWidth4 = getMaxNameWidth();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                            if (!messageObject.isOutOwner()) {
                                f = 10.0f;
                            }
                            maxNameWidth4 -= AndroidUtilities.dp(f);
                            if (messageObject.type != 0 || messageObject.needDrawShareButton()) {
                                if (messageObject.isSaved && messageObject.isOutOwner()) {
                                    f2 = 35.0f;
                                }
                                maxNameWidth4 -= AndroidUtilities.dp(f2);
                            }
                        } else if (messageObject.type == 5) {
                            maxNameWidth4 += AndroidUtilities.dp(13.0f);
                        }
                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader6 = messageObject.messageOwner.reply_to;
                        boolean z10 = (tLRPC$MessageReplyHeader6 == null || (tLRPC$MessageReplyHeader6.flags & 64) == 0 || tLRPC$MessageReplyHeader6.quote_text == null) ? false : true;
                        this.hasReplyQuote = z10;
                        boolean z11 = z10 && tLRPC$MessageReplyHeader6.quote;
                        this.isReplyQuote = z11;
                        boolean z12 = z11 && tLRPC$MessageReplyHeader6.quote;
                        if (z11 && z12 && this.replyQuoteDrawable == null) {
                            this.replyQuoteDrawable = getContext().getResources().getDrawable(R.drawable.mini_quote).mutate();
                            this.replyQuoteDrawableColor = -1;
                        }
                        TextPaint textPaint4 = (this.isReplyQuote && messageObject.shouldDrawWithoutBackground()) ? Theme.chat_quoteTextPaint : Theme.chat_replyTextPaint;
                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader7 = messageObject.messageOwner.reply_to;
                        try {
                            if (tLRPC$MessageReplyHeader7 != null && tLRPC$MessageReplyHeader7.story_id != 0) {
                                removeDiacritics = AndroidUtilities.removeDiacritics(getNameFromDialogId(DialogObject.getPeerDialogId(tLRPC$MessageReplyHeader7.peer)));
                                TL_stories$StoryItem tL_stories$StoryItem = messageObject.messageOwner.replyStory;
                                if (tL_stories$StoryItem == null || (tL_stories$StoryItem instanceof TL_stories$TL_storyItemDeleted)) {
                                    if (tL_stories$StoryItem == null) {
                                        replaceEmoji = LocaleController.getString(str6, R.string.Loading);
                                    } else {
                                        replaceEmoji = StoriesUtilities.createExpiredStoryString();
                                    }
                                    this.needReplyImage = false;
                                } else {
                                    this.needReplyImage = true;
                                    StoriesUtilities.setStoryMiniImage(this.replyImageReceiver, tL_stories$StoryItem);
                                    replaceEmoji = StoriesUtilities.createReplyStoryString();
                                    maxNameWidth4 = (int) (maxNameWidth4 - (AndroidUtilities.dp(16.0f) + (textPaint4.getTextSize() + Theme.chat_replyNamePaint.getTextSize())));
                                }
                                z5 = z12;
                                charSequence = " ";
                                textPaint = textPaint4;
                                str14 = str4;
                                str15 = str8;
                            } else {
                                String str21 = str6;
                                if (((!this.isThreadChat || messageObject.isQuickReply() || this.isSavedChat || messageObject.getReplyTopMsgId(this.isForum) != 0 || this.isForumGeneral) && messageObject.hasValidReplyMessageObject()) || this.hasReplyQuote || ((tLRPC$MessageReplyHeader5 = messageObject.messageOwner.reply_to) != null && tLRPC$MessageReplyHeader5.reply_from != null)) {
                                    MessageObject messageObject5 = messageObject.replyMessageObject;
                                    this.lastReplyMessage = messageObject5 == null ? null : messageObject5.messageOwner;
                                    if (messageObject5 != null) {
                                        z4 = messageObject5.hasMediaSpoilers();
                                        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 320);
                                        TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 40);
                                        MessageObject messageObject6 = messageObject.replyMessageObject;
                                        TLObject tLObject2 = messageObject6.photoThumbsObject2;
                                        if (closestPhotoSizeWithSize == null) {
                                            if (messageObject6.mediaExists) {
                                                tLRPC$PhotoSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, AndroidUtilities.getPhotoSize());
                                                i7 = tLRPC$PhotoSize3 != null ? tLRPC$PhotoSize3.size : 0;
                                                i8 = 0;
                                            } else {
                                                tLRPC$PhotoSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, 320);
                                                i7 = 0;
                                                i8 = 1;
                                            }
                                            TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 40);
                                            tLObject = messageObject.replyMessageObject.photoThumbsObject;
                                            i4 = i7;
                                            i6 = i8;
                                            closestPhotoSizeWithSize2 = closestPhotoSizeWithSize3;
                                        } else {
                                            tLObject = tLObject2;
                                            tLRPC$PhotoSize3 = closestPhotoSizeWithSize;
                                            i6 = 1;
                                            i4 = 0;
                                        }
                                        if (closestPhotoSizeWithSize2 == tLRPC$PhotoSize3) {
                                            tLRPC$PhotoSize2 = tLRPC$PhotoSize3;
                                            i5 = i6;
                                            tLRPC$PhotoSize = null;
                                            tLRPC$Photo = tLObject;
                                        } else {
                                            i5 = i6;
                                            TLRPC$PhotoSize tLRPC$PhotoSize4 = closestPhotoSizeWithSize2;
                                            tLRPC$PhotoSize2 = tLRPC$PhotoSize3;
                                            tLRPC$PhotoSize = tLRPC$PhotoSize4;
                                            tLRPC$Photo = tLObject;
                                        }
                                    } else {
                                        tLRPC$PhotoSize = null;
                                        z4 = false;
                                        tLRPC$PhotoSize2 = null;
                                        i4 = 0;
                                        tLRPC$Photo = null;
                                        i5 = 1;
                                    }
                                    TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
                                    if (tLRPC$Message3 == null || (tLRPC$MessageReplyHeader4 = tLRPC$Message3.reply_to) == null || (tLRPC$MessageMedia2 = tLRPC$MessageReplyHeader4.reply_media) == null) {
                                        z5 = z12;
                                        charSequence = " ";
                                        str13 = str21;
                                        textPaint = textPaint4;
                                        str14 = str4;
                                        str15 = str8;
                                        r8 = 1;
                                        r8 = 1;
                                        charSequence2 = null;
                                        if (tLRPC$PhotoSize2 == null || (messageObject3 = messageObject.replyMessageObject) == null || messageObject3.isAnyKindOfSticker() || ((messageObject.isAnyKindOfSticker() && !AndroidUtilities.isTablet()) || messageObject.replyMessageObject.isSecretMedia() || messageObject.replyMessageObject.isWebpageDocument())) {
                                            this.replyImageReceiver.setImageBitmap((Drawable) null);
                                            this.needReplyImage = false;
                                        } else {
                                            if (messageObject.replyMessageObject.isRoundVideo()) {
                                                this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(32.0f));
                                            } else {
                                                this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(4.0f));
                                            }
                                            this.currentReplyPhoto = tLRPC$PhotoSize2;
                                            this.replyImageReceiver.setImage(ImageLocation.getForObject(tLRPC$PhotoSize2, tLRPC$Photo), z4 ? str2 : "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLRPC$Photo), z4 ? "50_50_b4" : "50_50_b", i4, null, messageObject.replyMessageObject, i5);
                                            this.needReplyImage = true;
                                            maxNameWidth4 = (int) (maxNameWidth4 - ((AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize()) + Theme.chat_replyTextPaint.getTextSize()));
                                        }
                                    } else {
                                        ?? r14 = tLRPC$MessageMedia2.document;
                                        if (r14 != null) {
                                            tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(r14.thumbs, 320);
                                            tLRPC$Photo2 = r14;
                                        } else {
                                            TLRPC$Photo tLRPC$Photo3 = tLRPC$MessageMedia2.photo;
                                            tLRPC$Photo2 = tLRPC$Photo;
                                            if (tLRPC$Photo3 != null) {
                                                tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, 320);
                                                tLRPC$Photo2 = tLRPC$Photo3;
                                            }
                                        }
                                        if (tLRPC$PhotoSize2 == null) {
                                            charSequence2 = null;
                                            this.replyImageReceiver.setImageBitmap((Drawable) null);
                                            this.needReplyImage = false;
                                            z5 = z12;
                                            charSequence = " ";
                                            str13 = str21;
                                            textPaint = textPaint4;
                                            str14 = str4;
                                            str15 = str8;
                                            r8 = 1;
                                        } else {
                                            this.currentReplyPhoto = tLRPC$PhotoSize2;
                                            charSequence = " ";
                                            str14 = str4;
                                            z5 = z12;
                                            str13 = str21;
                                            textPaint = textPaint4;
                                            str15 = str8;
                                            this.replyImageReceiver.setImage(ImageLocation.getForObject(tLRPC$PhotoSize2, tLRPC$Photo2), z4 ? str2 : "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLRPC$Photo2), z4 ? "50_50_b4" : "50_50_b", i4, null, messageObject, i5);
                                            r8 = 1;
                                            this.needReplyImage = true;
                                            maxNameWidth4 = (int) (maxNameWidth4 - ((AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize()) + Theme.chat_replyTextPaint.getTextSize()));
                                            charSequence2 = null;
                                        }
                                    }
                                    if (DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                                        MessageObject messageObject7 = messageObject.replyMessageObject;
                                        if (messageObject7 != null && messageObject7.isOutOwner()) {
                                            removeDiacritics = AndroidUtilities.removeDiacritics(UserObject.getUserName(UserConfig.getInstance(this.currentAccount).getCurrentUser()));
                                        } else {
                                            TLRPC$EncryptedChat encryptedChat = MessagesController.getInstance(this.currentAccount).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(this.currentMessageObject.getDialogId())));
                                            if (encryptedChat != null) {
                                                removeDiacritics = AndroidUtilities.removeDiacritics(UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(encryptedChat.user_id))));
                                            }
                                            removeDiacritics = charSequence2;
                                        }
                                        if (removeDiacritics == null) {
                                            removeDiacritics = LocaleController.getString(str13, R.string.Loading);
                                        }
                                        if (!this.hasReplyQuote || ((tLRPC$MessageReplyHeader3 = messageObject.messageOwner.reply_to) != null && tLRPC$MessageReplyHeader3.quote_text != null && tLRPC$MessageReplyHeader3.reply_from != null)) {
                                            str16 = messageObject.messageOwner.reply_to.quote_text;
                                            if (str16.length() <= 150) {
                                                z6 = false;
                                                str16 = str16.substring(0, 150);
                                            } else {
                                                z6 = false;
                                            }
                                            replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(str16.replace('\n', ' ')), textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), z6);
                                            arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                            i10 = r8;
                                            if (arrayList != null) {
                                                replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, arrayList, textPaint.getFontMetricsInt(), r8);
                                                MessageObject.addEntitiesToText(replaceEmoji, messageObject.messageOwner.reply_to.quote_entities, this.currentMessageObject.isOutOwner(), false, false, false);
                                                i10 = r8;
                                            }
                                        } else if (tLRPC$MessageReplyHeader3 != null && tLRPC$MessageReplyHeader3.reply_from != null && (tLRPC$MessageMedia = tLRPC$MessageReplyHeader3.reply_media) != null) {
                                            replaceEmoji = messageObject.getMediaTitle(tLRPC$MessageMedia);
                                            i10 = r8;
                                        } else {
                                            MessageObject messageObject8 = messageObject.replyMessageObject;
                                            if (messageObject8 != null && (charSequence4 = messageObject8.messageTextForReply) != null) {
                                                replaceEmoji = charSequence4;
                                                i10 = r8;
                                            } else if (MessageObject.getMedia(messageObject8) instanceof TLRPC$TL_messageMediaGame) {
                                                replaceEmoji = TextUtils.ellipsize(Emoji.replaceEmoji((CharSequence) MessageObject.getMedia(messageObject.replyMessageObject).game.title, textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), textPaint, maxNameWidth4, TextUtils.TruncateAt.END);
                                                i10 = r8;
                                            } else if (MessageObject.getMedia(messageObject.replyMessageObject) instanceof TLRPC$TL_messageMediaInvoice) {
                                                replaceEmoji = TextUtils.ellipsize(Emoji.replaceEmoji((CharSequence) MessageObject.getMedia(messageObject.replyMessageObject).title, textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), textPaint, maxNameWidth4, TextUtils.TruncateAt.END);
                                                i10 = r8;
                                            } else {
                                                MessageObject messageObject9 = messageObject.replyMessageObject;
                                                if (messageObject9 != null && !TextUtils.isEmpty(messageObject9.caption)) {
                                                    String charSequence6 = messageObject.replyMessageObject.caption.toString();
                                                    if (charSequence6.length() > 150) {
                                                        charSequence6 = charSequence6.substring(0, 150);
                                                    }
                                                    CharSequence replaceEmoji2 = Emoji.replaceEmoji(charSequence6.replace('\n', ' '), textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), (boolean) r8);
                                                    TLRPC$Message tLRPC$Message4 = messageObject.replyMessageObject.messageOwner;
                                                    if (tLRPC$Message4 != null) {
                                                        replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, tLRPC$Message4.entities, textPaint.getFontMetricsInt(), r8);
                                                    }
                                                    float f3 = maxNameWidth4;
                                                    TextUtils.TruncateAt truncateAt4 = TextUtils.TruncateAt.END;
                                                    replaceEmoji = TextUtils.ellipsize(replaceEmoji2, textPaint, f3, truncateAt4);
                                                    i10 = r8;
                                                    if (replaceEmoji instanceof Spannable) {
                                                        MessageObject messageObject10 = messageObject.replyMessageObject;
                                                        TLRPC$Message tLRPC$Message5 = messageObject10.messageOwner;
                                                        i10 = r8;
                                                        if (tLRPC$Message5 != null) {
                                                            MediaDataController.addTextStyleRuns(tLRPC$Message5.entities, messageObject10.caption, (Spannable) replaceEmoji);
                                                            replaceEmoji = TextUtils.ellipsize(replaceEmoji, textPaint, f3, truncateAt4);
                                                            i10 = r8;
                                                        }
                                                    }
                                                } else {
                                                    MessageObject messageObject11 = messageObject.replyMessageObject;
                                                    if (messageObject11 == null || (charSequence3 = messageObject11.messageText) == null || charSequence3.length() <= 0) {
                                                        replaceEmoji = charSequence2;
                                                        i10 = r8;
                                                    } else {
                                                        CharSequence charSequence7 = messageObject.replyMessageObject.messageText;
                                                        if (charSequence7.length() > 150) {
                                                            charSequence7 = charSequence7.subSequence(0, 150);
                                                        }
                                                        boolean z13 = charSequence7 instanceof SpannableStringBuilder;
                                                        SpannableStringBuilder spannableStringBuilder11 = charSequence7;
                                                        if (!z13) {
                                                            spannableStringBuilder11 = new SpannableStringBuilder(charSequence7);
                                                        }
                                                        CharSequence replaceEmoji3 = Emoji.replaceEmoji(AndroidUtilities.replaceNewLines(spannableStringBuilder11), textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), (boolean) r8);
                                                        TLRPC$Message tLRPC$Message6 = messageObject.replyMessageObject.messageOwner;
                                                        if (tLRPC$Message6 != null) {
                                                            replaceEmoji3 = MessageObject.replaceAnimatedEmoji(replaceEmoji3, tLRPC$Message6.entities, textPaint.getFontMetricsInt(), r8);
                                                        }
                                                        float f4 = maxNameWidth4;
                                                        TextUtils.TruncateAt truncateAt5 = TextUtils.TruncateAt.END;
                                                        replaceEmoji = TextUtils.ellipsize(replaceEmoji3, textPaint, f4, truncateAt5);
                                                        i10 = r8;
                                                        if (replaceEmoji instanceof Spannable) {
                                                            MediaDataController.addTextStyleRuns(messageObject.replyMessageObject, (Spannable) replaceEmoji);
                                                            replaceEmoji = TextUtils.ellipsize(replaceEmoji, textPaint, f4, truncateAt5);
                                                            i10 = r8;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if (this.hasReplyQuote && !DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                                            removeDiacritics = messageObject.getReplyQuoteNameWithIcon();
                                        } else if (messageObject.hideSendersName) {
                                            TLRPC$Peer tLRPC$Peer2 = messageObject.sendAsPeer;
                                            if (tLRPC$Peer2 != null) {
                                                if (tLRPC$Peer2.channel_id != 0) {
                                                    TLRPC$Chat chat3 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.sendAsPeer.channel_id));
                                                    if (chat3 != null) {
                                                        removeDiacritics = AndroidUtilities.removeDiacritics(chat3.title);
                                                    }
                                                    removeDiacritics = charSequence2;
                                                } else {
                                                    removeDiacritics = AndroidUtilities.removeDiacritics(UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.sendAsPeer.user_id))));
                                                }
                                            } else {
                                                removeDiacritics = AndroidUtilities.removeDiacritics(UserObject.getUserName(AccountInstance.getInstance(this.currentAccount).getUserConfig().getCurrentUser()));
                                            }
                                        } else {
                                            String str22 = messageObject.customReplyName;
                                            if (str22 != null) {
                                                removeDiacritics = AndroidUtilities.removeDiacritics(str22);
                                            } else {
                                                MessageObject messageObject12 = messageObject.replyMessageObject;
                                                if (messageObject12 != null || (tLRPC$MessageReplyHeader2 = messageObject.messageOwner.reply_to) == null || tLRPC$MessageReplyHeader2.reply_from == null) {
                                                    if (messageObject12 != null) {
                                                        removeDiacritics = this.drawForwardedName ? AndroidUtilities.removeDiacritics(messageObject12.getForwardedName()) : charSequence2;
                                                        if (removeDiacritics == null) {
                                                            long fromChatId = messageObject.replyMessageObject.getFromChatId();
                                                            if (fromChatId > 0) {
                                                                TLRPC$User user3 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId));
                                                                if (user3 != null) {
                                                                    removeDiacritics = AndroidUtilities.removeDiacritics(UserObject.getUserName(user3));
                                                                }
                                                            } else if (fromChatId < 0) {
                                                                TLRPC$Chat chat4 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-fromChatId));
                                                                if (chat4 != null) {
                                                                    removeDiacritics = AndroidUtilities.removeDiacritics(chat4.title);
                                                                }
                                                            } else {
                                                                TLRPC$Message tLRPC$Message7 = messageObject.replyMessageObject.messageOwner;
                                                                if (tLRPC$Message7 != null && tLRPC$Message7.peer_id != null && (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.replyMessageObject.messageOwner.peer_id.channel_id))) != null) {
                                                                    removeDiacritics = AndroidUtilities.removeDiacritics(chat.title);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    removeDiacritics = charSequence2;
                                                } else {
                                                    removeDiacritics = messageObject.getReplyQuoteNameWithIcon();
                                                }
                                            }
                                        }
                                        if (removeDiacritics == null) {
                                        }
                                        if (!this.hasReplyQuote) {
                                        }
                                        str16 = messageObject.messageOwner.reply_to.quote_text;
                                        if (str16.length() <= 150) {
                                        }
                                        replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(str16.replace('\n', ' ')), textPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), z6);
                                        arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                        i10 = r8;
                                        if (arrayList != null) {
                                        }
                                    }
                                } else {
                                    this.replyImageReceiver.setImageBitmap((Drawable) null);
                                    this.needReplyImage = false;
                                    this.replyPanelIsForward = true;
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                                    if (tLRPC$MessageFwdHeader != null) {
                                        TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                                        if (tLRPC$Peer3 instanceof TLRPC$TL_peerChannel) {
                                            this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
                                        } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerChat) {
                                            this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
                                        } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                                            this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
                                        }
                                        String str23 = messageObject.messageOwner.fwd_from.from_name;
                                        if (str23 != null) {
                                            this.currentForwardName = str23;
                                        }
                                    }
                                    if (this.currentForwardUser == null && this.currentForwardChannel == null && this.currentForwardName == null) {
                                        z5 = z12;
                                        charSequence = " ";
                                        textPaint = textPaint4;
                                        str14 = str4;
                                        str15 = str8;
                                        removeDiacritics = null;
                                        replaceEmoji = null;
                                    } else {
                                        if (this.forwardAvatar == null) {
                                            AvatarSpan avatarSpan4 = new AvatarSpan(this, this.currentAccount);
                                            this.forwardAvatar = avatarSpan4;
                                            avatarSpan4.translate(0.0f, AndroidUtilities.dp(-0.33f));
                                        }
                                        this.forwardAvatar.setSize((((int) Theme.chat_forwardNamePaint.getTextSize()) * 1.23f) / AndroidUtilities.density);
                                        TLRPC$Chat tLRPC$Chat4 = this.currentForwardChannel;
                                        if (tLRPC$Chat4 != null) {
                                            TLRPC$User tLRPC$User4 = this.currentForwardUser;
                                            if (tLRPC$User4 != null) {
                                                this.currentForwardNameString = String.format(str10, tLRPC$Chat4.title, UserObject.getUserName(tLRPC$User4));
                                                this.forwardAvatar.setUser(this.currentForwardUser);
                                            } else {
                                                this.currentForwardNameString = tLRPC$Chat4.title;
                                                this.forwardAvatar.setChat(tLRPC$Chat4);
                                            }
                                        } else {
                                            TLRPC$User tLRPC$User5 = this.currentForwardUser;
                                            if (tLRPC$User5 != null) {
                                                this.currentForwardNameString = UserObject.getUserName(tLRPC$User5);
                                                this.forwardAvatar.setUser(this.currentForwardUser);
                                            } else {
                                                this.currentForwardNameString = this.currentForwardName;
                                                z7 = false;
                                                removeDiacritics = getForwardedMessageText(messageObject);
                                                String str24 = this.currentForwardNameString;
                                                String replace = str24 != null ? str4 : str24.replace('\n', ' ');
                                                StringBuilder sb3 = new StringBuilder();
                                                sb3.append(!z7 ? str7 : str4);
                                                sb3.append((Object) replace);
                                                String sb4 = sb3.toString();
                                                TextPaint textPaint5 = Theme.chat_replyNamePaint;
                                                float f5 = !z7 ? 17.33f : 0.0f;
                                                TextUtils.TruncateAt truncateAt6 = TextUtils.TruncateAt.END;
                                                CharSequence ellipsize5 = TextUtils.ellipsize(sb4, textPaint5, maxNameWidth4 - AndroidUtilities.dp(f5), truncateAt6);
                                                spannableStringBuilder4 = new SpannableStringBuilder(ellipsize5);
                                                if (z7 && spannableStringBuilder4.length() > 1) {
                                                    spannableStringBuilder4.setSpan(this.forwardAvatar, 0, 1, 33);
                                                }
                                                if (this.currentForwardName == null && messageObject.messageOwner.fwd_from.from_id == null) {
                                                    i9 = 0;
                                                } else {
                                                    i9 = 0;
                                                    spannableStringBuilder4.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, ellipsize5.length(), 33);
                                                }
                                                CharSequence ellipsize6 = TextUtils.ellipsize(spannableStringBuilder4, textPaint4, maxNameWidth4, truncateAt6);
                                                this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize5, i9, ellipsize5.length()))) / 2;
                                                z5 = z12;
                                                charSequence = " ";
                                                replaceEmoji = ellipsize6;
                                                textPaint = textPaint4;
                                                str14 = str4;
                                                str15 = str8;
                                                i10 = 1;
                                            }
                                        }
                                        z7 = true;
                                        removeDiacritics = getForwardedMessageText(messageObject);
                                        String str242 = this.currentForwardNameString;
                                        if (str242 != null) {
                                        }
                                        StringBuilder sb32 = new StringBuilder();
                                        sb32.append(!z7 ? str7 : str4);
                                        sb32.append((Object) replace);
                                        String sb42 = sb32.toString();
                                        TextPaint textPaint52 = Theme.chat_replyNamePaint;
                                        if (!z7) {
                                        }
                                        TextUtils.TruncateAt truncateAt62 = TextUtils.TruncateAt.END;
                                        CharSequence ellipsize52 = TextUtils.ellipsize(sb42, textPaint52, maxNameWidth4 - AndroidUtilities.dp(f5), truncateAt62);
                                        spannableStringBuilder4 = new SpannableStringBuilder(ellipsize52);
                                        if (z7) {
                                            spannableStringBuilder4.setSpan(this.forwardAvatar, 0, 1, 33);
                                        }
                                        if (this.currentForwardName == null) {
                                        }
                                        i9 = 0;
                                        spannableStringBuilder4.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, ellipsize52.length(), 33);
                                        CharSequence ellipsize62 = TextUtils.ellipsize(spannableStringBuilder4, textPaint4, maxNameWidth4, truncateAt62);
                                        this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize52, i9, ellipsize52.length()))) / 2;
                                        z5 = z12;
                                        charSequence = " ";
                                        replaceEmoji = ellipsize62;
                                        textPaint = textPaint4;
                                        str14 = str4;
                                        str15 = str8;
                                        i10 = 1;
                                    }
                                }
                                removeDiacritics = Emoji.replaceEmoji(removeDiacritics, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                if (this.isReplyQuote) {
                                    maxNameWidth4 -= AndroidUtilities.dp(24.0f);
                                }
                                int i19 = maxNameWidth4;
                                ellipsize2 = removeDiacritics != null ? str14 : TextUtils.ellipsize(AndroidUtilities.replaceCharSequence(str15, removeDiacritics, charSequence), Theme.chat_replyNamePaint, i19, TextUtils.TruncateAt.END);
                                this.replyNameWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (textPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                                if (ellipsize2 != null) {
                                    StaticLayout staticLayout4 = new StaticLayout(ellipsize2, Theme.chat_replyNamePaint, i19 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    this.replyNameLayout = staticLayout4;
                                    if (staticLayout4.getLineCount() > 0) {
                                        this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(4.0f);
                                        this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                                    }
                                }
                                if (this.isReplyQuote || !z5 || this.replyQuoteDrawable == null) {
                                    this.replyNameWidth += AndroidUtilities.dp(3.0f);
                                } else {
                                    this.replyNameWidth += AndroidUtilities.dp((!this.drawPinnedTop ? 2 : 0) + 6) + this.replyQuoteDrawable.getIntrinsicWidth();
                                }
                                this.replyTextWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(33.0f) : 0);
                                if (replaceEmoji != null) {
                                    SpannableStringBuilder spannableStringBuilder12 = new SpannableStringBuilder(replaceEmoji);
                                    TextStyleSpan[] textStyleSpanArr = (TextStyleSpan[]) spannableStringBuilder12.getSpans(0, spannableStringBuilder12.length(), TextStyleSpan.class);
                                    int length2 = textStyleSpanArr.length;
                                    boolean z14 = false;
                                    for (int i20 = 0; i20 < length2; i20 += i10) {
                                        TextStyleSpan textStyleSpan = textStyleSpanArr[i20];
                                        if ((textStyleSpan.getTextStyleRun().flags & 4) != 0) {
                                            spannableStringBuilder12.removeSpan(textStyleSpan);
                                            z14 = true;
                                        }
                                    }
                                    this.replyTextRTL = AndroidUtilities.isRTL(spannableStringBuilder12);
                                    if (this.isReplyQuote) {
                                        i19 += AndroidUtilities.dp(36.0f);
                                    }
                                    boolean z15 = this.isReplyQuote;
                                    if (z15 && this.needReplyImage && !this.replyTextRTL) {
                                        float dp6 = AndroidUtilities.dp(z15 ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize() + Theme.chat_replyTextPaint.getTextSize();
                                        spannableStringBuilder12.setSpan(new LeadingMarginSpan.Standard(((int) dp6) + AndroidUtilities.dp(4.0f), 0), 0, spannableStringBuilder12.length(), 33);
                                        this.replyTextWidth = (int) (this.replyTextWidth - dp6);
                                        i12 = (int) (i19 + dp6);
                                    } else {
                                        i12 = i19;
                                    }
                                    if (!z14) {
                                        spannableStringBuilder5 = spannableStringBuilder12;
                                        if (!this.isReplyQuote) {
                                        }
                                        this.replyTextOffset = 0;
                                        if (Build.VERSION.SDK_INT < 23) {
                                            obtain = StaticLayout.Builder.obtain(spannableStringBuilder5, 0, spannableStringBuilder5.length(), textPaint, i12);
                                            alignment = obtain.setAlignment(Layout.Alignment.ALIGN_NORMAL);
                                            includePad = alignment.setIncludePad(false);
                                            includePad.setBreakStrategy(0);
                                            if (this.isReplyQuote && !this.currentMessageObject.replyTextRevealed) {
                                                maxLines = includePad.setMaxLines(5);
                                                maxLines.setEllipsize(TextUtils.TruncateAt.END);
                                            }
                                            build = includePad.build();
                                            this.replyTextLayout = build;
                                            MessageObject messageObject13 = this.currentMessageObject;
                                            if (!messageObject13.replyTextRevealed) {
                                                if (build.getLineCount() > 0) {
                                                    StaticLayout staticLayout5 = this.replyTextLayout;
                                                    if (staticLayout5.getEllipsisCount(staticLayout5.getLineCount() - i10) > 0) {
                                                        z8 = true;
                                                        messageObject13.replyTextEllipsized = z8;
                                                    }
                                                }
                                                z8 = false;
                                                messageObject13.replyTextEllipsized = z8;
                                            }
                                        } else {
                                            this.replyTextLayout = new StaticLayout(spannableStringBuilder5, 0, spannableStringBuilder5.length(), textPaint, i12, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, i12);
                                        }
                                        this.replyTextHeight = this.replyTextLayout.getHeight();
                                        if ((!messageObject.isAnyKindOfSticker() && messageObject.type != 5) || messageObject.type == 19) {
                                            this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                        }
                                        if (this.replyTextLayout.getLineCount() > 0) {
                                            this.replyTextOffset = this.replyTextLayout.getWidth();
                                            int i21 = 0;
                                            for (int i22 = 0; i22 < this.replyTextLayout.getLineCount(); i22 += i10) {
                                                i21 = Math.max(i21, (int) Math.ceil(this.replyTextLayout.getLineWidth(i22)));
                                                int ceil3 = (int) Math.ceil(this.replyTextLayout.getLineLeft(i22));
                                                if (i22 > 0) {
                                                    if ((this.replyTextOffset == 0) != (ceil3 == 0)) {
                                                        i21 = this.replyTextLayout.getWidth();
                                                    }
                                                }
                                                this.replyTextOffset = Math.min(this.replyTextOffset, ceil3);
                                            }
                                            this.replyTextWidth += i21 + AndroidUtilities.dp(18.0f);
                                        }
                                        this.replySpoilers.clear();
                                        if (!this.hasReplyQuote && (getMessageObject().replyMessageObject == null || getMessageObject().replyMessageObject.isSpoilersRevealed)) {
                                            r9 = 0;
                                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiReplyStack;
                                            Layout[] layoutArr = new Layout[i10];
                                            layoutArr[r9] = this.replyTextLayout;
                                            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update((int) r9, this, (boolean) r9, emojiGroupedSpans, layoutArr);
                                        }
                                        StaticLayout staticLayout6 = this.replyTextLayout;
                                        int i23 = this.replyTextOffset;
                                        r9 = 0;
                                        SpoilerEffect.addSpoilers(this, staticLayout6, i23, i23 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2 = this.animatedEmojiReplyStack;
                                        Layout[] layoutArr2 = new Layout[i10];
                                        layoutArr2[r9] = this.replyTextLayout;
                                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update((int) r9, this, (boolean) r9, emojiGroupedSpans2, layoutArr2);
                                    }
                                    spannableStringBuilder5 = TextUtils.ellipsize(spannableStringBuilder12, textPaint, i12, TextUtils.TruncateAt.END);
                                    this.replyTextOffset = 0;
                                    if (Build.VERSION.SDK_INT < 23) {
                                    }
                                    this.replyTextHeight = this.replyTextLayout.getHeight();
                                    if (!messageObject.isAnyKindOfSticker()) {
                                        this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                        if (this.replyTextLayout.getLineCount() > 0) {
                                        }
                                        this.replySpoilers.clear();
                                        if (!this.hasReplyQuote) {
                                            r9 = 0;
                                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans22 = this.animatedEmojiReplyStack;
                                            Layout[] layoutArr22 = new Layout[i10];
                                            layoutArr22[r9] = this.replyTextLayout;
                                            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update((int) r9, this, (boolean) r9, emojiGroupedSpans22, layoutArr22);
                                        }
                                        StaticLayout staticLayout62 = this.replyTextLayout;
                                        int i232 = this.replyTextOffset;
                                        r9 = 0;
                                        SpoilerEffect.addSpoilers(this, staticLayout62, i232, i232 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans222 = this.animatedEmojiReplyStack;
                                        Layout[] layoutArr222 = new Layout[i10];
                                        layoutArr222[r9] = this.replyTextLayout;
                                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update((int) r9, this, (boolean) r9, emojiGroupedSpans222, layoutArr222);
                                    }
                                    this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                    if (this.replyTextLayout.getLineCount() > 0) {
                                    }
                                    this.replySpoilers.clear();
                                    if (!this.hasReplyQuote) {
                                    }
                                    StaticLayout staticLayout622 = this.replyTextLayout;
                                    int i2322 = this.replyTextOffset;
                                    r9 = 0;
                                    SpoilerEffect.addSpoilers(this, staticLayout622, i2322, i2322 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                    AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2222 = this.animatedEmojiReplyStack;
                                    Layout[] layoutArr2222 = new Layout[i10];
                                    layoutArr2222[r9] = this.replyTextLayout;
                                    this.animatedEmojiReplyStack = AnimatedEmojiSpan.update((int) r9, this, (boolean) r9, emojiGroupedSpans2222, layoutArr2222);
                                }
                                i11 = this.replyNameWidth;
                                if (i11 > this.replyTextWidth) {
                                    this.replyNameWidth = i11 + AndroidUtilities.dp(Math.max(2.0f, SharedConfig.bubbleRadius / 4.0f));
                                }
                            }
                            this.replyTextWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(33.0f) : 0);
                            if (replaceEmoji != null) {
                            }
                            i11 = this.replyNameWidth;
                            if (i11 > this.replyTextWidth) {
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                        i10 = 1;
                        removeDiacritics = Emoji.replaceEmoji(removeDiacritics, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        if (this.isReplyQuote) {
                        }
                        int i192 = maxNameWidth4;
                        if (removeDiacritics != null) {
                        }
                        this.replyNameWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (textPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                        if (ellipsize2 != null) {
                        }
                        if (this.isReplyQuote) {
                        }
                        this.replyNameWidth += AndroidUtilities.dp(3.0f);
                    }
                } else {
                    String str25 = str6;
                    if ((this.isThreadChat || messageObject.isQuickReply()) && messageObject.getReplyMsgId() != 0 && !messageObject.isGiveawayResults() && !messageObject.isRepostPreview) {
                        messageObject2 = messageObject.replyMessageObject;
                        if (messageObject2 != null) {
                            TLRPC$Message tLRPC$Message8 = messageObject2.messageOwner;
                            if (!(tLRPC$Message8 instanceof TLRPC$TL_messageEmpty)) {
                                if (tLRPC$Message8 != null) {
                                }
                            }
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null || chatMessageCellDelegate2.doNotShowLoadingReply(messageObject)) {
                            if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                                int dp7 = (int) (this.namesOffset + AndroidUtilities.dp(18.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                                this.namesOffset = dp7;
                                if (messageObject.type != 0) {
                                    this.namesOffset = dp7 + AndroidUtilities.dp(5.0f);
                                }
                            }
                            this.needReplyImage = false;
                            int maxNameWidth5 = getMaxNameWidth();
                            if (messageObject.shouldDrawWithoutBackground()) {
                                maxNameWidth5 -= AndroidUtilities.dp(10.0f);
                            } else if (messageObject.type == 5) {
                                maxNameWidth5 += AndroidUtilities.dp(13.0f);
                            }
                            staticLayout = new StaticLayout(LocaleController.getString(str25, R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth5 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            this.replyNameLayout = staticLayout;
                            if (staticLayout.getLineCount() > 0) {
                                this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                                this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                            }
                        }
                    }
                }
                requestLayout();
            }
        }
        str10 = str5;
        this.drawTopic = false;
        float f22 = 10.0f;
        if (this.isThreadChat) {
        }
        chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null) {
            this.drawTopic = true;
            int maxNameWidth32 = getMaxNameWidth();
            if (!messageObject.shouldDrawWithoutBackground()) {
            }
            if (this.topicButton == null) {
            }
            this.namesOffset += this.topicButton.set(this, messageObject, peerObject, maxNameWidth32);
        }
        if (!this.drawTopic) {
            messageTopicButton.onDetached(this);
            this.topicButton = null;
        }
        if (messageObject.isGiveawayResults()) {
        }
        String str252 = str6;
        if (this.isThreadChat) {
        }
        messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 != null) {
        }
        chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null) {
        }
        if (!messageObject.isAnyKindOfSticker()) {
            int dp72 = (int) (this.namesOffset + AndroidUtilities.dp(18.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
            this.namesOffset = dp72;
            if (messageObject.type != 0) {
            }
        }
        this.needReplyImage = false;
        int maxNameWidth52 = getMaxNameWidth();
        if (messageObject.shouldDrawWithoutBackground()) {
        }
        staticLayout = new StaticLayout(LocaleController.getString(str252, R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth52 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        this.replyNameLayout = staticLayout;
        if (staticLayout.getLineCount() > 0) {
        }
        requestLayout();
    }

    private String getNameFromDialogId(long j) {
        TLRPC$Chat chat;
        if (j > 0) {
            TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
            if (user != null) {
                return UserObject.getUserName(user);
            }
        } else if (j < 0 && (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-j))) != null) {
            return chat.title;
        }
        return null;
    }

    protected boolean isNeedAuthorName() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.forceAvatar) {
            return true;
        }
        if (messageObject.isSponsored() || this.currentMessageObject.isGiveawayOrGiveawayResults()) {
            return false;
        }
        if (this.isPinnedChat && this.currentMessageObject.type == 0) {
            return true;
        }
        if (!this.pinnedTop && this.drawName && this.isChat) {
            if (!this.currentMessageObject.isOutOwner()) {
                return true;
            }
            if ((this.currentMessageObject.isSupergroup() && this.currentMessageObject.isFromGroup()) || this.currentMessageObject.isRepostPreview) {
                return true;
            }
        }
        return this.currentMessageObject.isImportedForward() && this.currentMessageObject.messageOwner.fwd_from.from_id == null;
    }

    private String getAuthorName() {
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            return UserObject.getUserName(tLRPC$User);
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject != null && tLRPC$Chat.signature_profiles) {
                long peerDialogId = DialogObject.getPeerDialogId(messageObject.messageOwner.from_id);
                if (peerDialogId >= 0) {
                    TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerDialogId));
                    if (user != null) {
                        return UserObject.getUserName(user);
                    }
                } else {
                    TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerDialogId));
                    if (chat != null) {
                        return chat.title;
                    }
                }
            }
            return this.currentChat.title;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 != null && messageObject2.isSponsored()) {
            return this.currentMessageObject.sponsoredTitle;
        }
        return "DELETED";
    }

    private Object getAuthorStatus() {
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            Long emojiStatusDocumentId = UserObject.getEmojiStatusDocumentId(tLRPC$User);
            if (emojiStatusDocumentId != null) {
                return emojiStatusDocumentId;
            }
            if (this.currentUser.premium) {
                return ContextCompat.getDrawable(ApplicationLoader.applicationContext, R.drawable.msg_premium_liststar).mutate();
            }
            return null;
        }
        return null;
    }

    private String getForwardedMessageText(MessageObject messageObject) {
        if (this.hasPsaHint) {
            String string = LocaleController.getString("PsaMessage_" + messageObject.messageOwner.fwd_from.psa_type);
            return string == null ? LocaleController.getString("PsaMessageDefault", R.string.PsaMessageDefault) : string;
        }
        return LocaleController.getString(R.string.ForwardedFrom);
    }

    public int getExtraInsetHeight() {
        int i = this.addedCaptionHeight;
        if (this.hasFactCheck) {
            i += AndroidUtilities.dp((this.reactionsLayoutInBubble.isEmpty ? 18 : 0) + 2) + this.factCheckHeight;
        }
        if (this.drawCommentButton) {
            i += AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
        }
        return (this.reactionsLayoutInBubble.isEmpty || !this.currentMessageObject.shouldDrawReactionsInLayout()) ? i : i + this.reactionsLayoutInBubble.totalHeight;
    }

    public ImageReceiver getAvatarImage() {
        if (this.isAvatarVisible) {
            return this.avatarImage;
        }
        return null;
    }

    public float getCheckBoxTranslation() {
        return this.checkBoxTranslation;
    }

    public boolean shouldDrawAlphaLayer() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        return (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) && getAlpha() != 1.0f;
    }

    public float getCaptionX() {
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner) {
            if (transitionParams.transformGroupToSingleMessage) {
                this.captionX += transitionParams.deltaLeft;
            } else if (transitionParams.moveCaption) {
                float f = this.captionX;
                TransitionParams transitionParams2 = this.transitionParams;
                float f2 = transitionParams2.animateChangeProgress;
                this.captionX = (f * f2) + (transitionParams2.captionFromX * (1.0f - f2));
            } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                this.captionX += this.transitionParams.deltaLeft;
            }
        }
        return this.captionX;
    }

    public float getCaptionY() {
        float f = this.captionY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner) {
            if (transitionParams.transformGroupToSingleMessage) {
                return f - getTranslationY();
            }
            if (transitionParams.moveCaption) {
                float f2 = this.captionY;
                TransitionParams transitionParams2 = this.transitionParams;
                float f3 = transitionParams2.animateChangeProgress;
                return (f2 * f3) + (transitionParams2.captionFromY * (1.0f - f3));
            }
            return f;
        }
        return f;
    }

    public boolean isDrawPinnedBottom() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        return this.mediaBackground || this.drawPinnedBottom || (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments);
    }

    public void drawCheckBox(Canvas canvas) {
        float f;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSending()) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.type == 27 || messageObject2.isSendError() || this.checkBox == null) {
            return;
        }
        if (this.checkBoxVisible || this.checkBoxAnimationInProgress) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i = groupedMessagePosition.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            canvas.save();
            float y = getY();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && groupedMessages.messages.size() > 1) {
                f = (getTop() + this.currentMessagesGroup.transitionParams.offsetTop) - getTranslationY();
            } else {
                f = y + this.transitionParams.deltaTop;
            }
            canvas.translate(0.0f, f + this.transitionYOffsetForDrawables);
            this.checkBox.draw(canvas);
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:21:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0046  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setBackgroundTopY(boolean z) {
        int i;
        int i2;
        int i3 = 0;
        while (i3 < 2) {
            boolean z2 = true;
            if (i3 == 1 && !z) {
                return;
            }
            Theme.MessageDrawable messageDrawable = i3 == 0 ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable;
            if (messageDrawable != null) {
                int i4 = this.parentWidth;
                int i5 = this.parentHeight;
                if (i5 == 0) {
                    i4 = getParentWidth();
                    i5 = AndroidUtilities.displaySize.y;
                    if (getParent() instanceof View) {
                        View view = (View) getParent();
                        int measuredWidth = view.getMeasuredWidth();
                        i2 = view.getMeasuredHeight();
                        i = measuredWidth;
                        float y = !z ? getY() : getTop();
                        float f = this.parentViewTopOffset;
                        messageDrawable.setTop((int) (y + f), i, i2, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                        MessageObject messageObject = this.currentMessageObject;
                        messageDrawable.setBotButtonsBottom((messageObject == null && messageObject.hasInlineBotButtons()) ? false : false);
                    }
                }
                i = i4;
                i2 = i5;
                if (!z) {
                }
                float f2 = this.parentViewTopOffset;
                messageDrawable.setTop((int) (y + f2), i, i2, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                MessageObject messageObject2 = this.currentMessageObject;
                messageDrawable.setBotButtonsBottom((messageObject2 == null && messageObject2.hasInlineBotButtons()) ? false : false);
            }
            i3++;
        }
    }

    public void setBackgroundTopY(int i) {
        int i2;
        int i3;
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        int i4 = this.parentWidth;
        int i5 = this.parentHeight;
        if (i5 == 0) {
            i4 = getParentWidth();
            i5 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i3 = view.getMeasuredHeight();
                i2 = measuredWidth;
                float f = this.parentViewTopOffset;
                boolean z = true;
                messageDrawable.setTop((int) (i + f), i2, i3, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                MessageObject messageObject = this.currentMessageObject;
                messageDrawable.setBotButtonsBottom((messageObject == null && messageObject.hasInlineBotButtons()) ? false : false);
            }
        }
        i2 = i4;
        i3 = i5;
        float f2 = this.parentViewTopOffset;
        boolean z2 = true;
        messageDrawable.setTop((int) (i + f2), i2, i3, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
        MessageObject messageObject2 = this.currentMessageObject;
        messageDrawable.setBotButtonsBottom((messageObject2 == null && messageObject2.hasInlineBotButtons()) ? false : false);
    }

    public void setDrawableBoundsInner(Drawable drawable, int i, int i2, int i3, int i4) {
        if (drawable != null) {
            TransitionParams transitionParams = this.transitionParams;
            float f = i4 + i2 + transitionParams.deltaBottom;
            int i5 = (int) f;
            this.transitionYOffsetForDrawables = f - i5;
            drawable.setBounds((int) (i + transitionParams.deltaLeft), (int) (i2 + transitionParams.deltaTop), (int) (i + i3 + transitionParams.deltaRight), i5);
        }
    }

    public void setupTextColors() {
        if (this.currentMessageObject.isOutOwner()) {
            TextPaint textPaint = Theme.chat_msgTextPaint;
            int i = Theme.key_chat_messageTextOut;
            textPaint.setColor(getThemedColor(i));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor(i));
            Theme.chat_msgTextCodePaint.setColor(getThemedColor(i));
            Theme.chat_msgTextCode2Paint.setColor(getThemedColor(i));
            Theme.chat_msgTextCode3Paint.setColor(getThemedColor(i));
            TextPaint textPaint2 = Theme.chat_msgGameTextPaint;
            TextPaint textPaint3 = Theme.chat_replyTextPaint;
            TextPaint textPaint4 = Theme.chat_quoteTextPaint;
            TextPaint textPaint5 = Theme.chat_msgTextPaint;
            TextPaint textPaint6 = Theme.chat_msgTextCodePaint;
            TextPaint textPaint7 = Theme.chat_msgTextCode2Paint;
            TextPaint textPaint8 = Theme.chat_msgTextCode3Paint;
            int themedColor = getThemedColor(Theme.key_chat_messageLinkOut);
            textPaint8.linkColor = themedColor;
            textPaint7.linkColor = themedColor;
            textPaint6.linkColor = themedColor;
            textPaint5.linkColor = themedColor;
            textPaint4.linkColor = themedColor;
            textPaint3.linkColor = themedColor;
            textPaint2.linkColor = themedColor;
            return;
        }
        TextPaint textPaint9 = Theme.chat_msgTextPaint;
        int i2 = Theme.key_chat_messageTextIn;
        textPaint9.setColor(getThemedColor(i2));
        Theme.chat_msgGameTextPaint.setColor(getThemedColor(i2));
        Theme.chat_msgTextCodePaint.setColor(getThemedColor(i2));
        Theme.chat_msgTextCode2Paint.setColor(getThemedColor(i2));
        Theme.chat_msgTextCode3Paint.setColor(getThemedColor(i2));
        TextPaint textPaint10 = Theme.chat_msgGameTextPaint;
        TextPaint textPaint11 = Theme.chat_replyTextPaint;
        TextPaint textPaint12 = Theme.chat_quoteTextPaint;
        TextPaint textPaint13 = Theme.chat_msgTextPaint;
        TextPaint textPaint14 = Theme.chat_msgTextCodePaint;
        TextPaint textPaint15 = Theme.chat_msgTextCode2Paint;
        TextPaint textPaint16 = Theme.chat_msgTextCode3Paint;
        int themedColor2 = getThemedColor(Theme.key_chat_messageLinkIn);
        textPaint16.linkColor = themedColor2;
        textPaint15.linkColor = themedColor2;
        textPaint14.linkColor = themedColor2;
        textPaint13.linkColor = themedColor2;
        textPaint12.linkColor = themedColor2;
        textPaint11.linkColor = themedColor2;
        textPaint10.linkColor = themedColor2;
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public int getBoundsLeft() {
        int i;
        int dp;
        float f;
        MessageObject messageObject = this.currentMessageObject;
        boolean z = messageObject != null && messageObject.isOutOwner();
        if (needDrawAvatar()) {
            if (this.currentPosition != null) {
                f = 73.0f;
            } else {
                MessageObject messageObject2 = this.currentMessageObject;
                f = (messageObject2 == null || !messageObject2.isRepostPreview) ? 63 : 42;
            }
            i = AndroidUtilities.dp(f);
        } else {
            i = 0;
        }
        int dp2 = (z && (checkNeedDrawShareButton(this.currentMessageObject) || this.useTranscribeButton)) ? AndroidUtilities.dp(48.0f) : 0;
        ArrayList<BotButton> arrayList = this.botButtons;
        int i2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        if (arrayList != null) {
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3 != null && messageObject3.isOutOwner()) {
                dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
            } else {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
            }
            for (int i3 = 0; i3 < this.botButtons.size(); i3++) {
                i2 = Math.max(i2, this.botButtons.get(i3).x + dp);
            }
        }
        return Math.max(0, Math.min(i2, (getBackgroundDrawableLeft() - i) - dp2));
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public int getBoundsRight() {
        int dp;
        MessageObject messageObject = this.currentMessageObject;
        int i = 0;
        int dp2 = (messageObject == null || messageObject.isOutOwner() || !(checkNeedDrawShareButton(this.currentMessageObject) || this.useTranscribeButton)) ? 0 : AndroidUtilities.dp(48.0f);
        if (this.botButtons != null) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && messageObject2.isOutOwner()) {
                dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
            } else {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
            }
            int i2 = 0;
            while (i < this.botButtons.size()) {
                BotButton botButton = this.botButtons.get(i);
                i2 = Math.max(i2, botButton.x + dp + botButton.width);
                i++;
            }
            i = i2;
        }
        return Math.max(getBackgroundDrawableRight() + dp2, i);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // android.view.View
    @SuppressLint({"WrongCall"})
    public void onDraw(Canvas canvas) {
        int i;
        boolean z;
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageTopicButton messageTopicButton;
        MessageTopicButton messageTopicButton2;
        Theme.MessageDrawable messageDrawable;
        MessageObject messageObject2;
        int i2;
        int i3;
        int i4;
        int i5;
        int i6;
        if (this.currentMessageObject == null || this.doNotDraw) {
            return;
        }
        if (!this.wasLayout) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        if (this.enterTransitionInProgress && this.currentMessageObject.isAnimatedEmojiStickers()) {
            return;
        }
        if (this.channelRecommendationsCell != null && this.currentMessageObject.type == 27) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            if (chatMessageCellDelegate == null || chatMessageCellDelegate.canDrawOutboundsContent()) {
                this.channelRecommendationsCell.draw(canvas);
            }
            this.transitionParams.recordDrawingState();
            return;
        }
        setupTextColors();
        if (this.documentAttach != null) {
            int i7 = this.documentAttachType;
            if (i7 == 3 || i7 == 7) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBarWaveform.setColors(getThemedColor(Theme.key_chat_outVoiceSeekbar), getThemedColor(Theme.key_chat_outVoiceSeekbarFill), getThemedColor(Theme.key_chat_outVoiceSeekbarSelected));
                    SeekBar seekBar = this.seekBar;
                    int themedColor = getThemedColor(Theme.key_chat_outAudioSeekbar);
                    int themedColor2 = getThemedColor(Theme.key_chat_outAudioCacheSeekbar);
                    int i8 = Theme.key_chat_outAudioSeekbarFill;
                    seekBar.setColors(themedColor, themedColor2, getThemedColor(i8), getThemedColor(i8), getThemedColor(Theme.key_chat_outAudioSeekbarSelected));
                } else if (this.hasLinkPreview && this.linkLine != null) {
                    this.seekBarWaveform.setColors(Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbar), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbarFill), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbarSelected), this.linkLine.getColor()));
                    SeekBar seekBar2 = this.seekBar;
                    int adaptHue = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                    int adaptHue2 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                    int i9 = Theme.key_chat_inAudioSeekbarFill;
                    seekBar2.setColors(adaptHue, adaptHue2, Theme.adaptHue(getThemedColor(i9), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i9), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                } else {
                    this.seekBarWaveform.setColors(getThemedColor(Theme.key_chat_inVoiceSeekbar), getThemedColor(Theme.key_chat_inVoiceSeekbarFill), getThemedColor(Theme.key_chat_inVoiceSeekbarSelected));
                    SeekBar seekBar3 = this.seekBar;
                    int themedColor3 = getThemedColor(Theme.key_chat_inAudioSeekbar);
                    int themedColor4 = getThemedColor(Theme.key_chat_inAudioCacheSeekbar);
                    int i10 = Theme.key_chat_inAudioSeekbarFill;
                    seekBar3.setColors(themedColor3, themedColor4, getThemedColor(i10), getThemedColor(i10), getThemedColor(Theme.key_chat_inAudioSeekbarSelected));
                }
            } else if (i7 == 5) {
                if (this.currentMessageObject.isOutOwner()) {
                    SeekBar seekBar4 = this.seekBar;
                    int themedColor5 = getThemedColor(Theme.key_chat_outAudioSeekbar);
                    int themedColor6 = getThemedColor(Theme.key_chat_outAudioCacheSeekbar);
                    int i11 = Theme.key_chat_outAudioSeekbarFill;
                    seekBar4.setColors(themedColor5, themedColor6, getThemedColor(i11), getThemedColor(i11), getThemedColor(Theme.key_chat_outAudioSeekbarSelected));
                } else if (this.hasLinkPreview && this.linkLine != null) {
                    SeekBar seekBar5 = this.seekBar;
                    int adaptHue3 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                    int adaptHue4 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                    int i12 = Theme.key_chat_inAudioSeekbarFill;
                    seekBar5.setColors(adaptHue3, adaptHue4, Theme.adaptHue(getThemedColor(i12), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i12), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                } else {
                    SeekBar seekBar6 = this.seekBar;
                    int themedColor7 = getThemedColor(Theme.key_chat_inAudioSeekbar);
                    int themedColor8 = getThemedColor(Theme.key_chat_inAudioCacheSeekbar);
                    int i13 = Theme.key_chat_inAudioSeekbarFill;
                    seekBar6.setColors(themedColor7, themedColor8, getThemedColor(i13), getThemedColor(i13), getThemedColor(Theme.key_chat_inAudioSeekbarSelected));
                }
            }
        }
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3.type == 5) {
            TextPaint textPaint = Theme.chat_timePaint;
            int themedColor9 = getThemedColor(Theme.key_chat_serviceText);
            if (isDrawSelectionBackground()) {
                i6 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText;
            } else {
                i6 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText;
            }
            textPaint.setColor(ColorUtils.blendARGB(themedColor9, getThemedColor(i6), getVideoTranscriptionProgress()));
        } else if (this.mediaBackground) {
            if (messageObject3.shouldDrawWithoutBackground()) {
                Theme.chat_timePaint.setColor(getThemedColor(Theme.key_chat_serviceText));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor(Theme.key_chat_mediaTimeText));
            }
        } else if (messageObject3.isOutOwner()) {
            Theme.chat_timePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText));
        } else {
            Theme.chat_timePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText));
        }
        if (isWidthAdaptive()) {
            canvas.save();
            canvas.translate(-getBoundsLeft(), 0.0f);
        }
        drawBackgroundInternal(canvas, false);
        if (this.isHighlightedAnimated) {
            long currentTimeMillis = System.currentTimeMillis();
            long abs = Math.abs(currentTimeMillis - this.lastHighlightProgressTime);
            if (abs > 17) {
                abs = 17;
            }
            int i14 = (int) (this.highlightProgress - abs);
            this.highlightProgress = i14;
            this.lastHighlightProgressTime = currentTimeMillis;
            if (i14 <= 0) {
                this.highlightProgress = 0;
                this.isHighlightedAnimated = false;
                if (this.highlightedQuote) {
                    resetUrlPaths();
                }
                this.highlightedQuote = false;
            }
            invalidate();
            if (getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if (this.alphaInternal != 1.0f) {
            int measuredHeight = getMeasuredHeight();
            int measuredWidth = getMeasuredWidth();
            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                i5 = messageDrawable2.getBounds().top;
                i4 = this.currentBackgroundDrawable.getBounds().bottom;
                i3 = this.currentBackgroundDrawable.getBounds().left;
                i2 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                i2 = measuredWidth;
                i3 = 0;
                i4 = measuredHeight;
                i5 = 0;
            }
            if (this.drawSideButton != 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i3 -= AndroidUtilities.dp(40.0f);
                } else {
                    i2 += AndroidUtilities.dp(40.0f);
                }
            }
            if (getY() < 0.0f) {
                i5 = (int) (-getY());
            }
            float y = getY() + getMeasuredHeight();
            float f = this.parentHeight;
            if (y > f) {
                i4 = (int) (f - getY());
            }
            this.rect.set(i3, i5, i2, i4);
            i = canvas.saveLayerAlpha(this.rect, (int) (this.alphaInternal * 255.0f), 31);
        } else {
            i = Integer.MIN_VALUE;
        }
        if (!this.transitionParams.animateBackgroundBoundsInner || (messageDrawable = this.currentBackgroundDrawable) == null || this.isRoundVideo || ((messageObject2 = this.currentMessageObject) != null && messageObject2.sendPreview)) {
            z = false;
        } else {
            Rect bounds = messageDrawable.getBounds();
            canvas.save();
            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
            z = true;
        }
        drawContent(canvas, false);
        ExpiredStoryView expiredStoryView = this.expiredStoryView;
        if (expiredStoryView != null && expiredStoryView.visible) {
            expiredStoryView.draw(canvas, this);
        }
        if (z) {
            canvas.restore();
        }
        if (this.replyNameLayout != null) {
            float f2 = this.replyTextHeight;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams != null && transitionParams.animateReplyTextLayout != null) {
                f2 = AndroidUtilities.lerp(this.transitionParams.animateFromReplyTextHeight, f2, this.transitionParams.animateChangeProgress);
            }
            this.replyHeight = AndroidUtilities.dp(9.0f) + Theme.chat_replyNamePaint.getTextSize() + Math.max(f2 - AndroidUtilities.dp(3.66f), Theme.chat_replyTextPaint.getTextSize());
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                MessageObject messageObject4 = this.currentMessageObject;
                if (messageObject4.type != 19) {
                    if (messageObject4.isOutOwner()) {
                        int dp = AndroidUtilities.dp(23.0f);
                        this.replyStartX = dp;
                        if (this.isPlayingRound) {
                            this.replyStartX = dp - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
                        }
                    } else if (this.currentMessageObject.type == 5) {
                        this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(4.0f);
                    } else {
                        this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                    }
                    if (this.drawForwardedName) {
                        int dp2 = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                        this.forwardHeight = dp2;
                        this.replyStartY = this.forwardNameY + dp2 + AndroidUtilities.dp(6.0f);
                    } else {
                        int dp3 = AndroidUtilities.dp(12.0f);
                        this.replyStartY = dp3;
                        if (this.drawTopic && (messageTopicButton2 = this.topicButton) != null) {
                            this.replyStartY = dp3 + messageTopicButton2.height() + AndroidUtilities.dp(10.0f);
                        }
                    }
                    this.replyStartY += AndroidUtilities.dp(0.66f);
                }
            }
            if (this.currentMessageObject.isOutOwner()) {
                int dp4 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                this.replyStartX = dp4;
                if (this.currentMessageObject.type == 19) {
                    this.replyStartX = dp4 - Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp4) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else if (this.mediaBackground) {
                this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
            } else {
                this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f) + getExtraTextX();
            }
            if (this.currentMessageObject.type == 19) {
                this.replyStartX -= AndroidUtilities.dp(7.0f);
            }
            this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
            int dp5 = AndroidUtilities.dp(12.0f) + ((!this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize())) + ((!this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : AndroidUtilities.dp(4.0f) + this.forwardHeight);
            this.replyStartY = dp5;
            if (this.drawTopic && (messageTopicButton = this.topicButton) != null) {
                this.replyStartY = dp5 + messageTopicButton.height() + AndroidUtilities.dp(5.0f);
            }
            this.replyStartY += AndroidUtilities.dp(0.66f);
        }
        if (this.currentPosition == null && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawNamesLayout(canvas, 1.0f);
        }
        if ((!this.autoPlayingMedia || !MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject) || this.isRoundVideo) && !this.transitionParams.animateBackgroundBoundsInner && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) {
            drawOverlays(canvas);
        }
        if ((this.drawTime || !this.mediaBackground) && !this.forceNotDrawTime && !this.transitionParams.animateBackgroundBoundsInner && ((!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) && (!this.currentMessageObject.isQuickReply() || this.currentMessageObject.isSendError()))) {
            drawTime(canvas, 1.0f, false);
        }
        if ((this.controlsAlpha != 1.0f || this.timeAlpha != 1.0f) && this.currentMessageObject.type != 5) {
            long currentTimeMillis2 = System.currentTimeMillis();
            long abs2 = Math.abs(this.lastControlsAlphaChangeTime - currentTimeMillis2);
            long j = this.totalChangeTime + (abs2 <= 17 ? abs2 : 17L);
            this.totalChangeTime = j;
            if (j > 200) {
                this.totalChangeTime = 200L;
            }
            this.lastControlsAlphaChangeTime = currentTimeMillis2;
            if (this.controlsAlpha != 1.0f) {
                this.controlsAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 200.0f);
            }
            if (this.timeAlpha != 1.0f) {
                this.timeAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 200.0f);
            }
            invalidate();
            if (this.forceNotDrawTime && (groupedMessagePosition = this.currentPosition) != null && groupedMessagePosition.last && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if ((this.drawBackground || this.transitionParams.animateDrawBackground) && shouldDrawSelectionOverlay() && this.currentMessagesGroup == null && hasSelectionOverlay()) {
            if (this.selectionOverlayPaint == null) {
                this.selectionOverlayPaint = new Paint(1);
            }
            this.selectionOverlayPaint.setColor(getSelectionOverlayColor());
            int alpha = this.selectionOverlayPaint.getAlpha();
            this.selectionOverlayPaint.setAlpha((int) (alpha * getHighlightAlpha() * getAlpha()));
            if (this.selectionOverlayPaint.getAlpha() > 0) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), getMeasuredHeight());
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams, this.selectionOverlayPaint);
                canvas.restore();
            }
            this.selectionOverlayPaint.setAlpha(alpha);
        }
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 == null || chatMessageCellDelegate2.canDrawOutboundsContent() || this.transitionParams.messageEntering || getAlpha() != 1.0f) {
            drawOutboundsContent(canvas);
        }
        if (i != Integer.MIN_VALUE) {
            canvas.restoreToCount(i);
        }
        if (isWidthAdaptive()) {
            canvas.restore();
        }
        updateSelectionTextPosition();
    }

    /* JADX WARN: Removed duplicated region for block: B:362:0x0751  */
    /* JADX WARN: Removed duplicated region for block: B:381:0x0812  */
    @SuppressLint({"WrongCall"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackgroundInternal(Canvas canvas, boolean z) {
        Drawable shadowDrawable;
        Drawable drawable;
        int i;
        int i2;
        int dp;
        int i3;
        int i4;
        int i5;
        MessageObject messageObject;
        Canvas canvas2;
        String str;
        String str2;
        String str3;
        float f;
        float f2;
        MessageObject messageObject2;
        MessageObject.GroupedMessages groupedMessages;
        Theme.MessageDrawable messageDrawable;
        int i6;
        int i7;
        int i8;
        int dp2;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Drawable shadowDrawable2;
        int i9;
        int i10;
        int i11;
        int dp3;
        if (this.currentMessageObject == null) {
            return;
        }
        boolean z2 = this.wasLayout;
        if (!z2 && !this.animationRunning) {
            forceLayout();
            return;
        }
        if (!z2) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
        boolean z3 = true;
        boolean z4 = groupedMessagePosition2 != null && (groupedMessagePosition2.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
        if (this.currentMessageObject.isOutOwner()) {
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z4) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                shadowDrawable2 = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                shadowDrawable2 = this.currentBackgroundDrawable.getShadowDrawable();
            }
            drawable = shadowDrawable2;
            this.backgroundDrawableLeft = (this.layoutWidth - this.backgroundWidth) - (!this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f));
            int dp4 = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            this.backgroundDrawableRight = dp4;
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null && !groupedMessages2.isDocuments && !this.currentPosition.edge) {
                this.backgroundDrawableRight = dp4 + AndroidUtilities.dp(10.0f);
            }
            int i12 = this.backgroundDrawableLeft;
            if (!z4 && this.transitionParams.changePinnedBottomProgress != 1.0f) {
                if (!this.mediaBackground) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
            } else if (!this.mediaBackground && this.drawPinnedBottom) {
                this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    i12 -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i10 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i11 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                } else {
                    i10 = 0;
                    i11 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i11 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                }
                i9 = i12;
            } else {
                i9 = i12;
                i10 = 0;
                i11 = 0;
            }
            boolean z5 = this.drawPinnedBottom;
            if (z5 && this.drawPinnedTop) {
                dp3 = 0;
            } else if (z5) {
                dp3 = AndroidUtilities.dp(1.0f);
            } else {
                dp3 = AndroidUtilities.dp(2.0f);
            }
            int dp5 = (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f)) + i10;
            this.backgroundDrawableTop = dp5;
            int i13 = (this.layoutHeight - dp3) + i11;
            this.backgroundDrawableBottom = dp5 + i13;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp5 - AndroidUtilities.dp(1.0f);
                    i13 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i13 += AndroidUtilities.dp(1.0f);
                }
            }
            int i14 = i13;
            if (z4) {
                setDrawableBoundsInner(this.currentBackgroundDrawable, i9, this.backgroundDrawableTop - i10, this.backgroundDrawableRight, (i14 - i11) + 10);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i14);
            } else {
                int i15 = i9;
                setDrawableBoundsInner(this.currentBackgroundDrawable, i15, this.backgroundDrawableTop, this.backgroundDrawableRight, i14);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, i15, this.backgroundDrawableTop, this.backgroundDrawableRight, i14);
            }
            setDrawableBoundsInner(drawable, i9, this.backgroundDrawableTop, this.backgroundDrawableRight, i14);
        } else {
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z4) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                shadowDrawable = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
            }
            drawable = shadowDrawable;
            this.backgroundDrawableLeft = AndroidUtilities.dp((((this.isChat || ((messageObject = this.currentMessageObject) != null && (messageObject.isRepostPreview || messageObject.forceAvatar))) && this.isAvatarVisible) ? 48 : 0) + (!this.mediaBackground ? 3 : 9));
            this.backgroundDrawableRight = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                if (!this.currentPosition.edge) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(10.0f);
                    this.backgroundDrawableRight += AndroidUtilities.dp(10.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    this.backgroundDrawableLeft += (int) Math.ceil((i5 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            boolean z6 = this.mediaBackground;
            if ((!z6 && this.drawPinnedBottom) || (!z4 && this.transitionParams.changePinnedBottomProgress != 1.0f)) {
                if (this.drawPinnedBottom || !z6) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
                if (!this.mediaBackground) {
                    this.backgroundDrawableLeft += AndroidUtilities.dp(6.0f);
                }
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 != null) {
                if ((groupedMessagePosition4.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i4 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i3 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                } else {
                    i3 = 0;
                    i4 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i3 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 4);
                }
                i = i3;
                i2 = i4;
            } else {
                i = 0;
                i2 = 0;
            }
            boolean z7 = this.drawPinnedBottom;
            if (z7 && this.drawPinnedTop) {
                dp = 0;
            } else if (z7) {
                dp = AndroidUtilities.dp(1.0f);
            } else {
                dp = AndroidUtilities.dp(2.0f);
            }
            int dp6 = i2 + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
            this.backgroundDrawableTop = dp6;
            int i16 = (this.layoutHeight - dp) + i;
            this.backgroundDrawableBottom = dp6 + i16;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp6 - AndroidUtilities.dp(1.0f);
                    i16 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i16 += AndroidUtilities.dp(1.0f);
                }
            }
            int i17 = i16;
            setDrawableBoundsInner(this.currentBackgroundDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i17);
            if (z4) {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, AndroidUtilities.dp(6.0f) + this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i17);
            } else {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i17);
            }
            setDrawableBoundsInner(drawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i17);
        }
        Drawable drawable2 = drawable;
        if (!this.currentMessageObject.isOutOwner() && this.transitionParams.changePinnedBottomProgress != 1.0f && !this.mediaBackground && !this.drawPinnedBottom) {
            this.backgroundDrawableLeft -= AndroidUtilities.dp(6.0f);
            this.backgroundDrawableRight += AndroidUtilities.dp(6.0f);
        }
        if (this.hasPsaHint) {
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 == null || (groupedMessagePosition5.flags & 2) != 0) {
                i8 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                int groupPhotosWidth = getGroupPhotosWidth();
                i8 = 0;
                for (int i18 = 0; i18 < this.currentMessagesGroup.posArray.size(); i18++) {
                    if (this.currentMessagesGroup.posArray.get(i18).minY != 0) {
                        break;
                    }
                    double d = i8;
                    double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    i8 = (int) (d + ceil);
                }
            }
            Drawable drawable3 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
            if (this.currentMessageObject.type == 5) {
                dp2 = AndroidUtilities.dp(12.0f);
            } else {
                dp2 = AndroidUtilities.dp((this.drawNameLayout ? 19 : 0) + 10);
            }
            this.psaHelpX = (i8 - drawable3.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 20.0f : 14.0f);
            this.psaHelpY = dp2 + AndroidUtilities.dp(4.0f);
        }
        if (this.checkBoxVisible || this.checkBoxAnimationInProgress) {
            animateCheckboxTranslation();
            int dp7 = AndroidUtilities.dp(21.0f);
            this.checkBox.setBounds(AndroidUtilities.dp(-27.0f) + this.checkBoxTranslation, (this.currentBackgroundDrawable.getBounds().bottom - AndroidUtilities.dp(8.0f)) - dp7, dp7, dp7);
        }
        if (z || !drawBackgroundInParent()) {
            int saveCount = canvas.getSaveCount();
            if (this.transitionYOffsetForDrawables != 0.0f) {
                canvas.save();
                canvas2 = canvas;
                canvas2.translate(0.0f, this.transitionYOffsetForDrawables);
            } else {
                canvas2 = canvas;
            }
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3 != null && messageObject3.isRoundVideo()) {
                float videoTranscriptionProgress = getVideoTranscriptionProgress();
                this.currentBackgroundDrawable.setRoundingRadius(1.0f - videoTranscriptionProgress);
                f = AndroidUtilities.lerp(this.backgroundWidth / 2, 0, videoTranscriptionProgress);
                str = "drawableMsgOut";
                str2 = "drawableMsgIn";
                str3 = "drawableMsgInMedia";
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), Math.max(this.currentBackgroundDrawable.getBounds().bottom, getHeight()), (int) (videoTranscriptionProgress * 255.0f), 31);
                this.roundVideoPlayPipFloat.set((((MediaController.getInstance().isPiPShown() && MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject)) || this.wouldBeInPip) && canvas.isHardwareAccelerated()) ? 1.0f : 0.0f);
                if (MediaController.getInstance().isPiPShown()) {
                    this.wouldBeInPip = false;
                }
            } else {
                str = "drawableMsgOut";
                str2 = "drawableMsgIn";
                str3 = "drawableMsgInMedia";
                this.roundVideoPlayPipFloat.set(0.0f, true);
                f = 0.0f;
            }
            if ((this.drawBackground || this.transitionParams.animateDrawBackground) && this.currentBackgroundDrawable != null && ((this.currentPosition == null || (isDrawSelectionBackground() && (this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()))) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()))) {
                float f3 = this.alphaInternal;
                if (z) {
                    f3 *= getAlpha();
                }
                if (hasSelectionOverlay()) {
                    this.currentSelectedBackgroundAlpha = 0.0f;
                    int i19 = (int) (f3 * 255.0f);
                    this.currentBackgroundDrawable.setAlpha(i19);
                    this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                    if (drawable2 != null && this.currentPosition == null) {
                        drawable2.setAlpha(i19);
                        drawable2.draw(canvas2);
                    }
                } else {
                    if (this.isHighlightedAnimated) {
                        this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        float highlightAlpha = getHighlightAlpha();
                        this.currentSelectedBackgroundAlpha = highlightAlpha;
                        if (this.currentPosition == null) {
                            this.currentBackgroundSelectedDrawable.setAlpha((int) (highlightAlpha * f3 * 255.0f));
                            this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        }
                    } else if (this.selectedBackgroundProgress != 0.0f && (((messageObject2 = this.currentMessageObject) == null || !messageObject2.preview) && ((groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments))) {
                        this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        float f4 = this.selectedBackgroundProgress;
                        this.currentSelectedBackgroundAlpha = f4;
                        this.currentBackgroundSelectedDrawable.setAlpha((int) (f4 * f3 * 255.0f));
                        this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        if (this.currentBackgroundDrawable.getGradientShader() == null) {
                            drawable2 = null;
                        }
                    } else {
                        if (isDrawSelectionBackground() && this.quoteHighlight == null && (this.currentPosition == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument() || getBackground() != null)) {
                            if (this.currentPosition != null) {
                                canvas.save();
                            }
                            f2 = 1.0f;
                            this.currentSelectedBackgroundAlpha = 1.0f;
                            this.currentBackgroundSelectedDrawable.setAlpha((int) (f3 * 255.0f));
                            this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                            if (this.currentPosition != null) {
                                canvas.restore();
                            }
                        } else {
                            f2 = 1.0f;
                            this.currentSelectedBackgroundAlpha = 0.0f;
                            this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                            this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        }
                        if (drawable2 != null && this.currentPosition == null) {
                            drawable2.setAlpha((int) (f3 * 255.0f));
                            drawable2.draw(canvas2);
                        }
                        if (this.transitionParams.changePinnedBottomProgress != f2 && this.currentPosition == null) {
                            if (!this.currentMessageObject.isOutOwner()) {
                                Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable(str);
                                Rect bounds = this.currentBackgroundDrawable.getBounds();
                                messageDrawable2.setBounds(bounds.left, bounds.top, bounds.right + AndroidUtilities.dp(6.0f), bounds.bottom);
                                canvas.save();
                                canvas2.translate(-f, 0.0f);
                                canvas2.clipRect(bounds.right - AndroidUtilities.dp(16.0f), bounds.bottom - AndroidUtilities.dp(16.0f), bounds.right + AndroidUtilities.dp(16.0f), bounds.bottom);
                                int i20 = this.parentWidth;
                                int i21 = this.parentHeight;
                                if (i21 == 0) {
                                    i20 = getParentWidth();
                                    i21 = AndroidUtilities.displaySize.y;
                                    if (getParent() instanceof View) {
                                        View view = (View) getParent();
                                        int measuredWidth = view.getMeasuredWidth();
                                        i7 = view.getMeasuredHeight();
                                        i6 = measuredWidth;
                                        float y = getY();
                                        float f5 = this.parentViewTopOffset;
                                        messageDrawable2.setTop((int) (y + f5), i6, i7, (int) f5, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                        MessageObject messageObject4 = this.currentMessageObject;
                                        messageDrawable2.setBotButtonsBottom((messageObject4 == null && messageObject4.hasInlineBotButtons()) ? false : false);
                                        messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                        messageDrawable2.draw(canvas2);
                                        messageDrawable2.setAlpha(NotificationCenter.voipServiceCreated);
                                        canvas.restore();
                                    }
                                }
                                i6 = i20;
                                i7 = i21;
                                float y2 = getY();
                                float f52 = this.parentViewTopOffset;
                                messageDrawable2.setTop((int) (y2 + f52), i6, i7, (int) f52, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                MessageObject messageObject42 = this.currentMessageObject;
                                messageDrawable2.setBotButtonsBottom((messageObject42 == null && messageObject42.hasInlineBotButtons()) ? false : false);
                                messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                messageDrawable2.draw(canvas2);
                                messageDrawable2.setAlpha(NotificationCenter.voipServiceCreated);
                                canvas.restore();
                            } else {
                                if (this.transitionParams.drawPinnedBottomBackground) {
                                    messageDrawable = (Theme.MessageDrawable) getThemedDrawable(str2);
                                } else {
                                    messageDrawable = (Theme.MessageDrawable) getThemedDrawable(str3);
                                }
                                messageDrawable.setAlpha((int) (((this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                Rect bounds2 = this.currentBackgroundDrawable.getBounds();
                                messageDrawable.setBounds(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.top, bounds2.right, bounds2.bottom);
                                canvas.save();
                                canvas2.translate(f, 0.0f);
                                canvas2.clipRect(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.bottom - AndroidUtilities.dp(16.0f), bounds2.left + AndroidUtilities.dp(18.0f), bounds2.bottom);
                                messageDrawable.draw(canvas2);
                                messageDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                                canvas.restore();
                            }
                        }
                    }
                    f2 = 1.0f;
                    if (drawable2 != null) {
                        drawable2.setAlpha((int) (f3 * 255.0f));
                        drawable2.draw(canvas2);
                    }
                    if (this.transitionParams.changePinnedBottomProgress != f2) {
                        if (!this.currentMessageObject.isOutOwner()) {
                        }
                    }
                }
            }
            MessageObject messageObject5 = this.currentMessageObject;
            if (messageObject5 != null && messageObject5.isRoundVideo()) {
                this.currentBackgroundDrawable.setRoundingRadius(0.0f);
            }
            canvas2.restoreToCount(saveCount);
        }
    }

    private void animateCheckboxTranslation() {
        boolean z = this.checkBoxVisible;
        if (z || this.checkBoxAnimationInProgress) {
            if ((z && this.checkBoxAnimationProgress == 1.0f) || (!z && this.checkBoxAnimationProgress == 0.0f)) {
                this.checkBoxAnimationInProgress = false;
            }
            this.checkBoxTranslation = (int) Math.ceil((z ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            if (!this.currentMessageObject.isOutOwner() || this.currentMessageObject.hasWideCode) {
                updateTranslation();
            }
            if (this.checkBoxAnimationInProgress) {
                long elapsedRealtime = SystemClock.elapsedRealtime();
                long j = elapsedRealtime - this.lastCheckBoxAnimationTime;
                this.lastCheckBoxAnimationTime = elapsedRealtime;
                if (this.checkBoxVisible) {
                    float f = this.checkBoxAnimationProgress + (((float) j) / 200.0f);
                    this.checkBoxAnimationProgress = f;
                    if (f > 1.0f) {
                        this.checkBoxAnimationProgress = 1.0f;
                    }
                } else {
                    float f2 = this.checkBoxAnimationProgress - (((float) j) / 200.0f);
                    this.checkBoxAnimationProgress = f2;
                    if (f2 <= 0.0f) {
                        this.checkBoxAnimationProgress = 0.0f;
                    }
                }
                invalidate();
                ((View) getParent()).invalidate();
            }
        }
    }

    public boolean drawBackgroundInParent() {
        MessageObject messageObject;
        return this.canDrawBackgroundInParent && (messageObject = this.currentMessageObject) != null && messageObject.isOutOwner() && getThemedColor(Theme.key_chat_outBubbleGradient1) != 0;
    }

    public void drawServiceBackground(Canvas canvas, RectF rectF, float f, float f2) {
        applyServiceShaderMatrix();
        if (f2 != 1.0f) {
            int alpha = getThemedPaint("paintChatActionBackground").getAlpha();
            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f2));
            canvas.drawRoundRect(rectF, f, f, getThemedPaint("paintChatActionBackground"));
            getThemedPaint("paintChatActionBackground").setAlpha(alpha);
        } else {
            canvas.drawRoundRect(rectF, f, f, getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
        }
        if (hasGradientService()) {
            if (f2 != 1.0f) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f2 * alpha2));
                canvas.drawRoundRect(rectF, f, f, Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
                return;
            }
            canvas.drawRoundRect(rectF, f, f, Theme.chat_actionBackgroundGradientDarkenPaint);
        }
    }

    public void drawCommentButton(Canvas canvas, float f) {
        if (this.drawSideButton != 3) {
            return;
        }
        int dp = AndroidUtilities.dp(32.0f);
        if (this.commentLayout != null) {
            this.sideStartY -= AndroidUtilities.dp(18.0f);
            dp += AndroidUtilities.dp(18.0f);
        }
        RectF rectF = this.rect;
        float f2 = this.sideStartX;
        rectF.set(f2, this.sideStartY, AndroidUtilities.dp(32.0f) + f2, this.sideStartY + dp);
        applyServiceShaderMatrix();
        if (f != 1.0f) {
            int alpha = getThemedPaint("paintChatActionBackground").getAlpha();
            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint("paintChatActionBackground"));
            getThemedPaint("paintChatActionBackground").setAlpha(alpha);
        } else {
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
        }
        if (hasGradientService()) {
            if (f != 1.0f) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            } else {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
        }
        Drawable themeDrawable = Theme.getThemeDrawable("drawableCommentSticker");
        BaseCell.setDrawableBounds(themeDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
        if (f != 1.0f) {
            themeDrawable.setAlpha((int) (f * 255.0f));
            themeDrawable.draw(canvas);
            themeDrawable.setAlpha(NotificationCenter.voipServiceCreated);
        } else {
            themeDrawable.draw(canvas);
        }
        if (this.commentLayout != null) {
            Theme.chat_stickerCommentCountPaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
            Theme.chat_stickerCommentCountPaint.setAlpha((int) (f * 255.0f));
            if (this.transitionParams.animateComments) {
                if (this.transitionParams.animateCommentsLayout != null) {
                    canvas.save();
                    TextPaint textPaint = Theme.chat_stickerCommentCountPaint;
                    double d = this.transitionParams.animateChangeProgress;
                    Double.isNaN(d);
                    double d2 = f;
                    Double.isNaN(d2);
                    textPaint.setAlpha((int) ((1.0d - d) * 255.0d * d2));
                    canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.transitionParams.animateTotalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
                    this.transitionParams.animateCommentsLayout.draw(canvas);
                    canvas.restore();
                }
                Theme.chat_stickerCommentCountPaint.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
            }
            canvas.save();
            canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.totalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
            this.commentLayout.draw(canvas);
            canvas.restore();
        }
    }

    public void applyServiceShaderMatrix() {
        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
    }

    private void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider != null) {
            resourcesProvider.applyServiceShaderMatrix(i, i2, f, f2);
        } else {
            Theme.applyServiceShaderMatrix(i, i2, f, f2);
        }
    }

    public boolean hasOutboundsContent() {
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2 = this.effectDrawable;
        if ((swapAnimatedEmojiDrawable2 == null || swapAnimatedEmojiDrawable2.isNotEmpty() <= 0.0f) && !this.hasFactCheck) {
            if (this.transitionParams.animateExpandedQuotes && ((i = (messageObject2 = this.currentMessageObject).type) == 0 || i == 24 || i == 19 || messageObject2.isGiveawayOrGiveawayResults())) {
                return true;
            }
            if (this.channelRecommendationsCell == null || (messageObject = this.currentMessageObject) == null || messageObject.type != 27) {
                if (getAlpha() != 1.0f) {
                    return false;
                }
                if ((this.transitionParams.transitionBotButtons.isEmpty() || !this.transitionParams.animateBotButtonsChanged) && this.botButtons.isEmpty() && this.drawSideButton == 0) {
                    if (!this.drawNameLayout || this.nameLayout == null || (swapAnimatedEmojiDrawable = this.currentNameStatusDrawable) == null || swapAnimatedEmojiDrawable.getDrawable() == null) {
                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiStack;
                        if (emojiGroupedSpans == null || emojiGroupedSpans.holders.isEmpty()) {
                            if (this.drawTopic && this.topicButton != null) {
                                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                                if (groupedMessagePosition == null) {
                                    return true;
                                }
                                if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                                    return true;
                                }
                            }
                            if (this.currentMessagesGroup == null) {
                                TransitionParams transitionParams = this.transitionParams;
                                if (((transitionParams.animateReplaceCaptionLayout && transitionParams.animateChangeProgress != 1.0f) || (transitionParams.animateChangeProgress != 1.0f && transitionParams.animateMessageText)) && transitionParams.animateOutAnimateEmoji != null && !this.transitionParams.animateOutAnimateEmoji.holders.isEmpty()) {
                                    return true;
                                }
                            }
                            return false;
                        }
                        return true;
                    }
                    return true;
                }
                return true;
            }
            return true;
        }
        return true;
    }

    public void drawOutboundsContent(Canvas canvas) {
        TransitionParams transitionParams;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        float f;
        float f2;
        float f3;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        float dp;
        int extraTextX;
        int themedColor;
        TLRPC$User tLRPC$User;
        TLRPC$TL_peerColor tLRPC$TL_peerColor;
        float dp2;
        float f4;
        int i;
        int i2;
        int i3;
        float dp3;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject;
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27) {
            channelRecommendationsCell.draw(canvas);
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null) {
            return;
        }
        int i4 = messageObject2.type;
        if ((i4 == 0 || i4 == 24 || i4 == 19 || messageObject2.isGiveawayOrGiveawayResults()) && this.transitionParams.animateExpandedQuotes) {
            layoutTextXY(false);
            drawMessageText(canvas);
        }
        if (this.currentMessagesGroup != null) {
            updateCaptionLayout();
            drawFactCheck(canvas, 1.0f);
        }
        drawFactCheckText(canvas, 1.0f);
        if (!this.enterTransitionInProgress) {
            drawAnimatedEmojis(canvas, 1.0f);
        }
        if (this.currentNameStatusDrawable != null && this.drawNameLayout && this.nameLayout != null && (((groupedMessagePosition2 = this.currentPosition) == null || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0)) && (!this.currentMessageObject.deleted || this.drawingToBitmap || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.size() < 1))) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                i = getThemedColor(Theme.key_chat_stickerNameText);
                if (this.currentMessageObject.isOutOwner()) {
                    dp3 = AndroidUtilities.dp(28.0f);
                } else {
                    dp3 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                }
                dp2 = this.layoutHeight - AndroidUtilities.dp(38.0f);
                f4 = dp3 - this.nameOffsetX;
            } else {
                float f5 = 11.0f;
                if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                    dp = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(11.0f);
                    extraTextX = getExtraTextX();
                } else {
                    dp = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 17.0f);
                    extraTextX = getExtraTextX();
                }
                float f6 = dp + extraTextX;
                if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null && messageDrawable.hasGradient()) {
                        themedColor = getThemedColor(Theme.key_chat_messageTextOut);
                    } else {
                        themedColor = getThemedColor(Theme.key_chat_outForwardedNameText);
                    }
                } else if (this.currentMessageObject.isOutOwner()) {
                    themedColor = getThemedColor(Theme.key_chat_outForwardedNameText);
                } else {
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (messageObject3.overrideLinkColor >= 0 || ((messageObject3.isFromUser() && this.currentUser != null) || ((this.currentMessageObject.isFromChannel() && this.currentChat != null) || ((tLRPC$TL_peerColor = this.currentMessageObject.sponsoredColor) != null && tLRPC$TL_peerColor.color != -1)))) {
                        MessageObject messageObject4 = this.currentMessageObject;
                        int i5 = messageObject4.overrideLinkColor;
                        if (i5 < 0) {
                            TLRPC$TL_peerColor tLRPC$TL_peerColor2 = messageObject4.sponsoredColor;
                            if (tLRPC$TL_peerColor2 != null) {
                                i5 = tLRPC$TL_peerColor2.color;
                            } else if (messageObject4.isFromUser() && (tLRPC$User = this.currentUser) != null) {
                                i5 = UserObject.getColorId(tLRPC$User);
                            } else {
                                i5 = ChatObject.getColorId(this.currentChat);
                            }
                        }
                        if (i5 < 7) {
                            themedColor = getThemedColor(Theme.keys_avatar_nameInMessage[i5]);
                        } else {
                            MessagesController.PeerColors peerColors = MessagesController.getInstance(this.currentAccount).peerColors;
                            MessagesController.PeerColor color = peerColors != null ? peerColors.getColor(i5) : null;
                            if (color != null) {
                                themedColor = color.getColor(0, this.resourcesProvider);
                            } else {
                                themedColor = getThemedColor(Theme.key_chat_inForwardedNameText);
                            }
                        }
                    } else {
                        themedColor = getThemedColor(Theme.key_chat_inForwardedNameText);
                    }
                }
                dp2 = AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                int i6 = themedColor;
                f4 = f6;
                i = i6;
            }
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams2 = groupedMessages2.transitionParams;
                if (transitionParams2.backgroundChangeBounds) {
                    f4 += transitionParams2.offsetLeft;
                    dp2 += transitionParams2.offsetTop - getTranslationY();
                }
            }
            float f7 = f4 + this.animationOffsetX;
            TransitionParams transitionParams3 = this.transitionParams;
            float f8 = dp2 + transitionParams3.deltaTop;
            if (transitionParams3.animateSign) {
                f7 = ((f7 - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress) + this.transitionParams.animateNameX;
            }
            this.currentNameStatusDrawable.setBounds((int) (Math.abs(f7) + (this.viaNameWidth > 0 ? i2 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(2.0f)), (int) (((this.nameLayout.getHeight() / 2) + f8) - AndroidUtilities.dp(10.0f)), (int) (Math.abs(f7) + (this.viaNameWidth > 0 ? i3 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(22.0f)), (int) (f8 + (this.nameLayout.getHeight() / 2) + AndroidUtilities.dp(10.0f)));
            this.currentNameStatusDrawable.setColor(Integer.valueOf(ColorUtils.setAlphaComponent(i, 115)));
            this.currentNameStatusDrawable.draw(canvas);
        }
        if (this.drawTopic && this.topicButton != null && ((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0))) {
            if (!this.isRoundVideo || this.hasLinkPreview) {
                f = 1.0f;
            } else {
                f = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
                TransitionParams transitionParams4 = this.transitionParams;
                if (transitionParams4.animatePlayingRound) {
                    if (this.isPlayingRound) {
                        f3 = 1.0f - transitionParams4.animateChangeProgress;
                    } else {
                        f3 = transitionParams4.animateChangeProgress;
                    }
                    f *= f3;
                } else if (this.isPlayingRound) {
                    f = 0.0f;
                }
            }
            if (!this.transitionParams.animateForwardedLayout) {
                f2 = 1.0f;
            } else if (!this.currentMessageObject.needDrawForwarded()) {
                f2 = 1.0f - this.transitionParams.animateChangeProgress;
            } else {
                f2 = this.transitionParams.animateChangeProgress;
            }
            this.topicButton.drawOutbounds(canvas, f2 * f);
        }
        if (!this.transitionParams.transitionBotButtons.isEmpty()) {
            if (this.transitionParams.animateBotButtonsChanged) {
                drawBotButtons(canvas, this.transitionParams.transitionBotButtons, (int) (MathUtils.clamp(1.0f - ((float) Math.pow(transitionParams.animateChangeProgress, 2.0d)), 0.0f, 1.0f) * 255.0f));
            }
        }
        if (!this.botButtons.isEmpty()) {
            ArrayList<BotButton> arrayList = this.botButtons;
            TransitionParams transitionParams5 = this.transitionParams;
            drawBotButtons(canvas, arrayList, transitionParams5.animateBotButtonsChanged ? (int) (transitionParams5.animateChangeProgress * 255.0f) : NotificationCenter.voipServiceCreated);
        }
        drawSideButton(canvas);
    }

    public void drawAnimatedEmojis(Canvas canvas, float f) {
        drawAnimatedEmojiMessageText(canvas, f);
        if (shouldDrawCaptionLayout()) {
            drawAnimatedEmojiCaption(canvas, f);
        }
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas, float f) {
        float f2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSponsored()) {
            return;
        }
        float f3 = this.textY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f4 = transitionParams.animateFromTextY;
            float f5 = transitionParams.animateChangeProgress;
            f2 = (f4 * (1.0f - f5)) + (f3 * f5);
        } else {
            f2 = f3;
        }
        if (transitionParams.animateChangeProgress != 1.0f && transitionParams.animateMessageText) {
            canvas.save();
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                Rect bounds = messageDrawable.getBounds();
                if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                } else {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                }
            }
            drawAnimatedEmojiMessageText(this.textX, f2, canvas, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutAnimateEmoji, false, f * (1.0f - this.transitionParams.animateChangeProgress), this.currentMessageObject.textXOffset, false);
            float f6 = this.textX;
            MessageObject messageObject2 = this.currentMessageObject;
            drawAnimatedEmojiMessageText(f6, f2, canvas, messageObject2.textLayoutBlocks, this.animatedEmojiStack, true, f * this.transitionParams.animateChangeProgress, messageObject2.textXOffset, false);
            canvas.restore();
            return;
        }
        float f7 = this.textX;
        MessageObject messageObject3 = this.currentMessageObject;
        drawAnimatedEmojiMessageText(f7, f2, canvas, messageObject3.textLayoutBlocks, this.animatedEmojiStack, true, f, messageObject3.textXOffset, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:63:0x00fb  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0102  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawAnimatedEmojiMessageText(float f, float f2, Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, boolean z, float f3, float f4, boolean z2) {
        int size;
        int i;
        float backgroundDrawableRight;
        int i2;
        int i3;
        int i4;
        int i5;
        float f5;
        int i6;
        int i7;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int parentWidth;
        int i8;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        ArrayList<MessageObject.TextLayoutBlock> arrayList2 = arrayList;
        if (this.currentMessageObject == null || arrayList2 == null || arrayList.isEmpty()) {
            return;
        }
        float f6 = 0.0f;
        if (f3 == 0.0f) {
            return;
        }
        if (z && !z2) {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        } else {
            size = arrayList.size();
            i = 0;
        }
        if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
            int i9 = groupedMessagePosition.flags;
            if ((i9 & 1) == 0 || (i9 & 2) == 0) {
                if (AndroidUtilities.isTablet()) {
                    parentWidth = AndroidUtilities.getMinTabletSide();
                } else {
                    parentWidth = getParentWidth();
                }
                int i10 = 0;
                for (int i11 = 0; i11 < this.currentMessagesGroup.posArray.size(); i11++) {
                    if (this.currentMessagesGroup.posArray.get(i11).minY != 0) {
                        break;
                    }
                    double d = i10;
                    double ceil = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / 1000.0f) * parentWidth);
                    Double.isNaN(d);
                    i10 = (int) (d + ceil);
                }
                if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                    i8 = (this.backgroundDrawableLeft + i10) - AndroidUtilities.dp(6.0f);
                } else {
                    i8 = this.backgroundDrawableLeft + i10;
                }
                backgroundDrawableRight = i8 - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                float dp = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f;
                i2 = i;
                while (i2 <= size && i2 < arrayList.size()) {
                    if (i2 >= 0) {
                        i6 = i2;
                        i7 = size;
                    } else {
                        MessageObject.TextLayoutBlock textLayoutBlock = arrayList2.get(i2);
                        int saveCount = canvas.getSaveCount();
                        canvas.save();
                        canvas.translate(f - (textLayoutBlock.isRtl() ? (int) Math.ceil(f4) : 0), f2 + textLayoutBlock.padTop + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables);
                        float textYOffset = f2 + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables;
                        boolean z3 = this.transitionParams.messageEntering;
                        int i12 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageTextOut : Theme.key_chat_messageTextIn;
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            i12 = Theme.key_windowBackgroundWhiteBlackText;
                        }
                        int i13 = i12;
                        int dp2 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) > 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                        if (textLayoutBlock.quoteCollapse) {
                            RectF rectF = AndroidUtilities.rectTmp;
                            rectF.set(f6, (-textLayoutBlock.padTop) + AndroidUtilities.dp(textLayoutBlock.first ? 4.66f : 3.0f), dp2, textLayoutBlock.height(this.transitionParams) + AndroidUtilities.dp(4.0f));
                            rectF.offset(textLayoutBlock.isRtl() ? f4 - AndroidUtilities.dp(10.0f) : 0.0f, f6);
                            ButtonBounce buttonBounce = textLayoutBlock.collapsedBounce;
                            if (buttonBounce != null) {
                                float scale = buttonBounce.getScale(0.01f);
                                canvas.scale(scale, scale, rectF.centerX(), rectF.centerY());
                            }
                        }
                        if (!textLayoutBlock.quoteCollapse || textLayoutBlock.height <= textLayoutBlock.collapsedHeight) {
                            i3 = dp2;
                            i4 = i13;
                            i5 = saveCount;
                            f5 = 1.0f;
                        } else {
                            float collapsed = textLayoutBlock.collapsed(this.transitionParams);
                            i3 = dp2;
                            i4 = i13;
                            i5 = saveCount;
                            canvas.saveLayerAlpha(0.0f, 0.0f, dp2, textLayoutBlock.height(this.transitionParams) - 1, NotificationCenter.voipServiceCreated, 31);
                            f5 = collapsed;
                        }
                        float f7 = f5;
                        i6 = i2;
                        i7 = size;
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, textLayoutBlock.textLayout, emojiGroupedSpans, 0.0f, textLayoutBlock.spoilers, 0.0f, 0.0f, textYOffset, f3, getAdaptiveEmojiColorFilter(0, getThemedColor(i4)));
                        if (textLayoutBlock.quoteCollapse && textLayoutBlock.height > textLayoutBlock.collapsedHeight) {
                            if (this.clip == null) {
                                this.clip = new GradientClip();
                            }
                            canvas.save();
                            RectF rectF2 = AndroidUtilities.rectTmp;
                            rectF2.set(0.0f, textLayoutBlock.height(this.transitionParams) - AndroidUtilities.dp(24.0f), i3, textLayoutBlock.height(this.transitionParams));
                            this.clip.draw(canvas, rectF2, 3, f7);
                            canvas.restore();
                        }
                        canvas.restoreToCount(i5);
                    }
                    i2 = i6 + 1;
                    arrayList2 = arrayList;
                    size = i7;
                    f6 = 0.0f;
                }
                return;
            }
        }
        backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
        float dp3 = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f;
        i2 = i;
        while (i2 <= size) {
            if (i2 >= 0) {
            }
            i2 = i6 + 1;
            arrayList2 = arrayList;
            size = i7;
            f6 = 0.0f;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:43:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00dc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawAnimatedEmojiCaption(Canvas canvas, float f) {
        float f2;
        float f3;
        TransitionParams transitionParams;
        float f4;
        if (this.captionLayout == null) {
            return;
        }
        float f5 = this.captionY;
        float f6 = this.captionX;
        TransitionParams transitionParams2 = this.transitionParams;
        if (transitionParams2.animateBackgroundBoundsInner) {
            if (transitionParams2.transformGroupToSingleMessage) {
                f5 -= getTranslationY();
                f4 = this.transitionParams.deltaLeft;
            } else if (transitionParams2.moveCaption) {
                float f7 = this.captionX;
                TransitionParams transitionParams3 = this.transitionParams;
                float f8 = transitionParams3.animateChangeProgress;
                float f9 = 1.0f - f8;
                f3 = (f7 * f8) + (transitionParams3.captionFromX * f9);
                f2 = (this.captionY * f8) + (transitionParams3.captionFromY * f9);
                transitionParams = this.transitionParams;
                if (transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
                    MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                    drawAnimatedEmojiMessageText(f3, f2, canvas, textLayoutBlocks == null ? textLayoutBlocks.textLayoutBlocks : null, this.animatedEmojiStack, true, f, textLayoutBlocks == null ? textLayoutBlocks.textXOffset : 0.0f, true);
                }
                ArrayList<MessageObject.TextLayoutBlock> arrayList = transitionParams.animateOutCaptionLayout != null ? this.transitionParams.animateOutCaptionLayout.textLayoutBlocks : null;
                AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.transitionParams.animateOutAnimateEmoji;
                TransitionParams transitionParams4 = this.transitionParams;
                drawAnimatedEmojiMessageText(f3, f2, canvas, arrayList, emojiGroupedSpans, false, f * (1.0f - transitionParams4.animateChangeProgress), transitionParams4.animateOutCaptionLayout != null ? this.transitionParams.animateOutCaptionLayout.textXOffset : 0.0f, true);
                MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                drawAnimatedEmojiMessageText(f3, f2, canvas, textLayoutBlocks2 != null ? textLayoutBlocks2.textLayoutBlocks : null, this.animatedEmojiStack, true, f * this.transitionParams.animateChangeProgress, textLayoutBlocks2 != null ? textLayoutBlocks2.textXOffset : 0.0f, true);
                return;
            } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                f4 = this.transitionParams.deltaLeft;
            }
            f6 += f4;
        }
        f2 = f5;
        f3 = f6;
        transitionParams = this.transitionParams;
        if (transitionParams.animateReplaceCaptionLayout) {
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks3 = this.captionLayout;
        drawAnimatedEmojiMessageText(f3, f2, canvas, textLayoutBlocks3 == null ? textLayoutBlocks3.textLayoutBlocks : null, this.animatedEmojiStack, true, f, textLayoutBlocks3 == null ? textLayoutBlocks3.textXOffset : 0.0f, true);
    }

    private void drawSideButton(Canvas canvas) {
        MessageObject.GroupedMessages groupedMessages;
        if (this.drawSideButton != 0) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition == null || (groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments || groupedMessagePosition.last) {
                if (this.currentMessageObject.isOutOwner()) {
                    float dp = this.transitionParams.lastBackgroundLeft - AndroidUtilities.dp(40.0f);
                    this.sideStartX = dp;
                    MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                    if (groupedMessages2 != null) {
                        this.sideStartX = dp + (groupedMessages2.transitionParams.offsetLeft - this.animationOffsetX);
                    }
                } else {
                    float dp2 = this.transitionParams.lastBackgroundRight + AndroidUtilities.dp(8.0f);
                    this.sideStartX = dp2;
                    MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 != null) {
                        this.sideStartX = dp2 + (groupedMessages3.transitionParams.offsetRight - this.animationOffsetX);
                    }
                }
                if (this.drawSideButton == 4) {
                    this.sideStartY = AndroidUtilities.dp(6.0f);
                } else {
                    float dp3 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(41.0f);
                    this.sideStartY = dp3;
                    MessageObject messageObject = this.currentMessageObject;
                    if (messageObject.type == 19 && messageObject.textWidth < this.timeTextWidth) {
                        this.sideStartY = dp3 - AndroidUtilities.dp(22.0f);
                    }
                    MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                    if (groupedMessages4 != null) {
                        float f = this.sideStartY;
                        MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages4.transitionParams;
                        float f2 = f + transitionParams.offsetBottom;
                        this.sideStartY = f2;
                        if (transitionParams.backgroundChangeBounds) {
                            this.sideStartY = f2 - getTranslationY();
                        }
                    }
                    if (this.currentMessageObject.shouldDrawReactions()) {
                        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble.isSmall) {
                            if (this.isRoundVideo) {
                                this.sideStartY -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                            } else if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
                                this.sideStartY -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                            }
                        }
                    }
                }
                if (this.drawSideButton != 4) {
                    float dp4 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(32.0f)) / 2.0f;
                    if (this.sideStartY < dp4) {
                        this.sideStartY = dp4;
                    }
                }
                if (!this.currentMessageObject.isOutOwner() && this.isRoundVideo && !this.hasLinkPreview) {
                    float dp5 = this.isAvatarVisible ? (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f : AndroidUtilities.dp(50.0f);
                    float videoTranscriptionProgress = this.isPlayingRound ? (1.0f - getVideoTranscriptionProgress()) * dp5 : 0.0f;
                    float dp6 = this.isPlayingRound ? AndroidUtilities.dp(28.0f) * (1.0f - getVideoTranscriptionProgress()) : 0.0f;
                    TransitionParams transitionParams2 = this.transitionParams;
                    if (transitionParams2.animatePlayingRound) {
                        videoTranscriptionProgress = (this.isPlayingRound ? transitionParams2.animateChangeProgress : 1.0f - transitionParams2.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress()) * dp5;
                        dp6 = AndroidUtilities.dp(28.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                    }
                    this.sideStartX -= videoTranscriptionProgress;
                    this.sideStartY -= dp6;
                }
                this.sideButtonVisible = true;
                if (this.drawSideButton == 3) {
                    if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                        drawCommentButton(canvas, 1.0f);
                    }
                } else if (SizeNotifierFrameLayout.drawingBlur) {
                } else {
                    RectF rectF = this.rect;
                    float f3 = this.sideStartX;
                    rectF.set(f3, this.sideStartY, AndroidUtilities.dp(32.0f) + f3, this.sideStartY + AndroidUtilities.dp(this.drawSideButton2 == 5 ? 64.0f : 32.0f));
                    if (this.rect.right >= getMeasuredWidth()) {
                        this.sideButtonVisible = false;
                        return;
                    }
                    applyServiceShaderMatrix();
                    if (this.drawSideButton == 4 && this.drawSideButton2 == 5 && this.sideButtonPressed) {
                        Path path = this.sideButtonPath1;
                        if (path == null) {
                            this.sideButtonPath1 = new Path();
                        } else {
                            path.rewind();
                        }
                        Path path2 = this.sideButtonPath2;
                        if (path2 == null) {
                            this.sideButtonPath2 = new Path();
                        } else {
                            path2.rewind();
                        }
                        if (this.sideButtonPathCorners1 == null) {
                            this.sideButtonPathCorners1 = r3;
                            float dp7 = AndroidUtilities.dp(16.0f);
                            float[] fArr = {dp7, dp7, dp7, dp7};
                        }
                        if (this.sideButtonPathCorners2 == null) {
                            this.sideButtonPathCorners2 = r2;
                            float dp8 = AndroidUtilities.dp(16.0f);
                            float[] fArr2 = {0.0f, 0.0f, 0.0f, 0.0f, dp8, dp8, dp8, dp8};
                        }
                        RectF rectF2 = AndroidUtilities.rectTmp;
                        float f4 = this.sideStartX;
                        rectF2.set(f4, this.sideStartY, AndroidUtilities.dp(32.0f) + f4, this.sideStartY + AndroidUtilities.dp(32.0f));
                        Path path3 = this.sideButtonPath1;
                        float[] fArr3 = this.sideButtonPathCorners1;
                        Path.Direction direction = Path.Direction.CW;
                        path3.addRoundRect(rectF2, fArr3, direction);
                        rectF2.set(this.sideStartX, this.sideStartY + AndroidUtilities.dp(32.0f), this.sideStartX + AndroidUtilities.dp(32.0f), this.sideStartY + AndroidUtilities.dp(64.0f));
                        this.sideButtonPath2.addRoundRect(rectF2, this.sideButtonPathCorners2, direction);
                        if (this.pressedSideButton == 4) {
                            canvas.drawPath(this.sideButtonPath1, getThemedPaint("paintChatActionBackgroundSelected"));
                            canvas.drawPath(this.sideButtonPath2, getThemedPaint("paintChatActionBackground"));
                        } else {
                            canvas.drawPath(this.sideButtonPath1, getThemedPaint("paintChatActionBackground"));
                            canvas.drawPath(this.sideButtonPath2, getThemedPaint("paintChatActionBackgroundSelected"));
                        }
                    } else {
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
                    }
                    if (hasGradientService()) {
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                    }
                    int i = this.drawSideButton;
                    if (i == 2) {
                        Drawable themedDrawable = getThemedDrawable("drawableGoIcon");
                        BaseCell.setDrawableBounds(themedDrawable, (this.sideStartX + AndroidUtilities.dp(16.0f)) - (themedDrawable.getIntrinsicWidth() / 2.0f), (this.sideStartY + AndroidUtilities.dp(16.0f)) - (themedDrawable.getIntrinsicHeight() / 2.0f));
                        themedDrawable.draw(canvas);
                    } else if (i == 4) {
                        int dp9 = (int) (this.sideStartX + AndroidUtilities.dp(16.0f));
                        int dp10 = (int) (this.sideStartY + AndroidUtilities.dp(16.0f));
                        Drawable themedDrawable2 = getThemedDrawable("drawableCloseIcon");
                        int intrinsicWidth = themedDrawable2.getIntrinsicWidth() / 2;
                        int intrinsicHeight = themedDrawable2.getIntrinsicHeight() / 2;
                        themedDrawable2.setBounds(dp9 - intrinsicWidth, dp10 - intrinsicHeight, intrinsicWidth + dp9, intrinsicHeight + dp10);
                        BaseCell.setDrawableBounds(themedDrawable2, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
                        canvas.save();
                        canvas.scale(0.65f, 0.65f, themedDrawable2.getBounds().centerX(), themedDrawable2.getBounds().centerY());
                        themedDrawable2.draw(canvas);
                        canvas.restore();
                        if (this.drawSideButton2 == 5) {
                            Drawable themedDrawable3 = getThemedDrawable("drawableMoreIcon");
                            int intrinsicWidth2 = themedDrawable3.getIntrinsicWidth() / 2;
                            int intrinsicHeight2 = themedDrawable3.getIntrinsicHeight() / 2;
                            themedDrawable3.setBounds(dp9 - intrinsicWidth2, dp10 - intrinsicHeight2, dp9 + intrinsicWidth2, dp10 + intrinsicHeight2);
                            BaseCell.setDrawableBounds(themedDrawable3, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(34.0f));
                            themedDrawable3.draw(canvas);
                        }
                    } else {
                        int dp11 = (int) (this.sideStartX + AndroidUtilities.dp(16.0f));
                        int dp12 = (int) (this.sideStartY + AndroidUtilities.dp(16.0f));
                        Drawable themedDrawable4 = getThemedDrawable("drawableShareIcon");
                        int intrinsicWidth3 = themedDrawable4.getIntrinsicWidth() / 2;
                        int intrinsicHeight3 = themedDrawable4.getIntrinsicHeight() / 2;
                        themedDrawable4.setBounds(dp11 - intrinsicWidth3, dp12 - intrinsicHeight3, dp11 + intrinsicWidth3, dp12 + intrinsicHeight3);
                        BaseCell.setDrawableBounds(themedDrawable4, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
                        themedDrawable4.draw(canvas);
                    }
                }
            }
        }
    }

    public void setTimeAlpha(float f) {
        this.timeAlpha = f;
    }

    public float getTimeAlpha() {
        return this.timeAlpha;
    }

    public int getBackgroundDrawableLeft() {
        int dp;
        int dp2;
        int i;
        MessageObject messageObject = getMessageObject();
        if (messageObject != null && messageObject.isOutOwner()) {
            if (this.isRoundVideo) {
                return (this.layoutWidth - this.backgroundWidth) - ((int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f)));
            }
            return (this.layoutWidth - this.backgroundWidth) - (this.mediaBackground ? AndroidUtilities.dp(9.0f) : 0);
        }
        if (this.isRoundVideo) {
            if ((this.isChat || (messageObject != null && (messageObject.isRepostPreview || messageObject.forceAvatar))) && this.isAvatarVisible) {
                r1 = 48;
            }
            dp = AndroidUtilities.dp(r1 + 3) + ((int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
        } else {
            if ((this.isChat || (messageObject != null && (messageObject.isRepostPreview || messageObject.forceAvatar))) && this.isAvatarVisible) {
                r1 = 48;
            }
            dp = AndroidUtilities.dp(r1 + (this.mediaBackground ? 9 : 3));
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.isDocuments && (i = this.currentPosition.leftSpanOffset) != 0) {
            dp += (int) Math.ceil((i / 1000.0f) * getGroupPhotosWidth());
        }
        if (this.isRoundVideo) {
            if (!this.drawPinnedBottom) {
                return dp;
            }
            dp2 = (int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress()));
        } else if (this.mediaBackground || !this.drawPinnedBottom) {
            return dp;
        } else {
            dp2 = AndroidUtilities.dp(6.0f);
        }
        return dp + dp2;
    }

    public int getBackgroundDrawableRight() {
        int dp;
        int backgroundDrawableLeft;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i = this.backgroundWidth;
        if (this.isRoundVideo) {
            dp = i - ((int) (getVideoTranscriptionProgress() * AndroidUtilities.dp(3.0f)));
            if (this.drawPinnedBottom && (messageObject2 = this.currentMessageObject) != null && messageObject2.isOutOwner()) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
            if (this.drawPinnedBottom && ((messageObject = this.currentMessageObject) == null || !messageObject.isOutOwner())) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
            backgroundDrawableLeft = getBackgroundDrawableLeft();
        } else {
            dp = i - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            if (!this.mediaBackground && this.drawPinnedBottom) {
                dp -= AndroidUtilities.dp(6.0f);
            }
            backgroundDrawableLeft = getBackgroundDrawableLeft();
        }
        return backgroundDrawableLeft + dp;
    }

    public int getBackgroundDrawableTop() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int dp = ((groupedMessagePosition == null || (groupedMessagePosition.flags & 4) != 0) ? 0 : 0 - AndroidUtilities.dp(3.0f)) + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
        return (this.mediaBackground || !this.drawPinnedTop) ? dp : dp - AndroidUtilities.dp(1.0f);
    }

    public int getBackgroundDrawableBottom() {
        int i;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int i2 = 0;
        if (groupedMessagePosition != null) {
            int i3 = 4;
            i = (groupedMessagePosition.flags & 4) == 0 ? AndroidUtilities.dp(3.0f) : 0;
            if ((this.currentPosition.flags & 8) == 0) {
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject != null && messageObject.isOutOwner()) {
                    i3 = 3;
                }
                i += AndroidUtilities.dp(i3);
            }
        } else {
            i = 0;
        }
        boolean z = this.drawPinnedBottom;
        if (!z || !this.drawPinnedTop) {
            if (z) {
                i2 = AndroidUtilities.dp(1.0f);
            } else {
                i2 = AndroidUtilities.dp(2.0f);
            }
        }
        int backgroundDrawableTop = ((getBackgroundDrawableTop() + this.layoutHeight) - i2) + i;
        if (this.mediaBackground) {
            return backgroundDrawableTop;
        }
        if (this.drawPinnedTop) {
            backgroundDrawableTop += AndroidUtilities.dp(1.0f);
        }
        return this.drawPinnedBottom ? backgroundDrawableTop + AndroidUtilities.dp(1.0f) : backgroundDrawableTop;
    }

    /* JADX WARN: Removed duplicated region for block: B:36:0x008d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackground(Canvas canvas, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3, int i5) {
        int i6;
        int i7;
        Theme.MessageDrawable messageDrawable;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.isOutOwner()) {
            if (this.mediaBackground || z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutMediaSelected" : "drawableMsgOutMedia");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutSelected" : "drawableMsgOut");
            }
        } else if (this.mediaBackground || z2) {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInMediaSelected" : "drawableMsgInMedia");
        } else {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInSelected" : "drawableMsgIn");
        }
        int i8 = this.parentWidth;
        int i9 = this.parentHeight;
        if (i9 == 0) {
            i8 = getParentWidth();
            i9 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i7 = view.getMeasuredHeight();
                i6 = measuredWidth;
                messageDrawable = this.currentBackgroundDrawable;
                if (messageDrawable != null) {
                    messageDrawable.setTop(i5, i6, i7, (int) this.parentViewTopOffset, this.blurredViewTopOffset, this.blurredViewBottomOffset, z, z2);
                    Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                    MessageObject messageObject2 = this.currentMessageObject;
                    messageDrawable2.setBotButtonsBottom(messageObject2 != null && messageObject2.hasInlineBotButtons());
                    Drawable shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
                    if (shadowDrawable != null) {
                        shadowDrawable.setAlpha((int) (getAlpha() * 255.0f));
                        shadowDrawable.setBounds(i, i2, i3, i4);
                        shadowDrawable.draw(canvas);
                        shadowDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                    }
                    this.currentBackgroundDrawable.setAlpha((int) (getAlpha() * 255.0f));
                    this.currentBackgroundDrawable.setBounds(i, i2, i3, i4);
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    this.currentBackgroundDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                }
                animateCheckboxTranslation();
            }
        }
        i6 = i8;
        i7 = i9;
        messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable != null) {
        }
        animateCheckboxTranslation();
    }

    public boolean hasNameLayout() {
        if (!this.drawNameLayout || this.nameLayout == null) {
            if (this.drawForwardedName) {
                StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                if (staticLayoutArr[0] != null && staticLayoutArr[1] != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition == null) {
                        return true;
                    }
                    if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                        return true;
                    }
                }
            }
            return this.replyNameLayout != null || this.drawTopic;
        }
        return true;
    }

    public boolean isDrawNameLayout() {
        return this.drawNameLayout && this.nameLayout != null;
    }

    public boolean isDrawTopic() {
        return this.drawTopic;
    }

    public float getDrawTopicHeight() {
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            return messageTopicButton.height();
        }
        return 0.0f;
    }

    public boolean isAdminLayoutChanged() {
        return !TextUtils.equals(this.lastPostAuthor, this.currentMessageObject.messageOwner.post_author);
    }

    /* JADX WARN: Code restructure failed: missing block: B:709:0x1113, code lost:
        if (r6.type == 0) goto L558;
     */
    /* JADX WARN: Code restructure failed: missing block: B:711:0x111b, code lost:
        if (android.text.TextUtils.isEmpty(r6.caption) == false) goto L558;
     */
    /* JADX WARN: Code restructure failed: missing block: B:713:0x1129, code lost:
        if ((org.telegram.messenger.MessageObject.getMedia(r40.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC$TL_messageMediaGame) != false) goto L564;
     */
    /* JADX WARN: Code restructure failed: missing block: B:715:0x1137, code lost:
        if ((org.telegram.messenger.MessageObject.getMedia(r40.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC$TL_messageMediaInvoice) != false) goto L564;
     */
    /* JADX WARN: Code restructure failed: missing block: B:734:0x11c1, code lost:
        if (r6.type == 0) goto L583;
     */
    /* JADX WARN: Code restructure failed: missing block: B:736:0x11c9, code lost:
        if (android.text.TextUtils.isEmpty(r6.caption) == false) goto L583;
     */
    /* JADX WARN: Code restructure failed: missing block: B:738:0x11d7, code lost:
        if ((org.telegram.messenger.MessageObject.getMedia(r40.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC$TL_messageMediaGame) != false) goto L589;
     */
    /* JADX WARN: Code restructure failed: missing block: B:740:0x11e5, code lost:
        if ((org.telegram.messenger.MessageObject.getMedia(r40.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC$TL_messageMediaInvoice) != false) goto L589;
     */
    /* JADX WARN: Removed duplicated region for block: B:1017:0x1984  */
    /* JADX WARN: Removed duplicated region for block: B:1026:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:220:0x0539  */
    /* JADX WARN: Removed duplicated region for block: B:226:0x0565  */
    /* JADX WARN: Removed duplicated region for block: B:234:0x058a  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x082e  */
    /* JADX WARN: Removed duplicated region for block: B:376:0x083c  */
    /* JADX WARN: Removed duplicated region for block: B:530:0x0c36  */
    /* JADX WARN: Removed duplicated region for block: B:541:0x0c92  */
    /* JADX WARN: Removed duplicated region for block: B:551:0x0cf2  */
    /* JADX WARN: Removed duplicated region for block: B:554:0x0cf9  */
    /* JADX WARN: Removed duplicated region for block: B:586:0x0ddd  */
    /* JADX WARN: Removed duplicated region for block: B:641:0x0ec9  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawNamesLayout(Canvas canvas, float f) {
        int i;
        float f2;
        float f3;
        TLRPC$User tLRPC$User;
        float f4;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int i3;
        int i4;
        int dp;
        float f5;
        int themedColor;
        int i5;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i6;
        int i7;
        int i8;
        int i9;
        float f6;
        int i10;
        boolean z;
        float f7;
        Canvas canvas2;
        int i11;
        int dp2;
        int i12;
        float f8;
        float f9;
        float f10;
        float backgroundDrawableRight;
        float f11;
        float f12;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        int parentWidth;
        int i13;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        float f13;
        float f14;
        float f15;
        int color;
        int i14;
        Canvas canvas3;
        float f16;
        float f17;
        int i15;
        float f18;
        int i16;
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        int i17;
        int i18;
        StaticLayout staticLayout;
        ChatMessageCellDelegate chatMessageCellDelegate;
        float f19;
        MessageObject.GroupedMessagePosition groupedMessagePosition4;
        int dp3;
        int extraTextX;
        int i19;
        float dp4;
        float dp5;
        TransitionParams transitionParams;
        int dp6;
        float f20;
        MessageObject.GroupedMessagePosition groupedMessagePosition5;
        float f21;
        int i20;
        int alpha;
        float f22;
        int i21;
        float f23;
        int i22;
        MessageTopicButton messageTopicButton;
        float f24;
        float f25;
        boolean z2;
        ForwardBackground forwardBackground;
        int i23;
        float f26;
        long peerDialogId;
        int colorId;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        int i24;
        MessageTopicButton messageTopicButton2;
        float f27;
        MessageObject.GroupedMessages groupedMessages2;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j = elapsedRealtime - this.lastNamesAnimationTime;
        if (j > 17) {
            j = 17;
        }
        this.lastNamesAnimationTime = elapsedRealtime;
        if (this.currentMessageObject.deleted && !this.drawingToBitmap && (groupedMessages2 = this.currentMessagesGroup) != null && groupedMessages2.messages.size() >= 1) {
            return;
        }
        if (f != 1.0f) {
            this.rect.set(0.0f, 0.0f, getMaxNameWidth(), getMeasuredHeight());
            i = canvas.saveLayerAlpha(this.rect, (int) (f * 255.0f), 31);
        } else {
            i = Integer.MIN_VALUE;
        }
        if (!this.isRoundVideo || this.hasLinkPreview) {
            f2 = 1.0f;
        } else {
            float videoTranscriptionProgress = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
            TransitionParams transitionParams2 = this.transitionParams;
            if (transitionParams2.animatePlayingRound) {
                if (this.isPlayingRound) {
                    f27 = 1.0f - transitionParams2.animateChangeProgress;
                } else {
                    f27 = transitionParams2.animateChangeProgress;
                }
                videoTranscriptionProgress *= f27;
            } else if (this.isPlayingRound) {
                f2 = 0.0f;
            }
            f2 = videoTranscriptionProgress;
        }
        boolean z3 = this.drawNameLayout;
        if ((z3 || this.transitionParams.animateDrawNameLayout) && this.nameLayout != null) {
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateDrawNameLayout) {
                f3 = transitionParams3.animateChangeProgress;
                if (!z3) {
                    f3 = 1.0f - f3;
                }
            } else {
                f3 = 1.0f;
            }
            canvas.save();
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_stickerNameText));
                if (this.currentMessageObject.isOutOwner()) {
                    this.nameX = AndroidUtilities.dp(28.0f);
                } else {
                    this.nameX = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                }
                this.nameY = this.layoutHeight - AndroidUtilities.dp(38.0f);
                float f28 = (this.currentMessageObject.isOut() && (this.checkBoxVisible || this.checkBoxAnimationInProgress)) ? 1.0f - this.checkBoxAnimationProgress : 1.0f;
                this.rect.set(((int) this.nameX) - AndroidUtilities.dp(12.0f), ((int) this.nameY) - AndroidUtilities.dp(5.0f), ((int) this.nameX) + AndroidUtilities.dp(12.0f) + this.nameWidth, ((int) this.nameY) + AndroidUtilities.dp(22.0f));
                applyServiceShaderMatrix();
                int alpha2 = getThemedPaint("paintChatActionBackground").getAlpha();
                getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha2 * f28 * f2));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                if (hasGradientService()) {
                    int alpha3 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha3 * this.timeAlpha * f2));
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha3);
                }
                if (this.viaSpan1 != null || this.viaSpan2 != null) {
                    int alpha4 = (((int) (Color.alpha(getThemedColor(i9)) * f28)) << 24) | (getThemedColor(Theme.key_chat_stickerViaBotNameText) & 16777215);
                    TypefaceSpan typefaceSpan = this.viaSpan1;
                    if (typefaceSpan != null) {
                        typefaceSpan.setColor(alpha4);
                    }
                    TypefaceSpan typefaceSpan2 = this.viaSpan2;
                    if (typefaceSpan2 != null) {
                        typefaceSpan2.setColor(alpha4);
                    }
                }
                this.nameX -= this.nameOffsetX;
                getThemedPaint("paintChatActionBackground").setAlpha(alpha2);
            } else {
                if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                    this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp(11.0f)) - this.nameOffsetX) + getExtraTextX();
                } else {
                    this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f)) - this.nameOffsetX) + getExtraTextX();
                }
                if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null && messageDrawable.hasGradient()) {
                        Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                    } else {
                        Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_outForwardedNameText));
                    }
                } else if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_outForwardedNameText));
                } else {
                    MessageObject messageObject2 = this.currentMessageObject;
                    if (messageObject2.overrideLinkColor >= 0 || ((messageObject2.isFromUser() && this.currentUser != null) || (this.currentMessageObject.isFromChannel() && this.currentChat != null))) {
                        MessageObject messageObject3 = this.currentMessageObject;
                        int i25 = messageObject3.overrideLinkColor;
                        if (i25 < 0) {
                            if (messageObject3.isFromUser() && (tLRPC$User = this.currentUser) != null) {
                                i25 = UserObject.getColorId(tLRPC$User);
                            } else {
                                i25 = ChatObject.getColorId(this.currentChat);
                            }
                        }
                        if (i25 < 7) {
                            Theme.chat_namePaint.setColor(getThemedColor(Theme.keys_avatar_nameInMessage[i25]));
                        } else {
                            MessagesController.PeerColors peerColors = MessagesController.getInstance(this.currentAccount).peerColors;
                            MessagesController.PeerColor color2 = peerColors != null ? peerColors.getColor(i25) : null;
                            if (color2 != null) {
                                Theme.chat_namePaint.setColor(color2.getColor(0, this.resourcesProvider));
                            } else {
                                Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_inForwardedNameText));
                            }
                        }
                    } else {
                        Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_inForwardedNameText));
                    }
                }
                this.nameY = AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                if (this.viaSpan1 != null || this.viaSpan2 != null) {
                    int themedColor2 = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                    TypefaceSpan typefaceSpan3 = this.viaSpan1;
                    if (typefaceSpan3 != null) {
                        typefaceSpan3.setColor(themedColor2);
                    }
                    TypefaceSpan typefaceSpan4 = this.viaSpan2;
                    if (typefaceSpan4 != null) {
                        typefaceSpan4.setColor(themedColor2);
                    }
                }
            }
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages3.transitionParams;
                if (transitionParams4.backgroundChangeBounds) {
                    this.nameX += transitionParams4.offsetLeft;
                    this.nameY += transitionParams4.offsetTop - getTranslationY();
                }
            }
            this.nameX += this.animationOffsetX;
            float f29 = this.nameY;
            TransitionParams transitionParams5 = this.transitionParams;
            this.nameY = f29 + transitionParams5.deltaTop;
            if (!transitionParams5.animateSign) {
                f4 = this.nameX;
            } else {
                f4 = this.transitionParams.animateNameX + ((this.nameX - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress);
            }
            if (!this.currentMessageObject.isSponsored()) {
                int multAlpha = Theme.multAlpha(Theme.chat_namePaint.getColor(), 0.12f);
                Drawable drawable = this.nameLayoutSelector;
                if (drawable == null) {
                    this.nameLayoutSelectorColor = multAlpha;
                    Drawable createRadSelectorDrawable = Theme.createRadSelectorDrawable(multAlpha, 6, 6);
                    this.nameLayoutSelector = createRadSelectorDrawable;
                    createRadSelectorDrawable.setCallback(this);
                } else if (this.nameLayoutSelectorColor != multAlpha) {
                    this.nameLayoutSelectorColor = multAlpha;
                    Theme.setSelectorDrawableColor(drawable, multAlpha, true);
                }
                this.nameLayoutSelector.setBounds((int) ((this.nameOffsetX + f4) - AndroidUtilities.dp(4.0f)), (int) (this.nameY - AndroidUtilities.dp(1.33f)), (int) (this.nameOffsetX + f4 + (this.viaNameWidth > 0 ? i6 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(4.0f)), (int) (this.nameY + this.nameLayout.getHeight() + AndroidUtilities.dp(1.33f)));
                int i26 = (int) (f3 * 255.0f);
                this.nameLayoutSelector.setAlpha(i26);
                this.nameLayoutSelector.draw(canvas);
                if (this.currentNameStatus != null) {
                    Drawable drawable2 = this.nameStatusSelector;
                    if (drawable2 == null) {
                        this.nameStatusSelectorColor = multAlpha;
                        Drawable createRadSelectorDrawable2 = Theme.createRadSelectorDrawable(multAlpha, 6, 6);
                        this.nameStatusSelector = createRadSelectorDrawable2;
                        createRadSelectorDrawable2.setCallback(this);
                    } else if (this.nameStatusSelectorColor != multAlpha) {
                        this.nameStatusSelectorColor = multAlpha;
                        Theme.setSelectorDrawableColor(drawable2, multAlpha, true);
                    }
                    boolean z4 = this.currentNameStatus instanceof Drawable;
                    float f30 = z4 ? 1.5f : 0.0f;
                    float f31 = z4 ? -5.0f : 0.0f;
                    float f32 = 3.33f - f30;
                    i2 = i;
                    this.nameStatusSelector.setBounds((int) (this.nameOffsetX + f4 + (this.viaNameWidth > 0 ? i7 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth)), (int) (this.nameY - AndroidUtilities.dp(f32)), (int) (this.nameOffsetX + f4 + (this.viaNameWidth > 0 ? i8 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(f31 + 24.0f)), (int) (this.nameY + this.nameLayout.getHeight() + AndroidUtilities.dp(f32)));
                    this.nameStatusSelector.setAlpha(i26);
                    this.nameStatusSelector.draw(canvas);
                    canvas.translate(f4, this.nameY);
                    int alpha5 = Theme.chat_namePaint.getAlpha();
                    Theme.chat_namePaint.setAlpha((int) (alpha5 * f3));
                    this.nameLayout.draw(canvas);
                    Theme.chat_namePaint.setAlpha(alpha5);
                    canvas.restore();
                    groupedMessages = this.currentMessagesGroup;
                    if (groupedMessages == null && !groupedMessages.isDocuments) {
                        int groupPhotosWidth = getGroupPhotosWidth();
                        int i27 = 0;
                        for (int i28 = 0; i28 < this.currentMessagesGroup.posArray.size(); i28++) {
                            if (this.currentMessagesGroup.posArray.get(i28).minY != 0) {
                                break;
                            }
                            double d = i27;
                            double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                            Double.isNaN(d);
                            i27 = (int) (d + ceil);
                        }
                        if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            i5 = (this.backgroundDrawableLeft + i27) - AndroidUtilities.dp(6.0f);
                        } else {
                            i5 = this.backgroundDrawableLeft + i27;
                        }
                        f5 = i5 - (getExtraTextX() + AndroidUtilities.dp(8.0f));
                        if (!this.currentMessageObject.isOutOwner()) {
                            f5 -= AndroidUtilities.dp(48.0f);
                        }
                    } else {
                        if (!this.currentMessageObject.shouldDrawWithoutBackground()) {
                            if (this.currentMessageObject.isOutOwner()) {
                                i3 = AndroidUtilities.dp(39.0f);
                                i4 = this.nameWidth;
                            } else {
                                f5 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(33.0f) + this.nameWidth;
                            }
                        } else if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            dp = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(6.0f);
                            f5 = dp;
                        } else {
                            i3 = this.backgroundDrawableLeft;
                            i4 = this.backgroundDrawableRight;
                        }
                        dp = i3 + i4;
                        f5 = dp;
                    }
                    float f33 = f5 + this.transitionParams.deltaRight;
                    if (this.adminLayout != null) {
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            themedColor = getThemedColor(Theme.key_chat_stickerReplyNameText);
                        } else if (this.currentMessageObject.isOutOwner()) {
                            themedColor = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAdminSelectedText : Theme.key_chat_outAdminText);
                        } else {
                            themedColor = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAdminSelectedText : Theme.key_chat_inAdminText);
                        }
                        Theme.chat_adminPaint.setColor(themedColor);
                        canvas.save();
                        float dp7 = (f33 - AndroidUtilities.dp(11.0f)) - this.adminLayout.getLineWidth(0);
                        float dp8 = this.nameY + AndroidUtilities.dp(0.5f);
                        BoostCounterSpan boostCounterSpan = this.boostCounterSpan;
                        if (boostCounterSpan != null && this.boostCounterBounds != null) {
                            float dp9 = (f33 - AndroidUtilities.dp(boostCounterSpan.isRtl ? 5.0f : 7.5f)) - this.boostCounterSpan.getWidth();
                            this.boostCounterBounds.set(dp9, dp8, this.boostCounterSpan.getWidth() + dp9, this.adminLayout.getHeight() + dp8);
                            int multAlpha2 = Theme.multAlpha(Theme.chat_namePaint.getColor(), 0.12f);
                            Drawable drawable3 = this.boostCounterLayoutSelector;
                            if (drawable3 == null) {
                                this.boostCounterSelectorColor = multAlpha2;
                                Drawable createRadSelectorDrawable3 = Theme.createRadSelectorDrawable(multAlpha2, 6, 6);
                                this.boostCounterLayoutSelector = createRadSelectorDrawable3;
                                createRadSelectorDrawable3.setCallback(this);
                            } else if (this.boostCounterSelectorColor != multAlpha2) {
                                this.boostCounterSelectorColor = multAlpha2;
                                Theme.setSelectorDrawableColor(drawable3, multAlpha2, true);
                            }
                            RectF rectF = this.boostCounterBounds;
                            this.boostCounterLayoutSelector.setBounds(((int) this.boostCounterBounds.left) - AndroidUtilities.dp(4.0f), (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                            this.boostCounterLayoutSelector.setAlpha((int) (f3 * 255.0f));
                            this.boostCounterLayoutSelector.draw(canvas);
                        }
                        canvas.translate(dp7, this.nameY + AndroidUtilities.dp(0.5f));
                        if (this.transitionParams.animateSign) {
                            Theme.chat_adminPaint.setAlpha((int) (Color.alpha(themedColor) * this.transitionParams.animateChangeProgress));
                        }
                        this.adminLayout.draw(canvas);
                        canvas.restore();
                    }
                }
            }
            i2 = i;
            canvas.translate(f4, this.nameY);
            int alpha52 = Theme.chat_namePaint.getAlpha();
            Theme.chat_namePaint.setAlpha((int) (alpha52 * f3));
            this.nameLayout.draw(canvas);
            Theme.chat_namePaint.setAlpha(alpha52);
            canvas.restore();
            groupedMessages = this.currentMessagesGroup;
            if (groupedMessages == null) {
            }
            if (!this.currentMessageObject.shouldDrawWithoutBackground()) {
            }
            dp = i3 + i4;
            f5 = dp;
            float f332 = f5 + this.transitionParams.deltaRight;
            if (this.adminLayout != null) {
            }
        } else {
            i2 = i;
        }
        boolean z5 = this.drawForwardedName || this.currentMessageObject.type == 23;
        boolean z6 = this.replyNameLayout != null;
        StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
        int i29 = this.forwardedNameWidth;
        if (!this.transitionParams.animateForwardedLayout) {
            f6 = 1.0f;
        } else if (!this.currentMessageObject.needDrawForwarded()) {
            TransitionParams transitionParams6 = this.transitionParams;
            staticLayoutArr = transitionParams6.animatingForwardedNameLayout;
            f6 = 1.0f - transitionParams6.animateChangeProgress;
            i29 = transitionParams6.animateForwardNameWidth;
            z5 = true;
        } else {
            f6 = this.transitionParams.animateChangeProgress;
        }
        if (!z5 || staticLayoutArr[0] == null || staticLayoutArr[1] == null || !((groupedMessagePosition5 = this.currentPosition) == null || (groupedMessagePosition5.minY == 0 && groupedMessagePosition5.minX == 0))) {
            i10 = -1;
            z = true;
            f7 = 0.0f;
        } else {
            MessageObject messageObject4 = this.currentMessageObject;
            if (messageObject4.type == 5 || messageObject4.isAnyKindOfSticker()) {
                Theme.chat_forwardNamePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
                MessageObject messageObject5 = this.currentMessageObject;
                if (messageObject5.type == 19) {
                    if (messageObject5.isOutOwner()) {
                        if (this.currentMessageObject.needDrawForwarded()) {
                            float dp10 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                            this.forwardNameX = dp10;
                            f25 = dp10 + this.transitionParams.deltaLeft;
                        } else {
                            f25 = this.transitionParams.animateForwardNameX;
                        }
                        f24 = f25 - Math.max(0.0f, (Math.max(AndroidUtilities.dp(14.0f) + i29, z6 ? Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f) : 0) + f25) - AndroidUtilities.displaySize.x);
                    } else {
                        float f34 = 11.0f;
                        if (this.currentMessageObject.needDrawForwarded()) {
                            int i30 = this.backgroundDrawableLeft;
                            if (!this.mediaBackground && !this.drawPinnedBottom) {
                                f34 = 17.0f;
                            }
                            f24 = i30 + AndroidUtilities.dp(f34) + getExtraTextX();
                            this.forwardNameX = f24;
                        } else {
                            f24 = this.transitionParams.animateForwardNameX;
                        }
                    }
                    f21 = f24 - AndroidUtilities.dp(7.0f);
                } else if (messageObject5.needDrawForwarded()) {
                    if (this.currentMessageObject.isOutOwner()) {
                        f21 = AndroidUtilities.dp(23.0f);
                        this.forwardNameX = f21;
                    } else {
                        f21 = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                        this.forwardNameX = f21;
                    }
                } else {
                    f21 = this.transitionParams.animateForwardNameX;
                }
                if (!this.currentMessageObject.isVoiceTranscriptionOpen() && ((this.currentMessageObject.isOutOwner() && this.currentMessageObject.type == 5 && this.transitionParams.animatePlayingRound) || this.isPlayingRound)) {
                    f21 -= AndroidUtilities.dp(78.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress);
                }
                this.forwardNameY = AndroidUtilities.dp(12.0f) + ((!this.drawTopic || (messageTopicButton = this.topicButton) == null) ? 0 : messageTopicButton.height() + AndroidUtilities.dp(14.0f));
                this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                int dp11 = i29 + AndroidUtilities.dp(14.0f);
                if (z6) {
                    int max = Math.max(dp11, Math.max(this.replyNameWidth, this.replyTextWidth) - AndroidUtilities.dp(4.0f)) + (((int) f21) - AndroidUtilities.dp(7.0f));
                    i20 = max;
                    this.rect.set(i22 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), max, this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f) + AndroidUtilities.dp(41.0f));
                    z = false;
                } else {
                    int i31 = (int) f21;
                    this.rect.set(i31 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i31 - AndroidUtilities.dp(7.0f)) + dp11, this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f));
                    z = true;
                    i20 = -1;
                }
                if (z6 || this.forwardBg == null) {
                    applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
                    if (f6 == 1.0f && f2 == 1.0f) {
                        alpha = -1;
                    } else {
                        alpha = getThemedPaint("paintChatActionBackground").getAlpha();
                        getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f6 * f2));
                    }
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                    if (hasGradientService()) {
                        if (f6 == 1.0f && f2 == 1.0f) {
                            i21 = -1;
                        } else {
                            i21 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (i21 * f6 * f2));
                        }
                        f22 = f21;
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                    } else {
                        f22 = f21;
                        i21 = -1;
                    }
                } else {
                    applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX() + f21, this.viewTop + this.forwardNameY);
                    canvas.save();
                    canvas.translate(f21, this.forwardNameY);
                    float scale = this.forwardBg.bounce.getScale(0.02f);
                    canvas.scale(scale, scale, this.forwardBg.bounds.centerX(), this.forwardBg.bounds.centerY());
                    if (f6 == 1.0f && f2 == 1.0f) {
                        alpha = -1;
                    } else {
                        alpha = getThemedPaint("paintChatActionBackground").getAlpha();
                        getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f6 * f2));
                    }
                    canvas.drawPath(this.forwardBg.path, getThemedPaint("paintChatActionBackground"));
                    if (hasGradientService()) {
                        if (f6 == 1.0f && f2 == 1.0f) {
                            i21 = -1;
                        } else {
                            i21 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (i21 * f6 * f2));
                        }
                        canvas.drawPath(this.forwardBg.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                    } else {
                        i21 = -1;
                    }
                    canvas.restore();
                    f22 = f21;
                }
                if (alpha >= 0) {
                    getThemedPaint("paintChatActionBackground").setAlpha(alpha);
                }
                if (i21 >= 0) {
                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(i21);
                }
                f23 = f22;
            } else {
                int dp12 = AndroidUtilities.dp(7.0f) + (this.drawNameLayout ? AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()) : 0) + ((!this.drawTopic || (messageTopicButton2 = this.topicButton) == null) ? 0 : messageTopicButton2.height() + AndroidUtilities.dp((this.currentMessageObject.type != 0 ? 3 : 0) + 7));
                this.forwardNameY = dp12;
                if (!this.drawNameLayout && ((i24 = this.currentMessageObject.type) == 8 || i24 == 1 || i24 == 3 || i24 == 23 || i24 == 29 || i24 == 9)) {
                    this.forwardNameY = dp12 + AndroidUtilities.dp(2.0f);
                }
                if (!this.drawNameLayout && this.currentMessageObject.type == 0 && !this.drawPinnedTop) {
                    this.forwardNameY += AndroidUtilities.dp(2.0f);
                }
                this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? Theme.key_chat_inPsaNameText : Theme.key_chat_inForwardedNameText));
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? Theme.key_chat_outPsaNameText : Theme.key_chat_outForwardedNameText));
                } else if (!this.hasPsaHint) {
                    MessageObject messageObject6 = this.currentMessageObject;
                    if (messageObject6.messageOwner != null && (messageObject6.isStoryMedia() || ((tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from) != null && tLRPC$MessageFwdHeader.from_id != null))) {
                        if (this.currentMessageObject.isStoryMedia()) {
                            peerDialogId = DialogObject.getPeerDialogId(MessageObject.getMedia(this.currentMessageObject).peer);
                        } else {
                            peerDialogId = DialogObject.getPeerDialogId(this.currentMessageObject.messageOwner.fwd_from.from_id);
                        }
                        long j2 = peerDialogId;
                        if (j2 < 0) {
                            TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-j2));
                            if (chat != null) {
                                colorId = ChatObject.getColorId(chat);
                                if (colorId >= 7) {
                                    Theme.chat_forwardNamePaint.setColor(getThemedColor(Theme.keys_avatar_nameInMessage[colorId]));
                                } else {
                                    MessagesController.PeerColors peerColors2 = MessagesController.getInstance(this.currentAccount).peerColors;
                                    MessagesController.PeerColor color3 = peerColors2 != null ? peerColors2.getColor(colorId) : null;
                                    if (color3 != null) {
                                        Theme.chat_forwardNamePaint.setColor(color3.getColor(0, this.resourcesProvider));
                                    }
                                }
                            }
                            colorId = 5;
                            if (colorId >= 7) {
                            }
                        } else {
                            TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2));
                            if (user != null) {
                                colorId = UserObject.getColorId(user);
                                if (colorId >= 7) {
                                }
                            }
                            colorId = 5;
                            if (colorId >= 7) {
                            }
                        }
                    }
                }
                if (this.currentMessageObject.isOutOwner()) {
                    if (this.currentMessageObject.needDrawForwarded()) {
                        float dp13 = this.backgroundDrawableLeft + AndroidUtilities.dp(10.0f) + getExtraTextX();
                        this.forwardNameX = dp13;
                        f23 = dp13 + this.transitionParams.deltaLeft;
                    } else {
                        f23 = this.transitionParams.animateForwardNameX;
                    }
                } else if (this.currentMessageObject.needDrawForwarded()) {
                    f23 = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 10.0f : 16.0f) + getExtraTextX();
                    this.forwardNameX = f23;
                } else {
                    f23 = this.transitionParams.animateForwardNameX;
                }
                z = true;
                i20 = -1;
            }
            if (this.transitionParams.animateForwardedLayout && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                MessageObject messageObject7 = this.currentMessageObject;
                if (messageObject7.type != 5 && !messageObject7.isAnyKindOfSticker()) {
                    Rect bounds = this.currentBackgroundDrawable.getBounds();
                    canvas.save();
                    if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                    } else {
                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                    }
                    z2 = true;
                    canvas.save();
                    canvas.translate(f23, this.forwardNameY);
                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                    boolean z7 = chatMessageCellDelegate2 == null && chatMessageCellDelegate2.isProgressLoading(this, 6);
                    forwardBackground = this.forwardBg;
                    if (forwardBackground != null) {
                        float scale2 = forwardBackground.bounce.getScale(0.02f);
                        canvas.scale(scale2, scale2, this.forwardBg.bounds.centerX(), this.forwardBg.bounds.centerY());
                        MessageObject messageObject8 = this.currentMessageObject;
                        if (messageObject8.type == 5 || messageObject8.isAnyKindOfSticker()) {
                            this.forwardBg.setColor(Theme.multAlpha(Theme.getColor(Theme.key_listSelector, this.resourcesProvider), 1.35f));
                        } else {
                            this.forwardBg.setColor(Theme.multAlpha(Theme.chat_forwardNamePaint.getColor(), 0.15f));
                        }
                        this.forwardBg.draw(canvas, z7);
                    }
                    for (i23 = 0; i23 < 2; i23++) {
                        canvas.save();
                        canvas.translate(-this.forwardNameOffsetX[i23], ((this.forwardHeight / 2.0f) + AndroidUtilities.dp(1.33f)) * i23);
                        if (f6 != 1.0f || f2 != 1.0f) {
                            int alpha6 = staticLayoutArr[i23].getPaint().getAlpha();
                            staticLayoutArr[i23].getPaint().setAlpha((int) (alpha6 * f6 * f2));
                            staticLayoutArr[i23].draw(canvas);
                            staticLayoutArr[i23].getPaint().setAlpha(alpha6);
                        } else {
                            staticLayoutArr[i23].draw(canvas);
                        }
                        canvas.restore();
                    }
                    canvas.restore();
                    if (z2) {
                        canvas.restore();
                    }
                    if (this.hasPsaHint) {
                        f7 = f23;
                    } else {
                        if (this.psaButtonVisible || this.psaButtonProgress > 0.0f) {
                            Drawable drawable4 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                            int intrinsicWidth = this.psaHelpX + (drawable4.getIntrinsicWidth() / 2);
                            int intrinsicHeight = this.psaHelpY + (drawable4.getIntrinsicHeight() / 2);
                            if (this.psaButtonVisible) {
                                float f35 = this.psaButtonProgress;
                                if (f35 < 1.0f) {
                                    f26 = AnimationProperties.overshootInterpolator.getInterpolation(f35);
                                    int intrinsicWidth2 = ((int) (drawable4.getIntrinsicWidth() * f26)) / 2;
                                    f7 = f23;
                                    int intrinsicHeight2 = ((int) (drawable4.getIntrinsicHeight() * f26)) / 2;
                                    drawable4.setBounds(intrinsicWidth - intrinsicWidth2, intrinsicHeight - intrinsicHeight2, intrinsicWidth + intrinsicWidth2, intrinsicHeight + intrinsicHeight2);
                                    drawable4.draw(canvas);
                                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.selectorDrawableMaskType[0] == 3) {
                                        canvas.save();
                                        float f36 = this.psaButtonProgress;
                                        canvas.scale(f36, f36, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                        this.selectorDrawable[0].draw(canvas);
                                        canvas.restore();
                                    }
                                }
                            }
                            f26 = this.psaButtonProgress;
                            int intrinsicWidth22 = ((int) (drawable4.getIntrinsicWidth() * f26)) / 2;
                            f7 = f23;
                            int intrinsicHeight22 = ((int) (drawable4.getIntrinsicHeight() * f26)) / 2;
                            drawable4.setBounds(intrinsicWidth - intrinsicWidth22, intrinsicHeight - intrinsicHeight22, intrinsicWidth + intrinsicWidth22, intrinsicHeight + intrinsicHeight22);
                            drawable4.draw(canvas);
                            if (Build.VERSION.SDK_INT >= 21) {
                                canvas.save();
                                float f362 = this.psaButtonProgress;
                                canvas.scale(f362, f362, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                this.selectorDrawable[0].draw(canvas);
                                canvas.restore();
                            }
                        } else {
                            f7 = f23;
                        }
                        boolean z8 = this.psaButtonVisible;
                        if (z8) {
                            float f37 = this.psaButtonProgress;
                            if (f37 < 1.0f) {
                                this.psaButtonProgress = f37 + (((float) j) / 180.0f);
                                invalidate();
                                if (this.psaButtonProgress > 1.0f) {
                                    this.psaButtonProgress = 1.0f;
                                    setInvalidatesParent(false);
                                }
                            }
                        }
                        if (!z8) {
                            float f38 = this.psaButtonProgress;
                            if (f38 > 0.0f) {
                                this.psaButtonProgress = f38 - (((float) j) / 180.0f);
                                invalidate();
                                if (this.psaButtonProgress < 0.0f) {
                                    this.psaButtonProgress = 0.0f;
                                    setInvalidatesParent(false);
                                }
                            }
                        }
                    }
                    i10 = i20;
                }
            }
            z2 = false;
            canvas.save();
            canvas.translate(f23, this.forwardNameY);
            ChatMessageCellDelegate chatMessageCellDelegate22 = this.delegate;
            if (chatMessageCellDelegate22 == null) {
            }
            forwardBackground = this.forwardBg;
            if (forwardBackground != null) {
            }
            while (i23 < 2) {
            }
            canvas.restore();
            if (z2) {
            }
            if (this.hasPsaHint) {
            }
            i10 = i20;
        }
        if (this.drawTopic && this.topicButton != null && f6 > 0.0f && f2 > 0.0f && ((groupedMessagePosition4 = this.currentPosition) == null || (groupedMessagePosition4.minY == 0 && groupedMessagePosition4.minX == 0))) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                MessageObject messageObject9 = this.currentMessageObject;
                if (messageObject9.type != 19) {
                    if (messageObject9.isOutOwner()) {
                        f20 = AndroidUtilities.dp(23.0f);
                        if (this.isPlayingRound) {
                            f20 -= AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize;
                        }
                    } else {
                        if (this.currentMessageObject.type == 5) {
                            dp6 = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(4.0f);
                        } else {
                            dp6 = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                        }
                        f20 = dp6;
                    }
                    dp5 = AndroidUtilities.dp(12.0f);
                    dp4 = f20 - AndroidUtilities.dp(8.0f);
                    transitionParams = this.transitionParams;
                    if (transitionParams.animateBackgroundBoundsInner) {
                        dp4 += transitionParams.deltaLeft;
                    }
                    this.topicButton.draw(canvas, dp4, dp5, f6 * f2);
                }
            }
            if (this.currentMessageObject.isOutOwner()) {
                i19 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
            } else {
                if (this.mediaBackground) {
                    dp3 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                    extraTextX = getExtraTextX();
                } else {
                    dp3 = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                    extraTextX = getExtraTextX();
                }
                i19 = dp3 + extraTextX;
            }
            dp4 = i19 - AndroidUtilities.dp(2.33f);
            dp5 = AndroidUtilities.dp(12.0f) + ((!this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()));
            transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner) {
            }
            this.topicButton.draw(canvas, dp4, dp5, f6 * f2);
        }
        if (z6) {
            float f39 = this.replyStartX;
            float f40 = this.replyStartY;
            MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
            if (groupedMessages4 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams7 = groupedMessages4.transitionParams;
                if (transitionParams7.backgroundChangeBounds) {
                    f39 += transitionParams7.offsetLeft;
                }
            }
            TransitionParams transitionParams8 = this.transitionParams;
            if (transitionParams8.animateBackgroundBoundsInner) {
                if (this.isRoundVideo) {
                    f19 = (this.currentMessageObject.isOutOwner() ? 0.0f : this.transitionParams.deltaLeft) + this.transitionParams.deltaRight;
                } else {
                    f19 = transitionParams8.deltaLeft;
                }
                f39 += f19;
                TransitionParams transitionParams9 = this.transitionParams;
                f40 = AndroidUtilities.lerp(transitionParams9.animateFromReplyY, this.replyStartY, transitionParams9.animateChangeProgress);
            }
            float f41 = f40;
            float f42 = !z ? f7 : f39;
            boolean z9 = (this.currentMessageObject == null || (chatMessageCellDelegate = this.delegate) == null || !chatMessageCellDelegate.isProgressLoading(this, 0)) ? false : true;
            if (this.replyPressedFloat == null) {
                this.replyPressedFloat = new AnimatedFloat(this);
            }
            float f43 = this.replyPressedFloat.set((this.replySelectorPressed || z9) ? 1.0f : 0.0f);
            if (this.replyLine == null) {
                this.replyLine = new ReplyMessageLine(this);
            }
            Theme.chat_replyNamePaint.setColor(this.replyLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 0));
            int alphaComponent = ColorUtils.setAlphaComponent(this.replyLine.getColor(), 30);
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                Theme.chat_replyLinePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyLine));
                Theme.chat_replyLinePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * this.timeAlpha * f2));
                alphaComponent = ColorUtils.setAlphaComponent(Theme.chat_replyLinePaint.getColor(), Color.alpha(alphaComponent));
                Theme.chat_replyNamePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
                Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyNamePaint.getAlpha() * this.timeAlpha * f2));
                TextPaint textPaint = Theme.chat_replyTextPaint;
                int i32 = Theme.key_chat_stickerReplyMessageText;
                textPaint.setColor(getThemedColor(i32));
                Theme.chat_replyTextPaint.linkColor = getThemedColor(i32);
                Theme.chat_replyTextPaint.setAlpha((int) (Theme.chat_replyTextPaint.getAlpha() * this.timeAlpha * f2));
                if (z) {
                    if (this.replyBounce == null) {
                        this.replyBounce = new ButtonBounce(this, 2.0f, 2.0f);
                    }
                    canvas.save();
                    float scale3 = this.replyBounce.getScale(0.0125f);
                    int i33 = (int) f42;
                    this.rect.set(i33 - AndroidUtilities.dp(7.0f), f41 - AndroidUtilities.dp(3.0f), (i33 - AndroidUtilities.dp(4.0f)) + Math.max(this.replyNameWidth, this.replyTextWidth), f41 + AndroidUtilities.dp(3.0f) + this.replyHeight);
                    float f44 = this.replyBounceX;
                    RectF rectF2 = this.rect;
                    float clamp = Utilities.clamp(f44, rectF2.right, rectF2.left);
                    float f45 = this.replyBounceY;
                    RectF rectF3 = this.rect;
                    canvas.scale(scale3, scale3, clamp, Utilities.clamp(f45, rectF3.bottom, rectF3.top));
                    applyServiceShaderMatrix();
                    int alpha7 = getThemedPaint("paintChatActionBackground").getAlpha();
                    getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha7 * this.timeAlpha * f2));
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatActionBackground"));
                    getThemedPaint("paintChatActionBackground").setAlpha(alpha7);
                    if (hasGradientService()) {
                        int alpha8 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha8 * this.timeAlpha * f2));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha8);
                    }
                    canvas.restore();
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                if (this.currentMessageObject.isReplyToStory()) {
                    Theme.chat_replyTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                    TextPaint textPaint2 = Theme.chat_replyTextPaint;
                    textPaint2.linkColor = textPaint2.getColor();
                } else {
                    int themedColor3 = getThemedColor(Theme.key_chat_outReplyMessageText);
                    MessageObject messageObject10 = this.currentMessageObject;
                    if (!messageObject10.forceAvatar) {
                        if (messageObject10.hasValidReplyMessageObject()) {
                            MessageObject messageObject11 = this.currentMessageObject.replyMessageObject;
                            if (messageObject11.contentType != 1) {
                            }
                        }
                        if (!this.hasReplyQuote) {
                            themedColor3 = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outReplyMediaMessageSelectedText : Theme.key_chat_outReplyMediaMessageText);
                            f43 = (f43 * 0.4f) + 0.6f;
                        }
                    }
                    Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor3, Theme.adaptHue(themedColor3, Theme.chat_replyNamePaint.getColor()), f43));
                    Theme.chat_replyTextPaint.linkColor = ColorUtils.blendARGB(themedColor3, Theme.adaptHue(themedColor3, Theme.chat_replyNamePaint.getColor()), Utilities.clamp(f43 * 2.0f, 1.0f, 0.0f));
                }
            } else if (this.currentMessageObject.isReplyToStory()) {
                Theme.chat_replyTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                TextPaint textPaint3 = Theme.chat_replyTextPaint;
                textPaint3.linkColor = textPaint3.getColor();
            } else {
                int themedColor4 = getThemedColor(Theme.key_chat_inReplyMessageText);
                MessageObject messageObject12 = this.currentMessageObject;
                if (!messageObject12.forceAvatar) {
                    if (messageObject12.hasValidReplyMessageObject()) {
                        MessageObject messageObject13 = this.currentMessageObject.replyMessageObject;
                        if (messageObject13.contentType != 1) {
                        }
                    }
                    if (!this.hasReplyQuote) {
                        themedColor4 = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inReplyMediaMessageSelectedText : Theme.key_chat_inReplyMediaMessageText);
                        f43 = (f43 * 0.4f) + 0.6f;
                    }
                }
                Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor4, Theme.adaptHue(themedColor4, Theme.chat_replyNamePaint.getColor()), f43));
                Theme.chat_replyTextPaint.linkColor = ColorUtils.blendARGB(themedColor4, Theme.adaptHue(themedColor4, Theme.chat_replyNamePaint.getColor()), Utilities.clamp(f43 * 2.0f, 1.0f, 0.0f));
            }
            int i34 = alphaComponent;
            Theme.chat_quoteTextPaint.setColor(Theme.chat_replyTextPaint.getColor());
            Theme.chat_quoteTextPaint.linkColor = Theme.chat_replyTextPaint.linkColor;
            float dp14 = AndroidUtilities.dp(10.0f);
            this.forwardNameX = (f42 - this.replyTextOffset) + dp14 + (this.needReplyImage ? dp2 + AndroidUtilities.dp(25.0f) : 0);
            MessageObject.GroupedMessagePosition groupedMessagePosition6 = this.currentPosition;
            if ((groupedMessagePosition6 == null || (groupedMessagePosition6.minY == 0 && groupedMessagePosition6.minX == 0)) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
                float alpha9 = (this.transitionParams.ignoreAlpha ? 1.0f : getAlpha()) * f2;
                if (alpha9 != 1.0f) {
                    RectF rectF4 = AndroidUtilities.rectTmp;
                    rectF4.set(0.0f, 0.0f, getWidth(), getHeight());
                    i12 = canvas.saveLayerAlpha(rectF4, (int) (alpha9 * 255.0f), 31);
                } else {
                    i12 = -1;
                }
                float min = Math.min(4.0f, SharedConfig.bubbleRadius);
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    float f46 = z ? 6.0f : 4.0f;
                    this.replySelectorRect.set(f42 - AndroidUtilities.dp(7.0f), f41 - AndroidUtilities.dp(3.0f), (Math.max(this.replyNameWidth, this.replyTextWidth) + f42) - AndroidUtilities.dp(4.0f), f41 + this.replyHeight + AndroidUtilities.dp(3.0f));
                    if (i10 > 0) {
                        RectF rectF5 = this.replySelectorRect;
                        rectF5.right = Math.max(rectF5.right, i10);
                    }
                    f9 = dp14;
                    f11 = f46;
                    f12 = f11;
                    f10 = f42;
                } else {
                    if (this.drawTopic || this.drawNameLayout || (this.drawForwardedName && this.forwardedNameLayout[0] != null)) {
                        f8 = min;
                    } else if (!this.currentMessageObject.isOutOwner() || !this.drawPinnedTop) {
                        f8 = SharedConfig.bubbleRadius * 0.6f;
                    } else {
                        f8 = SharedConfig.bubbleRadius / 3.0f;
                    }
                    if (this.currentMessagesGroup != null && (groupedMessagePosition2 = this.currentPosition) != null) {
                        int i35 = groupedMessagePosition2.flags;
                        if ((i35 & 1) == 0 || (i35 & 2) == 0) {
                            if (AndroidUtilities.isTablet()) {
                                parentWidth = AndroidUtilities.getMinTabletSide();
                            } else {
                                parentWidth = getParentWidth();
                            }
                            int i36 = 0;
                            int i37 = 0;
                            while (i36 < this.currentMessagesGroup.posArray.size()) {
                                if (this.currentMessagesGroup.posArray.get(i36).minY != 0) {
                                    break;
                                }
                                float f47 = dp14;
                                double d2 = i37;
                                double ceil2 = Math.ceil(((groupedMessagePosition3.pw + groupedMessagePosition3.leftSpanOffset) / 1000.0f) * parentWidth);
                                Double.isNaN(d2);
                                i37 = (int) (d2 + ceil2);
                                i36++;
                                f42 = f42;
                                dp14 = f47;
                            }
                            f9 = dp14;
                            f10 = f42;
                            if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                                i13 = (this.backgroundDrawableLeft + i37) - AndroidUtilities.dp(6.0f);
                            } else {
                                i13 = this.backgroundDrawableLeft + i37;
                            }
                            backgroundDrawableRight = i13 - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                            this.replySelectorRect.set(this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX(), (f41 - AndroidUtilities.dp((this.mediaBackground && this.drawPinnedTop && !this.drawNameLayout) ? 2 : 0)) - ((this.drawForwardedName || this.forwardedNameLayout[0] == null || this.drawNameLayout) ? 0 : 2), backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX()), f41 + this.replyHeight + AndroidUtilities.dp(4.0f));
                            f11 = f8;
                            f12 = min;
                        }
                    }
                    f9 = dp14;
                    f10 = f42;
                    backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
                    this.replySelectorRect.set(this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX(), (f41 - AndroidUtilities.dp((this.mediaBackground && this.drawPinnedTop && !this.drawNameLayout) ? 2 : 0)) - ((this.drawForwardedName || this.forwardedNameLayout[0] == null || this.drawNameLayout) ? 0 : 2), backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX()), f41 + this.replyHeight + AndroidUtilities.dp(4.0f));
                    f11 = f8;
                    f12 = min;
                }
                if (z) {
                    if (this.replyBounce == null) {
                        this.replyBounce = new ButtonBounce(this, 2.0f, 2.0f);
                    }
                    if (i12 == -1) {
                        i12 = canvas.getSaveCount();
                    }
                    canvas.save();
                    float scale4 = this.replyBounce.getScale(0.0125f);
                    float f48 = this.replyBounceX;
                    RectF rectF6 = this.replySelectorRect;
                    float clamp2 = Utilities.clamp(f48, rectF6.right, rectF6.left);
                    float f49 = this.replyBounceY;
                    RectF rectF7 = this.replySelectorRect;
                    canvas.scale(scale4, scale4, clamp2, Utilities.clamp(f49, rectF7.bottom, rectF7.top));
                }
                int i38 = i12;
                this.replyLine.setLoading(z9);
                this.replyLine.drawBackground(canvas, this.replySelectorRect, f12, f11, f12, f, this.isReplyQuote, this.currentMessageObject.shouldDrawWithoutBackground());
                if (this.replySelector == null) {
                    this.replySelectorColor = i34;
                    Drawable createRadSelectorDrawable4 = Theme.createRadSelectorDrawable(i34, 0, 0);
                    this.replySelector = createRadSelectorDrawable4;
                    createRadSelectorDrawable4.setCallback(this);
                }
                Drawable drawable5 = this.replySelector;
                RectF rectF8 = this.replySelectorRect;
                drawable5.setBounds((int) rectF8.left, (int) rectF8.top, (int) rectF8.right, (int) rectF8.bottom);
                if (f12 != this.replySelectorRadLeft || f11 != this.replySelectorRadRight) {
                    Drawable drawable6 = this.replySelector;
                    this.replySelectorRadLeft = f12;
                    this.replySelectorRadRight = f11;
                    Theme.setMaskDrawableRad(drawable6, f12, f11, f12, f12);
                }
                if (i34 != this.replySelectorColor) {
                    Drawable drawable7 = this.replySelector;
                    this.replySelectorColor = i34;
                    Theme.setSelectorDrawableColor(drawable7, i34, true);
                }
                this.replySelector.draw(canvas);
                Path path = this.replyRoundRectPath;
                if (path == null) {
                    this.replyRoundRectPath = new Path();
                } else {
                    path.rewind();
                }
                this.replyLine.drawLine(canvas, this.replySelectorRect);
                this.replyLine.drawLoadingBackground(canvas, this.replySelectorRect, f12, f11, f12, f);
                if (this.needReplyImage) {
                    this.replyImageReceiver.setAlpha(f2);
                    float min2 = Math.min(this.replySelectorRect.height() - AndroidUtilities.dp(10.0f), AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize() + Theme.chat_replyTextPaint.getTextSize());
                    ImageReceiver imageReceiver = this.replyImageReceiver;
                    float dp15 = this.replySelectorRect.left + AndroidUtilities.dp(8.0f);
                    float f50 = this.replySelectorRect.top;
                    if (!this.isReplyQuote || (staticLayout = this.replyTextLayout) == null || staticLayout.getLineCount() > 1) {
                        i17 = 5;
                        i18 = 0;
                    } else {
                        i17 = 5;
                        i18 = 2;
                    }
                    imageReceiver.setImageCoords(dp15, f50 + AndroidUtilities.dp(i18 + i17), min2, min2);
                    this.replyImageReceiver.draw(canvas);
                    MessageObject messageObject14 = this.currentMessageObject;
                    if (messageObject14 != null && messageObject14.hasValidReplyMessageObject() && this.currentMessageObject.replyMessageObject.hasMediaSpoilers()) {
                        int[] roundRadius = this.replyImageReceiver.getRoundRadius();
                        float[] fArr = this.mediaSpoilerRadii;
                        float f51 = roundRadius[0];
                        fArr[1] = f51;
                        fArr[0] = f51;
                        float f52 = roundRadius[1];
                        fArr[3] = f52;
                        fArr[2] = f52;
                        float f53 = roundRadius[2];
                        fArr[5] = f53;
                        fArr[4] = f53;
                        float f54 = roundRadius[3];
                        fArr[7] = f54;
                        fArr[6] = f54;
                        this.mediaSpoilerPath.rewind();
                        RectF rectF9 = AndroidUtilities.rectTmp;
                        rectF9.set(this.replyImageReceiver.getImageX(), this.replyImageReceiver.getImageY(), this.replyImageReceiver.getImageX2(), this.replyImageReceiver.getImageY2());
                        this.mediaSpoilerPath.addRoundRect(rectF9, this.mediaSpoilerRadii, Path.Direction.CW);
                        canvas.save();
                        canvas.clipPath(this.mediaSpoilerPath);
                        this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.replyImageReceiver.getAlpha())));
                        this.mediaSpoilerEffect.setBounds((int) this.replyImageReceiver.getImageX(), (int) this.replyImageReceiver.getImageY(), (int) this.replyImageReceiver.getImageX2(), (int) this.replyImageReceiver.getImageY2());
                        this.mediaSpoilerEffect.draw(canvas);
                        canvas.restore();
                        invalidate();
                    }
                    f13 = min2;
                } else {
                    f13 = 0.0f;
                }
                MessageObject messageObject15 = this.currentMessageObject;
                if (messageObject15 == null || !messageObject15.shouldDrawWithoutBackground()) {
                    f14 = 1.0f;
                    f15 = -AndroidUtilities.dp(1.0f);
                } else {
                    f15 = -AndroidUtilities.dp(6.0f);
                    f14 = 1.0f;
                }
                MessageObject messageObject16 = this.currentMessageObject;
                float dp16 = (messageObject16 == null || !messageObject16.shouldDrawWithoutBackground()) ? AndroidUtilities.dp(3.0f) : AndroidUtilities.dp(f14);
                boolean z10 = this.isReplyQuote;
                boolean z11 = z10 && (messageObject = this.currentMessageObject) != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.reply_to.quote;
                if (z10 && z11 && this.replyQuoteDrawable != null) {
                    if (this.replyLine.getColor() != this.replyQuoteDrawableColor) {
                        Drawable drawable8 = this.replyQuoteDrawable;
                        int color4 = this.replyLine.getColor();
                        this.replyQuoteDrawableColor = color4;
                        drawable8.setColorFilter(new PorterDuffColorFilter(color4, PorterDuff.Mode.SRC_IN));
                    }
                    this.replyQuoteDrawable.setBounds((int) ((this.replySelectorRect.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)) - this.replyQuoteDrawable.getIntrinsicWidth()), (int) (this.replySelectorRect.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (this.replySelectorRect.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (this.replySelectorRect.top + AndroidUtilities.dp((1 ^ (this.drawPinnedTop ? 1 : 0)) + 2) + this.replyQuoteDrawable.getIntrinsicHeight()));
                    this.replyQuoteDrawable.draw(canvas);
                }
                if (this.replyNameLayout != null) {
                    canvas.save();
                    canvas.translate(((f10 + f15) - this.replyNameOffset) + f9 + (this.needReplyImage ? f13 + AndroidUtilities.dp(3.0f) : 0.0f), f41 + dp16);
                    this.replyNameLayout.draw(canvas);
                    canvas.restore();
                }
                MessageObject messageObject17 = this.currentMessageObject;
                if (messageObject17 != null && messageObject17.isOutOwner() && !ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) {
                    color = getThemedColor(Theme.key_chat_outTimeText);
                } else {
                    color = Theme.chat_replyTextPaint.getColor();
                }
                int i39 = color;
                if (this.transitionParams.animateReplyTextLayout == null || this.transitionParams.animateChangeProgress >= 1.0f) {
                    i14 = i38;
                    canvas3 = canvas;
                    f16 = f10;
                    f17 = f9;
                    i15 = i2;
                    f18 = 1.0f;
                } else {
                    canvas.save();
                    canvas.clipRect(this.replySelectorRect);
                    canvas.save();
                    float f55 = f10 + f9 + f15;
                    if (this.isReplyQuote && this.needReplyImage) {
                        f55 -= AndroidUtilities.dp(2.0f);
                    }
                    if (this.needReplyImage && (!this.isReplyQuote || this.replyTextRTL)) {
                        f55 += f13 + AndroidUtilities.dp(3.0f);
                    }
                    if (this.replyTextRTL && this.transitionParams.animateReplyTextOffset > 0.0f) {
                        f55 = (this.replySelectorRect.right - AndroidUtilities.dp(8.0f)) - this.transitionParams.animateReplyTextLayout.getWidth();
                    }
                    canvas.translate(f55, ((f41 + dp16) - AndroidUtilities.dp(1.0f)) + Theme.chat_replyNamePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                    TextPaint paint = this.transitionParams.animateReplyTextLayout.getPaint();
                    int alpha10 = paint.getAlpha();
                    paint.setAlpha((int) (alpha10 * (1.0f - this.transitionParams.animateChangeProgress)));
                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i39, -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, this.transitionParams.animateReplyTextLayout, this.replySpoilers, canvas, false);
                    f17 = f9;
                    i15 = i2;
                    i14 = i38;
                    f16 = f10;
                    f18 = 1.0f;
                    canvas3 = canvas;
                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.transitionParams.animateReplyTextLayout, this.transitionParams.animateOutAnimateEmojiReply, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f, getAdaptiveEmojiColorFilter(2, paint.getColor()));
                    paint.setAlpha(alpha10);
                    canvas.restore();
                }
                if (this.replyTextLayout != null) {
                    canvas.save();
                    float f56 = f16 + f17 + f15;
                    if (this.isReplyQuote && this.needReplyImage) {
                        f56 -= AndroidUtilities.dp(2.0f);
                    }
                    if (this.needReplyImage && (!this.isReplyQuote || this.replyTextRTL)) {
                        f56 += f13 + AndroidUtilities.dp(3.0f);
                    }
                    if (this.replyTextRTL && this.replyTextOffset > 0) {
                        f56 = (this.replySelectorRect.right - AndroidUtilities.dp(8.0f)) - this.replyTextLayout.getWidth();
                    }
                    canvas3.translate(f56, ((f41 + dp16) - AndroidUtilities.dp(f18)) + Theme.chat_replyNamePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                    TextPaint paint2 = this.replyTextLayout.getPaint();
                    int alpha11 = paint2.getAlpha();
                    paint2.setAlpha((int) (alpha11 * (this.transitionParams.animateReplyTextLayout != null ? this.transitionParams.animateChangeProgress : 1.0f)));
                    int i40 = i14;
                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i39, -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, this.replyTextLayout, this.replySpoilers, canvas, false);
                    i11 = i15;
                    i16 = i40;
                    canvas2 = canvas3;
                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.replyTextLayout, this.animatedEmojiReplyStack, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f, getAdaptiveEmojiColorFilter(2, paint2.getColor()));
                    paint2.setAlpha(alpha11);
                    canvas.restore();
                } else {
                    canvas2 = canvas3;
                    i16 = i14;
                    i11 = i15;
                }
                if (this.transitionParams.animateReplyTextLayout != null && this.transitionParams.animateChangeProgress < f18) {
                    canvas.restore();
                }
                if (i16 >= 0) {
                    canvas2.restoreToCount(i16);
                }
                if (i11 == Integer.MIN_VALUE) {
                    canvas2.restoreToCount(i11);
                    return;
                }
                return;
            }
        }
        canvas2 = canvas;
        i11 = i2;
        if (i11 == Integer.MIN_VALUE) {
        }
    }

    public boolean hasCaptionLayout() {
        return this.captionLayout != null;
    }

    public boolean hasCommentLayout() {
        return this.drawCommentButton;
    }

    public MessageObject.TextLayoutBlocks getCaptionLayout() {
        return this.captionLayout;
    }

    public void setDrawSelectionBackground(boolean z) {
        if (this.drawSelectionBackground != z) {
            this.drawSelectionBackground = z;
            invalidate();
        }
    }

    public boolean isDrawingSelectionBackground() {
        return this.drawSelectionBackground || this.isHighlightedAnimated || this.isHighlighted;
    }

    public float getHighlightAlpha() {
        return getHighlightAlpha(false);
    }

    public float getHighlightAlpha(boolean z) {
        float f;
        QuoteHighlight quoteHighlight;
        if (this.drawSelectionBackground || !this.isHighlightedAnimated) {
            f = 1.0f;
        } else {
            int i = this.highlightProgress;
            f = (i >= 300 ? 1.0f : i / 300.0f) * 1.0f;
        }
        return (z || (quoteHighlight = this.quoteHighlight) == null) ? f : f * (1.0f - quoteHighlight.getT());
    }

    public void setCheckBoxVisible(boolean z, boolean z2) {
        MessageObject.GroupedMessages groupedMessages;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject messageObject;
        if (z2 && (messageObject = this.currentMessageObject) != null && messageObject.deletedByThanos) {
            return;
        }
        if (z) {
            this.quoteHighlight = null;
            CheckBoxBase checkBoxBase = this.checkBox;
            if (checkBoxBase == null) {
                CheckBoxBase checkBoxBase2 = new CheckBoxBase(this, 21, this.resourcesProvider);
                this.checkBox = checkBoxBase2;
                if (this.attachedToWindow) {
                    checkBoxBase2.onAttachedToWindow();
                }
            } else {
                checkBoxBase.setResourcesProvider(this.resourcesProvider);
            }
        }
        if (z && (((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.messages.size() > 1) || ((groupedMessages2 = this.groupedMessagesToSet) != null && groupedMessages2.messages.size() > 1))) {
            CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
            if (checkBoxBase3 == null) {
                CheckBoxBase checkBoxBase4 = new CheckBoxBase(this, 21, this.resourcesProvider);
                this.mediaCheckBox = checkBoxBase4;
                checkBoxBase4.setUseDefaultCheck(true);
                if (this.attachedToWindow) {
                    this.mediaCheckBox.onAttachedToWindow();
                }
            } else {
                checkBoxBase3.setResourcesProvider(this.resourcesProvider);
            }
        }
        if (this.checkBoxVisible == z) {
            if (z2 == this.checkBoxAnimationInProgress || z2) {
                return;
            }
            this.checkBoxAnimationProgress = z ? 1.0f : 0.0f;
            invalidate();
            return;
        }
        this.checkBoxAnimationInProgress = z2;
        this.checkBoxVisible = z;
        if (z2) {
            this.lastCheckBoxAnimationTime = SystemClock.elapsedRealtime();
        } else {
            this.checkBoxAnimationProgress = z ? 1.0f : 0.0f;
        }
        invalidate();
    }

    public boolean isCheckBoxVisible() {
        return this.checkBoxVisible || this.checkBoxAnimationInProgress;
    }

    public void setChecked(boolean z, boolean z2, boolean z3) {
        MessageObject messageObject;
        if (z || !z3 || (messageObject = this.currentMessageObject) == null || !messageObject.deletedByThanos) {
            CheckBoxBase checkBoxBase = this.checkBox;
            if (checkBoxBase != null) {
                checkBoxBase.setChecked(z2, z3);
            }
            CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
            if (checkBoxBase2 != null) {
                checkBoxBase2.setChecked(z, z3);
            }
            this.backgroundDrawable.setSelected(z2, z3);
        }
    }

    public void setLastTouchCoords(float f, float f2) {
        this.lastTouchX = f;
        this.lastTouchY = f2;
        this.backgroundDrawable.setTouchCoords(f + getTranslationX(), this.lastTouchY);
    }

    public MessageBackgroundDrawable getBackgroundDrawable() {
        return this.backgroundDrawable;
    }

    public Theme.MessageDrawable getCurrentBackgroundDrawable(boolean z) {
        if (z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            boolean z2 = groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
            if (this.currentMessageObject.isOutOwner()) {
                if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                } else {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                }
            } else if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
            }
        }
        this.currentBackgroundDrawable.getBackgroundDrawable();
        return this.currentBackgroundDrawable;
    }

    private boolean shouldDrawCaptionLayout() {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject = this.currentMessageObject;
        return (messageObject == null || messageObject.preview || messageObject.isSponsored() || ((groupedMessagePosition = this.currentPosition) != null && ((groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments || (groupedMessagePosition.flags & 8) != 0)) || this.transitionParams.animateBackgroundBoundsInner || (this.enterTransitionInProgress && this.currentMessageObject.isVoice())) ? false : true;
    }

    public void drawCaptionLayout(Canvas canvas, boolean z, float f) {
        if (this.animatedEmojiStack != null && !(canvas instanceof SizeNotifierFrameLayout.SimplerCanvas) && (this.captionLayout != null || this.transitionParams.animateOutCaptionLayout != null)) {
            this.animatedEmojiStack.clearPositions();
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            drawCaptionLayout(canvas, this.captionLayout, true, z, f);
        } else {
            drawCaptionLayout(canvas, transitionParams.animateOutCaptionLayout, false, z, f * (1.0f - this.transitionParams.animateChangeProgress));
            drawCaptionLayout(canvas, this.captionLayout, true, z, f * this.transitionParams.animateChangeProgress);
        }
        if (!z) {
            drawAnimatedEmojiCaption(canvas, f);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.messageOwner == null || !messageObject.isVoiceTranscriptionOpen()) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.messageOwner.voiceTranscriptionFinal || !TranscribeButton.isTranscribing(messageObject2)) {
            return;
        }
        invalidate();
    }

    public void drawReactionsLayout(Canvas canvas, float f, Integer num) {
        if (this.isRoundVideo) {
            this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.shouldDrawReactions()) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
            applyServiceShaderMatrix();
        }
        if (getAlpha() != 1.0f) {
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(0.0f, 0.0f, getWidth(), getHeight());
            canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble2.drawServiceShaderBackground > 0.0f || !this.transitionParams.animateBackgroundBoundsInner || this.currentPosition != null || this.isRoundVideo) {
            TransitionParams transitionParams = this.transitionParams;
            reactionsLayoutInBubble2.draw(canvas, transitionParams.animateChange ? transitionParams.animateChangeProgress : 1.0f, num);
        } else {
            canvas.save();
            canvas.clipRect(0.0f, 0.0f, getMeasuredWidth(), getBackgroundDrawableBottom() + this.transitionParams.deltaBottom);
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            TransitionParams transitionParams2 = this.transitionParams;
            reactionsLayoutInBubble3.draw(canvas, transitionParams2.animateChange ? transitionParams2.animateChangeProgress : 1.0f, num);
            canvas.restore();
        }
        if (getAlpha() != 1.0f) {
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:265:0x05f3  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0602  */
    /* JADX WARN: Removed duplicated region for block: B:287:0x0671  */
    /* JADX WARN: Removed duplicated region for block: B:297:0x06b9  */
    /* JADX WARN: Removed duplicated region for block: B:298:0x06d3  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x06e0  */
    /* JADX WARN: Removed duplicated region for block: B:302:0x06e5  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x06f9  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x06fd  */
    /* JADX WARN: Removed duplicated region for block: B:312:0x0713  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x07ae  */
    /* JADX WARN: Removed duplicated region for block: B:373:0x0861  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x087f  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x08c7  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x08d5  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x08e6  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x0983  */
    /* JADX WARN: Removed duplicated region for block: B:425:0x09ed  */
    /* JADX WARN: Removed duplicated region for block: B:438:0x0a2a  */
    /* JADX WARN: Removed duplicated region for block: B:499:0x0b61  */
    /* JADX WARN: Removed duplicated region for block: B:502:0x0b66  */
    /* JADX WARN: Removed duplicated region for block: B:511:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCaptionLayout(Canvas canvas, MessageObject.TextLayoutBlocks textLayoutBlocks, boolean z, boolean z2, float f) {
        int dp;
        int extraTextX;
        int i;
        int dp2;
        float f2;
        float f3;
        float f4;
        int i2;
        TransitionParams transitionParams;
        int i3;
        Rect rect;
        int i4;
        float dp3;
        float imageHeight;
        float f5;
        int dp4;
        int i5;
        Path path;
        float f6;
        int i6;
        int i7;
        float f7;
        MessageObject messageObject;
        int i8;
        boolean z3;
        Paint paint;
        int i9;
        int i10;
        boolean z4;
        boolean z5;
        int i11;
        long j;
        InfiniteProgress infiniteProgress;
        TextPaint textPaint;
        TextPaint textPaint2;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        boolean z6;
        int themedColor;
        int i12;
        int i13;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        if (this.mediaBackground) {
            dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
            extraTextX = getExtraTextX();
        } else {
            dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
            extraTextX = getExtraTextX();
        }
        int i14 = dp + extraTextX;
        int extraTextX2 = i14 - getExtraTextX();
        int i15 = 1;
        if (this.currentMessagesGroup == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()) {
            i = i14;
            dp2 = extraTextX2 + (this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f)));
        } else {
            int groupPhotosWidth = getGroupPhotosWidth();
            if ((this.currentPosition.flags & 1) == 0) {
                double d = extraTextX2;
                double ceil = Math.ceil((groupedMessagePosition.pw / 1000.0f) * groupPhotosWidth);
                Double.isNaN(d);
                dp2 = (int) (d + ceil);
                i = i14;
            } else {
                int i16 = 0;
                int i17 = 0;
                while (i16 < this.currentMessagesGroup.posArray.size()) {
                    if (this.currentMessagesGroup.posArray.get(i16).minY != 0) {
                        break;
                    }
                    double d2 = i17;
                    double ceil2 = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d2);
                    i17 = (int) (d2 + ceil2);
                    i16++;
                    i14 = i14;
                    groupPhotosWidth = groupPhotosWidth;
                }
                i = i14;
                dp2 = extraTextX2 + (i17 - AndroidUtilities.dp(9.0f));
            }
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
        if (groupedMessagePosition3 != null && (groupedMessagePosition3.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
            dp2 += AndroidUtilities.dp(14.0f);
        }
        if (this.currentBackgroundDrawable != null && this.drawCommentButton && this.timeLayout != null) {
            float dp5 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(18.0f)) - this.timeLayout.getHeight();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams2 = groupedMessages.transitionParams;
                dp5 += transitionParams2.offsetBottom;
                if (transitionParams2.backgroundChangeBounds) {
                    dp5 -= getTranslationY();
                }
            }
            float f8 = dp5;
            if (this.pinnedBottom) {
                i6 = 3;
                i7 = 2;
            } else if (this.pinnedTop) {
                i6 = 1;
                i7 = 4;
            } else {
                i6 = 0;
                i7 = 3;
            }
            int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
            float dp6 = this.layoutHeight - AndroidUtilities.dp(45.1f - i6);
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 != null && (groupedMessagePosition4.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
                currentBackgroundLeft -= AndroidUtilities.dp(10.0f);
            }
            Rect rect2 = this.commentButtonRect;
            MessageObject messageObject2 = this.currentMessageObject;
            rect2.set(currentBackgroundLeft - AndroidUtilities.dp(((messageObject2 == null || !messageObject2.isOutOwner()) && !this.drawPinnedBottom && this.currentPosition == null && ((messageObject = this.currentMessageObject) == null || messageObject.type != 17 || this.pollInstantViewTouchesBottom)) ? 6.0f : 0.0f), (int) dp6, dp2 - AndroidUtilities.dp(14.0f), (this.layoutHeight - AndroidUtilities.dp(i7)) + 1);
            if (this.selectorDrawable[1] != null && this.selectorDrawableMaskType[1] == 2) {
                int saveCount = canvas.getSaveCount();
                this.selectorDrawable[1].setBounds(this.commentButtonRect);
                this.selectorDrawable[1].draw(canvas);
                canvas.restoreToCount(saveCount);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 == null || ((groupedMessagePosition5.flags & 1) != 0 && groupedMessagePosition5.minX == 0 && groupedMessagePosition5.maxX == 0)) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                boolean z7 = chatMessageCellDelegate != null && chatMessageCellDelegate.shouldDrawThreadProgress(this, false);
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                boolean z8 = chatMessageCellDelegate2 != null && chatMessageCellDelegate2.shouldDrawThreadProgress(this, true);
                if (z7) {
                    LoadingDrawable loadingDrawable = this.commentLoading;
                    if (loadingDrawable == null) {
                        LoadingDrawable loadingDrawable2 = new LoadingDrawable();
                        this.commentLoading = loadingDrawable2;
                        loadingDrawable2.setAppearByGradient(true);
                    } else if (loadingDrawable.isDisappeared() || this.commentLoading.isDisappearing()) {
                        this.commentLoading.reset();
                        this.commentLoading.resetDisappear();
                    }
                } else {
                    LoadingDrawable loadingDrawable3 = this.commentLoading;
                    if (loadingDrawable3 != null && !loadingDrawable3.isDisappearing() && !this.commentLoading.isDisappeared()) {
                        this.commentLoading.disappear();
                    }
                }
                LoadingDrawable loadingDrawable4 = this.commentLoading;
                if (loadingDrawable4 != null && !loadingDrawable4.isDisappeared()) {
                    int themedColor2 = getThemedColor(Theme.key_chat_inInstant);
                    this.commentLoading.setColors(Theme.multAlpha(themedColor2, 0.05f), Theme.multAlpha(themedColor2, 0.15f));
                    this.commentLoading.setBounds(this.commentButtonRect);
                    canvas.save();
                    MaskDrawable maskDrawable = this.selectorMaskDrawable[1];
                    if (maskDrawable != null) {
                        maskDrawable.setBounds(this.commentButtonRect);
                        this.selectorMaskDrawable[1].updatePath();
                        canvas.clipPath(this.selectorMaskDrawable[1].path);
                    }
                    this.commentLoading.draw(canvas);
                    canvas.restore();
                    invalidate();
                }
                if (getAlpha() != 1.0f) {
                    RectF rectF = AndroidUtilities.rectTmp;
                    rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                    canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
                }
                Theme.chat_instantViewPaint.setColor(getThemedColor(Theme.key_chat_inPreviewInstantText));
                if (this.commentAvatarImages != null) {
                    int dp7 = AndroidUtilities.dp(17.0f);
                    int extraTextX3 = i + getExtraTextX();
                    int length = this.commentAvatarImages.length - 1;
                    i8 = 2;
                    boolean z9 = false;
                    while (length >= 0) {
                        if (this.commentAvatarImagesVisible[length] && this.commentAvatarImages[length].hasImageSet()) {
                            this.commentAvatarImages[length].setImageX((dp7 * length) + extraTextX3);
                            this.commentAvatarImages[length].setImageY((f8 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                            if (length != imageReceiverArr.length - i15) {
                                canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.commentAvatarImages[length].getCenterY(), AndroidUtilities.dp(13.0f), this.currentBackgroundDrawable.getPaint());
                            }
                            this.commentAvatarImages[length].draw(canvas);
                            if (length != 0) {
                                i8 += 17;
                            }
                            z9 = true;
                        }
                        length--;
                        i15 = 1;
                    }
                    z3 = z9;
                } else {
                    i8 = 2;
                    z3 = false;
                }
                if (getAlpha() != 1.0f) {
                    canvas.restore();
                }
                if (this.mediaBackground && textLayoutBlocks == null) {
                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                        i10 = i;
                        i9 = 3;
                        f2 = 0.0f;
                        if (this.commentLayout == null && this.drawSideButton != i9) {
                            Theme.chat_commentTextPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText));
                            float f9 = i8 + 33;
                            int dp8 = AndroidUtilities.dp(f9) + i10;
                            this.commentX = dp8;
                            if (this.drawCommentNumber) {
                                this.commentX = dp8 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            int alpha = Theme.chat_commentTextPaint.getAlpha();
                            if (!this.transitionParams.animateComments || this.transitionParams.animateCommentsLayout == null) {
                                z4 = z8;
                                z5 = z3;
                            } else {
                                canvas.save();
                                TextPaint textPaint3 = Theme.chat_commentTextPaint;
                                z4 = z8;
                                double d3 = alpha;
                                z5 = z3;
                                double d4 = this.transitionParams.animateChangeProgress;
                                Double.isNaN(d4);
                                Double.isNaN(d3);
                                textPaint3.setAlpha((int) (d3 * (1.0d - d4)));
                                canvas.translate(this.transitionParams.animateCommentX + ((this.commentX - this.transitionParams.animateCommentX) * this.transitionParams.animateChangeProgress), (f8 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                                this.transitionParams.animateCommentsLayout.draw(canvas);
                                canvas.restore();
                            }
                            canvas.save();
                            canvas.translate(i10 + AndroidUtilities.dp(f9), (f8 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (!this.currentMessageObject.isSent()) {
                                Theme.chat_commentTextPaint.setAlpha(NotificationCenter.dialogTranslate);
                                Theme.chat_commentArrowDrawable.setAlpha(NotificationCenter.dialogTranslate);
                                Theme.chat_commentDrawable.setAlpha(NotificationCenter.dialogTranslate);
                            } else {
                                Theme.chat_commentArrowDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                                Theme.chat_commentDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                            }
                            if (this.drawCommentNumber || (this.transitionParams.animateComments && this.transitionParams.animateDrawCommentNumber)) {
                                if (this.drawCommentNumber && this.transitionParams.animateComments) {
                                    if (this.transitionParams.animateDrawCommentNumber) {
                                        Theme.chat_commentTextPaint.setAlpha(alpha);
                                    } else {
                                        Theme.chat_commentTextPaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                                    }
                                }
                                Theme.chat_commentTextPaint.setAlpha((int) (textPaint.getAlpha() * getAlpha()));
                                this.commentNumberLayout.draw(canvas);
                                if (this.drawCommentNumber) {
                                    canvas.translate(this.commentNumberWidth + AndroidUtilities.dp(4.0f), f2);
                                }
                            }
                            if (this.transitionParams.animateComments && this.transitionParams.animateCommentsLayout != null) {
                                Theme.chat_commentTextPaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                            } else {
                                Theme.chat_commentTextPaint.setAlpha((int) (alpha * f));
                            }
                            Theme.chat_commentTextPaint.setAlpha((int) (textPaint2.getAlpha() * getAlpha()));
                            this.commentLayout.draw(canvas);
                            canvas.restore();
                            int dp9 = i10 + this.commentWidth + AndroidUtilities.dp(f9) + AndroidUtilities.dp(9.0f);
                            this.commentUnreadX = dp9;
                            if (this.drawCommentNumber) {
                                this.commentUnreadX = dp9 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                            if (groupedMessages2 != null && !groupedMessages2.messages.isEmpty()) {
                                MessageObject messageObject3 = this.currentMessagesGroup.messages.get(0);
                                if (messageObject3.hasReplies()) {
                                    tLRPC$MessageReplies = messageObject3.messageOwner.replies;
                                    if (tLRPC$MessageReplies == null) {
                                    }
                                    this.commentDrawUnread = z6;
                                    if (z6) {
                                    }
                                }
                                tLRPC$MessageReplies = null;
                                if (tLRPC$MessageReplies == null) {
                                }
                                this.commentDrawUnread = z6;
                                if (z6) {
                                }
                            } else {
                                if (this.currentMessageObject.hasReplies()) {
                                    tLRPC$MessageReplies = this.currentMessageObject.messageOwner.replies;
                                    z6 = tLRPC$MessageReplies == null && (i13 = tLRPC$MessageReplies.read_max_id) != 0 && i13 < tLRPC$MessageReplies.max_id;
                                    this.commentDrawUnread = z6;
                                    if (z6) {
                                        Theme.chat_docBackPaint.setColor(getThemedColor(Theme.key_chat_inInstant));
                                        if (!this.transitionParams.animateComments) {
                                            i12 = this.commentUnreadX;
                                        } else {
                                            if (!this.transitionParams.animateCommentDrawUnread) {
                                                Theme.chat_docBackPaint.setAlpha((int) (Color.alpha(themedColor) * this.transitionParams.animateChangeProgress));
                                            }
                                            i12 = (int) (this.transitionParams.animateCommentUnreadX + ((this.commentUnreadX - this.transitionParams.animateCommentUnreadX) * this.transitionParams.animateChangeProgress));
                                        }
                                        canvas.drawCircle(i12, f8 + AndroidUtilities.dp(8.0f) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0), AndroidUtilities.dp(2.5f), Theme.chat_docBackPaint);
                                    }
                                }
                                tLRPC$MessageReplies = null;
                                if (tLRPC$MessageReplies == null) {
                                }
                                this.commentDrawUnread = z6;
                                if (z6) {
                                }
                            }
                            if (textLayoutBlocks == null) {
                                if (z2 && this.links.isEmpty()) {
                                    return;
                                }
                                if ((!this.currentMessageObject.deleted || this.drawingToBitmap || this.currentPosition == null) && f != f2) {
                                    setupTextColors();
                                    canvas.save();
                                    MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                                    float f10 = groupedMessages3 != null ? groupedMessages3.transitionParams.captionEnterProgress * f : f;
                                    if (f10 == f2) {
                                        return;
                                    }
                                    float f11 = this.captionY;
                                    float f12 = this.captionX;
                                    TransitionParams transitionParams3 = this.transitionParams;
                                    if (transitionParams3.animateBackgroundBoundsInner) {
                                        if (transitionParams3.transformGroupToSingleMessage) {
                                            f11 -= getTranslationY();
                                            f6 = this.transitionParams.deltaLeft;
                                        } else if (transitionParams3.moveCaption) {
                                            float f13 = this.captionX;
                                            TransitionParams transitionParams4 = this.transitionParams;
                                            float f14 = transitionParams4.animateChangeProgress;
                                            float f15 = 1.0f - f14;
                                            float f16 = (f13 * f14) + (transitionParams4.captionFromX * f15);
                                            float f17 = transitionParams4.captionFromY * f15;
                                            f3 = f16;
                                            f11 = f17 + (this.captionY * f14);
                                            if (this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                                                f4 = 1.0f;
                                            } else {
                                                f4 = 1.0f;
                                                f11 += (1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize;
                                            }
                                            float f18 = f11;
                                            if (f10 == f4) {
                                                this.rect.set(f3, f18, textLayoutBlocks.textWidth + f3, textLayoutBlocks.textHeight(this.transitionParams) + f18);
                                                i2 = canvas.saveLayerAlpha(this.rect, (int) (f10 * 255.0f), 31);
                                            } else {
                                                i2 = Integer.MIN_VALUE;
                                            }
                                            if (!this.isRoundVideo && this.transitionParams.animateDrawBackground) {
                                                Theme.MessageDrawable.PathDrawParams pathDrawParams = this.backgroundCacheParams;
                                                if (pathDrawParams != null && (path = pathDrawParams.getPath()) != null && !path.isEmpty()) {
                                                    canvas.translate(f2, this.transitionYOffsetForDrawables);
                                                    canvas.clipPath(path);
                                                    canvas.translate(f2, -this.transitionYOffsetForDrawables);
                                                }
                                            } else {
                                                transitionParams = this.transitionParams;
                                                if ((transitionParams.animateBackgroundBoundsInner && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) || (transitionParams.animateMediaAbove && this.currentMessagesGroup == null)) {
                                                    int height = (this.drawCommentButton || (rect = this.commentButtonRect) == null) ? 0 : rect.height();
                                                    ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                                                    i3 = height + ((reactionsLayoutInBubble2 != null || reactionsLayoutInBubble2.isSmall) ? 0 : reactionsLayoutInBubble2.height);
                                                    if (!this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                                                        canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(10.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i3);
                                                    } else {
                                                        canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i3);
                                                    }
                                                }
                                            }
                                            canvas.save();
                                            canvas.translate(f3, f18);
                                            if (this.highlightPath != null) {
                                                float currentTimeMillis = ((float) (System.currentTimeMillis() - this.highlightPathStart)) / 850.0f;
                                                if (currentTimeMillis > 1.0f) {
                                                    this.highlightPath = null;
                                                } else {
                                                    int alpha2 = Theme.chat_textSearchSelectionPaint.getAlpha();
                                                    float f19 = currentTimeMillis * 4.0f;
                                                    Theme.chat_textSearchSelectionPaint.setAlpha((int) (alpha2 * 0.8f * (1.0f - currentTimeMillis) * f19));
                                                    canvas.save();
                                                    float interpolation = (AndroidUtilities.overshootInterpolator.getInterpolation(Math.min(1.0f, f19)) * 0.6f) + 0.4f;
                                                    LinkPath linkPath = this.highlightPath;
                                                    canvas.scale(interpolation, interpolation, linkPath.centerX, linkPath.centerY);
                                                    canvas.drawPath(this.highlightPath, Theme.chat_textSearchSelectionPaint);
                                                    canvas.restore();
                                                    Theme.chat_textSearchSelectionPaint.setAlpha(alpha2);
                                                }
                                                invalidate();
                                            }
                                            if (this.currentMessageObject.type == 5) {
                                                TextPaint textPaint4 = Theme.chat_timePaint;
                                                int themedColor3 = getThemedColor(Theme.key_chat_serviceText);
                                                if (isDrawSelectionBackground()) {
                                                    i5 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText;
                                                } else {
                                                    i5 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText;
                                                }
                                                textPaint4.setColor(ColorUtils.blendARGB(themedColor3, getThemedColor(i5), getVideoTranscriptionProgress()));
                                            }
                                            canvas.restore();
                                            if (z2) {
                                                i4 = i2;
                                            } else {
                                                TransitionParams transitionParams5 = this.transitionParams;
                                                if (transitionParams5.animateMediaAbove && transitionParams5.animateChangeProgress != 1.0f) {
                                                    int i18 = this.currentMessageObject.type;
                                                    if (i18 == 1 || i18 == 20 || this.documentAttachType == 4 || i18 == 8 || i18 == 23) {
                                                        float imageY = this.photoImage.getImageY();
                                                        dp3 = (imageY + (-textLayoutBlocks.textHeight(this.transitionParams))) - AndroidUtilities.dp(4.0f);
                                                        imageHeight = this.photoImage.getImageHeight() + imageY + AndroidUtilities.dp(6.0f);
                                                    } else {
                                                        if (this.hasOldCaptionPreview) {
                                                            f5 = ((((this.totalHeight - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f)) - AndroidUtilities.dp((!this.drawCommentButton || this.drawSideButton == 3) ? 0.0f : shouldDrawTimeOnMedia() ? 41.3f : 43.0f)) - this.captionHeight;
                                                            dp4 = AndroidUtilities.dp(9.0f);
                                                        } else {
                                                            int dp10 = ((this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - AndroidUtilities.dp((!this.drawCommentButton || this.drawSideButton == 3) ? 0.0f : shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                                                            f5 = dp10 - ((reactionsLayoutInBubble3.isEmpty || reactionsLayoutInBubble3.isSmall) ? 0 : reactionsLayoutInBubble3.totalHeight);
                                                            dp4 = AndroidUtilities.dp(9.0f);
                                                        }
                                                        imageHeight = f5;
                                                        dp3 = dp4;
                                                    }
                                                    float f20 = this.captionAbove ? imageHeight : dp3;
                                                    float f21 = imageHeight;
                                                    i4 = i2;
                                                    drawMessageText(f3, f20, canvas, textLayoutBlocks.textLayoutBlocks, textLayoutBlocks.textXOffset, z, f * (1.0f - this.transitionParams.animateChangeProgress), true, false, true);
                                                    drawMessageText(f3, this.captionAbove ? dp3 : f21, canvas, textLayoutBlocks.textLayoutBlocks, textLayoutBlocks.textXOffset, z, f * this.transitionParams.animateChangeProgress, true, false, true);
                                                } else {
                                                    i4 = i2;
                                                    drawMessageText(f3, f18, canvas, textLayoutBlocks.textLayoutBlocks, textLayoutBlocks.textXOffset, z, f, true, false, true);
                                                }
                                            }
                                            if (i4 != Integer.MIN_VALUE) {
                                                canvas.restoreToCount(i4);
                                            }
                                            canvas.restore();
                                            return;
                                        } else if ((!this.currentMessageObject.isVoice() && !this.currentMessageObject.isRoundVideo()) || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                                            f6 = this.transitionParams.deltaLeft;
                                        }
                                        f12 += f6;
                                    }
                                    f3 = f12;
                                    if (this.isRoundVideo) {
                                    }
                                    f4 = 1.0f;
                                    float f182 = f11;
                                    if (f10 == f4) {
                                    }
                                    if (!this.isRoundVideo) {
                                    }
                                    transitionParams = this.transitionParams;
                                    if (transitionParams.animateBackgroundBoundsInner) {
                                        if (this.drawCommentButton) {
                                        }
                                        ReactionsLayoutInBubble reactionsLayoutInBubble22 = this.reactionsLayoutInBubble;
                                        i3 = height + ((reactionsLayoutInBubble22 != null || reactionsLayoutInBubble22.isSmall) ? 0 : reactionsLayoutInBubble22.height);
                                        if (!this.currentMessageObject.isOutOwner()) {
                                        }
                                        canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i3);
                                        canvas.save();
                                        canvas.translate(f3, f182);
                                        if (this.highlightPath != null) {
                                        }
                                        if (this.currentMessageObject.type == 5) {
                                        }
                                        canvas.restore();
                                        if (z2) {
                                        }
                                        if (i4 != Integer.MIN_VALUE) {
                                        }
                                        canvas.restore();
                                        return;
                                    }
                                    if (this.drawCommentButton) {
                                    }
                                    ReactionsLayoutInBubble reactionsLayoutInBubble222 = this.reactionsLayoutInBubble;
                                    i3 = height + ((reactionsLayoutInBubble222 != null || reactionsLayoutInBubble222.isSmall) ? 0 : reactionsLayoutInBubble222.height);
                                    if (!this.currentMessageObject.isOutOwner()) {
                                    }
                                    canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i3);
                                    canvas.save();
                                    canvas.translate(f3, f182);
                                    if (this.highlightPath != null) {
                                    }
                                    if (this.currentMessageObject.type == 5) {
                                    }
                                    canvas.restore();
                                    if (z2) {
                                    }
                                    if (i4 != Integer.MIN_VALUE) {
                                    }
                                    canvas.restore();
                                    return;
                                }
                                return;
                            }
                            return;
                        }
                        z4 = z8;
                        z5 = z3;
                        if (!z5) {
                            BaseCell.setDrawableBounds(Theme.chat_commentDrawable, i10, (f8 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (f != 1.0f) {
                                Theme.chat_commentDrawable.setAlpha((int) (f * 255.0f));
                                Theme.chat_commentDrawable.draw(canvas);
                                Theme.chat_commentDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                            } else {
                                Theme.chat_commentDrawable.draw(canvas);
                            }
                        }
                        this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
                        if (this.transitionParams.animateComments) {
                            i11 = this.commentArrowX;
                        } else {
                            i11 = (int) (this.transitionParams.animateCommentArrowX + ((this.commentArrowX - this.transitionParams.animateCommentArrowX) * this.transitionParams.animateChangeProgress));
                        }
                        float dp11 = (f8 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                        long elapsedRealtime = SystemClock.elapsedRealtime();
                        j = elapsedRealtime - this.commentProgressLastUpadteTime;
                        this.commentProgressLastUpadteTime = elapsedRealtime;
                        if (j > 17) {
                            j = 17;
                        }
                        if (!z4) {
                            float f22 = this.commentProgressAlpha;
                            if (f22 < 1.0f) {
                                float f23 = f22 + (((float) j) / 180.0f);
                                this.commentProgressAlpha = f23;
                                if (f23 > 1.0f) {
                                    this.commentProgressAlpha = 1.0f;
                                }
                            }
                        } else {
                            float f24 = this.commentProgressAlpha;
                            if (f24 > f2) {
                                float f25 = f24 - (((float) j) / 180.0f);
                                this.commentProgressAlpha = f25;
                                if (f25 < f2) {
                                    this.commentProgressAlpha = f2;
                                }
                            }
                        }
                        if ((!z4 || this.commentProgressAlpha > f2) && (infiniteProgress = this.commentProgress) != null) {
                            infiniteProgress.setColor(getThemedColor(Theme.key_chat_inInstant));
                            this.commentProgress.setAlpha(this.commentProgressAlpha);
                            this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i11, dp11 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                            invalidate();
                        }
                        if (z4 || this.commentProgressAlpha < 1.0f) {
                            int intrinsicWidth = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                            float f26 = i11 + intrinsicWidth;
                            float intrinsicHeight = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                            float f27 = dp11 + intrinsicHeight;
                            Drawable drawable = Theme.chat_commentArrowDrawable;
                            float f28 = 1.0f - this.commentProgressAlpha;
                            float f29 = intrinsicWidth * f28;
                            float f30 = intrinsicHeight * f28;
                            drawable.setBounds((int) (f26 - f29), (int) (f27 - f30), (int) (f26 + f29), (int) (f27 + f30));
                            Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                            Theme.chat_commentArrowDrawable.draw(canvas);
                        }
                        if (textLayoutBlocks == null) {
                        }
                    }
                }
                if (isDrawSelectionBackground()) {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarSelected : Theme.key_chat_inVoiceSeekbarSelected));
                } else {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbar : Theme.key_chat_inVoiceSeekbar));
                }
                TransitionParams transitionParams6 = this.transitionParams;
                float dp12 = (this.layoutHeight - AndroidUtilities.dp(f7)) + transitionParams6.deltaBottom;
                MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams7 = groupedMessages4.transitionParams;
                    dp12 += transitionParams7.offsetBottom;
                    if (transitionParams7.backgroundChangeBounds) {
                        dp12 -= getTranslationY();
                    }
                } else {
                    dp2 = (i + ((int) ((this.backgroundWidth - transitionParams6.deltaLeft) + transitionParams6.deltaRight))) - AndroidUtilities.dp(12.0f);
                }
                int i19 = dp2;
                float f31 = dp12;
                Theme.chat_replyLinePaint.setAlpha((int) (paint.getAlpha() * getAlpha()));
                int i20 = i;
                f2 = 0.0f;
                i9 = 3;
                i10 = i20;
                canvas.drawLine(i20, f31, i19 - AndroidUtilities.dp(14.0f), f31, Theme.chat_replyLinePaint);
                dp2 = i19;
                if (this.commentLayout == null) {
                }
                z4 = z8;
                z5 = z3;
                if (!z5) {
                }
                this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
                if (this.transitionParams.animateComments) {
                }
                float dp112 = (f8 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                long elapsedRealtime2 = SystemClock.elapsedRealtime();
                j = elapsedRealtime2 - this.commentProgressLastUpadteTime;
                this.commentProgressLastUpadteTime = elapsedRealtime2;
                if (j > 17) {
                }
                if (!z4) {
                }
                if (!z4) {
                }
                infiniteProgress.setColor(getThemedColor(Theme.key_chat_inInstant));
                this.commentProgress.setAlpha(this.commentProgressAlpha);
                this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i11, dp112 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                invalidate();
                if (z4) {
                }
                int intrinsicWidth2 = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                float f262 = i11 + intrinsicWidth2;
                float intrinsicHeight2 = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                float f272 = dp112 + intrinsicHeight2;
                Drawable drawable2 = Theme.chat_commentArrowDrawable;
                float f282 = 1.0f - this.commentProgressAlpha;
                float f292 = intrinsicWidth2 * f282;
                float f302 = intrinsicHeight2 * f282;
                drawable2.setBounds((int) (f262 - f292), (int) (f272 - f302), (int) (f262 + f292), (int) (f272 + f302));
                Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                Theme.chat_commentArrowDrawable.draw(canvas);
                if (textLayoutBlocks == null) {
                }
            }
        }
        f2 = 0.0f;
        if (textLayoutBlocks == null) {
        }
    }

    public void drawProgressLoadingLink(Canvas canvas, int i) {
        updateProgressLoadingLink();
        ArrayList<LoadingDrawableLocation> arrayList = this.progressLoadingLinkDrawables;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        int themedColor = getThemedColor((messageObject == null || !messageObject.isOutOwner()) ? Theme.key_chat_linkSelectBackground : Theme.key_chat_outLinkSelectBackground);
        int i2 = 0;
        while (i2 < this.progressLoadingLinkDrawables.size()) {
            LoadingDrawableLocation loadingDrawableLocation = this.progressLoadingLinkDrawables.get(i2);
            if (loadingDrawableLocation.blockNum == i) {
                LoadingDrawable loadingDrawable = loadingDrawableLocation.drawable;
                loadingDrawable.setColors(Theme.multAlpha(themedColor, 0.85f), Theme.multAlpha(themedColor, 2.0f), Theme.multAlpha(themedColor, 3.5f), Theme.multAlpha(themedColor, 6.0f));
                loadingDrawable.draw(canvas);
                invalidate();
                if (loadingDrawable.isDisappeared()) {
                    this.progressLoadingLinkDrawables.remove(i2);
                    i2--;
                }
            }
            i2++;
        }
    }

    public void updateProgressLoadingLink() {
        MessageObject messageObject;
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null) {
            return;
        }
        if (!chatMessageCellDelegate.isProgressLoading(this, 1)) {
            this.progressLoadingLink = null;
            ArrayList<LoadingDrawableLocation> arrayList = this.progressLoadingLinkDrawables;
            if (arrayList == null || arrayList.isEmpty()) {
                return;
            }
            for (int i = 0; i < this.progressLoadingLinkDrawables.size(); i++) {
                LoadingDrawableLocation loadingDrawableLocation = this.progressLoadingLinkDrawables.get(i);
                if (!loadingDrawableLocation.drawable.isDisappearing()) {
                    loadingDrawableLocation.drawable.disappear();
                }
            }
            return;
        }
        CharacterStyle progressLoadingLink = this.delegate.getProgressLoadingLink(this);
        if (progressLoadingLink == this.progressLoadingLink) {
            return;
        }
        this.progressLoadingLink = progressLoadingLink;
        LoadingDrawable loadingDrawable = this.progressLoadingLinkCurrentDrawable;
        if (loadingDrawable != null) {
            loadingDrawable.disappear();
            this.progressLoadingLinkCurrentDrawable = null;
        }
        LoadingDrawable loadingDrawable2 = new LoadingDrawable();
        this.progressLoadingLinkCurrentDrawable = loadingDrawable2;
        loadingDrawable2.setAppearByGradient(true);
        LinkPath linkPath = new LinkPath(true);
        this.progressLoadingLinkCurrentDrawable.usePath(linkPath);
        this.progressLoadingLinkCurrentDrawable.setRadiiDp(5.0f);
        LoadingDrawableLocation loadingDrawableLocation2 = new LoadingDrawableLocation();
        loadingDrawableLocation2.drawable = this.progressLoadingLinkCurrentDrawable;
        loadingDrawableLocation2.blockNum = -3;
        if (this.progressLoadingLinkDrawables == null) {
            this.progressLoadingLinkDrawables = new ArrayList<>();
        }
        this.progressLoadingLinkDrawables.add(loadingDrawableLocation2);
        if (this.progressLoadingLink == null || findProgressLoadingLink(loadingDrawableLocation2, linkPath, this.descriptionLayout, 0.0f, -2)) {
            return;
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if ((textLayoutBlocks == null || !findProgressLoadingLink(loadingDrawableLocation2, linkPath, textLayoutBlocks.textLayoutBlocks)) && (messageObject = this.currentMessageObject) != null) {
            findProgressLoadingLink(loadingDrawableLocation2, linkPath, messageObject.textLayoutBlocks);
        }
    }

    private boolean findProgressLoadingLink(LoadingDrawableLocation loadingDrawableLocation, LinkPath linkPath, ArrayList<MessageObject.TextLayoutBlock> arrayList) {
        if (arrayList == null) {
            return false;
        }
        for (int i = 0; i < arrayList.size(); i++) {
            if (findProgressLoadingLink(loadingDrawableLocation, linkPath, arrayList.get(i).textLayout, 0.0f, i)) {
                return true;
            }
        }
        return false;
    }

    private boolean findProgressLoadingLink(LoadingDrawableLocation loadingDrawableLocation, LinkPath linkPath, Layout layout, float f, int i) {
        if (layout == null || !(layout.getText() instanceof Spanned)) {
            return false;
        }
        Spanned spanned = (Spanned) layout.getText();
        CharacterStyle[] characterStyleArr = (CharacterStyle[]) spanned.getSpans(0, spanned.length(), CharacterStyle.class);
        if (characterStyleArr != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= characterStyleArr.length) {
                    break;
                } else if (characterStyleArr[i2] == this.progressLoadingLink) {
                    loadingDrawableLocation.blockNum = i;
                    break;
                } else {
                    i2++;
                }
            }
        }
        if (loadingDrawableLocation.blockNum == i) {
            linkPath.rewind();
            int spanStart = spanned.getSpanStart(this.progressLoadingLink);
            int spanEnd = spanned.getSpanEnd(this.progressLoadingLink);
            linkPath.setUseCornerPathImplementation(true);
            linkPath.setCurrentLayout(layout, spanStart, f);
            layout.getSelectionPath(spanStart, spanEnd, linkPath);
            linkPath.closeRects();
            this.progressLoadingLinkCurrentDrawable.updateBounds();
            return true;
        }
        return false;
    }

    public boolean needDrawTime() {
        MessageObject messageObject;
        return !this.forceNotDrawTime && ((messageObject = this.currentMessageObject) == null || messageObject.type != 27);
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x0030, code lost:
        if (r4.currentMessageObject.isRoundVideo() == false) goto L24;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean shouldDrawTimeOnMedia() {
        int i = this.overideShouldDrawTimeOnMedia;
        if (i != 0) {
            return i == 1;
        }
        if (this.mediaBackground && (this.captionLayout == null || this.captionAbove)) {
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble.isEmpty) {
                if (!reactionsLayoutInBubble.isSmall) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (messageObject != null) {
                        if (!messageObject.isAnyKindOfSticker()) {
                        }
                    }
                }
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        return messageObject2 != null && messageObject2.type == 29;
    }

    /* JADX WARN: Removed duplicated region for block: B:59:0x010d  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0131  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawTime(Canvas canvas, float f, boolean z) {
        MessageObject messageObject;
        float f2;
        float f3;
        TransitionParams transitionParams;
        float f4;
        float f5;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this) || !shouldDrawTimeOnMedia()) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || messageObject2.type != 27) {
                int i = 0;
                while (true) {
                    if (i >= 2) {
                        break;
                    }
                    if (i != 0 || !isDrawSelectionBackground() || this.currentSelectedBackgroundAlpha != 1.0f || shouldDrawTimeOnMedia()) {
                        if (i == 1 && ((!isDrawSelectionBackground() && this.currentSelectedBackgroundAlpha == 0.0f) || shouldDrawTimeOnMedia())) {
                            break;
                        }
                        boolean z2 = i == 1;
                        if (i == 1) {
                            f3 = this.currentSelectedBackgroundAlpha;
                        } else if (!shouldDrawTimeOnMedia()) {
                            f3 = 1.0f - this.currentSelectedBackgroundAlpha;
                        } else {
                            f2 = f;
                            if (!this.transitionParams.animateShouldDrawTimeOnMedia && this.transitionParams.animateChangeProgress != 1.0f) {
                                if (shouldDrawTimeOnMedia()) {
                                    this.overideShouldDrawTimeOnMedia = 1;
                                    boolean z3 = z2;
                                    drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z3);
                                    this.overideShouldDrawTimeOnMedia = 2;
                                    TransitionParams transitionParams2 = this.transitionParams;
                                    drawTimeInternal(canvas, f2 * (1.0f - transitionParams2.animateChangeProgress), z, transitionParams2.animateFromTimeX, transitionParams2.animateTimeLayout, this.transitionParams.animateTimeWidth, z3);
                                } else {
                                    this.overideShouldDrawTimeOnMedia = 2;
                                    boolean z4 = z2;
                                    drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z4);
                                    this.overideShouldDrawTimeOnMedia = 1;
                                    TransitionParams transitionParams3 = this.transitionParams;
                                    drawTimeInternal(canvas, f2 * (1.0f - transitionParams3.animateChangeProgress), z, transitionParams3.animateFromTimeX, transitionParams3.animateTimeLayout, this.transitionParams.animateTimeWidth, z4);
                                }
                                this.overideShouldDrawTimeOnMedia = 0;
                            } else {
                                transitionParams = this.transitionParams;
                                if (!transitionParams.shouldAnimateTimeX) {
                                    float f6 = transitionParams.animateChangeProgress;
                                    f5 = (this.timeX * f6) + (transitionParams.animateFromTimeX * (1.0f - f6));
                                    f4 = (this.timeWidth * f6) + (transitionParams.animateTimeWidth * (1.0f - this.transitionParams.animateChangeProgress));
                                } else {
                                    float f7 = this.timeX + transitionParams.deltaRight;
                                    f4 = this.timeWidth;
                                    f5 = f7;
                                }
                                drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                            }
                        }
                        f2 = f3 * f;
                        if (!this.transitionParams.animateShouldDrawTimeOnMedia) {
                        }
                        transitionParams = this.transitionParams;
                        if (!transitionParams.shouldAnimateTimeX) {
                        }
                        drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                    }
                    i++;
                }
                if (this.transitionParams.animateBackgroundBoundsInner && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) {
                    drawOverlays(canvas);
                }
                if (this.effectDrawable != null) {
                    if (this.effectDrawableBounce == null) {
                        this.effectDrawableBounce = new ButtonBounce(this);
                    }
                    float scale = this.effectDrawableBounce.getScale(0.2f);
                    int timeX = (int) ((getTimeX() - AndroidUtilities.dp(this.effectId == 0 ? 0.0f : 18.0f)) + (this.timeWidth * (this.currentMessageObject.sendPreview ? 1.0f - this.timeAlpha : 0.0f)));
                    int timeY = (int) getTimeY();
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (messageObject3 != null && !messageObject3.notime && this.pinnedBottom && !shouldDrawTimeOnMedia()) {
                        timeY += AndroidUtilities.dp(2.0f);
                    }
                    if (shouldDrawTimeOnMedia() && this.currentMessageObject.sendPreview) {
                        timeX -= AndroidUtilities.dp(1.0f);
                    }
                    MessageObject messageObject4 = this.currentMessageObject;
                    if (messageObject4 != null && (messageObject4.type == 15 || messageObject4.isAnyKindOfSticker())) {
                        timeX -= AndroidUtilities.dp(6.0f);
                    }
                    int dp = AndroidUtilities.dp(14.0f) / 2;
                    int i2 = timeY + dp;
                    float f8 = timeX + dp;
                    float f9 = dp * scale;
                    float f10 = i2;
                    this.effectDrawable.setBounds((int) (f8 - f9), (int) (f10 - f9), (int) (f8 + f9), (int) (f10 + f9));
                    if (!this.currentMessageObject.sendPreview) {
                        this.effectDrawable.setAlpha((int) (this.timeAlpha * 255.0f));
                    }
                    this.effectDrawable.draw(canvas);
                }
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:212:0x0425  */
    /* JADX WARN: Removed duplicated region for block: B:218:0x043d  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x0458  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawTimeInternal(Canvas canvas, float f, boolean z, float f2, StaticLayout staticLayout, float f3, boolean z2) {
        int i;
        float f4;
        float f5;
        String str;
        char c;
        char c2;
        char c3;
        int i2;
        int i3;
        boolean z3;
        float f6;
        char c4;
        float dp;
        boolean z4;
        Paint themedPaint;
        float f7;
        int dp2;
        boolean z5;
        String str2;
        float photoBottom;
        int i4;
        int i5;
        String str3;
        int i6;
        float f8;
        MessageObject messageObject;
        float currentWidth;
        TextPaint textPaint;
        int i7;
        boolean z6 = z;
        if (((!this.drawTime || this.groupPhotoInvisible) && shouldDrawTimeOnMedia()) || staticLayout == null) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if ((!messageObject2.deleted || this.currentPosition == null) && (i = messageObject2.type) != 16) {
            if (i == 5) {
                TextPaint textPaint2 = Theme.chat_timePaint;
                int themedColor = getThemedColor(Theme.key_chat_serviceText);
                if (isDrawSelectionBackground()) {
                    i7 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText;
                } else {
                    i7 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText;
                }
                textPaint2.setColor(ColorUtils.blendARGB(themedColor, getThemedColor(i7), getVideoTranscriptionProgress()));
            } else if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    Theme.chat_timePaint.setColor(getThemedColor(Theme.key_chat_serviceText));
                } else {
                    Theme.chat_timePaint.setColor(getThemedColor(Theme.key_chat_mediaTimeText));
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_timePaint.setColor(getThemedColor(z2 ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor(z2 ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText));
            }
            float f9 = getTransitionParams().animateDrawingTimeAlpha ? getTransitionParams().animateChangeProgress * f : f;
            if (f9 != 1.0f) {
                Theme.chat_timePaint.setAlpha((int) (textPaint.getAlpha() * f9));
            }
            canvas.save();
            if (this.drawPinnedBottom && !shouldDrawTimeOnMedia()) {
                canvas.translate(0.0f, AndroidUtilities.dp(2.0f));
            }
            float f10 = this.layoutHeight;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner) {
                f10 += transitionParams.deltaBottom;
            }
            if (transitionParams.shouldAnimateTimeX) {
                float f11 = transitionParams.animateChangeProgress;
                f4 = (transitionParams.animateFromTimeX * (1.0f - f11)) + (this.timeX * f11);
            } else {
                f4 = f2;
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) {
                f5 = f2;
            } else {
                f10 -= getTranslationY();
                float f12 = this.currentMessagesGroup.transitionParams.offsetRight;
                f5 = f2 + f12;
                f4 += f12;
            }
            if (this.drawPinnedBottom && shouldDrawTimeOnMedia()) {
                f10 += AndroidUtilities.dp(1.0f);
            }
            float f13 = f10;
            if (this.transitionParams.animateBackgroundBoundsInner) {
                float f14 = this.animationOffsetX;
                f5 += f14;
                f4 += f14;
            }
            float f15 = f5;
            if (this.currentMessageObject.shouldDrawReactions()) {
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isSmall) {
                    TransitionParams transitionParams2 = this.transitionParams;
                    if (transitionParams2.animateBackgroundBoundsInner && transitionParams2.deltaRight != 0.0f) {
                        currentWidth = reactionsLayoutInBubble.getCurrentWidth(1.0f);
                    } else {
                        currentWidth = reactionsLayoutInBubble.getCurrentWidth(transitionParams2.animateChangeProgress);
                    }
                    f4 += currentWidth;
                }
            }
            if (this.transitionParams.animateEditedEnter) {
                f4 -= this.transitionParams.animateEditedWidthDiff * (1.0f - this.transitionParams.animateChangeProgress);
            }
            float f16 = f4;
            boolean z7 = true;
            if (shouldDrawTimeOnMedia()) {
                int i8 = -(this.drawCommentButton ? AndroidUtilities.dp(41.3f) : 0);
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    themedPaint = getThemedPaint("paintChatActionBackground");
                } else {
                    themedPaint = getThemedPaint("paintChatTimeBackground");
                }
                int alpha = themedPaint.getAlpha();
                Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f * f9));
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3 == null || messageObject3.type != 4) {
                    f7 = f9;
                } else {
                    float currentAlpha = this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                    if (!this.photoImage.hasNotThumb()) {
                        currentAlpha = 0.0f;
                    }
                    f7 = AndroidUtilities.lerp(0.35f, 1.0f, currentAlpha);
                }
                MessageObject messageObject4 = this.currentMessageObject;
                if (messageObject4 != null && messageObject4.sendPreview) {
                    AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.effectDrawable;
                    f7 *= swapAnimatedEmojiDrawable == null ? 0.0f : swapAnimatedEmojiDrawable.isNotEmpty();
                }
                themedPaint.setAlpha((int) (alpha * this.timeAlpha * f7 * 0.6f));
                int i9 = this.documentAttachType;
                if (i9 != 7 && i9 != 6 && this.currentMessageObject.type != 19) {
                    int[] roundRadius = this.photoImage.getRoundRadius();
                    dp2 = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[2], roundRadius[3]));
                    z5 = SharedConfig.bubbleRadius >= 10;
                } else {
                    int dp3 = AndroidUtilities.dp(4.0f);
                    MessageObject messageObject5 = this.currentMessageObject;
                    dp2 = dp3 + ((messageObject5 == null || !messageObject5.isAnyKindOfSticker()) ? 0 : AndroidUtilities.dp(8.0f));
                    z5 = false;
                }
                MessageObject messageObject6 = this.currentMessageObject;
                float dp4 = f15 + ((messageObject6 == null || !messageObject6.isAnyKindOfSticker()) ? 0 : AndroidUtilities.dp(-6.0f));
                if (this.effectId != 0) {
                    dp4 -= AndroidUtilities.dp(18.0f);
                }
                float dp5 = dp4 - AndroidUtilities.dp(z5 ? 6.0f : 4.0f);
                MessageObject messageObject7 = this.currentMessageObject;
                float dp6 = (messageObject7 == null || !messageObject7.isAnyKindOfSticker()) ? 0.0f : AndroidUtilities.dp(2.0f);
                if (this.documentAttachType != 7 || ((messageObject = this.currentMessageObject) != null && messageObject.isRoundOnce())) {
                    str2 = "paintChatTimeBackground";
                    photoBottom = getPhotoBottom() + this.additionalTimeOffsetY;
                } else {
                    str2 = "paintChatTimeBackground";
                    photoBottom = f13 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
                }
                float f17 = photoBottom;
                float dp7 = f17 - AndroidUtilities.dp(23.0f);
                float max = Math.max(AndroidUtilities.dp(17.0f), Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                RectF rectF = this.rect;
                float f18 = dp5 - dp6;
                float f19 = dp6 + dp5 + f3;
                if (z5) {
                    i4 = 12;
                    z3 = z5;
                } else {
                    z3 = z5;
                    i4 = 8;
                }
                if (this.currentMessageObject.isOutOwner()) {
                    i5 = (this.currentMessageObject.type == 19 ? 4 : 0) + 20;
                } else {
                    i5 = 0;
                }
                rectF.set(f18, dp7, f19 + AndroidUtilities.dp(i4 + i5), max + dp7);
                GroupMedia groupMedia = this.groupMedia;
                if (groupMedia != null) {
                    groupMedia.drawBlurRect(canvas, this.rect, dp2, this.timeAlpha * 0.5f * f7);
                } else if (!this.currentMessageObject.isQuickReply()) {
                    if (!this.currentMessageObject.hasMediaSpoilers()) {
                        str3 = str2;
                    } else if (this.currentMessageObject.type != 5) {
                        this.rectPath.rewind();
                        float f20 = dp2;
                        this.rectPath.addRoundRect(this.rect, f20, f20, Path.Direction.CW);
                        canvas.save();
                        canvas.clipPath(this.rectPath);
                        ImageReceiver imageReceiver = this.currentMessageObject.needDrawBluredPreview() ? this.photoImage : this.blurredPhotoImage;
                        float alpha2 = imageReceiver.getAlpha();
                        imageReceiver.setAlpha(0.5f * alpha2);
                        imageReceiver.draw(canvas);
                        imageReceiver.setAlpha(alpha2);
                        canvas.restore();
                        str3 = str2;
                        Paint themedPaint2 = getThemedPaint(str3);
                        int alpha3 = themedPaint2.getAlpha();
                        themedPaint2.setAlpha((int) (alpha3 * this.controlsAlpha * 0.4f));
                        canvas.drawRoundRect(this.rect, f20, f20, themedPaint2);
                        themedPaint2.setAlpha(alpha3);
                        themedPaint.setAlpha(alpha);
                        float f21 = -staticLayout.getLineLeft(0);
                        MessageObject messageObject8 = this.currentMessageObject;
                        float dp8 = f21 + ((messageObject8 == null && messageObject8.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                        if (this.currentMessageObject.shouldDrawReactions() && this.reactionsLayoutInBubble.isSmall) {
                            updateReactionLayoutPosition();
                            this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
                        }
                        if ((ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && (this.currentMessageObject.messageOwner.flags & 1024) == 0 && this.repliesLayout == null && !this.isPinned) {
                            z6 = z;
                            str = str3;
                            i6 = i8;
                            c = 4;
                            c2 = 6;
                            c3 = 7;
                        } else {
                            float lineWidth = dp8 + (this.timeWidth - staticLayout.getLineWidth(0));
                            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                            if (reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                                lineWidth -= reactionsLayoutInBubble2.width;
                            }
                            float f22 = lineWidth;
                            int createStatusDrawableParams = this.transitionParams.createStatusDrawableParams();
                            int i10 = this.transitionParams.lastStatusDrawableParams;
                            if (i10 < 0 || i10 == createStatusDrawableParams || this.statusDrawableAnimationInProgress) {
                                z6 = z;
                            } else {
                                z6 = z;
                                createStatusDrawableAnimator(i10, createStatusDrawableParams, z6);
                            }
                            boolean z8 = this.statusDrawableAnimationInProgress;
                            if (z8) {
                                createStatusDrawableParams = this.animateToStatusDrawableParams;
                            }
                            boolean z9 = (createStatusDrawableParams & 4) != 0;
                            boolean z10 = (createStatusDrawableParams & 8) != 0;
                            if (z8) {
                                int i11 = this.animateFromStatusDrawableParams;
                                boolean z11 = (i11 & 4) != 0;
                                boolean z12 = (i11 & 8) != 0;
                                float f23 = i8;
                                c = 4;
                                f8 = f22;
                                float f24 = f9;
                                str = str3;
                                i6 = i8;
                                c3 = 7;
                                float f25 = dp4;
                                c2 = 6;
                                drawClockOrErrorLayout(canvas, z11, z12, f13, f24, f23, f25, 1.0f - this.statusDrawableProgress, z2);
                                drawClockOrErrorLayout(canvas, z9, z10, f13, f24, f23, f25, this.statusDrawableProgress, z2);
                                if (!this.currentMessageObject.isOutOwner()) {
                                    if (!z11 && !z12) {
                                        drawViewsAndRepliesLayout(canvas, f13, f9, f23, dp4, 1.0f - this.statusDrawableProgress, z2);
                                    }
                                    if (!z9 && !z10) {
                                        drawViewsAndRepliesLayout(canvas, f13, f9, f23, dp4, this.statusDrawableProgress, z2);
                                    }
                                }
                            } else {
                                str = str3;
                                f8 = f22;
                                i6 = i8;
                                c = 4;
                                c2 = 6;
                                c3 = 7;
                                if (!this.currentMessageObject.isOutOwner() && !z9 && !z10) {
                                    drawViewsAndRepliesLayout(canvas, f13, f9, i6, dp4, 1.0f, z2);
                                }
                                drawClockOrErrorLayout(canvas, z9, z10, f13, f9, i6, dp4, 1.0f, z2);
                            }
                            if (this.currentMessageObject.isOutOwner()) {
                                drawViewsAndRepliesLayout(canvas, f13, f9, i6, dp4, 1.0f, z2);
                            }
                            TransitionParams transitionParams3 = this.transitionParams;
                            transitionParams3.lastStatusDrawableParams = transitionParams3.createStatusDrawableParams();
                            if (z9 && z6 && getParent() != null) {
                                ((View) getParent()).invalidate();
                            }
                            dp8 = f8;
                        }
                        canvas.save();
                        float f26 = f16 + dp8;
                        this.drawTimeX = f26;
                        float dp9 = (f17 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                        this.drawTimeY = dp9;
                        canvas.translate(f26, dp9);
                        SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                        canvas.restore();
                        Theme.chat_timePaint.setAlpha(NotificationCenter.voipServiceCreated);
                        i3 = i6;
                    } else {
                        str3 = str2;
                    }
                    applyServiceShaderMatrix();
                    float f27 = dp2;
                    canvas.drawRoundRect(this.rect, f27, f27, themedPaint);
                    if (themedPaint == getThemedPaint("paintChatActionBackground") && hasGradientService()) {
                        int alpha4 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha4 * this.timeAlpha * f7));
                        canvas.drawRoundRect(this.rect, f27, f27, Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha4);
                    }
                    themedPaint.setAlpha(alpha);
                    float f212 = -staticLayout.getLineLeft(0);
                    MessageObject messageObject82 = this.currentMessageObject;
                    float dp82 = f212 + ((messageObject82 == null && messageObject82.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                    if (this.currentMessageObject.shouldDrawReactions()) {
                        updateReactionLayoutPosition();
                        this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
                    }
                    if (ChatObject.isChannel(this.currentChat)) {
                    }
                    z6 = z;
                    str = str3;
                    i6 = i8;
                    c = 4;
                    c2 = 6;
                    c3 = 7;
                    canvas.save();
                    float f262 = f16 + dp82;
                    this.drawTimeX = f262;
                    float dp92 = (f17 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                    this.drawTimeY = dp92;
                    canvas.translate(f262, dp92);
                    SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                    canvas.restore();
                    Theme.chat_timePaint.setAlpha(NotificationCenter.voipServiceCreated);
                    i3 = i6;
                }
                str3 = str2;
                themedPaint.setAlpha(alpha);
                float f2122 = -staticLayout.getLineLeft(0);
                MessageObject messageObject822 = this.currentMessageObject;
                float dp822 = f2122 + ((messageObject822 == null && messageObject822.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                if (this.currentMessageObject.shouldDrawReactions()) {
                }
                if (ChatObject.isChannel(this.currentChat)) {
                }
                z6 = z;
                str = str3;
                i6 = i8;
                c = 4;
                c2 = 6;
                c3 = 7;
                canvas.save();
                float f2622 = f16 + dp822;
                this.drawTimeX = f2622;
                float dp922 = (f17 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                this.drawTimeY = dp922;
                canvas.translate(f2622, dp922);
                SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                canvas.restore();
                Theme.chat_timePaint.setAlpha(NotificationCenter.voipServiceCreated);
                i3 = i6;
            } else {
                str = "paintChatTimeBackground";
                c = 4;
                c2 = 6;
                c3 = 7;
                if (this.currentMessageObject.isSponsored()) {
                    i2 = -AndroidUtilities.dp(48.0f);
                    if (this.hasNewLineForTime) {
                        i2 -= AndroidUtilities.dp(4.0f);
                    }
                } else {
                    i2 = -(this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0);
                }
                int i12 = i2;
                float f28 = -staticLayout.getLineLeft(0);
                if (this.currentMessageObject.shouldDrawReactions() && this.reactionsLayoutInBubble.isSmall) {
                    updateReactionLayoutPosition();
                    this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
                }
                if ((ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) || (this.currentMessageObject.messageOwner.flags & 1024) != 0 || this.repliesLayout != null || this.transitionParams.animateReplies || this.isPinned || this.transitionParams.animatePinned) {
                    float lineWidth2 = f28 + (f3 - staticLayout.getLineWidth(0));
                    ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble3.isSmall && !reactionsLayoutInBubble3.isEmpty) {
                        lineWidth2 -= reactionsLayoutInBubble3.width;
                    }
                    float f29 = lineWidth2;
                    int createStatusDrawableParams2 = this.transitionParams.createStatusDrawableParams();
                    int i13 = this.transitionParams.lastStatusDrawableParams;
                    if (i13 >= 0 && i13 != createStatusDrawableParams2 && !this.statusDrawableAnimationInProgress) {
                        createStatusDrawableAnimator(i13, createStatusDrawableParams2, z6);
                    }
                    boolean z13 = this.statusDrawableAnimationInProgress;
                    if (z13) {
                        createStatusDrawableParams2 = this.animateToStatusDrawableParams;
                    }
                    boolean z14 = (createStatusDrawableParams2 & 4) != 0;
                    boolean z15 = (createStatusDrawableParams2 & 8) != 0;
                    if (z13) {
                        int i14 = this.animateFromStatusDrawableParams;
                        boolean z16 = (i14 & 4) != 0;
                        boolean z17 = (i14 & 8) != 0;
                        float f30 = i12;
                        float f31 = f9;
                        drawClockOrErrorLayout(canvas, z16, z17, f13, f31, f30, f15, 1.0f - this.statusDrawableProgress, z2);
                        drawClockOrErrorLayout(canvas, z14, z15, f13, f31, f30, f15, this.statusDrawableProgress, z2);
                        if (!this.currentMessageObject.isOutOwner()) {
                            if (!z16 && !z17) {
                                drawViewsAndRepliesLayout(canvas, f13, f9, f30, f15, 1.0f - this.statusDrawableProgress, z2);
                            }
                            if (!z14 && !z15) {
                                drawViewsAndRepliesLayout(canvas, f13, f9, f30, f15, this.statusDrawableProgress, z2);
                            }
                        }
                    } else {
                        if (!this.currentMessageObject.isOutOwner() && !z14 && !z15) {
                            drawViewsAndRepliesLayout(canvas, f13, f9, i12, f15, 1.0f, z2);
                        }
                        drawClockOrErrorLayout(canvas, z14, z15, f13, f9, i12, f15, 1.0f, z2);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        drawViewsAndRepliesLayout(canvas, f13, f9, i12, f15, 1.0f, z2);
                    }
                    TransitionParams transitionParams4 = this.transitionParams;
                    transitionParams4.lastStatusDrawableParams = transitionParams4.createStatusDrawableParams();
                    if (z14 && z6 && getParent() != null) {
                        ((View) getParent()).invalidate();
                    }
                    f28 = f29;
                }
                canvas.save();
                float f32 = 7.5f;
                if (this.transitionParams.animateEditedEnter) {
                    TransitionParams transitionParams5 = this.transitionParams;
                    if (transitionParams5.animateChangeProgress != 1.0f) {
                        if (transitionParams5.animateEditedLayout != null) {
                            float f33 = f16 + f28;
                            if (!this.pinnedBottom && !this.pinnedTop) {
                                f32 = 6.5f;
                            }
                            canvas.translate(f33, ((f13 - AndroidUtilities.dp(f32)) - staticLayout.getHeight()) + i12);
                            int alpha5 = Theme.chat_timePaint.getAlpha();
                            Theme.chat_timePaint.setAlpha((int) (alpha5 * this.transitionParams.animateChangeProgress));
                            this.transitionParams.animateEditedLayout.draw(canvas);
                            Theme.chat_timePaint.setAlpha(alpha5);
                            SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateTimeLayout, canvas);
                        } else {
                            int alpha6 = Theme.chat_timePaint.getAlpha();
                            canvas.save();
                            float f34 = i12;
                            canvas.translate(this.transitionParams.animateFromTimeX + f28, ((f13 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - staticLayout.getHeight()) + f34);
                            float f35 = alpha6;
                            Theme.chat_timePaint.setAlpha((int) ((1.0f - this.transitionParams.animateChangeProgress) * f35));
                            SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateTimeLayout, canvas);
                            canvas.restore();
                            float f36 = f16 + f28;
                            if (!this.pinnedBottom && !this.pinnedTop) {
                                f32 = 6.5f;
                            }
                            canvas.translate(f36, ((f13 - AndroidUtilities.dp(f32)) - staticLayout.getHeight()) + f34);
                            Theme.chat_timePaint.setAlpha((int) (f35 * this.transitionParams.animateChangeProgress));
                            SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                            Theme.chat_timePaint.setAlpha(alpha6);
                        }
                        canvas.restore();
                        i3 = i12;
                        z3 = false;
                    }
                }
                float f37 = f16 + f28;
                this.drawTimeX = f37;
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f32 = 6.5f;
                }
                float dp10 = ((f13 - AndroidUtilities.dp(f32)) - staticLayout.getHeight()) + i12;
                this.drawTimeY = dp10;
                canvas.translate(f37, dp10);
                SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                canvas.restore();
                i3 = i12;
                z3 = false;
            }
            if (this.currentMessageObject.isOutOwner()) {
                int createStatusDrawableParams3 = this.transitionParams.createStatusDrawableParams();
                int i15 = this.transitionParams.lastStatusDrawableParams;
                if (i15 >= 0 && i15 != createStatusDrawableParams3 && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i15, createStatusDrawableParams3, z6);
                }
                if (this.statusDrawableAnimationInProgress) {
                    createStatusDrawableParams3 = this.animateToStatusDrawableParams;
                }
                boolean z18 = (createStatusDrawableParams3 & 1) != 0;
                boolean z19 = (createStatusDrawableParams3 & 2) != 0;
                boolean z20 = (createStatusDrawableParams3 & 4) != 0;
                boolean z21 = (createStatusDrawableParams3 & 8) != 0;
                if (this.transitionYOffsetForDrawables != 0.0f) {
                    canvas.save();
                    canvas.translate(0.0f, this.transitionYOffsetForDrawables);
                    z4 = true;
                } else {
                    z4 = false;
                }
                if (this.statusDrawableAnimationInProgress) {
                    int i16 = this.animateFromStatusDrawableParams;
                    boolean z22 = (i16 & 1) != 0;
                    boolean z23 = (i16 & 2) != 0;
                    boolean z24 = (i16 & 4) != 0;
                    boolean z25 = (i16 & 8) != 0;
                    if (!z24 && z23 && z19 && !z22 && z18) {
                        f6 = 0.0f;
                        c4 = 5;
                        drawStatusDrawable(canvas, z18, z19, z20, z21, f9, z3, i3, f13, this.statusDrawableProgress, true, z2);
                    } else {
                        f6 = 0.0f;
                        c4 = 5;
                        float f38 = i3;
                        boolean z26 = z22;
                        boolean z27 = z23;
                        boolean z28 = z24;
                        boolean z29 = z25;
                        float f39 = f9;
                        boolean z30 = z3;
                        drawStatusDrawable(canvas, z26, z27, z28, z29, f39, z30, f38, f13, 1.0f - this.statusDrawableProgress, false, z2);
                        drawStatusDrawable(canvas, z18, z19, z20, z21, f39, z30, f38, f13, this.statusDrawableProgress, false, z2);
                    }
                } else {
                    f6 = 0.0f;
                    c4 = 5;
                    drawStatusDrawable(canvas, z18, z19, z20, z21, f9, z3, i3, f13, 1.0f, false, z2);
                }
                if (z4) {
                    canvas.restore();
                }
                TransitionParams transitionParams6 = this.transitionParams;
                transitionParams6.lastStatusDrawableParams = transitionParams6.createStatusDrawableParams();
                if (z6 && z20 && getParent() != null) {
                    ((View) getParent()).invalidate();
                }
            } else {
                f6 = 0.0f;
                c4 = 5;
            }
            canvas.restore();
            if (this.unlockLayout != null) {
                if (this.unlockX == f6 || this.unlockY == f6) {
                    calculateUnlockXY();
                }
                this.unlockSpoilerPath.rewind();
                RectF rectF2 = AndroidUtilities.rectTmp;
                rectF2.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                int[] roundRadius2 = this.photoImage.getRoundRadius();
                float[] fArr = this.unlockSpoilerRadii;
                float f40 = roundRadius2[0];
                fArr[1] = f40;
                fArr[0] = f40;
                float f41 = roundRadius2[1];
                fArr[3] = f41;
                fArr[2] = f41;
                float f42 = roundRadius2[2];
                fArr[c4] = f42;
                fArr[c] = f42;
                float f43 = roundRadius2[3];
                fArr[c3] = f43;
                fArr[c2] = f43;
                Path path = this.unlockSpoilerPath;
                Path.Direction direction = Path.Direction.CW;
                path.addRoundRect(rectF2, fArr, direction);
                canvas.save();
                canvas.clipPath(this.unlockSpoilerPath);
                this.unlockSpoilerPath.rewind();
                rectF2.set(this.unlockX - AndroidUtilities.dp(12.0f), this.unlockY - AndroidUtilities.dp(8.0f), this.unlockX + Theme.chat_msgUnlockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(14.0f) + this.unlockLayout.getWidth() + AndroidUtilities.dp(12.0f), this.unlockY + this.unlockLayout.getHeight() + AndroidUtilities.dp(8.0f));
                this.unlockSpoilerPath.addRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), direction);
                canvas.clipPath(this.unlockSpoilerPath, Region.Op.DIFFERENCE);
                if (this.mediaSpoilerEffect2 == null) {
                    this.unlockSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                    this.unlockSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
                    this.unlockSpoilerEffect.draw(canvas);
                }
                invalidate();
                canvas.restore();
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), (int) (this.unlockAlpha * 255.0f), 31);
                int alpha7 = Theme.chat_timeBackgroundPaint.getAlpha();
                Theme.chat_timeBackgroundPaint.setAlpha((int) (alpha7 * 0.7f));
                canvas.drawRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), Theme.chat_timeBackgroundPaint);
                Theme.chat_timeBackgroundPaint.setAlpha(alpha7);
                canvas.translate(this.unlockX + AndroidUtilities.dp(4.0f), this.unlockY);
                Drawable drawable = Theme.chat_msgUnlockDrawable;
                drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), Theme.chat_msgUnlockDrawable.getIntrinsicHeight());
                Theme.chat_msgUnlockDrawable.draw(canvas);
                canvas.translate(AndroidUtilities.dp(6.0f) + Theme.chat_msgUnlockDrawable.getIntrinsicWidth(), f6);
                SpoilerEffect.layoutDrawMaybe(this.unlockLayout, canvas);
                canvas.restore();
                if (this.videoInfoLayout != null && this.photoImage.getVisible() && this.imageBackgroundSideColor == 0) {
                    int i17 = SharedConfig.bubbleRadius;
                    if (i17 > 2) {
                        dp = AndroidUtilities.dp(i17 - 2);
                        if (SharedConfig.bubbleRadius < 10) {
                            z7 = false;
                        }
                    } else {
                        dp = AndroidUtilities.dp(i17);
                        z7 = z3;
                    }
                    int imageX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(9.0f));
                    int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                    this.rect.set(imageX - AndroidUtilities.dp(4.0f), imageY - AndroidUtilities.dp(1.5f), this.durationWidth + imageX + AndroidUtilities.dp(4.0f) + AndroidUtilities.dp(z7 ? 2.0f : 0.0f), this.videoInfoLayout.getHeight() + imageY + AndroidUtilities.dp(1.5f));
                    canvas.drawRoundRect(this.rect, dp, dp, getThemedPaint(str));
                    canvas.save();
                    canvas.translate(imageX + (z7 ? 2 : 0), imageY);
                    SpoilerEffect.layoutDrawMaybe(this.videoInfoLayout, canvas);
                    canvas.restore();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createStatusDrawableAnimator(int i, int i2, final boolean z) {
        boolean z2 = false;
        boolean z3 = (i2 & 1) != 0;
        boolean z4 = (i2 & 2) != 0;
        boolean z5 = (i & 1) != 0;
        boolean z6 = (i & 2) != 0;
        if ((i & 4) == 0 && z6 && z4 && !z5 && z3) {
            z2 = true;
        }
        if (!this.transitionParams.messageEntering || z2) {
            this.statusDrawableProgress = 0.0f;
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.statusDrawableAnimator = ofFloat;
            if (z2) {
                ofFloat.setDuration(220L);
            } else {
                ofFloat.setDuration(150L);
            }
            this.statusDrawableAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.animateFromStatusDrawableParams = i;
            this.animateToStatusDrawableParams = i2;
            this.statusDrawableAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda3
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatMessageCell.this.lambda$createStatusDrawableAnimator$12(z, valueAnimator);
                }
            });
            this.statusDrawableAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.11
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    int createStatusDrawableParams = ChatMessageCell.this.transitionParams.createStatusDrawableParams();
                    if (ChatMessageCell.this.animateToStatusDrawableParams == createStatusDrawableParams) {
                        ChatMessageCell.this.statusDrawableAnimationInProgress = false;
                        ChatMessageCell chatMessageCell = ChatMessageCell.this;
                        chatMessageCell.transitionParams.lastStatusDrawableParams = chatMessageCell.animateToStatusDrawableParams;
                        return;
                    }
                    ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                    chatMessageCell2.createStatusDrawableAnimator(chatMessageCell2.animateToStatusDrawableParams, createStatusDrawableParams, z);
                }
            });
            this.statusDrawableAnimationInProgress = true;
            this.statusDrawableAnimator.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createStatusDrawableAnimator$12(boolean z, ValueAnimator valueAnimator) {
        this.statusDrawableProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
        if (!z || getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    /* JADX WARN: Removed duplicated region for block: B:38:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x019d  */
    /* JADX WARN: Removed duplicated region for block: B:73:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:77:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawClockOrErrorLayout(Canvas canvas, boolean z, boolean z2, float f, float f2, float f3, float f4, float f5, boolean z3) {
        float dp;
        float currentTotalHeight;
        int themedColor;
        float dp2;
        float dp3;
        boolean z4 = f5 != 1.0f;
        float f6 = (f5 * 0.5f) + 0.5f;
        float f7 = f2 * f5;
        if (z) {
            if (this.currentMessageObject.isOutOwner()) {
                return;
            }
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            if (shouldDrawTimeOnMedia()) {
                themedColor = getThemedColor(Theme.key_chat_mediaSentClock);
            } else {
                themedColor = getThemedColor(z3 ? Theme.key_chat_outSentClockSelected : Theme.key_chat_mediaSentClock);
            }
            msgClockDrawable.setColor(themedColor);
            if (shouldDrawTimeOnMedia()) {
                dp2 = getPhotoBottom() + this.additionalTimeOffsetY;
                dp3 = AndroidUtilities.dp(9.0f);
            } else {
                dp2 = (f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.5f : 8.5f)) + f3;
                if (this.isRoundVideo) {
                    dp3 = (AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress());
                }
                BaseCell.setDrawableBounds(msgClockDrawable, f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f)), dp2 - msgClockDrawable.getIntrinsicHeight());
                msgClockDrawable.setAlpha((int) (f7 * 255.0f));
                if (z4) {
                    canvas.save();
                    canvas.scale(f6, f6, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
                }
                msgClockDrawable.draw(canvas);
                msgClockDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                invalidate();
                if (z4) {
                    return;
                }
                canvas.restore();
                return;
            }
            dp2 -= dp3;
            BaseCell.setDrawableBounds(msgClockDrawable, f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f)), dp2 - msgClockDrawable.getIntrinsicHeight());
            msgClockDrawable.setAlpha((int) (f7 * 255.0f));
            if (z4) {
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(NotificationCenter.voipServiceCreated);
            invalidate();
            if (z4) {
            }
        } else if (!z2 || this.currentMessageObject.isOutOwner()) {
        } else {
            float dp4 = f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f));
            float f8 = 21.5f;
            if (shouldDrawTimeOnMedia()) {
                dp = getPhotoBottom() + this.additionalTimeOffsetY;
                currentTotalHeight = AndroidUtilities.dp(21.5f);
            } else {
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f8 = 20.5f;
                }
                dp = (f - AndroidUtilities.dp(f8)) + f3;
                if (this.isRoundVideo) {
                    currentTotalHeight = this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                }
                this.rect.set(dp4, dp, AndroidUtilities.dp(14.0f) + dp4, AndroidUtilities.dp(14.0f) + dp);
                int alpha = Theme.chat_msgErrorPaint.getAlpha();
                int i = (int) (f7 * 255.0f);
                Theme.chat_msgErrorPaint.setAlpha(i);
                if (z4) {
                    canvas.save();
                    canvas.scale(f6, f6, this.rect.centerX(), this.rect.centerY());
                }
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
                Theme.chat_msgErrorPaint.setAlpha(alpha);
                Drawable themedDrawable = getThemedDrawable("drawableMsgError");
                BaseCell.setDrawableBounds(themedDrawable, dp4 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
                themedDrawable.setAlpha(i);
                themedDrawable.draw(canvas);
                themedDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                if (z4) {
                    return;
                }
                canvas.restore();
                return;
            }
            dp -= currentTotalHeight;
            this.rect.set(dp4, dp, AndroidUtilities.dp(14.0f) + dp4, AndroidUtilities.dp(14.0f) + dp);
            int alpha2 = Theme.chat_msgErrorPaint.getAlpha();
            int i2 = (int) (f7 * 255.0f);
            Theme.chat_msgErrorPaint.setAlpha(i2);
            if (z4) {
            }
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha2);
            Drawable themedDrawable2 = getThemedDrawable("drawableMsgError");
            BaseCell.setDrawableBounds(themedDrawable2, dp4 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
            themedDrawable2.setAlpha(i2);
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(NotificationCenter.voipServiceCreated);
            if (z4) {
            }
        }
    }

    public float getTimeX() {
        TransitionParams transitionParams = this.transitionParams;
        return transitionParams.shouldAnimateTimeX ? AndroidUtilities.lerp(transitionParams.animateFromTimeX, this.timeX, transitionParams.animateChangeProgress) : this.timeX;
    }

    public float getTimeY() {
        int i;
        int i2 = 0;
        if (shouldDrawTimeOnMedia()) {
            if (this.drawCommentButton) {
                i2 = AndroidUtilities.dp(41.3f);
            }
        } else if (this.currentMessageObject.isSponsored()) {
            i = -AndroidUtilities.dp(48.0f);
            if (this.hasNewLineForTime) {
                i -= AndroidUtilities.dp(4.0f);
            }
            return getTimeY(i);
        } else if (this.drawCommentButton) {
            i2 = AndroidUtilities.dp(43.0f);
        }
        i = -i2;
        return getTimeY(i);
    }

    public float getTimeY(float f) {
        if (shouldDrawTimeOnMedia() && this.documentAttachType != 7) {
            return ((getPhotoBottom() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
        }
        float dp = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + f;
        if (this.isRoundVideo) {
            dp -= (AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress());
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null) {
            MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
            float f2 = dp + transitionParams.offsetBottom;
            return transitionParams.backgroundChangeBounds ? f2 - getTranslationY() : f2;
        }
        TransitionParams transitionParams2 = this.transitionParams;
        return dp + (transitionParams2.deltaBottom - transitionParams2.deltaTop);
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x01cf  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x01de  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01e9  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x012c  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0156  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x019d  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x01b3  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x01b7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawViewsAndRepliesLayout(Canvas canvas, float f, float f2, float f3, float f4, float f5, boolean z) {
        Drawable themedDrawable;
        float f6;
        float f7;
        float f8;
        float f9;
        StaticLayout staticLayout;
        float f10;
        Drawable themedDrawable2;
        float drawableBounds;
        Drawable themedDrawable3;
        boolean z2 = f5 != 1.0f;
        float f11 = (f5 * 0.5f) + 0.5f;
        float f12 = f2 * f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float currentWidth = reactionsLayoutInBubble.isSmall ? reactionsLayoutInBubble.getCurrentWidth(1.0f) : 0.0f;
        int alpha = Theme.chat_timePaint.getAlpha();
        float timeY = getTimeY(f3);
        if (this.repliesLayout != null || this.transitionParams.animateReplies) {
            TransitionParams transitionParams = this.transitionParams;
            float f13 = (transitionParams.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z3 = transitionParams.animateReplies && this.transitionParams.animateRepliesLayout == null && this.repliesLayout != null;
            boolean z4 = this.transitionParams.animateReplies && this.transitionParams.animateRepliesLayout != null && this.repliesLayout == null;
            boolean z5 = (!this.transitionParams.animateReplies || this.transitionParams.animateRepliesLayout == null || this.repliesLayout == null) ? false : true;
            if (!this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                TransitionParams transitionParams2 = this.transitionParams;
                if (!transitionParams2.shouldAnimateTimeX || z3) {
                    f13 += transitionParams2.deltaRight;
                } else if (z4) {
                    f13 = transitionParams2.animateFromTimeXReplies;
                } else {
                    float f14 = transitionParams2.animateFromTimeXReplies;
                    float f15 = this.transitionParams.animateChangeProgress;
                    f13 = (f13 * f15) + (f14 * (1.0f - f15));
                }
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages.transitionParams;
                if (transitionParams3.backgroundChangeBounds) {
                    f13 += transitionParams3.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f13 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    themedDrawable = getThemedDrawable("drawableMsgStickerReplies");
                } else {
                    themedDrawable = Theme.chat_msgMediaRepliesDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                themedDrawable = z ? Theme.chat_msgInRepliesSelectedDrawable : Theme.chat_msgInRepliesDrawable;
            } else {
                themedDrawable = getThemedDrawable("drawableMsgOutReplies");
            }
            float drawableBounds2 = BaseCell.setDrawableBounds(themedDrawable, f13, timeY, Theme.chat_timePaint.getTextSize());
            if (z3) {
                f7 = this.transitionParams.animateChangeProgress;
            } else if (z4) {
                f7 = 1.0f - this.transitionParams.animateChangeProgress;
            } else {
                f6 = f12;
                themedDrawable.setAlpha((int) (f6 * 255.0f));
                if (z2) {
                    canvas.save();
                    canvas.scale(f11, f11, (((AndroidUtilities.dp(3.0f) + drawableBounds2) + this.repliesTextWidth) / 2.0f) + f13, themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                themedDrawable.setAlpha(NotificationCenter.voipServiceCreated);
                if (this.transitionParams.animateReplies) {
                    f8 = f12;
                    f9 = f11;
                } else {
                    if (z5) {
                        canvas.save();
                        TextPaint textPaint = Theme.chat_timePaint;
                        double d = alpha;
                        f8 = f12;
                        f9 = f11;
                        double d2 = this.transitionParams.animateChangeProgress;
                        Double.isNaN(d2);
                        Double.isNaN(d);
                        textPaint.setAlpha((int) (d * (1.0d - d2)));
                        canvas.translate(f13 + drawableBounds2 + AndroidUtilities.dp(3.0f), timeY);
                        this.transitionParams.animateRepliesLayout.draw(canvas);
                        canvas.restore();
                    } else {
                        f8 = f12;
                        f9 = f11;
                    }
                    Theme.chat_timePaint.setAlpha((int) (alpha * f6));
                }
                canvas.save();
                canvas.translate(f13 + drawableBounds2 + AndroidUtilities.dp(3.0f), timeY);
                staticLayout = this.repliesLayout;
                if (staticLayout == null) {
                    staticLayout.draw(canvas);
                } else if (this.transitionParams.animateRepliesLayout != null) {
                    this.transitionParams.animateRepliesLayout.draw(canvas);
                }
                canvas.restore();
                if (this.repliesLayout != null) {
                    currentWidth += drawableBounds2 + this.repliesTextWidth + AndroidUtilities.dp(10.0f);
                }
                if (z2) {
                    canvas.restore();
                }
                if (this.transitionParams.animateReplies) {
                    Theme.chat_timePaint.setAlpha(alpha);
                }
                this.transitionParams.lastTimeXReplies = f13;
            }
            f6 = f7 * f12;
            themedDrawable.setAlpha((int) (f6 * 255.0f));
            if (z2) {
            }
            themedDrawable.draw(canvas);
            themedDrawable.setAlpha(NotificationCenter.voipServiceCreated);
            if (this.transitionParams.animateReplies) {
            }
            canvas.save();
            canvas.translate(f13 + drawableBounds2 + AndroidUtilities.dp(3.0f), timeY);
            staticLayout = this.repliesLayout;
            if (staticLayout == null) {
            }
            canvas.restore();
            if (this.repliesLayout != null) {
            }
            if (z2) {
            }
            if (this.transitionParams.animateReplies) {
            }
            this.transitionParams.lastTimeXReplies = f13;
        } else {
            f8 = f12;
            f9 = f11;
        }
        if (this.viewsLayout != null) {
            TransitionParams transitionParams4 = this.transitionParams;
            boolean z6 = transitionParams4.shouldAnimateTimeX;
            float f16 = (z6 ? this.timeX : f4) + currentWidth;
            if (!this.isRoundVideo || !transitionParams4.animateDrawBackground) {
                if (!z6) {
                    f16 += transitionParams4.deltaRight;
                } else {
                    float f17 = transitionParams4.animateFromTimeXViews;
                    float f18 = this.transitionParams.animateChangeProgress;
                    f16 = (f16 * f18) + (f17 * (1.0f - f18));
                }
            }
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages2.transitionParams;
                if (transitionParams5.backgroundChangeBounds) {
                    f16 += transitionParams5.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f16 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    themedDrawable3 = getThemedDrawable("drawableMsgStickerViews");
                } else {
                    themedDrawable3 = Theme.chat_msgMediaViewsDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                themedDrawable3 = z ? Theme.chat_msgInViewsSelectedDrawable : Theme.chat_msgInViewsDrawable;
            } else {
                themedDrawable3 = getThemedDrawable(z ? "drawableMsgOutViewsSelected" : "drawableMsgOutViews");
            }
            float drawableBounds3 = BaseCell.setDrawableBounds(themedDrawable3, f16, AndroidUtilities.dp(1.5f) + timeY, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
            if (z2) {
                canvas.save();
                f10 = f9;
                canvas.scale(f10, f10, (((themedDrawable3.getIntrinsicWidth() + AndroidUtilities.dp(3.0f)) + this.viewsTextWidth) / 2.0f) + f16, themedDrawable3.getBounds().centerY());
            } else {
                f10 = f9;
            }
            themedDrawable3.setAlpha((int) (f8 * 255.0f));
            themedDrawable3.draw(canvas);
            themedDrawable3.setAlpha(NotificationCenter.voipServiceCreated);
            if (this.transitionParams.animateViewsLayout != null) {
                canvas.save();
                TextPaint textPaint2 = Theme.chat_timePaint;
                double d3 = alpha;
                double d4 = this.transitionParams.animateChangeProgress;
                Double.isNaN(d4);
                Double.isNaN(d3);
                textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                canvas.translate(f16 + drawableBounds3 + AndroidUtilities.dp(3.0f), timeY);
                SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateViewsLayout, canvas);
                canvas.restore();
                Theme.chat_timePaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
            }
            canvas.save();
            canvas.translate(f16 + drawableBounds3 + AndroidUtilities.dp(3.0f), timeY);
            SpoilerEffect.layoutDrawMaybe(this.viewsLayout, canvas);
            canvas.restore();
            if (z2) {
                canvas.restore();
            }
            currentWidth += this.viewsTextWidth + drawableBounds3 + AndroidUtilities.dp(10.0f);
            if (this.transitionParams.animateViewsLayout != null) {
                Theme.chat_timePaint.setAlpha(alpha);
            }
            this.transitionParams.lastTimeXViews = f16;
        } else {
            f10 = f9;
        }
        if (this.isPinned || this.transitionParams.animatePinned) {
            TransitionParams transitionParams6 = this.transitionParams;
            float f19 = (transitionParams6.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z7 = transitionParams6.animatePinned && this.isPinned;
            boolean z8 = this.transitionParams.animatePinned && !this.isPinned;
            if (!this.isRoundVideo) {
                TransitionParams transitionParams7 = this.transitionParams;
                if (!transitionParams7.shouldAnimateTimeX || z7) {
                    f19 += transitionParams7.deltaRight;
                } else if (z8) {
                    f19 = transitionParams7.animateFromTimeXPinned;
                } else {
                    float f20 = transitionParams7.animateFromTimeXPinned;
                    float f21 = transitionParams7.animateChangeProgress;
                    f19 = (f19 * f21) + (f20 * (1.0f - f21));
                }
            }
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams8 = groupedMessages3.transitionParams;
                if (transitionParams8.backgroundChangeBounds) {
                    f19 += transitionParams8.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f19 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    themedDrawable2 = getThemedDrawable("drawableMsgStickerPinned");
                } else {
                    themedDrawable2 = Theme.chat_msgMediaPinnedDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                themedDrawable2 = z ? Theme.chat_msgInPinnedSelectedDrawable : Theme.chat_msgInPinnedDrawable;
            } else {
                themedDrawable2 = getThemedDrawable(z ? "drawableMsgOutPinnedSelected" : "drawableMsgOutPinned");
            }
            if (this.transitionParams.animatePinned) {
                if (this.isPinned) {
                    themedDrawable2.setAlpha((int) (f8 * 255.0f * this.transitionParams.animateChangeProgress));
                    drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, timeY, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
                } else {
                    themedDrawable2.setAlpha((int) (f8 * 255.0f * (1.0f - this.transitionParams.animateChangeProgress)));
                    drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, timeY, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
                }
            } else {
                themedDrawable2.setAlpha((int) (f8 * 255.0f));
                drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, timeY, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
            }
            if (z2) {
                canvas.save();
                canvas.scale(f10, f10, (drawableBounds / 2.0f) + f19, themedDrawable2.getBounds().centerY());
            }
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(NotificationCenter.voipServiceCreated);
            if (z2) {
                canvas.restore();
            }
            this.transitionParams.lastTimeXPinned = f19;
        }
    }

    private void drawStatusDrawable(Canvas canvas, boolean z, boolean z2, boolean z3, boolean z4, float f, boolean z5, float f2, float f3, float f4, boolean z6, boolean z7) {
        float photoBottom;
        int dp;
        int dp2;
        Drawable themedDrawable;
        Drawable drawable;
        int i;
        MessageObject messageObject;
        boolean z8 = (f4 == 1.0f || z6) ? false : true;
        float f5 = (f4 * 0.5f) + 0.5f;
        float f6 = z8 ? f * f4 : f;
        if (this.documentAttachType != 7 || ((messageObject = this.currentMessageObject) != null && messageObject.isRoundOnce())) {
            photoBottom = getPhotoBottom() + this.additionalTimeOffsetY;
        } else {
            photoBottom = f3 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
        }
        float dp3 = photoBottom - AndroidUtilities.dp(8.5f);
        MessageObject messageObject2 = this.currentMessageObject;
        float dp4 = (messageObject2 == null || !messageObject2.isAnyKindOfSticker()) ? 0.0f : AndroidUtilities.dp(-6.0f);
        if (z3) {
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i = getThemedColor(Theme.key_chat_serviceText);
                    BaseCell.setDrawableBounds(msgClockDrawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 24.0f : 22.0f)) - msgClockDrawable.getIntrinsicWidth()) + dp4, (dp3 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    i = getThemedColor(Theme.key_chat_mediaSentClock);
                    BaseCell.setDrawableBounds(msgClockDrawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 24.0f : 22.0f)) - msgClockDrawable.getIntrinsicWidth()) + dp4, (dp3 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                }
            } else {
                int themedColor = getThemedColor(Theme.key_chat_outSentClock);
                BaseCell.setDrawableBounds(msgClockDrawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - msgClockDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp(8.5f)) - msgClockDrawable.getIntrinsicHeight()) + f2);
                msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                i = themedColor;
            }
            msgClockDrawable.setColor(i);
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(NotificationCenter.voipServiceCreated);
            if (z8) {
                canvas.restore();
            }
            invalidate();
        }
        if (z2) {
            if (shouldDrawTimeOnMedia()) {
                if (z6) {
                    canvas.save();
                }
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable = getThemedDrawable("drawableMsgStickerCheck");
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        BaseCell.setDrawableBounds(drawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 28.3f : 26.3f)) - drawable.getIntrinsicWidth()) + dp4, (dp3 - drawable.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(drawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - drawable.getIntrinsicWidth()) + dp4, (dp3 - drawable.getIntrinsicHeight()) + f2);
                    }
                    drawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        BaseCell.setDrawableBounds(Theme.chat_msgMediaCheckDrawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 28.3f : 26.3f)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (dp3 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(Theme.chat_msgMediaCheckDrawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (dp3 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    }
                    Theme.chat_msgMediaCheckDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                    drawable = Theme.chat_msgMediaCheckDrawable;
                }
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, drawable.getBounds().centerX(), drawable.getBounds().centerY());
                }
                drawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                drawable.setAlpha(NotificationCenter.voipServiceCreated);
            } else {
                if (z6) {
                    canvas.save();
                }
                if (z) {
                    if (z6) {
                        canvas.translate(AndroidUtilities.dp(4.0f) * (1.0f - f4), 0.0f);
                    }
                    themedDrawable = getThemedDrawable(z7 ? "drawableMsgOutCheckReadSelected" : "drawableMsgOutCheckRead");
                    BaseCell.setDrawableBounds(themedDrawable, ((this.layoutWidth - AndroidUtilities.dp(22.5f)) - themedDrawable.getIntrinsicWidth()) + dp4, ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable.getIntrinsicHeight()) + f2);
                } else {
                    themedDrawable = getThemedDrawable(z7 ? "drawableMsgOutCheckSelected" : "drawableMsgOutCheck");
                    BaseCell.setDrawableBounds(themedDrawable, ((this.layoutWidth - AndroidUtilities.dp(18.5f)) - themedDrawable.getIntrinsicWidth()) + dp4, ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable.getIntrinsicHeight()) + f2);
                }
                themedDrawable.setAlpha((int) (f6 * 255.0f));
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                themedDrawable.setAlpha(NotificationCenter.voipServiceCreated);
            }
        }
        if (z) {
            if (shouldDrawTimeOnMedia()) {
                Drawable themedDrawable2 = this.currentMessageObject.shouldDrawWithoutBackground() ? getThemedDrawable("drawableMsgStickerHalfCheck") : Theme.chat_msgMediaHalfCheckDrawable;
                BaseCell.setDrawableBounds(themedDrawable2, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - themedDrawable2.getIntrinsicWidth()) + dp4, (dp3 - themedDrawable2.getIntrinsicHeight()) + f2);
                themedDrawable2.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable2.getBounds().centerX(), themedDrawable2.getBounds().centerY());
                }
                themedDrawable2.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable2.setAlpha(NotificationCenter.voipServiceCreated);
            } else {
                Drawable themedDrawable3 = getThemedDrawable(z7 ? "drawableMsgOutHalfCheckSelected" : "drawableMsgOutHalfCheck");
                BaseCell.setDrawableBounds(themedDrawable3, (this.layoutWidth - AndroidUtilities.dp(18.0f)) - themedDrawable3.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable3.getIntrinsicHeight()) + f2);
                themedDrawable3.setAlpha((int) (f6 * 255.0f));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable3.getBounds().centerX(), themedDrawable3.getBounds().centerY());
                }
                themedDrawable3.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable3.setAlpha(NotificationCenter.voipServiceCreated);
            }
        }
        if (z4) {
            if (shouldDrawTimeOnMedia()) {
                dp = this.layoutWidth - AndroidUtilities.dp(34.5f);
                dp2 = AndroidUtilities.dp(26.5f);
            } else {
                dp = this.layoutWidth - AndroidUtilities.dp(32.0f);
                dp2 = AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 22.0f : 21.0f);
            }
            float f7 = (f3 - dp2) + f2;
            int i2 = (int) (dp + dp4);
            this.rect.set(i2, f7, AndroidUtilities.dp(14.0f) + i2, AndroidUtilities.dp(14.0f) + f7);
            int alpha = Theme.chat_msgErrorPaint.getAlpha();
            Theme.chat_msgErrorPaint.setAlpha((int) (alpha * f6));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha);
            BaseCell.setDrawableBounds(Theme.chat_msgErrorDrawable, i2 + AndroidUtilities.dp(6.0f), f7 + AndroidUtilities.dp(2.0f));
            Theme.chat_msgErrorDrawable.setAlpha((int) (f6 * 255.0f));
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, Theme.chat_msgErrorDrawable.getBounds().centerX(), Theme.chat_msgErrorDrawable.getBounds().centerY());
            }
            Theme.chat_msgErrorDrawable.draw(canvas);
            Theme.chat_msgErrorDrawable.setAlpha(NotificationCenter.voipServiceCreated);
            if (z8) {
                canvas.restore();
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:1019:0x1914, code lost:
        if (r1 < 1.0f) goto L292;
     */
    /* JADX WARN: Code restructure failed: missing block: B:394:0x0b7a, code lost:
        if (r0 == 3) goto L680;
     */
    /* JADX WARN: Code restructure failed: missing block: B:726:0x128c, code lost:
        if (r11 < r14) goto L1052;
     */
    /* JADX WARN: Code restructure failed: missing block: B:912:0x172b, code lost:
        if (r1.revealingMediaSpoilers != false) goto L317;
     */
    /* JADX WARN: Code restructure failed: missing block: B:922:0x174c, code lost:
        if (r54.radialProgress.getIcon() != 4) goto L317;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1000:0x18db  */
    /* JADX WARN: Removed duplicated region for block: B:1016:0x1909  */
    /* JADX WARN: Removed duplicated region for block: B:1024:0x1928  */
    /* JADX WARN: Removed duplicated region for block: B:1060:0x19ec  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x03dc  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x03e0  */
    /* JADX WARN: Removed duplicated region for block: B:1144:0x1bf0  */
    /* JADX WARN: Removed duplicated region for block: B:1151:0x1c0f  */
    /* JADX WARN: Removed duplicated region for block: B:1154:0x1c5f  */
    /* JADX WARN: Removed duplicated region for block: B:1170:0x1d1d  */
    /* JADX WARN: Removed duplicated region for block: B:1196:0x0fbe A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1197:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0657  */
    /* JADX WARN: Removed duplicated region for block: B:208:0x065e  */
    /* JADX WARN: Removed duplicated region for block: B:211:0x066c  */
    /* JADX WARN: Removed duplicated region for block: B:213:0x066f  */
    /* JADX WARN: Removed duplicated region for block: B:338:0x09a4  */
    /* JADX WARN: Removed duplicated region for block: B:351:0x09ff  */
    /* JADX WARN: Removed duplicated region for block: B:355:0x0a1b  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x0a1e  */
    /* JADX WARN: Removed duplicated region for block: B:359:0x0a2b  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x0a45  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x0a54  */
    /* JADX WARN: Removed duplicated region for block: B:370:0x0a8b  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x0adb  */
    /* JADX WARN: Removed duplicated region for block: B:382:0x0b4d  */
    /* JADX WARN: Removed duplicated region for block: B:389:0x0b6b  */
    /* JADX WARN: Removed duplicated region for block: B:393:0x0b79  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x0b7d  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x0b80  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x0baf  */
    /* JADX WARN: Removed duplicated region for block: B:402:0x0bb3 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:405:0x0bbf  */
    /* JADX WARN: Removed duplicated region for block: B:542:0x0fb4  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x0fd5  */
    /* JADX WARN: Removed duplicated region for block: B:571:0x1076  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x116c  */
    /* JADX WARN: Removed duplicated region for block: B:620:0x1181  */
    /* JADX WARN: Removed duplicated region for block: B:626:0x118d A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:642:0x11b9  */
    /* JADX WARN: Removed duplicated region for block: B:645:0x11c0  */
    /* JADX WARN: Removed duplicated region for block: B:672:0x11f9  */
    /* JADX WARN: Removed duplicated region for block: B:673:0x1200  */
    /* JADX WARN: Removed duplicated region for block: B:715:0x126a  */
    /* JADX WARN: Removed duplicated region for block: B:723:0x1282  */
    /* JADX WARN: Removed duplicated region for block: B:730:0x1297  */
    /* JADX WARN: Removed duplicated region for block: B:816:0x151e  */
    /* JADX WARN: Removed duplicated region for block: B:820:0x1537  */
    /* JADX WARN: Removed duplicated region for block: B:828:0x1558  */
    /* JADX WARN: Removed duplicated region for block: B:832:0x156e  */
    /* JADX WARN: Removed duplicated region for block: B:840:0x158c  */
    /* JADX WARN: Removed duplicated region for block: B:848:0x159e  */
    /* JADX WARN: Removed duplicated region for block: B:854:0x15ac  */
    /* JADX WARN: Removed duplicated region for block: B:858:0x15bd  */
    /* JADX WARN: Removed duplicated region for block: B:866:0x15d5  */
    /* JADX WARN: Removed duplicated region for block: B:901:0x1703  */
    /* JADX WARN: Removed duplicated region for block: B:909:0x1723  */
    /* JADX WARN: Removed duplicated region for block: B:925:0x1756  */
    /* JADX WARN: Removed duplicated region for block: B:963:0x17f5  */
    /* JADX WARN: Removed duplicated region for block: B:967:0x1800  */
    /* JADX WARN: Removed duplicated region for block: B:978:0x1823  */
    /* JADX WARN: Removed duplicated region for block: B:984:0x1841  */
    /* JADX WARN: Removed duplicated region for block: B:985:0x1844  */
    /* JADX WARN: Removed duplicated region for block: B:988:0x184d  */
    /* JADX WARN: Removed duplicated region for block: B:992:0x18b0  */
    /* JADX WARN: Removed duplicated region for block: B:996:0x18d1  */
    /* JADX WARN: Type inference failed for: r3v35 */
    /* JADX WARN: Type inference failed for: r3v36, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r3v94 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawOverlays(Canvas canvas) {
        Canvas canvas2;
        String str;
        int i;
        float f;
        boolean isPlayingMessage;
        boolean z;
        int i2;
        int i3;
        MessageObject messageObject;
        int i4;
        boolean z2;
        float f2;
        float f3;
        boolean z3;
        float f4;
        float isSmallImage;
        int i5;
        int i6;
        boolean z4;
        String str2;
        long j;
        float f5;
        StaticLayout staticLayout;
        MessageObject messageObject2;
        int i7;
        int i8;
        long j2;
        int i9;
        float f6;
        float f7;
        float f8;
        int i10;
        Canvas canvas3;
        int themedColor;
        int themedColor2;
        float f9;
        int dp;
        Canvas canvas4;
        int i11;
        ?? r3;
        int i12;
        float f10;
        int i13;
        Canvas canvas5;
        int size;
        int i14;
        String format;
        Canvas canvas6;
        Drawable drawable;
        int i15;
        int i16;
        PollButton pollButton;
        int i17;
        int i18;
        int i19;
        int i20;
        TLRPC$Poll tLRPC$Poll;
        long max;
        String formatDurationNoHours;
        int dp2;
        int dp3;
        float f11;
        int dp4;
        int i21;
        int i22;
        float f12;
        float f13;
        float f14;
        Drawable drawable2;
        Drawable drawable3;
        int dp5;
        boolean z5;
        Drawable drawable4;
        StaticLayout staticLayout2;
        String formatLocationLeftTime;
        StaticLayout staticLayout3;
        float abs;
        float f15;
        boolean z6;
        StaticLayout staticLayout4;
        Canvas canvas7;
        float currentAlpha;
        Theme.MessageDrawable messageDrawable;
        boolean z7;
        int i23;
        AnimatedFloat animatedFloat;
        float f16;
        float f17;
        MessageObject messageObject3;
        float f18;
        MessageObject messageObject4;
        MessageObject messageObject5;
        float imageX;
        StaticLayout staticLayout5;
        float imageY2;
        float f19;
        float dp6;
        float dp7;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        MessageObject messageObject6;
        boolean z8;
        int i24;
        AnimatedFileDrawable animation;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!this.drawFromPinchToZoom && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.getPinchToZoomHelper() != null && this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
            return;
        }
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j3 = elapsedRealtime - this.lastAnimationTime;
        if (j3 > 17) {
            j3 = 17;
        }
        this.lastAnimationTime = elapsedRealtime;
        if (this.currentMessageObject.hadAnimationNotReadyLoading && this.photoImage.getVisible() && !this.currentMessageObject.needDrawBluredPreview() && (((i24 = this.documentAttachType) == 7 || i24 == 4 || i24 == 2) && (animation = this.photoImage.getAnimation()) != null && animation.hasBitmap())) {
            this.currentMessageObject.hadAnimationNotReadyLoading = false;
            updateButtonState(false, true, false);
        }
        if (!this.hasGamePreview) {
            MessageObject messageObject7 = this.currentMessageObject;
            int i25 = messageObject7.type;
            if (i25 == 3 || i25 == 1 || i25 == 20 || (i10 = this.documentAttachType) == 4 || i10 == 2) {
                canvas2 = canvas;
                str = "paintChatTimeBackground";
                if (this.photoImage.getVisible()) {
                    MessageObject messageObject8 = this.currentMessageObject;
                    if (!messageObject8.isRepostPreview) {
                        if (!messageObject8.needDrawBluredPreview() && !this.currentMessageObject.isSponsored()) {
                            MessageObject messageObject9 = this.currentMessageObject;
                            if (!messageObject9.isRepostPreview && !messageObject9.preview && !this.isSmallImage) {
                                i = 4;
                                if (this.documentAttachType == 4) {
                                    int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                                    if (this.drawMediaCheckBox) {
                                        f = 1.0f;
                                        Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha * (1.0f - this.checkBoxAnimationProgress)));
                                    } else {
                                        f = 1.0f;
                                        Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                                    }
                                    Drawable drawable5 = Theme.chat_msgMediaMenuDrawable;
                                    int imageX2 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                                    this.otherX = imageX2;
                                    int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                                    this.otherY = imageY;
                                    BaseCell.setDrawableBounds(drawable5, imageX2, imageY);
                                    Theme.chat_msgMediaMenuDrawable.draw(canvas2);
                                    Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                                    isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                    if (this.animatingNoSoundPlaying != isPlayingMessage) {
                                        this.animatingNoSoundPlaying = isPlayingMessage;
                                        this.animatingNoSound = isPlayingMessage ? 1 : 2;
                                        this.animatingNoSoundProgress = isPlayingMessage ? 1.0f : 0.0f;
                                    }
                                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                                    z = groupedMessagePosition != null || (groupedMessagePosition.flags & 3) == 3;
                                    i2 = this.documentAttachType;
                                    if ((((i2 != i || i2 == 2) && ((i3 = this.buttonState) == 1 || i3 == 2 || i3 == 0 || i3 == 3 || i3 == -1)) || this.currentMessageObject.needDrawBluredPreview()) && !this.currentMessageObject.isRepostVideoPreview) {
                                        if (this.autoPlayingMedia) {
                                            updatePlayingMessageProgress();
                                        }
                                        if ((this.infoLayout == null || this.loadingProgressLayout != null) && ((!this.forceNotDrawTime || this.autoPlayingMedia || this.drawVideoImageButton || this.animatingLoadingProgressProgress != 0.0f || ((z && this.docTitleLayout != null) || (this.loadingProgressLayout != null && this.currentPosition != null && ((i7 = this.buttonState) == 1 || (i7 == 3 && this.miniButtonState == 1))))) && (messageObject = this.currentMessageObject) != null && !messageObject.sendPreview)) {
                                            if (!z) {
                                                f4 = this.animatingLoadingProgressProgress;
                                                z2 = true;
                                                z3 = false;
                                                f2 = 0.0f;
                                            } else {
                                                z2 = (this.buttonState == 1 || this.miniButtonState == 1 || this.animatingLoadingProgressProgress != 0.0f) && !messageObject.isSecretMedia() && ((i4 = this.documentAttachType) == i || i4 == 2 || i4 == 1);
                                                MessageObject messageObject10 = this.currentMessageObject;
                                                int i26 = messageObject10.type;
                                                if ((i26 == 3 || i26 == 8 || this.documentAttachType == i) && !(messageObject10.needDrawBluredPreview() && this.docTitleLayout == null)) {
                                                    f2 = this.animatingDrawVideoImageButtonProgress;
                                                    f3 = 0.0f;
                                                } else {
                                                    f3 = 0.0f;
                                                    f2 = 0.0f;
                                                }
                                                boolean z9 = f2 > f3 && this.docTitleLayout != null;
                                                if (z9 || !(z2 || this.infoLayout == null)) {
                                                    z3 = z9;
                                                    f4 = 1.0f;
                                                } else {
                                                    z3 = z9;
                                                    f4 = this.animatingLoadingProgressProgress;
                                                }
                                            }
                                            isSmallImage = f4 * (f - isSmallImage());
                                            if (this.drawPhotoImage && (messageObject2 = this.currentMessageObject) != null && messageObject2.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                                if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                    float f20 = this.mediaSpoilerRevealProgress;
                                                    if (f20 != 0.0f) {
                                                    }
                                                }
                                                isSmallImage *= this.mediaSpoilerRevealProgress;
                                            }
                                            if (isSmallImage > 0.0f) {
                                                int i27 = this.documentAttachType;
                                                boolean z10 = (i27 == 7 || i27 == 6 || this.currentMessageObject.type == 19 || SharedConfig.bubbleRadius < 10) ? false : true;
                                                Theme.chat_infoPaint.setColor(getThemedColor(Theme.key_chat_mediaInfoText));
                                                int imageX3 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(4.0f));
                                                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                                                int intrinsicWidth = (!this.autoPlayingMedia || (isPlayingMessage && this.animatingNoSound == 0)) ? 0 : (int) ((Theme.chat_msgNoSoundDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4.0f)) * this.animatingNoSoundProgress);
                                                if (z2 && (staticLayout = this.loadingProgressLayout) != null) {
                                                    i6 = (int) staticLayout.getLineWidth(0);
                                                    i5 = 0;
                                                } else {
                                                    i5 = intrinsicWidth;
                                                    i6 = this.infoWidth;
                                                }
                                                z4 = z;
                                                int ceil = (int) Math.ceil(i6 + AndroidUtilities.dp(z10 ? 12.0f : 8.0f) + i5 + ((((Math.max((this.infoWidth == i6 ? i5 : 0) + i6, this.docTitleWidth) + (this.canStreamVideo ? AndroidUtilities.dp(32.0f) : 0)) - i6) - i5) * f2));
                                                if (f2 != 0.0f && this.docTitleLayout == null) {
                                                    f2 = 0.0f;
                                                }
                                                canvas.save();
                                                str2 = str;
                                                int alpha2 = getThemedPaint(str2).getAlpha();
                                                j = j3;
                                                getThemedPaint(str2).setAlpha((int) (alpha2 * this.controlsAlpha * isSmallImage * (this.currentMessageObject.needDrawBluredPreview() ? 0.4f : 1.0f)));
                                                float f21 = imageX3;
                                                float f22 = imageY3;
                                                this.rect.set(f21, f22, imageX3 + ceil, imageY3 + AndroidUtilities.dp((15.5f * f2) + 16.5f));
                                                int[] roundRadius = this.photoImage.getRoundRadius();
                                                int min = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[0], roundRadius[1]));
                                                if (this.currentMessageObject.needDrawBluredPreview()) {
                                                    this.rectPath.reset();
                                                    float f23 = min;
                                                    this.rectPath.addRoundRect(this.rect, f23, f23, Path.Direction.CW);
                                                    canvas.save();
                                                    canvas2.clipPath(this.rectPath);
                                                    float alpha3 = this.photoImage.getAlpha();
                                                    this.photoImage.setAlpha(0.5f * alpha3);
                                                    this.photoImage.draw(canvas2);
                                                    this.photoImage.setAlpha(alpha3);
                                                    canvas.restore();
                                                    canvas2.drawRoundRect(this.rect, f23, f23, getThemedPaint(str2));
                                                } else if (z3 || ((z2 && this.loadingProgressLayout != null) || (!z2 && this.infoLayout != null))) {
                                                    canvas2.scale(isSmallImage, isSmallImage, f21, f22);
                                                    float f24 = min;
                                                    canvas2.drawRoundRect(this.rect, f24, f24, getThemedPaint(str2));
                                                } else {
                                                    canvas2.scale(isSmallImage, isSmallImage, f21, f22);
                                                }
                                                Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * isSmallImage));
                                                Theme.chat_infoBoldPaint.setColor(Theme.chat_infoPaint.getColor());
                                                int imageX4 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp((z10 ? 10 : 8) + (this.canStreamVideo ? 30.0f * f2 : 0.0f)));
                                                this.noSoundCenterX = imageX4;
                                                canvas2.translate(imageX4, this.photoImage.getImageY() + AndroidUtilities.dp((0.2f * f2) + 5.5f));
                                                StaticLayout staticLayout6 = this.infoLayout;
                                                if (staticLayout6 != null && (!z2 || z3)) {
                                                    staticLayout6.draw(canvas2);
                                                }
                                                if (i5 == 0 || (z2 && !z3)) {
                                                    f5 = 14.0f;
                                                } else {
                                                    canvas.save();
                                                    Drawable drawable6 = Theme.chat_msgNoSoundDrawable;
                                                    float f25 = this.animatingNoSoundProgress;
                                                    drawable6.setAlpha((int) (f25 * 255.0f * f25 * this.controlsAlpha));
                                                    f5 = 14.0f;
                                                    int dp8 = AndroidUtilities.dp(this.animatingNoSoundProgress * 14.0f);
                                                    int dp9 = (AndroidUtilities.dp(14.0f) - dp8) / 2;
                                                    int dp10 = this.infoWidth + AndroidUtilities.dp(4.0f);
                                                    canvas2.translate(dp10, 0.0f);
                                                    Theme.chat_msgNoSoundDrawable.setBounds(0, dp9, dp8, dp9 + dp8);
                                                    Theme.chat_msgNoSoundDrawable.draw(canvas2);
                                                    this.noSoundCenterX += dp10 + (dp8 / 2);
                                                    canvas.restore();
                                                }
                                                if (z2 && this.loadingProgressLayout != null) {
                                                    canvas.save();
                                                    if (z3) {
                                                        Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f2));
                                                        canvas2.translate(0.0f, AndroidUtilities.dp(f2 * 14.3f));
                                                    }
                                                    this.loadingProgressLayout.draw(canvas2);
                                                    canvas.restore();
                                                } else if (z3) {
                                                    Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f2));
                                                    canvas2.translate(0.0f, AndroidUtilities.dp(f2 * 14.3f));
                                                    this.docTitleLayout.draw(canvas2);
                                                }
                                                canvas.restore();
                                                Theme.chat_infoPaint.setAlpha(NotificationCenter.voipServiceCreated);
                                                getThemedPaint(str2).setAlpha(alpha2);
                                                i8 = this.animatingDrawVideoImageButton;
                                                if (i8 != 1) {
                                                    j2 = j;
                                                    float f26 = this.animatingDrawVideoImageButtonProgress - (((float) j2) / 160.0f);
                                                    this.animatingDrawVideoImageButtonProgress = f26;
                                                    if (f26 <= 0.0f) {
                                                        this.animatingDrawVideoImageButtonProgress = 0.0f;
                                                        this.animatingDrawVideoImageButton = 0;
                                                    }
                                                    invalidate();
                                                } else {
                                                    j2 = j;
                                                    if (i8 == 2) {
                                                        float f27 = this.animatingDrawVideoImageButtonProgress + (((float) j2) / 160.0f);
                                                        this.animatingDrawVideoImageButtonProgress = f27;
                                                        if (f27 >= 1.0f) {
                                                            this.animatingDrawVideoImageButtonProgress = 1.0f;
                                                            this.animatingDrawVideoImageButton = 0;
                                                        }
                                                        invalidate();
                                                    }
                                                }
                                                i9 = this.animatingNoSound;
                                                if (i9 != 1) {
                                                    float f28 = this.animatingNoSoundProgress - (((float) j2) / 180.0f);
                                                    this.animatingNoSoundProgress = f28;
                                                    if (f28 <= 0.0f) {
                                                        this.animatingNoSoundProgress = 0.0f;
                                                        this.animatingNoSound = 0;
                                                    }
                                                    invalidate();
                                                } else if (i9 == 2) {
                                                    float f29 = this.animatingNoSoundProgress + (((float) j2) / 180.0f);
                                                    this.animatingNoSoundProgress = f29;
                                                    if (f29 >= 1.0f) {
                                                        this.animatingNoSoundProgress = 1.0f;
                                                        this.animatingNoSound = 0;
                                                    }
                                                    invalidate();
                                                }
                                                if ((this.buttonState != 1 || this.miniButtonState == 1) && this.loadingProgressLayout != null) {
                                                    f6 = 0.0f;
                                                    f7 = 1.0f;
                                                } else {
                                                    f6 = 0.0f;
                                                    f7 = 0.0f;
                                                }
                                                if (f7 == f6 && this.infoLayout != null && z4) {
                                                    this.animatingLoadingProgressProgress = f6;
                                                }
                                                f8 = this.animatingLoadingProgressProgress;
                                                if (f8 >= f7) {
                                                    float f30 = f8 + (((float) j2) / 160.0f);
                                                    this.animatingLoadingProgressProgress = f30;
                                                    if (f30 > f7) {
                                                        this.animatingLoadingProgressProgress = f7;
                                                    }
                                                    invalidate();
                                                } else if (f8 != f7) {
                                                    float f31 = f8 - (((float) j2) / 160.0f);
                                                    this.animatingLoadingProgressProgress = f31;
                                                    if (f31 < f7) {
                                                        this.animatingLoadingProgressProgress = f7;
                                                    }
                                                    invalidate();
                                                }
                                                if (this.drawImageButton || !this.photoImage.getVisible() || this.isSmallImage || this.currentMessageObject.isRepostVideoPreview) {
                                                    messageDrawable = null;
                                                } else {
                                                    float f32 = this.controlsAlpha;
                                                    if (f32 != 1.0f) {
                                                        this.radialProgress.setOverrideAlpha(f32);
                                                    }
                                                    if (this.photoImage.hasImageSet()) {
                                                        messageDrawable = null;
                                                        this.radialProgress.setBackgroundDrawable(null);
                                                    } else {
                                                        messageDrawable = null;
                                                        this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                                    }
                                                    MessageObject messageObject11 = this.currentMessageObject;
                                                    if (messageObject11 != null && messageObject11.isRoundVideo()) {
                                                        MessageObject messageObject12 = this.currentMessageObject;
                                                        if (!messageObject12.mediaExists || messageObject12.isRoundOnce()) {
                                                            this.radialProgress.setProgressRect(this.photoImage.getImageX() + ((this.photoImage.getImageWidth() / 2.0f) - this.radialProgress.getRadius()), this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - this.radialProgress.getRadius()), this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f) + this.radialProgress.getRadius(), this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f) + this.radialProgress.getRadius());
                                                            z8 = false;
                                                            if ((this.isRoundVideo || !this.hasLinkPreview) && (!this.currentMessageObject.needDrawBluredPreview() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) {
                                                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                                                    MessageObject messageObject13 = this.currentMessageObject;
                                                                    if (messageObject13.isMediaSpoilersRevealed) {
                                                                    }
                                                                    if (SharedConfig.isAutoplayVideo()) {
                                                                        if (!this.currentMessageObject.isRepostPreview) {
                                                                            if (this.currentMessagesGroup == null) {
                                                                                if (this.radialProgress.getIcon() != 0) {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                    if (this.currentMessageObject.needDrawBluredPreview()) {
                                                                        this.radialProgress.overrideCircleAlpha = 0.0f;
                                                                    } else if (this.isRoundVideo) {
                                                                        this.radialProgress.overrideCircleAlpha = ((1.0f - getVideoTranscriptionProgress()) * 0.75f) + 0.25f;
                                                                    }
                                                                    if (!this.currentMessageObject.isRoundOnce() && ((!SharedConfig.isAutoplayVideo() || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0)) {
                                                                        canvas2.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (this.mediaSpoilerRevealProgress * 255.0f), 31);
                                                                    }
                                                                    drawRadialProgress(canvas);
                                                                    if (!this.currentMessageObject.isRoundOnce() && ((!SharedConfig.isAutoplayVideo() || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0)) {
                                                                        canvas.restore();
                                                                    }
                                                                    if (this.currentMessageObject.needDrawBluredPreview() || this.isRoundVideo) {
                                                                        this.radialProgress.overrideCircleAlpha = 1.0f;
                                                                    }
                                                                }
                                                            }
                                                            if (z8) {
                                                                canvas.restore();
                                                            }
                                                        }
                                                    }
                                                    MessageObject messageObject14 = this.currentMessageObject;
                                                    if (messageObject14 != null && messageObject14.isRoundVideo()) {
                                                        this.radialProgress.setProgressRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                                                        canvas2.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (getVideoTranscriptionProgress() * 255.0f), 31);
                                                        float imageHeight = this.photoImage.getImageHeight() / (this.radialProgress.getRadius() * 2);
                                                        canvas2.scale(imageHeight, imageHeight, this.radialProgress.getProgressRect().centerX(), this.radialProgress.getProgressRect().centerY());
                                                        z8 = true;
                                                        if (this.isRoundVideo) {
                                                        }
                                                        if (this.currentMessageObject.hasMediaSpoilers()) {
                                                        }
                                                        if (!this.currentMessageObject.isHiddenSensitive()) {
                                                        }
                                                        if (z8) {
                                                        }
                                                    }
                                                    z8 = false;
                                                    if (this.isRoundVideo) {
                                                    }
                                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                                    }
                                                    if (!this.currentMessageObject.isHiddenSensitive()) {
                                                    }
                                                    if (z8) {
                                                    }
                                                }
                                                z7 = (this.buttonState == -1 || (messageObject6 = this.currentMessageObject) == null || !messageObject6.needDrawBluredPreview() || MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || this.currentMessageObject.messageOwner.destroyTime == 0) ? false : true;
                                                if (z7 || this.timerParticlesAlpha != null) {
                                                    i23 = -1;
                                                } else {
                                                    i23 = -1;
                                                    this.timerParticlesAlpha = new AnimatedFloat(0.0f, this, 150L, 120L, CubicBezierInterpolator.EASE_OUT);
                                                }
                                                animatedFloat = this.timerParticlesAlpha;
                                                if (animatedFloat == null) {
                                                    f17 = 0.0f;
                                                    f16 = 0.0f;
                                                } else {
                                                    f16 = animatedFloat.set(z7);
                                                    f17 = 0.0f;
                                                }
                                                if (f16 > f17 && this.photoImage.getVisible()) {
                                                    float max2 = ((float) Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * 1000)))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f);
                                                    Theme.chat_deleteProgressPaint.setColor(i23);
                                                    Theme.chat_deleteProgressPaint.setAlpha((int) (f16 * 255.0f * this.controlsAlpha));
                                                    Theme.chat_deleteProgressPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
                                                    float f33 = max2 * (-360.0f);
                                                    canvas.drawArc(this.deleteProgressRect, -90.0f, f33, false, Theme.chat_deleteProgressPaint);
                                                    if (this.timerParticles == null) {
                                                        this.timerParticles = new TimerParticles();
                                                    }
                                                    this.timerParticles.draw(canvas, Theme.chat_deleteProgressPaint, this.deleteProgressRect, f33, this.controlsAlpha);
                                                    invalidate();
                                                    updateSecretTimeText(this.currentMessageObject);
                                                }
                                                if (!this.drawVideoImageButton || this.animatingDrawVideoImageButton != 0) {
                                                    messageObject3 = this.currentMessageObject;
                                                    if (!messageObject3.isRepostPreview && !messageObject3.sendPreview && this.photoImage.getVisible() && !this.isSmallImage) {
                                                        f18 = this.controlsAlpha;
                                                        if (this.drawPhotoImage && (messageObject4 = this.currentMessageObject) != null && messageObject4.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                                            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                                float f34 = this.mediaSpoilerRevealProgress;
                                                                if (f34 != 0.0f) {
                                                                }
                                                            }
                                                            f18 *= this.mediaSpoilerRevealProgress;
                                                        }
                                                        this.videoRadialProgress.setOverrideAlpha(f18);
                                                        this.videoRadialProgress.draw(canvas2);
                                                    }
                                                }
                                                if (this.drawMediaCheckBox) {
                                                    int i28 = this.documentAttachType;
                                                    if (i28 == 5 || (i28 == 1 && !this.drawPhotoImage)) {
                                                        int dp11 = AndroidUtilities.dp(20.0f);
                                                        this.mediaCheckBox.setBackgroundType(this.radialProgress.getMiniIcon() != 4 ? 12 : 13);
                                                        this.mediaCheckBox.setBounds(this.buttonX + AndroidUtilities.dp(28.0f), this.buttonY + AndroidUtilities.dp(28.0f), dp11, dp11);
                                                        this.mediaCheckBox.setColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLoader : Theme.key_chat_inLoader, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubble : Theme.key_chat_inBubble);
                                                        this.mediaCheckBox.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                                    } else {
                                                        int dp12 = AndroidUtilities.dp(21.0f);
                                                        this.mediaCheckBox.setBackgroundType(0);
                                                        this.mediaCheckBox.setBounds(((int) this.photoImage.getImageX2()) - AndroidUtilities.dp(25.0f), ((int) this.photoImage.getImageY()) + AndroidUtilities.dp(4.0f), dp12, dp12);
                                                        this.mediaCheckBox.setColor(i23, i23, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubbleSelected : Theme.key_chat_inBubbleSelected);
                                                        this.mediaCheckBox.setBackgroundDrawable(messageDrawable);
                                                    }
                                                    this.mediaCheckBox.draw(canvas2);
                                                }
                                                if (this.documentAttachType == 7) {
                                                    boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                                    MessageObject messageObject15 = this.currentMessageObject;
                                                    if (messageObject15.type == 5) {
                                                        if (messageObject15.isOutOwner()) {
                                                            float f35 = (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.2f;
                                                            boolean z11 = this.isPlayingRound;
                                                            float f36 = z11 ? f35 : 0.0f;
                                                            TransitionParams transitionParams = this.transitionParams;
                                                            if (transitionParams.animatePlayingRound) {
                                                                f19 = f35 * (z11 ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress);
                                                            } else {
                                                                f19 = f36;
                                                            }
                                                        } else {
                                                            f19 = 0.0f;
                                                        }
                                                        MessageObject messageObject16 = this.currentMessageObject;
                                                        if (messageObject16 != null && messageObject16.isRoundOnce()) {
                                                            dp6 = this.photoImage.getImageX();
                                                            dp7 = (this.photoImage.getImageY2() - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()))) - AndroidUtilities.dp(17.0f);
                                                        } else {
                                                            dp6 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + ((this.currentMessageObject.isOutOwner() || this.drawPinnedBottom || !this.drawBackground) ? 0 : AndroidUtilities.dp(6.0f)) + AndroidUtilities.dp(8.0f) + this.roundPlayingDrawableProgress + f19;
                                                            dp7 = this.layoutHeight - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                                                        }
                                                        if (!this.reactionsLayoutInBubble.isEmpty) {
                                                            dp7 -= reactionsLayoutInBubble.totalHeight;
                                                        }
                                                        TransitionParams transitionParams2 = this.transitionParams;
                                                        transitionParams2.lastDrawRoundVideoDotY = dp7;
                                                        if (transitionParams2.animateRoundVideoDotY) {
                                                            float f37 = transitionParams2.animateFromRoundVideoDotY;
                                                            float f38 = transitionParams2.animateChangeProgress;
                                                            dp7 = (dp7 * f38) + (f37 * (1.0f - f38));
                                                        }
                                                        int i29 = this.timeAudioX;
                                                        if (!this.hasLinkPreview) {
                                                            if (this.currentMessageObject.isOutOwner()) {
                                                                int width = getWidth();
                                                                TransitionParams transitionParams3 = this.transitionParams;
                                                                i29 = ((width - (transitionParams3.animateBackgroundBoundsInner ? (int) ((this.backgroundWidth - transitionParams3.deltaLeft) + transitionParams3.deltaRight) : this.backgroundWidth)) - ((this.drawPinnedBottom || !this.mediaBackground) ? 0 : AndroidUtilities.dp(8.0f))) + AndroidUtilities.dp(67.0f);
                                                            }
                                                            dp6 = AndroidUtilities.lerp(dp6, i29 - AndroidUtilities.dp(4.0f), getVideoTranscriptionProgress());
                                                            dp7 = AndroidUtilities.lerp(dp7, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + this.mediaOffsetY) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress());
                                                        }
                                                        this.rect.set(dp6, dp7, this.timeWidthAudio + dp6 + AndroidUtilities.dp(22.0f), AndroidUtilities.dp(17.0f) + dp7);
                                                        applyServiceShaderMatrix();
                                                        Paint themedPaint = getThemedPaint("paintChatActionBackground");
                                                        int alpha4 = themedPaint.getAlpha();
                                                        themedPaint.setAlpha((int) (alpha4 * this.timeAlpha * 0.5f * (1.0f - getVideoTranscriptionProgress())));
                                                        canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), themedPaint);
                                                        if (hasGradientService()) {
                                                            Paint themedPaint2 = getThemedPaint("paintChatActionBackgroundDarken");
                                                            int alpha5 = themedPaint2.getAlpha();
                                                            themedPaint2.setAlpha((int) (alpha5 * this.timeAlpha * (1.0f - getVideoTranscriptionProgress())));
                                                            canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), themedPaint2);
                                                            themedPaint2.setAlpha(alpha5);
                                                        }
                                                        themedPaint.setAlpha(alpha4);
                                                        boolean z12 = isPlayingMessage2 || !this.currentMessageObject.isContentUnread();
                                                        if (z12) {
                                                            float f39 = this.roundPlayingDrawableProgress;
                                                            if (f39 != 1.0f) {
                                                                float f40 = f39 + 0.10666667f;
                                                                this.roundPlayingDrawableProgress = f40;
                                                                if (f40 > 1.0f) {
                                                                    this.roundPlayingDrawableProgress = 1.0f;
                                                                } else {
                                                                    invalidate();
                                                                }
                                                                if (z12) {
                                                                    if (isPlayingMessage2 && !MediaController.getInstance().isMessagePaused()) {
                                                                        this.roundVideoPlayingDrawable.start();
                                                                    } else {
                                                                        this.roundVideoPlayingDrawable.stop();
                                                                    }
                                                                }
                                                                if (this.roundPlayingDrawableProgress < 1.0f) {
                                                                    float dp13 = this.timeWidthAudio + dp6 + AndroidUtilities.dp(12.0f);
                                                                    float dp14 = AndroidUtilities.dp(8.3f) + dp7;
                                                                    canvas.save();
                                                                    float f41 = 1.0f - this.roundPlayingDrawableProgress;
                                                                    canvas2.scale(f41, f41, dp13, dp14);
                                                                    Theme.chat_docBackPaint.setColor(Theme.chat_timePaint.getColor());
                                                                    Theme.chat_docBackPaint.setAlpha((int) (this.timeAlpha * 255.0f * (1.0f - this.roundPlayingDrawableProgress)));
                                                                    canvas2.drawCircle(dp13, dp14, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                                                                    canvas.restore();
                                                                }
                                                                if (this.roundPlayingDrawableProgress > 0.0f) {
                                                                    BaseCell.setDrawableBounds(this.roundVideoPlayingDrawable, this.timeWidthAudio + dp6 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(2.3f) + dp7);
                                                                    canvas.save();
                                                                    float f42 = this.roundPlayingDrawableProgress;
                                                                    canvas2.scale(f42, f42, this.roundVideoPlayingDrawable.getBounds().centerX(), this.roundVideoPlayingDrawable.getBounds().centerY());
                                                                    if (!this.hasLinkPreview) {
                                                                        this.roundVideoPlayingDrawable.timeColor = Theme.chat_timePaint.getColor();
                                                                        this.roundVideoPlayingDrawable.colorProgress = getVideoTranscriptionProgress();
                                                                    } else {
                                                                        this.roundVideoPlayingDrawable.colorProgress = 0.0f;
                                                                    }
                                                                    this.roundVideoPlayingDrawable.setAlpha((int) (this.roundPlayingDrawableProgress * 255.0f * (1.0f - getVideoTranscriptionProgress())));
                                                                    this.roundVideoPlayingDrawable.draw(canvas2);
                                                                    canvas.restore();
                                                                }
                                                                imageX = dp6 + AndroidUtilities.dp(4.0f);
                                                                imageY2 = dp7 + AndroidUtilities.dp(1.7f);
                                                            }
                                                        }
                                                        if (!z12) {
                                                            float f43 = this.roundPlayingDrawableProgress;
                                                            if (f43 != 0.0f) {
                                                                float f44 = f43 - 0.10666667f;
                                                                this.roundPlayingDrawableProgress = f44;
                                                                if (f44 < 0.0f) {
                                                                    this.roundPlayingDrawableProgress = 0.0f;
                                                                } else {
                                                                    invalidate();
                                                                }
                                                            }
                                                        }
                                                        if (z12) {
                                                        }
                                                        if (this.roundPlayingDrawableProgress < 1.0f) {
                                                        }
                                                        if (this.roundPlayingDrawableProgress > 0.0f) {
                                                        }
                                                        imageX = dp6 + AndroidUtilities.dp(4.0f);
                                                        imageY2 = dp7 + AndroidUtilities.dp(1.7f);
                                                    } else {
                                                        imageX = this.photoImage.getImageX();
                                                        imageY2 = this.photoImage.getImageY2() - (this.durationLayout != null ? staticLayout5.getHeight() : 0);
                                                    }
                                                    if (this.durationLayout != null) {
                                                        Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f));
                                                        canvas.save();
                                                        canvas2.translate(imageX, imageY2);
                                                        this.durationLayout.draw(canvas2);
                                                        canvas.restore();
                                                        Theme.chat_timePaint.setAlpha(NotificationCenter.voipServiceCreated);
                                                    }
                                                }
                                                if (this.drawPhotoImage && (messageObject5 = this.currentMessageObject) != null && messageObject5.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                        float f45 = this.mediaSpoilerRevealProgress;
                                                        if (f45 == 0.0f || f45 >= 1.0f) {
                                                            return;
                                                        }
                                                    }
                                                    if (this.sensitiveText == null) {
                                                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder("x " + LocaleController.getString(R.string.MessageSensitiveContent));
                                                        spannableStringBuilder.setSpan(new ColoredImageSpan(R.drawable.filled_sensitive), 0, 1, 33);
                                                        this.sensitiveText = new Text(spannableStringBuilder, f5, AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                                                    }
                                                    Text text = this.sensitiveText;
                                                    if (this.photoImage.getImageWidth() < AndroidUtilities.dp(26.0f) + this.sensitiveText.getCurrentWidth()) {
                                                        if (this.sensitiveTextShort == null) {
                                                            SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder("x " + LocaleController.getString(R.string.MessageSensitiveContentShort));
                                                            spannableStringBuilder2.setSpan(new ColoredImageSpan(R.drawable.filled_sensitive), 0, 1, 33);
                                                            this.sensitiveTextShort = new Text(spannableStringBuilder2, f5, AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                                                        }
                                                        text = this.sensitiveTextShort;
                                                    }
                                                    float imageX5 = this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f);
                                                    float imageHeight2 = (this.photoImage.getImageHeight() / 2.0f) + this.photoImage.getImageY();
                                                    float currentWidth = text.getCurrentWidth() + AndroidUtilities.dp(26.0f);
                                                    float dp15 = AndroidUtilities.dp(32.0f) / 2.0f;
                                                    float lerp = AndroidUtilities.lerp(0.8f, 1.0f, 1.0f - this.mediaSpoilerRevealProgress);
                                                    RectF rectF = AndroidUtilities.rectTmp;
                                                    float f46 = currentWidth / 2.0f;
                                                    float f47 = f46 * lerp;
                                                    float f48 = dp15 * lerp;
                                                    rectF.set(imageX5 - f47, imageHeight2 - f48, f47 + imageX5, f48 + imageHeight2);
                                                    this.rectPath.reset();
                                                    this.rectPath.addRoundRect(rectF, dp15, dp15, Path.Direction.CW);
                                                    canvas.save();
                                                    canvas2.clipPath(this.rectPath);
                                                    float alpha6 = this.blurredPhotoImage.getAlpha();
                                                    this.blurredPhotoImage.setAlpha((1.0f - this.mediaSpoilerRevealProgress) * alpha6);
                                                    this.blurredPhotoImage.draw(canvas2);
                                                    this.blurredPhotoImage.setAlpha(alpha6);
                                                    canvas.restore();
                                                    int alpha7 = getThemedPaint(str2).getAlpha();
                                                    getThemedPaint(str2).setAlpha((int) (alpha7 * this.controlsAlpha * (1.0f - this.mediaSpoilerRevealProgress) * 0.35f));
                                                    canvas2.drawRoundRect(rectF, dp15, dp15, getThemedPaint(str2));
                                                    getThemedPaint(str2).setAlpha(alpha7);
                                                    canvas.save();
                                                    canvas2.scale(lerp, lerp, imageX5, imageHeight2);
                                                    text.draw(canvas, AndroidUtilities.dp(13.0f) + (imageX5 - f46), imageHeight2, -1, 1.0f - this.mediaSpoilerRevealProgress);
                                                    canvas.restore();
                                                    return;
                                                }
                                                return;
                                            }
                                        }
                                    }
                                    z4 = z;
                                    j = j3;
                                    str2 = str;
                                    f5 = 14.0f;
                                    i8 = this.animatingDrawVideoImageButton;
                                    if (i8 != 1) {
                                    }
                                    i9 = this.animatingNoSound;
                                    if (i9 != 1) {
                                    }
                                    if (this.buttonState != 1) {
                                    }
                                    f6 = 0.0f;
                                    f7 = 1.0f;
                                    if (f7 == f6) {
                                        this.animatingLoadingProgressProgress = f6;
                                    }
                                    f8 = this.animatingLoadingProgressProgress;
                                    if (f8 >= f7) {
                                    }
                                    if (this.drawImageButton) {
                                    }
                                    messageDrawable = null;
                                    if (this.buttonState == -1) {
                                    }
                                    if (z7) {
                                    }
                                    i23 = -1;
                                    animatedFloat = this.timerParticlesAlpha;
                                    if (animatedFloat == null) {
                                    }
                                    if (f16 > f17) {
                                        float max22 = ((float) Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * 1000)))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f);
                                        Theme.chat_deleteProgressPaint.setColor(i23);
                                        Theme.chat_deleteProgressPaint.setAlpha((int) (f16 * 255.0f * this.controlsAlpha));
                                        Theme.chat_deleteProgressPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
                                        float f332 = max22 * (-360.0f);
                                        canvas.drawArc(this.deleteProgressRect, -90.0f, f332, false, Theme.chat_deleteProgressPaint);
                                        if (this.timerParticles == null) {
                                        }
                                        this.timerParticles.draw(canvas, Theme.chat_deleteProgressPaint, this.deleteProgressRect, f332, this.controlsAlpha);
                                        invalidate();
                                        updateSecretTimeText(this.currentMessageObject);
                                    }
                                    if (!this.drawVideoImageButton) {
                                    }
                                    messageObject3 = this.currentMessageObject;
                                    if (!messageObject3.isRepostPreview) {
                                        f18 = this.controlsAlpha;
                                        if (this.drawPhotoImage) {
                                            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                            }
                                            f18 *= this.mediaSpoilerRevealProgress;
                                        }
                                        this.videoRadialProgress.setOverrideAlpha(f18);
                                        this.videoRadialProgress.draw(canvas2);
                                    }
                                    if (this.drawMediaCheckBox) {
                                    }
                                    if (this.documentAttachType == 7) {
                                    }
                                    if (this.drawPhotoImage) {
                                        return;
                                    }
                                    return;
                                }
                                f = 1.0f;
                                isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                if (this.animatingNoSoundPlaying != isPlayingMessage) {
                                }
                                MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                                if (groupedMessagePosition2 != null) {
                                }
                                i2 = this.documentAttachType;
                                if (i2 != i) {
                                }
                                if (this.autoPlayingMedia) {
                                }
                                if (this.infoLayout == null) {
                                }
                                if (!z) {
                                }
                                isSmallImage = f4 * (f - isSmallImage());
                                if (this.drawPhotoImage) {
                                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                    }
                                    isSmallImage *= this.mediaSpoilerRevealProgress;
                                }
                                if (isSmallImage > 0.0f) {
                                }
                                z4 = z;
                                j = j3;
                                str2 = str;
                                f5 = 14.0f;
                                i8 = this.animatingDrawVideoImageButton;
                                if (i8 != 1) {
                                }
                                i9 = this.animatingNoSound;
                                if (i9 != 1) {
                                }
                                if (this.buttonState != 1) {
                                }
                                f6 = 0.0f;
                                f7 = 1.0f;
                                if (f7 == f6) {
                                }
                                f8 = this.animatingLoadingProgressProgress;
                                if (f8 >= f7) {
                                }
                                if (this.drawImageButton) {
                                }
                                messageDrawable = null;
                                if (this.buttonState == -1) {
                                }
                                if (z7) {
                                }
                                i23 = -1;
                                animatedFloat = this.timerParticlesAlpha;
                                if (animatedFloat == null) {
                                }
                                if (f16 > f17) {
                                }
                                if (!this.drawVideoImageButton) {
                                }
                                messageObject3 = this.currentMessageObject;
                                if (!messageObject3.isRepostPreview) {
                                }
                                if (this.drawMediaCheckBox) {
                                }
                                if (this.documentAttachType == 7) {
                                }
                                if (this.drawPhotoImage) {
                                }
                            }
                        }
                        i = 4;
                        f = 1.0f;
                        isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                        if (this.animatingNoSoundPlaying != isPlayingMessage) {
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition22 = this.currentPosition;
                        if (groupedMessagePosition22 != null) {
                        }
                        i2 = this.documentAttachType;
                        if (i2 != i) {
                        }
                        if (this.autoPlayingMedia) {
                        }
                        if (this.infoLayout == null) {
                        }
                        if (!z) {
                        }
                        isSmallImage = f4 * (f - isSmallImage());
                        if (this.drawPhotoImage) {
                        }
                        if (isSmallImage > 0.0f) {
                        }
                        z4 = z;
                        j = j3;
                        str2 = str;
                        f5 = 14.0f;
                        i8 = this.animatingDrawVideoImageButton;
                        if (i8 != 1) {
                        }
                        i9 = this.animatingNoSound;
                        if (i9 != 1) {
                        }
                        if (this.buttonState != 1) {
                        }
                        f6 = 0.0f;
                        f7 = 1.0f;
                        if (f7 == f6) {
                        }
                        f8 = this.animatingLoadingProgressProgress;
                        if (f8 >= f7) {
                        }
                        if (this.drawImageButton) {
                        }
                        messageDrawable = null;
                        if (this.buttonState == -1) {
                        }
                        if (z7) {
                        }
                        i23 = -1;
                        animatedFloat = this.timerParticlesAlpha;
                        if (animatedFloat == null) {
                        }
                        if (f16 > f17) {
                        }
                        if (!this.drawVideoImageButton) {
                        }
                        messageObject3 = this.currentMessageObject;
                        if (!messageObject3.isRepostPreview) {
                        }
                        if (this.drawMediaCheckBox) {
                        }
                        if (this.documentAttachType == 7) {
                        }
                        if (this.drawPhotoImage) {
                        }
                    }
                }
            } else {
                if (i25 != 4) {
                    canvas3 = canvas;
                    if (i25 == 16) {
                        boolean isVideoCall = messageObject7.isVideoCall();
                        if (this.currentMessageObject.isOutOwner()) {
                            drawable2 = Theme.chat_msgCallUpGreenDrawable;
                            if (this.currentMessageObject.isVideoCall()) {
                                isDrawSelectionBackground();
                                drawable3 = getThemedDrawable("drawableMsgOutCallVideo");
                            } else {
                                drawable3 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutCallAudioSelected" : "drawableMsgOutCallAudio");
                            }
                        } else {
                            TLRPC$PhoneCallDiscardReason tLRPC$PhoneCallDiscardReason = this.currentMessageObject.messageOwner.action.reason;
                            if ((tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonMissed) || (tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonBusy)) {
                                drawable2 = Theme.chat_msgCallDownRedDrawable;
                            } else {
                                drawable2 = Theme.chat_msgCallDownGreenDrawable;
                            }
                            drawable3 = isDrawSelectionBackground() ? Theme.chat_msgInCallSelectedDrawable[isVideoCall ? 1 : 0] : Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0];
                        }
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                            Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText));
                        } else {
                            Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                            Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText));
                        }
                        this.forceNotDrawTime = true;
                        if (this.currentMessageObject.isOutOwner()) {
                            dp5 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(16.0f);
                        } else if (needDrawAvatar()) {
                            dp5 = AndroidUtilities.dp(74.0f);
                        } else {
                            dp5 = AndroidUtilities.dp(25.0f);
                        }
                        this.otherX = dp5;
                        if (LocaleController.isRTL) {
                            dp5 += drawable3.getIntrinsicWidth() + AndroidUtilities.dp(12.0f);
                        }
                        if (this.titleLayout != null) {
                            canvas.save();
                            canvas3.translate(dp5, AndroidUtilities.dp(12.0f) + this.namesOffset);
                            this.titleLayout.draw(canvas3);
                            canvas.restore();
                        }
                        if (this.docTitleLayout != null) {
                            canvas.save();
                            canvas3.translate(AndroidUtilities.dp(LocaleController.isRTL ? -19.0f : 19.0f) + dp5, AndroidUtilities.dp(37.0f) + this.namesOffset);
                            this.docTitleLayout.draw(canvas3);
                            canvas.restore();
                        }
                        BaseCell.setDrawableBounds(drawable2, (dp5 + ((!LocaleController.isRTL || (staticLayout2 = this.docTitleLayout) == null) ? 0 : staticLayout2.getWidth() - drawable2.getIntrinsicWidth())) - AndroidUtilities.dp(1.0f), AndroidUtilities.dp(37.0f) + this.namesOffset);
                        drawable2.draw(canvas3);
                        if (Build.VERSION.SDK_INT >= 21 && (drawable4 = this.selectorDrawable[0]) != null) {
                            if (this.selectorDrawableMaskType[0] == 4) {
                                drawable4.draw(canvas3);
                            }
                            z5 = this.pinnedBottom;
                            if (z5 && !this.pinnedTop) {
                                this.otherY = AndroidUtilities.dp(18.5f);
                            } else if (!z5 && this.pinnedTop) {
                                this.otherY = AndroidUtilities.dp(18.0f);
                            } else if (z5) {
                                this.otherY = AndroidUtilities.dp(17.0f);
                            } else {
                                this.otherY = AndroidUtilities.dp(19.0f);
                            }
                            BaseCell.setDrawableBounds(drawable3, this.otherX + AndroidUtilities.dp((!LocaleController.isRTL ? 0 : NotificationCenter.storyQualityUpdate) + (!isVideoCall ? 1 : 0)), this.otherY);
                            drawable3.draw(canvas3);
                        }
                        z5 = this.pinnedBottom;
                        if (z5) {
                        }
                        if (!z5) {
                        }
                        if (z5) {
                        }
                        BaseCell.setDrawableBounds(drawable3, this.otherX + AndroidUtilities.dp((!LocaleController.isRTL ? 0 : NotificationCenter.storyQualityUpdate) + (!isVideoCall ? 1 : 0)), this.otherY);
                        drawable3.draw(canvas3);
                    } else if (i25 == 17) {
                        long currentTimeMillis = System.currentTimeMillis();
                        long j4 = currentTimeMillis - this.voteLastUpdateTime;
                        if (j4 > 17) {
                            j4 = 17;
                        }
                        this.voteLastUpdateTime = currentTimeMillis;
                        if (this.currentMessageObject.isOutOwner()) {
                            themedColor = getThemedColor(Theme.key_chat_messageTextOut);
                            themedColor2 = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText);
                        } else {
                            themedColor = getThemedColor(Theme.key_chat_messageTextIn);
                            themedColor2 = getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText);
                        }
                        Theme.chat_audioTitlePaint.setColor(themedColor);
                        Theme.chat_audioPerformerPaint.setColor(themedColor);
                        Theme.chat_instantViewPaint.setColor(themedColor);
                        Theme.chat_timePaint.setColor(themedColor2);
                        Theme.chat_livePaint.setColor(themedColor2);
                        Theme.chat_locationAddressPaint.setColor(themedColor2);
                        canvas.save();
                        TransitionParams transitionParams4 = this.transitionParams;
                        if (transitionParams4.animateForwardedLayout) {
                            float f49 = transitionParams4.animateChangeProgress;
                            float f50 = (this.namesOffset * f49) + (transitionParams4.animateForwardedNamesOffset * (1.0f - f49));
                            if (this.currentMessageObject.needDrawForwarded()) {
                                f50 -= this.namesOffset;
                            }
                            f9 = 0.0f;
                            canvas3.translate(0.0f, f50);
                        } else {
                            f9 = 0.0f;
                        }
                        if (this.currentMessageObject.isOutOwner()) {
                            dp = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(11.0f);
                        } else if (needDrawAvatar()) {
                            dp = AndroidUtilities.dp(68.0f);
                        } else {
                            dp = AndroidUtilities.dp(20.0f);
                        }
                        if (this.titleLayout != null) {
                            canvas.save();
                            canvas3.translate(getExtraTextX() + dp, AndroidUtilities.dp(15.0f) + this.namesOffset);
                            this.titleLayout.draw(canvas3);
                            StaticLayout staticLayout7 = this.titleLayout;
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiPollQuestion;
                            ColorFilter adaptiveEmojiColorFilter = getAdaptiveEmojiColorFilter(1, staticLayout7.getPaint().getColor());
                            i12 = NotificationCenter.voipServiceCreated;
                            canvas4 = canvas3;
                            str = "paintChatTimeBackground";
                            i11 = 2;
                            r3 = 0;
                            f10 = 14.0f;
                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout7, emojiGroupedSpans, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, adaptiveEmojiColorFilter);
                            canvas.restore();
                        } else {
                            canvas4 = canvas3;
                            str = "paintChatTimeBackground";
                            i11 = 2;
                            r3 = 0;
                            i12 = NotificationCenter.voipServiceCreated;
                            f10 = 14.0f;
                        }
                        StaticLayout staticLayout8 = this.titleLayout;
                        int height = (staticLayout8 != null ? staticLayout8.getHeight() : 0) + AndroidUtilities.dp(20.0f) + this.namesOffset;
                        if (this.docTitleLayout != null) {
                            canvas.save();
                            canvas4.translate(this.docTitleOffsetX + dp + getExtraTextX(), height);
                            this.docTitleLayout.draw(canvas4);
                            canvas.restore();
                            TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(this.currentMessageObject.messageOwner);
                            if (this.lastPoll.quiz && ((this.pollVoted || this.pollClosed) && !TextUtils.isEmpty(tLRPC$TL_messageMediaPoll.results.solution))) {
                                Drawable themedDrawable = getThemedDrawable(this.currentMessageObject.isOutOwner() ? "drawable_chat_pollHintDrawableOut" : "drawable_chat_pollHintDrawableIn");
                                if (this.pollVoteInProgress) {
                                    themedDrawable.setAlpha((int) (this.pollAnimationProgress * 255.0f));
                                } else {
                                    themedDrawable.setAlpha(i12);
                                }
                                int i30 = this.docTitleOffsetX;
                                if (i30 < 0 || (i30 == 0 && this.docTitleLayout.getLineLeft(r3) == f9)) {
                                    this.pollHintX = (this.currentBackgroundDrawable.getBounds().right - themedDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 17.0f : 11.0f);
                                } else {
                                    this.pollHintX = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                                }
                                this.pollHintY = height - AndroidUtilities.dp(6.0f);
                                int intrinsicWidth2 = this.pollHintX + (themedDrawable.getIntrinsicWidth() / i11);
                                int intrinsicHeight = this.pollHintY + (themedDrawable.getIntrinsicHeight() / i11);
                                if (this.hintButtonVisible) {
                                    float f51 = this.hintButtonProgress;
                                    if (f51 < 1.0f) {
                                        f14 = AnimationProperties.overshootInterpolator.getInterpolation(f51);
                                        int intrinsicWidth3 = ((int) (themedDrawable.getIntrinsicWidth() * f14)) / i11;
                                        int intrinsicHeight2 = ((int) (themedDrawable.getIntrinsicHeight() * f14)) / i11;
                                        themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth3, intrinsicHeight - intrinsicHeight2, intrinsicWidth2 + intrinsicWidth3, intrinsicHeight + intrinsicHeight2);
                                        themedDrawable.draw(canvas4);
                                    }
                                }
                                f14 = this.hintButtonProgress;
                                int intrinsicWidth32 = ((int) (themedDrawable.getIntrinsicWidth() * f14)) / i11;
                                int intrinsicHeight22 = ((int) (themedDrawable.getIntrinsicHeight() * f14)) / i11;
                                themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth32, intrinsicHeight - intrinsicHeight22, intrinsicWidth2 + intrinsicWidth32, intrinsicHeight + intrinsicHeight22);
                                themedDrawable.draw(canvas4);
                            } else {
                                this.pollHintX = -1;
                            }
                            if (this.pollAvatarImages != null && !this.isBot) {
                                int ceil2 = (int) Math.ceil(this.docTitleLayout.getLineLeft(r3));
                                if (this.docTitleOffsetX != 0 || ceil2 != 0) {
                                    int i31 = -AndroidUtilities.dp(13.0f);
                                    int i32 = this.docTitleOffsetX;
                                    if (i32 != 0) {
                                        dp4 = ((i32 + dp) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                    } else {
                                        dp4 = ((ceil2 + dp) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                    }
                                    i21 = dp4;
                                    i22 = i31;
                                } else {
                                    i22 = AndroidUtilities.dp(13.0f);
                                    i21 = ((int) Math.ceil(this.docTitleLayout.getLineWidth(r3))) + dp + AndroidUtilities.dp(7.0f) + getExtraTextX();
                                }
                                for (int length = this.pollAvatarImages.length - 1; length >= 0; length--) {
                                    if (this.pollAvatarImagesVisible[length] && this.pollAvatarImages[length].hasImageSet()) {
                                        this.pollAvatarImages[length].setImageX((i22 * length) + i21);
                                        this.pollAvatarImages[length].setImageY(height - AndroidUtilities.dp(1.0f));
                                        ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                                        if (length != imageReceiverArr.length - 1) {
                                            canvas4.drawCircle(imageReceiverArr[length].getCenterX(), this.pollAvatarImages[length].getCenterY(), AndroidUtilities.dp(9.0f), this.currentBackgroundDrawable.getPaint());
                                        }
                                        if (this.animatePollAvatars && this.animatePollAnswerAlpha) {
                                            if (this.pollUnvoteInProgress) {
                                                f12 = 1.0f;
                                                f13 = (1.0f - this.pollAnimationProgress) / 0.3f;
                                            } else {
                                                f12 = 1.0f;
                                                f13 = this.pollAnimationProgress;
                                            }
                                            this.pollAvatarImages[length].setAlpha(Math.min(f13, f12));
                                        }
                                        this.pollAvatarImages[length].draw(canvas4);
                                    }
                                }
                                if ((!this.pollClosed && !this.pollVoted) || this.pollVoteInProgress) {
                                    tLRPC$Poll = this.lastPoll;
                                    if (tLRPC$Poll.quiz && tLRPC$Poll.close_period != 0) {
                                        max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                                        if (this.closeTimeText != null || this.lastPollCloseTime != max) {
                                            this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(((float) max) / 1000.0f), r3);
                                            this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(formatDurationNoHours));
                                            this.lastPollCloseTime = max;
                                        }
                                        if (max <= 0 && !this.pollClosed) {
                                            if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                                this.currentMessageObject.pollLastCheckTime = 0L;
                                            }
                                            this.delegate.needReloadPolls();
                                        }
                                        int dp16 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(!this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                                        if (max <= 5000) {
                                            Theme.chat_timePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollWrongAnswer : Theme.key_chat_inPollWrongAnswer));
                                        }
                                        if (!this.animatePollAnswer) {
                                            Theme.chat_timePaint.setAlpha((int) ((1.0f - this.pollAnimationProgress) * 255.0f));
                                        }
                                        canvas5 = canvas;
                                        canvas5.drawText(this.closeTimeText, dp16, height + AndroidUtilities.dp(11.0f), Theme.chat_timePaint);
                                        Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                                        dp2 = dp16 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                                        int dp17 = AndroidUtilities.dp(5.1f);
                                        dp3 = height + AndroidUtilities.dp(6.0f);
                                        if (max > 60000) {
                                            this.rect.set(dp2 - dp17, dp3 - dp17, dp2 + dp17, dp17 + dp3);
                                            float min2 = (((float) max) / (Math.min(60, this.lastPoll.close_period) * 1000.0f)) * (-360.0f);
                                            f11 = 0.0f;
                                            i13 = dp;
                                            canvas.drawArc(this.rect, -90.0f, min2, false, Theme.chat_pollTimerPaint);
                                            this.timerParticles.draw(canvas, Theme.chat_pollTimerPaint, this.rect, min2, this.pollVoteInProgress ? 1.0f - this.pollAnimationProgress : 1.0f);
                                        } else {
                                            i13 = dp;
                                            f11 = 0.0f;
                                            canvas5.drawCircle(dp2, dp3, dp17, Theme.chat_pollTimerPaint);
                                        }
                                        if (max <= 60000 || this.timerTransitionProgress != f11) {
                                            Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                            float f52 = dp2;
                                            canvas.drawLine(f52 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp3 - AndroidUtilities.dp(7.5f), f52 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp3 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                            float f53 = dp3;
                                            canvas.drawLine(f52, f53 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f52, f53, Theme.chat_pollTimerPaint);
                                            if (max <= 60000) {
                                                float f54 = this.timerTransitionProgress - (((float) j4) / 180.0f);
                                                this.timerTransitionProgress = f54;
                                                if (f54 < f11) {
                                                    this.timerTransitionProgress = f11;
                                                }
                                            }
                                        }
                                        invalidate();
                                        if (Build.VERSION.SDK_INT < 21 && this.selectorDrawable[0] != null) {
                                            i19 = this.selectorDrawableMaskType[0];
                                            i20 = i19 == 1 ? 3 : 3;
                                            if (i19 == i20) {
                                                canvas.save();
                                                float f55 = this.hintButtonProgress;
                                                canvas5.scale(f55, f55, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                            }
                                            this.selectorDrawable[0].draw(canvas5);
                                            if (this.selectorDrawableMaskType[0] == i20) {
                                                canvas.restore();
                                            }
                                        }
                                        size = this.pollButtons.size();
                                        i14 = 0;
                                        int i33 = 0;
                                        while (i14 < size) {
                                            PollButton pollButton2 = this.pollButtons.get(i14);
                                            int i34 = i13;
                                            pollButton2.x = i34;
                                            canvas.save();
                                            canvas5.translate(AndroidUtilities.dp(35.0f) + i34, pollButton2.y + this.namesOffset);
                                            pollButton2.title.draw(canvas5);
                                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, pollButton2.title, pollButton2.animatedEmoji, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, pollButton2.title.getPaint().getColor()));
                                            int min3 = (int) (this.animatePollAnswerAlpha ? Math.min((this.pollUnvoteInProgress ? 1.0f - this.pollAnimationProgress : this.pollAnimationProgress) / 0.3f, 1.0f) * 255.0f : 255.0f);
                                            boolean z13 = this.pollVoted;
                                            if (z13 || this.pollClosed || this.animatePollAnswerAlpha) {
                                                if (this.lastPoll.quiz && z13 && pollButton2.chosen) {
                                                    if (pollButton2.correct) {
                                                        i15 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollCorrectAnswer : Theme.key_chat_inPollCorrectAnswer;
                                                    } else {
                                                        i15 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollWrongAnswer : Theme.key_chat_inPollWrongAnswer;
                                                    }
                                                    if (!this.currentBackgroundDrawable.hasGradient() || Theme.hasThemeKey(i15)) {
                                                        Theme.chat_docBackPaint.setColor(getThemedColor(i15));
                                                    } else {
                                                        Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill));
                                                    }
                                                } else {
                                                    Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill));
                                                }
                                                if (this.animatePollAnswerAlpha) {
                                                    float f56 = min3;
                                                    Theme.chat_instantViewPaint.setAlpha((int) ((Theme.chat_instantViewPaint.getAlpha() / 255.0f) * f56));
                                                    Theme.chat_docBackPaint.setAlpha((int) (f56 * (Theme.chat_docBackPaint.getAlpha() / 255.0f)));
                                                }
                                                canvas6 = canvas;
                                                canvas6.drawText(String.format("%d%%", Integer.valueOf((int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * this.pollAnimationProgress)))), (-AndroidUtilities.dp(6.5f)) - ((int) Math.ceil(Theme.chat_instantViewPaint.measureText(format))), AndroidUtilities.dp(f10), Theme.chat_instantViewPaint);
                                                this.rect.set(0.0f, pollButton2.height + AndroidUtilities.dp(6.0f), (this.backgroundWidth - AndroidUtilities.dp(76.0f)) * (pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * this.pollAnimationProgress)), pollButton2.height + AndroidUtilities.dp(11.0f));
                                                canvas6.drawRoundRect(this.rect, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_docBackPaint);
                                                if (pollButton2.chosen || pollButton2.prevChosen || (this.lastPoll.quiz && pollButton2.correct && (this.pollVoted || this.pollClosed))) {
                                                    float dp18 = this.rect.left - AndroidUtilities.dp(13.5f);
                                                    float centerY = this.rect.centerY();
                                                    canvas6.drawCircle(dp18, centerY, AndroidUtilities.dp(7.0f), Theme.chat_docBackPaint);
                                                    if (this.lastPoll.quiz && pollButton2.chosen && !pollButton2.correct) {
                                                        drawable = Theme.chat_pollCrossDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                                    } else {
                                                        drawable = Theme.chat_pollCheckDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                                    }
                                                    drawable.setAlpha(min3);
                                                    BaseCell.setDrawableBounds(drawable, dp18 - (drawable.getIntrinsicWidth() / 2), centerY - (drawable.getIntrinsicHeight() / 2));
                                                    drawable.draw(canvas6);
                                                    if ((!this.pollVoted || this.pollClosed) && !this.animatePollAnswerAlpha) {
                                                        i16 = i34;
                                                        pollButton = pollButton2;
                                                        i17 = i14;
                                                        i18 = size;
                                                    } else {
                                                        if (isDrawSelectionBackground()) {
                                                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarSelected : Theme.key_chat_inVoiceSeekbarSelected));
                                                        } else {
                                                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbar : Theme.key_chat_inVoiceSeekbar));
                                                        }
                                                        if (this.animatePollAnswerAlpha) {
                                                            Theme.chat_replyLinePaint.setAlpha((int) ((255 - min3) * (Theme.chat_replyLinePaint.getAlpha() / 255.0f)));
                                                        }
                                                        i16 = i34;
                                                        pollButton = pollButton2;
                                                        i17 = i14;
                                                        i18 = size;
                                                        canvas.drawLine(-AndroidUtilities.dp(2.0f), pollButton2.height + AndroidUtilities.dp(13.0f), this.backgroundWidth - AndroidUtilities.dp(58.0f), pollButton2.height + AndroidUtilities.dp(13.0f), Theme.chat_replyLinePaint);
                                                        if (this.pollVoteInProgress && i17 == this.pollVoteInProgressNum) {
                                                            Theme.chat_instantViewRectPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill));
                                                            if (this.animatePollAnswerAlpha) {
                                                                Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - min3) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                                            }
                                                            this.rect.set((-AndroidUtilities.dp(22.0f)) - AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) - AndroidUtilities.dp(8.5f), (-AndroidUtilities.dp(23.0f)) + AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) + AndroidUtilities.dp(8.5f));
                                                            canvas.drawArc(this.rect, this.voteRadOffset, this.voteCurrentCircleLength, false, Theme.chat_instantViewRectPaint);
                                                        } else {
                                                            if (this.currentMessageObject.isOutOwner()) {
                                                                Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outMenuSelected : Theme.key_chat_outMenu));
                                                            } else {
                                                                Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inMenuSelected : Theme.key_chat_inMenu));
                                                            }
                                                            if (this.animatePollAnswerAlpha) {
                                                                Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - min3) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                                            }
                                                            canvas6.drawCircle(-AndroidUtilities.dp(22.0f), AndroidUtilities.dp(9.0f), AndroidUtilities.dp(8.5f), Theme.chat_instantViewRectPaint);
                                                            if (this.lastPoll.multiple_choice) {
                                                                int dp19 = AndroidUtilities.dp(8.5f);
                                                                int i35 = Theme.key_checkboxCheck;
                                                                if (this.currentMessageObject.isOutOwner() && getThemedColor(i35) == -1) {
                                                                    i35 = Theme.key_chat_outBubble;
                                                                }
                                                                this.pollCheckBox[i17].setColor(-1, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill, i35);
                                                                int i36 = dp19 / 2;
                                                                this.pollCheckBox[i17].setBounds((-AndroidUtilities.dp(22.0f)) - i36, AndroidUtilities.dp(9.0f) - i36, dp19, dp19);
                                                                this.pollCheckBox[i17].draw(canvas6);
                                                            }
                                                        }
                                                    }
                                                    canvas.restore();
                                                    if (i17 != i18 - 1) {
                                                        i33 = pollButton.y + this.namesOffset + pollButton.height;
                                                    }
                                                    i14 = i17 + 1;
                                                    size = i18;
                                                    canvas5 = canvas6;
                                                    i13 = i16;
                                                }
                                            } else {
                                                canvas6 = canvas;
                                            }
                                            if (this.pollVoted) {
                                            }
                                            i16 = i34;
                                            pollButton = pollButton2;
                                            i17 = i14;
                                            i18 = size;
                                            canvas.restore();
                                            if (i17 != i18 - 1) {
                                            }
                                            i14 = i17 + 1;
                                            size = i18;
                                            canvas5 = canvas6;
                                            i13 = i16;
                                        }
                                        canvas2 = canvas5;
                                        int i37 = i13;
                                        if (this.drawInstantView) {
                                            int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
                                            int dp20 = i33 + AndroidUtilities.dp(13.0f);
                                            if (this.currentMessageObject.isOutOwner()) {
                                                Theme.chat_instantViewPaint.setColor(getThemedColor(Theme.key_chat_outPreviewInstantText));
                                            } else {
                                                Theme.chat_instantViewPaint.setColor(getThemedColor(Theme.key_chat_inPreviewInstantText));
                                            }
                                            this.instantButtonRect.set(currentBackgroundLeft, dp20, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp20);
                                            Drawable drawable7 = this.selectorDrawable[0];
                                            if (drawable7 != null && this.selectorDrawableMaskType[0] == 2) {
                                                drawable7.setBounds(currentBackgroundLeft - AndroidUtilities.dp(this.pollInstantViewTouchesBottom ? 6.0f : 0.0f), dp20, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp20);
                                                this.selectorDrawable[0].draw(canvas2);
                                            }
                                            if (this.instantViewLayout != null) {
                                                canvas.save();
                                                canvas2.translate(currentBackgroundLeft + this.instantTextX, dp20 + AndroidUtilities.dp(14.5f));
                                                this.instantViewLayout.draw(canvas2);
                                                canvas.restore();
                                            }
                                        } else if (this.infoLayout != null) {
                                            TLRPC$Poll tLRPC$Poll2 = this.lastPoll;
                                            if (tLRPC$Poll2.public_voters || tLRPC$Poll2.multiple_choice) {
                                                i33 += AndroidUtilities.dp(6.0f);
                                            }
                                            canvas.save();
                                            canvas2.translate(i37 + this.infoX, i33 + AndroidUtilities.dp(22.0f));
                                            this.infoLayout.draw(canvas2);
                                            canvas.restore();
                                        }
                                        updatePollAnimations(j4);
                                        canvas.restore();
                                    }
                                }
                                i13 = dp;
                                canvas5 = canvas4;
                                if (Build.VERSION.SDK_INT < 21) {
                                    i19 = this.selectorDrawableMaskType[0];
                                    if (i19 == 1) {
                                    }
                                    if (i19 == i20) {
                                    }
                                    this.selectorDrawable[0].draw(canvas5);
                                    if (this.selectorDrawableMaskType[0] == i20) {
                                    }
                                }
                                size = this.pollButtons.size();
                                i14 = 0;
                                int i332 = 0;
                                while (i14 < size) {
                                }
                                canvas2 = canvas5;
                                int i372 = i13;
                                if (this.drawInstantView) {
                                }
                                updatePollAnimations(j4);
                                canvas.restore();
                            }
                        }
                        if (!this.pollClosed) {
                            tLRPC$Poll = this.lastPoll;
                            if (tLRPC$Poll.quiz) {
                                max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                                if (this.closeTimeText != null) {
                                }
                                this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(((float) max) / 1000.0f), r3);
                                this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(formatDurationNoHours));
                                this.lastPollCloseTime = max;
                                if (max <= 0) {
                                    if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                    }
                                    this.delegate.needReloadPolls();
                                }
                                int dp162 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(!this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                                if (max <= 5000) {
                                }
                                if (!this.animatePollAnswer) {
                                }
                                canvas5 = canvas;
                                canvas5.drawText(this.closeTimeText, dp162, height + AndroidUtilities.dp(11.0f), Theme.chat_timePaint);
                                Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                                dp2 = dp162 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                                int dp172 = AndroidUtilities.dp(5.1f);
                                dp3 = height + AndroidUtilities.dp(6.0f);
                                if (max > 60000) {
                                }
                                if (max <= 60000) {
                                }
                                Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                float f522 = dp2;
                                canvas.drawLine(f522 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp3 - AndroidUtilities.dp(7.5f), f522 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp3 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                float f532 = dp3;
                                canvas.drawLine(f522, f532 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f522, f532, Theme.chat_pollTimerPaint);
                                if (max <= 60000) {
                                }
                                invalidate();
                                if (Build.VERSION.SDK_INT < 21) {
                                }
                                size = this.pollButtons.size();
                                i14 = 0;
                                int i3322 = 0;
                                while (i14 < size) {
                                }
                                canvas2 = canvas5;
                                int i3722 = i13;
                                if (this.drawInstantView) {
                                }
                                updatePollAnimations(j4);
                                canvas.restore();
                            }
                            i13 = dp;
                            canvas5 = canvas4;
                            if (Build.VERSION.SDK_INT < 21) {
                            }
                            size = this.pollButtons.size();
                            i14 = 0;
                            int i33222 = 0;
                            while (i14 < size) {
                            }
                            canvas2 = canvas5;
                            int i37222 = i13;
                            if (this.drawInstantView) {
                            }
                            updatePollAnimations(j4);
                            canvas.restore();
                        }
                        tLRPC$Poll = this.lastPoll;
                        if (tLRPC$Poll.quiz) {
                        }
                        i13 = dp;
                        canvas5 = canvas4;
                        if (Build.VERSION.SDK_INT < 21) {
                        }
                        size = this.pollButtons.size();
                        i14 = 0;
                        int i332222 = 0;
                        while (i14 < size) {
                        }
                        canvas2 = canvas5;
                        int i372222 = i13;
                        if (this.drawInstantView) {
                        }
                        updatePollAnimations(j4);
                        canvas.restore();
                    } else {
                        canvas2 = canvas3;
                        str = "paintChatTimeBackground";
                        if (i25 == 12) {
                            drawContact(canvas);
                        }
                    }
                } else if (this.docTitleLayout != null) {
                    if (messageObject7.isOutOwner()) {
                        Theme.chat_locationTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                        Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outVenueInfoSelectedText : Theme.key_chat_outVenueInfoText));
                    } else {
                        Theme.chat_locationTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                        Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inVenueInfoSelectedText : Theme.key_chat_inVenueInfoText));
                    }
                    if (MessageObject.getMedia(this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive) {
                        int imageY22 = (int) (this.photoImage.getImageY2() + AndroidUtilities.dp(30.0f));
                        if (this.locationExpired) {
                            TransitionParams transitionParams5 = this.transitionParams;
                            if (!transitionParams5.animateLocationIsExpired) {
                                transitionParams5.lastDrawLocationExpireText = null;
                                transitionParams5.lastDrawDocTitleLayout = null;
                                transitionParams5.lastDrawInfoLayout = null;
                                canvas3 = canvas;
                                currentAlpha = !this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                                if (currentAlpha > 0.0f && (this.photoImage.hasNotThumb() || this.photoImage.isCrossfadingWithOldImage())) {
                                    int imageX6 = (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f));
                                    int imageY4 = (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha))));
                                    Drawable avatarLiveLocation = this.sharedResources.getAvatarLiveLocation();
                                    BaseCell.setDrawableBounds(avatarLiveLocation, imageX6, imageY4);
                                    float f57 = currentAlpha * 5.0f;
                                    avatarLiveLocation.setAlpha((int) (Math.min(1.0f, f57) * 255.0f));
                                    avatarLiveLocation.draw(canvas3);
                                    this.locationImageReceiver.setImageCoords(imageX6 + AndroidUtilities.dp(5.0f), imageY4 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                                    this.locationImageReceiver.setAlpha(Math.min(1.0f, f57));
                                    this.locationImageReceiver.draw(canvas3);
                                }
                            }
                        }
                        this.forceNotDrawTime = true;
                        StaticLayout staticLayout9 = this.docTitleLayout;
                        StaticLayout staticLayout10 = this.infoLayout;
                        TransitionParams transitionParams6 = this.transitionParams;
                        if (transitionParams6.animateLocationIsExpired) {
                            float f58 = transitionParams6.lastDrawLocationExpireProgress;
                            String str3 = transitionParams6.lastDrawLocationExpireText;
                            StaticLayout staticLayout11 = transitionParams6.lastDrawDocTitleLayout;
                            StaticLayout staticLayout12 = transitionParams6.lastDrawInfoLayout;
                            abs = f58;
                            f15 = 1.0f - transitionParams6.animateChangeProgress;
                            staticLayout4 = staticLayout12;
                            z6 = false;
                            staticLayout3 = staticLayout11;
                            formatLocationLeftTime = str3;
                        } else {
                            if (MessageObject.getMedia(this.currentMessageObject.messageOwner).period == Integer.MAX_VALUE) {
                                staticLayout3 = staticLayout9;
                                formatLocationLeftTime = "";
                                abs = 1.0f;
                                f15 = 1.0f;
                                z6 = true;
                            } else {
                                formatLocationLeftTime = LocaleController.formatLocationLeftTime(Math.abs(MessageObject.getMedia(this.currentMessageObject.messageOwner).period - (ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date)));
                                staticLayout3 = staticLayout9;
                                abs = 1.0f - (Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date) / MessageObject.getMedia(this.currentMessageObject.messageOwner).period);
                                f15 = 1.0f;
                                z6 = false;
                            }
                            staticLayout4 = staticLayout10;
                        }
                        this.rect.set(this.photoImage.getImageX2() - AndroidUtilities.dp(43.0f), imageY22 - AndroidUtilities.dp(15.0f), this.photoImage.getImageX2() - AndroidUtilities.dp(13.0f), AndroidUtilities.dp(15.0f) + imageY22);
                        if (this.currentMessageObject.isOutOwner()) {
                            Paint paint = Theme.chat_radialProgress2Paint;
                            int i38 = Theme.key_chat_outInstant;
                            paint.setColor(getThemedColor(i38));
                            Theme.chat_livePaint.setColor(getThemedColor(i38));
                        } else {
                            Paint paint2 = Theme.chat_radialProgress2Paint;
                            int i39 = Theme.key_chat_inInstant;
                            paint2.setColor(getThemedColor(i39));
                            Theme.chat_livePaint.setColor(getThemedColor(i39));
                        }
                        int alpha8 = Theme.chat_locationTitlePaint.getAlpha();
                        int alpha9 = Theme.chat_locationAddressPaint.getAlpha();
                        int alpha10 = Theme.chat_livePaint.getAlpha();
                        if (f15 != 1.0f) {
                            Theme.chat_locationTitlePaint.setAlpha((int) (alpha8 * f15));
                            Theme.chat_locationAddressPaint.setAlpha((int) (alpha9 * f15));
                            Theme.chat_livePaint.setAlpha((int) (alpha10 * f15));
                            canvas.save();
                            canvas7 = canvas;
                            canvas7.translate(0.0f, (-AndroidUtilities.dp(50.0f)) * this.transitionParams.animateChangeProgress);
                        } else {
                            canvas7 = canvas;
                        }
                        Theme.chat_radialProgress2Paint.setAlpha((int) (f15 * 50.0f));
                        canvas7.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(15.0f), Theme.chat_radialProgress2Paint);
                        Theme.chat_radialProgress2Paint.setAlpha((int) (f15 * 255.0f));
                        canvas3 = canvas7;
                        StaticLayout staticLayout13 = staticLayout4;
                        String str4 = formatLocationLeftTime;
                        StaticLayout staticLayout14 = staticLayout3;
                        canvas.drawArc(this.rect, -90.0f, abs * (-360.0f), false, Theme.chat_radialProgress2Paint);
                        if (z6) {
                            if (this.foreverDrawable == null) {
                                this.foreverDrawable = getContext().getResources().getDrawable(R.drawable.filled_location_forever).mutate();
                            }
                            if (Theme.chat_livePaint.getColor() != this.foreverDrawableColor) {
                                Drawable drawable8 = this.foreverDrawable;
                                int color = Theme.chat_livePaint.getColor();
                                this.foreverDrawableColor = color;
                                drawable8.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.SRC_IN));
                            }
                            this.foreverDrawable.setBounds(((int) this.rect.centerX()) - (this.foreverDrawable.getIntrinsicWidth() / 2), ((int) this.rect.centerY()) - (this.foreverDrawable.getIntrinsicHeight() / 2), ((int) this.rect.centerX()) + (this.foreverDrawable.getIntrinsicWidth() / 2), ((int) this.rect.centerY()) + (this.foreverDrawable.getIntrinsicHeight() / 2));
                            this.foreverDrawable.draw(canvas3);
                        } else {
                            float measureText = Theme.chat_livePaint.measureText(str4);
                            int length2 = str4.length();
                            float f59 = length2 > 4 ? 0.75f : length2 > 3 ? 0.85f : 1.0f;
                            canvas.save();
                            canvas3.scale(f59, f59, this.rect.centerX(), this.rect.centerY());
                            canvas3.drawText(str4, this.rect.centerX() - (measureText / 2.0f), imageY22 + AndroidUtilities.dp(4.0f), Theme.chat_livePaint);
                            canvas.restore();
                        }
                        if (staticLayout14 != null && staticLayout13 != null) {
                            canvas.save();
                            canvas3.translate(this.photoImage.getImageX() + AndroidUtilities.dp(10.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(10.0f));
                            staticLayout14.draw(canvas3);
                            canvas3.translate(0.0f, AndroidUtilities.dp(23.0f));
                            staticLayout13.draw(canvas3);
                            canvas.restore();
                        }
                        if (f15 != 1.0f) {
                            Theme.chat_locationTitlePaint.setAlpha(alpha8);
                            Theme.chat_locationAddressPaint.setAlpha(alpha9);
                            Theme.chat_livePaint.setAlpha(alpha10);
                            canvas.restore();
                        }
                        TransitionParams transitionParams7 = this.transitionParams;
                        transitionParams7.lastDrawLocationExpireProgress = abs;
                        transitionParams7.lastDrawLocationExpireText = str4;
                        transitionParams7.lastDrawDocTitleLayout = staticLayout14;
                        transitionParams7.lastDrawInfoLayout = staticLayout13;
                        if (!this.photoImage.isCrossfadingWithOldImage()) {
                        }
                        if (currentAlpha > 0.0f) {
                            int imageX62 = (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f));
                            int imageY42 = (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha))));
                            Drawable avatarLiveLocation2 = this.sharedResources.getAvatarLiveLocation();
                            BaseCell.setDrawableBounds(avatarLiveLocation2, imageX62, imageY42);
                            float f572 = currentAlpha * 5.0f;
                            avatarLiveLocation2.setAlpha((int) (Math.min(1.0f, f572) * 255.0f));
                            avatarLiveLocation2.draw(canvas3);
                            this.locationImageReceiver.setImageCoords(imageX62 + AndroidUtilities.dp(5.0f), imageY42 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                            this.locationImageReceiver.setAlpha(Math.min(1.0f, f572));
                            this.locationImageReceiver.draw(canvas3);
                        }
                    } else {
                        canvas3 = canvas;
                        canvas.save();
                        canvas3.translate(this.photoImage.getImageX() + AndroidUtilities.dp(6.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(8.0f));
                        this.docTitleLayout.draw(canvas3);
                        if (this.infoLayout != null) {
                            canvas3.translate(0.0f, AndroidUtilities.dp(21.0f));
                            this.infoLayout.draw(canvas3);
                        }
                        canvas.restore();
                    }
                }
                canvas2 = canvas3;
                str2 = "paintChatTimeBackground";
                f5 = 14.0f;
                if (this.drawImageButton) {
                }
                messageDrawable = null;
                if (this.buttonState == -1) {
                }
                if (z7) {
                }
                i23 = -1;
                animatedFloat = this.timerParticlesAlpha;
                if (animatedFloat == null) {
                }
                if (f16 > f17) {
                }
                if (!this.drawVideoImageButton) {
                }
                messageObject3 = this.currentMessageObject;
                if (!messageObject3.isRepostPreview) {
                }
                if (this.drawMediaCheckBox) {
                }
                if (this.documentAttachType == 7) {
                }
                if (this.drawPhotoImage) {
                }
            }
            str2 = str;
            f5 = 14.0f;
            if (this.drawImageButton) {
            }
            messageDrawable = null;
            if (this.buttonState == -1) {
            }
            if (z7) {
            }
            i23 = -1;
            animatedFloat = this.timerParticlesAlpha;
            if (animatedFloat == null) {
            }
            if (f16 > f17) {
            }
            if (!this.drawVideoImageButton) {
            }
            messageObject3 = this.currentMessageObject;
            if (!messageObject3.isRepostPreview) {
            }
            if (this.drawMediaCheckBox) {
            }
            if (this.documentAttachType == 7) {
            }
            if (this.drawPhotoImage) {
            }
        }
        canvas2 = canvas;
        str2 = "paintChatTimeBackground";
        f5 = 14.0f;
        if (this.drawImageButton) {
        }
        messageDrawable = null;
        if (this.buttonState == -1) {
        }
        if (z7) {
        }
        i23 = -1;
        animatedFloat = this.timerParticlesAlpha;
        if (animatedFloat == null) {
        }
        if (f16 > f17) {
        }
        if (!this.drawVideoImageButton) {
        }
        messageObject3 = this.currentMessageObject;
        if (!messageObject3.isRepostPreview) {
        }
        if (this.drawMediaCheckBox) {
        }
        if (this.documentAttachType == 7) {
        }
        if (this.drawPhotoImage) {
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x009d, code lost:
        if (r3 < 1.0f) goto L21;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawRadialProgress(Canvas canvas) {
        MessageObject messageObject;
        boolean isRoundOnce = this.currentMessageObject.isRoundOnce();
        if (isRoundOnce) {
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.radialProgress.getProgressRect());
            rectF.inset(-AndroidUtilities.dp(15.0f), -AndroidUtilities.dp(15.0f));
            canvas.saveLayerAlpha(rectF, (int) (this.radialProgressAlpha * 255.0f), 31);
        } else {
            canvas.save();
            int i = this.currentMessageObject.type;
            if (this.drawPhotoImage && (i == 3 || i == 1 || i == 8)) {
                canvas.clipRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
            }
        }
        if (this.currentMessageObject.needDrawBluredPreview()) {
            drawPhotoBlurRect(canvas, this.radialProgress.getProgressRect());
        }
        this.radialProgress.iconScale = 1.0f;
        if (this.drawPhotoImage && (messageObject = this.currentMessageObject) != null && messageObject.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                float f = this.mediaSpoilerRevealProgress;
                if (f != 0.0f) {
                }
            }
            this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
        }
        this.radialProgress.draw(canvas);
        if (isRoundOnce) {
            canvas.save();
            drawPhotoBlurRect(canvas, getRadialProgress().getProgressRect());
            getRadialProgress().draw(canvas);
            RectF progressRect = getRadialProgress().getProgressRect();
            float centerX = progressRect.centerX() + AndroidUtilities.dp(18.0f);
            float centerY = progressRect.centerY() + AndroidUtilities.dp(18.0f);
            float dp = AndroidUtilities.dp(10.0f);
            float dp2 = AndroidUtilities.dp(1.33f) + dp;
            if (this.clipPaint == null) {
                Paint paint = new Paint(1);
                this.clipPaint = paint;
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            canvas.drawCircle(centerX, centerY, dp2, this.clipPaint);
            RectF rectF2 = AndroidUtilities.rectTmp;
            rectF2.set(centerX - dp, centerY - dp, centerX + dp, dp + centerY);
            drawPhotoBlurRect(canvas, rectF2);
            if (this.oncePeriod == null) {
                CaptionContainerView.PeriodDrawable periodDrawable = new CaptionContainerView.PeriodDrawable(3);
                this.oncePeriod = periodDrawable;
                periodDrawable.updateColors(-1, 0, 0);
                CaptionContainerView.PeriodDrawable periodDrawable2 = this.oncePeriod;
                periodDrawable2.diameterDp = 14.0f;
                periodDrawable2.setTextSize(10.0f);
                this.oncePeriod.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.5f));
                this.oncePeriod.setValue(1, false, false);
                this.oncePeriod.textOffsetX = -AndroidUtilities.dpf2(0.33f);
                this.oncePeriod.textOffsetY = AndroidUtilities.dpf2(0.33f);
            }
            CaptionContainerView.PeriodDrawable periodDrawable3 = this.oncePeriod;
            periodDrawable3.diameterDp = 14.0f;
            periodDrawable3.setTextSize(10.0f);
            this.oncePeriod.setClear(false);
            this.oncePeriod.setCenterXY(centerX, centerY);
            this.oncePeriod.draw(canvas, 1.0f);
            canvas.restore();
        }
        canvas.restore();
    }

    protected void drawPhotoBlurRect(Canvas canvas, RectF rectF) {
        this.rectPath.rewind();
        this.rectPath.addRoundRect(rectF, rectF.width() / 2.0f, rectF.height() / 2.0f, Path.Direction.CW);
        canvas.save();
        canvas.clipPath(this.rectPath);
        float alpha = this.photoImage.getAlpha();
        this.photoImage.setAlpha((this.currentMessageObject.isRoundOnce() ? 1.0f : 0.5f) * alpha);
        this.photoImage.draw(canvas);
        this.photoImage.setAlpha(alpha);
        canvas.restore();
        Paint themedPaint = getThemedPaint("paintChatTimeBackground");
        int alpha2 = themedPaint.getAlpha();
        themedPaint.setAlpha((int) (alpha2 * this.controlsAlpha * 0.4f));
        canvas.drawRoundRect(rectF, rectF.width() / 2.0f, rectF.height() / 2.0f, themedPaint);
        themedPaint.setAlpha(alpha2);
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public int getObserverTag() {
        return this.TAG;
    }

    public MessageObject getMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        return messageObject != null ? messageObject : this.currentMessageObject;
    }

    public TLRPC$Document getStreamingMedia() {
        int i = this.documentAttachType;
        if (i == 4 || i == 7 || i == 2) {
            return this.documentAttach;
        }
        return null;
    }

    public boolean drawPinnedBottom() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition == null || (groupedMessagePosition.flags & 8) == 0) {
                return true;
            }
            return this.pinnedBottom;
        }
        return this.pinnedBottom;
    }

    public float getVideoTranscriptionProgress() {
        MessageObject messageObject;
        if (this.transitionParams == null || (messageObject = this.currentMessageObject) == null || !messageObject.isRoundVideo()) {
            return 1.0f;
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateDrawBackground) {
            return this.drawBackground ? 1.0f : 0.0f;
        } else if (this.drawBackground) {
            return transitionParams.animateChangeProgress;
        } else {
            return 1.0f - transitionParams.animateChangeProgress;
        }
    }

    public boolean drawPinnedTop() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition == null || (groupedMessagePosition.flags & 4) == 0) {
                return true;
            }
            return this.pinnedTop;
        }
        return this.pinnedTop;
    }

    public boolean isPinnedBottom() {
        if (this.messageObjectToSet != null) {
            return this.bottomNearToSet;
        }
        return this.pinnedBottom;
    }

    public boolean isPinnedTop() {
        if (this.messageObjectToSet != null) {
            return this.topNearToSet;
        }
        return this.pinnedTop;
    }

    public MessageObject.GroupedMessages getCurrentMessagesGroup() {
        return this.currentMessagesGroup;
    }

    public MessageObject.GroupedMessagePosition getCurrentPosition() {
        return this.currentPosition;
    }

    public int getLayoutHeight() {
        return this.layoutHeight;
    }

    @Override // android.view.View
    public boolean performAccessibilityAction(int i, Bundle bundle) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 == null || !chatMessageCellDelegate2.onAccessibilityAction(i, bundle)) {
            if (i == 16) {
                int iconForCurrentState = getIconForCurrentState();
                if (iconForCurrentState != 4 && iconForCurrentState != 5) {
                    didPressButton(true, false);
                } else if (this.currentMessageObject.type == 16) {
                    this.delegate.didPressOther(this, this.otherX, this.otherY);
                } else {
                    didClickedImage();
                }
                return true;
            }
            if (i == R.id.acc_action_small_button) {
                didPressMiniButton(true);
            } else if (i == R.id.acc_action_msg_options) {
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 != null) {
                    if (this.currentMessageObject.type == 16) {
                        chatMessageCellDelegate3.didLongPress(this, 0.0f, 0.0f);
                    } else {
                        chatMessageCellDelegate3.didPressOther(this, this.otherX, this.otherY);
                    }
                }
            } else if (i == R.id.acc_action_open_forwarded_origin && (chatMessageCellDelegate = this.delegate) != null) {
                TLRPC$Chat tLRPC$Chat = this.currentForwardChannel;
                if (tLRPC$Chat != null) {
                    chatMessageCellDelegate.didPressChannelAvatar(this, tLRPC$Chat, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY, false);
                } else {
                    TLRPC$User tLRPC$User = this.currentForwardUser;
                    if (tLRPC$User != null) {
                        chatMessageCellDelegate.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY, false);
                    } else if (this.currentForwardName != null) {
                        chatMessageCellDelegate.didPressHiddenForward(this);
                    }
                }
            }
            if ((this.currentMessageObject.isVoice() || this.currentMessageObject.isRoundVideo() || (this.currentMessageObject.isMusic() && MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) && this.seekBarAccessibilityDelegate.performAccessibilityActionInternal(i, bundle)) {
                return true;
            }
            return super.performAccessibilityAction(i, bundle);
        }
        return false;
    }

    public void setAnimationRunning(boolean z, boolean z2) {
        this.animationRunning = z;
        if (z) {
            this.willRemoved = z2;
        } else {
            this.willRemoved = false;
        }
    }

    @Override // android.view.View
    public boolean onHoverEvent(MotionEvent motionEvent) {
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 9 || motionEvent.getAction() == 7) {
            for (int i = 0; i < this.accessibilityVirtualViewBounds.size(); i++) {
                if (this.accessibilityVirtualViewBounds.valueAt(i).contains(x, y)) {
                    int keyAt = this.accessibilityVirtualViewBounds.keyAt(i);
                    if (keyAt != this.currentFocusedVirtualView) {
                        this.currentFocusedVirtualView = keyAt;
                        sendAccessibilityEventForVirtualView(keyAt, LiteMode.FLAG_CHAT_SCALE);
                        return true;
                    }
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 10) {
            this.currentFocusedVirtualView = 0;
        }
        return super.onHoverEvent(motionEvent);
    }

    @Override // android.view.View
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
    }

    @Override // android.view.View
    public AccessibilityNodeProvider getAccessibilityNodeProvider() {
        return new MessageAccessibilityNodeProvider();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendAccessibilityEventForVirtualView(int i, int i2) {
        sendAccessibilityEventForVirtualView(i, i2, null);
    }

    private void sendAccessibilityEventForVirtualView(int i, int i2, String str) {
        if (((AccessibilityManager) getContext().getSystemService("accessibility")).isTouchExplorationEnabled()) {
            AccessibilityEvent obtain = AccessibilityEvent.obtain(i2);
            obtain.setPackageName(getContext().getPackageName());
            obtain.setSource(this, i);
            if (str != null) {
                obtain.getText().add(str);
            }
            if (getParent() != null) {
                getParent().requestSendAccessibilityEvent(this, obtain);
            }
        }
    }

    public static Point getMessageSize(int i, int i2) {
        return getMessageSize(i, i2, 0, 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:13:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x004c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static Point getMessageSize(int i, int i2, int i3, int i4) {
        int min;
        if (i4 == 0 || i3 == 0) {
            if (AndroidUtilities.isTablet()) {
                min = AndroidUtilities.getMinTabletSide();
            } else if (i >= i2) {
                android.graphics.Point point = AndroidUtilities.displaySize;
                i3 = Math.min(point.x, point.y) - AndroidUtilities.dp(64.0f);
                i4 = AndroidUtilities.dp(100.0f) + i3;
                if (i3 > AndroidUtilities.getPhotoSize()) {
                    i3 = AndroidUtilities.getPhotoSize();
                }
                if (i4 > AndroidUtilities.getPhotoSize()) {
                    i4 = AndroidUtilities.getPhotoSize();
                }
            } else {
                android.graphics.Point point2 = AndroidUtilities.displaySize;
                min = Math.min(point2.x, point2.y);
            }
            i3 = (int) (min * 0.7f);
            i4 = AndroidUtilities.dp(100.0f) + i3;
            if (i3 > AndroidUtilities.getPhotoSize()) {
            }
            if (i4 > AndroidUtilities.getPhotoSize()) {
            }
        }
        float f = i;
        float f2 = i3;
        float f3 = f / f2;
        int i5 = (int) (f / f3);
        float f4 = i2;
        int i6 = (int) (f4 / f3);
        if (i5 == 0) {
            i5 = AndroidUtilities.dp(150.0f);
        }
        if (i6 == 0) {
            i6 = AndroidUtilities.dp(150.0f);
        }
        if (i6 > i4) {
            i5 = (int) (i5 / (i6 / i4));
        } else if (i6 < AndroidUtilities.dp(120.0f)) {
            i4 = AndroidUtilities.dp(120.0f);
            float f5 = f / (f4 / i4);
            if (f5 < f2) {
                i5 = (int) f5;
            }
        } else {
            i4 = i6;
        }
        return new Point(i5, i4);
    }

    public StaticLayout getDescriptionlayout() {
        return this.descriptionLayout;
    }

    public StaticLayout getFactCheckLayout() {
        return this.factCheckTextLayout;
    }

    public void setSelectedBackgroundProgress(float f) {
        this.selectedBackgroundProgress = f;
        invalidate();
    }

    public int computeHeight(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages != null && groupedMessages.messages.size() != 1) {
            if (groupedMessages.messages.size() != groupedMessages.positions.size()) {
                groupedMessages.calculate();
            }
            this.computedGroupCaptionY = 0;
            int i = 0;
            for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i2);
                MessageObject.GroupedMessagePosition position = groupedMessages.getPosition(messageObject2);
                if (position != null && (position.flags & 1) != 0) {
                    setMessageContent(messageObject2, groupedMessages, false, false);
                    if (z && !TextUtils.isEmpty(this.currentCaption)) {
                        updateCaptionLayout();
                        this.computedGroupCaptionY = (int) (i + this.captionY);
                        this.computedCaptionLayout = this.captionLayout;
                    }
                    i += this.totalHeight + this.keyboardHeight;
                }
            }
            return i;
        }
        setMessageContent(messageObject, groupedMessages, false, false);
        this.photoImage.setIgnoreImageSet(false);
        this.avatarImage.setIgnoreImageSet(false);
        this.replyImageReceiver.setIgnoreImageSet(false);
        this.locationImageReceiver.setIgnoreImageSet(false);
        updateCaptionLayout();
        return this.totalHeight + this.keyboardHeight;
    }

    public int computeWidth(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages != null && groupedMessages.messages.size() != 1) {
            if (groupedMessages.messages.size() != groupedMessages.positions.size()) {
                groupedMessages.calculate();
            }
            this.computedGroupCaptionY = 0;
            int i = 0;
            for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i2);
                MessageObject.GroupedMessagePosition position = groupedMessages.getPosition(messageObject2);
                if (position != null && (position.flags & 4) != 0) {
                    setMessageContent(messageObject2, groupedMessages, false, false);
                    i += this.backgroundWidth;
                }
            }
            return i;
        }
        setMessageContent(messageObject, groupedMessages, false, false);
        this.photoImage.setIgnoreImageSet(false);
        this.avatarImage.setIgnoreImageSet(false);
        this.replyImageReceiver.setIgnoreImageSet(false);
        this.locationImageReceiver.setIgnoreImageSet(false);
        updateCaptionLayout();
        return this.backgroundWidth;
    }

    public void shakeView() {
        PropertyValuesHolder ofKeyframe = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0.0f, 0.0f), Keyframe.ofFloat(0.2f, 3.0f), Keyframe.ofFloat(0.4f, -3.0f), Keyframe.ofFloat(0.6f, 3.0f), Keyframe.ofFloat(0.8f, -3.0f), Keyframe.ofFloat(1.0f, 0.0f));
        Keyframe ofFloat = Keyframe.ofFloat(0.0f, 1.0f);
        Keyframe ofFloat2 = Keyframe.ofFloat(0.5f, 0.97f);
        Keyframe ofFloat3 = Keyframe.ofFloat(1.0f, 1.0f);
        PropertyValuesHolder ofKeyframe2 = PropertyValuesHolder.ofKeyframe(View.SCALE_X, ofFloat, ofFloat2, ofFloat3);
        PropertyValuesHolder ofKeyframe3 = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, ofFloat, ofFloat2, ofFloat3);
        AnimatorSet animatorSet = new AnimatorSet();
        this.shakeAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe2), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe3));
        this.shakeAnimation.setDuration(500L);
        this.shakeAnimation.start();
    }

    private void cancelShakeAnimation() {
        AnimatorSet animatorSet = this.shakeAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.shakeAnimation = null;
            setScaleX(1.0f);
            setScaleY(1.0f);
            setRotation(0.0f);
        }
    }

    public void setSlidingOffset(float f) {
        if (this.slidingOffsetX != f) {
            this.slidingOffsetX = f;
            updateTranslation();
        }
    }

    public void setAnimationOffsetX(float f) {
        if (this.animationOffsetX != f) {
            this.animationOffsetX = f;
            updateTranslation();
        }
    }

    private void updateTranslation() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        setTranslationX(this.slidingOffsetX + this.animationOffsetX + ((!messageObject.isOutOwner() || this.currentMessageObject.hasWideCode) ? this.checkBoxTranslation : 0));
    }

    public float getNonAnimationTranslationX(boolean z) {
        boolean z2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isOutOwner()) {
            if (z && ((z2 = this.checkBoxVisible) || this.checkBoxAnimationInProgress)) {
                this.checkBoxTranslation = (int) Math.ceil((z2 ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            }
            return this.slidingOffsetX + this.checkBoxTranslation;
        }
        return this.slidingOffsetX;
    }

    public float getSlidingOffsetX() {
        return this.slidingOffsetX;
    }

    public boolean willRemovedAfterAnimation() {
        return this.willRemoved;
    }

    public float getAnimationOffsetX() {
        return this.animationOffsetX;
    }

    @Override // android.view.View
    public void setTranslationX(float f) {
        super.setTranslationX(f);
    }

    public SeekBar getSeekBar() {
        return this.seekBar;
    }

    public SeekBarWaveform getSeekBarWaveform() {
        return this.seekBarWaveform;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes4.dex */
    public class MessageAccessibilityNodeProvider extends AccessibilityNodeProvider {
        private Path linkPath;
        private Rect rect;
        private RectF rectF;

        private MessageAccessibilityNodeProvider() {
            this.linkPath = new Path();
            this.rectF = new RectF();
            this.rect = new Rect();
        }

        /* loaded from: classes4.dex */
        private class ProfileSpan extends ClickableSpan {
            private TLRPC$User user;

            public ProfileSpan(TLRPC$User tLRPC$User) {
                this.user = tLRPC$User;
            }

            @Override // android.text.style.ClickableSpan
            public void onClick(View view) {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.didPressUserAvatar(ChatMessageCell.this, this.user, 0.0f, 0.0f, false);
                }
            }
        }

        @Override // android.view.accessibility.AccessibilityNodeProvider
        public AccessibilityNodeInfo createAccessibilityNodeInfo(int i) {
            boolean z;
            int i2;
            String str;
            String formatShortNumber;
            int i3;
            String str2;
            boolean z2;
            boolean z3;
            String str3;
            AccessibilityNodeInfo accessibilityNodeInfo;
            long j;
            int i4;
            CharacterStyle[] characterStyleArr;
            TLRPC$ReactionCount tLRPC$ReactionCount;
            boolean z4;
            TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction;
            int i5;
            String str4;
            String string;
            AccessibilityNodeInfo accessibilityNodeInfo2;
            CharacterStyle[] characterStyleArr2;
            CharacterStyle[] characterStyleArr3;
            String str5;
            String string2;
            int[] iArr = {0, 0};
            ChatMessageCell.this.getLocationOnScreen(iArr);
            if (i == -1) {
                AccessibilityNodeInfo obtain = AccessibilityNodeInfo.obtain(ChatMessageCell.this);
                ChatMessageCell.this.onInitializeAccessibilityNodeInfo(obtain);
                boolean z5 = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOut() && !ChatMessageCell.this.currentMessageObject.scheduled && ChatMessageCell.this.currentMessageObject.isUnread();
                boolean z6 = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isContentUnread();
                long j2 = ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.loadedFileSize : 0L;
                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                if (chatMessageCell.accessibilityText != null && chatMessageCell.accessibilityTextUnread == z5 && ChatMessageCell.this.accessibilityTextContentUnread == z6 && ChatMessageCell.this.accessibilityTextFileSize == j2) {
                    accessibilityNodeInfo = obtain;
                    str3 = "AccActionDownload";
                } else {
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                    ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                    str3 = "AccActionDownload";
                    if (!chatMessageCell2.isChat || chatMessageCell2.currentUser == null || ChatMessageCell.this.currentMessageObject.isOut()) {
                        accessibilityNodeInfo = obtain;
                    } else {
                        spannableStringBuilder.append((CharSequence) UserObject.getUserName(ChatMessageCell.this.currentUser));
                        accessibilityNodeInfo = obtain;
                        spannableStringBuilder.setSpan(new ProfileSpan(ChatMessageCell.this.currentUser), 0, spannableStringBuilder.length(), 33);
                        spannableStringBuilder.append('\n');
                    }
                    if (ChatMessageCell.this.drawForwardedName) {
                        int i6 = 0;
                        while (i6 < 2) {
                            if (ChatMessageCell.this.forwardedNameLayout[i6] != null && ChatMessageCell.this.forwardedNameLayout[i6].getText() != null) {
                                spannableStringBuilder.append(ChatMessageCell.this.forwardedNameLayout[i6].getText());
                                spannableStringBuilder.append(i6 == 0 ? " " : "\n");
                            }
                            i6++;
                        }
                    }
                    if (ChatMessageCell.this.documentAttach != null && ChatMessageCell.this.documentAttachType == 1) {
                        String attachFileName = FileLoader.getAttachFileName(ChatMessageCell.this.documentAttach);
                        if (attachFileName.indexOf(46) != -1) {
                            spannableStringBuilder.append((CharSequence) LocaleController.formatString(R.string.AccDescrDocumentType, attachFileName.substring(attachFileName.lastIndexOf(46) + 1).toUpperCase(Locale.ROOT)));
                        }
                    }
                    if (!TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.messageText)) {
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.messageText);
                    }
                    if (ChatMessageCell.this.documentAttach == null || !((ChatMessageCell.this.documentAttachType == 1 || ChatMessageCell.this.documentAttachType == 2 || ChatMessageCell.this.documentAttachType == 4) && ChatMessageCell.this.buttonState == 1 && ChatMessageCell.this.loadingProgressLayout != null)) {
                        j = j2;
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        boolean isSending = ChatMessageCell.this.currentMessageObject.isSending();
                        j = j2;
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString(isSending ? "AccDescrUploadProgress" : "AccDescrDownloadProgress", isSending ? R.string.AccDescrUploadProgress : R.string.AccDescrDownloadProgress, AndroidUtilities.formatFileSize(ChatMessageCell.this.currentMessageObject.loadedFileSize), AndroidUtilities.formatFileSize(ChatMessageCell.this.lastLoadingSizeTotal)));
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isMusic()) {
                        if (ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.isRoundVideo) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration()));
                            spannableStringBuilder.append((CharSequence) ", ");
                            if (ChatMessageCell.this.currentMessageObject.isContentUnread()) {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgNotPlayed", R.string.AccDescrMsgNotPlayed));
                            } else {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgPlayed", R.string.AccDescrMsgPlayed));
                            }
                        }
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, ChatMessageCell.this.currentMessageObject.getMusicAuthor(), ChatMessageCell.this.currentMessageObject.getMusicTitle()));
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration()));
                    }
                    if (ChatMessageCell.this.lastPoll != null) {
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) ChatMessageCell.this.lastPoll.question.text);
                        spannableStringBuilder.append((CharSequence) ", ");
                        if (!ChatMessageCell.this.pollClosed) {
                            if (ChatMessageCell.this.lastPoll.quiz) {
                                if (ChatMessageCell.this.lastPoll.public_voters) {
                                    string = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                } else {
                                    string = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                }
                            } else if (ChatMessageCell.this.lastPoll.public_voters) {
                                string = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                            } else {
                                string = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                            }
                        } else {
                            string = LocaleController.getString("FinalResults", R.string.FinalResults);
                        }
                        spannableStringBuilder.append((CharSequence) string);
                    }
                    if (ChatMessageCell.this.documentAttach != null) {
                        if (ChatMessageCell.this.documentAttachType == 4) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration()));
                        }
                        if (ChatMessageCell.this.buttonState == 0 || ChatMessageCell.this.documentAttachType == 1) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) AndroidUtilities.formatFileSize(ChatMessageCell.this.documentAttach.size));
                        }
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                        if (MessageObject.getMedia(ChatMessageCell.this.currentMessageObject.messageOwner) != null && !TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.caption)) {
                            spannableStringBuilder.append((CharSequence) "\n");
                            spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.caption);
                        }
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.getVoiceTranscription());
                    }
                    if (ChatMessageCell.this.currentMessageObject.isOut()) {
                        if (!ChatMessageCell.this.currentMessageObject.isSent()) {
                            if (!ChatMessageCell.this.currentMessageObject.isSending()) {
                                if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSendingError", R.string.AccDescrMsgSendingError));
                                }
                            } else {
                                spannableStringBuilder.append((CharSequence) "\n");
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSending", R.string.AccDescrMsgSending));
                                float progress = ChatMessageCell.this.radialProgress.getProgress();
                                if (progress > 0.0f) {
                                    spannableStringBuilder.append((CharSequence) Integer.toString(Math.round(progress * 100.0f))).append((CharSequence) "%");
                                }
                            }
                        } else {
                            spannableStringBuilder.append((CharSequence) "\n");
                            if (ChatMessageCell.this.currentMessageObject.scheduled) {
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrScheduledDate", R.string.AccDescrScheduledDate, ChatMessageCell.this.currentTimeString));
                            } else {
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString)));
                                spannableStringBuilder.append((CharSequence) ", ");
                                if (ChatMessageCell.this.currentMessageObject.isUnread()) {
                                    i5 = R.string.AccDescrMsgUnread;
                                    str4 = "AccDescrMsgUnread";
                                } else {
                                    i5 = R.string.AccDescrMsgRead;
                                    str4 = "AccDescrMsgRead";
                                }
                                spannableStringBuilder.append((CharSequence) LocaleController.getString(str4, i5));
                            }
                        }
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString)));
                    }
                    if (ChatMessageCell.this.getRepliesCount() > 0 && !ChatMessageCell.this.hasCommentLayout()) {
                        spannableStringBuilder.append((CharSequence) "\n");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfReplies", ChatMessageCell.this.getRepliesCount(), new Object[0]));
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null && ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results != null) {
                        String str6 = "";
                        if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size() == 1) {
                            TLRPC$ReactionCount tLRPC$ReactionCount2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(0);
                            TLRPC$Reaction tLRPC$Reaction = tLRPC$ReactionCount2.reaction;
                            String str7 = tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon : "";
                            int i7 = tLRPC$ReactionCount2.count;
                            if (i7 == 1) {
                                spannableStringBuilder.append((CharSequence) "\n");
                                if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions == null || ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.size() != 1 || (tLRPC$MessagePeerReaction = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.get(0)) == null) {
                                    z4 = false;
                                } else {
                                    TLRPC$User user = MessagesController.getInstance(ChatMessageCell.this.currentAccount).getUser(Long.valueOf(MessageObject.getPeerId(tLRPC$MessagePeerReaction.peer_id)));
                                    z4 = UserObject.isUserSelf(user);
                                    if (user != null) {
                                        str6 = UserObject.getFirstName(user);
                                    }
                                }
                                if (z4) {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, str7));
                                } else {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReactedWith", R.string.AccDescrReactedWith, str6, str7));
                                }
                            } else if (i7 > 1) {
                                spannableStringBuilder.append((CharSequence) "\n");
                                spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfPeopleReactions", tLRPC$ReactionCount2.count, str7));
                            }
                        } else {
                            spannableStringBuilder.append((CharSequence) LocaleController.getString("Reactions", R.string.Reactions)).append((CharSequence) ": ");
                            int size = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size();
                            int i8 = 0;
                            while (i8 < size) {
                                TLRPC$Reaction tLRPC$Reaction2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(i8).reaction;
                                spannableStringBuilder.append((CharSequence) (tLRPC$Reaction2 instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction2).emoticon : "")).append((CharSequence) " ").append((CharSequence) (tLRPC$ReactionCount.count + ""));
                                i8++;
                                if (i8 < size) {
                                    spannableStringBuilder.append((CharSequence) ", ");
                                }
                            }
                            spannableStringBuilder.append((CharSequence) "\n");
                        }
                    }
                    if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) != 0) {
                        spannableStringBuilder.append((CharSequence) "\n");
                        i4 = 0;
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfViews", ChatMessageCell.this.currentMessageObject.messageOwner.views, new Object[0]));
                    } else {
                        i4 = 0;
                    }
                    spannableStringBuilder.append((CharSequence) "\n");
                    for (final CharacterStyle characterStyle : (CharacterStyle[]) spannableStringBuilder.getSpans(i4, spannableStringBuilder.length(), ClickableSpan.class)) {
                        int spanStart = spannableStringBuilder.getSpanStart(characterStyle);
                        int spanEnd = spannableStringBuilder.getSpanEnd(characterStyle);
                        spannableStringBuilder.removeSpan(characterStyle);
                        spannableStringBuilder.setSpan(new ClickableSpan() { // from class: org.telegram.ui.Cells.ChatMessageCell.MessageAccessibilityNodeProvider.1
                            @Override // android.text.style.ClickableSpan
                            public void onClick(View view) {
                                CharacterStyle characterStyle2 = characterStyle;
                                if (!(characterStyle2 instanceof ProfileSpan)) {
                                    if (ChatMessageCell.this.delegate != null) {
                                        ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, characterStyle, false);
                                        return;
                                    }
                                    return;
                                }
                                ((ProfileSpan) characterStyle2).onClick(view);
                            }
                        }, spanStart, spanEnd, 33);
                    }
                    ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                    chatMessageCell3.accessibilityText = spannableStringBuilder;
                    chatMessageCell3.accessibilityTextUnread = z5;
                    ChatMessageCell.this.accessibilityTextContentUnread = z6;
                    ChatMessageCell.this.accessibilityTextFileSize = j;
                }
                int i9 = Build.VERSION.SDK_INT;
                if (i9 < 24) {
                    accessibilityNodeInfo2 = accessibilityNodeInfo;
                    accessibilityNodeInfo2.setContentDescription(ChatMessageCell.this.accessibilityText.toString());
                } else {
                    accessibilityNodeInfo2 = accessibilityNodeInfo;
                    accessibilityNodeInfo2.setText(ChatMessageCell.this.accessibilityText);
                }
                accessibilityNodeInfo2.setEnabled(true);
                AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo = accessibilityNodeInfo2.getCollectionItemInfo();
                if (collectionItemInfo != null) {
                    accessibilityNodeInfo2.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo.obtain(collectionItemInfo.getRowIndex(), 1, 0, 1, false));
                }
                if (i9 >= 21) {
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_msg_options, LocaleController.getString("AccActionMessageOptions", R.string.AccActionMessageOptions)));
                    int iconForCurrentState = ChatMessageCell.this.getIconForCurrentState();
                    if (iconForCurrentState == 0) {
                        str5 = str3;
                        string2 = LocaleController.getString("AccActionPlay", R.string.AccActionPlay);
                    } else if (iconForCurrentState == 1) {
                        str5 = str3;
                        string2 = LocaleController.getString("AccActionPause", R.string.AccActionPause);
                    } else if (iconForCurrentState != 2) {
                        if (iconForCurrentState == 3) {
                            string2 = LocaleController.getString("AccActionCancelDownload", R.string.AccActionCancelDownload);
                        } else if (iconForCurrentState != 5) {
                            if (ChatMessageCell.this.currentMessageObject.type == 16) {
                                string2 = LocaleController.getString("CallAgain", R.string.CallAgain);
                            } else {
                                str5 = str3;
                                string2 = null;
                            }
                        } else {
                            string2 = LocaleController.getString("AccActionOpenFile", R.string.AccActionOpenFile);
                        }
                        str5 = str3;
                    } else {
                        str5 = str3;
                        string2 = LocaleController.getString(str5, R.string.AccActionDownload);
                    }
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(16, string2));
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(32, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
                    if (ChatMessageCell.this.getMiniIconForCurrentState() == 2) {
                        accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_small_button, LocaleController.getString(str5, R.string.AccActionDownload)));
                    }
                } else {
                    accessibilityNodeInfo2.addAction(16);
                    accessibilityNodeInfo2.addAction(32);
                }
                if ((ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.currentMessageObject.isRoundVideo() || ChatMessageCell.this.currentMessageObject.isMusic()) && MediaController.getInstance().isPlayingMessage(ChatMessageCell.this.currentMessageObject)) {
                    ChatMessageCell.this.seekBarAccessibilityDelegate.onInitializeAccessibilityNodeInfoInternal(accessibilityNodeInfo2);
                }
                if (ChatMessageCell.this.useTranscribeButton) {
                    ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                    if (chatMessageCell4.transcribeButton != null) {
                        accessibilityNodeInfo2.addChild(chatMessageCell4, 493);
                    }
                }
                if (i9 < 24) {
                    ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                    if (chatMessageCell5.isChat && chatMessageCell5.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                        accessibilityNodeInfo2.addChild(ChatMessageCell.this, 5000);
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) {
                        Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                        int i10 = 0;
                        for (CharacterStyle characterStyle2 : (CharacterStyle[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class)) {
                            accessibilityNodeInfo2.addChild(ChatMessageCell.this, i10 + 2000);
                            i10++;
                        }
                    }
                    if (ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) {
                        ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                        if (chatMessageCell6.captionLayout != null) {
                            Spannable spannable2 = (Spannable) chatMessageCell6.currentMessageObject.caption;
                            int i11 = 0;
                            for (CharacterStyle characterStyle3 : (CharacterStyle[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class)) {
                                accessibilityNodeInfo2.addChild(ChatMessageCell.this, i11 + 3000);
                                i11++;
                            }
                        }
                    }
                }
                Iterator it = ChatMessageCell.this.botButtons.iterator();
                int i12 = 0;
                while (it.hasNext()) {
                    BotButton botButton = (BotButton) it.next();
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, i12 + 1000);
                    i12++;
                }
                if (ChatMessageCell.this.hintButtonVisible && ChatMessageCell.this.pollHintX != -1 && ChatMessageCell.this.currentMessageObject.isPoll()) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 495);
                }
                Iterator it2 = ChatMessageCell.this.pollButtons.iterator();
                int i13 = 0;
                while (it2.hasNext()) {
                    PollButton pollButton = (PollButton) it2.next();
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, i13 + 500);
                    i13++;
                }
                if (ChatMessageCell.this.drawInstantView && !ChatMessageCell.this.instantButtonRect.isEmpty()) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 499);
                }
                if (ChatMessageCell.this.drawContact && ChatMessageCell.this.contactRect != null && !ChatMessageCell.this.contactRect.isEmpty()) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 492);
                    if (ChatMessageCell.this.contactButtons != null && ChatMessageCell.this.contactButtons.size() > 1) {
                        Iterator it3 = ChatMessageCell.this.contactButtons.iterator();
                        while (it3.hasNext()) {
                            InstantViewButton instantViewButton = (InstantViewButton) it3.next();
                            if (ChatMessageCell.this.drawContactView && instantViewButton.type == 5 && !instantViewButton.rect.isEmpty()) {
                                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 491);
                            }
                            if (ChatMessageCell.this.drawContactAdd && instantViewButton.type == 31 && !instantViewButton.rect.isEmpty()) {
                                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 490);
                            }
                            if (ChatMessageCell.this.drawContactSendMessage && instantViewButton.type == 30 && !instantViewButton.rect.isEmpty()) {
                                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 489);
                            }
                        }
                    }
                }
                if (ChatMessageCell.this.commentLayout != null) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 496);
                }
                if (ChatMessageCell.this.drawSideButton == 1 || ChatMessageCell.this.drawSideButton == 2) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 498);
                }
                ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                if (chatMessageCell7.replyNameLayout != null) {
                    accessibilityNodeInfo2.addChild(chatMessageCell7, 497);
                }
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    if (Build.VERSION.SDK_INT >= 21) {
                        accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_open_forwarded_origin, LocaleController.getString("AccActionOpenForwardedOrigin", R.string.AccActionOpenForwardedOrigin)));
                    } else {
                        accessibilityNodeInfo2.addChild(ChatMessageCell.this, 494);
                    }
                }
                if (ChatMessageCell.this.drawSelectionBackground || ChatMessageCell.this.getBackground() != null) {
                    accessibilityNodeInfo2.setSelected(true);
                }
                return accessibilityNodeInfo2;
            }
            AccessibilityNodeInfo obtain2 = AccessibilityNodeInfo.obtain();
            obtain2.setSource(ChatMessageCell.this, i);
            obtain2.setParent(ChatMessageCell.this);
            obtain2.setPackageName(ChatMessageCell.this.getContext().getPackageName());
            if (i == 5000) {
                if (ChatMessageCell.this.currentUser == null) {
                    return null;
                }
                obtain2.setText(UserObject.getUserName(ChatMessageCell.this.currentUser));
                this.rect.set((int) ChatMessageCell.this.nameX, (int) ChatMessageCell.this.nameY, (int) (ChatMessageCell.this.nameX + ChatMessageCell.this.nameWidth), (int) (ChatMessageCell.this.nameY + (ChatMessageCell.this.nameLayout != null ? ChatMessageCell.this.nameLayout.getHeight() : 10)));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 3000) {
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable)) {
                    return null;
                }
                ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                if (chatMessageCell8.captionLayout == null) {
                    return null;
                }
                Spannable spannable3 = (Spannable) chatMessageCell8.currentMessageObject.caption;
                ClickableSpan linkById = getLinkById(i, false);
                if (linkById == null) {
                    return null;
                }
                int[] realSpanStartAndEnd = ChatMessageCell.this.getRealSpanStartAndEnd(spannable3, linkById);
                obtain2.setText(spannable3.subSequence(realSpanStartAndEnd[0], realSpanStartAndEnd[1]).toString());
                Iterator<MessageObject.TextLayoutBlock> it4 = ChatMessageCell.this.captionLayout.textLayoutBlocks.iterator();
                while (true) {
                    if (!it4.hasNext()) {
                        z3 = true;
                        break;
                    }
                    MessageObject.TextLayoutBlock next = it4.next();
                    int length = next.textLayout.getText().length();
                    int i14 = next.charactersOffset;
                    int i15 = realSpanStartAndEnd[0];
                    if (i14 <= i15) {
                        int i16 = length + i14;
                        int i17 = realSpanStartAndEnd[1];
                        if (i16 >= i17) {
                            next.textLayout.getSelectionPath(i15 - i14, i17 - i14, this.linkPath);
                            this.linkPath.computeBounds(this.rectF, true);
                            Rect rect = this.rect;
                            RectF rectF = this.rectF;
                            rect.set((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                            Rect rect2 = this.rect;
                            ChatMessageCell chatMessageCell9 = ChatMessageCell.this;
                            rect2.offset(0, (int) next.textYOffset(chatMessageCell9.captionLayout.textLayoutBlocks, chatMessageCell9.transitionParams));
                            Rect rect3 = this.rect;
                            ChatMessageCell chatMessageCell10 = ChatMessageCell.this;
                            rect3.offset(chatMessageCell10.textX, chatMessageCell10.textY);
                            obtain2.setBoundsInParent(this.rect);
                            if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                            }
                            z3 = true;
                            this.rect.offset(iArr[0], iArr[1]);
                            obtain2.setBoundsInScreen(this.rect);
                        }
                    }
                }
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(z3);
                obtain2.setClickable(z3);
                obtain2.setLongClickable(z3);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 2000) {
                if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable)) {
                    return null;
                }
                Spannable spannable4 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                ClickableSpan linkById2 = getLinkById(i, false);
                if (linkById2 == null) {
                    return null;
                }
                int[] realSpanStartAndEnd2 = ChatMessageCell.this.getRealSpanStartAndEnd(spannable4, linkById2);
                obtain2.setText(spannable4.subSequence(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1]).toString());
                Iterator<MessageObject.TextLayoutBlock> it5 = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.iterator();
                while (true) {
                    if (!it5.hasNext()) {
                        z2 = true;
                        break;
                    }
                    MessageObject.TextLayoutBlock next2 = it5.next();
                    int length2 = next2.textLayout.getText().length();
                    int i18 = next2.charactersOffset;
                    int i19 = realSpanStartAndEnd2[0];
                    if (i18 <= i19) {
                        int i20 = length2 + i18;
                        int i21 = realSpanStartAndEnd2[1];
                        if (i20 >= i21) {
                            next2.textLayout.getSelectionPath(i19 - i18, i21 - i18, this.linkPath);
                            this.linkPath.computeBounds(this.rectF, true);
                            Rect rect4 = this.rect;
                            RectF rectF2 = this.rectF;
                            rect4.set((int) rectF2.left, (int) rectF2.top, (int) rectF2.right, (int) rectF2.bottom);
                            this.rect.offset(0, (int) next2.textYOffset(ChatMessageCell.this.currentMessageObject.textLayoutBlocks, ChatMessageCell.this.transitionParams));
                            Rect rect5 = this.rect;
                            ChatMessageCell chatMessageCell11 = ChatMessageCell.this;
                            rect5.offset(chatMessageCell11.textX, chatMessageCell11.textY);
                            obtain2.setBoundsInParent(this.rect);
                            if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                            }
                            z2 = true;
                            this.rect.offset(iArr[0], iArr[1]);
                            obtain2.setBoundsInScreen(this.rect);
                        }
                    }
                }
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(z2);
                obtain2.setClickable(z2);
                obtain2.setLongClickable(z2);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 1000) {
                int i22 = i - 1000;
                if (i22 >= ChatMessageCell.this.botButtons.size()) {
                    return null;
                }
                BotButton botButton2 = (BotButton) ChatMessageCell.this.botButtons.get(i22);
                obtain2.setText(botButton2.title.getText());
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.addAction(16);
                this.rect.set(botButton2.x, botButton2.y, botButton2.x + botButton2.width, botButton2.y + botButton2.height);
                this.rect.offset(ChatMessageCell.this.currentMessageObject.isOutOwner() ? (ChatMessageCell.this.getMeasuredWidth() - ChatMessageCell.this.widthForButtons) - AndroidUtilities.dp(10.0f) : ChatMessageCell.this.backgroundDrawableLeft + AndroidUtilities.dp(ChatMessageCell.this.mediaBackground ? 1.0f : 7.0f), ChatMessageCell.this.layoutHeight);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
            } else if (i >= 500) {
                int i23 = i - 500;
                if (i23 >= ChatMessageCell.this.pollButtons.size()) {
                    return null;
                }
                PollButton pollButton2 = (PollButton) ChatMessageCell.this.pollButtons.get(i23);
                StringBuilder sb = new StringBuilder(pollButton2.title.getText());
                if (ChatMessageCell.this.pollVoted) {
                    obtain2.setSelected(pollButton2.chosen);
                    sb.append(", ");
                    sb.append(pollButton2.percent);
                    sb.append("%");
                    if (ChatMessageCell.this.lastPoll != null && ChatMessageCell.this.lastPoll.quiz && (pollButton2.chosen || pollButton2.correct)) {
                        sb.append(", ");
                        if (pollButton2.correct) {
                            i3 = R.string.AccDescrQuizCorrectAnswer;
                            str2 = "AccDescrQuizCorrectAnswer";
                        } else {
                            i3 = R.string.AccDescrQuizIncorrectAnswer;
                            str2 = "AccDescrQuizIncorrectAnswer";
                        }
                        sb.append(LocaleController.getString(str2, i3));
                    }
                } else {
                    obtain2.setClassName("android.widget.Button");
                }
                obtain2.setText(sb);
                obtain2.setEnabled(true);
                obtain2.addAction(16);
                int i24 = pollButton2.y;
                ChatMessageCell chatMessageCell12 = ChatMessageCell.this;
                int i25 = i24 + chatMessageCell12.namesOffset;
                int dp = chatMessageCell12.backgroundWidth - AndroidUtilities.dp(76.0f);
                Rect rect6 = this.rect;
                int i26 = pollButton2.x;
                rect6.set(i26, i25, dp + i26, pollButton2.height + i25);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 495) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setText(LocaleController.getString("AccDescrQuizExplanation", R.string.AccDescrQuizExplanation));
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.pollHintX - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintY - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintX + AndroidUtilities.dp(32.0f), ChatMessageCell.this.pollHintY + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 499) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.instantViewLayout != null) {
                    obtain2.setText(ChatMessageCell.this.instantViewLayout.getText());
                }
                obtain2.addAction(16);
                ChatMessageCell.this.instantButtonRect.round(this.rect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 492) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.titleLayout != null) {
                    obtain2.setText(ChatMessageCell.this.titleLayout.getText());
                }
                obtain2.addAction(16);
                ChatMessageCell.this.contactRect.round(this.rect);
                if (ChatMessageCell.this.contactButtons != null && ChatMessageCell.this.contactButtons.size() > 1) {
                    InstantViewButton instantViewButton2 = (InstantViewButton) ChatMessageCell.this.contactButtons.get(0);
                    if (!instantViewButton2.rect.isEmpty()) {
                        Rect rect7 = this.rect;
                        rect7.set(rect7.left, rect7.top, rect7.right, (int) (rect7.bottom - instantViewButton2.rect.height()));
                    }
                }
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 491 || i == 490 || i == 489) {
                int i27 = i != 491 ? i == 490 ? 31 : 30 : 5;
                for (int i28 = 0; i28 < ChatMessageCell.this.contactButtons.size(); i28++) {
                    InstantViewButton instantViewButton3 = (InstantViewButton) ChatMessageCell.this.contactButtons.get(i28);
                    if (instantViewButton3.type == i27) {
                        obtain2.setClassName("android.widget.Button");
                        obtain2.setEnabled(true);
                        if (instantViewButton3.layout != null) {
                            obtain2.setText(instantViewButton3.layout.getText());
                        }
                        obtain2.addAction(16);
                        instantViewButton3.rect.round(this.rect);
                        obtain2.setBoundsInParent(this.rect);
                        if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                            ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                        }
                        z = true;
                        this.rect.offset(iArr[0], iArr[1]);
                        obtain2.setBoundsInScreen(this.rect);
                        obtain2.setClickable(true);
                        obtain2.setFocusable(z);
                        obtain2.setVisibleToUser(z);
                        return obtain2;
                    }
                }
            } else if (i == 498) {
                obtain2.setClassName("android.widget.ImageButton");
                obtain2.setEnabled(true);
                ChatMessageCell chatMessageCell13 = ChatMessageCell.this;
                if (chatMessageCell13.isOpenChatByShare(chatMessageCell13.currentMessageObject)) {
                    obtain2.setContentDescription(LocaleController.getString("AccDescrOpenChat", R.string.AccDescrOpenChat));
                } else {
                    obtain2.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
                }
                obtain2.addAction(16);
                this.rect.set((int) ChatMessageCell.this.sideStartX, (int) ChatMessageCell.this.sideStartY, ((int) ChatMessageCell.this.sideStartX) + AndroidUtilities.dp(40.0f), ((int) ChatMessageCell.this.sideStartY) + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 497) {
                obtain2.setEnabled(true);
                StringBuilder sb2 = new StringBuilder();
                sb2.append(LocaleController.getString("Reply", R.string.Reply));
                sb2.append(", ");
                StaticLayout staticLayout = ChatMessageCell.this.replyNameLayout;
                if (staticLayout != null) {
                    sb2.append(staticLayout.getText());
                    sb2.append(", ");
                }
                StaticLayout staticLayout2 = ChatMessageCell.this.replyTextLayout;
                if (staticLayout2 != null) {
                    sb2.append(staticLayout2.getText());
                }
                obtain2.setContentDescription(sb2.toString());
                obtain2.addAction(16);
                Rect rect8 = this.rect;
                ChatMessageCell chatMessageCell14 = ChatMessageCell.this;
                int i29 = chatMessageCell14.replyStartX;
                ChatMessageCell chatMessageCell15 = ChatMessageCell.this;
                rect8.set(i29, chatMessageCell14.replyStartY, Math.max(chatMessageCell14.replyNameWidth, ChatMessageCell.this.replyTextWidth) + i29, chatMessageCell15.replyStartY + ((int) chatMessageCell15.replyHeight));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 494) {
                obtain2.setEnabled(true);
                StringBuilder sb3 = new StringBuilder();
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    int i30 = 0;
                    while (i30 < 2) {
                        sb3.append(ChatMessageCell.this.forwardedNameLayout[i30].getText());
                        sb3.append(i30 == 0 ? " " : "\n");
                        i30++;
                    }
                }
                obtain2.setContentDescription(sb3.toString());
                obtain2.addAction(16);
                int min = (int) Math.min(ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[0], ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[1]);
                this.rect.set(min, ChatMessageCell.this.forwardNameY, ChatMessageCell.this.forwardedNameWidth + min, ChatMessageCell.this.forwardNameY + ChatMessageCell.this.forwardHeight);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 496) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                int repliesCount = ChatMessageCell.this.getRepliesCount();
                if (ChatMessageCell.this.currentMessageObject != null && !ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() && !ChatMessageCell.this.currentMessageObject.isAnimatedEmoji()) {
                    if (ChatMessageCell.this.isRepliesChat) {
                        formatShortNumber = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                    } else {
                        formatShortNumber = repliesCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]);
                    }
                } else {
                    formatShortNumber = (ChatMessageCell.this.isRepliesChat || repliesCount <= 0) ? null : LocaleController.formatShortNumber(repliesCount, null);
                }
                if (formatShortNumber != null) {
                    obtain2.setText(formatShortNumber);
                }
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.commentButtonRect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 493) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                    i2 = R.string.AccActionCloseTranscription;
                    str = "AccActionCloseTranscription";
                } else {
                    i2 = R.string.AccActionOpenTranscription;
                    str = "AccActionOpenTranscription";
                }
                obtain2.setText(LocaleController.getString(str, i2));
                obtain2.addAction(16);
                ChatMessageCell chatMessageCell16 = ChatMessageCell.this;
                if (chatMessageCell16.transcribeButton != null) {
                    this.rect.set((int) chatMessageCell16.transcribeX, (int) ChatMessageCell.this.transcribeY, (int) (ChatMessageCell.this.transcribeX + ChatMessageCell.this.transcribeButton.width()), (int) (ChatMessageCell.this.transcribeY + ChatMessageCell.this.transcribeButton.height()));
                }
                obtain2.setBoundsInParent(this.rect);
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            }
            z = true;
            obtain2.setFocusable(z);
            obtain2.setVisibleToUser(z);
            return obtain2;
        }

        /* JADX WARN: Code restructure failed: missing block: B:96:0x0205, code lost:
            if (r9.this$0.currentMessageObject.messageOwner.reply_to.reply_from == null) goto L4;
         */
        @Override // android.view.accessibility.AccessibilityNodeProvider
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean performAction(int i, int i2, Bundle bundle) {
            TranscribeButton transcribeButton;
            if (i == -1) {
                ChatMessageCell.this.performAccessibilityAction(i2, bundle);
            } else if (i2 == 64) {
                ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, LiteMode.FLAG_CHAT_SCALE);
            } else {
                if (i2 == 16) {
                    if (i == 5000) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell = ChatMessageCell.this;
                            chatMessageCellDelegate.didPressUserAvatar(chatMessageCell, chatMessageCell.currentUser, 0.0f, 0.0f, false);
                        }
                    } else if (i >= 3000) {
                        ClickableSpan linkById = getLinkById(i, true);
                        if (linkById != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 2000) {
                        ClickableSpan linkById2 = getLinkById(i, false);
                        if (linkById2 != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById2, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 1000) {
                        int i3 = i - 1000;
                        if (i3 >= ChatMessageCell.this.botButtons.size()) {
                            return false;
                        }
                        BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i3);
                        if (ChatMessageCell.this.delegate != null && botButton.button != null) {
                            ChatMessageCell.this.delegate.didPressBotButton(ChatMessageCell.this, botButton.button);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i >= 500) {
                        int i4 = i - 500;
                        if (i4 >= ChatMessageCell.this.pollButtons.size()) {
                            return false;
                        }
                        PollButton pollButton = (PollButton) ChatMessageCell.this.pollButtons.get(i4);
                        if (ChatMessageCell.this.delegate != null) {
                            ArrayList<TLRPC$PollAnswer> arrayList = new ArrayList<>();
                            arrayList.add(pollButton.answer);
                            ChatMessageCell.this.delegate.didPressVoteButtons(ChatMessageCell.this, arrayList, -1, 0, 0);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i == 495) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressHint(ChatMessageCell.this, 0);
                        }
                    } else if (i == 499) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate2 = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                            chatMessageCellDelegate2.didPressInstantButton(chatMessageCell2, chatMessageCell2.drawInstantViewType);
                        }
                    } else if (i == 492) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressInstantButton(ChatMessageCell.this, 5);
                        }
                    } else if (i == 491) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressInstantButton(ChatMessageCell.this, 5);
                        }
                    } else if (i == 490) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressInstantButton(ChatMessageCell.this, 31);
                        }
                    } else if (i == 489) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressInstantButton(ChatMessageCell.this, 30);
                        }
                    } else if (i == 498) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressSideButton(ChatMessageCell.this);
                        }
                    } else if (i == 497) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                            if (!chatMessageCell3.isThreadChat || chatMessageCell3.currentMessageObject.getReplyTopMsgId() != 0) {
                                if (!ChatMessageCell.this.currentMessageObject.hasValidReplyMessageObject()) {
                                    ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                    if (!chatMessageCell4.hasReplyQuote) {
                                        if (chatMessageCell4.currentMessageObject.messageOwner != null) {
                                            if (ChatMessageCell.this.currentMessageObject.messageOwner.reply_to != null) {
                                            }
                                        }
                                    }
                                }
                                ChatMessageCellDelegate chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                chatMessageCellDelegate3.didPressReplyMessage(chatMessageCell5, chatMessageCell5.currentMessageObject.getReplyMsgId());
                            }
                        }
                    } else if (i == 494) {
                        if (ChatMessageCell.this.delegate != null) {
                            if (ChatMessageCell.this.currentForwardChannel != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate4 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                chatMessageCellDelegate4.didPressChannelAvatar(chatMessageCell6, chatMessageCell6.currentForwardChannel, ChatMessageCell.this.currentMessageObject.messageOwner.fwd_from.channel_post, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY, false);
                            } else if (ChatMessageCell.this.currentForwardUser != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate5 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                                chatMessageCellDelegate5.didPressUserAvatar(chatMessageCell7, chatMessageCell7.currentForwardUser, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY, false);
                            } else if (ChatMessageCell.this.currentForwardName != null) {
                                ChatMessageCell.this.delegate.didPressHiddenForward(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 496) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                            if (chatMessageCell8.isRepliesChat) {
                                chatMessageCell8.delegate.didPressSideButton(ChatMessageCell.this);
                            } else {
                                chatMessageCell8.delegate.didPressCommentButton(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 493 && (transcribeButton = ChatMessageCell.this.transcribeButton) != null) {
                        transcribeButton.onTap();
                    }
                } else if (i2 == 32) {
                    ClickableSpan linkById3 = getLinkById(i, i >= 3000);
                    if (linkById3 != null && ChatMessageCell.this.delegate != null) {
                        ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById3, true);
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 2);
                    }
                }
            }
            return true;
        }

        private ClickableSpan getLinkById(int i, boolean z) {
            if (i == 5000) {
                return null;
            }
            if (z) {
                int i2 = i - 3000;
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || i2 < 0) {
                    return null;
                }
                Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class);
                if (clickableSpanArr.length <= i2) {
                    return null;
                }
                return clickableSpanArr[i2];
            }
            int i3 = i - 2000;
            if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) || i3 < 0) {
                return null;
            }
            Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
            ClickableSpan[] clickableSpanArr2 = (ClickableSpan[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class);
            if (clickableSpanArr2.length <= i3) {
                return null;
            }
            return clickableSpanArr2[i3];
        }
    }

    public void setImageCoords(RectF rectF) {
        setImageCoords(rectF.left, rectF.top, rectF.width(), rectF.height());
    }

    public void setImageCoords(float f, float f2, float f3, float f4) {
        this.photoImage.setImageCoords(f, f2, f3, f4);
        int i = this.documentAttachType;
        if (i == 4 || i == 2) {
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY;
            RadialProgress2 radialProgress2 = this.videoRadialProgress;
            int i2 = this.videoButtonX;
            radialProgress2.setProgressRect(i2, imageY, AndroidUtilities.dp(24.0f) + i2, this.videoButtonY + AndroidUtilities.dp(24.0f));
            this.buttonX = (int) (f + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY2;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i3 = this.buttonX;
            radialProgress22.setProgressRect(i3, imageY2, AndroidUtilities.dp(48.0f) + i3, this.buttonY + AndroidUtilities.dp(48.0f));
        }
    }

    @Override // android.view.View
    public float getAlpha() {
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            return this.alphaInternal;
        }
        return super.getAlpha();
    }

    @Override // android.view.View
    public void setAlpha(float f) {
        if ((f == 1.0f) != (getAlpha() == 1.0f)) {
            invalidate();
        }
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            this.alphaInternal = f;
            invalidate();
        } else {
            super.setAlpha(f);
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if ((groupedMessagePosition != null && (groupedMessagePosition.minY != 0 || groupedMessagePosition.minX != 0)) || ((this.enterTransitionInProgress && !this.currentMessageObject.isVoice()) || this.replyNameLayout == null || this.replyTextLayout == null)) {
            MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
            if (groupedMessagePosition2 != null) {
                int i = groupedMessagePosition2.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            if (this.reactionsLayoutInBubble.isSmall) {
                return;
            }
        }
        invalidate();
    }

    public int getCurrentBackgroundLeft() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return 0;
        }
        int i = messageDrawable.getBounds().left;
        if (this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        if ((z || !this.mediaBackground) && !this.drawPinnedBottom) {
            if (z) {
                return (int) (i - (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress()));
            }
            return i - AndroidUtilities.dp(6.0f);
        }
        return i;
    }

    public int getCurrentBackgroundRight() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return getWidth();
        }
        int i = messageDrawable.getBounds().right;
        if (!this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        if ((z || !this.mediaBackground) && !this.drawPinnedBottom) {
            if (z) {
                return (int) (i + (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress()));
            }
            return i + AndroidUtilities.dp(6.0f);
        }
        return i;
    }

    public TransitionParams getTransitionParams() {
        return this.transitionParams;
    }

    public int getTopMediaOffset() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.type != 14) {
            return 0;
        }
        return this.mediaOffsetY + this.namesOffset;
    }

    public int getMediaOffsetY() {
        if (!this.transitionParams.animateMediaOffsetY) {
            return this.mediaOffsetY;
        }
        return AndroidUtilities.lerp(this.transitionParams.animateFromMediaOffsetY, this.mediaOffsetY, this.transitionParams.animateChangeProgress);
    }

    public int getTextX() {
        return this.textX;
    }

    public int getTextY() {
        return this.textY;
    }

    public boolean isPlayingRound() {
        return this.isRoundVideo && this.isPlayingRound;
    }

    public int getParentWidth() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            messageObject = this.messageObjectToSet;
        }
        return (messageObject == null || !messageObject.preview || (i = this.parentWidth) <= 0) ? AndroidUtilities.displaySize.x : i;
    }

    /* loaded from: classes4.dex */
    public class TransitionParams {
        public boolean animateBackgroundBoundsInner;
        public boolean animateBackgroundWidth;
        boolean animateBotButtonsChanged;
        private boolean animateButton;
        public boolean animateChange;
        private int animateCommentArrowX;
        private boolean animateCommentDrawUnread;
        private int animateCommentUnreadX;
        private float animateCommentX;
        private boolean animateComments;
        private StaticLayout animateCommentsLayout;
        public boolean animateDrawBackground;
        private boolean animateDrawCommentNumber;
        public boolean animateDrawNameLayout;
        public boolean animateDrawingTimeAlpha;
        private boolean animateEditedEnter;
        private StaticLayout animateEditedLayout;
        private int animateEditedWidthDiff;
        public boolean animateExpandedQuotes;
        public HashSet<Integer> animateExpandedQuotesFrom;
        public boolean animateFactCheck;
        public boolean animateFactCheckExpanded;
        public boolean animateFactCheckHeight;
        public int animateFactCheckHeightFrom;
        int animateForwardNameWidth;
        float animateForwardNameX;
        public boolean animateForwardedLayout;
        public int animateForwardedNamesOffset;
        private float animateFromButtonX;
        private float animateFromButtonY;
        public int animateFromLinkPreviewHeight;
        public int animateFromLinkPreviewY;
        private int animateFromMediaOffsetY;
        public boolean animateFromRecommendationsExpanded;
        private float animateFromReplyTextHeight;
        public float animateFromReplyY;
        public float animateFromRoundVideoDotY;
        public float animateFromTextY;
        public int animateFromTimeX;
        public float animateFromTimeXPinned;
        private float animateFromTimeXReplies;
        private float animateFromTimeXViews;
        public boolean animateLinkAbove;
        public boolean animateLinkPreviewHeight;
        public boolean animateLinkPreviewY;
        public boolean animateLocationIsExpired;
        public boolean animateMediaAbove;
        private boolean animateMediaOffsetY;
        public boolean animateMessageText;
        private float animateNameX;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmoji;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmojiReply;
        private MessageObject.TextLayoutBlocks animateOutCaptionLayout;
        private ArrayList<MessageObject.TextLayoutBlock> animateOutTextBlocks;
        private float animateOutTextXOffset;
        private boolean animatePinned;
        public boolean animatePlayingRound;
        public boolean animateRadius;
        public boolean animateRecommendationsExpanded;
        boolean animateReplaceCaptionLayout;
        private boolean animateReplies;
        private StaticLayout animateRepliesLayout;
        private StaticLayout animateReplyTextLayout;
        public float animateReplyTextOffset;
        public boolean animateReplyY;
        public boolean animateRoundVideoDotY;
        private boolean animateShouldDrawMenuDrawable;
        private boolean animateShouldDrawTimeOnMedia;
        private boolean animateSign;
        public boolean animateSmallImage;
        public boolean animateText;
        private StaticLayout animateTimeLayout;
        private int animateTimeWidth;
        public float animateToImageH;
        public float animateToImageW;
        public float animateToImageX;
        public float animateToImageY;
        public int[] animateToRadius;
        private int animateTotalCommentWidth;
        public boolean animateUseTranscribeButton;
        private StaticLayout animateViewsLayout;
        public float captionFromX;
        public float captionFromY;
        public float deltaBottom;
        public float deltaLeft;
        public float deltaRight;
        public float deltaTop;
        public boolean drawPinnedBottomBackground;
        public boolean ignoreAlpha;
        public boolean imageChangeBoundsTransition;
        public int lastBackgroundLeft;
        public int lastBackgroundRight;
        public float lastButtonX;
        public float lastButtonY;
        public int lastCommentArrowX;
        public boolean lastCommentDrawUnread;
        public StaticLayout lastCommentLayout;
        public int lastCommentUnreadX;
        public float lastCommentX;
        public int lastCommentsCount;
        public boolean lastDrawBackground;
        public boolean lastDrawCommentNumber;
        public StaticLayout lastDrawDocTitleLayout;
        public StaticLayout lastDrawInfoLayout;
        public float lastDrawLocationExpireProgress;
        public String lastDrawLocationExpireText;
        public boolean lastDrawNameLayout;
        public float lastDrawReplyY;
        public float lastDrawRoundVideoDotY;
        public boolean lastDrawTime;
        public MessageObject.TextLayoutBlocks lastDrawingCaptionLayout;
        public float lastDrawingCaptionX;
        public float lastDrawingCaptionY;
        public boolean lastDrawingEdited;
        public HashSet<Integer> lastDrawingExpandedQuotes;
        public boolean lastDrawingFactCheck;
        public boolean lastDrawingFactCheckExpanded;
        public int lastDrawingFactCheckHeight;
        public float lastDrawingImageH;
        public float lastDrawingImageW;
        public float lastDrawingImageX;
        public float lastDrawingImageY;
        public boolean lastDrawingLinkAbove;
        public int lastDrawingLinkPreviewHeight;
        public int lastDrawingLinkPreviewY;
        public boolean lastDrawingMediaAbove;
        public boolean lastDrawingRecommendationsExpanded;
        public float lastDrawingReplyTextHeight;
        public boolean lastDrawingSmallImage;
        public ArrayList<MessageObject.TextLayoutBlock> lastDrawingTextBlocks;
        public float lastDrawingTextX;
        public float lastDrawingTextY;
        public boolean lastDrawnForwardedName;
        public StaticLayout lastDrawnReplyTextLayout;
        public int lastForwardNameWidth;
        public float lastForwardNameX;
        public int lastForwardedNamesOffset;
        public boolean lastIsPinned;
        public boolean lastIsPlayingRound;
        public boolean lastLocatinIsExpired;
        public int lastMediaOffsetY;
        public int lastRepliesCount;
        public StaticLayout lastRepliesLayout;
        public int lastReplyTextXOffset;
        public boolean lastShouldDrawMenuDrawable;
        public boolean lastShouldDrawTimeOnMedia;
        public String lastSignMessage;
        public float lastTextXOffset;
        public StaticLayout lastTimeLayout;
        public int lastTimeWidth;
        public int lastTimeX;
        public float lastTimeXPinned;
        private float lastTimeXReplies;
        private float lastTimeXViews;
        public int lastTopOffset;
        public int lastTotalCommentWidth;
        public boolean lastUseTranscribeButton;
        public int lastViewsCount;
        public StaticLayout lastViewsLayout;
        public boolean messageEntering;
        private boolean moveCaption;
        public float photoImageFromCenterX;
        public float photoImageFromCenterY;
        public float photoImageFromHeight;
        public float photoImageFromWidth;
        public boolean shouldAnimateTimeX;
        public float toDeltaLeft;
        public float toDeltaRight;
        public boolean transformGroupToSingleMessage;
        public boolean updatePhotoImageX;
        public boolean wasDraw;
        public int[] imageRoundRadius = new int[4];
        public float captionEnterProgress = 1.0f;
        public float changePinnedBottomProgress = 1.0f;
        public Rect lastDrawingBackgroundRect = new Rect();
        public float animateChangeProgress = 1.0f;
        private ArrayList<BotButton> lastDrawBotButtons = new ArrayList<>();
        private ArrayList<BotButton> transitionBotButtons = new ArrayList<>();
        public int lastStatusDrawableParams = -1;
        public StaticLayout[] lastDrawnForwardedNameLayout = new StaticLayout[2];
        public StaticLayout[] animatingForwardedNameLayout = new StaticLayout[2];

        public boolean supportChangeAnimation() {
            return true;
        }

        public TransitionParams() {
        }

        public void recordDrawingState() {
            ChannelRecommendationsCell channelRecommendationsCell;
            boolean z = true;
            this.wasDraw = true;
            this.lastDrawingImageX = ChatMessageCell.this.photoImage.getImageX();
            this.lastDrawingImageY = ChatMessageCell.this.photoImage.getImageY();
            this.lastDrawingImageW = ChatMessageCell.this.photoImage.getImageWidth();
            this.lastDrawingImageH = ChatMessageCell.this.photoImage.getImageHeight();
            System.arraycopy(ChatMessageCell.this.photoImage.getRoundRadius(), 0, this.imageRoundRadius, 0, 4);
            Theme.MessageDrawable messageDrawable = ChatMessageCell.this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                this.lastDrawingBackgroundRect.set(messageDrawable.getBounds());
            }
            this.lastDrawingTextBlocks = ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.textLayoutBlocks : null;
            this.lastDrawingEdited = ChatMessageCell.this.edited;
            this.lastDrawingCaptionX = ChatMessageCell.this.captionX;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastDrawingCaptionY = chatMessageCell.captionY;
            this.lastDrawingCaptionLayout = chatMessageCell.captionLayout;
            this.lastDrawBotButtons.clear();
            if (!ChatMessageCell.this.botButtons.isEmpty()) {
                this.lastDrawBotButtons.addAll(ChatMessageCell.this.botButtons);
            }
            this.lastDrawingSmallImage = ChatMessageCell.this.isSmallImage;
            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
            this.lastDrawingLinkPreviewHeight = chatMessageCell2.linkPreviewHeight;
            this.lastDrawingLinkAbove = chatMessageCell2.linkPreviewAbove;
            this.lastDrawingMediaAbove = chatMessageCell2.captionAbove;
            this.lastDrawingRecommendationsExpanded = chatMessageCell2.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.type == 27 && (channelRecommendationsCell = ChatMessageCell.this.channelRecommendationsCell) != null && channelRecommendationsCell.isExpanded();
            if (ChatMessageCell.this.commentLayout != null) {
                this.lastCommentsCount = ChatMessageCell.this.getRepliesCount();
                this.lastTotalCommentWidth = ChatMessageCell.this.totalCommentWidth;
                this.lastCommentLayout = ChatMessageCell.this.commentLayout;
                this.lastCommentArrowX = ChatMessageCell.this.commentArrowX;
                this.lastCommentUnreadX = ChatMessageCell.this.commentUnreadX;
                this.lastCommentDrawUnread = ChatMessageCell.this.commentDrawUnread;
                this.lastCommentX = ChatMessageCell.this.commentX;
                this.lastDrawCommentNumber = ChatMessageCell.this.drawCommentNumber;
            }
            this.lastRepliesCount = ChatMessageCell.this.getRepliesCount();
            this.lastViewsCount = ChatMessageCell.this.getMessageObject().messageOwner.views;
            this.lastRepliesLayout = ChatMessageCell.this.repliesLayout;
            this.lastViewsLayout = ChatMessageCell.this.viewsLayout;
            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
            this.lastIsPinned = chatMessageCell3.isPinned;
            this.lastSignMessage = chatMessageCell3.lastPostAuthor;
            this.lastDrawBackground = ChatMessageCell.this.drawBackground;
            this.lastUseTranscribeButton = ChatMessageCell.this.useTranscribeButton;
            this.lastButtonX = ChatMessageCell.this.buttonX;
            this.lastButtonY = ChatMessageCell.this.buttonY;
            this.lastMediaOffsetY = ChatMessageCell.this.mediaOffsetY;
            this.lastDrawTime = !ChatMessageCell.this.forceNotDrawTime;
            ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
            this.lastTimeX = chatMessageCell4.timeX;
            this.lastTimeLayout = chatMessageCell4.timeLayout;
            this.lastTimeWidth = chatMessageCell4.timeWidth;
            this.lastShouldDrawTimeOnMedia = chatMessageCell4.shouldDrawTimeOnMedia();
            this.lastTopOffset = ChatMessageCell.this.getTopMediaOffset();
            this.lastShouldDrawMenuDrawable = ChatMessageCell.this.shouldDrawMenuDrawable();
            this.lastLocatinIsExpired = ChatMessageCell.this.locationExpired;
            this.lastIsPlayingRound = ChatMessageCell.this.isPlayingRound;
            ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
            this.lastDrawingTextY = chatMessageCell5.textY;
            this.lastDrawingTextX = chatMessageCell5.textX;
            this.lastDrawingLinkPreviewY = chatMessageCell5.linkPreviewY;
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
            this.lastForwardedNamesOffset = chatMessageCell6.namesOffset;
            this.lastForwardNameWidth = chatMessageCell6.forwardedNameWidth;
            this.lastBackgroundLeft = ChatMessageCell.this.getCurrentBackgroundLeft();
            Theme.MessageDrawable messageDrawable2 = ChatMessageCell.this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                this.lastBackgroundRight = messageDrawable2.getBounds().right;
            }
            this.lastTextXOffset = ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.textXOffset : 0.0f;
            this.lastDrawingReplyTextHeight = ChatMessageCell.this.replyTextHeight;
            ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
            this.lastDrawnReplyTextLayout = chatMessageCell7.replyTextLayout;
            this.lastReplyTextXOffset = chatMessageCell7.replyTextOffset;
            chatMessageCell7.reactionsLayoutInBubble.recordDrawingState();
            ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
            if (chatMessageCell8.replyNameLayout != null) {
                this.lastDrawReplyY = chatMessageCell8.replyStartY;
            } else {
                this.lastDrawReplyY = 0.0f;
            }
            this.lastDrawNameLayout = chatMessageCell8.drawNameLayout;
            this.lastDrawingFactCheckHeight = ChatMessageCell.this.factCheckHeight;
            this.lastDrawingFactCheckExpanded = (ChatMessageCell.this.getPrimaryMessageObject() == null || !ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded) ? false : false;
            this.lastDrawingFactCheck = ChatMessageCell.this.hasFactCheck;
            this.lastDrawingExpandedQuotes = ChatMessageCell.this.getPrimaryMessageObject() != null ? ChatMessageCell.this.getPrimaryMessageObject().expandedQuotes : null;
        }

        public void recordDrawingStatePreview() {
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastForwardedNamesOffset = chatMessageCell.namesOffset;
            this.lastForwardNameWidth = chatMessageCell.forwardedNameWidth;
        }

        /* JADX WARN: Removed duplicated region for block: B:103:0x02b8  */
        /* JADX WARN: Removed duplicated region for block: B:106:0x02c3  */
        /* JADX WARN: Removed duplicated region for block: B:139:0x033e  */
        /* JADX WARN: Removed duplicated region for block: B:152:0x038c  */
        /* JADX WARN: Removed duplicated region for block: B:155:0x0392  */
        /* JADX WARN: Removed duplicated region for block: B:169:0x03da  */
        /* JADX WARN: Removed duplicated region for block: B:183:0x042a  */
        /* JADX WARN: Removed duplicated region for block: B:186:0x0437  */
        /* JADX WARN: Removed duplicated region for block: B:187:0x043e  */
        /* JADX WARN: Removed duplicated region for block: B:213:0x04d5  */
        /* JADX WARN: Removed duplicated region for block: B:216:0x04ea  */
        /* JADX WARN: Removed duplicated region for block: B:218:0x04f0  */
        /* JADX WARN: Removed duplicated region for block: B:227:0x053a  */
        /* JADX WARN: Removed duplicated region for block: B:230:0x0546  */
        /* JADX WARN: Removed duplicated region for block: B:233:0x0552  */
        /* JADX WARN: Removed duplicated region for block: B:236:0x0560  */
        /* JADX WARN: Removed duplicated region for block: B:239:0x056d  */
        /* JADX WARN: Removed duplicated region for block: B:242:0x057e  */
        /* JADX WARN: Removed duplicated region for block: B:245:0x058f  */
        /* JADX WARN: Removed duplicated region for block: B:250:0x059e  */
        /* JADX WARN: Removed duplicated region for block: B:253:0x05ab  */
        /* JADX WARN: Removed duplicated region for block: B:256:0x05b8  */
        /* JADX WARN: Removed duplicated region for block: B:259:0x05c6  */
        /* JADX WARN: Removed duplicated region for block: B:262:0x05d5  */
        /* JADX WARN: Removed duplicated region for block: B:267:0x060d  */
        /* JADX WARN: Removed duplicated region for block: B:270:0x061a  */
        /* JADX WARN: Removed duplicated region for block: B:281:0x064d  */
        /* JADX WARN: Removed duplicated region for block: B:40:0x0106  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x0111  */
        /* JADX WARN: Removed duplicated region for block: B:72:0x020f  */
        /* JADX WARN: Removed duplicated region for block: B:75:0x0231  */
        /* JADX WARN: Removed duplicated region for block: B:78:0x0240  */
        /* JADX WARN: Removed duplicated region for block: B:89:0x027a  */
        /* JADX WARN: Removed duplicated region for block: B:92:0x0289  */
        /* JADX WARN: Removed duplicated region for block: B:95:0x0294  */
        /* JADX WARN: Removed duplicated region for block: B:98:0x029f  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean animateChange() {
            boolean z;
            StaticLayout staticLayout;
            ChatMessageCell chatMessageCell;
            boolean z2;
            boolean z3;
            ChatMessageCell chatMessageCell2;
            MessageObject.TextLayoutBlocks textLayoutBlocks;
            MessageObject.TextLayoutBlocks textLayoutBlocks2;
            int i;
            int i2;
            boolean z4;
            ChatMessageCell chatMessageCell3;
            boolean z5;
            float f;
            ChatMessageCell chatMessageCell4;
            ChatMessageCell chatMessageCell5;
            ReactionsLayoutInBubble reactionsLayoutInBubble;
            StaticLayout staticLayout2;
            ChannelRecommendationsCell channelRecommendationsCell;
            if (this.wasDraw) {
                this.animateMessageText = false;
                if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != this.lastDrawingTextBlocks) {
                    if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != null && this.lastDrawingTextBlocks != null && ChatMessageCell.this.currentMessageObject.textLayoutBlocks.size() == this.lastDrawingTextBlocks.size()) {
                        for (int i3 = 0; i3 < this.lastDrawingTextBlocks.size(); i3++) {
                            String charSequence = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i3).textLayout == null ? null : ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i3).textLayout.getText().toString();
                            String charSequence2 = this.lastDrawingTextBlocks.get(i3).textLayout == null ? null : this.lastDrawingTextBlocks.get(i3).textLayout.getText().toString();
                            if ((charSequence != null || charSequence2 == null) && ((charSequence == null || charSequence2 != null) && charSequence.equals(charSequence2))) {
                                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = chatMessageCell6.animatedEmojiStack;
                                if (emojiGroupedSpans != null) {
                                    emojiGroupedSpans.replaceLayout(chatMessageCell6.currentMessageObject.textLayoutBlocks.get(i3).textLayout, this.lastDrawingTextBlocks.get(i3).textLayout);
                                }
                            }
                        }
                        ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                        chatMessageCell7.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell7, chatMessageCell7.animatedEmojiStack, chatMessageCell7.currentMessageObject.textLayoutBlocks);
                    }
                    this.animateMessageText = true;
                    ArrayList<MessageObject.TextLayoutBlock> arrayList = this.lastDrawingTextBlocks;
                    this.animateOutTextBlocks = arrayList;
                    this.animateOutTextXOffset = this.lastTextXOffset;
                    this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, (View) ChatMessageCell.this, this.animateOutAnimateEmoji, arrayList, true);
                    ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                    chatMessageCell8.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell8, chatMessageCell8.animatedEmojiStack, chatMessageCell8.currentMessageObject.textLayoutBlocks);
                    z = true;
                    this.animateDrawNameLayout = false;
                    if (ChatMessageCell.this.drawNameLayout != this.lastDrawNameLayout) {
                        this.animateDrawNameLayout = true;
                        z = true;
                    }
                    staticLayout = ChatMessageCell.this.replyTextLayout;
                    if (staticLayout != this.lastDrawnReplyTextLayout) {
                        CharSequence text = staticLayout != null ? staticLayout.getText() : null;
                        StaticLayout staticLayout3 = this.lastDrawnReplyTextLayout;
                        if (!TextUtils.equals(text, staticLayout3 != null ? staticLayout3.getText() : null)) {
                            this.animateFromReplyTextHeight = this.lastDrawingReplyTextHeight;
                            StaticLayout staticLayout4 = this.lastDrawnReplyTextLayout;
                            this.animateReplyTextLayout = staticLayout4;
                            this.animateReplyTextOffset = this.lastReplyTextXOffset;
                            this.animateOutAnimateEmojiReply = AnimatedEmojiSpan.update(0, (View) ChatMessageCell.this, false, this.animateOutAnimateEmojiReply, true, staticLayout4);
                            z = true;
                        }
                    }
                    if (ChatMessageCell.this.edited || this.lastDrawingEdited || ChatMessageCell.this.timeLayout == null) {
                        if (!ChatMessageCell.this.edited && this.lastDrawingEdited) {
                            chatMessageCell = ChatMessageCell.this;
                            if (chatMessageCell.timeLayout != null) {
                                this.animateTimeLayout = this.lastTimeLayout;
                                int i4 = chatMessageCell.timeWidth;
                                int i5 = this.lastTimeWidth;
                                this.animateEditedWidthDiff = i4 - i5;
                                this.animateEditedEnter = true;
                                this.animateTimeWidth = i5;
                                this.animateFromTimeX = this.lastTimeX;
                                this.shouldAnimateTimeX = true;
                                z = true;
                            }
                        }
                    } else {
                        String string = LocaleController.getString("EditedMessage", R.string.EditedMessage);
                        CharSequence text2 = ChatMessageCell.this.timeLayout.getText();
                        int indexOf = text2.toString().indexOf(string);
                        if (indexOf >= 0) {
                            if (indexOf == 0) {
                                Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
                                this.animateEditedLayout = new StaticLayout(string, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), alignment, 1.0f, 0.0f, false);
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                                spannableStringBuilder.append((CharSequence) string);
                                spannableStringBuilder.append(text2.subSequence(string.length(), text2.length()));
                                spannableStringBuilder.setSpan(new EmptyStubSpan(), 0, string.length(), 0);
                                this.animateTimeLayout = new StaticLayout(spannableStringBuilder, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), alignment, 1.0f, 0.0f, false);
                                this.animateEditedWidthDiff = ChatMessageCell.this.timeWidth - this.lastTimeWidth;
                            } else {
                                this.animateEditedWidthDiff = 0;
                                this.animateEditedLayout = null;
                                this.animateTimeLayout = this.lastTimeLayout;
                            }
                            this.animateEditedEnter = true;
                            this.animateTimeWidth = this.lastTimeWidth;
                            this.animateFromTimeX = this.lastTimeX;
                            this.shouldAnimateTimeX = true;
                            z = true;
                        }
                        ChatMessageCell.this.accessibilityText = null;
                    }
                    this.animateDrawBackground = false;
                    if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
                        this.animateDrawBackground = true;
                        z = true;
                    }
                    this.animateSmallImage = false;
                    if (ChatMessageCell.this.isSmallImage != this.lastDrawingSmallImage) {
                        this.animateSmallImage = true;
                        float f2 = this.lastDrawingImageW;
                        this.photoImageFromWidth = f2;
                        float f3 = this.lastDrawingImageH;
                        this.photoImageFromHeight = f3;
                        this.photoImageFromCenterX = this.lastDrawingImageX + (f2 / 2.0f);
                        this.photoImageFromCenterY = this.lastDrawingImageY + (f3 / 2.0f);
                        z = true;
                    }
                    this.animateRecommendationsExpanded = false;
                    z2 = (ChatMessageCell.this.currentMessageObject.type == 27 || (channelRecommendationsCell = ChatMessageCell.this.channelRecommendationsCell) == null || !channelRecommendationsCell.isExpanded()) ? false : true;
                    z3 = this.lastDrawingRecommendationsExpanded;
                    if (z2 != z3) {
                        this.animateRecommendationsExpanded = true;
                        this.animateFromRecommendationsExpanded = z3;
                        z = true;
                    }
                    this.animateLinkAbove = false;
                    chatMessageCell2 = ChatMessageCell.this;
                    if (chatMessageCell2.linkPreviewAbove != this.lastDrawingLinkAbove) {
                        this.animateLinkAbove = true;
                        z = true;
                    }
                    this.animateMediaAbove = false;
                    if (chatMessageCell2.captionAbove != this.lastDrawingMediaAbove) {
                        this.animateMediaAbove = true;
                        z = true;
                    }
                    this.animateLinkPreviewHeight = false;
                    if (chatMessageCell2.hasLinkPreview) {
                        int i6 = ChatMessageCell.this.linkPreviewHeight;
                        int i7 = this.lastDrawingLinkPreviewHeight;
                        if (i6 != i7) {
                            this.animateLinkPreviewHeight = true;
                            this.animateFromLinkPreviewHeight = i7;
                            z = true;
                        }
                    }
                    this.animateUseTranscribeButton = false;
                    if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
                        this.animateUseTranscribeButton = true;
                        z = true;
                    }
                    ChatMessageCell chatMessageCell9 = ChatMessageCell.this;
                    textLayoutBlocks = chatMessageCell9.captionLayout;
                    textLayoutBlocks2 = this.lastDrawingCaptionLayout;
                    if (textLayoutBlocks == textLayoutBlocks2) {
                        String charSequence3 = textLayoutBlocks2 == null ? null : textLayoutBlocks2.text.toString();
                        MessageObject.TextLayoutBlocks textLayoutBlocks3 = ChatMessageCell.this.captionLayout;
                        String charSequence4 = textLayoutBlocks3 == null ? null : textLayoutBlocks3.text.toString();
                        if ((charSequence4 == null) != (charSequence3 == null) || (charSequence3 != null && !charSequence3.equals(charSequence4))) {
                            this.animateReplaceCaptionLayout = true;
                            MessageObject.TextLayoutBlocks textLayoutBlocks4 = this.lastDrawingCaptionLayout;
                            this.animateOutCaptionLayout = textLayoutBlocks4;
                            this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, textLayoutBlocks4 == null ? null : textLayoutBlocks4.textLayoutBlocks);
                            ChatMessageCell chatMessageCell10 = ChatMessageCell.this;
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2 = chatMessageCell10.animatedEmojiStack;
                            MessageObject.TextLayoutBlocks textLayoutBlocks5 = chatMessageCell10.captionLayout;
                            chatMessageCell10.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell10, emojiGroupedSpans2, textLayoutBlocks5 == null ? null : textLayoutBlocks5.textLayoutBlocks);
                        } else {
                            ChatMessageCell.this.updateCaptionLayout();
                            if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                                this.moveCaption = true;
                                this.captionFromX = this.lastDrawingCaptionX;
                                this.captionFromY = this.lastDrawingCaptionY;
                            }
                        }
                        z = true;
                    } else if (textLayoutBlocks != null && textLayoutBlocks2 != null) {
                        chatMessageCell9.updateCaptionLayout();
                        if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                            this.moveCaption = true;
                            this.captionFromX = this.lastDrawingCaptionX;
                            this.captionFromY = this.lastDrawingCaptionY;
                            z = true;
                        }
                    }
                    if (this.lastDrawBotButtons.isEmpty() || !ChatMessageCell.this.botButtons.isEmpty()) {
                        if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                            this.animateBotButtonsChanged = true;
                        }
                        if (!this.animateBotButtonsChanged) {
                            for (int i8 = 0; i8 < ChatMessageCell.this.botButtons.size(); i8++) {
                                BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i8);
                                BotButton botButton2 = this.lastDrawBotButtons.get(i8);
                                if (botButton.x != botButton2.x || botButton.width != botButton2.width || botButton.title != botButton2.title) {
                                    this.animateBotButtonsChanged = true;
                                    break;
                                }
                            }
                        }
                        if (this.animateBotButtonsChanged) {
                            this.transitionBotButtons.addAll(this.lastDrawBotButtons);
                        }
                    }
                    if ((ChatMessageCell.this.documentAttachType != 5 || ChatMessageCell.this.documentAttachType == 3 || ChatMessageCell.this.documentAttachType == 1) && (ChatMessageCell.this.buttonX != this.lastButtonX || ChatMessageCell.this.buttonY != this.lastButtonY)) {
                        this.animateFromButtonX = this.lastButtonX;
                        this.animateFromButtonY = this.lastButtonY;
                        this.animateButton = true;
                        z = true;
                    }
                    i = ChatMessageCell.this.mediaOffsetY;
                    i2 = this.lastMediaOffsetY;
                    if (i != i2) {
                        this.animateFromMediaOffsetY = i2;
                        this.animateMediaOffsetY = true;
                        z = true;
                    }
                    z4 = this.lastIsPinned;
                    chatMessageCell3 = ChatMessageCell.this;
                    if (z4 == chatMessageCell3.isPinned) {
                        this.animatePinned = true;
                        chatMessageCell3.accessibilityText = null;
                        z = true;
                        z5 = true;
                    } else {
                        z5 = false;
                    }
                    if ((this.lastRepliesLayout == null || chatMessageCell3.repliesLayout != null) && this.lastRepliesCount != ChatMessageCell.this.getRepliesCount()) {
                        this.animateRepliesLayout = this.lastRepliesLayout;
                        this.animateReplies = true;
                        ChatMessageCell.this.accessibilityText = null;
                        z = true;
                        z5 = true;
                    }
                    if (this.lastViewsLayout != null && this.lastViewsCount != ChatMessageCell.this.getMessageObject().messageOwner.views) {
                        this.animateViewsLayout = this.lastViewsLayout;
                        ChatMessageCell.this.accessibilityText = null;
                        z = true;
                        z5 = true;
                    }
                    if (ChatMessageCell.this.commentLayout != null && this.lastCommentsCount != ChatMessageCell.this.getRepliesCount()) {
                        staticLayout2 = this.lastCommentLayout;
                        if (staticLayout2 == null && !TextUtils.equals(staticLayout2.getText(), ChatMessageCell.this.commentLayout.getText())) {
                            this.animateCommentsLayout = this.lastCommentLayout;
                        } else {
                            this.animateCommentsLayout = null;
                        }
                        this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                        this.animateCommentX = this.lastCommentX;
                        this.animateCommentArrowX = this.lastCommentArrowX;
                        this.animateCommentUnreadX = this.lastCommentUnreadX;
                        this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                        this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                        this.animateComments = true;
                        z = true;
                    }
                    if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                        this.animateSign = true;
                        this.animateNameX = ChatMessageCell.this.nameX;
                        z = true;
                    }
                    if (this.lastDrawTime != ChatMessageCell.this.forceNotDrawTime) {
                        this.animateDrawingTimeAlpha = true;
                        this.animateViewsLayout = null;
                    } else if (this.lastShouldDrawTimeOnMedia != ChatMessageCell.this.shouldDrawTimeOnMedia()) {
                        this.animateEditedEnter = false;
                        this.animateShouldDrawTimeOnMedia = true;
                        this.animateFromTimeX = this.lastTimeX;
                        this.animateTimeLayout = this.lastTimeLayout;
                        this.animateTimeWidth = this.lastTimeWidth;
                    } else {
                        if (z5 || Math.abs(ChatMessageCell.this.timeX - this.lastTimeX) > 1) {
                            this.shouldAnimateTimeX = true;
                            this.animateTimeWidth = this.lastTimeWidth;
                            this.animateFromTimeX = this.lastTimeX;
                            this.animateFromTimeXViews = this.lastTimeXViews;
                            this.animateFromTimeXReplies = this.lastTimeXReplies;
                            this.animateFromTimeXPinned = this.lastTimeXPinned;
                        }
                        if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                            this.animateShouldDrawMenuDrawable = true;
                        }
                        if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                            this.animateLocationIsExpired = true;
                        }
                        if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                            this.animatePlayingRound = true;
                            z = true;
                        }
                        f = this.lastDrawingTextY;
                        chatMessageCell4 = ChatMessageCell.this;
                        if (f != chatMessageCell4.textY) {
                            this.animateText = true;
                            this.animateFromTextY = f;
                            z = true;
                        }
                        if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                            this.animateLinkPreviewY = true;
                            this.animateFromLinkPreviewY = this.lastDrawingLinkPreviewY;
                            z = true;
                        }
                        if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                            this.animateFactCheckHeight = true;
                            this.animateFactCheckHeightFrom = this.lastDrawingFactCheckHeight;
                            z = true;
                        }
                        if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                            this.animateFactCheckExpanded = true;
                            z = true;
                        }
                        if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                            this.animateFactCheck = true;
                            z = true;
                        }
                        if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                            this.animateExpandedQuotes = true;
                            this.animateExpandedQuotesFrom = this.lastDrawingExpandedQuotes;
                            z = true;
                        }
                        if (ChatMessageCell.this.currentMessageObject != null && this.lastDrawnForwardedName != ChatMessageCell.this.currentMessageObject.needDrawForwarded()) {
                            this.animateForwardedLayout = true;
                            StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
                            StaticLayout[] staticLayoutArr2 = this.lastDrawnForwardedNameLayout;
                            staticLayoutArr[0] = staticLayoutArr2[0];
                            staticLayoutArr[1] = staticLayoutArr2[1];
                            this.animateForwardNameX = this.lastForwardNameX;
                            this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                            this.animateForwardNameWidth = this.lastForwardNameWidth;
                            z = true;
                        }
                        ChatMessageCell.this.updateReactionLayoutPosition();
                        if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                            z = true;
                        }
                        if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                            float dp = ChatMessageCell.this.layoutHeight - AndroidUtilities.dp(28 - (ChatMessageCell.this.drawPinnedBottom ? 2 : 0));
                            if (!ChatMessageCell.this.reactionsLayoutInBubble.isEmpty) {
                                dp -= reactionsLayoutInBubble.totalHeight;
                            }
                            float f4 = this.lastDrawRoundVideoDotY;
                            if (dp != f4) {
                                this.animateRoundVideoDotY = true;
                                this.animateFromRoundVideoDotY = f4;
                                z = true;
                            }
                        }
                        if (ChatMessageCell.this.replyNameLayout != null) {
                            float f5 = this.lastDrawReplyY;
                            if (chatMessageCell5.replyStartX != f5 && f5 != 0.0f) {
                                this.animateReplyY = true;
                                this.animateFromReplyY = f5;
                                return true;
                            }
                        }
                        return z;
                    }
                    z = true;
                    if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                    }
                    if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                    }
                    if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                    }
                    f = this.lastDrawingTextY;
                    chatMessageCell4 = ChatMessageCell.this;
                    if (f != chatMessageCell4.textY) {
                    }
                    if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                    }
                    if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                    }
                    if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                    }
                    if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                    }
                    if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                    }
                    if (ChatMessageCell.this.currentMessageObject != null) {
                        this.animateForwardedLayout = true;
                        StaticLayout[] staticLayoutArr3 = this.animatingForwardedNameLayout;
                        StaticLayout[] staticLayoutArr22 = this.lastDrawnForwardedNameLayout;
                        staticLayoutArr3[0] = staticLayoutArr22[0];
                        staticLayoutArr3[1] = staticLayoutArr22[1];
                        this.animateForwardNameX = this.lastForwardNameX;
                        this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                        this.animateForwardNameWidth = this.lastForwardNameWidth;
                        z = true;
                    }
                    ChatMessageCell.this.updateReactionLayoutPosition();
                    if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                    }
                    if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    }
                    if (ChatMessageCell.this.replyNameLayout != null) {
                    }
                    return z;
                }
                z = false;
                this.animateDrawNameLayout = false;
                if (ChatMessageCell.this.drawNameLayout != this.lastDrawNameLayout) {
                }
                staticLayout = ChatMessageCell.this.replyTextLayout;
                if (staticLayout != this.lastDrawnReplyTextLayout) {
                }
                if (ChatMessageCell.this.edited) {
                }
                if (!ChatMessageCell.this.edited) {
                    chatMessageCell = ChatMessageCell.this;
                    if (chatMessageCell.timeLayout != null) {
                    }
                }
                this.animateDrawBackground = false;
                if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
                }
                this.animateSmallImage = false;
                if (ChatMessageCell.this.isSmallImage != this.lastDrawingSmallImage) {
                }
                this.animateRecommendationsExpanded = false;
                if (ChatMessageCell.this.currentMessageObject.type == 27) {
                }
                z3 = this.lastDrawingRecommendationsExpanded;
                if (z2 != z3) {
                }
                this.animateLinkAbove = false;
                chatMessageCell2 = ChatMessageCell.this;
                if (chatMessageCell2.linkPreviewAbove != this.lastDrawingLinkAbove) {
                }
                this.animateMediaAbove = false;
                if (chatMessageCell2.captionAbove != this.lastDrawingMediaAbove) {
                }
                this.animateLinkPreviewHeight = false;
                if (chatMessageCell2.hasLinkPreview) {
                }
                this.animateUseTranscribeButton = false;
                if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
                }
                ChatMessageCell chatMessageCell92 = ChatMessageCell.this;
                textLayoutBlocks = chatMessageCell92.captionLayout;
                textLayoutBlocks2 = this.lastDrawingCaptionLayout;
                if (textLayoutBlocks == textLayoutBlocks2) {
                }
                if (this.lastDrawBotButtons.isEmpty()) {
                }
                if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                }
                if (!this.animateBotButtonsChanged) {
                }
                if (this.animateBotButtonsChanged) {
                }
                if (ChatMessageCell.this.documentAttachType != 5) {
                }
                this.animateFromButtonX = this.lastButtonX;
                this.animateFromButtonY = this.lastButtonY;
                this.animateButton = true;
                z = true;
                i = ChatMessageCell.this.mediaOffsetY;
                i2 = this.lastMediaOffsetY;
                if (i != i2) {
                }
                z4 = this.lastIsPinned;
                chatMessageCell3 = ChatMessageCell.this;
                if (z4 == chatMessageCell3.isPinned) {
                }
                if (this.lastRepliesLayout == null) {
                }
                this.animateRepliesLayout = this.lastRepliesLayout;
                this.animateReplies = true;
                ChatMessageCell.this.accessibilityText = null;
                z = true;
                z5 = true;
                if (this.lastViewsLayout != null) {
                    this.animateViewsLayout = this.lastViewsLayout;
                    ChatMessageCell.this.accessibilityText = null;
                    z = true;
                    z5 = true;
                }
                if (ChatMessageCell.this.commentLayout != null) {
                    staticLayout2 = this.lastCommentLayout;
                    if (staticLayout2 == null) {
                    }
                    this.animateCommentsLayout = null;
                    this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                    this.animateCommentX = this.lastCommentX;
                    this.animateCommentArrowX = this.lastCommentArrowX;
                    this.animateCommentUnreadX = this.lastCommentUnreadX;
                    this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                    this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                    this.animateComments = true;
                    z = true;
                }
                if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                }
                if (this.lastDrawTime != ChatMessageCell.this.forceNotDrawTime) {
                }
                z = true;
                if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                }
                if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                }
                if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                }
                f = this.lastDrawingTextY;
                chatMessageCell4 = ChatMessageCell.this;
                if (f != chatMessageCell4.textY) {
                }
                if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                }
                if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                }
                if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                }
                if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                }
                if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                }
                if (ChatMessageCell.this.currentMessageObject != null) {
                }
                ChatMessageCell.this.updateReactionLayoutPosition();
                if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                }
                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                }
                if (ChatMessageCell.this.replyNameLayout != null) {
                }
                return z;
            }
            return false;
        }

        public void onDetach() {
            this.wasDraw = false;
        }

        public void resetAnimation() {
            this.animateChange = false;
            this.animatePinned = false;
            this.animateBackgroundBoundsInner = false;
            this.animateBackgroundWidth = false;
            this.deltaLeft = 0.0f;
            this.deltaRight = 0.0f;
            this.deltaBottom = 0.0f;
            this.deltaTop = 0.0f;
            this.toDeltaLeft = 0.0f;
            this.toDeltaRight = 0.0f;
            if (this.imageChangeBoundsTransition && this.animateToImageW != 0.0f && this.animateToImageH != 0.0f) {
                ChatMessageCell.this.photoImage.setImageCoords(this.animateToImageX, this.animateToImageY, this.animateToImageW, this.animateToImageH);
            }
            if (this.animateRadius) {
                ChatMessageCell.this.photoImage.setRoundRadius(this.animateToRadius);
            }
            this.animateToImageX = 0.0f;
            this.animateToImageY = 0.0f;
            this.animateToImageW = 0.0f;
            this.animateToImageH = 0.0f;
            this.imageChangeBoundsTransition = false;
            this.changePinnedBottomProgress = 1.0f;
            this.captionEnterProgress = 1.0f;
            this.animateRadius = false;
            this.animateChangeProgress = 1.0f;
            this.animateMessageText = false;
            this.animateDrawNameLayout = false;
            this.animateOutTextBlocks = null;
            this.animateEditedLayout = null;
            this.animateTimeLayout = null;
            this.animateEditedEnter = false;
            this.animateReplaceCaptionLayout = false;
            this.transformGroupToSingleMessage = false;
            this.animateOutCaptionLayout = null;
            AnimatedEmojiSpan.release(ChatMessageCell.this, this.animateOutAnimateEmoji);
            this.animateOutAnimateEmoji = null;
            this.moveCaption = false;
            this.animateDrawingTimeAlpha = false;
            this.transitionBotButtons.clear();
            this.animateButton = false;
            this.animateMediaOffsetY = false;
            this.animateReplyTextLayout = null;
            this.animateReplies = false;
            this.animateRepliesLayout = null;
            this.animateComments = false;
            this.animateCommentsLayout = null;
            this.animateViewsLayout = null;
            this.animateShouldDrawTimeOnMedia = false;
            this.animateShouldDrawMenuDrawable = false;
            this.shouldAnimateTimeX = false;
            this.animateDrawBackground = false;
            this.animateSign = false;
            this.animateSmallImage = false;
            this.animateLinkAbove = false;
            this.animateMediaAbove = false;
            this.animateRecommendationsExpanded = false;
            this.animateDrawingTimeAlpha = false;
            this.animateLocationIsExpired = false;
            this.animatePlayingRound = false;
            this.animateText = false;
            this.animateLinkPreviewY = false;
            this.animateFactCheckHeight = false;
            this.animateFactCheckExpanded = false;
            this.animateExpandedQuotes = false;
            this.animateFactCheck = false;
            this.animateForwardedLayout = false;
            StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
            staticLayoutArr[0] = null;
            staticLayoutArr[1] = null;
            this.animateRoundVideoDotY = false;
            this.animateReplyY = false;
            ChatMessageCell.this.reactionsLayoutInBubble.resetAnimation();
        }

        /* JADX WARN: Removed duplicated region for block: B:30:0x0085  */
        /* JADX WARN: Removed duplicated region for block: B:31:0x0087  */
        /* JADX WARN: Removed duplicated region for block: B:35:0x008c  */
        /* JADX WARN: Removed duplicated region for block: B:39:0x0091  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public int createStatusDrawableParams() {
            int i;
            boolean z;
            boolean z2;
            boolean z3 = true;
            if (ChatMessageCell.this.currentMessageObject.isOutOwner()) {
                if (ChatMessageCell.this.currentMessageObject.isSending() || ChatMessageCell.this.currentMessageObject.isEditing()) {
                    i = 0;
                    z3 = false;
                    z = true;
                } else if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                    i = 0;
                    z3 = false;
                    z = false;
                    z2 = true;
                    if (!ChatMessageCell.this.currentMessageObject.notime || ChatMessageCell.this.currentMessageObject.isQuickReply()) {
                        i = 0;
                        z3 = false;
                        z = false;
                    }
                    return i | (!z3 ? 2 : 0) | (z ? 4 : 0) | (z2 ? 8 : 0);
                } else {
                    if (ChatMessageCell.this.currentMessageObject.isSent()) {
                        i = (ChatMessageCell.this.currentMessageObject.scheduled || ChatMessageCell.this.currentMessageObject.isUnread()) ? 0 : 1;
                    } else {
                        i = 0;
                        z3 = false;
                    }
                    z = false;
                }
                z2 = false;
                if (!ChatMessageCell.this.currentMessageObject.notime) {
                }
                i = 0;
                z3 = false;
                z = false;
                return i | (!z3 ? 2 : 0) | (z ? 4 : 0) | (z2 ? 8 : 0);
            }
            if (!ChatMessageCell.this.currentMessageObject.isSending() && !ChatMessageCell.this.currentMessageObject.isEditing()) {
                z3 = false;
            }
            return (z3 ? 4 : 0) | (ChatMessageCell.this.currentMessageObject.isSendError() ? 8 : 0);
        }
    }

    public int getThemedColor(int i) {
        return Theme.getColor(i, this.resourcesProvider);
    }

    private Drawable getThemedDrawable(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Drawable drawable = resourcesProvider != null ? resourcesProvider.getDrawable(str) : null;
        return drawable != null ? drawable : Theme.getThemeDrawable(str);
    }

    public Paint getThemedPaint(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Paint paint = resourcesProvider != null ? resourcesProvider.getPaint(str) : null;
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public boolean hasGradientService() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.hasGradientService() : Theme.hasGradientService();
    }

    private ColorMatrixColorFilter getFancyBlurFilter() {
        if (this.fancyBlurFilter == null) {
            ColorMatrix colorMatrix = new ColorMatrix();
            AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, 0.9f);
            AndroidUtilities.adjustSaturationColorMatrix(colorMatrix, 0.6f);
            this.fancyBlurFilter = new ColorMatrixColorFilter(colorMatrix);
        }
        return this.fancyBlurFilter;
    }

    public int getNameStatusX() {
        float f = this.nameX + this.nameOffsetX;
        int i = this.viaNameWidth;
        return (int) (f + (i > 0 ? i - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(2.0f) + (AndroidUtilities.dp(20.0f) / 2));
    }

    public int getNameStatusY() {
        float f = this.nameY;
        StaticLayout staticLayout = this.nameLayout;
        return (int) (f + ((staticLayout == null ? 0 : staticLayout.getHeight()) / 2));
    }

    @Override // android.view.View
    public void computeScroll() {
        super.computeScroll();
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.computeScroll();
        }
    }

    private ColorFilter getAdaptiveEmojiColorFilter(int i, int i2) {
        if (this.adaptiveEmojiColorFilter == null) {
            this.adaptiveEmojiColor = new int[3];
            this.adaptiveEmojiColorFilter = new ColorFilter[3];
        }
        if (i2 != this.adaptiveEmojiColor[i] || this.adaptiveEmojiColorFilter[i] == null) {
            ColorFilter[] colorFilterArr = this.adaptiveEmojiColorFilter;
            this.adaptiveEmojiColor[i] = i2;
            colorFilterArr[i] = new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN);
        }
        return this.adaptiveEmojiColorFilter[i];
    }

    public boolean needDrawAvatar() {
        MessageObject messageObject;
        MessageObject messageObject2;
        return (this.isChat && !this.isSavedPreviewChat && ((!this.isThreadPost || this.isForum) && (messageObject2 = this.currentMessageObject) != null && !messageObject2.isOutOwner() && this.currentMessageObject.needDrawAvatar())) || ((messageObject = this.currentMessageObject) != null && messageObject.forceAvatar);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public boolean drawPhotoImage(Canvas canvas) {
        return this.photoImage.draw(canvas);
    }

    public boolean areTags() {
        TLRPC$Message tLRPC$Message;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        if (primaryMessageObject == null || (tLRPC$Message = primaryMessageObject.messageOwner) == null || (tLRPC$TL_messageReactions = tLRPC$Message.reactions) == null) {
            return false;
        }
        return tLRPC$TL_messageReactions.reactions_as_tags;
    }

    public String getFilename() {
        int i;
        int i2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return null;
        }
        int i3 = messageObject.type;
        if (i3 == 1) {
            TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
            if (tLRPC$PhotoSize == null) {
                return null;
            }
            return FileLoader.getAttachFileName(tLRPC$PhotoSize);
        }
        if (i3 == 8 || (i2 = this.documentAttachType) == 7 || i2 == 4 || i2 == 8 || i3 == 9 || i2 == 3 || i2 == 5) {
            if (messageObject.useCustomPhoto) {
                return null;
            }
            if (messageObject.attachPathExists && !TextUtils.isEmpty(messageObject.messageOwner.attachPath)) {
                return this.currentMessageObject.messageOwner.attachPath;
            }
            if (!this.currentMessageObject.isSendError() || (i = this.documentAttachType) == 3 || i == 5) {
                return this.currentMessageObject.getFileName();
            }
        } else if (i2 != 0) {
            return FileLoader.getAttachFileName(this.documentAttach);
        } else {
            TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
            if (tLRPC$PhotoSize2 != null) {
                return FileLoader.getAttachFileName(tLRPC$PhotoSize2);
            }
        }
        return null;
    }

    public boolean checkLoadCaughtPremiumFloodWait() {
        return FileLoader.getInstance(this.currentAccount).checkLoadCaughtPremiumFloodWait(getFilename());
    }

    public boolean checkUploadCaughtPremiumFloodWait() {
        return FileLoader.getInstance(this.currentAccount).checkUploadCaughtPremiumFloodWait(getFilename());
    }

    public TLRPC$TL_availableEffect getEffect() {
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if ((groupedMessagePosition == null || groupedMessagePosition.last) && (messageObject = this.currentMessageObject) != null) {
            return messageObject.getEffect();
        }
        return null;
    }

    /* JADX WARN: Code restructure failed: missing block: B:41:0x01e1, code lost:
        if ((r6.getLineRight(r6.getLineCount() - 1) - r27.factCheckText2LayoutLeft) > (r27.factCheckWidth - org.telegram.messenger.AndroidUtilities.dp(50.0f))) goto L33;
     */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0226  */
    /* JADX WARN: Removed duplicated region for block: B:65:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int layoutFactCheck(int i) {
        int i2;
        String str;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        this.factCheckHeight = 0;
        this.factCheckWidth = 0;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        boolean z = true;
        boolean z2 = ((groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0) || primaryMessageObject == null || primaryMessageObject.getFactCheck() == null || primaryMessageObject.isRepostPreview) ? false : true;
        this.hasFactCheck = z2;
        if (z2) {
            TLRPC$TL_factCheck factCheck = primaryMessageObject.getFactCheck();
            CharSequence factCheckText = primaryMessageObject.getFactCheckText();
            if (factCheck.need_check || factCheckText == null) {
                this.hasFactCheck = false;
            } else {
                this.factCheckHeight += AndroidUtilities.dp(4.66f);
                this.factCheckTitle = new Text(LocaleController.getString(R.string.FactCheck), 14.0f, AndroidUtilities.bold());
                this.factCheckWhat = new Text(LocaleController.getString(R.string.FactCheckWhat), 11.0f);
                this.factCheckHeight += AndroidUtilities.dp(17.33f);
                this.factCheckWidth = (int) (AndroidUtilities.dp(20.0f) + this.factCheckTitle.getCurrentWidth() + this.factCheckWhat.getCurrentWidth() + AndroidUtilities.dp(18.0f));
                try {
                    str = new Locale("", factCheck.country).getDisplayCountry(LocaleController.getInstance().getCurrentLocale());
                } catch (Exception e) {
                    FileLog.e(e);
                    str = factCheck.country;
                }
                TextPaint textPaint = Theme.chat_replyTextPaint;
                Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
                TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
                this.factCheckTextLayout = StaticLayoutEx.createStaticLayout(factCheckText, textPaint, i, alignment, 1.0f, AndroidUtilities.dp(1.0f), false, truncateAt, i, 99999);
                this.factCheckText2Layout = StaticLayoutEx.createStaticLayout(LocaleController.formatString(R.string.FactCheckFooter, str), Theme.chat_titleLabelTextPaint, i, alignment, 1.0f, AndroidUtilities.dp(1.0f), false, truncateAt, i, 99999);
                this.factCheckTextLayoutLeft = this.factCheckTextLayout.getWidth();
                int i3 = 0;
                for (int i4 = 0; i4 < this.factCheckTextLayout.getLineCount(); i4++) {
                    this.factCheckTextLayoutLeft = (int) Math.min(this.factCheckTextLayoutLeft, this.factCheckTextLayout.getLineLeft(i4));
                    i3 = (int) Math.max(i3, this.factCheckTextLayout.getLineRight(i4));
                }
                this.factCheckWidth = Math.max(this.factCheckWidth, Math.abs(i3 - this.factCheckTextLayoutLeft) + AndroidUtilities.dp(20.0f));
                this.factCheckText2LayoutLeft = this.factCheckText2Layout.getWidth();
                int i5 = 0;
                for (int i6 = 0; i6 < this.factCheckText2Layout.getLineCount(); i6++) {
                    this.factCheckText2LayoutLeft = (int) Math.min(this.factCheckText2LayoutLeft, this.factCheckText2Layout.getLineLeft(i6));
                    i5 = (int) Math.max(i5, this.factCheckText2Layout.getLineRight(i6));
                }
                this.factCheckWidth = Math.max(this.factCheckWidth, Math.abs(i5 - this.factCheckText2LayoutLeft) + AndroidUtilities.dp(20.0f));
                StaticLayout staticLayout = this.factCheckTextLayout;
                int lineBottom = staticLayout.getLineBottom(staticLayout.getLineCount() - 1);
                this.factCheckTextLayoutHeight = lineBottom;
                int dp = lineBottom + AndroidUtilities.dp(12.66f);
                StaticLayout staticLayout2 = this.factCheckText2Layout;
                int lineBottom2 = dp + staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1);
                int textSize = (int) (Theme.chat_replyTextPaint.getTextSize() * 3.5f * 1.4f);
                boolean z3 = this.factCheckTextLayout.getLineCount() > 3 && AndroidUtilities.dp(10.0f) + lineBottom2 > textSize;
                this.factCheckLarge = z3;
                if (z3) {
                    StaticLayout staticLayout3 = this.factCheckText2Layout;
                }
                z = false;
                this.factCheckTextLayoutLastLineEnd = z;
                if (this.factCheckLarge && !primaryMessageObject.factCheckExpanded) {
                    if (lineBottom2 < textSize) {
                        this.factCheckLarge = false;
                    }
                    lineBottom2 = Math.min(textSize, lineBottom2);
                }
                if (this.factCheckTextLayoutLastLineEnd) {
                    lineBottom2 = (int) (lineBottom2 + (Theme.chat_replyTextPaint.getTextSize() * 1.3f));
                }
                int i7 = this.factCheckHeight + lineBottom2;
                this.factCheckHeight = i7;
                this.factCheckHeight = i7 + AndroidUtilities.dp(6.66f);
                i2 = AndroidUtilities.dp(2.0f);
                if (this.hasFactCheck) {
                    return 0;
                }
                return this.factCheckHeight + i2;
            }
        }
        i2 = 0;
        if (this.hasFactCheck) {
        }
    }
}

package org.telegram.ui.Cells;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.RippleDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.URLSpan;
import android.util.Property;
import android.util.SparseArray;
import android.util.StateSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewStructure;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeProvider;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.ColorUtils;
import androidx.core.math.MathUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DocumentObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.R;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.SvgHelper;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.video.VideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatInvite;
import org.telegram.tgnet.TLRPC$ChatPhoto;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DocumentAttribute;
import org.telegram.tgnet.TLRPC$EmojiStatus;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GeoPoint;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessagePeerReaction;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$PageBlock;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PhoneCallDiscardReason;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_documentAttributeAudio;
import org.telegram.tgnet.TLRPC$TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC$TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC$TL_emojiStatus;
import org.telegram.tgnet.TLRPC$TL_emojiStatusUntil;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestGeoLocation;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonWebView;
import org.telegram.tgnet.TLRPC$TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageExtendedMediaPreview;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaGeoLive;
import org.telegram.tgnet.TLRPC$TL_messageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaVenue;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_page;
import org.telegram.tgnet.TLRPC$TL_pageBlockCollage;
import org.telegram.tgnet.TLRPC$TL_pageBlockSlideshow;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoSize;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_photoStrippedSize;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_pollAnswerVoters;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_webDocument;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeTheme;
import org.telegram.tgnet.TLRPC$ThemeSettings;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebDocument;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedFloat;
import org.telegram.ui.Components.AnimatedNumberLayout;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AudioVisualizerDrawable;
import org.telegram.ui.Components.AvatarDrawable;
import org.telegram.ui.Components.BackgroundGradientDrawable;
import org.telegram.ui.Components.CheckBoxBase;
import org.telegram.ui.Components.ClipRoundedDrawable;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EmptyStubSpan;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.Forum.MessageTopicButton;
import org.telegram.ui.Components.InfiniteProgress;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.LoadingDrawable;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.MsgClockDrawable;
import org.telegram.ui.Components.Point;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgress2;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.RoundVideoPlayingDrawable;
import org.telegram.ui.Components.SeekBar;
import org.telegram.ui.Components.SeekBarAccessibilityDelegate;
import org.telegram.ui.Components.SeekBarWaveform;
import org.telegram.ui.Components.SlotsDrawable;
import org.telegram.ui.Components.StaticLayoutEx;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.TimerParticles;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanBrowser;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.SecretMediaViewer;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes3.dex */
public class ChatMessageCell extends BaseCell implements SeekBar.SeekBarDelegate, ImageReceiver.ImageReceiverDelegate, DownloadController.FileDownloadProgressListener, TextSelectionHelper.SelectableView, NotificationCenter.NotificationCenterDelegate {
    private static float[] radii = new float[8];
    private final boolean ALPHA_PROPERTY_WORKAROUND;
    public Property<ChatMessageCell, Float> ANIMATION_OFFSET_X;
    private int TAG;
    CharSequence accessibilityText;
    private SparseArray<Rect> accessibilityVirtualViewBounds;
    private int addedCaptionHeight;
    private boolean addedForTest;
    private int additionalTimeOffsetY;
    private StaticLayout adminLayout;
    private boolean allowAssistant;
    private float alphaInternal;
    private int animateFromStatusDrawableParams;
    private boolean animatePollAnswer;
    private boolean animatePollAnswerAlpha;
    private boolean animatePollAvatars;
    private int animateToStatusDrawableParams;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiDescriptionStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiReplyStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiStack;
    private int animatingDrawVideoImageButton;
    private float animatingDrawVideoImageButtonProgress;
    private float animatingLoadingProgressProgress;
    private int animatingNoSound;
    private boolean animatingNoSoundPlaying;
    private float animatingNoSoundProgress;
    private float animationOffsetX;
    private boolean animationRunning;
    private boolean attachedToWindow;
    private StaticLayout authorLayout;
    private int authorX;
    private boolean autoPlayingMedia;
    private int availableTimeWidth;
    private AvatarDrawable avatarDrawable;
    private ImageReceiver avatarImage;
    private boolean avatarPressed;
    private Theme.MessageDrawable.PathDrawParams backgroundCacheParams;
    private MessageBackgroundDrawable backgroundDrawable;
    private int backgroundDrawableBottom;
    private int backgroundDrawableLeft;
    private int backgroundDrawableRight;
    private int backgroundDrawableTop;
    private int backgroundHeight;
    private int backgroundWidth;
    private ImageReceiver blurredPhotoImage;
    private int blurredViewBottomOffset;
    private int blurredViewTopOffset;
    private ArrayList<BotButton> botButtons;
    private HashMap<String, BotButton> botButtonsByData;
    private HashMap<String, BotButton> botButtonsByPosition;
    private String botButtonsLayout;
    private boolean bottomNearToSet;
    private int buttonPressed;
    private int buttonState;
    private int buttonX;
    private int buttonY;
    private final boolean canDrawBackgroundInParent;
    private boolean canStreamVideo;
    private int captionHeight;
    private StaticLayout captionLayout;
    private int captionOffsetX;
    private AtomicReference<Layout> captionPatchedSpoilersLayout;
    private List<SpoilerEffect> captionSpoilers;
    private Stack<SpoilerEffect> captionSpoilersPool;
    private int captionWidth;
    private float captionX;
    private float captionY;
    private CheckBoxBase checkBox;
    private boolean checkBoxAnimationInProgress;
    private float checkBoxAnimationProgress;
    private int checkBoxTranslation;
    private boolean checkBoxVisible;
    private boolean checkOnlyButtonPressed;
    private String closeTimeText;
    private int closeTimeWidth;
    private int commentArrowX;
    private AvatarDrawable[] commentAvatarDrawables;
    private ImageReceiver[] commentAvatarImages;
    private boolean[] commentAvatarImagesVisible;
    private boolean commentButtonPressed;
    private Rect commentButtonRect;
    private boolean commentDrawUnread;
    private StaticLayout commentLayout;
    private AnimatedNumberLayout commentNumberLayout;
    private int commentNumberWidth;
    private InfiniteProgress commentProgress;
    private float commentProgressAlpha;
    private long commentProgressLastUpadteTime;
    private int commentUnreadX;
    private int commentWidth;
    private int commentX;
    private AvatarDrawable contactAvatarDrawable;
    private float controlsAlpha;
    private int currentAccount;
    private Theme.MessageDrawable currentBackgroundDrawable;
    private Theme.MessageDrawable currentBackgroundSelectedDrawable;
    private CharSequence currentCaption;
    private TLRPC$Chat currentChat;
    private int currentFocusedVirtualView;
    private TLRPC$Chat currentForwardChannel;
    private String currentForwardName;
    private String currentForwardNameString;
    private TLRPC$User currentForwardUser;
    private int currentMapProvider;
    private MessageObject currentMessageObject;
    private MessageObject.GroupedMessages currentMessagesGroup;
    private Object currentNameStatus;
    private AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable currentNameStatusDrawable;
    private String currentNameString;
    private TLRPC$FileLocation currentPhoto;
    private String currentPhotoFilter;
    private String currentPhotoFilterThumb;
    private TLRPC$PhotoSize currentPhotoObject;
    private TLRPC$PhotoSize currentPhotoObjectThumb;
    private BitmapDrawable currentPhotoObjectThumbStripped;
    private MessageObject.GroupedMessagePosition currentPosition;
    private String currentRepliesString;
    private TLRPC$PhotoSize currentReplyPhoto;
    private long currentReplyUserId;
    private float currentSelectedBackgroundAlpha;
    private CharSequence currentTimeString;
    private String currentUnlockString;
    private String currentUrl;
    private TLRPC$User currentUser;
    private TLRPC$User currentViaBotUser;
    private String currentViewsString;
    private WebFile currentWebFile;
    private ChatMessageCellDelegate delegate;
    private RectF deleteProgressRect;
    private StaticLayout descriptionLayout;
    private int descriptionX;
    private int descriptionY;
    private Runnable diceFinishCallback;
    private boolean disallowLongPress;
    private StaticLayout docTitleLayout;
    private int docTitleOffsetX;
    private int docTitleWidth;
    private TLRPC$Document documentAttach;
    private int documentAttachType;
    private boolean drawBackground;
    private boolean drawCommentButton;
    private boolean drawCommentNumber;
    public boolean drawForBlur;
    private boolean drawForwardedName;
    public boolean drawFromPinchToZoom;
    private boolean drawImageButton;
    private boolean drawInstantView;
    private int drawInstantViewType;
    private boolean drawMediaCheckBox;
    private boolean drawName;
    private boolean drawNameLayout;
    private boolean drawPhotoImage;
    public boolean drawPinnedBottom;
    private boolean drawPinnedTop;
    private boolean drawRadialCheckBackground;
    private boolean drawSelectionBackground;
    private int drawSideButton;
    private boolean drawTime;
    private float drawTimeX;
    private float drawTimeY;
    private boolean drawTopic;
    private boolean drawVideoImageButton;
    private boolean drawVideoSize;
    private Paint drillHolePaint;
    private Path drillHolePath;
    private StaticLayout durationLayout;
    private int durationWidth;
    private boolean edited;
    boolean enterTransitionInProgress;
    private boolean firstCircleLength;
    private int firstVisibleBlockNum;
    private boolean flipImage;
    private boolean forceNotDrawTime;
    private boolean forwardBotPressed;
    private int forwardHeight;
    private int forwardNameCenterX;
    private float[] forwardNameOffsetX;
    private boolean forwardNamePressed;
    private float forwardNameX;
    private int forwardNameY;
    private StaticLayout[] forwardedNameLayout;
    private int forwardedNameWidth;
    private boolean fullyDraw;
    private boolean gamePreviewPressed;
    private LinearGradient gradientShader;
    private boolean groupPhotoInvisible;
    private MessageObject.GroupedMessages groupedMessagesToSet;
    private boolean hadLongPress;
    public boolean hasDiscussion;
    private boolean hasEmbed;
    private boolean hasGamePreview;
    private boolean hasInvoicePreview;
    private boolean hasLinkPreview;
    private int hasMiniProgress;
    private boolean hasNewLineForTime;
    private boolean hasOldCaptionPreview;
    private boolean hasPsaHint;
    private LinkPath highlightPath;
    private CharacterStyle highlightPathSpan;
    private long highlightPathStart;
    private int highlightProgress;
    private float hintButtonProgress;
    private boolean hintButtonVisible;
    private int imageBackgroundColor;
    private int imageBackgroundGradientColor1;
    private int imageBackgroundGradientColor2;
    private int imageBackgroundGradientColor3;
    private int imageBackgroundGradientRotation;
    private float imageBackgroundIntensity;
    private int imageBackgroundSideColor;
    private int imageBackgroundSideWidth;
    private boolean imageDrawn;
    private boolean imagePressed;
    boolean imageReceiversAttachState;
    private boolean inLayout;
    private StaticLayout infoLayout;
    private int infoWidth;
    private int infoX;
    private boolean instantButtonPressed;
    private RectF instantButtonRect;
    private boolean instantPressed;
    private int instantTextLeftX;
    private boolean instantTextNewLine;
    private int instantTextX;
    private StaticLayout instantViewLayout;
    private int instantWidth;
    private Runnable invalidateRunnable;
    private boolean invalidateSpoilersParent;
    private boolean invalidatesParent;
    private boolean isAvatarVisible;
    public boolean isBlurred;
    public boolean isBot;
    private boolean isCaptionSpoilerPressed;
    public boolean isChat;
    private boolean isCheckPressed;
    private boolean isHighlighted;
    private boolean isHighlightedAnimated;
    public boolean isMegagroup;
    public boolean isPinned;
    public boolean isPinnedChat;
    private boolean isPlayingRound;
    private boolean isPressed;
    public boolean isRepliesChat;
    private boolean isRoundVideo;
    private boolean isSmallImage;
    private boolean isSpoilerRevealing;
    public boolean isThreadChat;
    private boolean isThreadPost;
    private boolean isUpdating;
    private int keyboardHeight;
    private long lastAnimationTime;
    private long lastCheckBoxAnimationTime;
    private long lastControlsAlphaChangeTime;
    private int lastDeleteDate;
    private float lastDrawingAudioProgress;
    private int lastHeight;
    private long lastHighlightProgressTime;
    private long lastLoadingSizeTotal;
    private long lastNamesAnimationTime;
    private TLRPC$Poll lastPoll;
    private long lastPollCloseTime;
    private ArrayList<TLRPC$TL_pollAnswerVoters> lastPollResults;
    private int lastPollResultsVoters;
    private String lastPostAuthor;
    private TLRPC$TL_messageReactions lastReactions;
    private int lastRepliesCount;
    private TLRPC$Message lastReplyMessage;
    private long lastSeekUpdateTime;
    private int lastSendState;
    int lastSize;
    private int lastTime;
    private float lastTouchX;
    private float lastTouchY;
    private int lastViewsCount;
    private int lastVisibleBlockNum;
    private int lastWidth;
    private int layoutHeight;
    private int layoutWidth;
    private int linkBlockNum;
    private int linkPreviewHeight;
    private boolean linkPreviewPressed;
    private int linkSelectionBlockNum;
    public long linkedChatId;
    private LinkSpanDrawable.LinkCollector links;
    private StaticLayout loadingProgressLayout;
    private boolean locationExpired;
    private ImageReceiver locationImageReceiver;
    private Drawable locationLoadingThumb;
    private boolean mediaBackground;
    private CheckBoxBase mediaCheckBox;
    private int mediaOffsetY;
    private SpoilerEffect mediaSpoilerEffect;
    private Path mediaSpoilerPath;
    private float[] mediaSpoilerRadii;
    private float mediaSpoilerRevealMaxRadius;
    private float mediaSpoilerRevealProgress;
    private float mediaSpoilerRevealX;
    private float mediaSpoilerRevealY;
    private boolean mediaWasInvisible;
    private MessageObject messageObjectToSet;
    private int miniButtonPressed;
    private int miniButtonState;
    private MotionBackgroundDrawable motionBackgroundDrawable;
    private StaticLayout nameLayout;
    private int nameLayoutWidth;
    private float nameOffsetX;
    private int nameWidth;
    private float nameX;
    private float nameY;
    private int namesOffset;
    private boolean needNewVisiblePart;
    public boolean needReplyImage;
    private int noSoundCenterX;
    private boolean otherPressed;
    private int otherX;
    private int otherY;
    private int overideShouldDrawTimeOnMedia;
    int parentBoundsBottom;
    float parentBoundsTop;
    private int parentHeight;
    public float parentViewTopOffset;
    private int parentWidth;
    private StaticLayout performerLayout;
    private int performerX;
    private ImageReceiver photoImage;
    private boolean photoImageOutOfBounds;
    private boolean photoNotSet;
    private TLObject photoParentObject;
    private StaticLayout photosCountLayout;
    private int photosCountWidth;
    public boolean pinnedBottom;
    public boolean pinnedTop;
    private float pollAnimationProgress;
    private float pollAnimationProgressTime;
    private AvatarDrawable[] pollAvatarDrawables;
    private ImageReceiver[] pollAvatarImages;
    private boolean[] pollAvatarImagesVisible;
    private ArrayList<PollButton> pollButtons;
    private CheckBoxBase[] pollCheckBox;
    private boolean pollClosed;
    private boolean pollHintPressed;
    private int pollHintX;
    private int pollHintY;
    private boolean pollInstantViewTouchesBottom;
    private boolean pollUnvoteInProgress;
    private boolean pollVoteInProgress;
    private int pollVoteInProgressNum;
    private boolean pollVoted;
    private int pressedBotButton;
    private AnimatedEmojiSpan pressedEmoji;
    private LinkSpanDrawable pressedLink;
    private int pressedLinkType;
    private int[] pressedState;
    private int pressedVoteButton;
    private CharacterStyle progressLoadingLink;
    private LoadingDrawable progressLoadingLinkCurrentDrawable;
    private ArrayList<LoadingDrawableLocation> progressLoadingLinkDrawables;
    private float psaButtonProgress;
    private boolean psaButtonVisible;
    private int psaHelpX;
    private int psaHelpY;
    private boolean psaHintPressed;
    private RadialProgress2 radialProgress;
    public final ReactionsLayoutInBubble reactionsLayoutInBubble;
    private RectF rect;
    private Path rectPath;
    private StaticLayout repliesLayout;
    private int repliesTextWidth;
    public float replyHeight;
    public ImageReceiver replyImageReceiver;
    public LoadingDrawable replyLoadingDrawable;
    private float[] replyLoadingSegment;
    private float replyLoadingT;
    public StaticLayout replyNameLayout;
    private int replyNameOffset;
    private int replyNameWidth;
    private boolean replyPanelIsForward;
    private boolean replyPressed;
    private AnimatedFloat replyPressedFloat;
    private Path replyRoundRectPath;
    private float[] replyRoundRectRadii;
    public Drawable replySelector;
    private boolean replySelectorCanBePressed;
    public int replySelectorColor;
    private boolean replySelectorPressed;
    public float replySelectorRadLeft;
    public float replySelectorRadRight;
    public Rect replySelectorRect;
    public List<SpoilerEffect> replySpoilers;
    private Stack<SpoilerEffect> replySpoilersPool;
    public int replyStartX;
    public int replyStartY;
    public StaticLayout replyTextLayout;
    private int replyTextOffset;
    private int replyTextWidth;
    private float replyTouchX;
    private float replyTouchY;
    private final Theme.ResourcesProvider resourcesProvider;
    private float roundPlayingDrawableProgress;
    private float roundProgressAlpha;
    float roundSeekbarOutAlpha;
    float roundSeekbarOutProgress;
    int roundSeekbarTouched;
    private float roundToPauseProgress;
    private float roundToPauseProgress2;
    private AnimatedFloat roundVideoPlayPipFloat;
    private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
    private Path sPath;
    private boolean scheduledInvalidate;
    private Rect scrollRect;
    private SeekBar seekBar;
    private SeekBarAccessibilityDelegate seekBarAccessibilityDelegate;
    private SeekBarWaveform seekBarWaveform;
    private int seekBarWaveformTranslateX;
    private int seekBarX;
    private int seekBarY;
    float seekbarRoundX;
    float seekbarRoundY;
    private float selectedBackgroundProgress;
    private Paint selectionOverlayPaint;
    private Drawable[] selectorDrawable;
    private int[] selectorDrawableMaskType;
    private AnimatorSet shakeAnimation;
    public boolean shouldCheckVisibleOnScreen;
    private boolean sideButtonPressed;
    private float sideStartX;
    private float sideStartY;
    private StaticLayout siteNameLayout;
    private boolean siteNameRtl;
    private int siteNameWidth;
    private float slidingOffsetX;
    private StaticLayout songLayout;
    private int songX;
    private SpoilerEffect spoilerPressed;
    private AtomicReference<Layout> spoilersPatchedReplyTextLayout;
    private boolean statusDrawableAnimationInProgress;
    private ValueAnimator statusDrawableAnimator;
    private float statusDrawableProgress;
    private int substractBackgroundHeight;
    private int textX;
    private int textY;
    private float timeAlpha;
    private int timeAudioX;
    private StaticLayout timeLayout;
    private boolean timePressed;
    private int timeTextWidth;
    private boolean timeWasInvisible;
    private int timeWidth;
    private int timeWidthAudio;
    private int timeX;
    private TimerParticles timerParticles;
    private float timerTransitionProgress;
    private StaticLayout titleLayout;
    private int titleX;
    private float toSeekBarProgress;
    private boolean topNearToSet;
    private MessageTopicButton topicButton;
    private long totalChangeTime;
    private int totalCommentWidth;
    private int totalHeight;
    private int totalVisibleBlocksCount;
    private TranscribeButton transcribeButton;
    private float transcribeX;
    private float transcribeY;
    private final TransitionParams transitionParams;
    float transitionYOffsetForDrawables;
    private float unlockAlpha;
    private StaticLayout unlockLayout;
    private SpoilerEffect unlockSpoilerEffect;
    private Path unlockSpoilerPath;
    private float[] unlockSpoilerRadii;
    private int unlockTextWidth;
    private float unlockX;
    private float unlockY;
    private int unmovedTextX;
    private Runnable unregisterFlagSecure;
    private ArrayList<LinkPath> urlPathCache;
    private ArrayList<LinkPath> urlPathSelection;
    private boolean useSeekBarWaveform;
    private boolean useTranscribeButton;
    private int viaNameWidth;
    private TypefaceSpan viaSpan1;
    private TypefaceSpan viaSpan2;
    private int viaWidth;
    private boolean vibrateOnPollVote;
    private int videoButtonPressed;
    private int videoButtonX;
    private int videoButtonY;
    VideoForwardDrawable videoForwardDrawable;
    private StaticLayout videoInfoLayout;
    VideoPlayerRewinder videoPlayerRewinder;
    private RadialProgress2 videoRadialProgress;
    private float viewTop;
    private StaticLayout viewsLayout;
    private int viewsTextWidth;
    private boolean visibleOnScreen;
    private float voteCurrentCircleLength;
    private float voteCurrentProgressTime;
    private long voteLastUpdateTime;
    private float voteRadOffset;
    private boolean voteRisingCircleLength;
    private boolean wasLayout;
    private boolean wasPinned;
    private boolean wasSending;
    private boolean wasTranscriptionOpen;
    private int widthBeforeNewTimeLine;
    private int widthForButtons;
    private boolean willRemoved;
    private boolean wouldBeInPip;

    /* loaded from: classes3.dex */
    public interface ChatMessageCellDelegate {

        /* loaded from: classes3.dex */
        public final /* synthetic */ class -CC {
            public static boolean $default$canDrawOutboundsContent(ChatMessageCellDelegate chatMessageCellDelegate) {
                return true;
            }

            public static boolean $default$canPerformActions(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$didLongPress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didLongPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static boolean $default$didLongPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
                return false;
            }

            public static boolean $default$didLongPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
                return false;
            }

            public static boolean $default$didPressAnimatedEmoji(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
                return false;
            }

            public static void $default$didPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static void $default$didPressCancelSendButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            }

            public static void $default$didPressCommentButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressExtendedMediaPreview(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            }

            public static void $default$didPressHiddenForward(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressHint(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressInstantButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressOther(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressReaction(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z) {
            }

            public static void $default$didPressReplyMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressSideButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressTime(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressTopicButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            }

            public static void $default$didPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
            }

            public static void $default$didPressViaBot(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, String str) {
            }

            public static void $default$didPressViaBotNotInline(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, long j) {
            }

            public static void $default$didPressVoteButtons(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3) {
            }

            public static void $default$didStartVideoStream(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static String $default$getAdminRank(ChatMessageCellDelegate chatMessageCellDelegate, long j) {
                return null;
            }

            public static PinchToZoomHelper $default$getPinchToZoomHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static CharacterStyle $default$getProgressLoadingLink(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return null;
            }

            public static TextSelectionHelper.ChatListTextSelectionHelper $default$getTextSelectionHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static boolean $default$hasSelectedMessages(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$invalidateBlur(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$isLandscape(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$isProgressLoading(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
                return false;
            }

            public static boolean $default$keyboardIsOpened(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$needOpenWebView(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            }

            public static boolean $default$needPlayMessage(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject, boolean z) {
                return false;
            }

            public static void $default$needReloadPolls(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$needShowPremiumBulletin(ChatMessageCellDelegate chatMessageCellDelegate, int i) {
            }

            public static boolean $default$onAccessibilityAction(ChatMessageCellDelegate chatMessageCellDelegate, int i, Bundle bundle) {
                return false;
            }

            public static void $default$onDiceFinished(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$setShouldNotRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static boolean $default$shouldDrawThreadProgress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static boolean $default$shouldRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return true;
            }

            public static boolean $default$shouldShowTopicButton(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$videoTimerReached(ChatMessageCellDelegate chatMessageCellDelegate) {
            }
        }

        boolean canDrawOutboundsContent();

        boolean canPerformActions();

        void didLongPress(ChatMessageCell chatMessageCell, float f, float f2);

        void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        boolean didLongPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2);

        boolean didLongPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2);

        boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan);

        void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        void didPressCancelSendButton(ChatMessageCell chatMessageCell);

        void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2);

        void didPressCommentButton(ChatMessageCell chatMessageCell);

        void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton);

        void didPressHiddenForward(ChatMessageCell chatMessageCell);

        void didPressHint(ChatMessageCell chatMessageCell, int i);

        void didPressImage(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressInstantButton(ChatMessageCell chatMessageCell, int i);

        void didPressOther(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressReaction(ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z);

        void didPressReplyMessage(ChatMessageCell chatMessageCell, int i);

        void didPressSideButton(ChatMessageCell chatMessageCell);

        void didPressTime(ChatMessageCell chatMessageCell);

        void didPressTopicButton(ChatMessageCell chatMessageCell);

        void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z);

        void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2);

        void didPressViaBot(ChatMessageCell chatMessageCell, String str);

        void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j);

        void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$TL_pollAnswer> arrayList, int i, int i2, int i3);

        void didStartVideoStream(MessageObject messageObject);

        String getAdminRank(long j);

        PinchToZoomHelper getPinchToZoomHelper();

        CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell);

        TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper();

        boolean hasSelectedMessages();

        void invalidateBlur();

        boolean isLandscape();

        boolean isProgressLoading(ChatMessageCell chatMessageCell, int i);

        boolean keyboardIsOpened();

        void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2);

        boolean needPlayMessage(MessageObject messageObject, boolean z);

        void needReloadPolls();

        void needShowPremiumBulletin(int i);

        boolean onAccessibilityAction(int i, Bundle bundle);

        void onDiceFinished();

        void setShouldNotRepeatSticker(MessageObject messageObject);

        boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell);

        boolean shouldRepeatSticker(MessageObject messageObject);

        boolean shouldShowTopicButton();

        void videoTimerReached();
    }

    private boolean intersect(float f, float f2, float f3, float f4) {
        return f <= f3 ? f2 >= f3 : f <= f4;
    }

    public RadialProgress2 getRadialProgress() {
        return this.radialProgress;
    }

    public void setEnterTransitionInProgress(boolean z) {
        this.enterTransitionInProgress = z;
        invalidate();
    }

    public ReactionsLayoutInBubble.ReactionButton getReactionButton(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        return this.reactionsLayoutInBubble.getReactionButton(visibleReaction);
    }

    public MessageObject getPrimaryMessageObject() {
        MessageObject messageObject = this.currentMessageObject;
        MessageObject findPrimaryMessageObject = (messageObject == null || this.currentMessagesGroup == null || !messageObject.hasValidGroupId()) ? null : this.currentMessagesGroup.findPrimaryMessageObject();
        return findPrimaryMessageObject != null ? findPrimaryMessageObject : this.currentMessageObject;
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        if (i == NotificationCenter.startSpoilers) {
            setSpoilersSuppressed(false);
        } else if (i == NotificationCenter.stopSpoilers) {
            setSpoilersSuppressed(true);
        } else if (i == NotificationCenter.userInfoDidLoad) {
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User == null || tLRPC$User.id != ((Long) objArr[0]).longValue()) {
                return;
            }
            setAvatar(this.currentMessageObject);
        } else if (i != NotificationCenter.emojiLoaded) {
        } else {
            invalidate();
        }
    }

    private void setAvatar(MessageObject messageObject) {
        TLRPC$Chat tLRPC$Chat;
        if (messageObject == null) {
            return;
        }
        if (this.isAvatarVisible) {
            Drawable drawable = messageObject.customAvatarDrawable;
            if (drawable != null) {
                this.avatarImage.setImageBitmap(drawable);
                return;
            }
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User != null) {
                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                if (tLRPC$UserProfilePhoto != null) {
                    this.currentPhoto = tLRPC$UserProfilePhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                this.avatarDrawable.setInfo(tLRPC$User);
                this.avatarImage.setForUserOrChat(this.currentUser, this.avatarDrawable, null, true);
                return;
            }
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (tLRPC$Chat2 != null) {
                TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat2.photo;
                if (tLRPC$ChatPhoto != null) {
                    this.currentPhoto = tLRPC$ChatPhoto.photo_small;
                } else {
                    this.currentPhoto = null;
                }
                this.avatarDrawable.setInfo(tLRPC$Chat2);
                this.avatarImage.setForUserOrChat(this.currentChat, this.avatarDrawable);
                return;
            } else if (messageObject.isSponsored()) {
                TLRPC$ChatInvite tLRPC$ChatInvite = messageObject.sponsoredChatInvite;
                if (tLRPC$ChatInvite != null && (tLRPC$Chat = tLRPC$ChatInvite.chat) != null) {
                    this.avatarDrawable.setInfo(tLRPC$Chat);
                    this.avatarImage.setForUserOrChat(messageObject.sponsoredChatInvite.chat, this.avatarDrawable);
                    return;
                }
                this.avatarDrawable.setInfo(tLRPC$ChatInvite);
                TLRPC$Photo tLRPC$Photo = messageObject.sponsoredChatInvite.photo;
                if (tLRPC$Photo == null) {
                    return;
                }
                this.avatarImage.setImage(ImageLocation.getForPhoto(tLRPC$Photo.sizes.get(0), tLRPC$Photo), "50_50", this.avatarDrawable, null, null, 0);
                return;
            } else {
                this.currentPhoto = null;
                this.avatarDrawable.setInfo(messageObject.getFromChatId(), null, null);
                this.avatarImage.setImage(null, null, this.avatarDrawable, null, null, 0);
                return;
            }
        }
        this.currentPhoto = null;
    }

    public void setSpoilersSuppressed(boolean z) {
        for (int i = 0; i < this.captionSpoilers.size(); i++) {
            this.captionSpoilers.get(i).setSuppressUpdates(z);
        }
        for (int i2 = 0; i2 < this.replySpoilers.size(); i2++) {
            this.replySpoilers.get(i2).setSuppressUpdates(z);
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        for (int i3 = 0; i3 < getMessageObject().textLayoutBlocks.size(); i3++) {
            MessageObject.TextLayoutBlock textLayoutBlock = getMessageObject().textLayoutBlocks.get(i3);
            for (int i4 = 0; i4 < textLayoutBlock.spoilers.size(); i4++) {
                textLayoutBlock.spoilers.get(i4).setSuppressUpdates(z);
            }
        }
    }

    public boolean hasSpoilers() {
        if ((!hasCaptionLayout() || this.captionSpoilers.isEmpty()) && (this.replyTextLayout == null || this.replySpoilers.isEmpty())) {
            if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
                return false;
            }
            Iterator<MessageObject.TextLayoutBlock> it = getMessageObject().textLayoutBlocks.iterator();
            while (it.hasNext()) {
                if (!it.next().spoilers.isEmpty()) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }

    private void updateSpoilersVisiblePart(int i, int i2) {
        if (hasCaptionLayout()) {
            float f = -this.captionY;
            for (SpoilerEffect spoilerEffect : this.captionSpoilers) {
                spoilerEffect.setVisibleBounds(0.0f, i + f, getWidth(), i2 + f);
            }
        }
        StaticLayout staticLayout = this.replyTextLayout;
        if (staticLayout != null) {
            float height = (-this.replyStartY) - staticLayout.getHeight();
            for (SpoilerEffect spoilerEffect2 : this.replySpoilers) {
                spoilerEffect2.setVisibleBounds(0.0f, i + height, getWidth(), i2 + height);
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        Iterator<MessageObject.TextLayoutBlock> it = getMessageObject().textLayoutBlocks.iterator();
        while (it.hasNext()) {
            MessageObject.TextLayoutBlock next = it.next();
            for (SpoilerEffect spoilerEffect3 : next.spoilers) {
                spoilerEffect3.setVisibleBounds(0.0f, (i - next.textYOffset) - this.textY, getWidth(), (i2 - next.textYOffset) - this.textY);
            }
        }
    }

    public void setScrimReaction(String str) {
        this.reactionsLayoutInBubble.setScrimReaction(str);
    }

    public void drawScrimReaction(Canvas canvas, String str) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble.isSmall) {
            reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, str);
        }
    }

    public boolean checkUnreadReactions(float f, int i) {
        if (!this.reactionsLayoutInBubble.hasUnreadReactions) {
            return false;
        }
        float y = getY();
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float f2 = y + reactionsLayoutInBubble.y;
        return f2 > f && (f2 + ((float) reactionsLayoutInBubble.height)) - ((float) AndroidUtilities.dp(16.0f)) < ((float) i);
    }

    public void markReactionsAsRead() {
        this.reactionsLayoutInBubble.hasUnreadReactions = false;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.markReactionsAsRead();
    }

    public void setVisibleOnScreen(boolean z) {
        if (this.visibleOnScreen != z) {
            this.visibleOnScreen = z;
            checkImageReceiversAttachState();
        }
    }

    public void setParentBounds(float f, int i) {
        this.parentBoundsTop = f;
        this.parentBoundsBottom = i;
        if (this.photoImageOutOfBounds) {
            float y = getY() + this.photoImage.getImageY();
            if (this.photoImage.getImageHeight() + y < this.parentBoundsTop || y > this.parentBoundsBottom) {
                return;
            }
            invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class BotButton {
        private int angle;
        private TLRPC$KeyboardButton button;
        private int height;
        private boolean isInviteButton;
        private long lastUpdateTime;
        private float progressAlpha;
        private StaticLayout title;
        private int width;
        private int x;
        private int y;

        private BotButton() {
        }

        static /* synthetic */ float access$2816(BotButton botButton, float f) {
            float f2 = botButton.progressAlpha + f;
            botButton.progressAlpha = f2;
            return f2;
        }

        static /* synthetic */ float access$2824(BotButton botButton, float f) {
            float f2 = botButton.progressAlpha - f;
            botButton.progressAlpha = f2;
            return f2;
        }

        static /* synthetic */ int access$2916(BotButton botButton, float f) {
            int i = (int) (botButton.angle + f);
            botButton.angle = i;
            return i;
        }

        static /* synthetic */ int access$2920(BotButton botButton, int i) {
            int i2 = botButton.angle - i;
            botButton.angle = i2;
            return i2;
        }
    }

    /* loaded from: classes3.dex */
    public static class PollButton {
        private TLRPC$TL_pollAnswer answer;
        private boolean chosen;
        private boolean correct;
        private int count;
        private float decimal;
        public int height;
        private int percent;
        private float percentProgress;
        private boolean prevChosen;
        private int prevPercent;
        private float prevPercentProgress;
        private StaticLayout title;
        public int x;
        public int y;

        static /* synthetic */ int access$1812(PollButton pollButton, int i) {
            int i2 = pollButton.percent + i;
            pollButton.percent = i2;
            return i2;
        }

        static /* synthetic */ float access$2524(PollButton pollButton, float f) {
            float f2 = pollButton.decimal - f;
            pollButton.decimal = f2;
            return f2;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class LoadingDrawableLocation {
        int blockNum;
        LoadingDrawable drawable;

        LoadingDrawableLocation(ChatMessageCell chatMessageCell) {
        }
    }

    public ChatMessageCell(Context context) {
        this(context, false, null);
    }

    public ChatMessageCell(Context context, boolean z, Theme.ResourcesProvider resourcesProvider) {
        super(context);
        this.reactionsLayoutInBubble = new ReactionsLayoutInBubble(this);
        this.scrollRect = new Rect();
        this.imageBackgroundGradientRotation = 45;
        this.selectorDrawable = new Drawable[2];
        this.selectorDrawableMaskType = new int[2];
        this.instantButtonRect = new RectF();
        this.pressedState = new int[]{16842910, 16842919};
        this.deleteProgressRect = new RectF();
        this.rect = new RectF();
        this.timeAlpha = 1.0f;
        this.controlsAlpha = 1.0f;
        this.links = new LinkSpanDrawable.LinkCollector(this);
        this.urlPathCache = new ArrayList<>();
        this.urlPathSelection = new ArrayList<>();
        this.rectPath = new Path();
        this.pollButtons = new ArrayList<>();
        this.botButtons = new ArrayList<>();
        this.botButtonsByData = new HashMap<>();
        this.botButtonsByPosition = new HashMap<>();
        this.currentAccount = UserConfig.selectedAccount;
        this.isCheckPressed = true;
        this.drawBackground = true;
        this.backgroundWidth = 100;
        this.commentButtonRect = new Rect();
        this.spoilersPatchedReplyTextLayout = new AtomicReference<>();
        this.forwardedNameLayout = new StaticLayout[2];
        this.forwardNameOffsetX = new float[2];
        this.drawTime = true;
        this.mediaSpoilerPath = new Path();
        this.mediaSpoilerRadii = new float[8];
        this.mediaSpoilerEffect = new SpoilerEffect();
        this.unlockAlpha = 1.0f;
        this.unlockSpoilerEffect = new SpoilerEffect();
        this.unlockSpoilerPath = new Path();
        this.unlockSpoilerRadii = new float[8];
        this.replySelectorRect = new Rect();
        this.ALPHA_PROPERTY_WORKAROUND = Build.VERSION.SDK_INT == 28;
        this.alphaInternal = 1.0f;
        this.transitionParams = new TransitionParams();
        this.roundVideoPlayPipFloat = new AnimatedFloat(this, 200L, CubicBezierInterpolator.EASE_OUT);
        this.diceFinishCallback = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.1
            @Override // java.lang.Runnable
            public void run() {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.onDiceFinished();
                }
            }
        };
        this.invalidateRunnable = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.2
            @Override // java.lang.Runnable
            public void run() {
                ChatMessageCell.this.checkLocationExpired();
                if (ChatMessageCell.this.locationExpired) {
                    ChatMessageCell.this.invalidate();
                    ChatMessageCell.this.scheduledInvalidate = false;
                    return;
                }
                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                chatMessageCell.invalidate(((int) chatMessageCell.rect.left) - 5, ((int) ChatMessageCell.this.rect.top) - 5, ((int) ChatMessageCell.this.rect.right) + 5, ((int) ChatMessageCell.this.rect.bottom) + 5);
                if (!ChatMessageCell.this.scheduledInvalidate) {
                    return;
                }
                AndroidUtilities.runOnUIThread(ChatMessageCell.this.invalidateRunnable, 1000L);
            }
        };
        this.accessibilityVirtualViewBounds = new SparseArray<>();
        this.currentFocusedVirtualView = -1;
        this.backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.replySpoilers = new ArrayList();
        this.replySpoilersPool = new Stack<>();
        this.captionSpoilers = new ArrayList();
        this.captionSpoilersPool = new Stack<>();
        this.captionPatchedSpoilersLayout = new AtomicReference<>();
        this.sPath = new Path();
        this.hadLongPress = false;
        this.ANIMATION_OFFSET_X = new Property<ChatMessageCell, Float>(this, Float.class, "animationOffsetX") { // from class: org.telegram.ui.Cells.ChatMessageCell.11
            @Override // android.util.Property
            public Float get(ChatMessageCell chatMessageCell) {
                return Float.valueOf(chatMessageCell.animationOffsetX);
            }

            @Override // android.util.Property
            public void set(ChatMessageCell chatMessageCell, Float f) {
                chatMessageCell.setAnimationOffsetX(f.floatValue());
            }
        };
        this.resourcesProvider = resourcesProvider;
        this.canDrawBackgroundInParent = z;
        this.backgroundDrawable = new MessageBackgroundDrawable(this);
        ImageReceiver imageReceiver = new ImageReceiver();
        this.avatarImage = imageReceiver;
        imageReceiver.setAllowLoadingOnAttachedOnly(true);
        this.avatarImage.setRoundRadius(AndroidUtilities.dp(21.0f));
        this.avatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver2 = new ImageReceiver(this);
        this.replyImageReceiver = imageReceiver2;
        imageReceiver2.setAllowLoadingOnAttachedOnly(true);
        this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(4.0f));
        ImageReceiver imageReceiver3 = new ImageReceiver(this);
        this.locationImageReceiver = imageReceiver3;
        imageReceiver3.setAllowLoadingOnAttachedOnly(true);
        this.locationImageReceiver.setRoundRadius(AndroidUtilities.dp(26.1f));
        this.TAG = DownloadController.getInstance(this.currentAccount).generateObserverTag();
        this.contactAvatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver4 = new ImageReceiver(this);
        this.photoImage = imageReceiver4;
        imageReceiver4.setAllowLoadingOnAttachedOnly(true);
        this.photoImage.setUseRoundForThumbDrawable(true);
        this.photoImage.setDelegate(this);
        ImageReceiver imageReceiver5 = new ImageReceiver(this);
        this.blurredPhotoImage = imageReceiver5;
        imageReceiver5.setAllowLoadingOnAttachedOnly(true);
        this.blurredPhotoImage.setUseRoundForThumbDrawable(true);
        this.radialProgress = new RadialProgress2(this, resourcesProvider);
        RadialProgress2 radialProgress2 = new RadialProgress2(this, resourcesProvider);
        this.videoRadialProgress = radialProgress2;
        radialProgress2.setDrawBackground(false);
        this.videoRadialProgress.setCircleRadius(AndroidUtilities.dp(15.0f));
        SeekBar seekBar = new SeekBar(this) { // from class: org.telegram.ui.Cells.ChatMessageCell.3
            @Override // org.telegram.ui.Components.SeekBar
            protected void onTimestampUpdate(URLSpanNoUnderline uRLSpanNoUnderline) {
                ChatMessageCell.this.highlightCaptionLink(uRLSpanNoUnderline);
            }
        };
        this.seekBar = seekBar;
        seekBar.setDelegate(this);
        SeekBarWaveform seekBarWaveform = new SeekBarWaveform(context);
        this.seekBarWaveform = seekBarWaveform;
        seekBarWaveform.setDelegate(this);
        this.seekBarWaveform.setParentView(this);
        this.seekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.4
            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    return ChatMessageCell.this.seekBar.getProgress();
                }
                if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    return ChatMessageCell.this.useSeekBarWaveform ? ChatMessageCell.this.seekBarWaveform.getProgress() : ChatMessageCell.this.seekBar.getProgress();
                } else if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return 0.0f;
                } else {
                    return ChatMessageCell.this.currentMessageObject.audioProgress;
                }
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    ChatMessageCell.this.seekBar.setProgress(f);
                } else if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    if (ChatMessageCell.this.useSeekBarWaveform) {
                        ChatMessageCell.this.seekBarWaveform.setProgress(f);
                    } else {
                        ChatMessageCell.this.seekBar.setProgress(f);
                    }
                } else if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return;
                } else {
                    if (ChatMessageCell.this.useSeekBarWaveform) {
                        if (ChatMessageCell.this.seekBarWaveform != null) {
                            ChatMessageCell.this.seekBarWaveform.setProgress(f);
                        }
                    } else if (ChatMessageCell.this.seekBar != null) {
                        ChatMessageCell.this.seekBar.setProgress(f);
                    }
                    ChatMessageCell.this.currentMessageObject.audioProgress = f;
                }
                ChatMessageCell.this.onSeekBarDrag(f);
                ChatMessageCell.this.invalidate();
            }
        };
        this.roundVideoPlayingDrawable = new RoundVideoPlayingDrawable(this, resourcesProvider);
        setImportantForAccessibility(1);
    }

    private void createPollUI() {
        if (this.pollAvatarImages != null) {
            return;
        }
        this.pollAvatarImages = new ImageReceiver[3];
        this.pollAvatarDrawables = new AvatarDrawable[3];
        this.pollAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
            if (i >= imageReceiverArr.length) {
                break;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.pollAvatarImages[i].setRoundRadius(AndroidUtilities.dp(8.0f));
            this.pollAvatarDrawables[i] = new AvatarDrawable();
            this.pollAvatarDrawables[i].setTextSize(AndroidUtilities.dp(22.0f));
            i++;
        }
        this.pollCheckBox = new CheckBoxBase[10];
        int i2 = 0;
        while (true) {
            CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
            if (i2 >= checkBoxBaseArr.length) {
                return;
            }
            checkBoxBaseArr[i2] = new CheckBoxBase(this, 20, this.resourcesProvider);
            this.pollCheckBox[i2].setDrawUnchecked(false);
            this.pollCheckBox[i2].setBackgroundType(9);
            i2++;
        }
    }

    private void createCommentUI() {
        if (this.commentAvatarImages != null) {
            return;
        }
        this.commentAvatarImages = new ImageReceiver[3];
        this.commentAvatarDrawables = new AvatarDrawable[3];
        this.commentAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
            if (i >= imageReceiverArr.length) {
                return;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.commentAvatarImages[i].setRoundRadius(AndroidUtilities.dp(12.0f));
            this.commentAvatarDrawables[i] = new AvatarDrawable();
            this.commentAvatarDrawables[i].setTextSize(AndroidUtilities.dp(18.0f));
            i++;
        }
    }

    public void resetPressedLink(int i) {
        if (i != -1) {
            this.links.removeLinks(Integer.valueOf(i));
        } else {
            this.links.clear();
        }
        this.pressedEmoji = null;
        if (this.pressedLink != null) {
            if (this.pressedLinkType != i && i != -1) {
                return;
            }
            this.pressedLink = null;
            this.pressedLinkType = -1;
            invalidate();
        }
    }

    private void resetUrlPaths() {
        if (this.urlPathSelection.isEmpty()) {
            return;
        }
        this.urlPathCache.addAll(this.urlPathSelection);
        this.urlPathSelection.clear();
    }

    private LinkPath obtainNewUrlPath() {
        LinkPath linkPath;
        if (!this.urlPathCache.isEmpty()) {
            linkPath = this.urlPathCache.get(0);
            this.urlPathCache.remove(0);
        } else {
            linkPath = new LinkPath(true);
        }
        linkPath.reset();
        this.urlPathSelection.add(linkPath);
        return linkPath;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int[] getRealSpanStartAndEnd(Spannable spannable, CharacterStyle characterStyle) {
        int i;
        int i2;
        boolean z;
        TextStyleSpan.TextStyleRun style;
        TLRPC$MessageEntity tLRPC$MessageEntity;
        if (!(characterStyle instanceof URLSpanBrowser) || (style = ((URLSpanBrowser) characterStyle).getStyle()) == null || (tLRPC$MessageEntity = style.urlEntity) == null) {
            i = 0;
            i2 = 0;
            z = false;
        } else {
            i2 = tLRPC$MessageEntity.offset;
            i = tLRPC$MessageEntity.length + i2;
            z = true;
        }
        if (!z) {
            i2 = spannable.getSpanStart(characterStyle);
            i = spannable.getSpanEnd(characterStyle);
        }
        return new int[]{i2, i};
    }

    /* JADX WARN: Removed duplicated region for block: B:132:0x0277 A[Catch: Exception -> 0x02b3, TryCatch #1 {Exception -> 0x02b3, blocks: (B:34:0x0077, B:36:0x008c, B:37:0x0092, B:39:0x00b4, B:41:0x00bf, B:43:0x00cf, B:48:0x00e0, B:50:0x00ec, B:52:0x00ef, B:54:0x00f5, B:59:0x00ff, B:61:0x0105, B:63:0x010b, B:65:0x0111, B:67:0x0115, B:69:0x0273, B:71:0x0119, B:72:0x0126, B:74:0x012a, B:76:0x0132, B:79:0x0159, B:128:0x0268, B:130:0x0265, B:132:0x0277, B:134:0x027d, B:136:0x0283, B:138:0x028c, B:140:0x0292, B:141:0x0298, B:143:0x029c, B:145:0x02a4, B:148:0x00e3, B:149:0x00d5, B:81:0x0164, B:83:0x0196, B:84:0x0198, B:86:0x01a2, B:88:0x01ae, B:90:0x01c5, B:92:0x01c8, B:94:0x01d3, B:96:0x01f6, B:103:0x01b9, B:105:0x01f9, B:107:0x01ff, B:109:0x0203, B:111:0x020f, B:113:0x022e, B:115:0x0231, B:117:0x023c, B:125:0x021e), top: B:33:0x0077, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00ff A[Catch: Exception -> 0x02b3, TryCatch #1 {Exception -> 0x02b3, blocks: (B:34:0x0077, B:36:0x008c, B:37:0x0092, B:39:0x00b4, B:41:0x00bf, B:43:0x00cf, B:48:0x00e0, B:50:0x00ec, B:52:0x00ef, B:54:0x00f5, B:59:0x00ff, B:61:0x0105, B:63:0x010b, B:65:0x0111, B:67:0x0115, B:69:0x0273, B:71:0x0119, B:72:0x0126, B:74:0x012a, B:76:0x0132, B:79:0x0159, B:128:0x0268, B:130:0x0265, B:132:0x0277, B:134:0x027d, B:136:0x0283, B:138:0x028c, B:140:0x0292, B:141:0x0298, B:143:0x029c, B:145:0x02a4, B:148:0x00e3, B:149:0x00d5, B:81:0x0164, B:83:0x0196, B:84:0x0198, B:86:0x01a2, B:88:0x01ae, B:90:0x01c5, B:92:0x01c8, B:94:0x01d3, B:96:0x01f6, B:103:0x01b9, B:105:0x01f9, B:107:0x01ff, B:109:0x0203, B:111:0x020f, B:113:0x022e, B:115:0x0231, B:117:0x023c, B:125:0x021e), top: B:33:0x0077, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x010b A[Catch: Exception -> 0x02b3, TryCatch #1 {Exception -> 0x02b3, blocks: (B:34:0x0077, B:36:0x008c, B:37:0x0092, B:39:0x00b4, B:41:0x00bf, B:43:0x00cf, B:48:0x00e0, B:50:0x00ec, B:52:0x00ef, B:54:0x00f5, B:59:0x00ff, B:61:0x0105, B:63:0x010b, B:65:0x0111, B:67:0x0115, B:69:0x0273, B:71:0x0119, B:72:0x0126, B:74:0x012a, B:76:0x0132, B:79:0x0159, B:128:0x0268, B:130:0x0265, B:132:0x0277, B:134:0x027d, B:136:0x0283, B:138:0x028c, B:140:0x0292, B:141:0x0298, B:143:0x029c, B:145:0x02a4, B:148:0x00e3, B:149:0x00d5, B:81:0x0164, B:83:0x0196, B:84:0x0198, B:86:0x01a2, B:88:0x01ae, B:90:0x01c5, B:92:0x01c8, B:94:0x01d3, B:96:0x01f6, B:103:0x01b9, B:105:0x01f9, B:107:0x01ff, B:109:0x0203, B:111:0x020f, B:113:0x022e, B:115:0x0231, B:117:0x023c, B:125:0x021e), top: B:33:0x0077, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkTextBlockMotionEvent(MotionEvent motionEvent) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        int i;
        boolean z;
        boolean z2;
        AnimatedEmojiSpan animatedEmojiSpan;
        CharacterStyle[] characterStyleArr;
        CharacterStyle[] characterStyleArr2;
        MessageObject messageObject = this.currentMessageObject;
        int i2 = messageObject.type;
        if ((i2 == 0 || i2 == 19) && (arrayList = messageObject.textLayoutBlocks) != null && !arrayList.isEmpty() && (this.currentMessageObject.messageText instanceof Spannable) && (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && this.pressedLinkType == 1))) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i3 = this.textX;
            if (x >= i3 && y >= (i = this.textY)) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (x <= i3 + messageObject2.textWidth && y <= messageObject2.textHeight + i) {
                    int i4 = y - i;
                    int i5 = 0;
                    for (int i6 = 0; i6 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i6).textYOffset <= i4; i6++) {
                        i5 = i6;
                    }
                    try {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i5);
                        float f = x;
                        float f2 = this.textX;
                        float f3 = textLayoutBlock.isRtl() ? this.currentMessageObject.textXOffset : 0.0f;
                        int i7 = (int) (i4 - textLayoutBlock.textYOffset);
                        int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(i7);
                        float f4 = (int) (f - (f2 - f3));
                        int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f4);
                        float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f4 && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f4) {
                            Spannable spannable = (Spannable) this.currentMessageObject.messageText;
                            CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr3 != null && characterStyleArr3.length != 0) {
                                z = false;
                                if (characterStyleArr3 != null || characterStyleArr3.length == 0) {
                                    characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                    z = false;
                                }
                                if (characterStyleArr3.length != 0 && (!(characterStyleArr3[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                    z2 = false;
                                    if (!z2 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                        if (motionEvent.getAction() != 0) {
                                            if (characterStyleArr3[0] instanceof AnimatedEmojiSpan) {
                                                AnimatedEmojiSpan animatedEmojiSpan2 = this.pressedEmoji;
                                                if (animatedEmojiSpan2 == null || animatedEmojiSpan2 != characterStyleArr3[0]) {
                                                    resetPressedLink(1);
                                                    this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr3[0];
                                                    this.pressedLinkType = 1;
                                                }
                                            } else {
                                                LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                                if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr3[0]) {
                                                    this.links.removeLink(this.pressedLink);
                                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyleArr3[0], this.resourcesProvider, f4, i7, spanSupportsLongPress(characterStyleArr3[0]));
                                                    this.pressedLink = linkSpanDrawable2;
                                                    linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                    this.linkBlockNum = i5;
                                                    this.pressedLinkType = 1;
                                                    try {
                                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                        int i8 = realSpanStartAndEnd[0];
                                                        int i9 = textLayoutBlock.charactersOffset;
                                                        realSpanStartAndEnd[0] = i8 - i9;
                                                        realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i9;
                                                        obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, realSpanStartAndEnd[0], 0.0f);
                                                        textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                        if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                            for (int i10 = i5 + 1; i10 < this.currentMessageObject.textLayoutBlocks.size(); i10++) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock2 = this.currentMessageObject.textLayoutBlocks.get(i10);
                                                                if (z) {
                                                                    int i11 = textLayoutBlock2.charactersOffset;
                                                                    characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i11, i11, URLSpanMono.class);
                                                                } else {
                                                                    int i12 = textLayoutBlock2.charactersOffset;
                                                                    characterStyleArr2 = (CharacterStyle[]) spannable.getSpans(i12, i12, ClickableSpan.class);
                                                                }
                                                                if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                                obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset - textLayoutBlock.textYOffset);
                                                                int i13 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                                textLayoutBlock2.textLayout.getSelectionPath(0, i13, obtainNewPath2);
                                                                if (i13 < textLayoutBlock2.charactersEnd - 1) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                            int i14 = 0;
                                                            for (int i15 = i5 - 1; i15 >= 0; i15--) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock3 = this.currentMessageObject.textLayoutBlocks.get(i15);
                                                                if (z) {
                                                                    int i16 = textLayoutBlock3.charactersEnd;
                                                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(i16 - 1, i16 - 1, URLSpanMono.class);
                                                                } else {
                                                                    int i17 = textLayoutBlock3.charactersEnd;
                                                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(i17 - 1, i17 - 1, ClickableSpan.class);
                                                                }
                                                                if (characterStyleArr == null || characterStyleArr.length == 0 || characterStyleArr[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                                i14 -= textLayoutBlock3.height;
                                                                int i18 = realSpanStartAndEnd[0];
                                                                int i19 = textLayoutBlock.charactersOffset;
                                                                int i20 = textLayoutBlock3.charactersOffset;
                                                                int i21 = (i18 + i19) - i20;
                                                                int i22 = (realSpanStartAndEnd[1] + i19) - i20;
                                                                obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i21, i14);
                                                                textLayoutBlock3.textLayout.getSelectionPath(i21, i22, obtainNewPath3);
                                                                if (i21 > textLayoutBlock3.charactersOffset) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception e) {
                                                        FileLog.e(e);
                                                    }
                                                    this.links.addLink(this.pressedLink, 1);
                                                }
                                            }
                                            invalidate();
                                            return true;
                                        } else if ((characterStyleArr3[0] instanceof AnimatedEmojiSpan) && (animatedEmojiSpan = this.pressedEmoji) == characterStyleArr3[0]) {
                                            if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                                resetPressedLink(1);
                                                this.pressedEmoji = null;
                                                return true;
                                            }
                                            resetPressedLink(1);
                                            this.pressedEmoji = null;
                                        } else {
                                            LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                            if (linkSpanDrawable3 != null && characterStyleArr3[0] == linkSpanDrawable3.getSpan()) {
                                                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                                resetPressedLink(1);
                                                return true;
                                            }
                                        }
                                    }
                                }
                                z2 = true;
                                if (!z2) {
                                    if (motionEvent.getAction() != 0) {
                                    }
                                }
                            }
                            characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            z = true;
                            if (characterStyleArr3 != null) {
                            }
                            characterStyleArr3 = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                            z = false;
                            if (characterStyleArr3.length != 0) {
                                z2 = false;
                                if (!z2) {
                                }
                            }
                            z2 = true;
                            if (!z2) {
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            }
            resetPressedLink(1);
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:63:0x00c5 A[Catch: Exception -> 0x0142, TryCatch #1 {Exception -> 0x0142, blocks: (B:39:0x0055, B:41:0x0074, B:43:0x007f, B:45:0x008d, B:48:0x009a, B:50:0x00a6, B:52:0x00a9, B:54:0x00af, B:59:0x00b9, B:61:0x00bf, B:63:0x00c5, B:64:0x013e, B:67:0x00d1, B:69:0x00d5, B:71:0x00dd, B:74:0x0104, B:77:0x0133, B:80:0x0130, B:83:0x009d, B:84:0x0090, B:76:0x010d), top: B:38:0x0055, inners: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x00d1 A[Catch: Exception -> 0x0142, TryCatch #1 {Exception -> 0x0142, blocks: (B:39:0x0055, B:41:0x0074, B:43:0x007f, B:45:0x008d, B:48:0x009a, B:50:0x00a6, B:52:0x00a9, B:54:0x00af, B:59:0x00b9, B:61:0x00bf, B:63:0x00c5, B:64:0x013e, B:67:0x00d1, B:69:0x00d5, B:71:0x00dd, B:74:0x0104, B:77:0x0133, B:80:0x0130, B:83:0x009d, B:84:0x0090, B:76:0x010d), top: B:38:0x0055, inners: #0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkCaptionMotionEvent(MotionEvent motionEvent) {
        boolean z;
        if ((this.currentCaption instanceof Spannable) && this.captionLayout != null && (motionEvent.getAction() == 0 || ((this.linkPreviewPressed || this.pressedLink != null || this.pressedEmoji != null) && motionEvent.getAction() == 1))) {
            int y = (int) motionEvent.getY();
            float x = (int) motionEvent.getX();
            float f = this.captionX;
            if (x >= f && x <= f + this.captionWidth) {
                float f2 = y;
                float f3 = this.captionY;
                if (f2 >= f3 && f2 <= f3 + this.captionHeight) {
                    if (motionEvent.getAction() == 0) {
                        try {
                            int i = (int) (x - this.captionX);
                            int i2 = (int) (f2 - this.captionY);
                            int lineForVertical = this.captionLayout.getLineForVertical(i2);
                            float f4 = i;
                            int offsetForHorizontal = this.captionLayout.getOffsetForHorizontal(lineForVertical, f4);
                            float lineLeft = this.captionLayout.getLineLeft(lineForVertical);
                            if (lineLeft <= f4 && lineLeft + this.captionLayout.getLineWidth(lineForVertical) >= f4) {
                                Spannable spannable = (Spannable) this.currentCaption;
                                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                if (characterStyleArr == null || characterStyleArr.length == 0) {
                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                                }
                                if (characterStyleArr == null || characterStyleArr.length == 0) {
                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                }
                                if (characterStyleArr.length != 0 && (!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                    z = false;
                                    if (!z && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                        if (!(characterStyleArr[0] instanceof AnimatedEmojiSpan)) {
                                            resetPressedLink(3);
                                            this.pressedLinkType = 3;
                                            this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr[0];
                                        } else {
                                            LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                            if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                                this.links.removeLink(this.pressedLink);
                                                LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyleArr[0], this.resourcesProvider, f4, i2, spanSupportsLongPress(characterStyleArr[0]));
                                                this.pressedLink = linkSpanDrawable2;
                                                linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                this.pressedLinkType = 3;
                                                try {
                                                    LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                    int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                    obtainNewPath.setCurrentLayout(this.captionLayout, realSpanStartAndEnd[0], 0.0f);
                                                    this.captionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                } catch (Exception e) {
                                                    FileLog.e(e);
                                                }
                                                this.links.addLink(this.pressedLink, 3);
                                            }
                                        }
                                        invalidateWithParent();
                                        return true;
                                    }
                                }
                                z = true;
                                if (!z) {
                                    if (!(characterStyleArr[0] instanceof AnimatedEmojiSpan)) {
                                    }
                                    invalidateWithParent();
                                    return true;
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                    } else if (this.pressedLinkType == 3) {
                        AnimatedEmojiSpan animatedEmojiSpan = this.pressedEmoji;
                        if (animatedEmojiSpan != null) {
                            if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                resetPressedLink(3);
                                this.pressedEmoji = null;
                                return true;
                            }
                            resetPressedLink(3);
                            this.pressedEmoji = null;
                            return false;
                        }
                        this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                        resetPressedLink(3);
                        return true;
                    }
                }
            }
            resetPressedLink(3);
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:60:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x00ef  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkGameMotionEvent(MotionEvent motionEvent) {
        boolean z;
        LinkSpanDrawable linkSpanDrawable;
        int i;
        int i2;
        if (!this.hasGamePreview) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4) {
                this.buttonPressed = 1;
                invalidate();
                return true;
            } else if (this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                this.gamePreviewPressed = true;
                return true;
            } else if (this.descriptionLayout != null && y >= this.descriptionY) {
                try {
                    int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                    int i3 = y - this.descriptionY;
                    int lineForVertical = this.descriptionLayout.getLineForVertical(i3);
                    float f = dp;
                    int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                    float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                    if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                        Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                        ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                        if (clickableSpanArr.length != 0 && (!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                            z = false;
                            if (!z && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                linkSpanDrawable = this.pressedLink;
                                if (linkSpanDrawable != null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                    this.links.removeLink(this.pressedLink);
                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpanArr[0]));
                                    this.pressedLink = linkSpanDrawable2;
                                    linkSpanDrawable2.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                    this.linkBlockNum = -10;
                                    this.pressedLinkType = 2;
                                    try {
                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                        obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                        this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                    } catch (Exception e) {
                                        FileLog.e(e);
                                    }
                                    this.links.addLink(this.pressedLink, 2);
                                }
                                invalidate();
                                return true;
                            }
                        }
                        z = true;
                        if (!z) {
                            linkSpanDrawable = this.pressedLink;
                            if (linkSpanDrawable != null) {
                            }
                            this.links.removeLink(this.pressedLink);
                            LinkSpanDrawable linkSpanDrawable22 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpanArr[0]));
                            this.pressedLink = linkSpanDrawable22;
                            linkSpanDrawable22.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                            this.linkBlockNum = -10;
                            this.pressedLinkType = 2;
                            LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                            int[] realSpanStartAndEnd2 = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                            obtainNewPath2.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd2[0], 0.0f);
                            this.descriptionLayout.getSelectionPath(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1], obtainNewPath2);
                            this.links.addLink(this.pressedLink, 2);
                            invalidate();
                            return true;
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.pressedLinkType == 2 || this.gamePreviewPressed || this.buttonPressed != 0) {
                if (this.buttonPressed != 0) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, false);
                    invalidate();
                } else {
                    LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                    if (linkSpanDrawable3 != null) {
                        if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                            Browser.openUrl(getContext(), ((URLSpan) this.pressedLink.getSpan()).getURL());
                        } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                            ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                        }
                        resetPressedLink(2);
                    } else {
                        this.gamePreviewPressed = false;
                        int i4 = 0;
                        while (true) {
                            if (i4 >= this.botButtons.size()) {
                                break;
                            }
                            BotButton botButton = this.botButtons.get(i4);
                            if (botButton.button instanceof TLRPC$TL_keyboardButtonGame) {
                                playSoundEffect(0);
                                this.delegate.didPressBotButton(this, botButton.button);
                                invalidate();
                                break;
                            }
                            i4++;
                        }
                        resetPressedLink(2);
                        return true;
                    }
                }
            } else {
                resetPressedLink(2);
            }
        }
        return false;
    }

    private boolean checkTranscribeButtonMotionEvent(MotionEvent motionEvent) {
        TranscribeButton transcribeButton;
        return this.useTranscribeButton && (!this.isPlayingRound || getVideoTranscriptionProgress() > 0.0f || this.wasTranscriptionOpen) && (transcribeButton = this.transcribeButton) != null && transcribeButton.onTouch(motionEvent.getAction(), motionEvent.getX(), motionEvent.getY());
    }

    /* JADX WARN: Removed duplicated region for block: B:50:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0164  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x016a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkLinkPreviewMotionEvent(MotionEvent motionEvent) {
        boolean z;
        int i;
        int i2;
        int i3;
        int i4;
        boolean z2;
        LinkSpanDrawable linkSpanDrawable;
        if (this.currentMessageObject.type == 0 && this.hasLinkPreview) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i5 = this.unmovedTextX;
            if (x >= i5 && x <= i5 + this.backgroundWidth) {
                int i6 = this.textY;
                int i7 = this.currentMessageObject.textHeight;
                if (y >= i6 + i7) {
                    if (y <= i6 + i7 + this.linkPreviewHeight + AndroidUtilities.dp((this.drawInstantView ? 46 : 0) + 8)) {
                        if (motionEvent.getAction() == 0) {
                            if (this.descriptionLayout != null && y >= this.descriptionY) {
                                try {
                                    int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                                    int i8 = y - this.descriptionY;
                                    if (i8 <= this.descriptionLayout.getHeight()) {
                                        int lineForVertical = this.descriptionLayout.getLineForVertical(i8);
                                        float f = dp;
                                        int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                                        float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                                        if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                                            Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                                            ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                            if (clickableSpanArr.length != 0 && (!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled)) {
                                                z2 = false;
                                                if (!z2 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
                                                    linkSpanDrawable = this.pressedLink;
                                                    if (linkSpanDrawable != null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                                        this.links.removeLink(this.pressedLink);
                                                        LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpanArr[0]));
                                                        this.pressedLink = linkSpanDrawable2;
                                                        linkSpanDrawable2.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                        this.linkBlockNum = -10;
                                                        this.pressedLinkType = 2;
                                                        startCheckLongPress();
                                                        try {
                                                            LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                            int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                            obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                                            this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                        } catch (Exception e) {
                                                            FileLog.e(e);
                                                        }
                                                        this.links.addLink(this.pressedLink, 2);
                                                    }
                                                    invalidate();
                                                    return true;
                                                }
                                            }
                                            z2 = true;
                                            if (!z2) {
                                                linkSpanDrawable = this.pressedLink;
                                                if (linkSpanDrawable != null) {
                                                }
                                                this.links.removeLink(this.pressedLink);
                                                LinkSpanDrawable linkSpanDrawable22 = new LinkSpanDrawable(clickableSpanArr[0], this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpanArr[0]));
                                                this.pressedLink = linkSpanDrawable22;
                                                linkSpanDrawable22.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outLinkSelectBackground" : "chat_linkSelectBackground"));
                                                this.linkBlockNum = -10;
                                                this.pressedLinkType = 2;
                                                startCheckLongPress();
                                                LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                int[] realSpanStartAndEnd2 = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                obtainNewPath2.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd2[0], 0.0f);
                                                this.descriptionLayout.getSelectionPath(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1], obtainNewPath2);
                                                this.links.addLink(this.pressedLink, 2);
                                                invalidate();
                                                return true;
                                            }
                                        }
                                    }
                                } catch (Exception e2) {
                                    FileLog.e(e2);
                                }
                            }
                            if (this.pressedLink == null) {
                                int dp2 = AndroidUtilities.dp(48.0f);
                                if (this.miniButtonState >= 0) {
                                    int dp3 = AndroidUtilities.dp(27.0f);
                                    int i9 = this.buttonX;
                                    if (x >= i9 + dp3 && x <= i9 + dp3 + dp2) {
                                        int i10 = this.buttonY;
                                        if (y >= i10 + dp3 && y <= i10 + dp3 + dp2) {
                                            z = true;
                                            if (!z) {
                                                this.miniButtonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i3 = this.videoButtonX) && x <= i3 + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i4 = this.videoButtonY) && y <= i4 + AndroidUtilities.dp(30.0f)) {
                                                this.videoButtonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && ((!this.checkOnlyButtonPressed && this.photoImage.isInsideImage(x, y)) || (x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4))) {
                                                this.buttonPressed = 1;
                                                invalidate();
                                                return true;
                                            } else if (this.drawInstantView) {
                                                this.instantPressed = true;
                                                this.selectorDrawableMaskType[0] = 0;
                                                if (Build.VERSION.SDK_INT >= 21) {
                                                    Drawable[] drawableArr = this.selectorDrawable;
                                                    if (drawableArr[0] != null && drawableArr[0].getBounds().contains(x, y)) {
                                                        this.selectorDrawable[0].setHotspot(x, y);
                                                        this.selectorDrawable[0].setState(this.pressedState);
                                                        this.instantButtonPressed = true;
                                                    }
                                                }
                                                invalidate();
                                                return true;
                                            } else if (this.documentAttachType != 1 && this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                                                this.linkPreviewPressed = true;
                                                TLRPC$WebPage tLRPC$WebPage = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                                                if (this.documentAttachType != 2 || this.buttonState != -1 || !SharedConfig.autoplayGifs || (this.photoImage.getAnimation() != null && TextUtils.isEmpty(tLRPC$WebPage.embed_url))) {
                                                    return true;
                                                }
                                                this.linkPreviewPressed = false;
                                                return false;
                                            }
                                        }
                                    }
                                }
                                z = false;
                                if (!z) {
                                }
                            }
                        } else if (motionEvent.getAction() == 1) {
                            if (this.instantPressed) {
                                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                                if (chatMessageCellDelegate != null) {
                                    chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                                }
                                playSoundEffect(0);
                                if (Build.VERSION.SDK_INT >= 21) {
                                    Drawable[] drawableArr2 = this.selectorDrawable;
                                    if (drawableArr2[0] != null) {
                                        drawableArr2[0].setState(StateSet.NOTHING);
                                    }
                                }
                                this.instantButtonPressed = false;
                                this.instantPressed = false;
                                invalidate();
                            } else if (this.pressedLinkType == 2 || this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.linkPreviewPressed) {
                                if (this.videoButtonPressed == 1) {
                                    this.videoButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressButton(true, true);
                                    invalidate();
                                } else if (this.buttonPressed != 0) {
                                    this.buttonPressed = 0;
                                    playSoundEffect(0);
                                    if (this.drawVideoImageButton) {
                                        didClickedImage();
                                    } else {
                                        didPressButton(true, false);
                                    }
                                    invalidate();
                                } else if (this.miniButtonPressed != 0) {
                                    this.miniButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressMiniButton(true);
                                    invalidate();
                                } else {
                                    LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                    if (linkSpanDrawable3 != null) {
                                        if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                                            this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                        } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                                            ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                                        }
                                        resetPressedLink(2);
                                    } else {
                                        AnimatedEmojiSpan animatedEmojiSpan = this.pressedEmoji;
                                        if (animatedEmojiSpan != null && this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                            this.pressedEmoji = null;
                                            resetPressedLink(2);
                                        } else {
                                            int i11 = this.documentAttachType;
                                            if (i11 == 7) {
                                                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                                                    this.delegate.needPlayMessage(this.currentMessageObject, false);
                                                } else {
                                                    MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                                                }
                                            } else if (i11 == 2 && this.drawImageButton) {
                                                int i12 = this.buttonState;
                                                if (i12 == -1) {
                                                    if (SharedConfig.autoplayGifs) {
                                                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                    } else {
                                                        this.buttonState = 2;
                                                        this.currentMessageObject.gifState = 1.0f;
                                                        this.photoImage.setAllowStartAnimation(false);
                                                        this.photoImage.stopAnimation();
                                                        this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                                                        invalidate();
                                                        playSoundEffect(0);
                                                    }
                                                } else if (i12 == 2 || i12 == 0) {
                                                    didPressButton(true, false);
                                                    playSoundEffect(0);
                                                }
                                            } else {
                                                TLRPC$WebPage tLRPC$WebPage2 = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                                                if (tLRPC$WebPage2 != null && !TextUtils.isEmpty(tLRPC$WebPage2.embed_url)) {
                                                    this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage2.embed_url, tLRPC$WebPage2.site_name, tLRPC$WebPage2.title, tLRPC$WebPage2.url, tLRPC$WebPage2.embed_width, tLRPC$WebPage2.embed_height);
                                                } else {
                                                    int i13 = this.buttonState;
                                                    if (i13 == -1 || i13 == 3) {
                                                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                                                        playSoundEffect(0);
                                                    } else if (tLRPC$WebPage2 != null) {
                                                        Browser.openUrl(getContext(), tLRPC$WebPage2.url);
                                                    }
                                                }
                                            }
                                            resetPressedLink(2);
                                            return true;
                                        }
                                    }
                                }
                            } else if (!this.hadLongPress) {
                                this.hadLongPress = false;
                                resetPressedLink(2);
                            }
                        } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                            Drawable[] drawableArr3 = this.selectorDrawable;
                            if (drawableArr3[0] != null) {
                                drawableArr3[0].setHotspot(x, y);
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean checkPollButtonMotionEvent(MotionEvent motionEvent) {
        int i;
        int i2;
        if (this.currentMessageObject.eventId != 0 || this.pollVoteInProgress || this.pollUnvoteInProgress || this.pollButtons.isEmpty()) {
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type != 17 || !messageObject.isSent()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            if (this.hintButtonVisible && (i = this.pollHintX) != -1 && x >= i && x <= i + AndroidUtilities.dp(40.0f) && y >= (i2 = this.pollHintY) && y <= i2 + AndroidUtilities.dp(40.0f)) {
                this.pollHintPressed = true;
                this.selectorDrawableMaskType[0] = 3;
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (drawableArr[0] != null) {
                        drawableArr[0].setBounds(this.pollHintX - AndroidUtilities.dp(8.0f), this.pollHintY - AndroidUtilities.dp(8.0f), this.pollHintX + AndroidUtilities.dp(32.0f), this.pollHintY + AndroidUtilities.dp(32.0f));
                        this.selectorDrawable[0].setHotspot(x, y);
                        this.selectorDrawable[0].setState(this.pressedState);
                    }
                }
                invalidate();
            } else {
                for (int i3 = 0; i3 < this.pollButtons.size(); i3++) {
                    PollButton pollButton = this.pollButtons.get(i3);
                    int dp = (pollButton.y + this.namesOffset) - AndroidUtilities.dp(13.0f);
                    int i4 = pollButton.x;
                    if (x >= i4 && x <= (i4 + this.backgroundWidth) - AndroidUtilities.dp(31.0f) && y >= dp && y <= pollButton.height + dp + AndroidUtilities.dp(26.0f)) {
                        this.pressedVoteButton = i3;
                        if (!this.pollVoted && !this.pollClosed) {
                            this.selectorDrawableMaskType[0] = 1;
                            if (Build.VERSION.SDK_INT >= 21) {
                                Drawable[] drawableArr2 = this.selectorDrawable;
                                if (drawableArr2[0] != null) {
                                    drawableArr2[0].setBounds(pollButton.x - AndroidUtilities.dp(9.0f), dp, (pollButton.x + this.backgroundWidth) - AndroidUtilities.dp(22.0f), pollButton.height + dp + AndroidUtilities.dp(26.0f));
                                    this.selectorDrawable[0].setHotspot(x, y);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                            }
                            invalidate();
                        }
                    }
                }
                return false;
            }
            return true;
        } else if (motionEvent.getAction() == 1) {
            if (this.pollHintPressed) {
                playSoundEffect(0);
                this.delegate.didPressHint(this, 0);
                this.pollHintPressed = false;
                if (Build.VERSION.SDK_INT < 21) {
                    return false;
                }
                Drawable[] drawableArr3 = this.selectorDrawable;
                if (drawableArr3[0] == null) {
                    return false;
                }
                drawableArr3[0].setState(StateSet.NOTHING);
                return false;
            } else if (this.pressedVoteButton == -1) {
                return false;
            } else {
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr4 = this.selectorDrawable;
                    if (drawableArr4[0] != null) {
                        drawableArr4[0].setState(StateSet.NOTHING);
                    }
                }
                if (this.currentMessageObject.scheduled) {
                    Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVote", R.string.MessageScheduledVote), 1).show();
                } else {
                    PollButton pollButton2 = this.pollButtons.get(this.pressedVoteButton);
                    TLRPC$TL_pollAnswer tLRPC$TL_pollAnswer = pollButton2.answer;
                    if (this.pollVoted || this.pollClosed) {
                        ArrayList<TLRPC$TL_pollAnswer> arrayList = new ArrayList<>();
                        arrayList.add(tLRPC$TL_pollAnswer);
                        this.delegate.didPressVoteButtons(this, arrayList, pollButton2.count, pollButton2.x + AndroidUtilities.dp(50.0f), this.namesOffset + pollButton2.y);
                    } else if (this.lastPoll.multiple_choice) {
                        if (this.currentMessageObject.checkedVotes.contains(tLRPC$TL_pollAnswer)) {
                            this.currentMessageObject.checkedVotes.remove(tLRPC$TL_pollAnswer);
                            this.pollCheckBox[this.pressedVoteButton].setChecked(false, true);
                        } else {
                            this.currentMessageObject.checkedVotes.add(tLRPC$TL_pollAnswer);
                            this.pollCheckBox[this.pressedVoteButton].setChecked(true, true);
                        }
                    } else {
                        this.pollVoteInProgressNum = this.pressedVoteButton;
                        this.pollVoteInProgress = true;
                        this.vibrateOnPollVote = true;
                        this.voteCurrentProgressTime = 0.0f;
                        this.firstCircleLength = true;
                        this.voteCurrentCircleLength = 360.0f;
                        this.voteRisingCircleLength = false;
                        ArrayList<TLRPC$TL_pollAnswer> arrayList2 = new ArrayList<>();
                        arrayList2.add(tLRPC$TL_pollAnswer);
                        this.delegate.didPressVoteButtons(this, arrayList2, -1, 0, 0);
                    }
                }
                this.pressedVoteButton = -1;
                invalidate();
                return false;
            }
        } else if (motionEvent.getAction() != 2) {
            return false;
        } else {
            if ((this.pressedVoteButton == -1 && !this.pollHintPressed) || Build.VERSION.SDK_INT < 21) {
                return false;
            }
            Drawable[] drawableArr5 = this.selectorDrawable;
            if (drawableArr5[0] == null) {
                return false;
            }
            drawableArr5[0].setHotspot(x, y);
            return false;
        }
    }

    private boolean checkInstantButtonMotionEvent(MotionEvent motionEvent) {
        if (this.currentMessageObject.isSponsored() || (this.drawInstantView && this.currentMessageObject.type != 0)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int i = 2;
            if (motionEvent.getAction() == 0) {
                if (this.drawInstantView) {
                    float f = x;
                    float f2 = y;
                    if (this.instantButtonRect.contains(f, f2)) {
                        int[] iArr = this.selectorDrawableMaskType;
                        if (this.lastPoll == null) {
                            i = 0;
                        }
                        iArr[0] = i;
                        this.instantPressed = true;
                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.instantButtonRect.contains(f, f2)) {
                            this.selectorDrawable[0].setHotspot(f, f2);
                            this.selectorDrawable[0].setState(this.pressedState);
                            this.instantButtonPressed = true;
                        }
                        invalidate();
                        return true;
                    }
                }
            } else if (motionEvent.getAction() == 1) {
                if (this.instantPressed) {
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null) {
                        if (this.lastPoll != null) {
                            MessageObject messageObject = this.currentMessageObject;
                            if (messageObject.scheduled) {
                                Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVoteResults", R.string.MessageScheduledVoteResults), 1).show();
                            } else if (this.pollVoted || this.pollClosed) {
                                chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                            } else {
                                if (!messageObject.checkedVotes.isEmpty()) {
                                    this.pollVoteInProgressNum = -1;
                                    this.pollVoteInProgress = true;
                                    this.vibrateOnPollVote = true;
                                    this.voteCurrentProgressTime = 0.0f;
                                    this.firstCircleLength = true;
                                    this.voteCurrentCircleLength = 360.0f;
                                    this.voteRisingCircleLength = false;
                                }
                                this.delegate.didPressVoteButtons(this, this.currentMessageObject.checkedVotes, -1, 0, this.namesOffset);
                            }
                        } else {
                            chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                        }
                    }
                    playSoundEffect(0);
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[0] != null) {
                            drawableArr[0].setState(StateSet.NOTHING);
                        }
                    }
                    this.instantButtonPressed = false;
                    this.instantPressed = false;
                    invalidate();
                }
            } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                Drawable[] drawableArr2 = this.selectorDrawable;
                if (drawableArr2[0] != null) {
                    drawableArr2[0].setHotspot(x, y);
                }
            }
            return false;
        }
        return false;
    }

    private void invalidateWithParent() {
        if (this.currentMessagesGroup != null && getParent() != null) {
            ((ViewGroup) getParent()).invalidate();
        }
        invalidate();
    }

    private boolean checkCommentButtonMotionEvent(MotionEvent motionEvent) {
        int i = 0;
        if (!this.drawCommentButton) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) == 0 && this.commentButtonRect.contains(x, y)) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            int childCount = viewGroup.getChildCount();
            while (true) {
                if (i >= childCount) {
                    break;
                }
                View childAt = viewGroup.getChildAt(i);
                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.drawCommentButton && chatMessageCell.currentMessagesGroup == this.currentMessagesGroup && (chatMessageCell.currentPosition.flags & 1) != 0) {
                        MotionEvent obtain = MotionEvent.obtain(0L, 0L, motionEvent.getActionMasked(), (motionEvent.getX() + getLeft()) - chatMessageCell.getLeft(), (motionEvent.getY() + getTop()) - chatMessageCell.getTop(), 0);
                        chatMessageCell.checkCommentButtonMotionEvent(obtain);
                        obtain.recycle();
                        break;
                    }
                }
                i++;
            }
            return true;
        }
        if (motionEvent.getAction() == 0) {
            if (this.commentButtonRect.contains(x, y)) {
                if (this.currentMessageObject.isSent()) {
                    this.selectorDrawableMaskType[1] = 2;
                    this.commentButtonPressed = true;
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[1] != null) {
                            drawableArr[1].setHotspot(x, y);
                            this.selectorDrawable[1].setState(this.pressedState);
                        }
                    }
                    invalidateWithParent();
                }
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.commentButtonPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    if (this.isRepliesChat) {
                        chatMessageCellDelegate.didPressSideButton(this);
                    } else {
                        chatMessageCellDelegate.didPressCommentButton(this);
                    }
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr2 = this.selectorDrawable;
                    if (drawableArr2[1] != null) {
                        drawableArr2[1].setState(StateSet.NOTHING);
                    }
                }
                this.commentButtonPressed = false;
                invalidateWithParent();
            }
        } else if (motionEvent.getAction() == 2 && this.commentButtonPressed && Build.VERSION.SDK_INT >= 21) {
            Drawable[] drawableArr3 = this.selectorDrawable;
            if (drawableArr3[1] != null) {
                drawableArr3[1].setHotspot(x, y);
            }
        }
        return false;
    }

    /* JADX WARN: Type inference failed for: r11v24, types: [boolean] */
    private boolean checkOtherButtonMotionEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i = this.documentAttachType;
        if ((i == 5 || i == 1) && (groupedMessagePosition = this.currentPosition) != null && (groupedMessagePosition.flags & 4) == 0) {
            return false;
        }
        int i2 = this.currentMessageObject.type;
        boolean z = i2 == 16;
        if (!z) {
            z = (i == 1 || i2 == 12 || i == 5 || i == 4 || i == 2 || i2 == 8) && !this.hasGamePreview && !this.hasInvoicePreview;
        }
        if (!z) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject.type == 16) {
                ?? isVideoCall = messageObject.isVideoCall();
                int i3 = this.otherX;
                if (x >= i3) {
                    if (x <= i3 + AndroidUtilities.dp((isVideoCall == 0 ? 202 : 200) + 30) && y >= this.otherY - AndroidUtilities.dp(14.0f) && y <= this.otherY + AndroidUtilities.dp(50.0f)) {
                        this.otherPressed = true;
                        this.selectorDrawableMaskType[0] = 4;
                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                            int dp = this.otherX + AndroidUtilities.dp(isVideoCall == 0 ? 202.0f : 200.0f) + (Theme.chat_msgInCallDrawable[isVideoCall == true ? 1 : 0].getIntrinsicWidth() / 2);
                            int intrinsicHeight = this.otherY + (Theme.chat_msgInCallDrawable[isVideoCall].getIntrinsicHeight() / 2);
                            this.selectorDrawable[0].setBounds(dp - AndroidUtilities.dp(20.0f), intrinsicHeight - AndroidUtilities.dp(20.0f), dp + AndroidUtilities.dp(20.0f), intrinsicHeight + AndroidUtilities.dp(20.0f));
                            this.selectorDrawable[0].setHotspot(x, y);
                            this.selectorDrawable[0].setState(this.pressedState);
                        }
                        invalidate();
                        return true;
                    }
                }
            } else if (x >= this.otherX - AndroidUtilities.dp(20.0f) && x <= this.otherX + AndroidUtilities.dp(20.0f) && y >= this.otherY - AndroidUtilities.dp(4.0f) && y <= this.otherY + AndroidUtilities.dp(30.0f)) {
                this.otherPressed = true;
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.otherPressed) {
                if (this.currentMessageObject.type == 16 && Build.VERSION.SDK_INT >= 21) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (drawableArr[0] != null) {
                        drawableArr[0].setState(StateSet.NOTHING);
                    }
                }
                this.otherPressed = false;
                playSoundEffect(0);
                this.delegate.didPressOther(this, this.otherX, this.otherY);
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 2 && this.currentMessageObject.type == 16 && this.otherPressed && Build.VERSION.SDK_INT >= 21) {
            Drawable[] drawableArr2 = this.selectorDrawable;
            if (drawableArr2[0] != null) {
                drawableArr2[0].setHotspot(x, y);
            }
        }
        return false;
    }

    private boolean checkDateMotionEvent(MotionEvent motionEvent) {
        if (!this.currentMessageObject.isImportedForward()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            float f2 = this.drawTimeX;
            if (f < f2 || f > f2 + this.timeWidth) {
                return false;
            }
            float f3 = y;
            float f4 = this.drawTimeY;
            if (f3 < f4 || f3 > f4 + AndroidUtilities.dp(20.0f)) {
                return false;
            }
            this.timePressed = true;
            invalidate();
        } else if (motionEvent.getAction() != 1 || !this.timePressed) {
            return false;
        } else {
            this.timePressed = false;
            playSoundEffect(0);
            this.delegate.didPressTime(this);
            invalidate();
        }
        return true;
    }

    private boolean checkRoundSeekbar(MotionEvent motionEvent) {
        if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || !MediaController.getInstance().isMessagePaused()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            if (f >= this.seekbarRoundX - AndroidUtilities.dp(20.0f) && f <= this.seekbarRoundX + AndroidUtilities.dp(20.0f)) {
                float f2 = y;
                if (f2 >= this.seekbarRoundY - AndroidUtilities.dp(20.0f) && f2 <= this.seekbarRoundY + AndroidUtilities.dp(20.0f)) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    cancelCheckLongPress();
                    this.roundSeekbarTouched = 1;
                    invalidate();
                }
            }
            float centerX = f - this.photoImage.getCenterX();
            float centerY = y - this.photoImage.getCenterY();
            float imageWidth = (this.photoImage.getImageWidth() - AndroidUtilities.dp(64.0f)) / 2.0f;
            float f3 = (centerX * centerX) + (centerY * centerY);
            if (f3 < ((this.photoImage.getImageWidth() / 2.0f) * this.photoImage.getImageWidth()) / 2.0f && f3 > imageWidth * imageWidth) {
                getParent().requestDisallowInterceptTouchEvent(true);
                cancelCheckLongPress();
                this.roundSeekbarTouched = 1;
                invalidate();
            }
        } else if (this.roundSeekbarTouched == 1 && motionEvent.getAction() == 2) {
            float degrees = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
            if (degrees < 0.0f) {
                degrees += 360.0f;
            }
            float f4 = degrees / 360.0f;
            if (Math.abs(this.currentMessageObject.audioProgress - f4) > 0.9f) {
                if (this.roundSeekbarOutAlpha == 0.0f) {
                    performHapticFeedback(3);
                }
                this.roundSeekbarOutAlpha = 1.0f;
                this.roundSeekbarOutProgress = this.currentMessageObject.audioProgress;
            }
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - this.lastSeekUpdateTime > 100) {
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f4);
                this.lastSeekUpdateTime = currentTimeMillis;
            }
            this.currentMessageObject.audioProgress = f4;
            updatePlayingMessageProgress();
        }
        if ((motionEvent.getAction() == 1 || motionEvent.getAction() == 3) && this.roundSeekbarTouched != 0) {
            if (motionEvent.getAction() == 1) {
                float degrees2 = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
                if (degrees2 < 0.0f) {
                    degrees2 += 360.0f;
                }
                float f5 = degrees2 / 360.0f;
                this.currentMessageObject.audioProgress = f5;
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f5);
                updatePlayingMessageProgress();
            }
            MediaController.getInstance().playMessage(this.currentMessageObject);
            this.roundSeekbarTouched = 0;
            getParent().requestDisallowInterceptTouchEvent(false);
        }
        return this.roundSeekbarTouched != 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:114:0x01b1  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0065  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x01d8  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x006c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkPhotoImageMotionEvent(MotionEvent motionEvent) {
        boolean z;
        MessageObject messageObject;
        int i;
        int i2;
        int i3;
        int i4;
        boolean z2 = true;
        if ((this.drawPhotoImage || this.documentAttachType == 1) && (!this.currentMessageObject.isSending() || this.buttonState == 1)) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                int dp = AndroidUtilities.dp(48.0f);
                if (this.miniButtonState >= 0) {
                    int dp2 = AndroidUtilities.dp(27.0f);
                    int i5 = this.buttonX;
                    if (x >= i5 + dp2 && x <= i5 + dp2 + dp) {
                        int i6 = this.buttonY;
                        if (y >= i6 + dp2 && y <= i6 + dp2 + dp) {
                            z = true;
                            MessageObject messageObject2 = this.currentMessageObject;
                            boolean z3 = messageObject2 != null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed;
                            if (!z) {
                                this.miniButtonPressed = 1;
                                invalidate();
                            } else if (this.buttonState != -1 && this.radialProgress.getIcon() != 4 && x >= (i3 = this.buttonX) && x <= i3 + dp && y >= (i4 = this.buttonY) && y <= i4 + dp && z3) {
                                this.buttonPressed = 1;
                                invalidate();
                            } else if (this.drawVideoImageButton && this.buttonState != -1 && x >= (i = this.videoButtonX) && x <= i + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) && y >= (i2 = this.videoButtonY) && y <= i2 + AndroidUtilities.dp(30.0f) && z3) {
                                this.videoButtonPressed = 1;
                                invalidate();
                            } else if (this.documentAttachType == 1) {
                                float f = x;
                                if (f >= this.photoImage.getImageX() && f <= (this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(50.0f)) {
                                    float f2 = y;
                                    if (f2 >= this.photoImage.getImageY() && f2 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                                        this.imagePressed = true;
                                    }
                                }
                                z2 = false;
                            } else {
                                if (!this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.getInputStickerSet() != null || this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isDice()) {
                                    float f3 = x;
                                    if (f3 >= this.photoImage.getImageX() && f3 <= this.photoImage.getImageX() + this.photoImage.getImageWidth()) {
                                        float f4 = y;
                                        if (f4 >= this.photoImage.getImageY() && f4 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                                            if (this.isRoundVideo) {
                                                if (((f3 - this.photoImage.getCenterX()) * (f3 - this.photoImage.getCenterX())) + ((f4 - this.photoImage.getCenterY()) * (f4 - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f)) {
                                                    this.imagePressed = true;
                                                }
                                            } else {
                                                this.imagePressed = true;
                                            }
                                            messageObject = this.currentMessageObject;
                                            if (messageObject.type == 12) {
                                                long j = MessageObject.getMedia(messageObject.messageOwner).user_id;
                                                TLRPC$User tLRPC$User = null;
                                                if (j != 0) {
                                                    tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
                                                }
                                                if (tLRPC$User == null) {
                                                    this.imagePressed = false;
                                                }
                                            }
                                        }
                                    }
                                    z2 = false;
                                    messageObject = this.currentMessageObject;
                                    if (messageObject.type == 12) {
                                    }
                                }
                                z2 = false;
                            }
                            if (this.imagePressed) {
                                if (this.currentMessageObject.isSendError()) {
                                    this.imagePressed = false;
                                    return false;
                                } else if (this.currentMessageObject.type == 8 && this.buttonState == -1 && SharedConfig.autoplayGifs && this.photoImage.getAnimation() == null) {
                                    this.imagePressed = false;
                                    return false;
                                }
                            }
                            return z2;
                        }
                    }
                }
                z = false;
                MessageObject messageObject22 = this.currentMessageObject;
                if (messageObject22 != null) {
                }
                if (!z) {
                }
                if (this.imagePressed) {
                }
                return z2;
            } else if (motionEvent.getAction() != 1) {
                return false;
            } else {
                if (this.videoButtonPressed == 1) {
                    this.videoButtonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, true);
                    invalidate();
                    return false;
                } else if (this.buttonPressed == 1) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    if (this.drawVideoImageButton) {
                        didClickedImage();
                    } else {
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                } else if (this.miniButtonPressed == 1) {
                    this.miniButtonPressed = 0;
                    playSoundEffect(0);
                    didPressMiniButton(true);
                    invalidate();
                    return false;
                } else if (!this.imagePressed) {
                    return false;
                } else {
                    this.imagePressed = false;
                    int i7 = this.buttonState;
                    if (i7 == -1 || ((i7 == 1 && this.isRoundVideo) || i7 == 2 || i7 == 3 || this.drawVideoImageButton)) {
                        playSoundEffect(0);
                        didClickedImage();
                    } else if (i7 == 0) {
                        playSoundEffect(0);
                        didPressButton(true, false);
                    }
                    invalidate();
                    return false;
                }
            }
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:123:0x0142, code lost:
        if (r4 <= (r0 + r6)) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x0108, code lost:
        if (r4 <= (r0 + r6)) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x010a, code lost:
        r0 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:118:0x0127  */
    /* JADX WARN: Removed duplicated region for block: B:120:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x012a  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x014c  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x015c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkAudioMotionEvent(MotionEvent motionEvent) {
        boolean onTouch;
        MessageObject messageObject;
        boolean z;
        boolean z2;
        MessageObject messageObject2;
        int i;
        boolean z3;
        int i2;
        MessageObject messageObject3;
        int i3 = this.documentAttachType;
        if ((i3 == 3 || i3 == 5 || (i3 == 7 && (i3 != 7 || (messageObject3 = this.currentMessageObject) == null || messageObject3.isVoiceTranscriptionOpen()))) && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (this.useSeekBarWaveform) {
                onTouch = this.seekBarWaveform.onTouch(motionEvent.getAction(), (motionEvent.getX() - this.seekBarX) - AndroidUtilities.dp(13.0f), motionEvent.getY() - this.seekBarY);
            } else {
                onTouch = (MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || ((messageObject = this.currentMessageObject) != null && this.documentAttachType == 7 && messageObject.isVoiceTranscriptionOpen())) ? this.seekBar.onTouch(motionEvent.getAction(), motionEvent.getX() - this.seekBarX, motionEvent.getY() - this.seekBarY) : false;
            }
            if (onTouch) {
                if (!this.useSeekBarWaveform && motionEvent.getAction() == 0) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                } else if (this.useSeekBarWaveform && !this.seekBarWaveform.isStartDraging() && motionEvent.getAction() == 1) {
                    didPressButton(true, false);
                }
                this.disallowLongPress = true;
                invalidate();
                return onTouch;
            }
            int dp = AndroidUtilities.dp(36.0f);
            if (this.miniButtonState >= 0) {
                int dp2 = AndroidUtilities.dp(27.0f);
                int i4 = this.buttonX;
                if (x >= i4 + dp2 && x <= i4 + dp2 + dp) {
                    int i5 = this.buttonY;
                    if (y >= i5 + dp2 && y <= i5 + dp2 + dp) {
                        z = true;
                        if (!z && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed)) {
                            i = this.buttonState;
                            if (i != 0 || i == 1 || i == 2) {
                                if (x >= this.buttonX - AndroidUtilities.dp(12.0f) && x <= (this.buttonX - AndroidUtilities.dp(12.0f)) + this.backgroundWidth) {
                                    z3 = this.drawInstantView;
                                    if (y >= (!z3 ? this.buttonY : this.namesOffset + this.mediaOffsetY)) {
                                        if (z3) {
                                            i2 = this.buttonY;
                                        } else {
                                            i2 = this.namesOffset + this.mediaOffsetY;
                                            dp = AndroidUtilities.dp(82.0f);
                                        }
                                    }
                                }
                            } else {
                                int i6 = this.buttonX;
                                if (x >= i6) {
                                    if (x <= i6 + dp) {
                                        int i7 = this.buttonY;
                                        if (y >= i7) {
                                        }
                                    }
                                }
                            }
                            if (motionEvent.getAction() == 0) {
                                if (!z2 && !z) {
                                    return onTouch;
                                }
                                if (z2) {
                                    this.buttonPressed = 1;
                                } else {
                                    this.miniButtonPressed = 1;
                                }
                                invalidate();
                                return true;
                            } else if (this.buttonPressed != 0) {
                                if (motionEvent.getAction() == 1) {
                                    this.buttonPressed = 0;
                                    playSoundEffect(0);
                                    didPressButton(true, false);
                                    invalidate();
                                    return onTouch;
                                } else if (motionEvent.getAction() == 3) {
                                    this.buttonPressed = 0;
                                    invalidate();
                                    return onTouch;
                                } else if (motionEvent.getAction() != 2 || z2) {
                                    return onTouch;
                                } else {
                                    this.buttonPressed = 0;
                                    invalidate();
                                    return onTouch;
                                }
                            } else if (this.miniButtonPressed == 0) {
                                return onTouch;
                            } else {
                                if (motionEvent.getAction() == 1) {
                                    this.miniButtonPressed = 0;
                                    playSoundEffect(0);
                                    didPressMiniButton(true);
                                    invalidate();
                                    return onTouch;
                                } else if (motionEvent.getAction() == 3) {
                                    this.miniButtonPressed = 0;
                                    invalidate();
                                    return onTouch;
                                } else if (motionEvent.getAction() != 2 || z) {
                                    return onTouch;
                                } else {
                                    this.miniButtonPressed = 0;
                                    invalidate();
                                    return onTouch;
                                }
                            }
                        }
                        z2 = false;
                        if (motionEvent.getAction() == 0) {
                        }
                    }
                }
            }
            z = false;
            if (!z) {
                i = this.buttonState;
                if (i != 0) {
                }
                if (x >= this.buttonX - AndroidUtilities.dp(12.0f)) {
                    z3 = this.drawInstantView;
                    if (y >= (!z3 ? this.buttonY : this.namesOffset + this.mediaOffsetY)) {
                    }
                }
            }
            z2 = false;
            if (motionEvent.getAction() == 0) {
            }
        } else {
            return false;
        }
    }

    public boolean checkSpoilersMotionEvent(MotionEvent motionEvent, int i) {
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        if (i <= 15 && getParent() != null) {
            if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                for (int i3 = 0; i3 < viewGroup.getChildCount(); i3++) {
                    View childAt = viewGroup.getChildAt(i3);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                        if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                            int i4 = currentPosition.flags;
                            if ((i4 & 8) != 0 && (i4 & 1) != 0 && chatMessageCell != this) {
                                motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                                boolean checkSpoilersMotionEvent = chatMessageCell.checkSpoilersMotionEvent(motionEvent, i + 1);
                                motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                                return checkSpoilersMotionEvent;
                            }
                        }
                    }
                }
            }
            if (this.isSpoilerRevealing) {
                return false;
            }
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int actionMasked = motionEvent.getActionMasked();
            if (actionMasked == 0) {
                int i5 = this.textX;
                if (x >= i5 && y >= (i2 = this.textY)) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (x <= i5 + messageObject.textWidth && y <= i2 + messageObject.textHeight) {
                        ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
                        for (int i6 = 0; i6 < arrayList.size() && arrayList.get(i6).textYOffset <= y; i6++) {
                            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i6);
                            int i7 = textLayoutBlock.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            for (SpoilerEffect spoilerEffect : textLayoutBlock.spoilers) {
                                if (spoilerEffect.getBounds().contains((x - this.textX) + i7, (int) ((y - this.textY) - textLayoutBlock.textYOffset))) {
                                    this.spoilerPressed = spoilerEffect;
                                    this.isCaptionSpoilerPressed = false;
                                    return true;
                                }
                            }
                        }
                    }
                }
                if (hasCaptionLayout()) {
                    float f = x;
                    float f2 = this.captionX;
                    if (f >= f2) {
                        float f3 = y;
                        if (f3 >= this.captionY && f <= f2 + this.captionLayout.getWidth() && f3 <= this.captionY + this.captionLayout.getHeight()) {
                            for (SpoilerEffect spoilerEffect2 : this.captionSpoilers) {
                                if (spoilerEffect2.getBounds().contains((int) (f - this.captionX), (int) (f3 - this.captionY))) {
                                    this.spoilerPressed = spoilerEffect2;
                                    this.isCaptionSpoilerPressed = true;
                                    return true;
                                }
                            }
                        }
                    }
                }
            } else if (actionMasked == 1 && this.spoilerPressed != null) {
                playSoundEffect(0);
                this.sPath.rewind();
                if (this.isCaptionSpoilerPressed) {
                    for (SpoilerEffect spoilerEffect3 : this.captionSpoilers) {
                        Rect bounds = spoilerEffect3.getBounds();
                        this.sPath.addRect(bounds.left, bounds.top, bounds.right, bounds.bottom, Path.Direction.CW);
                    }
                } else {
                    Iterator<MessageObject.TextLayoutBlock> it = this.currentMessageObject.textLayoutBlocks.iterator();
                    while (it.hasNext()) {
                        MessageObject.TextLayoutBlock next = it.next();
                        for (SpoilerEffect spoilerEffect4 : next.spoilers) {
                            Rect bounds2 = spoilerEffect4.getBounds();
                            float f4 = next.textYOffset;
                            this.sPath.addRect(bounds2.left, bounds2.top + f4, bounds2.right, bounds2.bottom + f4, Path.Direction.CW);
                        }
                    }
                }
                this.sPath.computeBounds(this.rect, false);
                float sqrt = (float) Math.sqrt(Math.pow(this.rect.width(), 2.0d) + Math.pow(this.rect.height(), 2.0d));
                this.isSpoilerRevealing = true;
                this.spoilerPressed.setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$1();
                    }
                });
                if (this.isCaptionSpoilerPressed) {
                    for (SpoilerEffect spoilerEffect5 : this.captionSpoilers) {
                        spoilerEffect5.startRipple(x - this.captionX, y - this.captionY, sqrt);
                    }
                } else {
                    ArrayList<MessageObject.TextLayoutBlock> arrayList2 = this.currentMessageObject.textLayoutBlocks;
                    if (arrayList2 != null) {
                        Iterator<MessageObject.TextLayoutBlock> it2 = arrayList2.iterator();
                        while (it2.hasNext()) {
                            MessageObject.TextLayoutBlock next2 = it2.next();
                            int i8 = next2.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            for (SpoilerEffect spoilerEffect6 : next2.spoilers) {
                                spoilerEffect6.startRipple((x - this.textX) + i8, (y - next2.textYOffset) - this.textY, sqrt);
                            }
                        }
                    }
                }
                if (getParent() instanceof RecyclerListView) {
                    ViewGroup viewGroup2 = (ViewGroup) getParent();
                    for (int i9 = 0; i9 < viewGroup2.getChildCount(); i9++) {
                        View childAt2 = viewGroup2.getChildAt(i9);
                        if (childAt2 instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                            if (chatMessageCell2.getMessageObject() != null && chatMessageCell2.getMessageObject().getReplyMsgId() == getMessageObject().getId() && !chatMessageCell2.replySpoilers.isEmpty()) {
                                chatMessageCell2.replySpoilers.get(0).setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda8
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$3(chatMessageCell2);
                                    }
                                });
                                for (SpoilerEffect spoilerEffect7 : chatMessageCell2.replySpoilers) {
                                    spoilerEffect7.startRipple(spoilerEffect7.getBounds().centerX(), spoilerEffect7.getBounds().centerY(), sqrt);
                                }
                            }
                        }
                    }
                }
                this.spoilerPressed = null;
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$1() {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda2
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.this.lambda$checkSpoilersMotionEvent$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$0() {
        this.isSpoilerRevealing = false;
        getMessageObject().isSpoilersRevealed = true;
        if (this.isCaptionSpoilerPressed) {
            this.captionSpoilers.clear();
        } else {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
            if (arrayList != null) {
                Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
                while (it.hasNext()) {
                    it.next().spoilers.clear();
                }
            }
        }
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$3(final ChatMessageCell chatMessageCell) {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda6
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.lambda$checkSpoilersMotionEvent$2(ChatMessageCell.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSpoilersMotionEvent$2(ChatMessageCell chatMessageCell) {
        chatMessageCell.getMessageObject().replyMessageObject.isSpoilersRevealed = true;
        chatMessageCell.replySpoilers.clear();
        chatMessageCell.invalidate();
    }

    private boolean checkBotButtonMotionEvent(MotionEvent motionEvent) {
        int dp;
        if (this.botButtons.isEmpty() || this.currentMessageObject.eventId != 0) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.currentMessageObject.isOutOwner()) {
                dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
            } else {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.mediaBackground ? 1.0f : 7.0f);
            }
            for (int i = 0; i < this.botButtons.size(); i++) {
                BotButton botButton = this.botButtons.get(i);
                int dp2 = (botButton.y + this.layoutHeight) - AndroidUtilities.dp(2.0f);
                if (x >= botButton.x + dp && x <= botButton.x + dp + botButton.width && y >= dp2 && y <= dp2 + botButton.height) {
                    this.pressedBotButton = i;
                    invalidate();
                    final int i2 = this.pressedBotButton;
                    postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda7
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatMessageCell.this.lambda$checkBotButtonMotionEvent$4(i2);
                        }
                    }, ViewConfiguration.getLongPressTimeout() - 1);
                    return true;
                }
            }
            return false;
        } else if (motionEvent.getAction() != 1 || this.pressedBotButton == -1) {
            return false;
        } else {
            playSoundEffect(0);
            if (this.currentMessageObject.scheduled) {
                Toast.makeText(getContext(), LocaleController.getString("MessageScheduledBotAction", R.string.MessageScheduledBotAction), 1).show();
            } else {
                BotButton botButton2 = this.botButtons.get(this.pressedBotButton);
                if (botButton2.button != null) {
                    this.delegate.didPressBotButton(this, botButton2.button);
                }
            }
            this.pressedBotButton = -1;
            invalidate();
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkBotButtonMotionEvent$4(int i) {
        int i2 = this.pressedBotButton;
        if (i == i2) {
            if (!this.currentMessageObject.scheduled) {
                BotButton botButton = this.botButtons.get(i2);
                if (botButton.button != null) {
                    cancelCheckLongPress();
                    this.delegate.didLongPressBotButton(this, botButton.button);
                }
            }
            this.pressedBotButton = -1;
            invalidate();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:466:0x0667, code lost:
        if (r5 > (r0 + org.telegram.messenger.AndroidUtilities.dp(32 + ((r18.drawSideButton != 3 || r18.commentLayout == null) ? 0 : 18)))) goto L468;
     */
    @Override // android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        boolean z;
        int i;
        int i2;
        TLRPC$Chat tLRPC$Chat;
        int i3;
        int i4;
        int i5;
        int i6;
        MessageTopicButton messageTopicButton;
        if (this.currentMessageObject == null || !this.delegate.canPerformActions() || this.animationRunning) {
            checkTextSelection(motionEvent);
            return super.onTouchEvent(motionEvent);
        }
        boolean z2 = true;
        if (checkTextSelection(motionEvent) || checkRoundSeekbar(motionEvent) || checkReactionsTouchEvent(motionEvent)) {
            return true;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        int i7 = 0;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount > 0) {
            if (motionEvent.getAction() != 1 && motionEvent.getAction() != 3) {
                return true;
            }
            getParent().requestDisallowInterceptTouchEvent(false);
            this.videoPlayerRewinder.cancelRewind();
            return false;
        }
        this.disallowLongPress = false;
        this.lastTouchX = motionEvent.getX();
        float y = motionEvent.getY();
        this.lastTouchY = y;
        this.backgroundDrawable.setTouchCoords(this.lastTouchX, y);
        boolean checkSpoilersMotionEvent = checkSpoilersMotionEvent(motionEvent, 0);
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextBlockMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPinchToZoom(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkDateMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextSelection(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (messageTopicButton = this.topicButton) != null) {
            checkSpoilersMotionEvent = messageTopicButton.checkTouchEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkOtherButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCaptionMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTranscribeButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAudioMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkLinkPreviewMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkInstantButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCommentButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkGameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPhotoImageMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkBotButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPollButtonMotionEvent(motionEvent);
        }
        if (motionEvent.getAction() == 3) {
            this.spoilerPressed = null;
            this.isCaptionSpoilerPressed = false;
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewPressed = false;
            this.otherPressed = false;
            this.sideButtonPressed = false;
            this.imagePressed = false;
            this.timePressed = false;
            this.gamePreviewPressed = false;
            this.commentButtonPressed = false;
            this.instantButtonPressed = false;
            this.instantPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i8 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i8 >= drawableArr.length) {
                        break;
                    }
                    if (drawableArr[i8] != null) {
                        drawableArr[i8].setState(StateSet.NOTHING);
                    }
                    i8++;
                }
            }
            if (this.hadLongPress) {
                if (this.pressedLinkType != 2) {
                    this.hadLongPress = false;
                }
                this.pressedLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
            } else {
                resetPressedLink(-1);
            }
            z = false;
        } else {
            z = checkSpoilersMotionEvent;
        }
        updateRadialProgressBackground();
        if (!this.disallowLongPress && z && motionEvent.getAction() == 0) {
            startCheckLongPress();
        }
        if (motionEvent.getAction() != 0 && motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (z) {
            return z;
        }
        float x = motionEvent.getX();
        float y2 = motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            if (chatMessageCellDelegate != null && !chatMessageCellDelegate.canPerformActions()) {
                return z;
            }
            if (this.isAvatarVisible && this.avatarImage.isInsideImage(x, getTop() + y2)) {
                this.avatarPressed = true;
            } else {
                if (this.psaButtonVisible && this.hasPsaHint) {
                    int i9 = this.psaHelpX;
                    if (x >= i9 && x <= i9 + AndroidUtilities.dp(40.0f)) {
                        int i10 = this.psaHelpY;
                        if (y2 >= i10 && y2 <= i10 + AndroidUtilities.dp(40.0f)) {
                            this.psaHintPressed = true;
                            createSelectorDrawable(0);
                            this.selectorDrawableMaskType[0] = 3;
                            if (Build.VERSION.SDK_INT >= 21) {
                                Drawable[] drawableArr2 = this.selectorDrawable;
                                if (drawableArr2[0] != null) {
                                    drawableArr2[0].setBounds(this.psaHelpX - AndroidUtilities.dp(8.0f), this.psaHelpY - AndroidUtilities.dp(8.0f), this.psaHelpX + AndroidUtilities.dp(32.0f), this.psaHelpY + AndroidUtilities.dp(32.0f));
                                    this.selectorDrawable[0].setHotspot(x, y2);
                                    this.selectorDrawable[0].setState(this.pressedState);
                                }
                            }
                            invalidate();
                        }
                    }
                }
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f = this.forwardNameX;
                    if (x >= f && x <= this.forwardedNameWidth + f) {
                        int i11 = this.forwardNameY;
                        if (y2 >= i11 && y2 <= i11 + this.forwardHeight) {
                            if (this.viaWidth != 0 && x >= f + this.viaNameWidth + AndroidUtilities.dp(4.0f)) {
                                this.forwardBotPressed = true;
                            } else {
                                this.forwardNamePressed = true;
                            }
                        }
                    }
                }
                if (this.drawNameLayout && this.nameLayout != null && (i6 = this.viaWidth) != 0) {
                    float f2 = this.nameX;
                    int i12 = this.viaNameWidth;
                    if (x >= i12 + f2 && x <= f2 + i12 + i6 && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                        this.forwardBotPressed = true;
                    }
                }
                if (this.drawSideButton != 0) {
                    float f3 = this.sideStartX;
                    if (x >= f3 && x <= f3 + AndroidUtilities.dp(40.0f)) {
                        float f4 = this.sideStartY;
                        if (y2 >= f4) {
                            if (y2 <= f4 + AndroidUtilities.dp(32 + ((this.drawSideButton != 3 || this.commentLayout == null) ? 0 : 18))) {
                                if (this.currentMessageObject.isSent()) {
                                    this.sideButtonPressed = true;
                                }
                                invalidate();
                            }
                        }
                    }
                }
                if (this.replyNameLayout != null) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        i4 = this.replyStartX;
                        i5 = Math.max(this.replyNameWidth, this.replyTextWidth);
                    } else {
                        i4 = this.replyStartX;
                        i5 = this.backgroundDrawableRight;
                    }
                    int i13 = i4 + i5;
                    if (x >= this.replyStartX && x <= i13) {
                        int i14 = this.replyStartY;
                        if (y2 >= i14 && y2 <= i14 + this.replyHeight) {
                            this.replyPressed = true;
                            this.replyTouchX = x;
                            this.replyTouchY = getY() + y2;
                            Drawable drawable = this.replySelector;
                            if (drawable != null) {
                                if (Build.VERSION.SDK_INT >= 21) {
                                    drawable.setHotspot(x, y2);
                                }
                                this.replySelectorPressed = false;
                                this.replySelectorCanBePressed = true;
                                postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda3
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatMessageCell.this.lambda$onTouchEvent$5();
                                    }
                                }, ViewConfiguration.getTapTimeout() / 6);
                                invalidate();
                            }
                        }
                    }
                }
                z2 = z;
            }
            if (z2) {
                startCheckLongPress();
            }
            return z2;
        }
        if (motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (this.avatarPressed) {
            if (motionEvent.getAction() == 1) {
                this.avatarPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 == null) {
                    return z;
                }
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null) {
                    if (tLRPC$User.id == 0) {
                        chatMessageCellDelegate2.didPressHiddenForward(this);
                        return z;
                    }
                    chatMessageCellDelegate2.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                if (tLRPC$Chat2 != null) {
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                    if (tLRPC$MessageFwdHeader != null) {
                        if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                            i3 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                            tLRPC$Chat = tLRPC$Chat2;
                        } else {
                            i3 = tLRPC$MessageFwdHeader.channel_post;
                            tLRPC$Chat = this.currentForwardChannel;
                        }
                        i7 = i3;
                    } else {
                        tLRPC$Chat = tLRPC$Chat2;
                    }
                    chatMessageCellDelegate2.didPressChannelAvatar(this, tLRPC$Chat != null ? tLRPC$Chat : tLRPC$Chat2, i7, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject == null || messageObject.sponsoredChatInvite == null) {
                    return z;
                }
                chatMessageCellDelegate2.didPressInstantButton(this, this.drawInstantViewType);
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.avatarPressed = false;
                return z;
            } else if (motionEvent.getAction() != 2 || !this.isAvatarVisible || this.avatarImage.isInsideImage(x, y2 + getTop())) {
                return z;
            } else {
                this.avatarPressed = false;
                return z;
            }
        } else if (this.psaHintPressed) {
            if (motionEvent.getAction() != 1) {
                return z;
            }
            playSoundEffect(0);
            this.delegate.didPressHint(this, 1);
            this.psaHintPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                Drawable[] drawableArr3 = this.selectorDrawable;
                if (drawableArr3[0] != null) {
                    drawableArr3[0].setState(StateSet.NOTHING);
                }
            }
            invalidate();
            return z;
        } else if (this.forwardNamePressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardNamePressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 == null) {
                    return z;
                }
                TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                if (tLRPC$Chat3 != null) {
                    chatMessageCellDelegate3.didPressChannelAvatar(this, tLRPC$Chat3, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                    return z;
                }
                TLRPC$User tLRPC$User2 = this.currentForwardUser;
                if (tLRPC$User2 != null) {
                    chatMessageCellDelegate3.didPressUserAvatar(this, tLRPC$User2, this.lastTouchX, this.lastTouchY);
                    return z;
                } else if (this.currentForwardName == null) {
                    return z;
                } else {
                    chatMessageCellDelegate3.didPressHiddenForward(this);
                    return z;
                }
            } else if (motionEvent.getAction() == 3) {
                this.forwardNamePressed = false;
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                float f5 = this.forwardNameX;
                if (x >= f5 && x <= f5 + this.forwardedNameWidth) {
                    int i15 = this.forwardNameY;
                    if (y2 >= i15 && y2 <= i15 + this.forwardHeight) {
                        return z;
                    }
                }
                this.forwardNamePressed = false;
                return z;
            }
        } else if (this.forwardBotPressed) {
            if (motionEvent.getAction() == 1) {
                this.forwardBotPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                if (chatMessageCellDelegate4 == null) {
                    return z;
                }
                TLRPC$User tLRPC$User3 = this.currentViaBotUser;
                if (tLRPC$User3.bot_inline_placeholder == null) {
                    chatMessageCellDelegate4.didPressViaBotNotInline(this, tLRPC$User3 != null ? tLRPC$User3.id : 0L);
                    return z;
                }
                chatMessageCellDelegate4.didPressViaBot(this, tLRPC$User3 != null ? tLRPC$User3.username : this.currentMessageObject.messageOwner.via_bot_name);
                return z;
            } else if (motionEvent.getAction() == 3) {
                this.forwardBotPressed = false;
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f6 = this.forwardNameX;
                    if (x >= f6 && x <= f6 + this.forwardedNameWidth) {
                        int i16 = this.forwardNameY;
                        if (y2 >= i16 && y2 <= i16 + this.forwardHeight) {
                            return z;
                        }
                    }
                    this.forwardBotPressed = false;
                    return z;
                }
                float f7 = this.nameX;
                int i17 = this.viaNameWidth;
                if (x >= i17 + f7 && x <= f7 + i17 + this.viaWidth && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                    return z;
                }
                this.forwardBotPressed = false;
                return z;
            }
        } else if (this.replyPressed) {
            if (motionEvent.getAction() == 1) {
                this.replyPressed = false;
                Drawable drawable2 = this.replySelector;
                if (drawable2 != null) {
                    if (!this.replySelectorPressed) {
                        drawable2.setState(new int[]{16842919, 16842910});
                        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda5
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$onTouchEvent$6();
                            }
                        });
                    } else {
                        drawable2.setState(new int[0]);
                    }
                    this.replySelectorPressed = false;
                    this.replySelectorCanBePressed = false;
                    invalidate();
                }
                playSoundEffect(0);
                if (this.replyPanelIsForward) {
                    ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                    if (chatMessageCellDelegate5 == null) {
                        return z;
                    }
                    TLRPC$Chat tLRPC$Chat4 = this.currentForwardChannel;
                    if (tLRPC$Chat4 != null) {
                        chatMessageCellDelegate5.didPressChannelAvatar(this, tLRPC$Chat4, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                        return z;
                    }
                    TLRPC$User tLRPC$User4 = this.currentForwardUser;
                    if (tLRPC$User4 != null) {
                        chatMessageCellDelegate5.didPressUserAvatar(this, tLRPC$User4, this.lastTouchX, this.lastTouchY);
                        return z;
                    } else if (this.currentForwardName == null) {
                        return z;
                    } else {
                        chatMessageCellDelegate5.didPressHiddenForward(this);
                        return z;
                    }
                } else if (this.delegate == null || !this.currentMessageObject.hasValidReplyMessageObject()) {
                    return z;
                } else {
                    this.delegate.didPressReplyMessage(this, this.currentMessageObject.getReplyMsgId());
                    return z;
                }
            } else if (motionEvent.getAction() == 3) {
                this.replyPressed = false;
                this.replySelectorPressed = false;
                Drawable drawable3 = this.replySelector;
                if (drawable3 != null) {
                    drawable3.setState(new int[0]);
                }
                invalidate();
                return z;
            } else if (motionEvent.getAction() != 2) {
                return z;
            } else {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i = this.replyStartX;
                    i2 = Math.max(this.replyNameWidth, this.replyTextWidth);
                } else {
                    i = this.replyStartX;
                    i2 = this.backgroundDrawableRight;
                }
                int i18 = i + i2;
                if (x >= this.replyStartX && x <= i18) {
                    int i19 = this.replyStartY;
                    if (y2 >= i19 && y2 <= i19 + this.replyHeight) {
                        if (this.replySelector == null || !this.replySelectorCanBePressed || Math.sqrt(Math.pow(x - this.replyTouchX, 2.0d) + Math.pow((y2 + getY()) - this.replyTouchY, 2.0d)) <= 0.75d) {
                            return z;
                        }
                        this.replySelectorCanBePressed = false;
                        return z;
                    }
                }
                this.replyPressed = false;
                this.replySelectorPressed = false;
                this.replySelectorCanBePressed = false;
                Drawable drawable4 = this.replySelector;
                if (drawable4 != null) {
                    drawable4.setState(new int[0]);
                }
                invalidate();
                return z;
            }
        } else if (!this.sideButtonPressed) {
            return z;
        } else {
            if (motionEvent.getAction() == 1) {
                this.sideButtonPressed = false;
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate6 = this.delegate;
                if (chatMessageCellDelegate6 != null) {
                    if (this.drawSideButton == 3) {
                        chatMessageCellDelegate6.didPressCommentButton(this);
                    } else {
                        chatMessageCellDelegate6.didPressSideButton(this);
                    }
                }
            } else if (motionEvent.getAction() == 3) {
                this.sideButtonPressed = false;
            } else if (motionEvent.getAction() == 2) {
                float f8 = this.sideStartX;
                if (x >= f8 && x <= f8 + AndroidUtilities.dp(40.0f)) {
                    float f9 = this.sideStartY;
                    if (y2 >= f9) {
                    }
                }
                this.sideButtonPressed = false;
            }
            invalidate();
            return z;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onTouchEvent$5() {
        if (!this.replyPressed || this.replySelectorPressed || !this.replySelectorCanBePressed) {
            return;
        }
        this.replySelectorPressed = true;
        this.replySelector.setState(new int[]{16842919, 16842910});
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onTouchEvent$6() {
        this.replySelector.setState(new int[0]);
        invalidate();
    }

    private boolean checkReactionsTouchEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessages groupedMessages;
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                View childAt = viewGroup.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i2 = currentPosition.flags;
                        if ((i2 & 8) != 0 && (i2 & 1) != 0) {
                            if (chatMessageCell == this) {
                                return this.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean chekTouchEvent = chatMessageCell.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return chekTouchEvent;
                        }
                    }
                }
            }
            return false;
        }
        return this.reactionsLayoutInBubble.chekTouchEvent(motionEvent);
    }

    private boolean checkPinchToZoom(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        PinchToZoomHelper pinchToZoomHelper = chatMessageCellDelegate == null ? null : chatMessageCellDelegate.getPinchToZoomHelper();
        if (this.currentMessageObject == null || !this.photoImage.hasNotThumb() || pinchToZoomHelper == null || this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedEmoji()) {
            return false;
        }
        if ((this.currentMessageObject.isVideo() && !this.autoPlayingMedia) || this.isRoundVideo || this.currentMessageObject.isAnimatedSticker()) {
            return false;
        }
        if ((this.currentMessageObject.isDocument() && !this.currentMessageObject.isGif()) || this.currentMessageObject.needDrawBluredPreview()) {
            return false;
        }
        return pinchToZoomHelper.checkPinchToZoom(motionEvent, this, this.photoImage, this.currentMessageObject);
    }

    private boolean checkTextSelection(MotionEvent motionEvent) {
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        int i;
        int dp;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper = this.delegate.getTextSelectionHelper();
        if (textSelectionHelper == null || MessagesController.getInstance(this.currentAccount).isChatNoForwards(this.currentMessageObject.getChatId()) || ((tLRPC$Message = (messageObject = this.currentMessageObject).messageOwner) != null && tLRPC$Message.noforwards)) {
            return false;
        }
        ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
        if (!(arrayList != null && !arrayList.isEmpty()) && !hasCaptionLayout()) {
            return false;
        }
        if ((!this.drawSelectionBackground && this.currentMessagesGroup == null) || (this.currentMessagesGroup != null && !this.delegate.hasSelectedMessages())) {
            return false;
        }
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i3 = 0; i3 < viewGroup.getChildCount(); i3++) {
                View childAt = viewGroup.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i4 = currentPosition.flags;
                        if ((i4 & 8) != 0 && (i4 & 1) != 0) {
                            textSelectionHelper.setMaybeTextCord((int) chatMessageCell.captionX, (int) chatMessageCell.captionY);
                            textSelectionHelper.setMessageObject(chatMessageCell);
                            if (chatMessageCell == this) {
                                return textSelectionHelper.onTouchEvent(motionEvent);
                            }
                            motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                            boolean onTouchEvent = textSelectionHelper.onTouchEvent(motionEvent);
                            motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                            return onTouchEvent;
                        }
                    }
                }
            }
            return false;
        }
        if (hasCaptionLayout()) {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setMaybeTextCord((int) this.captionX, (int) this.captionY);
        } else if (this.descriptionLayout != null && motionEvent.getY() > this.descriptionY) {
            textSelectionHelper.setIsDescription(true);
            if (this.hasGamePreview) {
                i2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i = this.unmovedTextX;
                    dp = AndroidUtilities.dp(1.0f);
                } else {
                    i = this.unmovedTextX;
                    dp = AndroidUtilities.dp(1.0f);
                }
                i2 = i + dp;
            }
            textSelectionHelper.setMaybeTextCord(i2 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
        } else {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setMaybeTextCord(this.textX, this.textY);
        }
        textSelectionHelper.setMessageObject(this);
        return textSelectionHelper.onTouchEvent(motionEvent);
    }

    private void updateSelectionTextPosition() {
        int i;
        int dp;
        int i2;
        if (getDelegate() == null || getDelegate().getTextSelectionHelper() == null || !getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
            return;
        }
        int textSelectionType = getDelegate().getTextSelectionHelper().getTextSelectionType(this);
        if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_DESCRIPTION) {
            if (this.hasGamePreview) {
                i2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i = this.unmovedTextX;
                    dp = AndroidUtilities.dp(1.0f);
                } else {
                    i = this.unmovedTextX;
                    dp = AndroidUtilities.dp(1.0f);
                }
                i2 = i + dp;
            }
            getDelegate().getTextSelectionHelper().updateTextPosition(i2 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
        } else if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_CAPTION) {
            getDelegate().getTextSelectionHelper().updateTextPosition((int) this.captionX, (int) this.captionY);
        } else {
            getDelegate().getTextSelectionHelper().updateTextPosition(this.textX, this.textY);
        }
    }

    public ArrayList<PollButton> getPollButtons() {
        return this.pollButtons;
    }

    public void updatePlayingMessageProgress() {
        String formatShortDuration;
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        VideoPlayerRewinder videoPlayerRewinder = this.videoPlayerRewinder;
        if (videoPlayerRewinder != null && videoPlayerRewinder.rewindCount != 0 && videoPlayerRewinder.rewindByBackSeek) {
            messageObject.audioProgress = videoPlayerRewinder.getVideoProgress();
        }
        int i2 = 0;
        if (this.documentAttachType == 4) {
            SeekBar seekBar = this.seekBar;
            if (seekBar != null) {
                seekBar.clearTimestamps();
            }
            if (this.infoLayout != null && (PhotoViewer.isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isGoingToShowMessageObject(this.currentMessageObject))) {
                return;
            }
            AnimatedFileDrawable animation = this.photoImage.getAnimation();
            if (animation != null) {
                MessageObject messageObject2 = this.currentMessageObject;
                i2 = animation.getDurationMs() / 1000;
                messageObject2.audioPlayerDuration = i2;
                MessageObject messageObject3 = this.currentMessageObject;
                TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                if (tLRPC$Message.ttl > 0 && tLRPC$Message.destroyTime == 0 && !messageObject3.needDrawBluredPreview() && this.currentMessageObject.isVideo() && animation.hasBitmap()) {
                    this.delegate.didStartVideoStream(this.currentMessageObject);
                }
            }
            if (i2 == 0) {
                i2 = this.currentMessageObject.getDuration();
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                float f = i2;
                i2 = (int) (f - (this.currentMessageObject.audioProgress * f));
            } else if (animation != null) {
                if (i2 != 0) {
                    i2 -= animation.getCurrentProgressMs() / 1000;
                }
                if (this.delegate != null && animation.getCurrentProgressMs() >= 3000) {
                    this.delegate.videoTimerReached();
                }
            }
            if (this.lastTime == i2) {
                return;
            }
            String formatShortDuration2 = AndroidUtilities.formatShortDuration(i2);
            this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(formatShortDuration2));
            this.infoLayout = new StaticLayout(formatShortDuration2, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.lastTime = i2;
        } else if (this.isRoundVideo) {
            if (this.useSeekBarWaveform) {
                if (!this.seekBarWaveform.isDragging()) {
                    this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
                }
            } else {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.clearTimestamps();
            }
            TLRPC$Document document = this.currentMessageObject.getDocument();
            int i3 = 0;
            while (true) {
                if (i3 >= document.attributes.size()) {
                    i = 0;
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute = document.attributes.get(i3);
                if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo) {
                    i = tLRPC$DocumentAttribute.duration;
                    break;
                }
                i3++;
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                i = Math.max(0, i - this.currentMessageObject.audioProgressSec);
            }
            if (this.lastTime != i) {
                this.lastTime = i;
                String formatLongDuration = AndroidUtilities.formatLongDuration(i);
                this.timeWidthAudio = (int) Math.ceil(Theme.chat_timePaint.measureText(formatLongDuration));
                this.durationLayout = new StaticLayout(formatLongDuration, Theme.chat_timePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            float f2 = this.currentMessageObject.audioProgress;
            if (f2 != 0.0f) {
                this.lastDrawingAudioProgress = f2;
                if (f2 > 0.9f) {
                    this.lastDrawingAudioProgress = 1.0f;
                }
            }
            invalidate();
        } else if (this.documentAttach == null) {
        } else {
            if (this.useSeekBarWaveform) {
                if (!this.seekBarWaveform.isDragging()) {
                    this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
                }
            } else {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.updateTimestamps(this.currentMessageObject, null);
            }
            if (this.documentAttachType == 3) {
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    int i4 = 0;
                    while (true) {
                        if (i4 >= this.documentAttach.attributes.size()) {
                            break;
                        }
                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i4);
                        if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                            i2 = tLRPC$DocumentAttribute2.duration;
                            break;
                        }
                        i4++;
                    }
                } else {
                    i2 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != i2) {
                    this.lastTime = i2;
                    String formatLongDuration2 = AndroidUtilities.formatLongDuration(i2);
                    this.timeWidthAudio = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatLongDuration2));
                    this.durationLayout = new StaticLayout(formatLongDuration2, Theme.chat_audioTimePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            } else {
                int duration = this.currentMessageObject.getDuration();
                if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    i2 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != i2) {
                    this.lastTime = i2;
                    this.durationLayout = new StaticLayout(AndroidUtilities.formatShortDuration(i2, duration), Theme.chat_audioTimePaint, (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatShortDuration)), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                }
            }
            invalidate();
        }
    }

    public void setFullyDraw(boolean z) {
        this.fullyDraw = z;
    }

    public void setParentViewSize(int i, int i2) {
        Theme.MessageDrawable messageDrawable;
        this.parentWidth = i;
        this.parentHeight = i2;
        this.backgroundHeight = i2;
        if ((this.currentMessageObject == null || !hasGradientService() || !this.currentMessageObject.shouldDrawWithoutBackground()) && ((messageDrawable = this.currentBackgroundDrawable) == null || messageDrawable.getGradientShader() == null)) {
            return;
        }
        invalidate();
    }

    public void setVisiblePart(int i, int i2, int i3, float f, float f2, int i4, int i5, int i6, int i7) {
        MessageObject.TextLayoutBlock textLayoutBlock;
        this.parentWidth = i4;
        this.parentHeight = i5;
        this.backgroundHeight = i5;
        this.blurredViewTopOffset = i6;
        this.blurredViewBottomOffset = i7;
        this.viewTop = f2;
        if (i3 != i5 || f != this.parentViewTopOffset) {
            this.parentViewTopOffset = f;
            this.parentHeight = i3;
        }
        if (this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) {
            invalidate();
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.textLayoutBlocks == null) {
            return;
        }
        int i8 = i - this.textY;
        int i9 = 0;
        for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset <= i8; i10++) {
            i9 = i10;
        }
        int i11 = -1;
        int i12 = -1;
        int i13 = 0;
        while (i9 < this.currentMessageObject.textLayoutBlocks.size()) {
            float f3 = this.currentMessageObject.textLayoutBlocks.get(i9).textYOffset;
            float f4 = i8;
            if (intersect(f3, textLayoutBlock.height + f3, f4, i8 + i2)) {
                if (i11 == -1) {
                    i11 = i9;
                }
                i13++;
                i12 = i9;
            } else if (f3 > f4) {
                break;
            }
            i9++;
        }
        if (this.lastVisibleBlockNum != i12 || this.firstVisibleBlockNum != i11 || this.totalVisibleBlocksCount != i13) {
            this.lastVisibleBlockNum = i12;
            this.firstVisibleBlockNum = i11;
            this.totalVisibleBlocksCount = i13;
            invalidate();
        } else if (this.animatedEmojiStack != null) {
            for (int i14 = 0; i14 < this.animatedEmojiStack.holders.size(); i14++) {
                AnimatedEmojiSpan.AnimatedEmojiHolder animatedEmojiHolder = this.animatedEmojiStack.holders.get(i14);
                if (animatedEmojiHolder != null && animatedEmojiHolder.skipDraw && !animatedEmojiHolder.outOfBounds((this.parentBoundsTop - getY()) - animatedEmojiHolder.drawingYOffset, (this.parentBoundsBottom - getY()) - animatedEmojiHolder.drawingYOffset)) {
                    invalidate();
                    return;
                }
            }
        }
    }

    public static StaticLayout generateStaticLayout(CharSequence charSequence, TextPaint textPaint, int i, int i2, int i3, int i4) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);
        StaticLayout staticLayout = new StaticLayout(charSequence, textPaint, i2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        int i5 = i;
        int i6 = 0;
        for (int i7 = 0; i7 < i3; i7++) {
            staticLayout.getLineDirections(i7);
            if (staticLayout.getLineLeft(i7) != 0.0f || staticLayout.isRtlCharAt(staticLayout.getLineStart(i7)) || staticLayout.isRtlCharAt(staticLayout.getLineEnd(i7))) {
                i5 = i2;
            }
            int lineEnd = staticLayout.getLineEnd(i7);
            if (lineEnd == charSequence.length()) {
                break;
            }
            int i8 = (lineEnd - 1) + i6;
            if (spannableStringBuilder.charAt(i8) == ' ') {
                spannableStringBuilder.replace(i8, i8 + 1, (CharSequence) "\n");
            } else if (spannableStringBuilder.charAt(i8) != '\n') {
                spannableStringBuilder.insert(i8, (CharSequence) "\n");
                i6++;
            }
            if (i7 == staticLayout.getLineCount() - 1 || i7 == i4 - 1) {
                break;
            }
        }
        int i9 = i5;
        return StaticLayoutEx.createStaticLayout(spannableStringBuilder, textPaint, i9, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i9, i4, true);
    }

    private void didClickedImage() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC$WebPage tLRPC$WebPage;
        boolean z;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        if (this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) {
            startRevealMedia(this.lastTouchX, this.lastTouchY);
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        int i = messageObject.type;
        if (i == 20) {
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            if (tLRPC$Message == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null || tLRPC$MessageMedia.extended_media == null || (tLRPC$ReplyMarkup = tLRPC$Message.reply_markup) == null) {
                return;
            }
            Iterator<TLRPC$TL_keyboardButtonRow> it = tLRPC$ReplyMarkup.rows.iterator();
            while (it.hasNext()) {
                Iterator<TLRPC$KeyboardButton> it2 = it.next().buttons.iterator();
                if (it2.hasNext()) {
                    this.delegate.didPressExtendedMediaPreview(this, it2.next());
                    return;
                }
            }
        } else if (i == 1 || messageObject.isAnyKindOfSticker()) {
            int i2 = this.buttonState;
            if (i2 == -1) {
                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
            } else if (i2 != 0) {
            } else {
                didPressButton(true, false);
            }
        } else {
            MessageObject messageObject2 = this.currentMessageObject;
            int i3 = messageObject2.type;
            if (i3 == 12) {
                long j = MessageObject.getMedia(messageObject2.messageOwner).user_id;
                TLRPC$User tLRPC$User = null;
                if (j != 0) {
                    tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
                }
                this.delegate.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
            } else if (i3 == 5) {
                if (this.buttonState != -1) {
                    didPressButton(true, false);
                } else if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.delegate.needPlayMessage(this.currentMessageObject, false);
                } else {
                    MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                }
            } else if (i3 == 8) {
                int i4 = this.buttonState;
                if (i4 == -1 || (i4 == 1 && this.canStreamVideo && this.autoPlayingMedia)) {
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (i4 != 2 && i4 != 0) {
                } else {
                    didPressButton(true, false);
                }
            } else {
                int i5 = this.documentAttachType;
                if (i5 == 4) {
                    int i6 = this.buttonState;
                    if (i6 == -1 || ((z = this.drawVideoImageButton) && (this.autoPlayingMedia || (SharedConfig.streamMedia && this.canStreamVideo)))) {
                        this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                    } else if (z) {
                        didPressButton(true, true);
                    } else if (i6 != 0 && i6 != 3) {
                    } else {
                        didPressButton(true, false);
                    }
                } else if (i3 == 4) {
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (i5 == 1) {
                    if (this.buttonState != -1) {
                        return;
                    }
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (i5 == 2) {
                    if (this.buttonState != -1 || (tLRPC$WebPage = MessageObject.getMedia(messageObject2.messageOwner).webpage) == null) {
                        return;
                    }
                    String str = tLRPC$WebPage.embed_url;
                    if (str != null && str.length() != 0) {
                        this.delegate.needOpenWebView(this.currentMessageObject, tLRPC$WebPage.embed_url, tLRPC$WebPage.site_name, tLRPC$WebPage.description, tLRPC$WebPage.url, tLRPC$WebPage.embed_width, tLRPC$WebPage.embed_height);
                    } else {
                        Browser.openUrl(getContext(), tLRPC$WebPage.url);
                    }
                } else if (this.hasInvoicePreview) {
                    if (this.buttonState != -1) {
                        return;
                    }
                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY);
                } else if (Build.VERSION.SDK_INT < 26 || (chatMessageCellDelegate = this.delegate) == null) {
                } else {
                    if (i3 == 16) {
                        chatMessageCellDelegate.didLongPress(this, 0.0f, 0.0f);
                    } else {
                        chatMessageCellDelegate.didPressOther(this, this.otherX, this.otherY);
                    }
                }
            }
        }
    }

    private void updateSecretTimeText(MessageObject messageObject) {
        String secretTimeString;
        if (messageObject == null || !messageObject.needDrawBluredPreview() || (secretTimeString = messageObject.getSecretTimeString()) == null) {
            return;
        }
        int ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(secretTimeString));
        this.infoWidth = ceil;
        this.infoLayout = new StaticLayout(TextUtils.ellipsize(secretTimeString, Theme.chat_infoPaint, ceil, TextUtils.TruncateAt.END), Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        invalidate();
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isPhotoDataChanged(MessageObject messageObject) {
        int i;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        String formapMapUrl;
        int i2;
        int i3 = messageObject.type;
        if (i3 == 0 || i3 == 14) {
            return false;
        }
        if (i3 == 4) {
            if (this.currentUrl == null) {
                return true;
            }
            TLRPC$GeoPoint tLRPC$GeoPoint = messageObject.messageOwner.media.geo;
            double d = tLRPC$GeoPoint.lat;
            double d2 = tLRPC$GeoPoint._long;
            if (((int) messageObject.getDialogId()) == 0 && (i2 = SharedConfig.mapPreviewType) != 0) {
                if (i2 == 1) {
                    i = 4;
                } else if (i2 == 3) {
                    i = 1;
                }
                tLRPC$MessageMedia = messageObject.messageOwner.media;
                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
                    int dp = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp2 = AndroidUtilities.dp(195.0f);
                    double d3 = 268435456;
                    Double.isNaN(d3);
                    double d4 = d3 / 3.141592653589793d;
                    double d5 = (d * 3.141592653589793d) / 180.0d;
                    Double.isNaN(d3);
                    double round = Math.round(d3 - ((Math.log((Math.sin(d5) + 1.0d) / (1.0d - Math.sin(d5))) * d4) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                    Double.isNaN(round);
                    Double.isNaN(d3);
                    int i4 = this.currentAccount;
                    float f = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i4, ((1.5707963267948966d - (Math.atan(Math.exp((round - d3) / d4)) * 2.0d)) * 180.0d) / 3.141592653589793d, d2, (int) (dp / f), (int) (dp2 / f), false, 15, i);
                } else if (!TextUtils.isEmpty(tLRPC$MessageMedia.title)) {
                    int dp3 = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                    int dp4 = AndroidUtilities.dp(195.0f);
                    int i5 = this.currentAccount;
                    float f2 = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i5, d, d2, (int) (dp3 / f2), (int) (dp4 / f2), true, 15, i);
                } else {
                    int dp5 = this.backgroundWidth - AndroidUtilities.dp(12.0f);
                    int dp6 = AndroidUtilities.dp(195.0f);
                    int i6 = this.currentAccount;
                    float f3 = AndroidUtilities.density;
                    formapMapUrl = AndroidUtilities.formapMapUrl(i6, d, d2, (int) (dp5 / f3), (int) (dp6 / f3), true, 15, i);
                }
                return !formapMapUrl.equals(this.currentUrl);
            }
            i = -1;
            tLRPC$MessageMedia = messageObject.messageOwner.media;
            if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGeoLive)) {
            }
            return !formapMapUrl.equals(this.currentUrl);
        }
        TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
        if (tLRPC$PhotoSize == null || (tLRPC$PhotoSize.location instanceof TLRPC$TL_fileLocationUnavailable)) {
            return i3 == 1 || i3 == 20 || i3 == 5 || i3 == 3 || i3 == 8 || messageObject.isAnyKindOfSticker();
        } else if (this.currentMessageObject != null && this.photoNotSet) {
            return FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner).exists();
        } else {
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getRepliesCount() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            return this.currentMessagesGroup.messages.get(0).getRepliesCount();
        }
        return this.currentMessageObject.getRepliesCount();
    }

    private ArrayList<TLRPC$Peer> getRecentRepliers() {
        TLRPC$MessageReplies tLRPC$MessageReplies;
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty() && (tLRPC$MessageReplies = this.currentMessagesGroup.messages.get(0).messageOwner.replies) != null) {
            return tLRPC$MessageReplies.recent_repliers;
        }
        TLRPC$MessageReplies tLRPC$MessageReplies2 = this.currentMessageObject.messageOwner.replies;
        if (tLRPC$MessageReplies2 == null) {
            return null;
        }
        return tLRPC$MessageReplies2.recent_repliers;
    }

    public void updateAnimatedEmojis() {
        if (!this.imageReceiversAttachState) {
            return;
        }
        boolean z = false;
        int cacheTypeForEnterView = this.currentMessageObject.wasJustSent ? AnimatedEmojiDrawable.getCacheTypeForEnterView() : 0;
        StaticLayout staticLayout = this.captionLayout;
        if (staticLayout != null) {
            this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, (View) this, false, this.animatedEmojiStack, staticLayout);
            return;
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent()) {
            z = true;
        }
        this.animatedEmojiStack = AnimatedEmojiSpan.update(cacheTypeForEnterView, this, z, this.animatedEmojiStack, this.currentMessageObject.textLayoutBlocks);
    }

    private void updateCaptionSpoilers() {
        this.captionSpoilersPool.addAll(this.captionSpoilers);
        this.captionSpoilers.clear();
        if (this.captionLayout == null || getMessageObject().isSpoilersRevealed) {
            return;
        }
        SpoilerEffect.addSpoilers(this, this.captionLayout, this.captionSpoilersPool, this.captionSpoilers);
    }

    /* JADX WARN: Removed duplicated region for block: B:75:0x00da  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isUserDataChanged() {
        TLRPC$FileLocation tLRPC$FileLocation;
        TLRPC$FileLocation tLRPC$FileLocation2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str;
        String forwardedName;
        String str2;
        MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$ChatPhoto tLRPC$ChatPhoto;
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto;
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 == null || this.hasLinkPreview || MessageObject.getMedia(messageObject3.messageOwner) == null || !(MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage instanceof TLRPC$TL_webPage)) {
            MessageObject messageObject4 = this.currentMessageObject;
            if (messageObject4 != null && (this.currentUser != null || this.currentChat != null)) {
                int i = this.lastSendState;
                TLRPC$Message tLRPC$Message = messageObject4.messageOwner;
                if (i != tLRPC$Message.send_state || this.lastDeleteDate != tLRPC$Message.destroyTime || this.lastViewsCount != tLRPC$Message.views || this.lastRepliesCount != getRepliesCount() || this.lastReactions != this.currentMessageObject.messageOwner.reactions) {
                    return true;
                }
                updateCurrentUserAndChat();
                String str3 = null;
                if (this.isAvatarVisible) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null && (tLRPC$UserProfilePhoto = tLRPC$User.photo) != null) {
                        tLRPC$FileLocation = tLRPC$UserProfilePhoto.photo_small;
                    } else {
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        if (tLRPC$Chat != null && (tLRPC$ChatPhoto = tLRPC$Chat.photo) != null) {
                            tLRPC$FileLocation = tLRPC$ChatPhoto.photo_small;
                        }
                    }
                    if (this.replyTextLayout != null && (messageObject2 = this.currentMessageObject.replyMessageObject) != null && (!this.isThreadChat || (tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from) == null || tLRPC$MessageFwdHeader.channel_post == 0)) {
                        return true;
                    }
                    tLRPC$FileLocation2 = this.currentPhoto;
                    if ((tLRPC$FileLocation2 != null && tLRPC$FileLocation != null) || ((tLRPC$FileLocation2 != null && tLRPC$FileLocation == null) || (tLRPC$FileLocation2 != null && (tLRPC$FileLocation2.local_id != tLRPC$FileLocation.local_id || tLRPC$FileLocation2.volume_id != tLRPC$FileLocation.volume_id)))) {
                        return true;
                    }
                    if (this.replyNameLayout != null || (messageObject = this.currentMessageObject.replyMessageObject) == null || (tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40)) == null || this.currentMessageObject.replyMessageObject.isAnyKindOfSticker()) {
                        tLRPC$PhotoSize = null;
                    }
                    if (this.currentReplyPhoto != null && tLRPC$PhotoSize != null) {
                        return true;
                    }
                    if (isNeedAuthorName()) {
                        str3 = getAuthorName();
                    }
                    str = this.currentNameString;
                    if ((str != null && str3 != null) || ((str != null && str3 == null) || (str != null && !str.equals(str3)))) {
                        return true;
                    }
                    if (this.drawForwardedName && this.currentMessageObject.needDrawForwarded()) {
                        forwardedName = this.currentMessageObject.getForwardedName();
                        str2 = this.currentForwardNameString;
                        if (str2 != null && forwardedName != null) {
                            return true;
                        }
                        if (str2 == null && forwardedName == null) {
                            return true;
                        }
                        return str2 == null && !str2.equals(forwardedName);
                    }
                }
                tLRPC$FileLocation = null;
                if (this.replyTextLayout != null) {
                }
                tLRPC$FileLocation2 = this.currentPhoto;
                if (tLRPC$FileLocation2 != null) {
                }
                if (this.replyNameLayout != null) {
                }
                tLRPC$PhotoSize = null;
                if (this.currentReplyPhoto != null) {
                }
                if (isNeedAuthorName()) {
                }
                str = this.currentNameString;
                if (str != null) {
                }
                if (this.drawForwardedName) {
                    forwardedName = this.currentMessageObject.getForwardedName();
                    str2 = this.currentForwardNameString;
                    if (str2 != null) {
                    }
                    if (str2 == null) {
                    }
                    if (str2 == null) {
                    }
                }
            }
            return false;
        }
        return true;
    }

    public ImageReceiver getPhotoImage() {
        return this.photoImage;
    }

    public int getNoSoundIconCenterX() {
        return this.noSoundCenterX;
    }

    public int getForwardNameCenterX() {
        float f;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.id == 0) {
            f = this.avatarImage.getCenterX();
        } else {
            f = this.forwardNameX + this.forwardNameCenterX;
        }
        return (int) f;
    }

    public int getChecksX() {
        return this.layoutWidth - AndroidUtilities.dp(SharedConfig.bubbleRadius >= 10 ? 27.3f : 25.3f);
    }

    public int getChecksY() {
        float f;
        int intrinsicHeight;
        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
            f = this.drawTimeY;
            intrinsicHeight = getThemedDrawable("drawableMsgStickerCheck").getIntrinsicHeight();
        } else {
            f = this.drawTimeY;
            intrinsicHeight = Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight();
        }
        return (int) (f - intrinsicHeight);
    }

    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
        cancelShakeAnimation();
        if (this.animationRunning) {
            return;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onDetachedFromWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onDetachedFromWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onDetachedFromWindow();
                i++;
            }
        }
        this.attachedToWindow = false;
        this.avatarImage.onDetachedFromWindow();
        checkImageReceiversAttachState();
        if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
            ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
            this.addedForTest = false;
        }
        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellDetached(this);
        }
        this.transitionParams.onDetach();
        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
            Theme.getCurrentAudiVisualizerDrawable().setParentView(null);
        }
        ValueAnimator valueAnimator = this.statusDrawableAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.statusDrawableAnimator.cancel();
        }
        this.reactionsLayoutInBubble.onDetachFromWindow();
        this.statusDrawableAnimationInProgress = false;
        Runnable runnable = this.unregisterFlagSecure;
        if (runnable != null) {
            runnable.run();
            this.unregisterFlagSecure = null;
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton == null) {
            return;
        }
        messageTopicButton.onDetached(this);
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            messageObject.animateComments = false;
        }
        MessageObject messageObject2 = this.messageObjectToSet;
        if (messageObject2 != null) {
            messageObject2.animateComments = false;
            setMessageContent(messageObject2, this.groupedMessagesToSet, this.bottomNearToSet, this.topNearToSet);
            this.messageObjectToSet = null;
            this.groupedMessagesToSet = null;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onAttachedToWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onAttachedToWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onAttachedToWindow();
                i++;
            }
        }
        this.attachedToWindow = true;
        float f = 0.0f;
        this.animationOffsetX = 0.0f;
        this.slidingOffsetX = 0.0f;
        this.checkBoxTranslation = 0;
        updateTranslation();
        this.avatarImage.setParentView((View) getParent());
        this.avatarImage.onAttachedToWindow();
        checkImageReceiversAttachState();
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null) {
            setAvatar(messageObject3);
        }
        int i2 = this.documentAttachType;
        if (i2 == 4 && this.autoPlayingMedia) {
            boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            this.animatingNoSoundPlaying = isPlayingMessage;
            this.animatingNoSoundProgress = isPlayingMessage ? 0.0f : 1.0f;
            this.animatingNoSound = 0;
        } else {
            this.animatingNoSoundPlaying = false;
            this.animatingNoSoundProgress = 0.0f;
            this.animatingDrawVideoImageButtonProgress = ((i2 == 4 || i2 == 2) && this.drawVideoSize) ? 1.0f : 0.0f;
        }
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellAttached(this);
        }
        if (this.documentAttachType == 5) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                f = 1.0f;
            }
            this.toSeekBarProgress = f;
        }
        this.reactionsLayoutInBubble.onAttachToWindow();
        updateFlagSecure();
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null && messageObject4.type == 20 && this.unlockLayout != null) {
            invalidate();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.onAttached(this);
        }
    }

    private void checkImageReceiversAttachState() {
        boolean z = true;
        boolean z2 = this.attachedToWindow && (this.visibleOnScreen || !this.shouldCheckVisibleOnScreen);
        if (z2 == this.imageReceiversAttachState) {
            return;
        }
        this.imageReceiversAttachState = z2;
        if (z2) {
            this.radialProgress.onAttachedToWindow();
            this.videoRadialProgress.onAttachedToWindow();
            if (this.pollAvatarImages != null) {
                int i = 0;
                while (true) {
                    ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                    if (i >= imageReceiverArr.length) {
                        break;
                    }
                    imageReceiverArr[i].onAttachedToWindow();
                    i++;
                }
            }
            if (this.commentAvatarImages != null) {
                int i2 = 0;
                while (true) {
                    ImageReceiver[] imageReceiverArr2 = this.commentAvatarImages;
                    if (i2 >= imageReceiverArr2.length) {
                        break;
                    }
                    imageReceiverArr2[i2].onAttachedToWindow();
                    i2++;
                }
            }
            this.replyImageReceiver.onAttachedToWindow();
            this.locationImageReceiver.onAttachedToWindow();
            this.blurredPhotoImage.onAttachedToWindow();
            if (this.photoImage.onAttachedToWindow()) {
                if (this.drawPhotoImage) {
                    updateButtonState(false, false, false);
                }
            } else {
                updateButtonState(false, false, false);
            }
            MessageObject messageObject = this.currentMessageObject;
            TLRPC$PhotoSize tLRPC$PhotoSize = null;
            if (messageObject != null && (this.isRoundVideo || messageObject.isVideo())) {
                checkVideoPlayback(true, null);
            }
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && !messageObject2.mediaExists) {
                int canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject.messageOwner);
                TLRPC$Document document = this.currentMessageObject.getDocument();
                if (!(MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document, true) || MessageObject.isGifDocument(document) || MessageObject.isRoundVideoDocument(document))) {
                    if (document == null) {
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(this.currentMessageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                    }
                    int i3 = 2;
                    if (canDownloadMedia == 2 || (canDownloadMedia == 1 && this.currentMessageObject.isVideo())) {
                        if (document != null && !this.currentMessageObject.shouldEncryptPhotoOrVideo() && this.currentMessageObject.canStreamVideo()) {
                            FileLoader.getInstance(this.currentAccount).loadFile(document, this.currentMessageObject, 1, 10);
                        }
                    } else if (canDownloadMedia != 0) {
                        if (document != null) {
                            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                            MessageObject messageObject3 = this.currentMessageObject;
                            if (!MessageObject.isVideoDocument(document) || !this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
                                i3 = 0;
                            }
                            fileLoader.loadFile(document, messageObject3, 1, i3);
                        } else if (tLRPC$PhotoSize != null) {
                            FileLoader fileLoader2 = FileLoader.getInstance(this.currentAccount);
                            ImageLocation forObject = ImageLocation.getForObject(tLRPC$PhotoSize, this.currentMessageObject.photoThumbsObject);
                            MessageObject messageObject4 = this.currentMessageObject;
                            fileLoader2.loadFile(forObject, messageObject4, null, 1, messageObject4.shouldEncryptPhotoOrVideo() ? 2 : 0);
                        }
                    }
                    updateButtonState(false, false, false);
                }
            }
            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
            this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
            updateAnimatedEmojis();
            return;
        }
        this.radialProgress.onDetachedFromWindow();
        this.videoRadialProgress.onDetachedFromWindow();
        if (this.pollAvatarImages != null) {
            int i4 = 0;
            while (true) {
                ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                if (i4 >= imageReceiverArr3.length) {
                    break;
                }
                imageReceiverArr3[i4].onDetachedFromWindow();
                i4++;
            }
        }
        if (this.commentAvatarImages != null) {
            int i5 = 0;
            while (true) {
                ImageReceiver[] imageReceiverArr4 = this.commentAvatarImages;
                if (i5 >= imageReceiverArr4.length) {
                    break;
                }
                imageReceiverArr4[i5].onDetachedFromWindow();
                i5++;
            }
        }
        this.replyImageReceiver.onDetachedFromWindow();
        this.locationImageReceiver.onDetachedFromWindow();
        this.photoImage.onDetachedFromWindow();
        this.blurredPhotoImage.onDetachedFromWindow();
        MessageObject messageObject5 = this.currentMessageObject;
        if (messageObject5 != null && !messageObject5.mediaExists && !messageObject5.putInDownloadsStore && !DownloadController.getInstance(this.currentAccount).isDownloading(this.currentMessageObject.messageOwner.id)) {
            TLRPC$Document document2 = this.currentMessageObject.getDocument();
            if (!MessageObject.isStickerDocument(document2) && !MessageObject.isAnimatedStickerDocument(document2, true) && !MessageObject.isGifDocument(document2) && !MessageObject.isRoundVideoDocument(document2)) {
                z = false;
            }
            if (!z) {
                if (document2 != null) {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(document2);
                } else {
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(this.currentMessageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                    if (closestPhotoSizeWithSize != null) {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile(closestPhotoSizeWithSize);
                    }
                }
            }
        }
        AnimatedEmojiSpan.release(this, this.animatedEmojiDescriptionStack);
        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
        AnimatedEmojiSpan.release(this, this.animatedEmojiStack);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(17:1014|1015|1016|1017|(1:1019)(1:1062)|(2:1020|1021)|1022|1023|(1:1025)(1:1056)|1026|(4:1029|(2:1031|1032)(2:1034|(2:1036|1037)(2:1038|1039))|1033|1027)|1040|(1:1042)(1:1054)|1043|(1:1053)|1048|(2:1050|(1:1052))) */
    /* JADX WARN: Can't wrap try/catch for region: R(40:(2:1522|1523)(5:1557|1558|(1:(2:1571|1572)(3:1560|1561|(1:1563)(1:1564)))|1566|(1:1568)(1:1569))|1524|(23:1549|1550|581|(4:1471|(1:1473)(1:1513)|1474|(8:1476|(2:1478|(1:1480)(1:1511))(1:1512)|1481|(1:1483)(1:1510)|1484|(1:1490)|1491|(2:1493|(3:1497|(2:1499|(1:1501))|1502)(1:(4:1504|(1:1506)|1507|(1:1509))))))|583|584|(3:1467|(1:1469)|1470)|588|(2:590|(1:592))|593|(3:1451|(2:1459|(1:1461))(1:1453)|1454)(3:595|596|(2:600|(1:602)(1:1442)))|603|(1:609)(1:1441)|610|(1:1440)(1:612)|613|(1:618)|619|(7:1411|(2:1413|(1:1415))|1417|(2:1427|(1:1429)(5:1430|(1:1434)(1:1436)|1435|623|(4:625|(2:627|(3:629|(3:633|(3:638|(1:640)(1:1256)|641)(4:(1:1260)|1261|(1:1263)(1:1265)|1264)|642)(7:1266|(2:1268|(1:1270)(1:1357))(1:1358)|1271|(1:1275)(1:1356)|1276|(2:1281|(4:1308|1309|(1:1311)|(5:1318|(1:1320)|1321|(1:1323)(1:1325)|1324)(2:1326|(1:1331)(1:1332)))(2:1283|(1:(5:1290|(1:1292)|1293|(1:1295)(1:1298)|1296)(1:1299))(3:1300|(1:1302)(1:1304)|1303)))(3:1339|(1:1345)(2:(1:1350)|1351)|1346)|1297)|643)(2:1359|(2:1361|(1:1363)(3:1365|(1:1367)(1:1391)|(2:1381|(1:1385)(3:1386|(1:1388)(1:1390)|1389))(4:1369|1370|(1:1372)(1:1374)|1373)))(1:1392)))(3:1393|(1:1395)(1:1397)|1396)|1364|643)(3:1398|(1:1404)(3:1405|(2:(1:1409)|1410)|1364)|643)))|622|623|(0)(0))|621|622|623|(0)(0))|1527|1528|1529|(32:1544|1535|1536|581|(0)|583|584|(1:586)(4:1462|1467|(0)|1470)|588|(0)|593|(18:1451|(19:1455|1457|1459|(0)|1454|603|(14:605|607|609|610|(10:1438|1440|613|(2:616|618)|619|(0)|621|622|623|(0)(0))|612|613|(0)|619|(0)|621|622|623|(0)(0))|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0))|1453|1454|603|(0)|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0))|595|596|(17:598|600|(0)(0)|603|(0)|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0))|1443|600|(0)(0)|603|(0)|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0))|1532|(31:1539|1540|581|(0)|583|584|(0)(0)|588|(0)|593|(0)|595|596|(0)|1443|600|(0)(0)|603|(0)|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0))|1535|1536|581|(0)|583|584|(0)(0)|588|(0)|593|(0)|595|596|(0)|1443|600|(0)(0)|603|(0)|1441|610|(0)|612|613|(0)|619|(0)|621|622|623|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(6:(3:(8:(1:3940)(1:3942)|3941|3911|3912|3913|3914|3915|3916)(1:3909)|3915|3916)|3910|3911|3912|3913|3914) */
    /* JADX WARN: Can't wrap try/catch for region: R(7:(3:(9:(1:4017)(1:4019)|4018|3992|3993|3994|3995|3996|3997|3998)(1:3990)|3997|3998)|3991|3992|3993|3994|3995|3996) */
    /* JADX WARN: Code restructure failed: missing block: B:1057:0x5a06, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1058:0x5a07, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:1416:0x12ec, code lost:
        if (r2.revealingMediaSpoilers != false) goto L1417;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1545:0x1014, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1565:0x0f88, code lost:
        r75.captionWidth = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1703:0x18b1, code lost:
        if ((r13.flags & 2) == 0) goto L1659;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2162:0x223e, code lost:
        if (r2 >= (r75.timeWidth + org.telegram.messenger.AndroidUtilities.dp(20 + (!r76.isOutOwner() ? 0 : 20)))) goto L2163;
     */
    /* JADX WARN: Code restructure failed: missing block: B:2746:0x32ef, code lost:
        if (r13.messageOwner.fwd_from.from_id != null) goto L2698;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3409:0x5248, code lost:
        if (r2.revealingMediaSpoilers != false) goto L3410;
     */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x0095, code lost:
        if (r75.isPlayingRound == (org.telegram.messenger.MediaController.getInstance().isPlayingMessage(r75.currentMessageObject) && (r7 = r75.delegate) != null && !r7.keyboardIsOpened())) goto L36;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3937:0x44b7, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3938:0x44b8, code lost:
        r36 = r13;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3943:0x4499, code lost:
        if (r75.isSmallImage != false) goto L3910;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4014:0x4360, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4015:0x4361, code lost:
        r44 = r3;
        r43 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4020:0x433f, code lost:
        if (r75.isSmallImage != false) goto L3991;
     */
    /* JADX WARN: Code restructure failed: missing block: B:571:0x0d95, code lost:
        if (r2.isSmall != false) goto L1577;
     */
    /* JADX WARN: Code restructure failed: missing block: B:984:0x6049, code lost:
        if (r6.button.url.startsWith("tg://resolve") != false) goto L970;
     */
    /* JADX WARN: Multi-variable search skipped. Vars limit reached: 7482 (expected less than 5000) */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1005:0x5b4b  */
    /* JADX WARN: Removed duplicated region for block: B:1007:0x5ae5  */
    /* JADX WARN: Removed duplicated region for block: B:1008:0x5ac4  */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0196  */
    /* JADX WARN: Removed duplicated region for block: B:1010:0x5909  */
    /* JADX WARN: Removed duplicated region for block: B:1019:0x596c  */
    /* JADX WARN: Removed duplicated region for block: B:1025:0x5995  */
    /* JADX WARN: Removed duplicated region for block: B:1029:0x59e4 A[Catch: Exception -> 0x5a06, TryCatch #38 {Exception -> 0x5a06, blocks: (B:1023:0x598f, B:1026:0x599f, B:1027:0x59d6, B:1054:0x59e1, B:1029:0x59e4, B:1034:0x59f4, B:1036:0x59f8, B:1038:0x5a00, B:1056:0x5996), top: B:1022:0x598f }] */
    /* JADX WARN: Removed duplicated region for block: B:1042:0x59e0  */
    /* JADX WARN: Removed duplicated region for block: B:1045:0x5a10 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:104:0x01a0  */
    /* JADX WARN: Removed duplicated region for block: B:1050:0x5a31  */
    /* JADX WARN: Removed duplicated region for block: B:1054:0x59e1 A[Catch: Exception -> 0x5a06, TryCatch #38 {Exception -> 0x5a06, blocks: (B:1023:0x598f, B:1026:0x599f, B:1027:0x59d6, B:1054:0x59e1, B:1029:0x59e4, B:1034:0x59f4, B:1036:0x59f8, B:1038:0x5a00, B:1056:0x5996), top: B:1022:0x598f }] */
    /* JADX WARN: Removed duplicated region for block: B:1056:0x5996 A[Catch: Exception -> 0x5a06, TryCatch #38 {Exception -> 0x5a06, blocks: (B:1023:0x598f, B:1026:0x599f, B:1027:0x59d6, B:1054:0x59e1, B:1029:0x59e4, B:1034:0x59f4, B:1036:0x59f8, B:1038:0x5a00, B:1056:0x5996), top: B:1022:0x598f }] */
    /* JADX WARN: Removed duplicated region for block: B:1062:0x596e  */
    /* JADX WARN: Removed duplicated region for block: B:1090:0x582f  */
    /* JADX WARN: Removed duplicated region for block: B:1092:0x585b  */
    /* JADX WARN: Removed duplicated region for block: B:1093:0x585d A[Catch: Exception -> 0x58e3, TryCatch #10 {Exception -> 0x58e3, blocks: (B:1082:0x57e3, B:1085:0x5816, B:1088:0x5828, B:1093:0x585d, B:1096:0x586a, B:1099:0x5885, B:1102:0x5891, B:1105:0x58a1, B:1110:0x58b8, B:1112:0x58c7, B:1114:0x589b, B:1115:0x588a, B:1118:0x587f, B:1121:0x5862, B:1122:0x5831, B:1123:0x5822, B:1125:0x583d, B:1126:0x57ea, B:1129:0x57ef, B:1130:0x5806, B:1140:0x580e, B:1132:0x58d3), top: B:1081:0x57e3 }] */
    /* JADX WARN: Removed duplicated region for block: B:1122:0x5831 A[Catch: Exception -> 0x58e3, TryCatch #10 {Exception -> 0x58e3, blocks: (B:1082:0x57e3, B:1085:0x5816, B:1088:0x5828, B:1093:0x585d, B:1096:0x586a, B:1099:0x5885, B:1102:0x5891, B:1105:0x58a1, B:1110:0x58b8, B:1112:0x58c7, B:1114:0x589b, B:1115:0x588a, B:1118:0x587f, B:1121:0x5862, B:1122:0x5831, B:1123:0x5822, B:1125:0x583d, B:1126:0x57ea, B:1129:0x57ef, B:1130:0x5806, B:1140:0x580e, B:1132:0x58d3), top: B:1081:0x57e3 }] */
    /* JADX WARN: Removed duplicated region for block: B:1132:0x58d3 A[Catch: Exception -> 0x58e3, TRY_LEAVE, TryCatch #10 {Exception -> 0x58e3, blocks: (B:1082:0x57e3, B:1085:0x5816, B:1088:0x5828, B:1093:0x585d, B:1096:0x586a, B:1099:0x5885, B:1102:0x5891, B:1105:0x58a1, B:1110:0x58b8, B:1112:0x58c7, B:1114:0x589b, B:1115:0x588a, B:1118:0x587f, B:1121:0x5862, B:1122:0x5831, B:1123:0x5822, B:1125:0x583d, B:1126:0x57ea, B:1129:0x57ef, B:1130:0x5806, B:1140:0x580e, B:1132:0x58d3), top: B:1081:0x57e3 }] */
    /* JADX WARN: Removed duplicated region for block: B:1177:0x576e  */
    /* JADX WARN: Removed duplicated region for block: B:1182:0x5787 A[Catch: Exception -> 0x57cb, TryCatch #28 {Exception -> 0x57cb, blocks: (B:1180:0x5774, B:1182:0x5787, B:1184:0x57c4, B:1186:0x57a2), top: B:1179:0x5774 }] */
    /* JADX WARN: Removed duplicated region for block: B:1186:0x57a2 A[Catch: Exception -> 0x57cb, TryCatch #28 {Exception -> 0x57cb, blocks: (B:1180:0x5774, B:1182:0x5787, B:1184:0x57c4, B:1186:0x57a2), top: B:1179:0x5774 }] */
    /* JADX WARN: Removed duplicated region for block: B:1189:0x5770  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x01c9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1213:0x29fa  */
    /* JADX WARN: Removed duplicated region for block: B:1233:0x29d3  */
    /* JADX WARN: Removed duplicated region for block: B:1236:0x2995  */
    /* JADX WARN: Removed duplicated region for block: B:1249:0x28ef  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x020e  */
    /* JADX WARN: Removed duplicated region for block: B:1398:0x1797  */
    /* JADX WARN: Removed duplicated region for block: B:1411:0x12da  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x0223  */
    /* JADX WARN: Removed duplicated region for block: B:1437:0x12b8 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1442:0x1277  */
    /* JADX WARN: Removed duplicated region for block: B:1449:0x119d A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1461:0x120d  */
    /* JADX WARN: Removed duplicated region for block: B:1462:0x1148  */
    /* JADX WARN: Removed duplicated region for block: B:1469:0x1161  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x020c A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1471:0x1029  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x023c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1514:0x0efc A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:152:0x0247  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:1579:0x0dbe  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x0249  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x0263 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1644:0x1978  */
    /* JADX WARN: Removed duplicated region for block: B:1648:0x1981  */
    /* JADX WARN: Removed duplicated region for block: B:1649:0x1985  */
    /* JADX WARN: Removed duplicated region for block: B:1667:0x1929  */
    /* JADX WARN: Removed duplicated region for block: B:1678:0x1952  */
    /* JADX WARN: Removed duplicated region for block: B:1681:0x1961  */
    /* JADX WARN: Removed duplicated region for block: B:1694:0x190c  */
    /* JADX WARN: Removed duplicated region for block: B:1695:0x1913  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x5d6d  */
    /* JADX WARN: Removed duplicated region for block: B:1751:0x0d39  */
    /* JADX WARN: Removed duplicated region for block: B:1760:0x0cf6  */
    /* JADX WARN: Removed duplicated region for block: B:1761:0x0cec  */
    /* JADX WARN: Removed duplicated region for block: B:1762:0x0c8e  */
    /* JADX WARN: Removed duplicated region for block: B:1779:0x0bef  */
    /* JADX WARN: Removed duplicated region for block: B:1820:0x0b52  */
    /* JADX WARN: Removed duplicated region for block: B:1830:0x0a6b  */
    /* JADX WARN: Removed duplicated region for block: B:1881:0x1bc4  */
    /* JADX WARN: Removed duplicated region for block: B:1884:0x1bdb  */
    /* JADX WARN: Removed duplicated region for block: B:1895:0x1d76  */
    /* JADX WARN: Removed duplicated region for block: B:1900:0x1d8a  */
    /* JADX WARN: Removed duplicated region for block: B:1903:0x1e9c  */
    /* JADX WARN: Removed duplicated region for block: B:1906:0x1ef1  */
    /* JADX WARN: Removed duplicated region for block: B:1909:0x1f08  */
    /* JADX WARN: Removed duplicated region for block: B:1917:0x1ea0  */
    /* JADX WARN: Removed duplicated region for block: B:1928:0x1d9c  */
    /* JADX WARN: Removed duplicated region for block: B:192:0x5dc3  */
    /* JADX WARN: Removed duplicated region for block: B:1993:0x1ce5  */
    /* JADX WARN: Removed duplicated region for block: B:2005:0x1bc7  */
    /* JADX WARN: Removed duplicated region for block: B:2063:0x2026  */
    /* JADX WARN: Removed duplicated region for block: B:2077:0x2463  */
    /* JADX WARN: Removed duplicated region for block: B:2080:0x248d  */
    /* JADX WARN: Removed duplicated region for block: B:2087:0x24b6  */
    /* JADX WARN: Removed duplicated region for block: B:2091:0x24d1  */
    /* JADX WARN: Removed duplicated region for block: B:2093:0x24d4  */
    /* JADX WARN: Removed duplicated region for block: B:2096:0x24ee  */
    /* JADX WARN: Removed duplicated region for block: B:2107:0x2559  */
    /* JADX WARN: Removed duplicated region for block: B:2111:0x258e  */
    /* JADX WARN: Removed duplicated region for block: B:2124:0x2544  */
    /* JADX WARN: Removed duplicated region for block: B:2125:0x246f  */
    /* JADX WARN: Removed duplicated region for block: B:212:0x5dfb  */
    /* JADX WARN: Removed duplicated region for block: B:2176:0x2253  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x5e0d  */
    /* JADX WARN: Removed duplicated region for block: B:226:0x5e43  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x02a9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:244:0x02de  */
    /* JADX WARN: Removed duplicated region for block: B:255:0x02fb  */
    /* JADX WARN: Removed duplicated region for block: B:263:0x031c  */
    /* JADX WARN: Removed duplicated region for block: B:2701:0x3308  */
    /* JADX WARN: Removed duplicated region for block: B:2707:0x3359  */
    /* JADX WARN: Removed duplicated region for block: B:2713:0x3371  */
    /* JADX WARN: Removed duplicated region for block: B:2716:0x3391  */
    /* JADX WARN: Removed duplicated region for block: B:2719:0x33a1  */
    /* JADX WARN: Removed duplicated region for block: B:2722:0x33b4  */
    /* JADX WARN: Removed duplicated region for block: B:2737:0x3325  */
    /* JADX WARN: Removed duplicated region for block: B:274:0x0371  */
    /* JADX WARN: Removed duplicated region for block: B:277:0x0385  */
    /* JADX WARN: Removed duplicated region for block: B:2826:0x3641  */
    /* JADX WARN: Removed duplicated region for block: B:2832:0x365c  */
    /* JADX WARN: Removed duplicated region for block: B:2838:0x36a9  */
    /* JADX WARN: Removed duplicated region for block: B:2855:0x376c  */
    /* JADX WARN: Removed duplicated region for block: B:2858:0x377b  */
    /* JADX WARN: Removed duplicated region for block: B:2865:0x37b9  */
    /* JADX WARN: Removed duplicated region for block: B:2869:0x37f5  */
    /* JADX WARN: Removed duplicated region for block: B:286:0x039d  */
    /* JADX WARN: Removed duplicated region for block: B:2872:0x37af  */
    /* JADX WARN: Removed duplicated region for block: B:2882:0x36a3  */
    /* JADX WARN: Removed duplicated region for block: B:2884:0x364f  */
    /* JADX WARN: Removed duplicated region for block: B:2948:0x39ab  */
    /* JADX WARN: Removed duplicated region for block: B:299:0x03c3  */
    /* JADX WARN: Removed duplicated region for block: B:3047:0x3ed7  */
    /* JADX WARN: Removed duplicated region for block: B:3053:0x3ee7  */
    /* JADX WARN: Removed duplicated region for block: B:3059:0x3f30  */
    /* JADX WARN: Removed duplicated region for block: B:3066:0x3f6c  */
    /* JADX WARN: Removed duplicated region for block: B:3071:0x3f8e  */
    /* JADX WARN: Removed duplicated region for block: B:3079:0x3fb9  */
    /* JADX WARN: Removed duplicated region for block: B:3082:0x3fdd  */
    /* JADX WARN: Removed duplicated region for block: B:3085:0x3ff0  */
    /* JADX WARN: Removed duplicated region for block: B:308:0x03dc  */
    /* JADX WARN: Removed duplicated region for block: B:3090:0x4001  */
    /* JADX WARN: Removed duplicated region for block: B:3096:0x401c  */
    /* JADX WARN: Removed duplicated region for block: B:3101:0x403e  */
    /* JADX WARN: Removed duplicated region for block: B:3105:0x4073  */
    /* JADX WARN: Removed duplicated region for block: B:3108:0x4088  */
    /* JADX WARN: Removed duplicated region for block: B:3116:0x4213  */
    /* JADX WARN: Removed duplicated region for block: B:3125:0x424d  */
    /* JADX WARN: Removed duplicated region for block: B:3128:0x425e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3131:0x4267  */
    /* JADX WARN: Removed duplicated region for block: B:3133:0x43e3  */
    /* JADX WARN: Removed duplicated region for block: B:3135:0x4511 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3139:0x451a  */
    /* JADX WARN: Removed duplicated region for block: B:3148:0x4547 A[Catch: Exception -> 0x45c9, TRY_ENTER, TryCatch #23 {Exception -> 0x45c9, blocks: (B:3137:0x4516, B:3148:0x4547, B:3151:0x4568, B:3152:0x457d, B:3154:0x45a5, B:3871:0x45b4, B:3874:0x454e, B:3880:0x451b), top: B:3136:0x4516 }] */
    /* JADX WARN: Removed duplicated region for block: B:3154:0x45a5 A[Catch: Exception -> 0x45c9, TryCatch #23 {Exception -> 0x45c9, blocks: (B:3137:0x4516, B:3148:0x4547, B:3151:0x4568, B:3152:0x457d, B:3154:0x45a5, B:3871:0x45b4, B:3874:0x454e, B:3880:0x451b), top: B:3136:0x4516 }] */
    /* JADX WARN: Removed duplicated region for block: B:315:0x0494  */
    /* JADX WARN: Removed duplicated region for block: B:3161:0x475a  */
    /* JADX WARN: Removed duplicated region for block: B:3167:0x476c  */
    /* JADX WARN: Removed duplicated region for block: B:3169:0x4770  */
    /* JADX WARN: Removed duplicated region for block: B:3177:0x4d2d  */
    /* JADX WARN: Removed duplicated region for block: B:3190:0x4d62  */
    /* JADX WARN: Removed duplicated region for block: B:3194:0x5556  */
    /* JADX WARN: Removed duplicated region for block: B:3200:0x564f  */
    /* JADX WARN: Removed duplicated region for block: B:3203:0x5559  */
    /* JADX WARN: Removed duplicated region for block: B:321:0x0514 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:3226:0x4dd1  */
    /* JADX WARN: Removed duplicated region for block: B:3229:0x4de5  */
    /* JADX WARN: Removed duplicated region for block: B:3236:0x4e2f  */
    /* JADX WARN: Removed duplicated region for block: B:3241:0x4e40  */
    /* JADX WARN: Removed duplicated region for block: B:3244:0x4e51  */
    /* JADX WARN: Removed duplicated region for block: B:3248:0x4e68  */
    /* JADX WARN: Removed duplicated region for block: B:3250:0x4e76  */
    /* JADX WARN: Removed duplicated region for block: B:3258:0x4e89  */
    /* JADX WARN: Removed duplicated region for block: B:3269:0x4ecb  */
    /* JADX WARN: Removed duplicated region for block: B:3273:0x4ee1  */
    /* JADX WARN: Removed duplicated region for block: B:3276:0x4efa  */
    /* JADX WARN: Removed duplicated region for block: B:3279:0x4f43  */
    /* JADX WARN: Removed duplicated region for block: B:3282:0x4f87  */
    /* JADX WARN: Removed duplicated region for block: B:3287:0x4fe5  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x057e  */
    /* JADX WARN: Removed duplicated region for block: B:3307:0x545e  */
    /* JADX WARN: Removed duplicated region for block: B:3313:0x54ad  */
    /* JADX WARN: Removed duplicated region for block: B:3320:0x54be A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:3329:0x54f8  */
    /* JADX WARN: Removed duplicated region for block: B:333:0x058e  */
    /* JADX WARN: Removed duplicated region for block: B:3341:0x5477  */
    /* JADX WARN: Removed duplicated region for block: B:336:0x059a A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:343:0x05e4  */
    /* JADX WARN: Removed duplicated region for block: B:3459:0x542e  */
    /* JADX WARN: Removed duplicated region for block: B:3461:0x4f55  */
    /* JADX WARN: Removed duplicated region for block: B:3467:0x4ed9  */
    /* JADX WARN: Removed duplicated region for block: B:3469:0x4e9c  */
    /* JADX WARN: Removed duplicated region for block: B:3474:0x4f0b  */
    /* JADX WARN: Removed duplicated region for block: B:347:0x0668  */
    /* JADX WARN: Removed duplicated region for block: B:3484:0x4e59  */
    /* JADX WARN: Removed duplicated region for block: B:3487:0x4e42  */
    /* JADX WARN: Removed duplicated region for block: B:3502:0x4e24  */
    /* JADX WARN: Removed duplicated region for block: B:3532:0x47c9  */
    /* JADX WARN: Removed duplicated region for block: B:3535:0x47d8  */
    /* JADX WARN: Removed duplicated region for block: B:3538:0x47e3  */
    /* JADX WARN: Removed duplicated region for block: B:3541:0x47f7  */
    /* JADX WARN: Removed duplicated region for block: B:3543:0x47e6  */
    /* JADX WARN: Removed duplicated region for block: B:3544:0x47da  */
    /* JADX WARN: Removed duplicated region for block: B:3545:0x47cb  */
    /* JADX WARN: Removed duplicated region for block: B:3550:0x47ff  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x0685  */
    /* JADX WARN: Removed duplicated region for block: B:361:0x06ae A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:370:0x08ec  */
    /* JADX WARN: Removed duplicated region for block: B:3758:0x45d4  */
    /* JADX WARN: Removed duplicated region for block: B:3771:0x4619  */
    /* JADX WARN: Removed duplicated region for block: B:3776:0x4726  */
    /* JADX WARN: Removed duplicated region for block: B:3798:0x469b A[Catch: Exception -> 0x4721, TryCatch #9 {Exception -> 0x4721, blocks: (B:3796:0x4691, B:3798:0x469b, B:3844:0x46aa, B:3847:0x46af), top: B:3795:0x4691 }] */
    /* JADX WARN: Removed duplicated region for block: B:3823:0x46f8  */
    /* JADX WARN: Removed duplicated region for block: B:3854:0x461c  */
    /* JADX WARN: Removed duplicated region for block: B:3860:0x4644  */
    /* JADX WARN: Removed duplicated region for block: B:3862:0x4647  */
    /* JADX WARN: Removed duplicated region for block: B:3871:0x45b4 A[Catch: Exception -> 0x45c9, TRY_LEAVE, TryCatch #23 {Exception -> 0x45c9, blocks: (B:3137:0x4516, B:3148:0x4547, B:3151:0x4568, B:3152:0x457d, B:3154:0x45a5, B:3871:0x45b4, B:3874:0x454e, B:3880:0x451b), top: B:3136:0x4516 }] */
    /* JADX WARN: Removed duplicated region for block: B:3880:0x451b A[Catch: Exception -> 0x45c9, TRY_LEAVE, TryCatch #23 {Exception -> 0x45c9, blocks: (B:3137:0x4516, B:3148:0x4547, B:3151:0x4568, B:3152:0x457d, B:3154:0x45a5, B:3871:0x45b4, B:3874:0x454e, B:3880:0x451b), top: B:3136:0x4516 }] */
    /* JADX WARN: Removed duplicated region for block: B:3884:0x43e6  */
    /* JADX WARN: Removed duplicated region for block: B:3932:0x44ff  */
    /* JADX WARN: Removed duplicated region for block: B:3964:0x4276 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:4056:0x4253  */
    /* JADX WARN: Removed duplicated region for block: B:4061:0x4240  */
    /* JADX WARN: Removed duplicated region for block: B:4068:0x40f0  */
    /* JADX WARN: Removed duplicated region for block: B:4076:0x4121 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4080:0x4134  */
    /* JADX WARN: Removed duplicated region for block: B:4087:0x4175  */
    /* JADX WARN: Removed duplicated region for block: B:4105:0x41c2  */
    /* JADX WARN: Removed duplicated region for block: B:4121:0x41eb A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4129:0x414b A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4132:0x415d  */
    /* JADX WARN: Removed duplicated region for block: B:4133:0x4137  */
    /* JADX WARN: Removed duplicated region for block: B:4136:0x4123  */
    /* JADX WARN: Removed duplicated region for block: B:4146:0x4056  */
    /* JADX WARN: Removed duplicated region for block: B:4178:0x3cb6 A[Catch: Exception -> 0x3ecd, TryCatch #29 {Exception -> 0x3ecd, blocks: (B:4178:0x3cb6, B:4181:0x3cbe, B:4184:0x3cc7, B:4187:0x3cfd, B:4190:0x3d26, B:4193:0x3d4d, B:4194:0x3d2f, B:4197:0x3d3c, B:4198:0x3d06, B:4201:0x3d13, B:4202:0x3ce0, B:4205:0x3cec, B:4206:0x3d75, B:4209:0x3db2, B:4212:0x3ddb, B:4215:0x3e02, B:4217:0x3e09, B:4218:0x3e15, B:4219:0x3e10, B:4220:0x3de4, B:4223:0x3df1, B:4224:0x3dbb, B:4227:0x3dc8, B:4228:0x3d8f, B:4231:0x3d9b, B:4240:0x3cb2), top: B:4239:0x3cb2 }] */
    /* JADX WARN: Removed duplicated region for block: B:4206:0x3d75 A[Catch: Exception -> 0x3ecd, TryCatch #29 {Exception -> 0x3ecd, blocks: (B:4178:0x3cb6, B:4181:0x3cbe, B:4184:0x3cc7, B:4187:0x3cfd, B:4190:0x3d26, B:4193:0x3d4d, B:4194:0x3d2f, B:4197:0x3d3c, B:4198:0x3d06, B:4201:0x3d13, B:4202:0x3ce0, B:4205:0x3cec, B:4206:0x3d75, B:4209:0x3db2, B:4212:0x3ddb, B:4215:0x3e02, B:4217:0x3e09, B:4218:0x3e15, B:4219:0x3e10, B:4220:0x3de4, B:4223:0x3df1, B:4224:0x3dbb, B:4227:0x3dc8, B:4228:0x3d8f, B:4231:0x3d9b, B:4240:0x3cb2), top: B:4239:0x3cb2 }] */
    /* JADX WARN: Removed duplicated region for block: B:4293:0x06dd  */
    /* JADX WARN: Removed duplicated region for block: B:4297:0x0736  */
    /* JADX WARN: Removed duplicated region for block: B:4300:0x0747  */
    /* JADX WARN: Removed duplicated region for block: B:4325:0x080e  */
    /* JADX WARN: Removed duplicated region for block: B:4329:0x0848  */
    /* JADX WARN: Removed duplicated region for block: B:4332:0x084b  */
    /* JADX WARN: Removed duplicated region for block: B:4334:0x082f  */
    /* JADX WARN: Removed duplicated region for block: B:4343:0x089b  */
    /* JADX WARN: Removed duplicated region for block: B:4345:0x088f  */
    /* JADX WARN: Removed duplicated region for block: B:4349:0x08a7  */
    /* JADX WARN: Removed duplicated region for block: B:4351:0x08ae  */
    /* JADX WARN: Removed duplicated region for block: B:4364:0x0855  */
    /* JADX WARN: Removed duplicated region for block: B:4371:0x0728  */
    /* JADX WARN: Removed duplicated region for block: B:4373:0x072a  */
    /* JADX WARN: Removed duplicated region for block: B:4374:0x06e9 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4383:0x05fb  */
    /* JADX WARN: Removed duplicated region for block: B:4385:0x0601  */
    /* JADX WARN: Removed duplicated region for block: B:4394:0x0620  */
    /* JADX WARN: Removed duplicated region for block: B:4410:0x0649  */
    /* JADX WARN: Removed duplicated region for block: B:4411:0x0651  */
    /* JADX WARN: Removed duplicated region for block: B:4416:0x05fd  */
    /* JADX WARN: Removed duplicated region for block: B:4417:0x05d2  */
    /* JADX WARN: Removed duplicated region for block: B:4425:0x0529  */
    /* JADX WARN: Removed duplicated region for block: B:4431:0x04bf  */
    /* JADX WARN: Removed duplicated region for block: B:4436:0x606d  */
    /* JADX WARN: Removed duplicated region for block: B:4442:0x04bd A[EDGE_INSN: B:4442:0x04bd->B:318:0x04bd ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:4443:0x0404  */
    /* JADX WARN: Removed duplicated region for block: B:4458:0x042c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:4470:0x03e0  */
    /* JADX WARN: Removed duplicated region for block: B:4474:0x0373  */
    /* JADX WARN: Removed duplicated region for block: B:4479:0x02b7  */
    /* JADX WARN: Removed duplicated region for block: B:4483:0x02d7  */
    /* JADX WARN: Removed duplicated region for block: B:4486:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:4489:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:455:0x0a60  */
    /* JADX WARN: Removed duplicated region for block: B:467:0x0aab  */
    /* JADX WARN: Removed duplicated region for block: B:471:0x0ade  */
    /* JADX WARN: Removed duplicated region for block: B:474:0x0ae8  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x0b68  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00e5  */
    /* JADX WARN: Removed duplicated region for block: B:491:0x0b7b  */
    /* JADX WARN: Removed duplicated region for block: B:500:0x0b96  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00eb  */
    /* JADX WARN: Removed duplicated region for block: B:513:0x0bc7  */
    /* JADX WARN: Removed duplicated region for block: B:517:0x0bd2 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:519:0x0c3f A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:522:0x0c4f  */
    /* JADX WARN: Removed duplicated region for block: B:527:0x0c6a  */
    /* JADX WARN: Removed duplicated region for block: B:534:0x0c86  */
    /* JADX WARN: Removed duplicated region for block: B:537:0x0cbc  */
    /* JADX WARN: Removed duplicated region for block: B:540:0x0ce9  */
    /* JADX WARN: Removed duplicated region for block: B:543:0x0cf4  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x0d03  */
    /* JADX WARN: Removed duplicated region for block: B:549:0x0d0a  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00fd  */
    /* JADX WARN: Removed duplicated region for block: B:561:0x0d5e  */
    /* JADX WARN: Removed duplicated region for block: B:576:0x0daf  */
    /* JADX WARN: Removed duplicated region for block: B:586:0x1146 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:590:0x117a  */
    /* JADX WARN: Removed duplicated region for block: B:598:0x1245  */
    /* JADX WARN: Removed duplicated region for block: B:602:0x1261  */
    /* JADX WARN: Removed duplicated region for block: B:605:0x12a7  */
    /* JADX WARN: Removed duplicated region for block: B:615:0x12c8 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:625:0x1337  */
    /* JADX WARN: Removed duplicated region for block: B:646:0x288b  */
    /* JADX WARN: Removed duplicated region for block: B:649:0x28a3  */
    /* JADX WARN: Removed duplicated region for block: B:658:0x28d9  */
    /* JADX WARN: Removed duplicated region for block: B:666:0x2914  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x2932  */
    /* JADX WARN: Removed duplicated region for block: B:672:0x2942  */
    /* JADX WARN: Removed duplicated region for block: B:681:0x2970  */
    /* JADX WARN: Removed duplicated region for block: B:684:0x2988  */
    /* JADX WARN: Removed duplicated region for block: B:688:0x29d1  */
    /* JADX WARN: Removed duplicated region for block: B:691:0x29e9  */
    /* JADX WARN: Removed duplicated region for block: B:695:0x29f8  */
    /* JADX WARN: Removed duplicated region for block: B:698:0x2a59  */
    /* JADX WARN: Removed duplicated region for block: B:726:0x2ac8  */
    /* JADX WARN: Removed duplicated region for block: B:732:0x5678  */
    /* JADX WARN: Removed duplicated region for block: B:739:0x58ec  */
    /* JADX WARN: Removed duplicated region for block: B:747:0x5a4c  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0137  */
    /* JADX WARN: Removed duplicated region for block: B:761:0x5a8e  */
    /* JADX WARN: Removed duplicated region for block: B:764:0x5aa0  */
    /* JADX WARN: Removed duplicated region for block: B:772:0x5ac2  */
    /* JADX WARN: Removed duplicated region for block: B:775:0x5ae2  */
    /* JADX WARN: Removed duplicated region for block: B:778:0x5af2  */
    /* JADX WARN: Removed duplicated region for block: B:795:0x5b68  */
    /* JADX WARN: Removed duplicated region for block: B:799:0x5b76  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0146  */
    /* JADX WARN: Removed duplicated region for block: B:806:0x5b94  */
    /* JADX WARN: Removed duplicated region for block: B:811:0x5bd0  */
    /* JADX WARN: Removed duplicated region for block: B:822:0x5c01  */
    /* JADX WARN: Removed duplicated region for block: B:832:0x5c3f  */
    /* JADX WARN: Removed duplicated region for block: B:835:0x5c62  */
    /* JADX WARN: Removed duplicated region for block: B:838:0x5c9f  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0159  */
    /* JADX WARN: Removed duplicated region for block: B:882:0x5d26  */
    /* JADX WARN: Removed duplicated region for block: B:888:0x5d36  */
    /* JADX WARN: Removed duplicated region for block: B:911:0x5c68  */
    /* JADX WARN: Removed duplicated region for block: B:918:0x5c41  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x017f  */
    /* JADX WARN: Removed duplicated region for block: B:922:0x5b9a  */
    /* JADX WARN: Removed duplicated region for block: B:931:0x5bb8  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x5b6a  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x018a  */
    /* JADX WARN: Removed duplicated region for block: B:979:0x602d  */
    /* JADX WARN: Removed duplicated region for block: B:980:0x602e A[Catch: Exception -> 0x6051, TryCatch #19 {Exception -> 0x6051, blocks: (B:957:0x5fd1, B:961:0x604e, B:964:0x5fec, B:967:0x6006, B:971:0x600f, B:974:0x6018, B:977:0x6021, B:980:0x602e, B:983:0x603d, B:985:0x5ff9), top: B:956:0x5fd1 }] */
    /* JADX WARN: Type inference failed for: r0v335, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r0v533, types: [org.telegram.ui.Components.RadialProgress2] */
    /* JADX WARN: Type inference failed for: r0v541, types: [org.telegram.ui.Components.RadialProgress2] */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v172 */
    /* JADX WARN: Type inference failed for: r13v173 */
    /* JADX WARN: Type inference failed for: r13v2 */
    /* JADX WARN: Type inference failed for: r13v3, types: [boolean] */
    /* JADX WARN: Type inference failed for: r15v128 */
    /* JADX WARN: Type inference failed for: r15v36, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r15v37 */
    /* JADX WARN: Type inference failed for: r15v38 */
    /* JADX WARN: Type inference failed for: r15v51 */
    /* JADX WARN: Type inference failed for: r2v1569 */
    /* JADX WARN: Type inference failed for: r2v556 */
    /* JADX WARN: Type inference failed for: r2v557, types: [org.telegram.tgnet.TLRPC$Document, java.lang.Object, org.telegram.tgnet.TLRPC$PhotoSize] */
    /* JADX WARN: Type inference failed for: r2v584 */
    /* JADX WARN: Type inference failed for: r3v1093 */
    /* JADX WARN: Type inference failed for: r3v1094 */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v26, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r3v34 */
    /* JADX WARN: Type inference failed for: r3v47, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r3v826, types: [org.telegram.tgnet.TLRPC$InputStickerSet] */
    /* JADX WARN: Type inference failed for: r4v257, types: [android.text.StaticLayout] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageContent(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        boolean z3;
        boolean z4;
        boolean z5;
        boolean z6;
        int i;
        float f;
        int i2;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessages groupedMessages2;
        boolean z7;
        ?? r3;
        boolean z8;
        TLRPC$Message tLRPC$Message;
        ?? r32;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        int i3;
        Drawable[] drawableArr;
        boolean z9;
        MessageObject.GroupedMessages groupedMessages3;
        boolean isLinkedToChat;
        int i4;
        int minTabletSide;
        int dp;
        int i5;
        TLRPC$Document tLRPC$Document;
        TLRPC$ThemeSettings tLRPC$ThemeSettings;
        TLRPC$Document tLRPC$Document2;
        TLRPC$ThemeSettings tLRPC$ThemeSettings2;
        boolean z10;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        MessageTopicButton messageTopicButton;
        int max;
        int minTabletSide2;
        int dp2;
        String str;
        int i6;
        String str2;
        int i7;
        String str3;
        TLRPC$Document themeDocument;
        TLRPC$Document tLRPC$Document3;
        TLRPC$Photo tLRPC$Photo;
        String str4;
        TLRPC$Photo tLRPC$Photo2;
        int i8;
        String str5;
        TLRPC$Document tLRPC$Document4;
        String str6;
        WebFile webFile;
        boolean z11;
        String str7;
        int i9;
        int i10;
        int i11;
        String string;
        String str8;
        int dp3;
        int i12;
        MessageObject messageObject2;
        String str9;
        String str10;
        WebFile webFile2;
        TLRPC$Photo tLRPC$Photo3;
        TLRPC$Document tLRPC$Document5;
        boolean z12;
        int i13;
        int i14;
        int i15;
        int i16;
        int i17;
        StaticLayout staticLayout;
        int i18;
        int width;
        int i19;
        boolean z13;
        boolean z14;
        int i20;
        boolean z15;
        int i21;
        int i22;
        int width2;
        int i23;
        boolean z16;
        int i24;
        boolean z17;
        int i25;
        int i26;
        int ceil;
        int i27;
        int i28;
        int i29;
        int i30;
        boolean z18;
        MessageObject messageObject3;
        String str11;
        TLRPC$Photo tLRPC$Photo4;
        int i31;
        TLRPC$Document tLRPC$Document6;
        float f2;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i32;
        WebFile webFile3;
        int dp4;
        int i33;
        WebFile webFile4;
        int i34;
        MessageObject messageObject4;
        int i35;
        int i36;
        int i37;
        float f3;
        boolean z19;
        int i38;
        int i39;
        int max2;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        int i40;
        int i41;
        String str12;
        int i42;
        int i43;
        int i44;
        String str13;
        boolean z20;
        long j;
        TLRPC$User user;
        String str14;
        boolean canDownloadMedia;
        int i45;
        boolean z21;
        int i46;
        int i47;
        int i48;
        int i49;
        int i50;
        int i51;
        int i52;
        int i53;
        int minTabletSide3;
        int i54;
        int i55;
        String upperCase;
        int max3;
        int i56;
        boolean z22;
        BitmapDrawable bitmapDrawable;
        int i57;
        String str15;
        String str16;
        int max4;
        int width3;
        WebFile createWithWebDocument;
        boolean z23;
        int i58;
        boolean z24;
        char c;
        int i59;
        int minTabletSide4;
        int dp5;
        TLRPC$Peer tLRPC$Peer;
        ?? r15;
        int i60;
        int minTabletSide5;
        int dp6;
        int i61;
        StaticLayout staticLayout2;
        Float valueOf;
        char c2;
        int i62;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        int i63;
        MessageObject messageObject5;
        float f4;
        int i64;
        int i65;
        boolean z25;
        boolean z26;
        MessageObject.GroupedMessagePosition groupedMessagePosition4;
        ?? r2;
        int dp7;
        int i66;
        int i67;
        MessageObject messageObject6;
        int dp8;
        StringBuilder sb;
        StringBuilder sb2;
        HashMap hashMap;
        int i68;
        BotButton botButton;
        int i69;
        HashMap hashMap2;
        CharSequence ellipsize;
        boolean z27;
        String str17;
        int minTabletSide6;
        TLRPC$User user2;
        MessageObject messageObject7;
        String string2;
        boolean z28;
        CharSequence charSequence;
        String replace;
        ReactionsLayoutInBubble reactionsLayoutInBubble2;
        int dp9;
        ReactionsLayoutInBubble reactionsLayoutInBubble3;
        MessageObject.GroupedMessagePosition groupedMessagePosition5;
        int min;
        boolean z29;
        int min2;
        ReactionsLayoutInBubble reactionsLayoutInBubble4;
        MessageObject.GroupedMessages groupedMessages4;
        boolean z30;
        String string3;
        ArrayList arrayList;
        byte[] isSendingVote;
        String string4;
        PollButton pollButton;
        int i70;
        int i71;
        boolean z31;
        CharSequence ellipsize2;
        int i72;
        double d;
        MessageObject messageObject8;
        float f5;
        int i73;
        int dp10;
        int dp11;
        int i74;
        int i75;
        int i76;
        int i77;
        StaticLayout staticLayout3;
        MessageObject messageObject9;
        MessageObject.GroupedMessages groupedMessages5;
        StaticLayout staticLayout4;
        int dp12;
        char c3;
        boolean z32;
        MessageObject.GroupedMessagePosition groupedMessagePosition6;
        int i78;
        int i79;
        int i80;
        int dp13;
        MessageObject.GroupedMessagePosition groupedMessagePosition7;
        int i81;
        int dp14;
        int dp15;
        int dp16;
        TLRPC$Message tLRPC$Message2;
        int i82;
        int i83;
        Drawable drawable;
        int i84;
        ReactionsLayoutInBubble reactionsLayoutInBubble5;
        int i85;
        float minTabletSide7;
        float f6;
        int dp17;
        MessageObject messageObject10;
        StaticLayout[] staticLayoutArr;
        int i86;
        int i87;
        float minTabletSide8;
        float f7;
        int i88;
        int i89;
        int i90;
        int i91;
        BitmapDrawable bitmapDrawable2;
        String str18;
        SvgHelper.SvgDrawable svgDrawable;
        MessageObject messageObject11;
        int i92;
        int i93;
        ReactionsLayoutInBubble reactionsLayoutInBubble6;
        int i94;
        boolean z33;
        SvgHelper.SvgDrawable svgDrawable2;
        String format;
        int i95;
        boolean z34;
        int i96;
        boolean z35;
        BitmapDrawable bitmapDrawable3;
        int i97;
        int i98;
        TLRPC$PhotoSize tLRPC$PhotoSize3;
        TLRPC$PhotoSize tLRPC$PhotoSize4;
        TLRPC$Document document;
        int i99;
        MessageObject.GroupedMessagePosition groupedMessagePosition8;
        int dp18;
        MessageObject.GroupedMessagePosition groupedMessagePosition9;
        MessageObject.GroupedMessagePosition groupedMessagePosition10;
        float[] fArr;
        int round;
        int dp19;
        int i100;
        int i101;
        int i102;
        boolean z36;
        int i103;
        int i104;
        int i105;
        int i106;
        double ceil2;
        int i107;
        double ceil3;
        int i108;
        int dp20;
        int i109;
        int additionalWidthForPosition;
        CharSequence charSequence2;
        int i110;
        int i111;
        int i112;
        boolean z37;
        boolean z38;
        int i113;
        int i114;
        double d2;
        double ceil4;
        int i115;
        int i116;
        int lineCount;
        int dp21;
        MessageObject messageObject12;
        int measureText;
        int i117;
        ImageLocation forObject;
        StringBuilder sb3;
        Object obj;
        TLRPC$PhotoSize tLRPC$PhotoSize5;
        int i118;
        TLRPC$PhotoSize tLRPC$PhotoSize6;
        int i119;
        Object obj2;
        boolean z39;
        char c4;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        int i120;
        int minTabletSide9;
        boolean z40;
        int minTabletSide10;
        TLRPC$PhotoSize tLRPC$PhotoSize7;
        TLRPC$PhotoSize tLRPC$PhotoSize8;
        int i121;
        int i122;
        int i123;
        int i124;
        int minTabletSide11;
        int i125;
        MessageObject.GroupedMessagePosition groupedMessagePosition11;
        MessageObject.GroupedMessagePosition groupedMessagePosition12;
        int repliesCount;
        String string5;
        int i126;
        AnimatedNumberLayout animatedNumberLayout;
        boolean z41;
        AnimatedNumberLayout animatedNumberLayout2;
        TLRPC$User user3;
        TLRPC$Chat tLRPC$Chat;
        ArrayList<MessageObject.TextLayoutBlock> arrayList3;
        MessageObject.GroupedMessagePosition groupedMessagePosition13;
        boolean z42;
        TLRPC$Message tLRPC$Message3;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        int i127;
        MessageObject.GroupedMessagePosition groupedMessagePosition14;
        TLRPC$Message tLRPC$Message4;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition15;
        MessageObject.GroupedMessagePosition groupedMessagePosition16;
        boolean z43;
        TranscribeButton transcribeButton;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        ArrayList<TLRPC$TL_pollAnswerVoters> arrayList4;
        TLRPC$Poll tLRPC$Poll;
        int i128;
        TLRPC$Poll tLRPC$Poll2;
        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll;
        TLRPC$PollResults tLRPC$PollResults;
        int size;
        int i129;
        TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters;
        int i130;
        String str19;
        MessageObject.GroupedMessagePosition groupedMessagePosition17;
        float[] fArr2;
        MessageObject messageObject13;
        MessageObject messageObject14 = messageObject;
        if (messageObject.checkLayout() || (this.currentPosition != null && this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.currentMessageObject = null;
        }
        ?? r13 = 1;
        r13 = 1;
        r13 = 1;
        boolean z44 = this.lastWidth != getParentWidth();
        this.lastHeight = AndroidUtilities.displaySize.y;
        this.lastWidth = getParentWidth();
        this.isRoundVideo = messageObject.isRoundVideo();
        this.mediaSpoilerRevealProgress = 0.0f;
        TLRPC$Message tLRPC$Message5 = !messageObject.hasValidReplyMessageObject() ? null : messageObject14.replyMessageObject.messageOwner;
        MessageObject messageObject15 = this.currentMessageObject;
        boolean z45 = messageObject15 == null || messageObject15.getId() != messageObject.getId();
        if (this.currentMessageObject == messageObject14 && !messageObject14.forceUpdate) {
            if (this.isRoundVideo) {
            }
            z3 = false;
            MessageObject messageObject16 = this.currentMessageObject;
            z4 = (messageObject16 != null && messageObject16.getId() == messageObject.getId() && this.lastSendState == 3 && messageObject.isSent()) || !((this.currentMessageObject != messageObject14 || (!isUserDataChanged() && !this.photoNotSet)) && this.lastPostAuthor == messageObject14.messageOwner.post_author && this.wasPinned == this.isPinned && tLRPC$Message5 == this.lastReplyMessage);
            z5 = groupedMessages != this.currentMessagesGroup;
            if (!z45 && (messageObject13 = this.currentMessageObject) != null) {
                messageObject14.copyStableParams(messageObject13);
            }
            this.accessibilityText = null;
            if (!this.drawCommentButton || this.useTranscribeButton || (this.drawSideButton == 3 && (((!this.hasDiscussion || !messageObject14.isLinkedToChat(this.linkedChatId)) && !this.isRepliesChat) || ((groupedMessagePosition17 = this.currentPosition) != null && (((fArr2 = groupedMessagePosition17.siblingHeights) != null || (groupedMessagePosition17.flags & 8) == 0) && (fArr2 == null || (groupedMessagePosition17.flags & 4) != 0)))))) {
                z4 = true;
            }
            if (!z3 && messageObject.isDice()) {
                setCurrentDiceValue(this.isUpdating);
            }
            if (!z3 && messageObject.isPoll()) {
                if (MessageObject.getMedia(messageObject14.messageOwner) instanceof TLRPC$TL_messageMediaPoll) {
                    tLRPC$Poll = null;
                    arrayList4 = null;
                    i128 = 0;
                } else {
                    TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll2 = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject14.messageOwner);
                    TLRPC$PollResults tLRPC$PollResults2 = tLRPC$TL_messageMediaPoll2.results;
                    arrayList4 = tLRPC$PollResults2.results;
                    tLRPC$Poll = tLRPC$TL_messageMediaPoll2.poll;
                    i128 = tLRPC$PollResults2.total_voters;
                }
                z6 = (arrayList4 == null || this.lastPollResults == null || i128 == this.lastPollResultsVoters) ? false : true;
                if (!z6 && arrayList4 != this.lastPollResults) {
                    z6 = true;
                }
                tLRPC$Poll2 = this.lastPoll;
                if (tLRPC$Poll2 != tLRPC$Poll && tLRPC$Poll2.closed != tLRPC$Poll.closed) {
                    if (!this.pollVoted) {
                        this.pollVoteInProgress = true;
                        this.vibrateOnPollVote = false;
                    }
                    z6 = true;
                }
                this.animatePollAvatars = false;
                if (z6 && this.attachedToWindow) {
                    this.pollAnimationProgressTime = 0.0f;
                    if (this.pollVoted && !messageObject.isVoted()) {
                        this.pollUnvoteInProgress = true;
                    }
                    int i131 = this.lastPollResultsVoters;
                    this.animatePollAvatars = i131 == 0 || (i131 != 0 && i128 == 0);
                }
                if (!z45 && tLRPC$Poll != null && this.lastPoll.quiz && tLRPC$Poll.quiz && this.currentMessageObject != null && !this.pollVoted && messageObject.isVoted() && (tLRPC$PollResults = (tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject14.messageOwner)).results) != null && !tLRPC$PollResults.results.isEmpty()) {
                    size = tLRPC$TL_messageMediaPoll.results.results.size();
                    i129 = 0;
                    while (true) {
                        if (i129 < size) {
                            tLRPC$TL_pollAnswerVoters = null;
                            break;
                        }
                        tLRPC$TL_pollAnswerVoters = tLRPC$TL_messageMediaPoll.results.results.get(i129);
                        if (tLRPC$TL_pollAnswerVoters.chosen) {
                            break;
                        }
                        i129++;
                    }
                    if (tLRPC$TL_pollAnswerVoters != null) {
                        int i132 = i129 + 500;
                        if (!tLRPC$TL_pollAnswerVoters.correct) {
                            i130 = R.string.AccDescrQuizIncorrectAnswer;
                            str19 = "AccDescrQuizIncorrectAnswer";
                        } else {
                            i130 = R.string.AccDescrQuizCorrectAnswer;
                            str19 = "AccDescrQuizCorrectAnswer";
                        }
                        sendAccessibilityEventForVirtualView(i132, 4, LocaleController.getString(str19, i130));
                    }
                }
            } else {
                z6 = false;
            }
            if (!z5 && groupedMessages != null) {
                z5 = (groupedMessages.messages.size() > 1 ? null : this.currentMessagesGroup.positions.get(this.currentMessageObject)) == this.currentPosition;
            }
            i = -1;
            f = 1.0f;
            i2 = 2;
            if (!z3 && !z4 && !z5 && !z6 && ((!z44 || !messageObject.isPoll()) && !isPhotoDataChanged(messageObject) && this.pinnedBottom == z && this.pinnedTop == z2)) {
                messageObject4 = messageObject14;
                i35 = 4;
                i60 = 5;
                i63 = -1;
                f4 = 0.0f;
                i36 = 3;
                z43 = false;
            } else {
                this.wasPinned = this.isPinned;
                this.pinnedBottom = z;
                this.pinnedTop = z2;
                this.currentMessageObject = messageObject14;
                this.currentMessagesGroup = groupedMessages;
                this.lastTime = -2;
                this.lastPostAuthor = messageObject14.messageOwner.post_author;
                if (!z45 || z5) {
                    this.isHighlightedAnimated = false;
                    this.wasTranscriptionOpen = false;
                }
                this.widthBeforeNewTimeLine = -1;
                if (groupedMessages != null && groupedMessages.posArray.size() > 1) {
                    groupedMessagePosition = this.currentMessagesGroup.positions.get(this.currentMessageObject);
                    this.currentPosition = groupedMessagePosition;
                    if (groupedMessagePosition == null) {
                        this.currentMessagesGroup = null;
                    }
                } else {
                    this.currentMessagesGroup = null;
                    this.currentPosition = null;
                }
                groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 == null || groupedMessages2.isDocuments) {
                    this.drawPinnedTop = this.pinnedTop;
                    this.drawPinnedBottom = this.pinnedBottom;
                } else {
                    this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 4) != 0);
                    this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition15 = this.currentPosition) == null || (groupedMessagePosition15.flags & 8) != 0);
                }
                boolean z46 = this.isPlayingRound;
                this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                this.photoImage.setCrossfadeWithOldImage(false);
                this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                this.photoImage.setCrossfadeByScale(0.0f);
                this.photoImage.setGradientBitmap(null);
                TLRPC$Message tLRPC$Message6 = messageObject14.messageOwner;
                this.lastSendState = tLRPC$Message6.send_state;
                this.lastDeleteDate = tLRPC$Message6.destroyTime;
                this.lastViewsCount = tLRPC$Message6.views;
                this.lastRepliesCount = getRepliesCount();
                if (z45) {
                    z7 = false;
                } else {
                    z7 = false;
                    this.isPressed = false;
                    this.isCheckPressed = true;
                }
                this.gamePreviewPressed = z7;
                this.sideButtonPressed = z7;
                this.hasNewLineForTime = z7;
                this.flipImage = z7;
                boolean z47 = this.isThreadChat && (tLRPC$MessageFwdHeader = (tLRPC$Message4 = messageObject14.messageOwner).fwd_from) != null && tLRPC$MessageFwdHeader.channel_post != 0 && tLRPC$Message4.reply_to == null;
                this.isThreadPost = z47;
                this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                boolean z48 = this.isChat && !this.isThreadPost && !messageObject.isOutOwner() && messageObject.needDrawAvatar();
                if (messageObject14.customAvatarDrawable == null) {
                    z8 = z48;
                    r3 = 0;
                } else {
                    this.isAvatarVisible = true;
                    r3 = 0;
                    z8 = true;
                }
                this.wasLayout = r3;
                this.groupPhotoInvisible = r3;
                int i133 = r3 == true ? 1 : 0;
                int i134 = r3 == true ? 1 : 0;
                this.animatingDrawVideoImageButton = i133;
                this.drawVideoSize = r3;
                this.canStreamVideo = r3;
                this.animatingNoSound = r3;
                if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || ((tLRPC$Message = messageObject14.messageOwner) != null && tLRPC$Message.noforwards)) {
                    r32 = 0;
                    this.drawSideButton = 0;
                } else {
                    int i135 = (!this.isRepliesChat && checkNeedDrawShareButton(messageObject) && ((groupedMessagePosition2 = this.currentPosition) == null || groupedMessagePosition2.last)) ? 1 : 0;
                    this.drawSideButton = i135;
                    if (!this.isPinnedChat || (i135 == 1 && messageObject14.messageOwner.fwd_from != null && !messageObject.isOutOwner() && messageObject14.messageOwner.fwd_from.saved_from_peer != null && messageObject.getDialogId() == UserConfig.getInstance(this.currentAccount).getClientUserId())) {
                        this.drawSideButton = 2;
                    }
                    r32 = 0;
                }
                this.replyNameLayout = null;
                this.adminLayout = null;
                this.checkOnlyButtonPressed = r32;
                this.replyTextLayout = null;
                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                this.lastReplyMessage = null;
                this.hasEmbed = r32;
                this.autoPlayingMedia = r32;
                int i136 = r32 == true ? 1 : 0;
                int i137 = r32 == true ? 1 : 0;
                this.replyNameWidth = i136;
                this.replyTextWidth = r32;
                this.viaWidth = r32;
                this.viaNameWidth = r32;
                this.addedCaptionHeight = r32;
                this.currentReplyPhoto = null;
                this.currentUser = null;
                this.currentChat = null;
                this.currentReplyUserId = 0L;
                this.currentViaBotUser = null;
                this.instantViewLayout = null;
                this.drawNameLayout = r32;
                this.lastLoadingSizeTotal = 0L;
                if (this.scheduledInvalidate) {
                    AndroidUtilities.cancelRunOnUIThread(this.invalidateRunnable);
                    this.scheduledInvalidate = r32;
                }
                this.links.clear();
                this.pressedLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
                messageObject14.forceUpdate = r32;
                this.drawPhotoImage = r32;
                this.drawMediaCheckBox = r32;
                this.hasLinkPreview = r32;
                this.hasOldCaptionPreview = r32;
                this.hasGamePreview = r32;
                this.hasInvoicePreview = r32;
                this.commentButtonPressed = r32;
                this.instantButtonPressed = r32;
                this.instantPressed = r32;
                if (!z6 && Build.VERSION.SDK_INT >= 21) {
                    i3 = 0;
                    while (true) {
                        drawableArr = this.selectorDrawable;
                        if (i3 < drawableArr.length) {
                            break;
                        }
                        boolean z49 = z4;
                        MessageObject messageObject17 = messageObject14;
                        if (drawableArr[i3] != null) {
                            drawableArr[i3].setVisible(false, false);
                            this.selectorDrawable[i3].setState(StateSet.NOTHING);
                        }
                        i3++;
                        messageObject14 = messageObject17;
                        z4 = z49;
                        i2 = 2;
                        f = 1.0f;
                        r13 = 1;
                        i = -1;
                    }
                }
                this.spoilerPressed = null;
                this.isCaptionSpoilerPressed = false;
                this.isSpoilerRevealing = false;
                this.linkPreviewPressed = false;
                this.buttonPressed = 0;
                this.additionalTimeOffsetY = 0;
                this.miniButtonPressed = 0;
                this.pressedBotButton = i;
                this.pressedVoteButton = i;
                this.pollHintPressed = false;
                this.psaHintPressed = false;
                this.linkPreviewHeight = 0;
                this.mediaOffsetY = 0;
                this.documentAttachType = 0;
                this.documentAttach = null;
                this.descriptionLayout = null;
                this.titleLayout = null;
                this.videoInfoLayout = null;
                this.photosCountLayout = null;
                this.siteNameLayout = null;
                this.authorLayout = null;
                this.captionLayout = null;
                this.captionWidth = 0;
                this.captionHeight = 0;
                this.captionOffsetX = 0;
                this.currentCaption = null;
                this.docTitleLayout = null;
                this.drawImageButton = false;
                this.drawVideoImageButton = false;
                this.currentPhotoObject = null;
                this.photoParentObject = null;
                this.currentPhotoObjectThumb = null;
                this.currentPhotoObjectThumbStripped = null;
                if (!z3 || z45 || z4) {
                    this.currentPhotoFilter = null;
                }
                this.buttonState = i;
                this.miniButtonState = i;
                this.hasMiniProgress = 0;
                if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
                    ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
                }
                this.addedForTest = false;
                this.photoNotSet = false;
                this.drawBackground = r13;
                this.drawName = false;
                this.useSeekBarWaveform = false;
                this.useTranscribeButton = false;
                this.drawInstantView = false;
                this.drawInstantViewType = 0;
                this.drawForwardedName = false;
                this.drawCommentButton = false;
                this.photoImage.setSideClip(0.0f);
                this.photoImage.setAspectFit(false);
                this.gradientShader = null;
                this.motionBackgroundDrawable = null;
                this.imageBackgroundColor = 0;
                this.imageBackgroundGradientColor1 = 0;
                this.imageBackgroundGradientColor2 = 0;
                this.imageBackgroundIntensity = 0.0f;
                this.imageBackgroundGradientColor3 = 0;
                this.imageBackgroundGradientRotation = 45;
                this.imageBackgroundSideColor = 0;
                this.mediaBackground = false;
                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject14.messageOwner.fwd_from;
                z9 = tLRPC$MessageFwdHeader2 != null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader2.psa_type);
                this.hasPsaHint = z9;
                if (z9) {
                    createSelectorDrawable(0);
                }
                this.photoImage.setAlpha(f);
                if ((!z3 || z4) && !this.pollUnvoteInProgress) {
                    this.pollButtons.clear();
                }
                this.availableTimeWidth = 0;
                this.photoImage.setForceLoading(false);
                this.photoImage.setNeedsQualityThumb(false);
                this.photoImage.setShouldGenerateQualityThumb(false);
                this.photoImage.setAllowDecodeSingleFrame(false);
                this.photoImage.setColorFilter(null);
                this.photoImage.setMediaStartEndTime(-1L, -1L);
                if (!z45 || messageObject14.reactionsChanged || z46 != this.isPlayingRound) {
                    messageObject14.reactionsChanged = false;
                    groupedMessagePosition13 = this.currentPosition;
                    if (groupedMessagePosition13 == null || (groupedMessagePosition13.flags & 8) != 0) {
                        z42 = messageObject.shouldDrawReactionsInLayout();
                        if (z42 && (tLRPC$Message3 = messageObject14.messageOwner) != null && (tLRPC$TL_messageReactions = tLRPC$Message3.reactions) != null && tLRPC$TL_messageReactions.results != null) {
                            int i138 = 0;
                            int i139 = 0;
                            for (i127 = 0; i127 < messageObject14.messageOwner.reactions.results.size(); i127++) {
                                TLRPC$ReactionCount tLRPC$ReactionCount = messageObject14.messageOwner.reactions.results.get(i127);
                                if (tLRPC$ReactionCount.count == i2) {
                                    i138++;
                                } else if (tLRPC$ReactionCount.chosen) {
                                    i138++;
                                    if (i139 >= i2 || i138 >= i2) {
                                        z42 = false;
                                        break;
                                    }
                                }
                                i139++;
                                if (i139 >= i2) {
                                }
                                z42 = false;
                            }
                        }
                        if (this.currentPosition == null) {
                            this.reactionsLayoutInBubble.setMessage(groupedMessages.findPrimaryMessageObject(), !messageObject.shouldDrawReactionsInLayout(), this.resourcesProvider);
                        } else {
                            this.reactionsLayoutInBubble.setMessage(messageObject14, z42, this.resourcesProvider);
                        }
                    } else {
                        this.reactionsLayoutInBubble.setMessage(null, false, this.resourcesProvider);
                    }
                }
                if (z3) {
                    this.firstVisibleBlockNum = 0;
                    this.lastVisibleBlockNum = 0;
                    MessageObject messageObject18 = this.currentMessageObject;
                    if (messageObject18 != null && (arrayList3 = messageObject18.textLayoutBlocks) != null && arrayList3.size() > r13) {
                        this.needNewVisiblePart = r13;
                    }
                }
                groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 != null && groupedMessages3.messages.size() > 0) {
                    isLinkedToChat = this.currentMessagesGroup.messages.get(0).isLinkedToChat(this.linkedChatId);
                } else {
                    isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                }
                if (((this.hasDiscussion && isLinkedToChat) || (this.isRepliesChat && !messageObject.isOutOwner())) && ((groupedMessagePosition12 = this.currentPosition) == null || (groupedMessagePosition12.flags & 8) != 0)) {
                    repliesCount = getRepliesCount();
                    if (!messageObject.shouldDrawWithoutBackground() && !messageObject.isAnimatedEmoji()) {
                        this.drawCommentButton = r13;
                        if (this.commentProgress == null) {
                            this.commentProgress = new InfiniteProgress(AndroidUtilities.dp(7.0f));
                        }
                        if (!this.isRepliesChat) {
                            string5 = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                        } else {
                            if (LocaleController.isRTL) {
                                string5 = repliesCount != 0 ? LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]) : LocaleController.getString("LeaveAComment", R.string.LeaveAComment);
                            } else {
                                string5 = repliesCount != 0 ? LocaleController.getPluralString("CommentsNoNumber", repliesCount) : LocaleController.getString("LeaveAComment", R.string.LeaveAComment);
                            }
                            ArrayList<TLRPC$Peer> recentRepliers = getRecentRepliers();
                            if (repliesCount != 0 && recentRepliers != null && !recentRepliers.isEmpty()) {
                                createCommentUI();
                                int size2 = recentRepliers.size();
                                int i140 = 0;
                                i126 = 0;
                                while (true) {
                                    ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                                    if (i140 >= imageReceiverArr.length) {
                                        break;
                                    }
                                    if (i140 < size2) {
                                        imageReceiverArr[i140].setImageCoords(0.0f, 0.0f, AndroidUtilities.dp(24.0f), AndroidUtilities.dp(24.0f));
                                        long peerId = MessageObject.getPeerId(recentRepliers.get(i140));
                                        if (DialogObject.isUserDialog(peerId)) {
                                            user3 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerId));
                                        } else if (!DialogObject.isChatDialog(peerId)) {
                                            user3 = null;
                                        } else {
                                            tLRPC$Chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerId));
                                            user3 = null;
                                            if (user3 == null) {
                                                this.commentAvatarDrawables[i140].setInfo(user3);
                                                this.commentAvatarImages[i140].setForUserOrChat(user3, this.commentAvatarDrawables[i140]);
                                            } else if (tLRPC$Chat != null) {
                                                this.commentAvatarDrawables[i140].setInfo(tLRPC$Chat);
                                                this.commentAvatarImages[i140].setForUserOrChat(tLRPC$Chat, this.commentAvatarDrawables[i140]);
                                            } else {
                                                this.commentAvatarDrawables[i140].setInfo(peerId, "", "");
                                            }
                                            this.commentAvatarImagesVisible[i140] = true;
                                            i126 += i140 == 0 ? 17 : 2;
                                        }
                                        tLRPC$Chat = null;
                                        if (user3 == null) {
                                        }
                                        this.commentAvatarImagesVisible[i140] = true;
                                        i126 += i140 == 0 ? 17 : 2;
                                    } else if (size2 != 0) {
                                        imageReceiverArr[i140].setImageBitmap((Drawable) null);
                                        this.commentAvatarImagesVisible[i140] = false;
                                    }
                                    i140++;
                                }
                                int ceil5 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string5));
                                this.totalCommentWidth = ceil5;
                                this.commentWidth = ceil5;
                                this.commentLayout = new StaticLayout(string5, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                if (repliesCount != 0 && !LocaleController.isRTL) {
                                    this.drawCommentNumber = true;
                                    animatedNumberLayout = this.commentNumberLayout;
                                    if (animatedNumberLayout != null) {
                                        AnimatedNumberLayout animatedNumberLayout3 = new AnimatedNumberLayout(this, Theme.chat_commentTextPaint);
                                        this.commentNumberLayout = animatedNumberLayout3;
                                        z41 = false;
                                        animatedNumberLayout3.setNumber(repliesCount, false);
                                    } else {
                                        animatedNumberLayout.setNumber(repliesCount, messageObject14.animateComments);
                                        z41 = false;
                                    }
                                    messageObject14.animateComments = z41;
                                    int width4 = this.commentNumberLayout.getWidth();
                                    this.commentNumberWidth = width4;
                                    this.totalCommentWidth += width4 + AndroidUtilities.dp(4.0f);
                                } else {
                                    this.drawCommentNumber = false;
                                    animatedNumberLayout2 = this.commentNumberLayout;
                                    if (animatedNumberLayout2 != null) {
                                        animatedNumberLayout2.setNumber(1, false);
                                    }
                                }
                                this.totalCommentWidth += AndroidUtilities.dp(i126 + 70);
                            } else if (this.commentAvatarImages != null) {
                                int i141 = 0;
                                while (true) {
                                    ImageReceiver[] imageReceiverArr2 = this.commentAvatarImages;
                                    if (i141 >= imageReceiverArr2.length) {
                                        break;
                                    }
                                    imageReceiverArr2[i141].setImageBitmap((Drawable) null);
                                    this.commentAvatarImagesVisible[i141] = false;
                                    i141++;
                                }
                            }
                        }
                        i126 = 0;
                        int ceil52 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string5));
                        this.totalCommentWidth = ceil52;
                        this.commentWidth = ceil52;
                        this.commentLayout = new StaticLayout(string5, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        if (repliesCount != 0) {
                            this.drawCommentNumber = true;
                            animatedNumberLayout = this.commentNumberLayout;
                            if (animatedNumberLayout != null) {
                            }
                            messageObject14.animateComments = z41;
                            int width42 = this.commentNumberLayout.getWidth();
                            this.commentNumberWidth = width42;
                            this.totalCommentWidth += width42 + AndroidUtilities.dp(4.0f);
                            this.totalCommentWidth += AndroidUtilities.dp(i126 + 70);
                        }
                        this.drawCommentNumber = false;
                        animatedNumberLayout2 = this.commentNumberLayout;
                        if (animatedNumberLayout2 != null) {
                        }
                        this.totalCommentWidth += AndroidUtilities.dp(i126 + 70);
                    } else {
                        if (!this.isRepliesChat && repliesCount > 0) {
                            String formatShortNumber = LocaleController.formatShortNumber(repliesCount, null);
                            int ceil6 = (int) Math.ceil(Theme.chat_stickerCommentCountPaint.measureText(formatShortNumber));
                            this.totalCommentWidth = ceil6;
                            this.commentWidth = ceil6;
                            this.commentLayout = new StaticLayout(formatShortNumber, Theme.chat_stickerCommentCountPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        } else {
                            this.commentLayout = null;
                        }
                        this.drawCommentNumber = false;
                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                    }
                } else {
                    this.commentLayout = null;
                    this.drawCommentNumber = false;
                }
                i4 = messageObject14.type;
                float f8 = 102.0f;
                if (i4 != 0) {
                    if (i4 == 16) {
                        messageObject7 = messageObject14;
                        createSelectorDrawable(0);
                        this.drawName = false;
                        this.drawForwardedName = false;
                        this.drawPhotoImage = false;
                        if (!AndroidUtilities.isTablet()) {
                            this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                        } else {
                            this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                        }
                        this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                        int maxNameWidth = getMaxNameWidth() - AndroidUtilities.dp(50.0f);
                        if (maxNameWidth < 0) {
                            maxNameWidth = AndroidUtilities.dp(10.0f);
                        }
                        String format2 = LocaleController.getInstance().formatterDay.format(messageObject7.messageOwner.date * 1000);
                        TLRPC$TL_messageActionPhoneCall tLRPC$TL_messageActionPhoneCall = (TLRPC$TL_messageActionPhoneCall) messageObject7.messageOwner.action;
                        boolean z50 = tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonMissed;
                        if (!messageObject.isOutOwner()) {
                            if (z50) {
                                if (tLRPC$TL_messageActionPhoneCall.video) {
                                    string2 = LocaleController.getString("CallMessageVideoIncomingMissed", R.string.CallMessageVideoIncomingMissed);
                                } else {
                                    string2 = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
                                }
                            } else if (tLRPC$TL_messageActionPhoneCall.reason instanceof TLRPC$TL_phoneCallDiscardReasonBusy) {
                                if (tLRPC$TL_messageActionPhoneCall.video) {
                                    string2 = LocaleController.getString("CallMessageVideoIncomingDeclined", R.string.CallMessageVideoIncomingDeclined);
                                } else {
                                    string2 = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
                                }
                            } else if (tLRPC$TL_messageActionPhoneCall.video) {
                                string2 = LocaleController.getString("CallMessageVideoIncoming", R.string.CallMessageVideoIncoming);
                            } else {
                                string2 = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
                            }
                        } else if (z50) {
                            if (tLRPC$TL_messageActionPhoneCall.video) {
                                string2 = LocaleController.getString("CallMessageVideoOutgoingMissed", R.string.CallMessageVideoOutgoingMissed);
                            } else {
                                string2 = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
                            }
                        } else if (tLRPC$TL_messageActionPhoneCall.video) {
                            string2 = LocaleController.getString("CallMessageVideoOutgoing", R.string.CallMessageVideoOutgoing);
                        } else {
                            string2 = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
                        }
                        if (tLRPC$TL_messageActionPhoneCall.duration > 0) {
                            format2 = format2 + ", " + LocaleController.formatCallDuration(tLRPC$TL_messageActionPhoneCall.duration);
                        }
                        float f9 = maxNameWidth;
                        this.titleLayout = new StaticLayout(TextUtils.ellipsize(string2, Theme.chat_audioTitlePaint, f9, TextUtils.TruncateAt.END), Theme.chat_audioTitlePaint, maxNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(format2, Theme.chat_contactPhonePaint, f9, TextUtils.TruncateAt.END), Theme.chat_contactPhonePaint, maxNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        setMessageObjectInternal(messageObject);
                        int dp22 = AndroidUtilities.dp(65.0f);
                        int i142 = this.namesOffset;
                        this.totalHeight = dp22 + i142;
                        if (this.drawPinnedTop) {
                            this.namesOffset = i142 - AndroidUtilities.dp(1.0f);
                        }
                    } else if (i4 == 12) {
                        MessageObject messageObject19 = messageObject14;
                        this.drawName = (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject19.messageOwner.fwd_from.from_id == null);
                        this.drawForwardedName = !this.isRepliesChat;
                        this.drawPhotoImage = true;
                        this.photoImage.setRoundRadius(AndroidUtilities.dp(22.0f));
                        if (!AndroidUtilities.isTablet()) {
                            this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                        } else {
                            this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                        }
                        this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                        long j2 = MessageObject.getMedia(messageObject19.messageOwner).user_id;
                        TLRPC$User user4 = j2 == 0 ? null : MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2));
                        int maxNameWidth2 = getMaxNameWidth() - AndroidUtilities.dp(80.0f);
                        if (maxNameWidth2 < 0) {
                            maxNameWidth2 = AndroidUtilities.dp(10.0f);
                        }
                        if (user4 != null) {
                            this.contactAvatarDrawable.setInfo(user4);
                        } else if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject19.messageOwner).first_name) || !TextUtils.isEmpty(MessageObject.getMedia(messageObject19.messageOwner).last_name)) {
                            this.contactAvatarDrawable.setInfo(0L, MessageObject.getMedia(messageObject19.messageOwner).first_name, MessageObject.getMedia(messageObject19.messageOwner).last_name);
                        } else {
                            z28 = false;
                            this.photoImage.setForUserOrChat(user4, z28 ? Theme.chat_contactDrawable[!messageObject.isOutOwner() ? (char) 0 : (char) 1] : this.contactAvatarDrawable, messageObject19);
                            if (TextUtils.isEmpty(messageObject19.vCardData)) {
                                charSequence = messageObject19.vCardData;
                            } else if (user4 != null && !TextUtils.isEmpty(user4.phone)) {
                                charSequence = PhoneFormat.getInstance().format("+" + user4.phone);
                            } else {
                                String str20 = MessageObject.getMedia(messageObject19.messageOwner).phone_number;
                                if (!TextUtils.isEmpty(str20)) {
                                    charSequence = PhoneFormat.getInstance().format(str20);
                                } else {
                                    charSequence = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
                                }
                            }
                            CharSequence charSequence3 = charSequence;
                            if (user4 != null) {
                                this.drawInstantView = true;
                                this.drawInstantViewType = 5;
                            }
                            replace = ContactsController.formatName(MessageObject.getMedia(messageObject19.messageOwner).first_name, MessageObject.getMedia(messageObject19.messageOwner).last_name).replace('\n', ' ');
                            if (replace.length() == 0 && (replace = MessageObject.getMedia(messageObject19.messageOwner).phone_number) == null) {
                                replace = "";
                            }
                            this.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            this.docTitleLayout = new StaticLayout(charSequence3, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false);
                            setMessageObjectInternal(messageObject);
                            if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition5 = this.currentPosition) == null || groupedMessagePosition5.minY == 0)) {
                                this.namesOffset += AndroidUtilities.dp(5.0f);
                            } else if (this.drawNameLayout && messageObject.getReplyMsgId() == 0) {
                                this.namesOffset += AndroidUtilities.dp(7.0f);
                            }
                            this.totalHeight = AndroidUtilities.dp(55.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                            if (this.drawPinnedTop) {
                                this.namesOffset -= AndroidUtilities.dp(1.0f);
                            }
                            if (this.drawInstantView) {
                                createInstantViewButton();
                            } else if (this.docTitleLayout.getLineCount() > 0) {
                                int dp23 = this.backgroundWidth - AndroidUtilities.dp(110.0f);
                                StaticLayout staticLayout5 = this.docTitleLayout;
                                if (dp23 - ((int) Math.ceil(staticLayout5.getLineWidth(staticLayout5.getLineCount() - 1))) < this.timeWidth) {
                                    this.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                            }
                            reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                                reactionsLayoutInBubble2.measure(this.backgroundWidth - AndroidUtilities.dp(32.0f), 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
                                reactionsLayoutInBubble7.totalHeight = reactionsLayoutInBubble7.height + AndroidUtilities.dp(12.0f);
                                this.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(4.0f);
                                dp9 = this.backgroundWidth - AndroidUtilities.dp(32.0f);
                                reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                                if (dp9 - reactionsLayoutInBubble3.lastLineX < this.timeWidth) {
                                    reactionsLayoutInBubble3.totalHeight += AndroidUtilities.dp(12.0f);
                                    this.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(12.0f);
                                }
                                this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                            }
                            messageObject4 = messageObject19;
                            i35 = 4;
                            c = 0;
                            i36 = 3;
                            r15 = 0;
                            f3 = 1.0f;
                            z24 = false;
                        }
                        z28 = true;
                        if (z28) {
                        }
                        this.photoImage.setForUserOrChat(user4, z28 ? Theme.chat_contactDrawable[!messageObject.isOutOwner() ? (char) 0 : (char) 1] : this.contactAvatarDrawable, messageObject19);
                        if (TextUtils.isEmpty(messageObject19.vCardData)) {
                        }
                        CharSequence charSequence32 = charSequence;
                        if (user4 != null) {
                        }
                        replace = ContactsController.formatName(MessageObject.getMedia(messageObject19.messageOwner).first_name, MessageObject.getMedia(messageObject19.messageOwner).last_name).replace('\n', ' ');
                        if (replace.length() == 0) {
                            replace = "";
                        }
                        this.titleLayout = new StaticLayout(TextUtils.ellipsize(replace, Theme.chat_contactNamePaint, maxNameWidth2, TextUtils.TruncateAt.END), Theme.chat_contactNamePaint, maxNameWidth2 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.docTitleLayout = new StaticLayout(charSequence32, Theme.chat_contactPhonePaint, maxNameWidth2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false);
                        setMessageObjectInternal(messageObject);
                        if (this.drawForwardedName) {
                            this.namesOffset += AndroidUtilities.dp(5.0f);
                            this.totalHeight = AndroidUtilities.dp(55.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                            if (this.drawPinnedTop) {
                            }
                            if (this.drawInstantView) {
                            }
                            reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble2.isSmall) {
                                reactionsLayoutInBubble2.measure(this.backgroundWidth - AndroidUtilities.dp(32.0f), 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble72 = this.reactionsLayoutInBubble;
                                reactionsLayoutInBubble72.totalHeight = reactionsLayoutInBubble72.height + AndroidUtilities.dp(12.0f);
                                this.reactionsLayoutInBubble.positionOffsetY += -AndroidUtilities.dp(4.0f);
                                dp9 = this.backgroundWidth - AndroidUtilities.dp(32.0f);
                                reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                                if (dp9 - reactionsLayoutInBubble3.lastLineX < this.timeWidth) {
                                }
                                this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                            }
                            messageObject4 = messageObject19;
                            i35 = 4;
                            c = 0;
                            i36 = 3;
                            r15 = 0;
                            f3 = 1.0f;
                            z24 = false;
                        }
                        if (this.drawNameLayout) {
                            this.namesOffset += AndroidUtilities.dp(7.0f);
                        }
                        this.totalHeight = AndroidUtilities.dp(55.0f) + this.namesOffset + this.docTitleLayout.getHeight();
                        if (this.drawPinnedTop) {
                        }
                        if (this.drawInstantView) {
                        }
                        reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble2.isSmall) {
                        }
                        messageObject4 = messageObject19;
                        i35 = 4;
                        c = 0;
                        i36 = 3;
                        r15 = 0;
                        f3 = 1.0f;
                        z24 = false;
                    } else if (i4 == i2) {
                        messageObject7 = messageObject14;
                        this.drawForwardedName = !this.isRepliesChat;
                        this.drawName = (messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject7.messageOwner.fwd_from.from_id == null);
                        if (!AndroidUtilities.isTablet()) {
                            min = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                            this.backgroundWidth = min;
                        } else {
                            min = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                            this.backgroundWidth = min;
                        }
                        createDocumentLayout(this.backgroundWidth, messageObject7);
                        setMessageObjectInternal(messageObject);
                        int dp24 = AndroidUtilities.dp(70.0f);
                        int i143 = this.namesOffset;
                        this.totalHeight = dp24 + i143;
                        if (this.drawPinnedTop) {
                            this.namesOffset = i143 - AndroidUtilities.dp(1.0f);
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble8 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble8.isSmall) {
                            reactionsLayoutInBubble8.measure(min - AndroidUtilities.dp(!messageObject.isOutOwner() ? 24.0f : 32.0f), 3);
                            ReactionsLayoutInBubble reactionsLayoutInBubble9 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble9.isEmpty) {
                                reactionsLayoutInBubble9.totalHeight = reactionsLayoutInBubble9.height;
                                if (TextUtils.isEmpty(messageObject7.caption)) {
                                    this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                } else {
                                    this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                                int i144 = this.reactionsLayoutInBubble.width;
                                if (i144 > this.backgroundWidth) {
                                    this.backgroundWidth = i144;
                                }
                                int dp25 = this.timeWidth + AndroidUtilities.dp(6.0f);
                                if (messageObject.isOutOwner()) {
                                    dp25 += AndroidUtilities.dp(20.5f);
                                }
                                int extraTimeX = dp25 + getExtraTimeX();
                                ReactionsLayoutInBubble reactionsLayoutInBubble10 = this.reactionsLayoutInBubble;
                                if (reactionsLayoutInBubble10.lastLineX + extraTimeX >= this.backgroundWidth) {
                                    reactionsLayoutInBubble10.totalHeight += AndroidUtilities.dp(12.0f);
                                    this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                }
                                this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                            }
                        }
                    } else if (i4 == 14) {
                        if (messageObject.isFromGroup() && messageObject.isSupergroup()) {
                            messageObject7 = messageObject;
                        } else {
                            messageObject7 = messageObject;
                            if (messageObject.isImportedForward()) {
                            }
                            z29 = false;
                            this.drawName = z29;
                            if (!AndroidUtilities.isTablet()) {
                                min2 = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                this.backgroundWidth = min2;
                            } else {
                                min2 = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(270.0f));
                                this.backgroundWidth = min2;
                            }
                            createDocumentLayout(this.backgroundWidth, messageObject7);
                            setMessageObjectInternal(messageObject);
                            this.totalHeight = AndroidUtilities.dp(82.0f) + this.namesOffset;
                            if (this.currentPosition != null && (groupedMessages4 = this.currentMessagesGroup) != null && groupedMessages4.messages.size() > 1) {
                                if ((this.currentPosition.flags & 4) == 0) {
                                    this.totalHeight -= AndroidUtilities.dp(6.0f);
                                    this.mediaOffsetY -= AndroidUtilities.dp(6.0f);
                                }
                                if ((this.currentPosition.flags & 8) == 0) {
                                    this.totalHeight -= AndroidUtilities.dp(6.0f);
                                }
                            }
                            if (this.drawPinnedTop) {
                                this.namesOffset -= AndroidUtilities.dp(1.0f);
                            }
                            reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble4.isSmall) {
                                reactionsLayoutInBubble4.measure(min2 - AndroidUtilities.dp(24.0f), 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble11 = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble11.isEmpty) {
                                    reactionsLayoutInBubble11.totalHeight = reactionsLayoutInBubble11.height + AndroidUtilities.dp(12.0f);
                                    measureTime(messageObject);
                                    ReactionsLayoutInBubble reactionsLayoutInBubble12 = this.reactionsLayoutInBubble;
                                    int i145 = reactionsLayoutInBubble12.width;
                                    if (i145 > this.backgroundWidth) {
                                        this.backgroundWidth = i145;
                                    }
                                    if (reactionsLayoutInBubble12.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                        this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                        this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                    }
                                    if (!messageObject7.isRestrictedMessage && messageObject7.caption != null) {
                                        this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(14.0f);
                                    }
                                    this.totalHeight += this.reactionsLayoutInBubble.totalHeight;
                                }
                            }
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition18 = this.currentPosition;
                        if (groupedMessagePosition18 == null || (groupedMessagePosition18.flags & 4) != 0) {
                            z29 = true;
                            this.drawName = z29;
                            if (!AndroidUtilities.isTablet()) {
                            }
                            createDocumentLayout(this.backgroundWidth, messageObject7);
                            setMessageObjectInternal(messageObject);
                            this.totalHeight = AndroidUtilities.dp(82.0f) + this.namesOffset;
                            if (this.currentPosition != null) {
                                if ((this.currentPosition.flags & 4) == 0) {
                                }
                                if ((this.currentPosition.flags & 8) == 0) {
                                }
                            }
                            if (this.drawPinnedTop) {
                            }
                            reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble4.isSmall) {
                            }
                        }
                        z29 = false;
                        this.drawName = z29;
                        if (!AndroidUtilities.isTablet()) {
                        }
                        createDocumentLayout(this.backgroundWidth, messageObject7);
                        setMessageObjectInternal(messageObject);
                        this.totalHeight = AndroidUtilities.dp(82.0f) + this.namesOffset;
                        if (this.currentPosition != null) {
                        }
                        if (this.drawPinnedTop) {
                        }
                        reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble4.isSmall) {
                        }
                    } else if (i4 == 17) {
                        messageObject7 = messageObject14;
                        float f10 = 1.0f;
                        int i146 = -1;
                        int i147 = 2;
                        if (this.timerParticles == null) {
                            this.timerParticles = new TimerParticles();
                        }
                        createSelectorDrawable(0);
                        this.drawName = true;
                        this.drawForwardedName = !this.isRepliesChat;
                        this.drawPhotoImage = false;
                        int min3 = Math.min(AndroidUtilities.dp(500.0f), messageObject.getMaxMessageTextWidth());
                        this.backgroundWidth = AndroidUtilities.dp(31.0f) + min3;
                        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll3 = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(messageObject7.messageOwner);
                        this.timerTransitionProgress = tLRPC$TL_messageMediaPoll3.poll.close_date - ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() >= 60 ? 1.0f : 0.0f;
                        this.pollClosed = tLRPC$TL_messageMediaPoll3.poll.closed;
                        boolean isVoted = messageObject.isVoted();
                        this.pollVoted = isVoted;
                        if (isVoted) {
                            messageObject7.checkedVotes.clear();
                        }
                        StaticLayout staticLayout6 = new StaticLayout(Emoji.replaceEmoji(tLRPC$TL_messageMediaPoll3.poll.question, Theme.chat_audioTitlePaint.getFontMetricsInt(), AndroidUtilities.dp(16.0f), false), Theme.chat_audioTitlePaint, (AndroidUtilities.dp(2.0f) + min3) - (getExtraTextX() * 2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.titleLayout = staticLayout6;
                        int lineCount2 = staticLayout6.getLineCount();
                        int i148 = 0;
                        while (true) {
                            if (i148 >= lineCount2) {
                                z30 = false;
                                break;
                            }
                            if (this.titleLayout.getLineLeft(i148) > 0.0f) {
                                z30 = true;
                                break;
                            }
                            i148++;
                        }
                        if (this.pollClosed) {
                            string3 = LocaleController.getString("FinalResults", R.string.FinalResults);
                        } else {
                            TLRPC$Poll tLRPC$Poll3 = tLRPC$TL_messageMediaPoll3.poll;
                            if (tLRPC$Poll3.quiz) {
                                if (tLRPC$Poll3.public_voters) {
                                    string3 = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                } else {
                                    string3 = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                }
                            } else if (tLRPC$Poll3.public_voters) {
                                string3 = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                            } else {
                                string3 = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                            }
                        }
                        float f11 = min3;
                        StaticLayout staticLayout7 = new StaticLayout(TextUtils.ellipsize(string3, Theme.chat_timePaint, f11, TextUtils.TruncateAt.END), Theme.chat_timePaint, (AndroidUtilities.dp(2.0f) + min3) - (getExtraTextX() * 2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.docTitleLayout = staticLayout7;
                        if (staticLayout7.getLineCount() > 0) {
                            if (z30 && !LocaleController.isRTL) {
                                this.docTitleOffsetX = (int) Math.ceil(f11 - this.docTitleLayout.getLineWidth(0));
                            } else if (!z30 && LocaleController.isRTL) {
                                this.docTitleOffsetX = -((int) Math.ceil(this.docTitleLayout.getLineLeft(0)));
                            } else {
                                this.docTitleOffsetX = 0;
                            }
                        }
                        int dp26 = min3 - AndroidUtilities.dp(!messageObject.isOutOwner() ? 8.0f : 28.0f);
                        if (!this.isBot) {
                            TLRPC$Poll tLRPC$Poll4 = tLRPC$TL_messageMediaPoll3.poll;
                            TextPaint textPaint = (!tLRPC$Poll4.public_voters && !tLRPC$Poll4.multiple_choice) ? Theme.chat_livePaint : Theme.chat_locationAddressPaint;
                            if (tLRPC$Poll4.quiz) {
                                int i149 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                ellipsize2 = TextUtils.ellipsize(i149 != 0 ? LocaleController.formatPluralString("Answer", i149, new Object[0]) : LocaleController.getString("NoVotesQuiz", R.string.NoVotesQuiz), textPaint, dp26, TextUtils.TruncateAt.END);
                            } else {
                                int i150 = tLRPC$TL_messageMediaPoll3.results.total_voters;
                                ellipsize2 = TextUtils.ellipsize(i150 != 0 ? LocaleController.formatPluralString("Vote", i150, new Object[0]) : LocaleController.getString("NoVotes", R.string.NoVotes), textPaint, dp26, TextUtils.TruncateAt.END);
                            }
                            StaticLayout staticLayout8 = new StaticLayout(ellipsize2, textPaint, dp26, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            this.infoLayout = staticLayout8;
                            TLRPC$Poll tLRPC$Poll5 = tLRPC$TL_messageMediaPoll3.poll;
                            if (!tLRPC$Poll5.public_voters && !tLRPC$Poll5.multiple_choice) {
                                if (staticLayout8.getLineCount() <= 0) {
                                    d = 0.0d;
                                    i72 = 0;
                                } else {
                                    i72 = 0;
                                    d = -this.infoLayout.getLineLeft(0);
                                }
                                this.infoX = (int) Math.ceil(d);
                                this.availableTimeWidth = (int) ((f11 - this.infoLayout.getLineWidth(i72)) - AndroidUtilities.dp(16.0f));
                            } else {
                                double dp27 = this.backgroundWidth - AndroidUtilities.dp(28.0f);
                                double ceil7 = Math.ceil(this.infoLayout.getLineWidth(0));
                                Double.isNaN(dp27);
                                double lineLeft = this.infoLayout.getLineLeft(0);
                                Double.isNaN(lineLeft);
                                this.infoX = (int) (((dp27 - ceil7) / 2.0d) - lineLeft);
                                this.availableTimeWidth = min3;
                            }
                        }
                        measureTime(messageObject);
                        TLRPC$Poll tLRPC$Poll6 = tLRPC$TL_messageMediaPoll3.poll;
                        this.lastPoll = tLRPC$Poll6;
                        TLRPC$PollResults tLRPC$PollResults3 = tLRPC$TL_messageMediaPoll3.results;
                        this.lastPollResults = tLRPC$PollResults3.results;
                        int i151 = tLRPC$PollResults3.total_voters;
                        this.lastPollResultsVoters = i151;
                        if ((tLRPC$Poll6.multiple_choice && !this.pollVoted && !this.pollClosed) || (!this.isBot && tLRPC$Poll6.public_voters && (this.pollVoted || (this.pollClosed && tLRPC$PollResults3 != null && i151 != 0)))) {
                            this.drawInstantView = true;
                            this.drawInstantViewType = 8;
                            createInstantViewButton();
                        }
                        if (tLRPC$TL_messageMediaPoll3.poll.multiple_choice) {
                            createPollUI();
                        }
                        if (tLRPC$TL_messageMediaPoll3.results != null) {
                            createPollUI();
                            int size3 = tLRPC$TL_messageMediaPoll3.results.recent_voters.size();
                            int i152 = 0;
                            while (true) {
                                ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                                if (i152 >= imageReceiverArr3.length) {
                                    break;
                                }
                                if (!this.isBot && i152 < size3) {
                                    imageReceiverArr3[i152].setImageCoords(0.0f, 0.0f, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f));
                                    Long l = tLRPC$TL_messageMediaPoll3.results.recent_voters.get(i152);
                                    TLRPC$User user5 = MessagesController.getInstance(this.currentAccount).getUser(l);
                                    if (user5 != null) {
                                        this.pollAvatarDrawables[i152].setInfo(user5);
                                        this.pollAvatarImages[i152].setForUserOrChat(user5, this.pollAvatarDrawables[i152]);
                                    } else {
                                        this.pollAvatarDrawables[i152].setInfo(l.longValue(), "", "");
                                    }
                                    this.pollAvatarImagesVisible[i152] = true;
                                } else if (!this.pollUnvoteInProgress || size3 != 0) {
                                    imageReceiverArr3[i152].setImageBitmap((Drawable) null);
                                    this.pollAvatarImagesVisible[i152] = false;
                                }
                                i152++;
                                messageObject7 = messageObject;
                                f10 = 1.0f;
                                i146 = -1;
                                i147 = 2;
                            }
                        } else if (this.pollAvatarImages != null) {
                            int i153 = 0;
                            while (true) {
                                ImageReceiver[] imageReceiverArr4 = this.pollAvatarImages;
                                if (i153 >= imageReceiverArr4.length) {
                                    break;
                                }
                                imageReceiverArr4[i153].setImageBitmap((Drawable) null);
                                this.pollAvatarImagesVisible[i153] = false;
                                i153++;
                            }
                        }
                        if (!this.animatePollAnswer && this.pollVoteInProgress && this.vibrateOnPollVote) {
                            performHapticFeedback(3, i147);
                        }
                        boolean z51 = this.attachedToWindow && (this.pollVoteInProgress || this.pollUnvoteInProgress);
                        this.animatePollAnswer = z51;
                        this.animatePollAnswerAlpha = z51;
                        ArrayList arrayList5 = new ArrayList();
                        if (this.pollButtons.isEmpty()) {
                            arrayList = null;
                        } else {
                            ArrayList arrayList6 = new ArrayList(this.pollButtons);
                            this.pollButtons.clear();
                            if (!this.animatePollAnswer) {
                                this.animatePollAnswer = this.attachedToWindow && (this.pollVoted || this.pollClosed);
                            }
                            float f12 = this.pollAnimationProgress;
                            if (f12 > 0.0f && f12 < f10) {
                                int size4 = arrayList6.size();
                                int i154 = 0;
                                while (i154 < size4) {
                                    PollButton pollButton2 = (PollButton) arrayList6.get(i154);
                                    pollButton2.percent = (int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * this.pollAnimationProgress));
                                    pollButton2.percentProgress = pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * this.pollAnimationProgress);
                                    i154++;
                                    messageObject7 = messageObject;
                                    f10 = 1.0f;
                                    i146 = -1;
                                    i147 = 2;
                                }
                            }
                            arrayList = arrayList6;
                        }
                        this.pollAnimationProgress = !this.animatePollAnswer ? 1.0f : 0.0f;
                        if (this.animatePollAnswerAlpha) {
                            isSendingVote = null;
                        } else {
                            this.pollVoteInProgress = false;
                            this.pollVoteInProgressNum = i146;
                            isSendingVote = SendMessagesHelper.getInstance(this.currentAccount).isSendingVote(this.currentMessageObject);
                        }
                        StaticLayout staticLayout9 = this.titleLayout;
                        int height = staticLayout9 == null ? 0 : staticLayout9.getHeight();
                        int i155 = 100;
                        int size5 = tLRPC$TL_messageMediaPoll3.poll.answers.size();
                        byte[] bArr = isSendingVote;
                        int i156 = height;
                        int i157 = 0;
                        int i158 = 0;
                        int i159 = 0;
                        boolean z52 = false;
                        while (i159 < size5) {
                            PollButton pollButton3 = new PollButton();
                            pollButton3.answer = tLRPC$TL_messageMediaPoll3.poll.answers.get(i159);
                            int i160 = size5;
                            int i161 = i159;
                            pollButton3.title = new StaticLayout(Emoji.replaceEmoji(pollButton3.answer.text, Theme.chat_audioPerformerPaint.getFontMetricsInt(), AndroidUtilities.dp(15.0f), false), Theme.chat_audioPerformerPaint, min3 - AndroidUtilities.dp(33.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            pollButton3.y = AndroidUtilities.dp(52.0f) + i156;
                            pollButton3.height = pollButton3.title.getHeight();
                            this.pollButtons.add(pollButton3);
                            arrayList5.add(pollButton3);
                            i156 += pollButton3.height + AndroidUtilities.dp(26.0f);
                            if (!tLRPC$TL_messageMediaPoll3.results.results.isEmpty()) {
                                int size6 = tLRPC$TL_messageMediaPoll3.results.results.size();
                                int i162 = 0;
                                while (true) {
                                    if (i162 >= size6) {
                                        break;
                                    }
                                    TLRPC$TL_pollAnswerVoters tLRPC$TL_pollAnswerVoters2 = tLRPC$TL_messageMediaPoll3.results.results.get(i162);
                                    if (!Arrays.equals(pollButton3.answer.option, tLRPC$TL_pollAnswerVoters2.option)) {
                                        i162++;
                                    } else {
                                        pollButton3.chosen = tLRPC$TL_pollAnswerVoters2.chosen;
                                        pollButton3.count = tLRPC$TL_pollAnswerVoters2.voters;
                                        pollButton3.correct = tLRPC$TL_pollAnswerVoters2.correct;
                                        if ((!this.pollVoted && !this.pollClosed) || (i71 = tLRPC$TL_messageMediaPoll3.results.total_voters) <= 0) {
                                            pollButton3.percent = 0;
                                            pollButton3.decimal = 0.0f;
                                        } else {
                                            pollButton3.decimal = (tLRPC$TL_pollAnswerVoters2.voters / i71) * 100.0f;
                                            pollButton3.percent = (int) pollButton3.decimal;
                                            PollButton.access$2524(pollButton3, pollButton3.percent);
                                        }
                                        if (i158 != 0) {
                                            if (pollButton3.percent != 0 && i158 != pollButton3.percent) {
                                                z31 = true;
                                                i155 -= pollButton3.percent;
                                                i157 = Math.max(pollButton3.percent, i157);
                                                z52 = z31;
                                            }
                                        } else {
                                            i158 = pollButton3.percent;
                                        }
                                        z31 = z52;
                                        i155 -= pollButton3.percent;
                                        i157 = Math.max(pollButton3.percent, i157);
                                        z52 = z31;
                                    }
                                }
                            }
                            if (arrayList != null) {
                                int size7 = arrayList.size();
                                int i163 = 0;
                                while (true) {
                                    if (i163 >= size7) {
                                        break;
                                    }
                                    PollButton pollButton4 = (PollButton) arrayList.get(i163);
                                    if (Arrays.equals(pollButton3.answer.option, pollButton4.answer.option)) {
                                        pollButton3.prevPercent = pollButton4.percent;
                                        pollButton3.prevPercentProgress = pollButton4.percentProgress;
                                        pollButton3.prevChosen = pollButton4.chosen;
                                        break;
                                    }
                                    i163++;
                                }
                            }
                            if (bArr != null && pollButton3.answer.option.length > 0 && Arrays.binarySearch(bArr, pollButton3.answer.option[0]) >= 0) {
                                i70 = i161;
                                this.pollVoteInProgressNum = i70;
                                this.pollVoteInProgress = true;
                                this.vibrateOnPollVote = true;
                                bArr = null;
                            } else {
                                i70 = i161;
                            }
                            if (this.currentMessageObject.checkedVotes.contains(pollButton3.answer)) {
                                this.pollCheckBox[i70].setChecked(true, false);
                            } else {
                                this.pollCheckBox[i70].setChecked(false, false);
                            }
                            i159 = i70 + 1;
                            messageObject7 = messageObject;
                            size5 = i160;
                            f10 = 1.0f;
                            i147 = 2;
                        }
                        if (z52 && i155 != 0) {
                            Collections.sort(arrayList5, ChatMessageCell$$ExternalSyntheticLambda9.INSTANCE);
                            int min4 = Math.min(i155, arrayList5.size());
                            for (int i164 = 0; i164 < min4; i164++) {
                                PollButton.access$1812((PollButton) arrayList5.get(i164), 1);
                            }
                        }
                        int dp28 = this.backgroundWidth - AndroidUtilities.dp(76.0f);
                        int size8 = this.pollButtons.size();
                        for (int i165 = 0; i165 < size8; i165++) {
                            this.pollButtons.get(i165).percentProgress = Math.max(AndroidUtilities.dp(5.0f) / dp28, i157 == 0 ? 0.0f : pollButton.percent / i157);
                        }
                        setMessageObjectInternal(messageObject);
                        this.pollInstantViewTouchesBottom = false;
                        if (this.isBot && !this.drawInstantView) {
                            i156 -= AndroidUtilities.dp(10.0f);
                        } else {
                            TLRPC$Poll tLRPC$Poll7 = tLRPC$TL_messageMediaPoll3.poll;
                            if (tLRPC$Poll7.public_voters || tLRPC$Poll7.multiple_choice) {
                                this.pollInstantViewTouchesBottom = true;
                                i156 += AndroidUtilities.dp(13.0f);
                            }
                        }
                        int dp29 = AndroidUtilities.dp(73.0f);
                        int i166 = this.namesOffset;
                        this.totalHeight = dp29 + i166 + i156;
                        if (this.drawPinnedTop) {
                            this.namesOffset = i166 - AndroidUtilities.dp(f10);
                        }
                        this.instantTextNewLine = false;
                        TLRPC$Poll tLRPC$Poll8 = tLRPC$TL_messageMediaPoll3.poll;
                        if (tLRPC$Poll8.public_voters || tLRPC$Poll8.multiple_choice) {
                            int i167 = 0;
                            int i168 = 0;
                            for (int i169 = 3; i168 < i169; i169 = 3) {
                                if (i168 == 0) {
                                    string4 = LocaleController.getString("PollViewResults", R.string.PollViewResults);
                                } else if (i168 == 1) {
                                    string4 = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
                                } else {
                                    string4 = LocaleController.getString("NoVotes", R.string.NoVotes);
                                }
                                i167 = Math.max(i167, (int) Math.ceil(Theme.chat_instantViewPaint.measureText(string4)));
                                i168++;
                            }
                            int dp30 = this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX();
                            ReactionsLayoutInBubble reactionsLayoutInBubble13 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble13.isSmall && reactionsLayoutInBubble13.isEmpty && dp30 >= ((this.backgroundWidth - AndroidUtilities.dp(76.0f)) - i167) / i147) {
                                this.totalHeight += AndroidUtilities.dp(18.0f);
                                this.instantTextNewLine = true;
                            }
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble14 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble14.isSmall && !reactionsLayoutInBubble14.isEmpty) {
                            reactionsLayoutInBubble14.measure(min3, 3);
                            this.totalHeight += this.reactionsLayoutInBubble.height + AndroidUtilities.dp(12.0f);
                            if (this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX() >= (this.backgroundWidth - AndroidUtilities.dp(24.0f)) - this.reactionsLayoutInBubble.lastLineX) {
                                this.totalHeight += AndroidUtilities.dp(16.0f);
                                this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(16.0f);
                            }
                        }
                    } else {
                        this.drawForwardedName = messageObject14.messageOwner.fwd_from != null && (!messageObject.isAnyKindOfSticker() || !messageObject.isDice());
                        if (!messageObject.isAnyKindOfSticker() && messageObject14.type != 5) {
                            this.drawName = ((messageObject.isFromGroup() && messageObject.isSupergroup()) || (messageObject.isImportedForward() && messageObject14.messageOwner.fwd_from.from_id == null)) && ((groupedMessagePosition11 = this.currentPosition) == null || (groupedMessagePosition11.flags & 4) != 0);
                        }
                        int i170 = messageObject14.type;
                        this.mediaBackground = i170 != 9;
                        this.drawImageButton = true;
                        this.drawPhotoImage = true;
                        if (messageObject14.gifState != 2.0f && !SharedConfig.autoplayGifs && (i170 == 8 || i170 == 5)) {
                            messageObject14.gifState = 1.0f;
                        }
                        this.photoImage.setAllowDecodeSingleFrame(true);
                        if (messageObject.isVideo()) {
                            this.photoImage.setAllowStartAnimation(true);
                        } else if (messageObject.isRoundVideo()) {
                            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                            this.photoImage.setAllowStartAnimation(playingMessageObject == null || !playingMessageObject.isRoundVideo());
                        } else {
                            this.photoImage.setAllowStartAnimation(messageObject14.gifState == 0.0f);
                        }
                        this.photoImage.setForcePreview(messageObject.needDrawBluredPreview());
                        int i171 = messageObject14.type;
                        if (i171 == 9) {
                            messageObject8 = messageObject14;
                            f5 = 1.0f;
                            if (!AndroidUtilities.isTablet()) {
                                this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(300.0f));
                            } else {
                                this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(300.0f));
                            }
                            if (checkNeedDrawShareButton(messageObject)) {
                                this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                            }
                            int dp31 = this.backgroundWidth - AndroidUtilities.dp(138.0f);
                            createDocumentLayout(dp31, messageObject8);
                            int dp32 = ((this.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                            if (!messageObject8.isRestrictedMessage && !TextUtils.isEmpty(messageObject8.caption)) {
                                try {
                                    CharSequence charSequence4 = messageObject8.caption;
                                    this.currentCaption = charSequence4;
                                    if (Build.VERSION.SDK_INT >= 24) {
                                        this.captionLayout = StaticLayout.Builder.obtain(charSequence4, 0, charSequence4.length(), Theme.chat_msgTextPaint, dp32).setBreakStrategy(1).setHyphenationFrequency(0).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                    } else {
                                        this.captionLayout = new StaticLayout(messageObject8.caption, Theme.chat_msgTextPaint, dp32, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    }
                                    updateCaptionSpoilers();
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                            }
                            StaticLayout staticLayout10 = this.docTitleLayout;
                            if (staticLayout10 == null) {
                                i73 = 0;
                            } else {
                                int lineCount3 = staticLayout10.getLineCount();
                                int i172 = 0;
                                for (int i173 = 0; i173 < lineCount3; i173++) {
                                    i172 = Math.max(i172, ((int) Math.ceil(this.docTitleLayout.getLineWidth(i173) + this.docTitleLayout.getLineLeft(i173))) + AndroidUtilities.dp(86 + (!this.drawPhotoImage ? 22 : 52)));
                                }
                                i73 = i172;
                            }
                            StaticLayout staticLayout11 = this.infoLayout;
                            if (staticLayout11 != null) {
                                int lineCount4 = staticLayout11.getLineCount();
                                int i174 = i73;
                                for (int i175 = 0; i175 < lineCount4; i175++) {
                                    i174 = Math.max(i174, this.infoWidth + AndroidUtilities.dp(86 + (!this.drawPhotoImage ? 22 : 52)));
                                }
                                i73 = i174;
                            }
                            StaticLayout staticLayout12 = this.captionLayout;
                            if (staticLayout12 != null) {
                                int lineCount5 = staticLayout12.getLineCount();
                                int i176 = i73;
                                for (int i177 = 0; i177 < lineCount5; i177++) {
                                    int ceil8 = ((int) Math.ceil(Math.min(dp32, this.captionLayout.getLineWidth(i177) + this.captionLayout.getLineLeft(i177)))) + AndroidUtilities.dp(31.0f);
                                    if (ceil8 > i176) {
                                        i176 = ceil8;
                                    }
                                }
                                i73 = i176;
                            }
                            ReactionsLayoutInBubble reactionsLayoutInBubble15 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble15.isSmall) {
                                reactionsLayoutInBubble15.measure(dp32, 3);
                                ReactionsLayoutInBubble reactionsLayoutInBubble16 = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble16.isEmpty && reactionsLayoutInBubble16.width + AndroidUtilities.dp(31.0f) > i73) {
                                    i73 = this.reactionsLayoutInBubble.width + AndroidUtilities.dp(31.0f);
                                }
                            }
                            if (i73 > 0 && this.currentPosition == null) {
                                this.backgroundWidth = i73;
                                dp31 = i73 - AndroidUtilities.dp(31.0f);
                            }
                            this.availableTimeWidth = dp31;
                            if (this.drawPhotoImage) {
                                dp10 = AndroidUtilities.dp(86.0f);
                                dp11 = AndroidUtilities.dp(86.0f);
                                this.availableTimeWidth -= dp10;
                            } else {
                                dp10 = AndroidUtilities.dp(56.0f);
                                dp11 = AndroidUtilities.dp(56.0f);
                                StaticLayout staticLayout13 = this.docTitleLayout;
                                if (staticLayout13 != null && staticLayout13.getLineCount() > 1) {
                                    dp11 += (this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                }
                                if (TextUtils.isEmpty(messageObject8.caption) && (staticLayout4 = this.infoLayout) != null) {
                                    int lineCount6 = staticLayout4.getLineCount();
                                    measureTime(messageObject);
                                    int dp33 = (this.backgroundWidth - AndroidUtilities.dp(122.0f)) - this.infoWidth;
                                    ReactionsLayoutInBubble reactionsLayoutInBubble17 = this.reactionsLayoutInBubble;
                                    if (reactionsLayoutInBubble17.isSmall || reactionsLayoutInBubble17.isEmpty) {
                                        if (dp33 < this.timeWidth) {
                                            dp12 = AndroidUtilities.dp(12.0f);
                                        } else if (lineCount6 == 1) {
                                            dp12 = AndroidUtilities.dp(4.0f);
                                        }
                                        dp11 += dp12;
                                    }
                                }
                            }
                            i74 = dp10;
                            i75 = dp11;
                            ReactionsLayoutInBubble reactionsLayoutInBubble18 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble18.isSmall && !reactionsLayoutInBubble18.isEmpty) {
                                if (!this.drawPhotoImage) {
                                    reactionsLayoutInBubble18.positionOffsetY += AndroidUtilities.dp(2.0f);
                                }
                                if (this.captionLayout != null && this.currentPosition != null && (groupedMessages5 = this.currentMessagesGroup) != null && groupedMessages5.isDocuments) {
                                    this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                } else if (!this.drawPhotoImage && !TextUtils.isEmpty(messageObject8.caption) && (((staticLayout3 = this.docTitleLayout) != null && staticLayout3.getLineCount() > 1) || this.currentMessageObject.hasValidReplyMessageObject())) {
                                    this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                } else if (!this.drawPhotoImage && !TextUtils.isEmpty(messageObject8.caption) && !this.currentMessageObject.isOutOwner()) {
                                    this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                }
                                ReactionsLayoutInBubble reactionsLayoutInBubble19 = this.reactionsLayoutInBubble;
                                reactionsLayoutInBubble19.totalHeight = reactionsLayoutInBubble19.height + AndroidUtilities.dp(8.0f);
                                measureTime(messageObject);
                                if (this.drawPhotoImage && this.captionLayout == null) {
                                    this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(8.0f);
                                }
                                if (this.captionLayout != null && (messageObject9 = this.currentMessageObject) != null && messageObject9.isOutOwner() && this.currentMessageObject.isDocument() && this.currentMessagesGroup == null && !this.currentMessageObject.isForwarded() && !this.currentMessageObject.isReply()) {
                                    this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(10.0f);
                                }
                                if ((this.backgroundWidth - this.reactionsLayoutInBubble.lastLineX) - AndroidUtilities.dp(31.0f) < this.timeWidth) {
                                    this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                    this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                }
                                i76 = this.reactionsLayoutInBubble.totalHeight + 0;
                            } else {
                                i76 = 0;
                            }
                            i77 = i76;
                        } else if (i171 == 4) {
                            messageObject8 = messageObject14;
                            TLRPC$GeoPoint tLRPC$GeoPoint = MessageObject.getMedia(messageObject8.messageOwner).geo;
                            double d3 = tLRPC$GeoPoint.lat;
                            double d4 = tLRPC$GeoPoint._long;
                            if (((int) messageObject.getDialogId()) == 0 && (i85 = SharedConfig.mapPreviewType) != 0) {
                                if (i85 == 1) {
                                    i81 = 4;
                                } else if (i85 == 3) {
                                    i81 = 1;
                                }
                                if (!(MessageObject.getMedia(messageObject8.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive)) {
                                    if (!AndroidUtilities.isTablet()) {
                                        this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    int dp34 = this.backgroundWidth - AndroidUtilities.dp(37.0f);
                                    this.availableTimeWidth = dp34;
                                    int dp35 = dp34 - AndroidUtilities.dp(54.0f);
                                    dp14 = this.backgroundWidth - AndroidUtilities.dp(17.0f);
                                    dp15 = AndroidUtilities.dp(195.0f);
                                    double d5 = 268435456;
                                    Double.isNaN(d5);
                                    double d6 = d5 / 3.141592653589793d;
                                    double d7 = (d3 * 3.141592653589793d) / 180.0d;
                                    Double.isNaN(d5);
                                    double round2 = Math.round(d5 - ((Math.log((Math.sin(d7) + 1.0d) / (1.0d - Math.sin(d7))) * d6) / 2.0d)) - (AndroidUtilities.dp(10.3f) << 6);
                                    Double.isNaN(round2);
                                    Double.isNaN(d5);
                                    double atan = ((1.5707963267948966d - (Math.atan(Math.exp((round2 - d5) / d6)) * 2.0d)) * 180.0d) / 3.141592653589793d;
                                    int i178 = this.currentAccount;
                                    float f13 = dp14;
                                    float f14 = AndroidUtilities.density;
                                    float f15 = dp15;
                                    this.currentUrl = AndroidUtilities.formapMapUrl(i178, atan, d4, (int) (f13 / f14), (int) (f15 / f14), false, 15, i81);
                                    long j3 = tLRPC$GeoPoint.access_hash;
                                    float f16 = AndroidUtilities.density;
                                    this.currentWebFile = WebFile.createWithGeoPoint(atan, d4, j3, (int) (f13 / f16), (int) (f15 / f16), 15, Math.min(2, (int) Math.ceil(f16)));
                                    this.photoImage.setCrossfadeWithOldImage(true);
                                    boolean isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject);
                                    this.locationExpired = isCurrentLocationTimeExpired;
                                    if (!isCurrentLocationTimeExpired) {
                                        this.mediaBackground = false;
                                        dp16 = AndroidUtilities.dp(56.0f);
                                        AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
                                        this.scheduledInvalidate = true;
                                    } else {
                                        this.backgroundWidth -= AndroidUtilities.dp(9.0f);
                                        dp16 = 0;
                                    }
                                    this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp35, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp35 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    updateCurrentUserAndChat();
                                    TLRPC$User tLRPC$User = this.currentUser;
                                    if (tLRPC$User != null) {
                                        this.contactAvatarDrawable.setInfo(tLRPC$User);
                                        this.locationImageReceiver.setForUserOrChat(this.currentUser, this.contactAvatarDrawable);
                                    } else {
                                        TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                                        if (tLRPC$Chat2 != null) {
                                            TLRPC$ChatPhoto tLRPC$ChatPhoto = tLRPC$Chat2.photo;
                                            if (tLRPC$ChatPhoto != null) {
                                                this.currentPhoto = tLRPC$ChatPhoto.photo_small;
                                            }
                                            this.contactAvatarDrawable.setInfo(tLRPC$Chat2);
                                            this.locationImageReceiver.setForUserOrChat(this.currentChat, this.contactAvatarDrawable);
                                        } else {
                                            this.locationImageReceiver.setImage(null, null, this.contactAvatarDrawable, null, null, 0);
                                        }
                                    }
                                    messageObject8 = messageObject;
                                    int i179 = messageObject8.messageOwner.edit_date;
                                    this.infoLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.formatLocationUpdateDate(i179 == 0 ? tLRPC$Message2.date : i179), Theme.chat_locationAddressPaint, AndroidUtilities.dp(2.0f) + dp35, TextUtils.TruncateAt.END), Theme.chat_locationAddressPaint, dp35, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                } else if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject8.messageOwner).title)) {
                                    if (!AndroidUtilities.isTablet()) {
                                        this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    int dp36 = this.backgroundWidth - AndroidUtilities.dp(34.0f);
                                    this.availableTimeWidth = dp36;
                                    dp14 = this.backgroundWidth - AndroidUtilities.dp(17.0f);
                                    dp15 = AndroidUtilities.dp(195.0f);
                                    this.mediaBackground = false;
                                    int i180 = this.currentAccount;
                                    float f17 = dp14;
                                    float f18 = AndroidUtilities.density;
                                    float f19 = dp15;
                                    this.currentUrl = AndroidUtilities.formapMapUrl(i180, d3, d4, (int) (f17 / f18), (int) (f19 / f18), true, 15, i81);
                                    float f20 = AndroidUtilities.density;
                                    this.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f17 / f20), (int) (f19 / f20), 15, Math.min(2, (int) Math.ceil(f20)));
                                    this.docTitleLayout = StaticLayoutEx.createStaticLayout(MessageObject.getMedia(messageObject8.messageOwner).title, Theme.chat_locationTitlePaint, dp36 + AndroidUtilities.dp(4.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, dp36, 1);
                                    int dp37 = AndroidUtilities.dp(50.0f) + 0;
                                    this.docTitleLayout.getLineCount();
                                    if (!TextUtils.isEmpty(MessageObject.getMedia(messageObject8.messageOwner).address)) {
                                        this.infoLayout = StaticLayoutEx.createStaticLayout(MessageObject.getMedia(messageObject8.messageOwner).address, Theme.chat_locationAddressPaint, dp36, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, dp36, 1);
                                        measureTime(messageObject);
                                        int ceil9 = (this.backgroundWidth - ((int) Math.ceil(this.infoLayout.getLineWidth(0)))) - AndroidUtilities.dp(24.0f);
                                        boolean z53 = this.infoLayout.getLineLeft(0) > 0.0f;
                                        if (!z53) {
                                        }
                                        dp37 += AndroidUtilities.dp(!z53 ? 8.0f : 10.0f);
                                        dp16 = dp37;
                                    } else {
                                        this.infoLayout = null;
                                        dp16 = dp37;
                                    }
                                } else {
                                    if (!AndroidUtilities.isTablet()) {
                                        this.backgroundWidth = Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    } else {
                                        this.backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 50.0f : 102.0f), AndroidUtilities.dp(289.0f));
                                    }
                                    this.backgroundWidth -= AndroidUtilities.dp(4.0f);
                                    if (checkNeedDrawShareButton(messageObject)) {
                                        this.backgroundWidth -= AndroidUtilities.dp(20.0f);
                                    }
                                    this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(34.0f);
                                    int dp38 = this.backgroundWidth - AndroidUtilities.dp(8.0f);
                                    int dp39 = AndroidUtilities.dp(195.0f);
                                    int i181 = this.currentAccount;
                                    float f21 = dp38;
                                    float f22 = AndroidUtilities.density;
                                    float f23 = dp39;
                                    this.currentUrl = AndroidUtilities.formapMapUrl(i181, d3, d4, (int) (f21 / f22), (int) (f23 / f22), true, 15, i81);
                                    float f24 = AndroidUtilities.density;
                                    this.currentWebFile = WebFile.createWithGeoPoint(tLRPC$GeoPoint, (int) (f21 / f24), (int) (f23 / f24), 15, Math.min(2, (int) Math.ceil(f24)));
                                    i74 = dp38;
                                    i82 = dp39;
                                    dp16 = 0;
                                    if (((int) messageObject.getDialogId()) == 0) {
                                        int i182 = SharedConfig.mapPreviewType;
                                        if (i182 == 0) {
                                            i83 = -1;
                                            this.currentMapProvider = 2;
                                        } else if (i182 == 1) {
                                            i83 = -1;
                                            this.currentMapProvider = 1;
                                        } else if (i182 == 3) {
                                            i83 = -1;
                                            this.currentMapProvider = 1;
                                        } else {
                                            i83 = -1;
                                            this.currentMapProvider = -1;
                                        }
                                    } else {
                                        this.currentMapProvider = MessagesController.getInstance(messageObject8.currentAccount).mapProvider;
                                        i83 = -1;
                                    }
                                    if (this.locationLoadingThumb == null) {
                                        SvgHelper.SvgDrawable svgThumb = DocumentObject.getSvgThumb(R.raw.map_placeholder, "chat_outLocationIcon", (!Theme.isCurrentThemeDark() ? 6 : 3) * 0.12f);
                                        svgThumb.setAspectCenter(true);
                                        this.locationLoadingThumb = new ClipRoundedDrawable(svgThumb);
                                    }
                                    drawable = this.locationLoadingThumb;
                                    if ((drawable instanceof ClipRoundedDrawable) && (((ClipRoundedDrawable) drawable).getDrawable() instanceof SvgHelper.SvgDrawable)) {
                                        ((SvgHelper.SvgDrawable) ((ClipRoundedDrawable) this.locationLoadingThumb).getDrawable()).setColorKey(messageObject.isOutOwner() ? "chat_inLocationIcon" : "chat_outLocationIcon", this.resourcesProvider);
                                    }
                                    this.photoImage.setCrossfadeDuration(300);
                                    this.photoImage.setCrossfadeByScale(0.05f);
                                    i84 = this.currentMapProvider;
                                    if (i84 != i83) {
                                        if (i84 == 2) {
                                            WebFile webFile5 = this.currentWebFile;
                                            if (webFile5 != null) {
                                                Object obj3 = messageObject8.lastGeoWebFileLoaded;
                                                ImageLocation imageLocation = !(obj3 instanceof ImageLocation) ? null : (ImageLocation) obj3;
                                                messageObject8.lastGeoWebFileSet = ImageLocation.getForWebFile(webFile5);
                                                f5 = 1.0f;
                                                this.photoImage.setImage(ImageLocation.getForWebFile(this.currentWebFile), (String) null, imageLocation, (String) null, this.locationLoadingThumb, messageObject, 0);
                                            }
                                        } else {
                                            if (i84 == 3 || i84 == 4) {
                                                ImageLoader.getInstance().addTestWebFile(this.currentUrl, this.currentWebFile);
                                                this.addedForTest = true;
                                            }
                                            String str21 = this.currentUrl;
                                            if (str21 != null) {
                                                this.photoImage.setImage(str21, null, this.locationLoadingThumb, null, 0L);
                                            }
                                        }
                                        f5 = 1.0f;
                                    } else {
                                        f5 = 1.0f;
                                        this.photoImage.setImage(null, null, null, null, messageObject, 0);
                                    }
                                    reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                                    if (!reactionsLayoutInBubble5.isSmall && !reactionsLayoutInBubble5.isEmpty) {
                                        reactionsLayoutInBubble5.measure(this.backgroundWidth - AndroidUtilities.dp(16.0f), 3);
                                        ReactionsLayoutInBubble reactionsLayoutInBubble20 = this.reactionsLayoutInBubble;
                                        reactionsLayoutInBubble20.totalHeight = reactionsLayoutInBubble20.height + AndroidUtilities.dp(14.0f);
                                        measureTime(messageObject);
                                        if (this.reactionsLayoutInBubble.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(12.0f);
                                            this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(12.0f);
                                        }
                                        dp16 += this.reactionsLayoutInBubble.totalHeight;
                                    }
                                    i77 = dp16;
                                    i75 = i82;
                                }
                                i74 = dp14;
                                i82 = dp15;
                                if (((int) messageObject.getDialogId()) == 0) {
                                }
                                if (this.locationLoadingThumb == null) {
                                }
                                drawable = this.locationLoadingThumb;
                                if (drawable instanceof ClipRoundedDrawable) {
                                    ((SvgHelper.SvgDrawable) ((ClipRoundedDrawable) this.locationLoadingThumb).getDrawable()).setColorKey(messageObject.isOutOwner() ? "chat_inLocationIcon" : "chat_outLocationIcon", this.resourcesProvider);
                                }
                                this.photoImage.setCrossfadeDuration(300);
                                this.photoImage.setCrossfadeByScale(0.05f);
                                i84 = this.currentMapProvider;
                                if (i84 != i83) {
                                }
                                reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble5.isSmall) {
                                    reactionsLayoutInBubble5.measure(this.backgroundWidth - AndroidUtilities.dp(16.0f), 3);
                                    ReactionsLayoutInBubble reactionsLayoutInBubble202 = this.reactionsLayoutInBubble;
                                    reactionsLayoutInBubble202.totalHeight = reactionsLayoutInBubble202.height + AndroidUtilities.dp(14.0f);
                                    measureTime(messageObject);
                                    if (this.reactionsLayoutInBubble.lastLineX + this.timeWidth + AndroidUtilities.dp(24.0f) > this.backgroundWidth) {
                                    }
                                    dp16 += this.reactionsLayoutInBubble.totalHeight;
                                }
                                i77 = dp16;
                                i75 = i82;
                            }
                            i81 = -1;
                            if (!(MessageObject.getMedia(messageObject8.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive)) {
                            }
                            i74 = dp14;
                            i82 = dp15;
                            if (((int) messageObject.getDialogId()) == 0) {
                            }
                            if (this.locationLoadingThumb == null) {
                            }
                            drawable = this.locationLoadingThumb;
                            if (drawable instanceof ClipRoundedDrawable) {
                            }
                            this.photoImage.setCrossfadeDuration(300);
                            this.photoImage.setCrossfadeByScale(0.05f);
                            i84 = this.currentMapProvider;
                            if (i84 != i83) {
                            }
                            reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                            if (!reactionsLayoutInBubble5.isSmall) {
                            }
                            i77 = dp16;
                            i75 = i82;
                        } else if (i171 == 19) {
                            messageObject8 = messageObject14;
                            this.drawBackground = false;
                            int i183 = messageObject8.textWidth;
                            int dp40 = messageObject8.textHeight + AndroidUtilities.dp(32.0f);
                            this.backgroundWidth = AndroidUtilities.dp(14.0f) + i183;
                            this.availableTimeWidth = i183 - AndroidUtilities.dp(12.0f);
                            if (AndroidUtilities.isTablet()) {
                                minTabletSide7 = AndroidUtilities.getMinTabletSide();
                                f6 = 0.4f;
                            } else {
                                minTabletSide7 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                f6 = 0.5f;
                            }
                            int max5 = Math.max(this.backgroundWidth, (int) (minTabletSide7 * f6));
                            ReactionsLayoutInBubble reactionsLayoutInBubble21 = this.reactionsLayoutInBubble;
                            if (reactionsLayoutInBubble21.isSmall) {
                                dp17 = 0;
                            } else {
                                reactionsLayoutInBubble21.measure(max5, !this.currentMessageObject.isOutOwner() ? 3 : 5);
                                ReactionsLayoutInBubble reactionsLayoutInBubble22 = this.reactionsLayoutInBubble;
                                reactionsLayoutInBubble22.drawServiceShaderBackground = 1.0f;
                                int i184 = reactionsLayoutInBubble22.height;
                                reactionsLayoutInBubble22.totalHeight = i184;
                                dp17 = 0 + i184 + AndroidUtilities.dp(8.0f);
                                this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(8.0f);
                            }
                            if (!this.drawTopic || (((messageObject10 = this.currentMessageObject) == null || messageObject10.replyMessageObject == null) && ((staticLayoutArr = this.forwardedNameLayout) == null || staticLayoutArr[0] == null))) {
                                dp17 -= AndroidUtilities.dp(17.0f);
                            }
                            i77 = dp17;
                            i74 = i183;
                            i75 = dp40;
                            c3 = 0;
                            f5 = 1.0f;
                            z32 = true;
                            if (this.blurredPhotoImage.getBitmap() != null) {
                            }
                            if (this.photoImage.getBitmap() != null) {
                                this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                            }
                            setMessageObjectInternal(messageObject);
                            if (this.drawForwardedName) {
                                if (messageObject8.type != 5) {
                                }
                                this.totalHeight = AndroidUtilities.dp(14.0f) + i75 + this.namesOffset + i77;
                                if (messageObject.isVoiceTranscriptionOpen()) {
                                }
                                groupedMessagePosition6 = this.currentPosition;
                                if (groupedMessagePosition6 != null) {
                                    this.totalHeight -= AndroidUtilities.dp(3.0f);
                                }
                                if (this.currentMessageObject.isDice()) {
                                }
                                if (this.currentPosition != null) {
                                    int additionalWidthForPosition2 = i74 + getAdditionalWidthForPosition(this.currentPosition);
                                    if ((this.currentPosition.flags & 4) == 0) {
                                    }
                                    if ((this.currentPosition.flags & 8) == 0) {
                                    }
                                    i78 = additionalWidthForPosition2;
                                    if (this.currentMessageObject.type == 19) {
                                    }
                                    if (this.currentPosition != null) {
                                    }
                                    if (messageObject.isRoundVideo()) {
                                        this.photoImage.setImageCoords(0.0f, AndroidUtilities.dp(13.0f), AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                                        invalidate();
                                        c = c3;
                                        messageObject4 = messageObject8;
                                        z24 = z32;
                                        i35 = 4;
                                        i36 = 3;
                                        r15 = 0;
                                        f3 = 1.0f;
                                    }
                                    this.photoImage.setImageCoords(0.0f, dp13 + this.namesOffset + i79, i78, i75);
                                    invalidate();
                                    c = c3;
                                    messageObject4 = messageObject8;
                                    z24 = z32;
                                    i35 = 4;
                                    i36 = 3;
                                    r15 = 0;
                                    f3 = 1.0f;
                                }
                                if (this.currentPosition != null) {
                                    i80 = this.currentPosition.flags;
                                    if ((i80 & 4) == 0) {
                                        this.totalHeight -= AndroidUtilities.dp(2.0f);
                                    }
                                }
                                i78 = i74;
                                i79 = 0;
                                if (this.currentMessageObject.type == 19) {
                                }
                                if (this.currentPosition != null) {
                                }
                                if (messageObject.isRoundVideo()) {
                                }
                                this.photoImage.setImageCoords(0.0f, dp13 + this.namesOffset + i79, i78, i75);
                                invalidate();
                                c = c3;
                                messageObject4 = messageObject8;
                                z24 = z32;
                                i35 = 4;
                                i36 = 3;
                                r15 = 0;
                                f3 = 1.0f;
                            }
                            if (this.drawNameLayout) {
                                this.namesOffset += AndroidUtilities.dp(7.0f);
                            }
                            this.totalHeight = AndroidUtilities.dp(14.0f) + i75 + this.namesOffset + i77;
                            if (messageObject.isVoiceTranscriptionOpen()) {
                            }
                            groupedMessagePosition6 = this.currentPosition;
                            if (groupedMessagePosition6 != null) {
                            }
                            if (this.currentMessageObject.isDice()) {
                            }
                            if (this.currentPosition != null) {
                            }
                            if (this.currentPosition != null) {
                            }
                            i78 = i74;
                            i79 = 0;
                            if (this.currentMessageObject.type == 19) {
                            }
                            if (this.currentPosition != null) {
                            }
                            if (messageObject.isRoundVideo()) {
                            }
                            this.photoImage.setImageCoords(0.0f, dp13 + this.namesOffset + i79, i78, i75);
                            invalidate();
                            c = c3;
                            messageObject4 = messageObject8;
                            z24 = z32;
                            i35 = 4;
                            i36 = 3;
                            r15 = 0;
                            f3 = 1.0f;
                        } else {
                            if (messageObject.isAnyKindOfSticker()) {
                                this.drawBackground = false;
                                messageObject8 = messageObject;
                                boolean z54 = messageObject8.type == 13;
                                TLRPC$Document document2 = messageObject.getDocument();
                                if (document2 != null) {
                                    for (int i185 = 0; i185 < document2.attributes.size(); i185++) {
                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute = document2.attributes.get(i185);
                                        if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeImageSize) {
                                            i86 = tLRPC$DocumentAttribute.w;
                                            i87 = tLRPC$DocumentAttribute.h;
                                            break;
                                        } else if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo) {
                                            i86 = tLRPC$DocumentAttribute.w;
                                            i87 = tLRPC$DocumentAttribute.h;
                                            break;
                                        }
                                    }
                                }
                                i86 = 0;
                                i87 = 0;
                                if ((messageObject.isAnimatedSticker() || messageObject.isVideoSticker()) && i86 == 0 && i87 == 0) {
                                    i86 = 512;
                                    i87 = 512;
                                }
                                if (messageObject.isAnimatedAnimatedEmoji()) {
                                    i86 = Math.max(512, i86);
                                    i87 = Math.max(512, i87);
                                    if (MessageObject.isTextColorEmoji(messageObject.getDocument())) {
                                        this.photoImage.setColorFilter(Theme.chat_animatedEmojiTextColorFilter);
                                    }
                                }
                                if (AndroidUtilities.isTablet()) {
                                    minTabletSide8 = AndroidUtilities.getMinTabletSide();
                                    f7 = 0.4f;
                                } else {
                                    minTabletSide8 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                    f7 = 0.5f;
                                }
                                int i186 = (int) (minTabletSide8 * f7);
                                float f25 = i186;
                                if (!messageObject.isAnimatedEmoji() && !messageObject.isDice()) {
                                    if (i86 == 0) {
                                        i87 = (int) f25;
                                        i86 = AndroidUtilities.dp(100.0f) + i87;
                                    }
                                    float f26 = i186;
                                    int i187 = (int) (i87 * (f26 / i86));
                                    float f27 = i187;
                                    if (f27 <= f25) {
                                        i91 = i187;
                                        i90 = i186;
                                        float f28 = AndroidUtilities.density;
                                        int i188 = (int) (i90 / f28);
                                        int i189 = (int) (i91 / f28);
                                        ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                                        boolean z55 = chatMessageCellDelegate3 != null && chatMessageCellDelegate3.shouldRepeatSticker(messageObject8);
                                        bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                        if (bitmapDrawable2 == null) {
                                            this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject8.photoThumbs, 40);
                                        } else {
                                            this.currentPhotoObjectThumbStripped = bitmapDrawable2;
                                        }
                                        this.photoParentObject = messageObject8.photoThumbsObject;
                                        if (messageObject.isDice()) {
                                            String format3 = String.format(Locale.US, "%d_%d_dice_%s_%s", Integer.valueOf(i188), Integer.valueOf(i189), messageObject.getDiceEmoji(), messageObject.toString());
                                            this.photoImage.setAutoRepeat(2);
                                            String diceEmoji = this.currentMessageObject.getDiceEmoji();
                                            TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                                            if (stickerSetByEmojiOrName != null && stickerSetByEmojiOrName.documents.size() > 0 && this.currentMessageObject.getDiceValue() <= 0) {
                                                TLRPC$Document tLRPC$Document7 = stickerSetByEmojiOrName.documents.get(0);
                                                if ("🎰".equals(diceEmoji)) {
                                                    this.currentPhotoObjectThumb = null;
                                                } else {
                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document7.thumbs, 40);
                                                }
                                                this.photoParentObject = tLRPC$Document7;
                                            }
                                            str18 = format3;
                                            svgDrawable = null;
                                            messageObject11 = messageObject8;
                                            i92 = 6;
                                        } else {
                                            if (messageObject.isAnimatedEmoji()) {
                                                if (messageObject8.emojiAnimatedSticker == null && messageObject8.emojiAnimatedStickerId != null) {
                                                    String format4 = String.format(Locale.US, "%d_%d_nr_messageId=%d", Integer.valueOf(i188), Integer.valueOf(i189), Integer.valueOf(messageObject8.stableId));
                                                    SvgHelper.SvgDrawable circleThumb = DocumentObject.getCircleThumb(0.4f, "chat_serviceBackground", this.resourcesProvider, 0.65f);
                                                    this.photoImage.setAutoRepeat(1);
                                                    messageObject.loadAnimatedEmojiDocument();
                                                    str18 = format4;
                                                    svgDrawable2 = circleThumb;
                                                } else {
                                                    String format5 = String.format(Locale.US, "%d_%d_nr_messageId=%d" + messageObject8.emojiAnimatedStickerColor, Integer.valueOf(i188), Integer.valueOf(i189), Integer.valueOf(messageObject8.stableId));
                                                    if (MessageObject.isAnimatedEmoji(messageObject8.emojiAnimatedSticker)) {
                                                        z33 = true;
                                                        this.photoImage.setAutoRepeat(1);
                                                    } else {
                                                        this.photoImage.setAutoRepeat(!z55 ? 3 : 2);
                                                        z33 = true;
                                                    }
                                                    ?? inputStickerSet = MessageObject.getInputStickerSet(messageObject8.emojiAnimatedSticker);
                                                    if (messageObject8.emojiAnimatedStickerId != null) {
                                                        this.photoImage.setCrossfadeWithOldImage(z33);
                                                    }
                                                    str18 = format5;
                                                    messageObject11 = inputStickerSet;
                                                    svgDrawable = null;
                                                    i92 = 6;
                                                }
                                            } else {
                                                if (SharedConfig.loopStickers || (z54 && !messageObject.isVideoSticker())) {
                                                    format = String.format(Locale.US, "%d_%d", Integer.valueOf(i188), Integer.valueOf(i189));
                                                    this.photoImage.setAutoRepeat(1);
                                                } else {
                                                    format = String.format(Locale.US, "%d_%d_nr_messageId=%d", Integer.valueOf(i188), Integer.valueOf(i189), Integer.valueOf(messageObject8.stableId));
                                                    this.photoImage.setAutoRepeat(!z55 ? 3 : 2);
                                                }
                                                str18 = format;
                                                svgDrawable2 = null;
                                            }
                                            messageObject11 = messageObject8;
                                            svgDrawable = svgDrawable2;
                                            i92 = 6;
                                        }
                                        this.documentAttachType = i92;
                                        this.availableTimeWidth = i90 - AndroidUtilities.dp(14.0f);
                                        this.backgroundWidth = AndroidUtilities.dp(12.0f) + i90;
                                        this.photoImage.setRoundRadius(0);
                                        if (!messageObject.isOutOwner() && MessageObject.isPremiumSticker(messageObject.getDocument())) {
                                            this.flipImage = true;
                                        }
                                        if (messageObject.getDocument() != null) {
                                            i93 = i91;
                                            if (messageObject.isVideoSticker()) {
                                                if (!SharedConfig.loopStickers) {
                                                    this.photoImage.animatedFileDrawableRepeatMaxCount = 1;
                                                }
                                                this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), ImageLoader.AUTOPLAY_FILTER, null, null, messageObject8.pathThumb, messageObject.getDocument().size, !z54 ? null : "webp", messageObject11, 1);
                                            } else if (messageObject8.pathThumb != null) {
                                                this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str18, messageObject8.pathThumb, messageObject.getDocument().size, !z54 ? null : "webp", messageObject11, 1);
                                            } else if (messageObject8.attachPathExists) {
                                                this.photoImage.setImage(ImageLocation.getForPath(messageObject8.messageOwner.attachPath), str18, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", svgDrawable == null ? this.currentPhotoObjectThumbStripped : svgDrawable, messageObject.getDocument().size, !z54 ? null : "webp", messageObject11, 1);
                                            } else if (messageObject.getDocument().id != 0) {
                                                this.photoImage.setImage(ImageLocation.getForDocument(messageObject.getDocument()), str18, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), "b1", svgDrawable == null ? this.currentPhotoObjectThumbStripped : svgDrawable, messageObject.getDocument().size, !z54 ? null : "webp", messageObject11, 1);
                                            } else {
                                                this.photoImage.setImage(null, null, svgDrawable, null, messageObject, 0);
                                            }
                                        } else {
                                            i93 = i91;
                                            this.photoImage.setImage(null, null, svgDrawable, null, messageObject, 0);
                                        }
                                        reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                        if (reactionsLayoutInBubble6.isSmall) {
                                            i94 = 0;
                                        } else {
                                            reactionsLayoutInBubble6.measure(i186, (this.currentMessageObject.isOutOwner() && (this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isAnyKindOfSticker())) ? 5 : 3);
                                            ReactionsLayoutInBubble reactionsLayoutInBubble23 = this.reactionsLayoutInBubble;
                                            reactionsLayoutInBubble23.drawServiceShaderBackground = 1.0f;
                                            reactionsLayoutInBubble23.totalHeight = reactionsLayoutInBubble23.height + AndroidUtilities.dp(8.0f);
                                            i94 = this.reactionsLayoutInBubble.totalHeight + 0;
                                            if (!this.currentMessageObject.isAnimatedEmoji()) {
                                                this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(4.0f);
                                            }
                                        }
                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                            this.blurredPhotoImage.getBitmap().recycle();
                                            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                        }
                                        if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) {
                                            this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                                        }
                                        i74 = i90;
                                        i75 = i93;
                                        f5 = 1.0f;
                                        z32 = false;
                                        i77 = i94;
                                        c3 = 0;
                                    } else {
                                        i88 = (int) (f26 * (f25 / f27));
                                        i89 = (int) f25;
                                    }
                                } else {
                                    float f29 = MessagesController.getInstance(this.currentAccount).animatedEmojisZoom;
                                    i88 = (int) ((i86 / 512.0f) * i186 * f29);
                                    i89 = (int) ((i87 / 512.0f) * f25 * f29);
                                }
                                i90 = i88;
                                i91 = i89;
                                float f282 = AndroidUtilities.density;
                                int i1882 = (int) (i90 / f282);
                                int i1892 = (int) (i91 / f282);
                                ChatMessageCellDelegate chatMessageCellDelegate32 = this.delegate;
                                if (chatMessageCellDelegate32 != null) {
                                    bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                    if (bitmapDrawable2 == null) {
                                    }
                                    this.photoParentObject = messageObject8.photoThumbsObject;
                                    if (messageObject.isDice()) {
                                    }
                                    this.documentAttachType = i92;
                                    this.availableTimeWidth = i90 - AndroidUtilities.dp(14.0f);
                                    this.backgroundWidth = AndroidUtilities.dp(12.0f) + i90;
                                    this.photoImage.setRoundRadius(0);
                                    if (!messageObject.isOutOwner()) {
                                        this.flipImage = true;
                                    }
                                    if (messageObject.getDocument() != null) {
                                    }
                                    reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                    if (reactionsLayoutInBubble6.isSmall) {
                                    }
                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                    }
                                    if (this.photoImage.getBitmap() != null) {
                                        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                                    }
                                    i74 = i90;
                                    i75 = i93;
                                    f5 = 1.0f;
                                    z32 = false;
                                    i77 = i94;
                                    c3 = 0;
                                }
                                bitmapDrawable2 = this.currentMessageObject.strippedThumb;
                                if (bitmapDrawable2 == null) {
                                }
                                this.photoParentObject = messageObject8.photoThumbsObject;
                                if (messageObject.isDice()) {
                                }
                                this.documentAttachType = i92;
                                this.availableTimeWidth = i90 - AndroidUtilities.dp(14.0f);
                                this.backgroundWidth = AndroidUtilities.dp(12.0f) + i90;
                                this.photoImage.setRoundRadius(0);
                                if (!messageObject.isOutOwner()) {
                                }
                                if (messageObject.getDocument() != null) {
                                }
                                reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                                if (reactionsLayoutInBubble6.isSmall) {
                                }
                                if (this.blurredPhotoImage.getBitmap() != null) {
                                }
                                if (this.photoImage.getBitmap() != null) {
                                }
                                i74 = i90;
                                i75 = i93;
                                f5 = 1.0f;
                                z32 = false;
                                i77 = i94;
                                c3 = 0;
                            } else {
                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, AndroidUtilities.getPhotoSize());
                                this.photoParentObject = messageObject14.photoThumbsObject;
                                if (messageObject14.type == 5) {
                                    this.documentAttach = messageObject.getDocument();
                                    this.documentAttachType = 7;
                                    i95 = 0;
                                } else {
                                    if (AndroidUtilities.isTablet()) {
                                        minTabletSide11 = AndroidUtilities.getMinTabletSide();
                                    } else {
                                        TLRPC$PhotoSize tLRPC$PhotoSize9 = this.currentPhotoObject;
                                        if (tLRPC$PhotoSize9 != null && (((i125 = messageObject14.type) == 1 || i125 == 20 || i125 == 3 || i125 == 8) && tLRPC$PhotoSize9.w >= tLRPC$PhotoSize9.h)) {
                                            i95 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp(64 + (!checkNeedDrawShareButton(messageObject) ? 0 : 10));
                                            z34 = true;
                                            int dp41 = AndroidUtilities.dp(100.0f) + i95;
                                            if (z34) {
                                                if (messageObject14.type != 5 && checkNeedDrawShareButton(messageObject)) {
                                                    i95 -= AndroidUtilities.dp(20.0f);
                                                }
                                                if (i95 > AndroidUtilities.getPhotoSize()) {
                                                    i95 = AndroidUtilities.getPhotoSize();
                                                }
                                                if (dp41 > AndroidUtilities.getPhotoSize()) {
                                                    dp41 = AndroidUtilities.getPhotoSize();
                                                }
                                            } else if (z8) {
                                                i95 -= AndroidUtilities.dp(52.0f);
                                            }
                                            i96 = messageObject14.type;
                                            if (i96 == 1 || i96 == 20) {
                                                updateSecretTimeText(messageObject);
                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, 40);
                                            } else {
                                                if (i96 == 3 || i96 == 8) {
                                                    createDocumentLayout(0, messageObject14);
                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, 40);
                                                    updateSecretTimeText(messageObject);
                                                } else if (i96 == 5) {
                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, 40);
                                                }
                                                z35 = true;
                                                bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                                if (bitmapDrawable3 != null) {
                                                    this.currentPhotoObjectThumb = null;
                                                    this.currentPhotoObjectThumbStripped = bitmapDrawable3;
                                                }
                                                if (messageObject14.type == 5) {
                                                    if (this.isPlayingRound && !messageObject.isVoiceTranscriptionOpen()) {
                                                        i97 = AndroidUtilities.roundPlayingMessageSize;
                                                    } else {
                                                        i97 = AndroidUtilities.roundMessageSize;
                                                    }
                                                    i98 = i97;
                                                } else {
                                                    TLRPC$PhotoSize tLRPC$PhotoSize10 = this.currentPhotoObject;
                                                    if (tLRPC$PhotoSize10 == null) {
                                                        tLRPC$PhotoSize10 = this.currentPhotoObjectThumb;
                                                    }
                                                    if (messageObject.hasExtendedMediaPreview()) {
                                                        TLRPC$TL_messageExtendedMediaPreview tLRPC$TL_messageExtendedMediaPreview = (TLRPC$TL_messageExtendedMediaPreview) messageObject14.messageOwner.media.extended_media;
                                                        i122 = tLRPC$TL_messageExtendedMediaPreview.w;
                                                        if (i122 == 0 || (i124 = tLRPC$TL_messageExtendedMediaPreview.h) == 0) {
                                                            TLRPC$PhotoSize tLRPC$PhotoSize11 = tLRPC$TL_messageExtendedMediaPreview.thumb;
                                                            if (tLRPC$PhotoSize11 != null) {
                                                                i122 = tLRPC$PhotoSize11.w;
                                                                i123 = tLRPC$PhotoSize11.h;
                                                            }
                                                            i123 = 0;
                                                            i122 = 0;
                                                        } else {
                                                            i123 = i124;
                                                        }
                                                        Point messageSize = getMessageSize(i122, i123, i95, dp41);
                                                        i97 = (int) messageSize.x;
                                                        i98 = (int) messageSize.y;
                                                    } else {
                                                        if (tLRPC$PhotoSize10 != null && !(tLRPC$PhotoSize10 instanceof TLRPC$TL_photoStrippedSize)) {
                                                            i122 = tLRPC$PhotoSize10.w;
                                                            i123 = tLRPC$PhotoSize10.h;
                                                        } else {
                                                            TLRPC$Document tLRPC$Document8 = this.documentAttach;
                                                            if (tLRPC$Document8 != null) {
                                                                int size9 = tLRPC$Document8.attributes.size();
                                                                int i190 = 0;
                                                                int i191 = 0;
                                                                for (int i192 = 0; i192 < size9; i192++) {
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i192);
                                                                    if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                        i190 = tLRPC$DocumentAttribute2.w;
                                                                        i191 = tLRPC$DocumentAttribute2.h;
                                                                    }
                                                                }
                                                                i122 = i190;
                                                                i123 = i191;
                                                            }
                                                            i123 = 0;
                                                            i122 = 0;
                                                        }
                                                        Point messageSize2 = getMessageSize(i122, i123, i95, dp41);
                                                        i97 = (int) messageSize2.x;
                                                        i98 = (int) messageSize2.y;
                                                    }
                                                }
                                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                                if (tLRPC$PhotoSize3 != null && "s".equals(tLRPC$PhotoSize3.type)) {
                                                    this.currentPhotoObject = null;
                                                }
                                                tLRPC$PhotoSize4 = this.currentPhotoObject;
                                                if (tLRPC$PhotoSize4 != null && tLRPC$PhotoSize4 == this.currentPhotoObjectThumb) {
                                                    i121 = messageObject14.type;
                                                    if (i121 == 1 || i121 == 20) {
                                                        this.currentPhotoObjectThumb = null;
                                                        this.currentPhotoObjectThumbStripped = null;
                                                    } else {
                                                        this.currentPhotoObject = null;
                                                    }
                                                }
                                                if (z35 && !messageObject.needDrawBluredPreview() && (((tLRPC$PhotoSize7 = this.currentPhotoObject) == null || tLRPC$PhotoSize7 == this.currentPhotoObjectThumb) && ((tLRPC$PhotoSize8 = this.currentPhotoObjectThumb) == null || !"m".equals(tLRPC$PhotoSize8.type)))) {
                                                    this.photoImage.setNeedsQualityThumb(true);
                                                    this.photoImage.setShouldGenerateQualityThumb(true);
                                                }
                                                if (this.currentMessagesGroup == null && messageObject14.caption != null) {
                                                    this.mediaBackground = false;
                                                }
                                                if ((i97 != 0 || i98 == 0) && messageObject14.type == 8 && (document = messageObject.getDocument()) != null) {
                                                    for (i99 = 0; i99 < document.attributes.size(); i99++) {
                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute3 = document.attributes.get(i99);
                                                        if ((tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                            int i193 = tLRPC$DocumentAttribute3.w;
                                                            float f30 = i95;
                                                            float f31 = i193 / f30;
                                                            int i194 = (int) (i193 / f31);
                                                            i98 = (int) (tLRPC$DocumentAttribute3.h / f31);
                                                            if (i98 > dp41) {
                                                                i97 = (int) (i194 / (i98 / dp41));
                                                            } else if (i98 >= AndroidUtilities.dp(120.0f)) {
                                                                i97 = i194;
                                                                dp41 = i98;
                                                            } else {
                                                                dp41 = AndroidUtilities.dp(120.0f);
                                                                float f32 = tLRPC$DocumentAttribute3.h / dp41;
                                                                int i195 = tLRPC$DocumentAttribute3.w;
                                                                if (i195 / f32 < f30) {
                                                                    i194 = (int) (i195 / f32);
                                                                }
                                                                i97 = i194;
                                                            }
                                                            i98 = dp41;
                                                        }
                                                    }
                                                    dp41 = i98;
                                                    i98 = dp41;
                                                }
                                                if (i97 != 0 || i98 == 0) {
                                                    i98 = AndroidUtilities.dp(150.0f);
                                                    i97 = i98;
                                                }
                                                if (messageObject14.type == 3 && i97 < this.infoWidth + AndroidUtilities.dp(40.0f)) {
                                                    i97 = this.infoWidth + AndroidUtilities.dp(40.0f);
                                                }
                                                if (this.commentLayout != null && this.drawSideButton != 3 && i97 < this.totalCommentWidth + AndroidUtilities.dp(10.0f)) {
                                                    i97 = this.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                                }
                                                if (this.currentMessagesGroup != null) {
                                                    int groupPhotosWidth = getGroupPhotosWidth();
                                                    int i196 = 0;
                                                    int i197 = 0;
                                                    while (i196 < this.currentMessagesGroup.posArray.size()) {
                                                        if (this.currentMessagesGroup.posArray.get(i196).minY != 0) {
                                                            break;
                                                        }
                                                        double d8 = i197;
                                                        double ceil10 = Math.ceil(((groupedMessagePosition8.pw + groupedMessagePosition8.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                                                        Double.isNaN(d8);
                                                        i197 = (int) (d8 + ceil10);
                                                        i196++;
                                                        messageObject14 = messageObject;
                                                        z4 = z4;
                                                        i2 = 2;
                                                    }
                                                    this.availableTimeWidth = i197 - AndroidUtilities.dp(35.0f);
                                                } else {
                                                    this.availableTimeWidth = i95 - AndroidUtilities.dp(14.0f);
                                                }
                                                if (messageObject14.type == 5) {
                                                    double d9 = AndroidUtilities.roundMessageSize;
                                                    double ceil11 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                                    Double.isNaN(d9);
                                                    double d10 = d9 - ceil11;
                                                    double dp42 = AndroidUtilities.dp(46.0f);
                                                    Double.isNaN(dp42);
                                                    this.availableTimeWidth = (int) (d10 - dp42);
                                                }
                                                measureTime(messageObject);
                                                dp18 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20));
                                                if (i97 < dp18) {
                                                    i97 = dp18;
                                                }
                                                if (messageObject.isRoundVideo()) {
                                                    int min5 = Math.min(i97, i98);
                                                    boolean isVoiceTranscriptionOpen = messageObject.isVoiceTranscriptionOpen();
                                                    this.drawBackground = isVoiceTranscriptionOpen;
                                                    this.mediaBackground = !isVoiceTranscriptionOpen;
                                                    int i198 = !isVoiceTranscriptionOpen ? min5 : 0;
                                                    this.photoImage.setRoundRadius(min5 / 2);
                                                    i97 = min5;
                                                    i98 = i198;
                                                    z32 = false;
                                                } else {
                                                    if (messageObject.needDrawBluredPreview() && !messageObject.hasExtendedMediaPreview()) {
                                                        if (AndroidUtilities.isTablet()) {
                                                            minTabletSide10 = AndroidUtilities.getMinTabletSide();
                                                        } else {
                                                            minTabletSide10 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                        }
                                                        i98 = (int) (minTabletSide10 * 0.5f);
                                                        i97 = i98;
                                                    }
                                                    z32 = true;
                                                }
                                                if (this.currentMessagesGroup != null) {
                                                    float max6 = Math.max(getParentWidth(), AndroidUtilities.displaySize.y) * 0.5f;
                                                    float groupPhotosWidth2 = getGroupPhotosWidth();
                                                    int ceil12 = (int) Math.ceil((this.currentPosition.pw / 1000.0f) * groupPhotosWidth2);
                                                    if (this.currentPosition.minY != 0 && ((messageObject.isOutOwner() && (this.currentPosition.flags & 1) != 0) || (!messageObject.isOutOwner() && (this.currentPosition.flags & i2) != 0))) {
                                                        int i199 = 0;
                                                        int i200 = 0;
                                                        int i201 = 0;
                                                        while (i199 < this.currentMessagesGroup.posArray.size()) {
                                                            MessageObject.GroupedMessagePosition groupedMessagePosition19 = this.currentMessagesGroup.posArray.get(i199);
                                                            byte b = groupedMessagePosition19.minY;
                                                            if (b == 0) {
                                                                z38 = z4;
                                                                i113 = dp18;
                                                                double d11 = i200;
                                                                double ceil13 = Math.ceil((groupedMessagePosition19.pw / 1000.0f) * groupPhotosWidth2);
                                                                if (groupedMessagePosition19.leftSpanOffset == 0) {
                                                                    ceil4 = 0.0d;
                                                                    d2 = d11;
                                                                } else {
                                                                    d2 = d11;
                                                                    ceil4 = Math.ceil((i114 / 1000.0f) * groupPhotosWidth2);
                                                                }
                                                                Double.isNaN(d2);
                                                                i200 = (int) (d2 + ceil13 + ceil4);
                                                            } else {
                                                                byte b2 = this.currentPosition.minY;
                                                                if (b == b2) {
                                                                    z38 = z4;
                                                                    i113 = dp18;
                                                                    double d12 = i201;
                                                                    double ceil14 = Math.ceil((groupedMessagePosition19.pw / 1000.0f) * groupPhotosWidth2);
                                                                    double ceil15 = groupedMessagePosition19.leftSpanOffset == 0 ? 0.0d : Math.ceil((i115 / 1000.0f) * groupPhotosWidth2);
                                                                    Double.isNaN(d12);
                                                                    i201 = (int) (d12 + ceil14 + ceil15);
                                                                } else if (b > b2) {
                                                                    break;
                                                                } else {
                                                                    z38 = z4;
                                                                    i113 = dp18;
                                                                }
                                                            }
                                                            i199++;
                                                            messageObject14 = messageObject;
                                                            z4 = z38;
                                                            dp18 = i113;
                                                            i2 = 2;
                                                        }
                                                        ceil12 += i200 - i201;
                                                    }
                                                    int dp43 = ceil12 - AndroidUtilities.dp(9.0f);
                                                    if (this.isAvatarVisible) {
                                                        dp43 -= AndroidUtilities.dp(48.0f);
                                                    }
                                                    int i202 = dp43;
                                                    if (this.currentPosition.siblingHeights != null) {
                                                        int i203 = 0;
                                                        int i204 = 0;
                                                        while (true) {
                                                            groupedMessagePosition10 = this.currentPosition;
                                                            if (i203 >= groupedMessagePosition10.siblingHeights.length) {
                                                                break;
                                                            }
                                                            i204 += (int) Math.ceil(fArr[i203] * max6);
                                                            i203++;
                                                            messageObject14 = messageObject;
                                                            i2 = 2;
                                                        }
                                                        round = i204 + ((groupedMessagePosition10.maxY - groupedMessagePosition10.minY) * Math.round(AndroidUtilities.density * 7.0f));
                                                    } else {
                                                        round = (int) Math.ceil(max6 * groupedMessagePosition9.ph);
                                                    }
                                                    this.backgroundWidth = i202;
                                                    int i205 = this.currentPosition.flags;
                                                    if ((i205 & 2) != 0 && (i205 & 1) != 0) {
                                                        dp19 = AndroidUtilities.dp(8.0f);
                                                    } else if ((i205 & 2) == 0 && (i205 & 1) == 0) {
                                                        dp19 = AndroidUtilities.dp(11.0f);
                                                    } else if ((i205 & i2) != 0) {
                                                        dp19 = AndroidUtilities.dp(10.0f);
                                                    } else {
                                                        dp19 = AndroidUtilities.dp(9.0f);
                                                    }
                                                    int i206 = i202 - dp19;
                                                    int dp44 = this.currentPosition.edge ? i206 : AndroidUtilities.dp(10.0f) + i206;
                                                    int dp45 = 0 + (dp44 - AndroidUtilities.dp(10.0f));
                                                    MessageObject.GroupedMessagePosition groupedMessagePosition20 = this.currentPosition;
                                                    int i207 = groupedMessagePosition20.flags;
                                                    if ((i207 & 8) != 0 || (this.currentMessagesGroup.hasSibling && (i207 & 4) == 0)) {
                                                        dp45 += getAdditionalWidthForPosition(groupedMessagePosition20);
                                                        int size10 = this.currentMessagesGroup.messages.size();
                                                        int i208 = 0;
                                                        boolean z56 = true;
                                                        while (i208 < size10) {
                                                            MessageObject messageObject20 = this.currentMessagesGroup.messages.get(i208);
                                                            MessageObject.GroupedMessagePosition groupedMessagePosition21 = this.currentMessagesGroup.posArray.get(i208);
                                                            if (groupedMessagePosition21 != this.currentPosition && (groupedMessagePosition21.flags & 8) != 0) {
                                                                int ceil16 = (int) Math.ceil((groupedMessagePosition21.pw / 1000.0f) * groupPhotosWidth2);
                                                                if (groupedMessagePosition21.minY != 0) {
                                                                    if (messageObject.isOutOwner() && (groupedMessagePosition21.flags & 1) != 0) {
                                                                        int i209 = 0;
                                                                        int i210 = 0;
                                                                        int i211 = 0;
                                                                        while (true) {
                                                                            if (i209 >= this.currentMessagesGroup.posArray.size()) {
                                                                                i100 = size10;
                                                                                i101 = round;
                                                                                break;
                                                                            }
                                                                            MessageObject.GroupedMessagePosition groupedMessagePosition22 = this.currentMessagesGroup.posArray.get(i209);
                                                                            i100 = size10;
                                                                            byte b3 = groupedMessagePosition22.minY;
                                                                            if (b3 == 0) {
                                                                                i101 = round;
                                                                                i102 = i209;
                                                                                z36 = z4;
                                                                                i103 = dp44;
                                                                                i104 = dp18;
                                                                                double d13 = i211;
                                                                                double ceil17 = Math.ceil((groupedMessagePosition22.pw / 1000.0f) * groupPhotosWidth2);
                                                                                if (groupedMessagePosition22.leftSpanOffset == 0) {
                                                                                    ceil2 = 0.0d;
                                                                                    i106 = i210;
                                                                                } else {
                                                                                    i106 = i210;
                                                                                    ceil2 = Math.ceil((i105 / 1000.0f) * groupPhotosWidth2);
                                                                                }
                                                                                Double.isNaN(d13);
                                                                                i210 = i106;
                                                                                i211 = (int) (d13 + ceil17 + ceil2);
                                                                            } else {
                                                                                i101 = round;
                                                                                byte b4 = groupedMessagePosition21.minY;
                                                                                if (b3 == b4) {
                                                                                    i102 = i209;
                                                                                    double d14 = i210;
                                                                                    z36 = z4;
                                                                                    double ceil18 = Math.ceil((groupedMessagePosition22.pw / 1000.0f) * groupPhotosWidth2);
                                                                                    if (groupedMessagePosition22.leftSpanOffset == 0) {
                                                                                        i103 = dp44;
                                                                                        i104 = dp18;
                                                                                        ceil3 = 0.0d;
                                                                                    } else {
                                                                                        i103 = dp44;
                                                                                        i104 = dp18;
                                                                                        ceil3 = Math.ceil((i107 / 1000.0f) * groupPhotosWidth2);
                                                                                    }
                                                                                    Double.isNaN(d14);
                                                                                    i210 = (int) (d14 + ceil18 + ceil3);
                                                                                } else if (b3 > b4) {
                                                                                    break;
                                                                                } else {
                                                                                    i102 = i209;
                                                                                    z36 = z4;
                                                                                    i103 = dp44;
                                                                                    i104 = dp18;
                                                                                }
                                                                            }
                                                                            i209 = i102 + 1;
                                                                            size10 = i100;
                                                                            round = i101;
                                                                            z4 = z36;
                                                                            dp44 = i103;
                                                                            dp18 = i104;
                                                                        }
                                                                        ceil16 += i211 - i210;
                                                                        int dp46 = ceil16 - AndroidUtilities.dp(9.0f);
                                                                        i108 = groupedMessagePosition21.flags;
                                                                        if ((i108 & 2) != 0 && (i108 & 1) != 0) {
                                                                            dp20 = AndroidUtilities.dp(8.0f);
                                                                        } else if ((i108 & 2) == 0 && (i108 & 1) == 0) {
                                                                            dp20 = AndroidUtilities.dp(11.0f);
                                                                        } else if ((i108 & 2) == 0) {
                                                                            dp20 = AndroidUtilities.dp(10.0f);
                                                                        } else {
                                                                            dp20 = AndroidUtilities.dp(9.0f);
                                                                        }
                                                                        i109 = dp46 - dp20;
                                                                        if (this.isChat && !this.isThreadPost && !messageObject20.isOutOwner() && messageObject20.needDrawAvatar() && groupedMessagePosition21.edge) {
                                                                            i109 -= AndroidUtilities.dp(48.0f);
                                                                        }
                                                                        additionalWidthForPosition = i109 + getAdditionalWidthForPosition(groupedMessagePosition21);
                                                                        if (!groupedMessagePosition21.edge) {
                                                                            additionalWidthForPosition += AndroidUtilities.dp(10.0f);
                                                                        }
                                                                        dp45 += additionalWidthForPosition;
                                                                        if (groupedMessagePosition21.minX >= this.currentPosition.minX || (this.currentMessagesGroup.hasSibling && groupedMessagePosition21.minY != groupedMessagePosition21.maxY)) {
                                                                            this.captionOffsetX -= additionalWidthForPosition;
                                                                        }
                                                                        i206 = additionalWidthForPosition;
                                                                        if (z56 && (charSequence2 = messageObject20.caption) != null) {
                                                                            if (this.currentCaption == null) {
                                                                                this.currentCaption = null;
                                                                                z56 = false;
                                                                                i208++;
                                                                                messageObject14 = messageObject;
                                                                                size10 = i100;
                                                                                round = i101;
                                                                            } else {
                                                                                this.currentCaption = charSequence2;
                                                                            }
                                                                        }
                                                                        i208++;
                                                                        messageObject14 = messageObject;
                                                                        size10 = i100;
                                                                        round = i101;
                                                                    }
                                                                    if (!messageObject.isOutOwner()) {
                                                                    }
                                                                }
                                                                i100 = size10;
                                                                i101 = round;
                                                                int dp462 = ceil16 - AndroidUtilities.dp(9.0f);
                                                                i108 = groupedMessagePosition21.flags;
                                                                if ((i108 & 2) != 0) {
                                                                    dp20 = AndroidUtilities.dp(8.0f);
                                                                    i109 = dp462 - dp20;
                                                                    if (this.isChat) {
                                                                        i109 -= AndroidUtilities.dp(48.0f);
                                                                    }
                                                                    additionalWidthForPosition = i109 + getAdditionalWidthForPosition(groupedMessagePosition21);
                                                                    if (!groupedMessagePosition21.edge) {
                                                                    }
                                                                    dp45 += additionalWidthForPosition;
                                                                    if (groupedMessagePosition21.minX >= this.currentPosition.minX) {
                                                                    }
                                                                    this.captionOffsetX -= additionalWidthForPosition;
                                                                    i206 = additionalWidthForPosition;
                                                                    if (z56) {
                                                                        if (this.currentCaption == null) {
                                                                        }
                                                                    }
                                                                    i208++;
                                                                    messageObject14 = messageObject;
                                                                    size10 = i100;
                                                                    round = i101;
                                                                }
                                                                if ((i108 & 2) == 0) {
                                                                    dp20 = AndroidUtilities.dp(11.0f);
                                                                    i109 = dp462 - dp20;
                                                                    if (this.isChat) {
                                                                    }
                                                                    additionalWidthForPosition = i109 + getAdditionalWidthForPosition(groupedMessagePosition21);
                                                                    if (!groupedMessagePosition21.edge) {
                                                                    }
                                                                    dp45 += additionalWidthForPosition;
                                                                    if (groupedMessagePosition21.minX >= this.currentPosition.minX) {
                                                                    }
                                                                    this.captionOffsetX -= additionalWidthForPosition;
                                                                    i206 = additionalWidthForPosition;
                                                                    if (z56) {
                                                                    }
                                                                    i208++;
                                                                    messageObject14 = messageObject;
                                                                    size10 = i100;
                                                                    round = i101;
                                                                }
                                                                if ((i108 & 2) == 0) {
                                                                }
                                                                i109 = dp462 - dp20;
                                                                if (this.isChat) {
                                                                }
                                                                additionalWidthForPosition = i109 + getAdditionalWidthForPosition(groupedMessagePosition21);
                                                                if (!groupedMessagePosition21.edge) {
                                                                }
                                                                dp45 += additionalWidthForPosition;
                                                                if (groupedMessagePosition21.minX >= this.currentPosition.minX) {
                                                                }
                                                                this.captionOffsetX -= additionalWidthForPosition;
                                                                i206 = additionalWidthForPosition;
                                                                if (z56) {
                                                                }
                                                                i208++;
                                                                messageObject14 = messageObject;
                                                                size10 = i100;
                                                                round = i101;
                                                            }
                                                            i100 = size10;
                                                            i101 = round;
                                                            if (z56) {
                                                            }
                                                            i208++;
                                                            messageObject14 = messageObject;
                                                            size10 = i100;
                                                            round = i101;
                                                        }
                                                    }
                                                    i110 = dp45;
                                                    i111 = round;
                                                    i112 = i206;
                                                    i97 = dp44;
                                                    z37 = false;
                                                } else {
                                                    this.currentCaption = messageObject14.caption;
                                                    if (AndroidUtilities.isTablet()) {
                                                        minTabletSide9 = AndroidUtilities.getMinTabletSide();
                                                    } else {
                                                        minTabletSide9 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                                    }
                                                    int i212 = (int) (minTabletSide9 * 0.65f);
                                                    if (!messageObject.needDrawBluredPreview()) {
                                                        if (this.currentCaption == null) {
                                                            ReactionsLayoutInBubble reactionsLayoutInBubble24 = this.reactionsLayoutInBubble;
                                                            if (!reactionsLayoutInBubble24.isEmpty) {
                                                            }
                                                        }
                                                        if (i97 < i212) {
                                                            z40 = true;
                                                            int dp47 = AndroidUtilities.dp(8.0f) + i97;
                                                            this.backgroundWidth = dp47;
                                                            if (!this.mediaBackground) {
                                                                this.backgroundWidth = dp47 + AndroidUtilities.dp(9.0f);
                                                            }
                                                            i111 = i98;
                                                            i112 = i97;
                                                            z37 = z40;
                                                            i110 = i212;
                                                        }
                                                    }
                                                    i212 = i97 - AndroidUtilities.dp(10.0f);
                                                    z40 = false;
                                                    int dp472 = AndroidUtilities.dp(8.0f) + i97;
                                                    this.backgroundWidth = dp472;
                                                    if (!this.mediaBackground) {
                                                    }
                                                    i111 = i98;
                                                    i112 = i97;
                                                    z37 = z40;
                                                    i110 = i212;
                                                }
                                                if (this.currentCaption != null) {
                                                    try {
                                                        i110 -= getExtraTextX() * 2;
                                                        if (Build.VERSION.SDK_INT >= 24) {
                                                            CharSequence charSequence5 = this.currentCaption;
                                                            this.captionLayout = StaticLayout.Builder.obtain(charSequence5, 0, charSequence5.length(), Theme.chat_msgTextPaint, i110).setBreakStrategy(1).setHyphenationFrequency(0).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                                        } else {
                                                            try {
                                                                this.captionLayout = new StaticLayout(this.currentCaption, Theme.chat_msgTextPaint, i110, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                            } catch (Exception e2) {
                                                                e = e2;
                                                                i116 = 0;
                                                                FileLog.e(e);
                                                                c3 = 0;
                                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                                }
                                                                i77 = i116;
                                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                if (this.currentMessagesGroup == null) {
                                                                }
                                                                if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                }
                                                                i74 = i97;
                                                                if (z3) {
                                                                }
                                                                obj = null;
                                                                String format6 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                                this.currentPhotoFilterThumb = format6;
                                                                this.currentPhotoFilter = format6;
                                                                arrayList2 = messageObject14.photoThumbs;
                                                                if (arrayList2 != null) {
                                                                }
                                                                if (messageObject.needDrawBluredPreview()) {
                                                                }
                                                                int i213 = messageObject14.type;
                                                                if (i213 == 3) {
                                                                }
                                                                tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize5 != null) {
                                                                }
                                                                i118 = -1;
                                                                tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize6 != null) {
                                                                }
                                                                if (SharedConfig.autoplayVideo) {
                                                                }
                                                                if (this.autoPlayingMedia) {
                                                                }
                                                                if (this.currentPosition != null) {
                                                                }
                                                                i60 = 5;
                                                                groupedMessagePosition3 = this.currentPosition;
                                                                if (groupedMessagePosition3 != null) {
                                                                }
                                                                int i214 = this.widthBeforeNewTimeLine;
                                                                i63 = -1;
                                                                messageObject5 = this.currentMessageObject;
                                                                if (messageObject5.eventId == 0) {
                                                                }
                                                                f4 = 0.0f;
                                                                if (messageObject.isSponsored()) {
                                                                }
                                                                this.botButtons.clear();
                                                                if (z45) {
                                                                }
                                                                if (!messageObject4.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = r15;
                                                                this.keyboardHeight = r15;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                z26 = this.drawPinnedBottom;
                                                                if (z26) {
                                                                }
                                                                if (z26) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject4.type != 19) {
                                                                }
                                                                if (!this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType != i60) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z24) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                z43 = r15;
                                                                if (z45) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = true;
                                                                updateFlagSecure();
                                                            }
                                                        }
                                                        updateCaptionSpoilers();
                                                        lineCount = this.captionLayout.getLineCount();
                                                    } catch (Exception e3) {
                                                        e = e3;
                                                    }
                                                    if (lineCount > 0) {
                                                        if (z37) {
                                                            this.captionWidth = 0;
                                                            int i215 = 0;
                                                            while (true) {
                                                                if (i215 >= lineCount) {
                                                                    break;
                                                                }
                                                                this.captionWidth = (int) Math.max(this.captionWidth, Math.ceil(this.captionLayout.getLineWidth(i215)));
                                                                if (this.captionLayout.getLineLeft(i215) != 0.0f) {
                                                                    try {
                                                                        break;
                                                                    } catch (Exception e4) {
                                                                        e = e4;
                                                                        i116 = 0;
                                                                        FileLog.e(e);
                                                                        c3 = 0;
                                                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                                                        }
                                                                        i77 = i116;
                                                                        measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                                        if (this.currentMessagesGroup == null) {
                                                                        }
                                                                        if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                        }
                                                                        i74 = i97;
                                                                        if (z3) {
                                                                        }
                                                                        obj = null;
                                                                        String format62 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                                        this.currentPhotoFilterThumb = format62;
                                                                        this.currentPhotoFilter = format62;
                                                                        arrayList2 = messageObject14.photoThumbs;
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (messageObject.needDrawBluredPreview()) {
                                                                        }
                                                                        int i2132 = messageObject14.type;
                                                                        if (i2132 == 3) {
                                                                        }
                                                                        tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize5 != null) {
                                                                        }
                                                                        i118 = -1;
                                                                        tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                        if (tLRPC$PhotoSize6 != null) {
                                                                        }
                                                                        if (SharedConfig.autoplayVideo) {
                                                                        }
                                                                        if (this.autoPlayingMedia) {
                                                                        }
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i2142 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                }
                                                                i215++;
                                                            }
                                                            if (this.captionWidth > i110) {
                                                                this.captionWidth = i110;
                                                            }
                                                        } else {
                                                            this.captionWidth = i110;
                                                        }
                                                        int height2 = this.captionLayout.getHeight();
                                                        this.captionHeight = height2;
                                                        int dp48 = height2 + AndroidUtilities.dp(9.0f);
                                                        this.addedCaptionHeight = dp48;
                                                        MessageObject.GroupedMessagePosition groupedMessagePosition23 = this.currentPosition;
                                                        if (groupedMessagePosition23 != null && (groupedMessagePosition23.flags & 8) == 0) {
                                                            this.captionLayout = null;
                                                            updateCaptionSpoilers();
                                                            c3 = 0;
                                                            i116 = 0;
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                                boolean z57 = this.backgroundWidth - AndroidUtilities.dp(24.0f) > i110;
                                                                int max7 = Math.max(this.backgroundWidth - AndroidUtilities.dp(36.0f), i110);
                                                                this.reactionsLayoutInBubble.measure(max7, 3);
                                                                ReactionsLayoutInBubble reactionsLayoutInBubble25 = this.reactionsLayoutInBubble;
                                                                if (!reactionsLayoutInBubble25.isEmpty) {
                                                                    if (this.isRoundVideo) {
                                                                        reactionsLayoutInBubble25.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
                                                                    } else if (shouldDrawTimeOnMedia()) {
                                                                        this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f;
                                                                    }
                                                                    int i216 = this.reactionsLayoutInBubble.height;
                                                                    if (this.captionLayout == null) {
                                                                        dp21 = i216 + AndroidUtilities.dp(12.0f) + AndroidUtilities.dp(4.0f);
                                                                    } else {
                                                                        dp21 = i216 + AndroidUtilities.dp(12.0f);
                                                                        this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(12.0f);
                                                                    }
                                                                    this.reactionsLayoutInBubble.totalHeight = dp21;
                                                                    i116 += dp21;
                                                                    if (this.isRoundVideo && (messageObject12 = this.currentMessageObject) != null && messageObject12.isVoiceTranscriptionOpen()) {
                                                                        this.reactionsLayoutInBubble.positionOffsetY += AndroidUtilities.dp(8.0f);
                                                                    }
                                                                    if (!shouldDrawTimeOnMedia()) {
                                                                        int min6 = Math.min(max7, this.reactionsLayoutInBubble.width + dp18 + getExtraTimeX() + AndroidUtilities.dp(2.0f));
                                                                        float f33 = this.reactionsLayoutInBubble.lastLineX;
                                                                        if (!shouldDrawTimeOnMedia() && min6 - f33 < getExtraTimeX() + dp18) {
                                                                            i116 += AndroidUtilities.dp(14.0f);
                                                                            this.reactionsLayoutInBubble.totalHeight += AndroidUtilities.dp(14.0f);
                                                                            this.reactionsLayoutInBubble.positionOffsetY -= AndroidUtilities.dp(14.0f);
                                                                            if (!z57) {
                                                                                int i217 = this.captionWidth;
                                                                                int i218 = this.reactionsLayoutInBubble.width;
                                                                                if (i217 < i218) {
                                                                                    this.captionWidth = i218;
                                                                                }
                                                                            }
                                                                            c3 = 1;
                                                                        } else if (!z57) {
                                                                            ReactionsLayoutInBubble reactionsLayoutInBubble26 = this.reactionsLayoutInBubble;
                                                                            int i219 = reactionsLayoutInBubble26.lastLineX;
                                                                            if (i219 + dp18 > this.captionWidth) {
                                                                                this.captionWidth = i219 + dp18;
                                                                            }
                                                                            int i220 = reactionsLayoutInBubble26.width;
                                                                            if (i220 > this.captionWidth) {
                                                                                this.captionWidth = i220;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            i77 = i116;
                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                            if (this.currentMessagesGroup == null && (((i117 = this.documentAttachType) == 4 || i117 == 2) && i97 < measureText)) {
                                                                int dp49 = AndroidUtilities.dp(8.0f) + measureText;
                                                                this.backgroundWidth = dp49;
                                                                if (!this.mediaBackground) {
                                                                    this.backgroundWidth = dp49 + AndroidUtilities.dp(9.0f);
                                                                }
                                                                i97 = measureText;
                                                            }
                                                            if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                                i97 = this.captionWidth + AndroidUtilities.dp(10.0f);
                                                                int dp50 = AndroidUtilities.dp(8.0f) + i97;
                                                                this.backgroundWidth = dp50;
                                                                if (!this.mediaBackground) {
                                                                    this.backgroundWidth = dp50 + AndroidUtilities.dp(9.0f);
                                                                }
                                                            }
                                                            i74 = i97;
                                                            if (z3 || z45 || z4) {
                                                                obj = null;
                                                                String format622 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                                this.currentPhotoFilterThumb = format622;
                                                                this.currentPhotoFilter = format622;
                                                                arrayList2 = messageObject14.photoThumbs;
                                                                if ((arrayList2 != null && arrayList2.size() > 1) || (i120 = messageObject14.type) == 3 || i120 == 8 || i120 == 5) {
                                                                    if (messageObject.needDrawBluredPreview()) {
                                                                        this.currentPhotoFilter += "_b2";
                                                                        this.currentPhotoFilterThumb += "_b2";
                                                                    } else {
                                                                        this.currentPhotoFilterThumb += "_b";
                                                                    }
                                                                }
                                                            } else {
                                                                String format7 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                                if (!messageObject.needDrawBluredPreview() && !format7.equals(this.currentPhotoFilter) && (forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject)) != null) {
                                                                    sb3 = new StringBuilder();
                                                                    obj = null;
                                                                    sb3.append(forObject.getKey(this.photoParentObject, null, false));
                                                                    sb3.append("@");
                                                                    sb3.append(this.currentPhotoFilter);
                                                                    if (ImageLoader.getInstance().isInMemCache(sb3.toString(), false)) {
                                                                        this.currentPhotoObjectThumb = this.currentPhotoObject;
                                                                        this.currentPhotoFilterThumb = this.currentPhotoFilter;
                                                                        this.currentPhotoFilter = format7;
                                                                    }
                                                                } else {
                                                                    obj = null;
                                                                }
                                                            }
                                                            int i21322 = messageObject14.type;
                                                            boolean z58 = i21322 == 3 || i21322 == 8 || i21322 == 5;
                                                            tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize5 != null && !z58 && tLRPC$PhotoSize5.size == 0) {
                                                                i118 = -1;
                                                                tLRPC$PhotoSize5.size = -1;
                                                            } else {
                                                                i118 = -1;
                                                            }
                                                            tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                            if (tLRPC$PhotoSize6 != null && !z58 && tLRPC$PhotoSize6.size == 0) {
                                                                tLRPC$PhotoSize6.size = i118;
                                                            }
                                                            if (SharedConfig.autoplayVideo) {
                                                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                                                    MessageObject messageObject21 = this.currentMessageObject;
                                                                    if (!messageObject21.isMediaSpoilersRevealed) {
                                                                    }
                                                                }
                                                                if (messageObject14.type == 3 && !messageObject.needDrawBluredPreview() && (this.currentMessageObject.mediaExists || (messageObject.canStreamVideo() && DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject)))) {
                                                                    MessageObject.GroupedMessagePosition groupedMessagePosition24 = this.currentPosition;
                                                                    if (groupedMessagePosition24 != null) {
                                                                        int i221 = groupedMessagePosition24.flags;
                                                                        this.autoPlayingMedia = ((i221 & 1) == 0 || (i221 & 2) == 0) ? false : true;
                                                                        if (this.autoPlayingMedia) {
                                                                            i119 = i111;
                                                                            obj2 = obj;
                                                                            this.photoImage.setAllowStartAnimation(true);
                                                                            this.photoImage.startAnimation();
                                                                            TLRPC$Document document3 = messageObject.getDocument();
                                                                            VideoEditedInfo videoEditedInfo = this.currentMessageObject.videoEditedInfo;
                                                                            if (videoEditedInfo != null && videoEditedInfo.canAutoPlaySourceVideo() && messageObject.getDocument() != null) {
                                                                                this.photoImage.setImage(ImageLocation.getForPath(this.currentMessageObject.videoEditedInfo.originalPath), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, document3), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                                ImageReceiver imageReceiver = this.photoImage;
                                                                                VideoEditedInfo videoEditedInfo2 = this.currentMessageObject.videoEditedInfo;
                                                                                imageReceiver.setMediaStartEndTime(videoEditedInfo2.startTime / 1000, videoEditedInfo2.endTime / 1000);
                                                                            } else if (messageObject.getDocument() != null) {
                                                                                if (!z45 && !z4) {
                                                                                    this.photoImage.setCrossfadeWithOldImage(true);
                                                                                }
                                                                                this.photoImage.setImage(ImageLocation.getForDocument(document3), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, document3), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, messageObject.getDocument().size, null, messageObject, 0);
                                                                            }
                                                                            messageObject8 = messageObject;
                                                                            i75 = i119;
                                                                            f5 = 1.0f;
                                                                        } else {
                                                                            int i222 = messageObject14.type;
                                                                            if (i222 == 20) {
                                                                                i119 = i111;
                                                                                obj2 = obj;
                                                                                ImageReceiver imageReceiver2 = this.photoImage;
                                                                                ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject);
                                                                                String str22 = this.currentPhotoFilterThumb;
                                                                                BitmapDrawable bitmapDrawable4 = this.currentPhotoObjectThumbStripped;
                                                                                MessageObject messageObject22 = this.currentMessageObject;
                                                                                imageReceiver2.setImage(null, null, forObject2, str22, bitmapDrawable4, 0L, null, messageObject22, !messageObject22.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                                                            } else if (i222 != 1) {
                                                                                if (i222 == 8 || i222 == 5) {
                                                                                    i119 = i111;
                                                                                    String attachFileName = FileLoader.getAttachFileName(messageObject.getDocument());
                                                                                    if (messageObject14.attachPathExists) {
                                                                                        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                                                                                        c4 = 1;
                                                                                    } else {
                                                                                        c4 = !messageObject14.mediaExists ? (char) 0 : (char) 2;
                                                                                    }
                                                                                    TLRPC$Document document4 = messageObject.getDocument();
                                                                                    boolean canDownloadMedia2 = (!MessageObject.isGifDocument(document4, messageObject.hasValidGroupId()) && messageObject14.type != 5) ? false : DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                                    TLRPC$VideoSize documentVideoThumb = MessageObject.getDocumentVideoThumb(document4);
                                                                                    if (((MessageObject.isGifDocument(document4, messageObject.hasValidGroupId()) && messageObject14.videoEditedInfo == null) || (!messageObject.isSending() && !messageObject.isEditing())) && (c4 != 0 || FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName) || canDownloadMedia2)) {
                                                                                        if (c4 != 1 && !messageObject.needDrawBluredPreview() && (c4 != 0 || (messageObject.canStreamVideo() && canDownloadMedia2))) {
                                                                                            this.autoPlayingMedia = true;
                                                                                            if (!z45) {
                                                                                                this.photoImage.setCrossfadeWithOldImage(true);
                                                                                                this.photoImage.setCrossfadeDuration(250);
                                                                                            }
                                                                                            if (c4 == 0 && documentVideoThumb != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                                ImageReceiver imageReceiver3 = this.photoImage;
                                                                                                ImageLocation forDocument = ImageLocation.getForDocument(document4);
                                                                                                ImageLocation forDocument2 = ImageLocation.getForDocument(documentVideoThumb, this.documentAttach);
                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize12 = this.currentPhotoObject;
                                                                                                if (tLRPC$PhotoSize12 == null) {
                                                                                                    tLRPC$PhotoSize12 = this.currentPhotoObjectThumb;
                                                                                                }
                                                                                                imageReceiver3.setImage(forDocument, ImageLoader.AUTOPLAY_FILTER, forDocument2, null, ImageLocation.getForDocument(tLRPC$PhotoSize12, this.documentAttach), this.currentPhotoObject == null ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, document4.size, null, messageObject, 0);
                                                                                            } else if (this.isRoundVideo && !z45 && this.photoImage.hasStaticThumb()) {
                                                                                                this.photoImage.setImage(ImageLocation.getForDocument(document4), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, null, null, this.photoImage.getStaticThumb(), document4.size, null, messageObject, 0);
                                                                                            } else {
                                                                                                this.photoImage.setImage(ImageLocation.getForDocument(document4), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, document4.size, null, messageObject, 0);
                                                                                            }
                                                                                        } else if (c4 == 1) {
                                                                                            this.photoImage.setImage(ImageLocation.getForPath(!messageObject.isSendError() ? messageObject14.messageOwner.attachPath : null), null, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                        } else if (documentVideoThumb != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                            ImageReceiver imageReceiver4 = this.photoImage;
                                                                                            ImageLocation forDocument3 = ImageLocation.getForDocument(document4);
                                                                                            ImageLocation forDocument4 = ImageLocation.getForDocument(documentVideoThumb, this.documentAttach);
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize13 = this.currentPhotoObject;
                                                                                            if (tLRPC$PhotoSize13 == null) {
                                                                                                tLRPC$PhotoSize13 = this.currentPhotoObjectThumb;
                                                                                            }
                                                                                            imageReceiver4.setImage(forDocument3, null, forDocument4, null, ImageLocation.getForDocument(tLRPC$PhotoSize13, this.documentAttach), this.currentPhotoObject == null ? this.currentPhotoFilterThumb : this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, document4.size, null, messageObject, 0);
                                                                                        } else {
                                                                                            this.photoImage.setImage(ImageLocation.getForDocument(document4), null, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, document4.size, null, messageObject, 0);
                                                                                        }
                                                                                    } else if (messageObject14.videoEditedInfo != null && messageObject14.type == 5 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                        this.photoImage.setImage(ImageLocation.getForPath(messageObject14.videoEditedInfo.originalPath), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                        ImageReceiver imageReceiver5 = this.photoImage;
                                                                                        VideoEditedInfo videoEditedInfo3 = this.currentMessageObject.videoEditedInfo;
                                                                                        imageReceiver5.setMediaStartEndTime(videoEditedInfo3.startTime / 1000, videoEditedInfo3.endTime / 1000);
                                                                                    } else {
                                                                                        if (!z45 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                            this.photoImage.setCrossfadeWithOldImage(true);
                                                                                            this.photoImage.setCrossfadeDuration(250);
                                                                                        }
                                                                                        this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                    }
                                                                                } else if (messageObject14.videoEditedInfo != null && i222 == 5 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                    i119 = i111;
                                                                                    this.photoImage.setImage(ImageLocation.getForPath(messageObject14.videoEditedInfo.originalPath), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, !this.currentMessageObject.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                                                                    ImageReceiver imageReceiver6 = this.photoImage;
                                                                                    VideoEditedInfo videoEditedInfo4 = this.currentMessageObject.videoEditedInfo;
                                                                                    imageReceiver6.setMediaStartEndTime(videoEditedInfo4.startTime / 1000, videoEditedInfo4.endTime / 1000);
                                                                                } else {
                                                                                    if (!z45 && !this.currentMessageObject.needDrawBluredPreview()) {
                                                                                        this.photoImage.setCrossfadeWithOldImage(true);
                                                                                        this.photoImage.setCrossfadeDuration(250);
                                                                                    }
                                                                                    i119 = i111;
                                                                                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, !this.currentMessageObject.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                                                                }
                                                                                messageObject8 = messageObject;
                                                                                i75 = i119;
                                                                                f5 = 1.0f;
                                                                            } else {
                                                                                i119 = i111;
                                                                                if (messageObject14.useCustomPhoto) {
                                                                                    obj2 = null;
                                                                                    this.photoImage.setImageBitmap(getResources().getDrawable(R.drawable.theme_preview_image));
                                                                                } else {
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize14 = this.currentPhotoObject;
                                                                                    if (tLRPC$PhotoSize14 != null) {
                                                                                        obj2 = null;
                                                                                        String attachFileName2 = FileLoader.getAttachFileName(tLRPC$PhotoSize14);
                                                                                        if (!messageObject14.mediaExists) {
                                                                                            z39 = false;
                                                                                        } else {
                                                                                            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                                                                                            z39 = true;
                                                                                        }
                                                                                        if (z39 || ((!this.currentMessageObject.loadingCancelled && DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject)) || FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName2))) {
                                                                                            ImageReceiver imageReceiver7 = this.photoImage;
                                                                                            ImageLocation forObject3 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                                                                                            String str23 = this.currentPhotoFilter;
                                                                                            ImageLocation forObject4 = ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject);
                                                                                            String str24 = this.currentPhotoFilterThumb;
                                                                                            BitmapDrawable bitmapDrawable5 = this.currentPhotoObjectThumbStripped;
                                                                                            long j4 = this.currentPhotoObject.size;
                                                                                            MessageObject messageObject23 = this.currentMessageObject;
                                                                                            imageReceiver7.setImage(forObject3, str23, forObject4, str24, bitmapDrawable5, j4, null, messageObject23, !messageObject23.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                                                                        } else {
                                                                                            this.photoNotSet = true;
                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize15 = this.currentPhotoObjectThumb;
                                                                                            if (tLRPC$PhotoSize15 != null || this.currentPhotoObjectThumbStripped != null) {
                                                                                                ImageReceiver imageReceiver8 = this.photoImage;
                                                                                                ImageLocation forObject5 = ImageLocation.getForObject(tLRPC$PhotoSize15, this.photoParentObject);
                                                                                                String str25 = this.currentPhotoFilterThumb;
                                                                                                BitmapDrawable bitmapDrawable6 = this.currentPhotoObjectThumbStripped;
                                                                                                MessageObject messageObject24 = this.currentMessageObject;
                                                                                                imageReceiver8.setImage(null, null, forObject5, str25, bitmapDrawable6, 0L, null, messageObject24, !messageObject24.shouldEncryptPhotoOrVideo() ? 0 : 2);
                                                                                            } else {
                                                                                                this.photoImage.setImageBitmap((Drawable) null);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        obj2 = null;
                                                                                        this.photoImage.setImageBitmap((Drawable) null);
                                                                                    }
                                                                                }
                                                                            }
                                                                            messageObject8 = messageObject;
                                                                            i75 = i119;
                                                                            f5 = 1.0f;
                                                                        }
                                                                    } else {
                                                                        this.autoPlayingMedia = true;
                                                                    }
                                                                }
                                                                if (this.autoPlayingMedia) {
                                                                }
                                                            }
                                                            if (this.autoPlayingMedia) {
                                                            }
                                                        }
                                                        i116 = 0 + dp48;
                                                        int max8 = Math.max(this.captionWidth, i97 - AndroidUtilities.dp(10.0f));
                                                        StaticLayout staticLayout14 = this.captionLayout;
                                                        float lineWidth = staticLayout14.getLineWidth(staticLayout14.getLineCount() - 1);
                                                        StaticLayout staticLayout15 = this.captionLayout;
                                                        float lineLeft2 = lineWidth + staticLayout15.getLineLeft(staticLayout15.getLineCount() - 1);
                                                        ReactionsLayoutInBubble reactionsLayoutInBubble27 = this.reactionsLayoutInBubble;
                                                        if (!reactionsLayoutInBubble27.isEmpty && !reactionsLayoutInBubble27.isSmall) {
                                                            c3 = 0;
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            i77 = i116;
                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                            if (this.currentMessagesGroup == null) {
                                                                int dp492 = AndroidUtilities.dp(8.0f) + measureText;
                                                                this.backgroundWidth = dp492;
                                                                if (!this.mediaBackground) {
                                                                }
                                                                i97 = measureText;
                                                            }
                                                            if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                            }
                                                            i74 = i97;
                                                            if (z3) {
                                                                String format72 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                                if (!messageObject.needDrawBluredPreview()) {
                                                                    sb3 = new StringBuilder();
                                                                    obj = null;
                                                                    sb3.append(forObject.getKey(this.photoParentObject, null, false));
                                                                    sb3.append("@");
                                                                    sb3.append(this.currentPhotoFilter);
                                                                    if (ImageLoader.getInstance().isInMemCache(sb3.toString(), false)) {
                                                                    }
                                                                    int i213222 = messageObject14.type;
                                                                    if (i213222 == 3) {
                                                                        tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize5 != null) {
                                                                            i118 = -1;
                                                                            tLRPC$PhotoSize5.size = -1;
                                                                            tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                            if (tLRPC$PhotoSize6 != null) {
                                                                                tLRPC$PhotoSize6.size = i118;
                                                                            }
                                                                            if (SharedConfig.autoplayVideo) {
                                                                            }
                                                                            if (this.autoPlayingMedia) {
                                                                            }
                                                                        }
                                                                        i118 = -1;
                                                                        tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                        if (tLRPC$PhotoSize6 != null) {
                                                                        }
                                                                        if (SharedConfig.autoplayVideo) {
                                                                        }
                                                                        if (this.autoPlayingMedia) {
                                                                        }
                                                                    }
                                                                    tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize5 != null) {
                                                                    }
                                                                    i118 = -1;
                                                                    tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                    if (tLRPC$PhotoSize6 != null) {
                                                                    }
                                                                    if (SharedConfig.autoplayVideo) {
                                                                    }
                                                                    if (this.autoPlayingMedia) {
                                                                    }
                                                                }
                                                                obj = null;
                                                                int i2132222 = messageObject14.type;
                                                                if (i2132222 == 3) {
                                                                }
                                                                tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize5 != null) {
                                                                }
                                                                i118 = -1;
                                                                tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize6 != null) {
                                                                }
                                                                if (SharedConfig.autoplayVideo) {
                                                                }
                                                                if (this.autoPlayingMedia) {
                                                                }
                                                            }
                                                            obj = null;
                                                            String format6222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                            this.currentPhotoFilterThumb = format6222;
                                                            this.currentPhotoFilter = format6222;
                                                            arrayList2 = messageObject14.photoThumbs;
                                                            if (arrayList2 != null) {
                                                                if (messageObject.needDrawBluredPreview()) {
                                                                }
                                                                int i21322222 = messageObject14.type;
                                                                if (i21322222 == 3) {
                                                                }
                                                                tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize5 != null) {
                                                                }
                                                                i118 = -1;
                                                                tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                                if (tLRPC$PhotoSize6 != null) {
                                                                }
                                                                if (SharedConfig.autoplayVideo) {
                                                                }
                                                                if (this.autoPlayingMedia) {
                                                                }
                                                            }
                                                            if (messageObject.needDrawBluredPreview()) {
                                                            }
                                                            int i213222222 = messageObject14.type;
                                                            if (i213222222 == 3) {
                                                            }
                                                            tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize5 != null) {
                                                            }
                                                            i118 = -1;
                                                            tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                            if (tLRPC$PhotoSize6 != null) {
                                                            }
                                                            if (SharedConfig.autoplayVideo) {
                                                            }
                                                            if (this.autoPlayingMedia) {
                                                            }
                                                        }
                                                        if (!shouldDrawTimeOnMedia() && (max8 + AndroidUtilities.dp(2.0f)) - lineLeft2 < getExtraTimeX() + dp18) {
                                                            i116 += AndroidUtilities.dp(14.0f);
                                                            this.addedCaptionHeight += AndroidUtilities.dp(14.0f);
                                                            c3 = 1;
                                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                                            }
                                                            i77 = i116;
                                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                            if (this.currentMessagesGroup == null) {
                                                            }
                                                            if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                            }
                                                            i74 = i97;
                                                            if (z3) {
                                                            }
                                                            obj = null;
                                                            String format62222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                            this.currentPhotoFilterThumb = format62222;
                                                            this.currentPhotoFilter = format62222;
                                                            arrayList2 = messageObject14.photoThumbs;
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (messageObject.needDrawBluredPreview()) {
                                                            }
                                                            int i2132222222 = messageObject14.type;
                                                            if (i2132222222 == 3) {
                                                            }
                                                            tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize5 != null) {
                                                            }
                                                            i118 = -1;
                                                            tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                            if (tLRPC$PhotoSize6 != null) {
                                                            }
                                                            if (SharedConfig.autoplayVideo) {
                                                            }
                                                            if (this.autoPlayingMedia) {
                                                            }
                                                        }
                                                        c3 = 0;
                                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                                        }
                                                        i77 = i116;
                                                        measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                        if (this.currentMessagesGroup == null) {
                                                        }
                                                        if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                        }
                                                        i74 = i97;
                                                        if (z3) {
                                                        }
                                                        obj = null;
                                                        String format622222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                        this.currentPhotoFilterThumb = format622222;
                                                        this.currentPhotoFilter = format622222;
                                                        arrayList2 = messageObject14.photoThumbs;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (messageObject.needDrawBluredPreview()) {
                                                        }
                                                        int i21322222222 = messageObject14.type;
                                                        if (i21322222222 == 3) {
                                                        }
                                                        tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                        if (tLRPC$PhotoSize5 != null) {
                                                        }
                                                        i118 = -1;
                                                        tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                        if (tLRPC$PhotoSize6 != null) {
                                                        }
                                                        if (SharedConfig.autoplayVideo) {
                                                        }
                                                        if (this.autoPlayingMedia) {
                                                        }
                                                    }
                                                }
                                                c3 = 0;
                                                i116 = 0;
                                                if (!this.reactionsLayoutInBubble.isSmall) {
                                                }
                                                i77 = i116;
                                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                                if (this.currentMessagesGroup == null) {
                                                }
                                                if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                                }
                                                i74 = i97;
                                                if (z3) {
                                                }
                                                obj = null;
                                                String format6222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                                this.currentPhotoFilterThumb = format6222222;
                                                this.currentPhotoFilter = format6222222;
                                                arrayList2 = messageObject14.photoThumbs;
                                                if (arrayList2 != null) {
                                                }
                                                if (messageObject.needDrawBluredPreview()) {
                                                }
                                                int i213222222222 = messageObject14.type;
                                                if (i213222222222 == 3) {
                                                }
                                                tLRPC$PhotoSize5 = this.currentPhotoObject;
                                                if (tLRPC$PhotoSize5 != null) {
                                                }
                                                i118 = -1;
                                                tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                                if (tLRPC$PhotoSize6 != null) {
                                                }
                                                if (SharedConfig.autoplayVideo) {
                                                }
                                                if (this.autoPlayingMedia) {
                                                }
                                            }
                                            z35 = false;
                                            bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                            if (bitmapDrawable3 != null) {
                                            }
                                            if (messageObject14.type == 5) {
                                            }
                                            tLRPC$PhotoSize3 = this.currentPhotoObject;
                                            if (tLRPC$PhotoSize3 != null) {
                                                this.currentPhotoObject = null;
                                            }
                                            tLRPC$PhotoSize4 = this.currentPhotoObject;
                                            if (tLRPC$PhotoSize4 != null) {
                                                i121 = messageObject14.type;
                                                if (i121 == 1) {
                                                    this.currentPhotoObject = null;
                                                }
                                                this.currentPhotoObjectThumb = null;
                                                this.currentPhotoObjectThumbStripped = null;
                                            }
                                            if (z35) {
                                                this.photoImage.setNeedsQualityThumb(true);
                                                this.photoImage.setShouldGenerateQualityThumb(true);
                                            }
                                            if (this.currentMessagesGroup == null) {
                                                this.mediaBackground = false;
                                            }
                                            if (i97 != 0) {
                                            }
                                            while (i99 < document.attributes.size()) {
                                            }
                                            dp41 = i98;
                                            i98 = dp41;
                                            if (i97 != 0) {
                                            }
                                            i98 = AndroidUtilities.dp(150.0f);
                                            i97 = i98;
                                            if (messageObject14.type == 3) {
                                                i97 = this.infoWidth + AndroidUtilities.dp(40.0f);
                                            }
                                            if (this.commentLayout != null) {
                                                i97 = this.totalCommentWidth + AndroidUtilities.dp(10.0f);
                                            }
                                            if (this.currentMessagesGroup != null) {
                                            }
                                            if (messageObject14.type == 5) {
                                            }
                                            measureTime(messageObject);
                                            dp18 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20));
                                            if (i97 < dp18) {
                                            }
                                            if (messageObject.isRoundVideo()) {
                                            }
                                            if (this.currentMessagesGroup != null) {
                                            }
                                            if (this.currentCaption != null) {
                                            }
                                            c3 = 0;
                                            i116 = 0;
                                            if (!this.reactionsLayoutInBubble.isSmall) {
                                            }
                                            i77 = i116;
                                            measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                            if (this.currentMessagesGroup == null) {
                                            }
                                            if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                            }
                                            i74 = i97;
                                            if (z3) {
                                            }
                                            obj = null;
                                            String format62222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                            this.currentPhotoFilterThumb = format62222222;
                                            this.currentPhotoFilter = format62222222;
                                            arrayList2 = messageObject14.photoThumbs;
                                            if (arrayList2 != null) {
                                            }
                                            if (messageObject.needDrawBluredPreview()) {
                                            }
                                            int i2132222222222 = messageObject14.type;
                                            if (i2132222222222 == 3) {
                                            }
                                            tLRPC$PhotoSize5 = this.currentPhotoObject;
                                            if (tLRPC$PhotoSize5 != null) {
                                            }
                                            i118 = -1;
                                            tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                            if (tLRPC$PhotoSize6 != null) {
                                            }
                                            if (SharedConfig.autoplayVideo) {
                                            }
                                            if (this.autoPlayingMedia) {
                                            }
                                        } else {
                                            minTabletSide11 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                                        }
                                    }
                                    i95 = (int) (minTabletSide11 * 0.7f);
                                }
                                z34 = false;
                                int dp412 = AndroidUtilities.dp(100.0f) + i95;
                                if (z34) {
                                }
                                i96 = messageObject14.type;
                                if (i96 == 1) {
                                    if (i96 == 3) {
                                        if (i96 == 5) {
                                        }
                                        z35 = false;
                                        bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                        if (bitmapDrawable3 != null) {
                                        }
                                        if (messageObject14.type == 5) {
                                        }
                                        tLRPC$PhotoSize3 = this.currentPhotoObject;
                                        if (tLRPC$PhotoSize3 != null) {
                                        }
                                        tLRPC$PhotoSize4 = this.currentPhotoObject;
                                        if (tLRPC$PhotoSize4 != null) {
                                        }
                                        if (z35) {
                                        }
                                        if (this.currentMessagesGroup == null) {
                                        }
                                        if (i97 != 0) {
                                        }
                                        while (i99 < document.attributes.size()) {
                                        }
                                        dp412 = i98;
                                        i98 = dp412;
                                        if (i97 != 0) {
                                        }
                                        i98 = AndroidUtilities.dp(150.0f);
                                        i97 = i98;
                                        if (messageObject14.type == 3) {
                                        }
                                        if (this.commentLayout != null) {
                                        }
                                        if (this.currentMessagesGroup != null) {
                                        }
                                        if (messageObject14.type == 5) {
                                        }
                                        measureTime(messageObject);
                                        dp18 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20));
                                        if (i97 < dp18) {
                                        }
                                        if (messageObject.isRoundVideo()) {
                                        }
                                        if (this.currentMessagesGroup != null) {
                                        }
                                        if (this.currentCaption != null) {
                                        }
                                        c3 = 0;
                                        i116 = 0;
                                        if (!this.reactionsLayoutInBubble.isSmall) {
                                        }
                                        i77 = i116;
                                        measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                        if (this.currentMessagesGroup == null) {
                                        }
                                        if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                        }
                                        i74 = i97;
                                        if (z3) {
                                        }
                                        obj = null;
                                        String format622222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                        this.currentPhotoFilterThumb = format622222222;
                                        this.currentPhotoFilter = format622222222;
                                        arrayList2 = messageObject14.photoThumbs;
                                        if (arrayList2 != null) {
                                        }
                                        if (messageObject.needDrawBluredPreview()) {
                                        }
                                        int i21322222222222 = messageObject14.type;
                                        if (i21322222222222 == 3) {
                                        }
                                        tLRPC$PhotoSize5 = this.currentPhotoObject;
                                        if (tLRPC$PhotoSize5 != null) {
                                        }
                                        i118 = -1;
                                        tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                        if (tLRPC$PhotoSize6 != null) {
                                        }
                                        if (SharedConfig.autoplayVideo) {
                                        }
                                        if (this.autoPlayingMedia) {
                                        }
                                    }
                                    createDocumentLayout(0, messageObject14);
                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, 40);
                                    updateSecretTimeText(messageObject);
                                    z35 = true;
                                    bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                    if (bitmapDrawable3 != null) {
                                    }
                                    if (messageObject14.type == 5) {
                                    }
                                    tLRPC$PhotoSize3 = this.currentPhotoObject;
                                    if (tLRPC$PhotoSize3 != null) {
                                    }
                                    tLRPC$PhotoSize4 = this.currentPhotoObject;
                                    if (tLRPC$PhotoSize4 != null) {
                                    }
                                    if (z35) {
                                    }
                                    if (this.currentMessagesGroup == null) {
                                    }
                                    if (i97 != 0) {
                                    }
                                    while (i99 < document.attributes.size()) {
                                    }
                                    dp412 = i98;
                                    i98 = dp412;
                                    if (i97 != 0) {
                                    }
                                    i98 = AndroidUtilities.dp(150.0f);
                                    i97 = i98;
                                    if (messageObject14.type == 3) {
                                    }
                                    if (this.commentLayout != null) {
                                    }
                                    if (this.currentMessagesGroup != null) {
                                    }
                                    if (messageObject14.type == 5) {
                                    }
                                    measureTime(messageObject);
                                    dp18 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20));
                                    if (i97 < dp18) {
                                    }
                                    if (messageObject.isRoundVideo()) {
                                    }
                                    if (this.currentMessagesGroup != null) {
                                    }
                                    if (this.currentCaption != null) {
                                    }
                                    c3 = 0;
                                    i116 = 0;
                                    if (!this.reactionsLayoutInBubble.isSmall) {
                                    }
                                    i77 = i116;
                                    measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                    if (this.currentMessagesGroup == null) {
                                    }
                                    if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                    }
                                    i74 = i97;
                                    if (z3) {
                                    }
                                    obj = null;
                                    String format6222222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                    this.currentPhotoFilterThumb = format6222222222;
                                    this.currentPhotoFilter = format6222222222;
                                    arrayList2 = messageObject14.photoThumbs;
                                    if (arrayList2 != null) {
                                    }
                                    if (messageObject.needDrawBluredPreview()) {
                                    }
                                    int i213222222222222 = messageObject14.type;
                                    if (i213222222222222 == 3) {
                                    }
                                    tLRPC$PhotoSize5 = this.currentPhotoObject;
                                    if (tLRPC$PhotoSize5 != null) {
                                    }
                                    i118 = -1;
                                    tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                    if (tLRPC$PhotoSize6 != null) {
                                    }
                                    if (SharedConfig.autoplayVideo) {
                                    }
                                    if (this.autoPlayingMedia) {
                                    }
                                }
                                updateSecretTimeText(messageObject);
                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject14.photoThumbs, 40);
                                z35 = false;
                                bitmapDrawable3 = this.currentMessageObject.strippedThumb;
                                if (bitmapDrawable3 != null) {
                                }
                                if (messageObject14.type == 5) {
                                }
                                tLRPC$PhotoSize3 = this.currentPhotoObject;
                                if (tLRPC$PhotoSize3 != null) {
                                }
                                tLRPC$PhotoSize4 = this.currentPhotoObject;
                                if (tLRPC$PhotoSize4 != null) {
                                }
                                if (z35) {
                                }
                                if (this.currentMessagesGroup == null) {
                                }
                                if (i97 != 0) {
                                }
                                while (i99 < document.attributes.size()) {
                                }
                                dp412 = i98;
                                i98 = dp412;
                                if (i97 != 0) {
                                }
                                i98 = AndroidUtilities.dp(150.0f);
                                i97 = i98;
                                if (messageObject14.type == 3) {
                                }
                                if (this.commentLayout != null) {
                                }
                                if (this.currentMessagesGroup != null) {
                                }
                                if (messageObject14.type == 5) {
                                }
                                measureTime(messageObject);
                                dp18 = this.timeWidth + AndroidUtilities.dp((SharedConfig.bubbleRadius < 10 ? 18 : 22) + (!messageObject.isOutOwner() ? 0 : 20));
                                if (i97 < dp18) {
                                }
                                if (messageObject.isRoundVideo()) {
                                }
                                if (this.currentMessagesGroup != null) {
                                }
                                if (this.currentCaption != null) {
                                }
                                c3 = 0;
                                i116 = 0;
                                if (!this.reactionsLayoutInBubble.isSmall) {
                                }
                                i77 = i116;
                                measureText = (int) (Theme.chat_infoPaint.measureText("100%") + AndroidUtilities.dp(100.0f));
                                if (this.currentMessagesGroup == null) {
                                }
                                if (i97 < this.captionWidth + AndroidUtilities.dp(10.0f)) {
                                }
                                i74 = i97;
                                if (z3) {
                                }
                                obj = null;
                                String format62222222222 = String.format(Locale.US, "%d_%d", Integer.valueOf((int) (i112 / AndroidUtilities.density)), Integer.valueOf((int) (i111 / AndroidUtilities.density)));
                                this.currentPhotoFilterThumb = format62222222222;
                                this.currentPhotoFilter = format62222222222;
                                arrayList2 = messageObject14.photoThumbs;
                                if (arrayList2 != null) {
                                }
                                if (messageObject.needDrawBluredPreview()) {
                                }
                                int i2132222222222222 = messageObject14.type;
                                if (i2132222222222222 == 3) {
                                }
                                tLRPC$PhotoSize5 = this.currentPhotoObject;
                                if (tLRPC$PhotoSize5 != null) {
                                }
                                i118 = -1;
                                tLRPC$PhotoSize6 = this.currentPhotoObjectThumb;
                                if (tLRPC$PhotoSize6 != null) {
                                }
                                if (SharedConfig.autoplayVideo) {
                                }
                                if (this.autoPlayingMedia) {
                                }
                            }
                            if (this.blurredPhotoImage.getBitmap() != null) {
                                this.blurredPhotoImage.getBitmap().recycle();
                                this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                            }
                            if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) {
                                this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                            }
                            setMessageObjectInternal(messageObject);
                            if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition7 = this.currentPosition) == null || groupedMessagePosition7.minY == 0)) {
                                if (messageObject8.type != 5) {
                                    this.namesOffset += AndroidUtilities.dp(5.0f);
                                }
                            } else if (this.drawNameLayout && (messageObject.getReplyMsgId() == 0 || (this.isThreadChat && messageObject.getReplyTopMsgId() == 0))) {
                                this.namesOffset += AndroidUtilities.dp(7.0f);
                            }
                            this.totalHeight = AndroidUtilities.dp(14.0f) + i75 + this.namesOffset + i77;
                            if (messageObject.isVoiceTranscriptionOpen()) {
                                this.totalHeight += AndroidUtilities.dp(56.0f);
                            }
                            groupedMessagePosition6 = this.currentPosition;
                            if (groupedMessagePosition6 != null && (groupedMessagePosition6.flags & 8) == 0 && !this.currentMessageObject.isDocument() && this.currentMessageObject.type != 19) {
                                this.totalHeight -= AndroidUtilities.dp(3.0f);
                            }
                            if (this.currentMessageObject.isDice()) {
                                this.totalHeight += AndroidUtilities.dp(21.0f);
                                this.additionalTimeOffsetY = AndroidUtilities.dp(21.0f);
                            }
                            if (this.currentPosition != null && !this.currentMessageObject.isDocument()) {
                                int additionalWidthForPosition22 = i74 + getAdditionalWidthForPosition(this.currentPosition);
                                if ((this.currentPosition.flags & 4) == 0) {
                                    i79 = 0;
                                } else {
                                    i75 += AndroidUtilities.dp(4.0f);
                                    i79 = 0 - AndroidUtilities.dp(4.0f);
                                }
                                if ((this.currentPosition.flags & 8) == 0) {
                                    i75 += AndroidUtilities.dp(f5);
                                }
                                i78 = additionalWidthForPosition22;
                            } else {
                                if (this.currentPosition != null && this.currentMessageObject.isDocument()) {
                                    i80 = this.currentPosition.flags;
                                    if ((i80 & 4) == 0 && (i80 & 8) != 0 && !messageObject.isOutOwner()) {
                                        this.totalHeight -= AndroidUtilities.dp(2.0f);
                                    }
                                }
                                i78 = i74;
                                i79 = 0;
                            }
                            if (this.currentMessageObject.type == 19) {
                                dp13 = 0;
                            } else {
                                if (this.drawPinnedTop) {
                                    this.namesOffset -= AndroidUtilities.dp(this.documentAttachType != 1 ? 1.0f : 2.0f);
                                }
                                if (this.drawPinnedTop && !messageObject.isOutOwner()) {
                                    this.totalHeight += AndroidUtilities.dp(this.documentAttachType != 1 ? 0.0f : 2.0f);
                                }
                                if (this.namesOffset > 0) {
                                    dp13 = AndroidUtilities.dp(7.0f);
                                    this.totalHeight -= AndroidUtilities.dp(2.0f);
                                } else {
                                    dp13 = AndroidUtilities.dp(5.0f);
                                    this.totalHeight -= AndroidUtilities.dp(4.0f);
                                }
                            }
                            if (this.currentPosition != null) {
                                MessageObject.GroupedMessages groupedMessages6 = this.currentMessagesGroup;
                                if (groupedMessages6.isDocuments && groupedMessages6.messages.size() > 1) {
                                    if ((this.currentPosition.flags & 4) == 0) {
                                        this.totalHeight -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                        this.mediaOffsetY -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                        dp13 -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                    }
                                    if ((this.currentPosition.flags & 8) == 0) {
                                        this.totalHeight -= AndroidUtilities.dp(!this.drawPhotoImage ? 6.0f : 3.0f);
                                    }
                                }
                            }
                            if (messageObject.isRoundVideo() && messageObject.isVoiceTranscriptionOpen()) {
                                this.photoImage.setImageCoords(0.0f, AndroidUtilities.dp(13.0f), AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                            } else {
                                this.photoImage.setImageCoords(0.0f, dp13 + this.namesOffset + i79, i78, i75);
                            }
                            invalidate();
                            c = c3;
                            messageObject4 = messageObject8;
                            z24 = z32;
                            i35 = 4;
                            i36 = 3;
                            r15 = 0;
                            f3 = 1.0f;
                        }
                        c3 = 0;
                        z32 = true;
                        if (this.blurredPhotoImage.getBitmap() != null) {
                        }
                        if (this.photoImage.getBitmap() != null) {
                        }
                        setMessageObjectInternal(messageObject);
                        if (this.drawForwardedName) {
                        }
                        if (this.drawNameLayout) {
                        }
                        this.totalHeight = AndroidUtilities.dp(14.0f) + i75 + this.namesOffset + i77;
                        if (messageObject.isVoiceTranscriptionOpen()) {
                        }
                        groupedMessagePosition6 = this.currentPosition;
                        if (groupedMessagePosition6 != null) {
                        }
                        if (this.currentMessageObject.isDice()) {
                        }
                        if (this.currentPosition != null) {
                        }
                        if (this.currentPosition != null) {
                        }
                        i78 = i74;
                        i79 = 0;
                        if (this.currentMessageObject.type == 19) {
                        }
                        if (this.currentPosition != null) {
                        }
                        if (messageObject.isRoundVideo()) {
                        }
                        this.photoImage.setImageCoords(0.0f, dp13 + this.namesOffset + i79, i78, i75);
                        invalidate();
                        c = c3;
                        messageObject4 = messageObject8;
                        z24 = z32;
                        i35 = 4;
                        i36 = 3;
                        r15 = 0;
                        f3 = 1.0f;
                    }
                    messageObject4 = messageObject7;
                    i35 = 4;
                    c = 0;
                    i36 = 3;
                    r15 = 0;
                    f3 = 1.0f;
                    z24 = true;
                } else {
                    MessageObject messageObject25 = messageObject14;
                    this.drawForwardedName = !this.isRepliesChat;
                    if (z8) {
                        if (AndroidUtilities.isTablet()) {
                            minTabletSide = AndroidUtilities.getMinTabletSide();
                            dp = AndroidUtilities.dp(122.0f);
                        } else {
                            minTabletSide = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                            dp = AndroidUtilities.dp(122.0f);
                        }
                        i5 = minTabletSide - dp;
                        this.drawName = true;
                    } else {
                        if (AndroidUtilities.isTablet()) {
                            minTabletSide4 = AndroidUtilities.getMinTabletSide();
                            dp5 = AndroidUtilities.dp(80.0f);
                        } else {
                            minTabletSide4 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                            dp5 = AndroidUtilities.dp(80.0f);
                        }
                        i5 = minTabletSide4 - dp5;
                        this.drawName = this.isPinnedChat || !((tLRPC$Peer = messageObject25.messageOwner.peer_id) == null || tLRPC$Peer.channel_id == 0 || (messageObject.isOutOwner() && !messageObject.isSupergroup())) || (messageObject.isImportedForward() && messageObject25.messageOwner.fwd_from.from_id == null);
                    }
                    int i223 = i5;
                    this.availableTimeWidth = i223;
                    if (messageObject.isRoundVideo()) {
                        double d15 = this.availableTimeWidth;
                        double ceil19 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                        double dp51 = !messageObject.isOutOwner() ? AndroidUtilities.dp(64.0f) : 0;
                        Double.isNaN(dp51);
                        Double.isNaN(d15);
                        this.availableTimeWidth = (int) (d15 - (ceil19 + dp51));
                    }
                    measureTime(messageObject);
                    int dp52 = this.timeWidth + AndroidUtilities.dp(6.0f);
                    if (messageObject.isOutOwner()) {
                        dp52 += AndroidUtilities.dp(20.5f);
                    }
                    int extraTimeX2 = dp52 + getExtraTimeX();
                    this.hasGamePreview = (MessageObject.getMedia(messageObject25.messageOwner) instanceof TLRPC$TL_messageMediaGame) && (MessageObject.getMedia(messageObject25.messageOwner).game instanceof TLRPC$TL_game);
                    this.hasInvoicePreview = MessageObject.getMedia(messageObject25.messageOwner) instanceof TLRPC$TL_messageMediaInvoice;
                    boolean z59 = !messageObject25.isRestrictedMessage && (MessageObject.getMedia(messageObject25.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && (MessageObject.getMedia(messageObject25.messageOwner).webpage instanceof TLRPC$TL_webPage);
                    this.hasLinkPreview = z59;
                    this.drawInstantView = z59 && MessageObject.getMedia(messageObject25.messageOwner).webpage.cached_page != null;
                    String str26 = !this.hasLinkPreview ? null : MessageObject.getMedia(messageObject25.messageOwner).webpage.site_name;
                    this.hasEmbed = this.hasLinkPreview && !TextUtils.isEmpty(MessageObject.getMedia(messageObject25.messageOwner).webpage.embed_url) && !messageObject.isGif() && !"instangram".equalsIgnoreCase(str26);
                    String str27 = !this.hasLinkPreview ? null : MessageObject.getMedia(messageObject25.messageOwner).webpage.type;
                    if (this.drawInstantView) {
                        if (str26 != null) {
                            String lowerCase = str26.toLowerCase();
                            if ((lowerCase.equals("instagram") || lowerCase.equals("twitter") || "telegram_album".equals(str27)) && (MessageObject.getMedia(messageObject25.messageOwner).webpage.cached_page instanceof TLRPC$TL_page) && ((MessageObject.getMedia(messageObject25.messageOwner).webpage.photo instanceof TLRPC$TL_photo) || MessageObject.isVideoDocument(MessageObject.getMedia(messageObject25.messageOwner).webpage.document))) {
                                this.drawInstantView = false;
                                ArrayList<TLRPC$PageBlock> arrayList7 = MessageObject.getMedia(messageObject25.messageOwner).webpage.cached_page.blocks;
                                int i224 = 1;
                                for (int i225 = 0; i225 < arrayList7.size(); i225++) {
                                    TLRPC$PageBlock tLRPC$PageBlock = arrayList7.get(i225);
                                    if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockSlideshow) {
                                        i224 = ((TLRPC$TL_pageBlockSlideshow) tLRPC$PageBlock).items.size();
                                    } else if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockCollage) {
                                        i224 = ((TLRPC$TL_pageBlockCollage) tLRPC$PageBlock).items.size();
                                    }
                                }
                                String formatString = LocaleController.formatString("Of", R.string.Of, 1, Integer.valueOf(i224));
                                this.photosCountWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatString));
                                this.photosCountLayout = new StaticLayout(formatString, Theme.chat_durationPaint, this.photosCountWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                z10 = true;
                                tLRPC$Document2 = null;
                                tLRPC$ThemeSettings2 = null;
                                this.backgroundWidth = i223;
                                if (!this.hasLinkPreview && !this.hasGamePreview && !this.hasInvoicePreview) {
                                    i59 = messageObject25.lastLineWidth;
                                    if (i223 - i59 >= extraTimeX2) {
                                        int i226 = i223 - i59;
                                        if (i226 >= 0 && i226 <= extraTimeX2) {
                                            this.backgroundWidth = ((i223 + extraTimeX2) - i226) + AndroidUtilities.dp(31.0f);
                                        } else {
                                            this.backgroundWidth = Math.max(i223, i59 + extraTimeX2) + AndroidUtilities.dp(31.0f);
                                        }
                                        this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                        if (messageObject.isRoundVideo()) {
                                            double d16 = this.availableTimeWidth;
                                            double ceil20 = Math.ceil(Theme.chat_audioTimePaint.measureText("00:00"));
                                            double dp53 = !messageObject.isOutOwner() ? AndroidUtilities.dp(64.0f) : 0;
                                            Double.isNaN(dp53);
                                            Double.isNaN(d16);
                                            this.availableTimeWidth = (int) (d16 - (ceil20 + dp53));
                                        }
                                        setMessageObjectInternal(messageObject);
                                        this.backgroundWidth = messageObject25.textWidth + (getExtraTextX() * 2) + ((!this.hasGamePreview && !this.hasInvoicePreview) ? 0 : AndroidUtilities.dp(10.0f));
                                        this.totalHeight = messageObject25.textHeight + AndroidUtilities.dp(19.5f) + this.namesOffset;
                                        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                        if (!reactionsLayoutInBubble.isSmall) {
                                            reactionsLayoutInBubble.measure(i223, 3);
                                            ReactionsLayoutInBubble reactionsLayoutInBubble28 = this.reactionsLayoutInBubble;
                                            if (!reactionsLayoutInBubble28.isEmpty) {
                                                reactionsLayoutInBubble28.totalHeight = reactionsLayoutInBubble28.height + AndroidUtilities.dp(8.0f);
                                                ReactionsLayoutInBubble reactionsLayoutInBubble29 = this.reactionsLayoutInBubble;
                                                int i227 = reactionsLayoutInBubble29.width;
                                                if (i227 > this.backgroundWidth) {
                                                    this.backgroundWidth = i227;
                                                }
                                                this.totalHeight += reactionsLayoutInBubble29.totalHeight;
                                            }
                                        }
                                        if (this.drawPinnedTop) {
                                            this.namesOffset -= AndroidUtilities.dp(1.0f);
                                        }
                                        int max9 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                        messageTopicButton = this.topicButton;
                                        if (messageTopicButton != null) {
                                            max9 = Math.max(max9, messageTopicButton.width());
                                        }
                                        max = Math.max(max9, this.replyTextWidth);
                                        if (this.commentLayout != null && this.drawSideButton != 3) {
                                            max = Math.max(max, this.totalCommentWidth);
                                        }
                                        if (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
                                            if (!AndroidUtilities.isTablet()) {
                                                if (z8) {
                                                    minTabletSide2 = getParentWidth();
                                                    dp2 = AndroidUtilities.dp(132.0f);
                                                } else {
                                                    minTabletSide2 = getParentWidth();
                                                    dp2 = AndroidUtilities.dp(80.0f);
                                                }
                                            } else if (z8) {
                                                minTabletSide2 = AndroidUtilities.getMinTabletSide();
                                                dp2 = AndroidUtilities.dp(132.0f);
                                            } else {
                                                minTabletSide2 = AndroidUtilities.getMinTabletSide();
                                                dp2 = AndroidUtilities.dp(80.0f);
                                            }
                                            int i228 = minTabletSide2 - dp2;
                                            if (this.drawSideButton != 0) {
                                                i228 -= AndroidUtilities.dp(20.0f);
                                            }
                                            int dp54 = AndroidUtilities.dp(48.0f);
                                            int dp55 = AndroidUtilities.dp(10.0f);
                                            if (this.hasLinkPreview) {
                                                TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) MessageObject.getMedia(messageObject25.messageOwner).webpage;
                                                String str28 = tLRPC$TL_webPage.site_name;
                                                int i229 = this.drawInstantViewType;
                                                if (i229 != 6 && i229 != 7) {
                                                    str = tLRPC$TL_webPage.title;
                                                    i6 = 6;
                                                    if (i229 != i6 && i229 != 7) {
                                                        str2 = tLRPC$TL_webPage.author;
                                                        i7 = 6;
                                                        if (i229 != i7 && i229 != 7) {
                                                            str3 = tLRPC$TL_webPage.description;
                                                            TLRPC$Photo tLRPC$Photo5 = tLRPC$TL_webPage.photo;
                                                            TLRPC$Document tLRPC$Document9 = tLRPC$Document2;
                                                            if (i229 == 7) {
                                                                themeDocument = tLRPC$TL_webPage.document;
                                                            } else if (tLRPC$ThemeSettings2 != null) {
                                                                themeDocument = new DocumentObject.ThemeDocument(tLRPC$ThemeSettings2);
                                                            } else {
                                                                tLRPC$Document3 = tLRPC$Document9;
                                                                String str29 = tLRPC$TL_webPage.type;
                                                                int i230 = tLRPC$TL_webPage.duration;
                                                                if (str28 == null || tLRPC$Photo5 == null) {
                                                                    tLRPC$Photo = tLRPC$Photo5;
                                                                } else {
                                                                    tLRPC$Photo = tLRPC$Photo5;
                                                                    if (str28.toLowerCase().equals("instagram")) {
                                                                        i228 = Math.max(AndroidUtilities.displaySize.y / 3, this.currentMessageObject.textWidth);
                                                                    }
                                                                }
                                                                boolean z60 = !z10 && (!this.drawInstantView || (i10 = this.drawInstantViewType) == 1 || i10 == 2 || i10 == 9 || i10 == 11 || i10 == 13) && tLRPC$Document3 == null && ("app".equals(str29) || "profile".equals(str29) || "article".equals(str29) || "telegram_bot".equals(str29) || "telegram_user".equals(str29) || "telegram_channel".equals(str29) || "telegram_megagroup".equals(str29) || "telegram_voicechat".equals(str29) || "telegram_livestream".equals(str29));
                                                                this.isSmallImage = (!z60 || str29 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                                str4 = str2;
                                                                tLRPC$Photo2 = tLRPC$Photo;
                                                                i8 = i223;
                                                                str5 = str28;
                                                                tLRPC$Document4 = tLRPC$Document3;
                                                                str6 = str29;
                                                                webFile = null;
                                                                z11 = z60;
                                                                str7 = str;
                                                                i9 = i230;
                                                            }
                                                            tLRPC$Document3 = themeDocument;
                                                            String str292 = tLRPC$TL_webPage.type;
                                                            int i2302 = tLRPC$TL_webPage.duration;
                                                            if (str28 == null) {
                                                                tLRPC$Photo = tLRPC$Photo5;
                                                                if (str28.toLowerCase().equals("instagram")) {
                                                                }
                                                                if ("app".equals(str292)) {
                                                                    if (!z10) {
                                                                        if (!z60) {
                                                                            this.isSmallImage = (!z60 || str292 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                                            str4 = str2;
                                                                            tLRPC$Photo2 = tLRPC$Photo;
                                                                            i8 = i223;
                                                                            str5 = str28;
                                                                            tLRPC$Document4 = tLRPC$Document3;
                                                                            str6 = str292;
                                                                            webFile = null;
                                                                            z11 = z60;
                                                                            str7 = str;
                                                                            i9 = i2302;
                                                                        }
                                                                        this.isSmallImage = (!z60 || str292 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                                        str4 = str2;
                                                                        tLRPC$Photo2 = tLRPC$Photo;
                                                                        i8 = i223;
                                                                        str5 = str28;
                                                                        tLRPC$Document4 = tLRPC$Document3;
                                                                        str6 = str292;
                                                                        webFile = null;
                                                                        z11 = z60;
                                                                        str7 = str;
                                                                        i9 = i2302;
                                                                    }
                                                                    this.isSmallImage = (!z60 || str292 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                                    str4 = str2;
                                                                    tLRPC$Photo2 = tLRPC$Photo;
                                                                    i8 = i223;
                                                                    str5 = str28;
                                                                    tLRPC$Document4 = tLRPC$Document3;
                                                                    str6 = str292;
                                                                    webFile = null;
                                                                    z11 = z60;
                                                                    str7 = str;
                                                                    i9 = i2302;
                                                                }
                                                                if (!z10) {
                                                                }
                                                                this.isSmallImage = (!z60 || str292 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                                str4 = str2;
                                                                tLRPC$Photo2 = tLRPC$Photo;
                                                                i8 = i223;
                                                                str5 = str28;
                                                                tLRPC$Document4 = tLRPC$Document3;
                                                                str6 = str292;
                                                                webFile = null;
                                                                z11 = z60;
                                                                str7 = str;
                                                                i9 = i2302;
                                                            }
                                                            tLRPC$Photo = tLRPC$Photo5;
                                                            if (!z10) {
                                                            }
                                                            this.isSmallImage = (!z60 || str292 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                            str4 = str2;
                                                            tLRPC$Photo2 = tLRPC$Photo;
                                                            i8 = i223;
                                                            str5 = str28;
                                                            tLRPC$Document4 = tLRPC$Document3;
                                                            str6 = str292;
                                                            webFile = null;
                                                            z11 = z60;
                                                            str7 = str;
                                                            i9 = i2302;
                                                        }
                                                        str3 = null;
                                                        TLRPC$Photo tLRPC$Photo52 = tLRPC$TL_webPage.photo;
                                                        TLRPC$Document tLRPC$Document92 = tLRPC$Document2;
                                                        if (i229 == 7) {
                                                        }
                                                        tLRPC$Document3 = themeDocument;
                                                        String str2922 = tLRPC$TL_webPage.type;
                                                        int i23022 = tLRPC$TL_webPage.duration;
                                                        if (str28 == null) {
                                                        }
                                                        tLRPC$Photo = tLRPC$Photo52;
                                                        if (!z10) {
                                                        }
                                                        this.isSmallImage = (!z60 || str2922 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                        str4 = str2;
                                                        tLRPC$Photo2 = tLRPC$Photo;
                                                        i8 = i223;
                                                        str5 = str28;
                                                        tLRPC$Document4 = tLRPC$Document3;
                                                        str6 = str2922;
                                                        webFile = null;
                                                        z11 = z60;
                                                        str7 = str;
                                                        i9 = i23022;
                                                    }
                                                    i7 = 6;
                                                    str2 = null;
                                                    if (i229 != i7) {
                                                        str3 = tLRPC$TL_webPage.description;
                                                        TLRPC$Photo tLRPC$Photo522 = tLRPC$TL_webPage.photo;
                                                        TLRPC$Document tLRPC$Document922 = tLRPC$Document2;
                                                        if (i229 == 7) {
                                                        }
                                                        tLRPC$Document3 = themeDocument;
                                                        String str29222 = tLRPC$TL_webPage.type;
                                                        int i230222 = tLRPC$TL_webPage.duration;
                                                        if (str28 == null) {
                                                        }
                                                        tLRPC$Photo = tLRPC$Photo522;
                                                        if (!z10) {
                                                        }
                                                        this.isSmallImage = (!z60 || str29222 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                        str4 = str2;
                                                        tLRPC$Photo2 = tLRPC$Photo;
                                                        i8 = i223;
                                                        str5 = str28;
                                                        tLRPC$Document4 = tLRPC$Document3;
                                                        str6 = str29222;
                                                        webFile = null;
                                                        z11 = z60;
                                                        str7 = str;
                                                        i9 = i230222;
                                                    }
                                                    str3 = null;
                                                    TLRPC$Photo tLRPC$Photo5222 = tLRPC$TL_webPage.photo;
                                                    TLRPC$Document tLRPC$Document9222 = tLRPC$Document2;
                                                    if (i229 == 7) {
                                                    }
                                                    tLRPC$Document3 = themeDocument;
                                                    String str292222 = tLRPC$TL_webPage.type;
                                                    int i2302222 = tLRPC$TL_webPage.duration;
                                                    if (str28 == null) {
                                                    }
                                                    tLRPC$Photo = tLRPC$Photo5222;
                                                    if (!z10) {
                                                    }
                                                    this.isSmallImage = (!z60 || str292222 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                    str4 = str2;
                                                    tLRPC$Photo2 = tLRPC$Photo;
                                                    i8 = i223;
                                                    str5 = str28;
                                                    tLRPC$Document4 = tLRPC$Document3;
                                                    str6 = str292222;
                                                    webFile = null;
                                                    z11 = z60;
                                                    str7 = str;
                                                    i9 = i2302222;
                                                }
                                                i6 = 6;
                                                str = null;
                                                if (i229 != i6) {
                                                    str2 = tLRPC$TL_webPage.author;
                                                    i7 = 6;
                                                    if (i229 != i7) {
                                                    }
                                                    str3 = null;
                                                    TLRPC$Photo tLRPC$Photo52222 = tLRPC$TL_webPage.photo;
                                                    TLRPC$Document tLRPC$Document92222 = tLRPC$Document2;
                                                    if (i229 == 7) {
                                                    }
                                                    tLRPC$Document3 = themeDocument;
                                                    String str2922222 = tLRPC$TL_webPage.type;
                                                    int i23022222 = tLRPC$TL_webPage.duration;
                                                    if (str28 == null) {
                                                    }
                                                    tLRPC$Photo = tLRPC$Photo52222;
                                                    if (!z10) {
                                                    }
                                                    this.isSmallImage = (!z60 || str2922222 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                    str4 = str2;
                                                    tLRPC$Photo2 = tLRPC$Photo;
                                                    i8 = i223;
                                                    str5 = str28;
                                                    tLRPC$Document4 = tLRPC$Document3;
                                                    str6 = str2922222;
                                                    webFile = null;
                                                    z11 = z60;
                                                    str7 = str;
                                                    i9 = i23022222;
                                                }
                                                i7 = 6;
                                                str2 = null;
                                                if (i229 != i7) {
                                                }
                                                str3 = null;
                                                TLRPC$Photo tLRPC$Photo522222 = tLRPC$TL_webPage.photo;
                                                TLRPC$Document tLRPC$Document922222 = tLRPC$Document2;
                                                if (i229 == 7) {
                                                }
                                                tLRPC$Document3 = themeDocument;
                                                String str29222222 = tLRPC$TL_webPage.type;
                                                int i230222222 = tLRPC$TL_webPage.duration;
                                                if (str28 == null) {
                                                }
                                                tLRPC$Photo = tLRPC$Photo522222;
                                                if (!z10) {
                                                }
                                                this.isSmallImage = (!z60 || str29222222 == null || this.currentMessageObject.photoThumbs == null) ? false : true;
                                                str4 = str2;
                                                tLRPC$Photo2 = tLRPC$Photo;
                                                i8 = i223;
                                                str5 = str28;
                                                tLRPC$Document4 = tLRPC$Document3;
                                                str6 = str29222222;
                                                webFile = null;
                                                z11 = z60;
                                                str7 = str;
                                                i9 = i230222222;
                                            } else if (this.hasInvoicePreview) {
                                                String str30 = MessageObject.getMedia(messageObject25.messageOwner).title;
                                                TLRPC$WebDocument tLRPC$WebDocument = ((TLRPC$TL_messageMediaInvoice) MessageObject.getMedia(messageObject25.messageOwner)).webPhoto;
                                                if (!(tLRPC$WebDocument instanceof TLRPC$TL_webDocument)) {
                                                    z23 = false;
                                                    createWithWebDocument = null;
                                                } else {
                                                    createWithWebDocument = WebFile.createWithWebDocument(tLRPC$WebDocument);
                                                    z23 = false;
                                                }
                                                this.isSmallImage = z23;
                                                i8 = i223;
                                                str5 = str30;
                                                webFile = createWithWebDocument;
                                                str7 = null;
                                                str4 = null;
                                                tLRPC$Photo2 = null;
                                                z11 = false;
                                                i9 = 0;
                                                str3 = null;
                                                str6 = "invoice";
                                                tLRPC$Document4 = null;
                                            } else {
                                                TLRPC$TL_game tLRPC$TL_game = MessageObject.getMedia(messageObject25.messageOwner).game;
                                                String str31 = tLRPC$TL_game.title;
                                                String str32 = !TextUtils.isEmpty(messageObject25.messageText) ? null : tLRPC$TL_game.description;
                                                tLRPC$Photo2 = tLRPC$TL_game.photo;
                                                TLRPC$Document tLRPC$Document10 = tLRPC$TL_game.document;
                                                this.isSmallImage = false;
                                                i8 = i223;
                                                str5 = str31;
                                                str3 = str32;
                                                str7 = null;
                                                webFile = null;
                                                z11 = false;
                                                i9 = 0;
                                                str6 = "game";
                                                tLRPC$Document4 = tLRPC$Document10;
                                                str4 = null;
                                            }
                                            i11 = this.drawInstantViewType;
                                            if (i11 == 11) {
                                                string = LocaleController.getString("VoipChannelVoiceChat", R.string.VoipChannelVoiceChat);
                                            } else if (i11 == 9) {
                                                string = LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat);
                                            } else if (i11 == 6) {
                                                string = LocaleController.getString("ChatBackground", R.string.ChatBackground);
                                            } else if ("telegram_theme".equals(str27)) {
                                                string = LocaleController.getString("ColorTheme", R.string.ColorTheme);
                                            } else {
                                                str8 = str5;
                                                dp3 = this.hasInvoicePreview ? AndroidUtilities.dp(10.0f) : 0;
                                                i12 = i228 - dp3;
                                                messageObject2 = this.currentMessageObject;
                                                String str33 = str6;
                                                if (messageObject2.photoThumbs == null && tLRPC$Photo2 != null) {
                                                    messageObject2.generateThumbs(true);
                                                }
                                                if (str8 != null) {
                                                    str9 = str8;
                                                    str10 = str4;
                                                    webFile2 = webFile;
                                                    tLRPC$Photo3 = tLRPC$Photo2;
                                                    tLRPC$Document5 = tLRPC$Document4;
                                                    z12 = z11;
                                                    i15 = 0;
                                                    i14 = 3;
                                                } else {
                                                    try {
                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                        tLRPC$Document5 = tLRPC$Document4;
                                                        try {
                                                            int ceil21 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(str8) + 1.0f);
                                                            if (!this.isSmallImage) {
                                                                this.siteNameLayout = new StaticLayout(str8, Theme.chat_replyNamePaint, Math.min(ceil21, i12), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                i16 = 0;
                                                                i13 = 3;
                                                            } else {
                                                                try {
                                                                    StaticLayout generateStaticLayout = generateStaticLayout(str8, Theme.chat_replyNamePaint, i12, (i12 - dp54) - dp55, 3, 1);
                                                                    this.siteNameLayout = generateStaticLayout;
                                                                    i13 = 3 - generateStaticLayout.getLineCount();
                                                                    i16 = 3;
                                                                } catch (Exception e5) {
                                                                    e = e5;
                                                                    str9 = str8;
                                                                    str10 = str4;
                                                                    webFile2 = webFile;
                                                                    z12 = z11;
                                                                    i13 = 3;
                                                                    FileLog.e(e);
                                                                    i14 = i13;
                                                                    i15 = 0;
                                                                    if (str7 != null) {
                                                                    }
                                                                    if (str10 != null) {
                                                                    }
                                                                    z16 = false;
                                                                    if (str3 != null) {
                                                                    }
                                                                    i24 = i12;
                                                                    if (z12) {
                                                                    }
                                                                    z18 = z12;
                                                                    if (!z18) {
                                                                    }
                                                                    if (tLRPC$Document5 == null) {
                                                                    }
                                                                    z24 = z19;
                                                                    c = 0;
                                                                    r15 = i58;
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    i60 = 5;
                                                                    groupedMessagePosition3 = this.currentPosition;
                                                                    if (groupedMessagePosition3 != null) {
                                                                    }
                                                                    int i21422 = this.widthBeforeNewTimeLine;
                                                                    i63 = -1;
                                                                    messageObject5 = this.currentMessageObject;
                                                                    if (messageObject5.eventId == 0) {
                                                                    }
                                                                    f4 = 0.0f;
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    this.botButtons.clear();
                                                                    if (z45) {
                                                                    }
                                                                    if (!messageObject4.isRestrictedMessage) {
                                                                    }
                                                                    this.substractBackgroundHeight = r15;
                                                                    this.keyboardHeight = r15;
                                                                    if (this.drawCommentButton) {
                                                                    }
                                                                    z26 = this.drawPinnedBottom;
                                                                    if (z26) {
                                                                    }
                                                                    if (z26) {
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                    }
                                                                    if (messageObject4.type != 19) {
                                                                    }
                                                                    if (!this.drawPhotoImage) {
                                                                    }
                                                                    if (this.documentAttachType != i60) {
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z24) {
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    z43 = r15;
                                                                    if (z45) {
                                                                    }
                                                                    transcribeButton = this.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                    if (chatMessageCellDelegate2 != null) {
                                                                    }
                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                            }
                                                            try {
                                                                i17 = i13;
                                                                try {
                                                                    this.siteNameRtl = Math.max(this.siteNameLayout.getLineLeft(0), 0.0f) != 0.0f;
                                                                    int lineBottom = this.siteNameLayout.getLineBottom(staticLayout.getLineCount() - 1);
                                                                    this.linkPreviewHeight += lineBottom;
                                                                    this.totalHeight += lineBottom;
                                                                    webFile2 = webFile;
                                                                    int i231 = 0;
                                                                    i18 = 0;
                                                                    while (i231 < this.siteNameLayout.getLineCount()) {
                                                                        try {
                                                                            int i232 = max;
                                                                            try {
                                                                                int max10 = (int) Math.max(0.0f, this.siteNameLayout.getLineLeft(i231));
                                                                                if (max10 != 0) {
                                                                                    str9 = str8;
                                                                                    str10 = str4;
                                                                                    z12 = z11;
                                                                                    width = this.siteNameLayout.getWidth() - max10;
                                                                                } else {
                                                                                    try {
                                                                                        if (i231 >= i16) {
                                                                                            if (max10 == 0) {
                                                                                            }
                                                                                            i19 = i12;
                                                                                            z12 = z11;
                                                                                            str9 = str8;
                                                                                            str10 = str4;
                                                                                            width = (int) Math.min(i19, Math.ceil(this.siteNameLayout.getLineWidth(i231)));
                                                                                        }
                                                                                        width = (int) Math.min(i19, Math.ceil(this.siteNameLayout.getLineWidth(i231)));
                                                                                    } catch (Exception e6) {
                                                                                        e = e6;
                                                                                        i13 = i17;
                                                                                        max = i232;
                                                                                        FileLog.e(e);
                                                                                        i14 = i13;
                                                                                        i15 = 0;
                                                                                        if (str7 != null) {
                                                                                        }
                                                                                        if (str10 != null) {
                                                                                        }
                                                                                        z16 = false;
                                                                                        if (str3 != null) {
                                                                                        }
                                                                                        i24 = i12;
                                                                                        if (z12) {
                                                                                        }
                                                                                        z18 = z12;
                                                                                        if (!z18) {
                                                                                        }
                                                                                        if (tLRPC$Document5 == null) {
                                                                                        }
                                                                                        z24 = z19;
                                                                                        c = 0;
                                                                                        r15 = i58;
                                                                                        if (this.currentPosition != null) {
                                                                                        }
                                                                                        i60 = 5;
                                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                                        if (groupedMessagePosition3 != null) {
                                                                                        }
                                                                                        int i214222 = this.widthBeforeNewTimeLine;
                                                                                        i63 = -1;
                                                                                        messageObject5 = this.currentMessageObject;
                                                                                        if (messageObject5.eventId == 0) {
                                                                                        }
                                                                                        f4 = 0.0f;
                                                                                        if (messageObject.isSponsored()) {
                                                                                        }
                                                                                        this.botButtons.clear();
                                                                                        if (z45) {
                                                                                        }
                                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                                        }
                                                                                        this.substractBackgroundHeight = r15;
                                                                                        this.keyboardHeight = r15;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        z26 = this.drawPinnedBottom;
                                                                                        if (z26) {
                                                                                        }
                                                                                        if (z26) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject4.type != 19) {
                                                                                        }
                                                                                        if (!this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType != i60) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z24) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        z43 = r15;
                                                                                        if (z45) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                    i19 = i12 - (dp54 + dp55);
                                                                                    z12 = z11;
                                                                                    str9 = str8;
                                                                                    str10 = str4;
                                                                                }
                                                                                if (i231 >= i16) {
                                                                                    if (max10 != 0) {
                                                                                        if (!this.isSmallImage) {
                                                                                        }
                                                                                    }
                                                                                    i18 = Math.max(i18, width);
                                                                                    i231++;
                                                                                    max = i232;
                                                                                    z11 = z12;
                                                                                    str4 = str10;
                                                                                    str8 = str9;
                                                                                }
                                                                                width += dp54 + dp55;
                                                                                i18 = Math.max(i18, width);
                                                                                i231++;
                                                                                max = i232;
                                                                                z11 = z12;
                                                                                str4 = str10;
                                                                                str8 = str9;
                                                                            } catch (Exception e7) {
                                                                                e = e7;
                                                                                str9 = str8;
                                                                                str10 = str4;
                                                                                z12 = z11;
                                                                            }
                                                                        } catch (Exception e8) {
                                                                            e = e8;
                                                                            str9 = str8;
                                                                            str10 = str4;
                                                                            z12 = z11;
                                                                            i13 = i17;
                                                                            FileLog.e(e);
                                                                            i14 = i13;
                                                                            i15 = 0;
                                                                            if (str7 != null) {
                                                                            }
                                                                            if (str10 != null) {
                                                                            }
                                                                            z16 = false;
                                                                            if (str3 != null) {
                                                                            }
                                                                            i24 = i12;
                                                                            if (z12) {
                                                                            }
                                                                            z18 = z12;
                                                                            if (!z18) {
                                                                            }
                                                                            if (tLRPC$Document5 == null) {
                                                                            }
                                                                            z24 = z19;
                                                                            c = 0;
                                                                            r15 = i58;
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            i60 = 5;
                                                                            groupedMessagePosition3 = this.currentPosition;
                                                                            if (groupedMessagePosition3 != null) {
                                                                            }
                                                                            int i2142222 = this.widthBeforeNewTimeLine;
                                                                            i63 = -1;
                                                                            messageObject5 = this.currentMessageObject;
                                                                            if (messageObject5.eventId == 0) {
                                                                            }
                                                                            f4 = 0.0f;
                                                                            if (messageObject.isSponsored()) {
                                                                            }
                                                                            this.botButtons.clear();
                                                                            if (z45) {
                                                                            }
                                                                            if (!messageObject4.isRestrictedMessage) {
                                                                            }
                                                                            this.substractBackgroundHeight = r15;
                                                                            this.keyboardHeight = r15;
                                                                            if (this.drawCommentButton) {
                                                                            }
                                                                            z26 = this.drawPinnedBottom;
                                                                            if (z26) {
                                                                            }
                                                                            if (z26) {
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                            }
                                                                            if (messageObject4.type != 19) {
                                                                            }
                                                                            if (!this.drawPhotoImage) {
                                                                            }
                                                                            if (this.documentAttachType != i60) {
                                                                            }
                                                                            calculateUnlockXY();
                                                                            if (z24) {
                                                                            }
                                                                            updateAnimatedEmojis();
                                                                            z43 = r15;
                                                                            if (z45) {
                                                                            }
                                                                            transcribeButton = this.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                            if (chatMessageCellDelegate2 != null) {
                                                                            }
                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                            this.transitionParams.updatePhotoImageX = true;
                                                                            updateFlagSecure();
                                                                        }
                                                                    }
                                                                } catch (Exception e9) {
                                                                    e = e9;
                                                                    str9 = str8;
                                                                    str10 = str4;
                                                                    webFile2 = webFile;
                                                                }
                                                            } catch (Exception e10) {
                                                                e = e10;
                                                                str9 = str8;
                                                                str10 = str4;
                                                                webFile2 = webFile;
                                                                z12 = z11;
                                                            }
                                                            try {
                                                                this.siteNameWidth = i18;
                                                                int i233 = i18 + dp3;
                                                                max = Math.max(max, i233);
                                                                str9 = str8;
                                                                str10 = str4;
                                                                z12 = z11;
                                                                i14 = i17;
                                                                i15 = Math.max(0, i233);
                                                            } catch (Exception e11) {
                                                                e = e11;
                                                                str9 = str8;
                                                                str10 = str4;
                                                                z12 = z11;
                                                                i13 = i17;
                                                                FileLog.e(e);
                                                                i14 = i13;
                                                                i15 = 0;
                                                                if (str7 != null) {
                                                                }
                                                                if (str10 != null) {
                                                                }
                                                                z16 = false;
                                                                if (str3 != null) {
                                                                }
                                                                i24 = i12;
                                                                if (z12) {
                                                                }
                                                                z18 = z12;
                                                                if (!z18) {
                                                                }
                                                                if (tLRPC$Document5 == null) {
                                                                }
                                                                z24 = z19;
                                                                c = 0;
                                                                r15 = i58;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                i60 = 5;
                                                                groupedMessagePosition3 = this.currentPosition;
                                                                if (groupedMessagePosition3 != null) {
                                                                }
                                                                int i21422222 = this.widthBeforeNewTimeLine;
                                                                i63 = -1;
                                                                messageObject5 = this.currentMessageObject;
                                                                if (messageObject5.eventId == 0) {
                                                                }
                                                                f4 = 0.0f;
                                                                if (messageObject.isSponsored()) {
                                                                }
                                                                this.botButtons.clear();
                                                                if (z45) {
                                                                }
                                                                if (!messageObject4.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = r15;
                                                                this.keyboardHeight = r15;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                z26 = this.drawPinnedBottom;
                                                                if (z26) {
                                                                }
                                                                if (z26) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject4.type != 19) {
                                                                }
                                                                if (!this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType != i60) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z24) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                z43 = r15;
                                                                if (z45) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = true;
                                                                updateFlagSecure();
                                                            }
                                                        } catch (Exception e12) {
                                                            e = e12;
                                                            str9 = str8;
                                                            str10 = str4;
                                                            webFile2 = webFile;
                                                        }
                                                    } catch (Exception e13) {
                                                        e = e13;
                                                        str9 = str8;
                                                        str10 = str4;
                                                        webFile2 = webFile;
                                                        tLRPC$Photo3 = tLRPC$Photo2;
                                                        tLRPC$Document5 = tLRPC$Document4;
                                                    }
                                                }
                                                if (str7 != null) {
                                                    z15 = false;
                                                } else {
                                                    try {
                                                        this.titleX = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                        int i234 = this.linkPreviewHeight;
                                                        if (i234 != 0) {
                                                            this.linkPreviewHeight = i234 + AndroidUtilities.dp(2.0f);
                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                        }
                                                        if (!this.isSmallImage) {
                                                            this.titleLayout = StaticLayoutEx.createStaticLayout(str7, Theme.chat_replyNamePaint, i12, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i12, 4);
                                                            i21 = 0;
                                                        } else {
                                                            StaticLayout generateStaticLayout2 = generateStaticLayout(str7, Theme.chat_replyNamePaint, i12, (i12 - dp54) - dp55, i14, 4);
                                                            this.titleLayout = generateStaticLayout2;
                                                            int i235 = i14;
                                                            i14 -= generateStaticLayout2.getLineCount();
                                                            i21 = i235;
                                                        }
                                                    } catch (Exception e14) {
                                                        e = e14;
                                                    }
                                                    try {
                                                        StaticLayout staticLayout16 = this.titleLayout;
                                                        int lineBottom2 = staticLayout16.getLineBottom(staticLayout16.getLineCount() - 1);
                                                        this.linkPreviewHeight += lineBottom2;
                                                        this.totalHeight += lineBottom2;
                                                        int i236 = 0;
                                                        boolean z61 = false;
                                                        while (i236 < this.titleLayout.getLineCount()) {
                                                            try {
                                                                int max11 = (int) Math.max(0.0f, this.titleLayout.getLineLeft(i236));
                                                                if (max11 != 0) {
                                                                    z61 = true;
                                                                }
                                                                int i237 = this.titleX;
                                                                if (i237 == Integer.MAX_VALUE) {
                                                                    this.titleX = -max11;
                                                                } else {
                                                                    try {
                                                                        this.titleX = Math.max(i237, -max11);
                                                                    } catch (Exception e15) {
                                                                        e = e15;
                                                                        z13 = z61;
                                                                        FileLog.e(e);
                                                                        i20 = i14;
                                                                        z14 = z13;
                                                                        if (z14) {
                                                                        }
                                                                        z15 = z14;
                                                                        i14 = i20;
                                                                        if (str10 != null) {
                                                                        }
                                                                        z16 = false;
                                                                        if (str3 != null) {
                                                                        }
                                                                        i24 = i12;
                                                                        if (z12) {
                                                                        }
                                                                        z18 = z12;
                                                                        if (!z18) {
                                                                        }
                                                                        if (tLRPC$Document5 == null) {
                                                                        }
                                                                        z24 = z19;
                                                                        c = 0;
                                                                        r15 = i58;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i214222222 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                }
                                                                if (max11 != 0) {
                                                                    i22 = i14;
                                                                    z13 = z61;
                                                                    width2 = this.titleLayout.getWidth() - max11;
                                                                } else {
                                                                    try {
                                                                        if (i236 >= i21) {
                                                                            if (max11 == 0) {
                                                                            }
                                                                            i23 = i12;
                                                                            i22 = i14;
                                                                            z13 = z61;
                                                                            width2 = (int) Math.min(i23, Math.ceil(this.titleLayout.getLineWidth(i236)));
                                                                        }
                                                                        width2 = (int) Math.min(i23, Math.ceil(this.titleLayout.getLineWidth(i236)));
                                                                    } catch (Exception e16) {
                                                                        e = e16;
                                                                        i14 = i22;
                                                                        FileLog.e(e);
                                                                        i20 = i14;
                                                                        z14 = z13;
                                                                        if (z14) {
                                                                        }
                                                                        z15 = z14;
                                                                        i14 = i20;
                                                                        if (str10 != null) {
                                                                        }
                                                                        z16 = false;
                                                                        if (str3 != null) {
                                                                        }
                                                                        i24 = i12;
                                                                        if (z12) {
                                                                        }
                                                                        z18 = z12;
                                                                        if (!z18) {
                                                                        }
                                                                        if (tLRPC$Document5 == null) {
                                                                        }
                                                                        z24 = z19;
                                                                        c = 0;
                                                                        r15 = i58;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i2142222222 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                    i23 = i12 - (dp54 + dp55);
                                                                    i22 = i14;
                                                                    z13 = z61;
                                                                }
                                                                if (i236 >= i21) {
                                                                    if (max11 != 0) {
                                                                        if (!this.isSmallImage) {
                                                                        }
                                                                    }
                                                                    int i238 = width2 + dp3;
                                                                    max = Math.max(max, i238);
                                                                    i15 = Math.max(i15, i238);
                                                                    i236++;
                                                                    i14 = i22;
                                                                    z61 = z13;
                                                                }
                                                                width2 += dp54 + dp55;
                                                                int i2382 = width2 + dp3;
                                                                max = Math.max(max, i2382);
                                                                i15 = Math.max(i15, i2382);
                                                                i236++;
                                                                i14 = i22;
                                                                z61 = z13;
                                                            } catch (Exception e17) {
                                                                e = e17;
                                                            }
                                                        }
                                                        i20 = i14;
                                                        z14 = z61;
                                                    } catch (Exception e18) {
                                                        e = e18;
                                                        z13 = false;
                                                        FileLog.e(e);
                                                        i20 = i14;
                                                        z14 = z13;
                                                        if (z14) {
                                                            i12 -= AndroidUtilities.dp(48.0f);
                                                        }
                                                        z15 = z14;
                                                        i14 = i20;
                                                        if (str10 != null) {
                                                        }
                                                        z16 = false;
                                                        if (str3 != null) {
                                                        }
                                                        i24 = i12;
                                                        if (z12) {
                                                        }
                                                        z18 = z12;
                                                        if (!z18) {
                                                        }
                                                        if (tLRPC$Document5 == null) {
                                                        }
                                                        z24 = z19;
                                                        c = 0;
                                                        r15 = i58;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        i60 = 5;
                                                        groupedMessagePosition3 = this.currentPosition;
                                                        if (groupedMessagePosition3 != null) {
                                                        }
                                                        int i21422222222 = this.widthBeforeNewTimeLine;
                                                        i63 = -1;
                                                        messageObject5 = this.currentMessageObject;
                                                        if (messageObject5.eventId == 0) {
                                                        }
                                                        f4 = 0.0f;
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        this.botButtons.clear();
                                                        if (z45) {
                                                        }
                                                        if (!messageObject4.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = r15;
                                                        this.keyboardHeight = r15;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        z26 = this.drawPinnedBottom;
                                                        if (z26) {
                                                        }
                                                        if (z26) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject4.type != 19) {
                                                        }
                                                        if (!this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType != i60) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z24) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        z43 = r15;
                                                        if (z45) {
                                                        }
                                                        transcribeButton = this.transcribeButton;
                                                        if (transcribeButton != null) {
                                                        }
                                                        updateWaveform();
                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                        }
                                                        chatMessageCellDelegate2 = this.delegate;
                                                        if (chatMessageCellDelegate2 != null) {
                                                        }
                                                        this.accessibilityVirtualViewBounds.clear();
                                                        this.transitionParams.updatePhotoImageX = true;
                                                        updateFlagSecure();
                                                    }
                                                    if (z14 && this.isSmallImage) {
                                                        i12 -= AndroidUtilities.dp(48.0f);
                                                    }
                                                    z15 = z14;
                                                    i14 = i20;
                                                }
                                                if (str10 != null && str7 == null) {
                                                    try {
                                                        i57 = this.linkPreviewHeight;
                                                        if (i57 == 0) {
                                                            this.linkPreviewHeight = i57 + AndroidUtilities.dp(2.0f);
                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                        }
                                                        try {
                                                            str15 = str10;
                                                            try {
                                                                str16 = Emoji.replaceEmoji(str15, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                            } catch (Exception unused) {
                                                                str16 = str15;
                                                                if (i14 == 3) {
                                                                }
                                                                StaticLayout generateStaticLayout3 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i12, (i12 - dp54) - dp55, i14, 1);
                                                                this.authorLayout = generateStaticLayout3;
                                                                i14 -= generateStaticLayout3.getLineCount();
                                                                StaticLayout staticLayout17 = this.authorLayout;
                                                                int lineBottom3 = staticLayout17.getLineBottom(staticLayout17.getLineCount() - 1);
                                                                this.linkPreviewHeight += lineBottom3;
                                                                this.totalHeight += lineBottom3;
                                                                max4 = (int) Math.max(this.authorLayout.getLineLeft(0), 0.0f);
                                                                this.authorX = -max4;
                                                                if (max4 == 0) {
                                                                }
                                                                int i239 = width3 + dp3;
                                                                max = Math.max(max, i239);
                                                                i15 = Math.max(i15, i239);
                                                                if (str3 != null) {
                                                                }
                                                                i24 = i12;
                                                                if (z12) {
                                                                }
                                                                z18 = z12;
                                                                if (!z18) {
                                                                }
                                                                if (tLRPC$Document5 == null) {
                                                                }
                                                                z24 = z19;
                                                                c = 0;
                                                                r15 = i58;
                                                                if (this.currentPosition != null) {
                                                                }
                                                                i60 = 5;
                                                                groupedMessagePosition3 = this.currentPosition;
                                                                if (groupedMessagePosition3 != null) {
                                                                }
                                                                int i214222222222 = this.widthBeforeNewTimeLine;
                                                                i63 = -1;
                                                                messageObject5 = this.currentMessageObject;
                                                                if (messageObject5.eventId == 0) {
                                                                }
                                                                f4 = 0.0f;
                                                                if (messageObject.isSponsored()) {
                                                                }
                                                                this.botButtons.clear();
                                                                if (z45) {
                                                                }
                                                                if (!messageObject4.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = r15;
                                                                this.keyboardHeight = r15;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                z26 = this.drawPinnedBottom;
                                                                if (z26) {
                                                                }
                                                                if (z26) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject4.type != 19) {
                                                                }
                                                                if (!this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType != i60) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z24) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                z43 = r15;
                                                                if (z45) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = true;
                                                                updateFlagSecure();
                                                            }
                                                        } catch (Exception unused2) {
                                                            str15 = str10;
                                                        }
                                                    } catch (Exception e19) {
                                                        e = e19;
                                                        z16 = false;
                                                    }
                                                    try {
                                                        if (i14 == 3 || (this.isSmallImage && str3 != null)) {
                                                            StaticLayout generateStaticLayout32 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i12, (i12 - dp54) - dp55, i14, 1);
                                                            this.authorLayout = generateStaticLayout32;
                                                            i14 -= generateStaticLayout32.getLineCount();
                                                            StaticLayout staticLayout172 = this.authorLayout;
                                                            int lineBottom32 = staticLayout172.getLineBottom(staticLayout172.getLineCount() - 1);
                                                            this.linkPreviewHeight += lineBottom32;
                                                            this.totalHeight += lineBottom32;
                                                            max4 = (int) Math.max(this.authorLayout.getLineLeft(0), 0.0f);
                                                            this.authorX = -max4;
                                                            if (max4 == 0) {
                                                                width3 = this.authorLayout.getWidth() - max4;
                                                                z16 = true;
                                                            } else {
                                                                width3 = (int) Math.ceil(this.authorLayout.getLineWidth(0));
                                                                z16 = false;
                                                            }
                                                            int i2392 = width3 + dp3;
                                                            max = Math.max(max, i2392);
                                                            i15 = Math.max(i15, i2392);
                                                        }
                                                        max = Math.max(max, i2392);
                                                        i15 = Math.max(i15, i2392);
                                                    } catch (Exception e20) {
                                                        e = e20;
                                                        FileLog.e(e);
                                                        if (str3 != null) {
                                                        }
                                                        i24 = i12;
                                                        if (z12) {
                                                        }
                                                        z18 = z12;
                                                        if (!z18) {
                                                        }
                                                        if (tLRPC$Document5 == null) {
                                                        }
                                                        z24 = z19;
                                                        c = 0;
                                                        r15 = i58;
                                                        if (this.currentPosition != null) {
                                                        }
                                                        i60 = 5;
                                                        groupedMessagePosition3 = this.currentPosition;
                                                        if (groupedMessagePosition3 != null) {
                                                        }
                                                        int i2142222222222 = this.widthBeforeNewTimeLine;
                                                        i63 = -1;
                                                        messageObject5 = this.currentMessageObject;
                                                        if (messageObject5.eventId == 0) {
                                                        }
                                                        f4 = 0.0f;
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        this.botButtons.clear();
                                                        if (z45) {
                                                        }
                                                        if (!messageObject4.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = r15;
                                                        this.keyboardHeight = r15;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        z26 = this.drawPinnedBottom;
                                                        if (z26) {
                                                        }
                                                        if (z26) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject4.type != 19) {
                                                        }
                                                        if (!this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType != i60) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z24) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        z43 = r15;
                                                        if (z45) {
                                                        }
                                                        transcribeButton = this.transcribeButton;
                                                        if (transcribeButton != null) {
                                                        }
                                                        updateWaveform();
                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                        }
                                                        chatMessageCellDelegate2 = this.delegate;
                                                        if (chatMessageCellDelegate2 != null) {
                                                        }
                                                        this.accessibilityVirtualViewBounds.clear();
                                                        this.transitionParams.updatePhotoImageX = true;
                                                        updateFlagSecure();
                                                    }
                                                    this.authorLayout = new StaticLayout(str16, Theme.chat_replyNamePaint, i12, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                    StaticLayout staticLayout1722 = this.authorLayout;
                                                    int lineBottom322 = staticLayout1722.getLineBottom(staticLayout1722.getLineCount() - 1);
                                                    this.linkPreviewHeight += lineBottom322;
                                                    this.totalHeight += lineBottom322;
                                                    max4 = (int) Math.max(this.authorLayout.getLineLeft(0), 0.0f);
                                                    this.authorX = -max4;
                                                    if (max4 == 0) {
                                                    }
                                                    int i23922 = width3 + dp3;
                                                } else {
                                                    z16 = false;
                                                }
                                                if (str3 != null) {
                                                    try {
                                                        this.descriptionX = 0;
                                                        this.currentMessageObject.generateLinkDescription();
                                                        int i240 = this.linkPreviewHeight;
                                                        if (i240 != 0) {
                                                            this.linkPreviewHeight = i240 + AndroidUtilities.dp(2.0f);
                                                            this.totalHeight += AndroidUtilities.dp(2.0f);
                                                        }
                                                        if (str9 != null && str9.toLowerCase().equals("twitter")) {
                                                            z17 = true;
                                                            if (i14 == 3 && !this.isSmallImage) {
                                                                this.descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i12, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i12, z17 ? 6 : 100);
                                                                i14 = 0;
                                                                this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                                StaticLayout staticLayout18 = this.descriptionLayout;
                                                                int lineBottom4 = staticLayout18.getLineBottom(staticLayout18.getLineCount() - 1);
                                                                this.linkPreviewHeight += lineBottom4;
                                                                this.totalHeight += lineBottom4;
                                                                i25 = 0;
                                                                boolean z62 = false;
                                                                while (i25 < this.descriptionLayout.getLineCount()) {
                                                                    i24 = i12;
                                                                    try {
                                                                        int ceil22 = (int) Math.ceil(this.descriptionLayout.getLineLeft(i25));
                                                                        if (ceil22 > 0) {
                                                                            int i241 = this.descriptionX;
                                                                            if (i241 == 0) {
                                                                                this.descriptionX = -ceil22;
                                                                            } else {
                                                                                this.descriptionX = Math.max(i241, -ceil22);
                                                                            }
                                                                            z62 = true;
                                                                        }
                                                                        i25++;
                                                                        i12 = i24;
                                                                    } catch (Exception e21) {
                                                                        e = e21;
                                                                        FileLog.e(e);
                                                                        if (z12) {
                                                                        }
                                                                        z18 = z12;
                                                                        if (!z18) {
                                                                        }
                                                                        if (tLRPC$Document5 == null) {
                                                                        }
                                                                        z24 = z19;
                                                                        c = 0;
                                                                        r15 = i58;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i21422222222222 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                }
                                                                int width5 = this.descriptionLayout.getWidth();
                                                                i26 = 0;
                                                                while (i26 < this.descriptionLayout.getLineCount()) {
                                                                    try {
                                                                        ceil = (int) Math.ceil(this.descriptionLayout.getLineLeft(i26));
                                                                        if (ceil == 0 && this.descriptionX != 0) {
                                                                            this.descriptionX = 0;
                                                                        }
                                                                        if (ceil > 0) {
                                                                            i27 = max;
                                                                            i24 = i12;
                                                                            i28 = width5 - ceil;
                                                                        } else if (!z62) {
                                                                            try {
                                                                                i27 = max;
                                                                                i24 = i12;
                                                                                try {
                                                                                    i28 = Math.min((int) Math.ceil(this.descriptionLayout.getLineWidth(i26)), width5);
                                                                                } catch (Exception e22) {
                                                                                    e = e22;
                                                                                    max = i27;
                                                                                    FileLog.e(e);
                                                                                    if (z12) {
                                                                                    }
                                                                                    z18 = z12;
                                                                                    if (!z18) {
                                                                                    }
                                                                                    if (tLRPC$Document5 == null) {
                                                                                    }
                                                                                    z24 = z19;
                                                                                    c = 0;
                                                                                    r15 = i58;
                                                                                    if (this.currentPosition != null) {
                                                                                    }
                                                                                    i60 = 5;
                                                                                    groupedMessagePosition3 = this.currentPosition;
                                                                                    if (groupedMessagePosition3 != null) {
                                                                                    }
                                                                                    int i214222222222222 = this.widthBeforeNewTimeLine;
                                                                                    i63 = -1;
                                                                                    messageObject5 = this.currentMessageObject;
                                                                                    if (messageObject5.eventId == 0) {
                                                                                    }
                                                                                    f4 = 0.0f;
                                                                                    if (messageObject.isSponsored()) {
                                                                                    }
                                                                                    this.botButtons.clear();
                                                                                    if (z45) {
                                                                                    }
                                                                                    if (!messageObject4.isRestrictedMessage) {
                                                                                    }
                                                                                    this.substractBackgroundHeight = r15;
                                                                                    this.keyboardHeight = r15;
                                                                                    if (this.drawCommentButton) {
                                                                                    }
                                                                                    z26 = this.drawPinnedBottom;
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (!this.mediaBackground) {
                                                                                    }
                                                                                    if (messageObject4.type != 19) {
                                                                                    }
                                                                                    if (!this.drawPhotoImage) {
                                                                                    }
                                                                                    if (this.documentAttachType != i60) {
                                                                                    }
                                                                                    calculateUnlockXY();
                                                                                    if (z24) {
                                                                                    }
                                                                                    updateAnimatedEmojis();
                                                                                    z43 = r15;
                                                                                    if (z45) {
                                                                                    }
                                                                                    transcribeButton = this.transcribeButton;
                                                                                    if (transcribeButton != null) {
                                                                                    }
                                                                                    updateWaveform();
                                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                    }
                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                    }
                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                                    updateFlagSecure();
                                                                                }
                                                                            } catch (Exception e23) {
                                                                                e = e23;
                                                                                i24 = i12;
                                                                                FileLog.e(e);
                                                                                if (z12) {
                                                                                }
                                                                                z18 = z12;
                                                                                if (!z18) {
                                                                                }
                                                                                if (tLRPC$Document5 == null) {
                                                                                }
                                                                                z24 = z19;
                                                                                c = 0;
                                                                                r15 = i58;
                                                                                if (this.currentPosition != null) {
                                                                                }
                                                                                i60 = 5;
                                                                                groupedMessagePosition3 = this.currentPosition;
                                                                                if (groupedMessagePosition3 != null) {
                                                                                }
                                                                                int i2142222222222222 = this.widthBeforeNewTimeLine;
                                                                                i63 = -1;
                                                                                messageObject5 = this.currentMessageObject;
                                                                                if (messageObject5.eventId == 0) {
                                                                                }
                                                                                f4 = 0.0f;
                                                                                if (messageObject.isSponsored()) {
                                                                                }
                                                                                this.botButtons.clear();
                                                                                if (z45) {
                                                                                }
                                                                                if (!messageObject4.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = r15;
                                                                                this.keyboardHeight = r15;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                z26 = this.drawPinnedBottom;
                                                                                if (z26) {
                                                                                }
                                                                                if (z26) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject4.type != 19) {
                                                                                }
                                                                                if (!this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType != i60) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z24) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                z43 = r15;
                                                                                if (z45) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = true;
                                                                                updateFlagSecure();
                                                                            }
                                                                        } else {
                                                                            i27 = max;
                                                                            i24 = i12;
                                                                            i28 = width5;
                                                                        }
                                                                    } catch (Exception e24) {
                                                                        e = e24;
                                                                        i24 = i12;
                                                                    }
                                                                    try {
                                                                        if (i26 >= i14) {
                                                                            if (i14 != 0 && ceil != 0) {
                                                                                try {
                                                                                    if (!this.isSmallImage) {
                                                                                    }
                                                                                } catch (Exception e25) {
                                                                                    e = e25;
                                                                                    i30 = i27;
                                                                                    max = i30;
                                                                                    FileLog.e(e);
                                                                                    if (z12) {
                                                                                    }
                                                                                    z18 = z12;
                                                                                    if (!z18) {
                                                                                    }
                                                                                    if (tLRPC$Document5 == null) {
                                                                                    }
                                                                                    z24 = z19;
                                                                                    c = 0;
                                                                                    r15 = i58;
                                                                                    if (this.currentPosition != null) {
                                                                                    }
                                                                                    i60 = 5;
                                                                                    groupedMessagePosition3 = this.currentPosition;
                                                                                    if (groupedMessagePosition3 != null) {
                                                                                    }
                                                                                    int i21422222222222222 = this.widthBeforeNewTimeLine;
                                                                                    i63 = -1;
                                                                                    messageObject5 = this.currentMessageObject;
                                                                                    if (messageObject5.eventId == 0) {
                                                                                    }
                                                                                    f4 = 0.0f;
                                                                                    if (messageObject.isSponsored()) {
                                                                                    }
                                                                                    this.botButtons.clear();
                                                                                    if (z45) {
                                                                                    }
                                                                                    if (!messageObject4.isRestrictedMessage) {
                                                                                    }
                                                                                    this.substractBackgroundHeight = r15;
                                                                                    this.keyboardHeight = r15;
                                                                                    if (this.drawCommentButton) {
                                                                                    }
                                                                                    z26 = this.drawPinnedBottom;
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (!this.mediaBackground) {
                                                                                    }
                                                                                    if (messageObject4.type != 19) {
                                                                                    }
                                                                                    if (!this.drawPhotoImage) {
                                                                                    }
                                                                                    if (this.documentAttachType != i60) {
                                                                                    }
                                                                                    calculateUnlockXY();
                                                                                    if (z24) {
                                                                                    }
                                                                                    updateAnimatedEmojis();
                                                                                    z43 = r15;
                                                                                    if (z45) {
                                                                                    }
                                                                                    transcribeButton = this.transcribeButton;
                                                                                    if (transcribeButton != null) {
                                                                                    }
                                                                                    updateWaveform();
                                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                    }
                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                    }
                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                                    updateFlagSecure();
                                                                                }
                                                                            }
                                                                            i29 = i28 + dp3;
                                                                            if (i15 < i29) {
                                                                                if (z15) {
                                                                                    this.titleX += i29 - i15;
                                                                                }
                                                                                if (z16) {
                                                                                    this.authorX += i29 - i15;
                                                                                }
                                                                                i15 = i29;
                                                                            }
                                                                            i30 = i27;
                                                                            max = Math.max(i30, i29);
                                                                            i26++;
                                                                            i12 = i24;
                                                                        }
                                                                        max = Math.max(i30, i29);
                                                                        i26++;
                                                                        i12 = i24;
                                                                    } catch (Exception e26) {
                                                                        e = e26;
                                                                        max = i30;
                                                                        FileLog.e(e);
                                                                        if (z12) {
                                                                        }
                                                                        z18 = z12;
                                                                        if (!z18) {
                                                                        }
                                                                        if (tLRPC$Document5 == null) {
                                                                        }
                                                                        z24 = z19;
                                                                        c = 0;
                                                                        r15 = i58;
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i214222222222222222 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                    i28 += dp54 + dp55;
                                                                    i29 = i28 + dp3;
                                                                    if (i15 < i29) {
                                                                    }
                                                                    i30 = i27;
                                                                }
                                                            }
                                                            this.descriptionLayout = generateStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i12, (i12 - dp54) - dp55, i14, z17 ? 6 : 100);
                                                            this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                            StaticLayout staticLayout182 = this.descriptionLayout;
                                                            int lineBottom42 = staticLayout182.getLineBottom(staticLayout182.getLineCount() - 1);
                                                            this.linkPreviewHeight += lineBottom42;
                                                            this.totalHeight += lineBottom42;
                                                            i25 = 0;
                                                            boolean z622 = false;
                                                            while (i25 < this.descriptionLayout.getLineCount()) {
                                                            }
                                                            int width52 = this.descriptionLayout.getWidth();
                                                            i26 = 0;
                                                            while (i26 < this.descriptionLayout.getLineCount()) {
                                                            }
                                                        }
                                                        z17 = false;
                                                        if (i14 == 3) {
                                                            this.descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i12, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i12, z17 ? 6 : 100);
                                                            i14 = 0;
                                                            this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                            StaticLayout staticLayout1822 = this.descriptionLayout;
                                                            int lineBottom422 = staticLayout1822.getLineBottom(staticLayout1822.getLineCount() - 1);
                                                            this.linkPreviewHeight += lineBottom422;
                                                            this.totalHeight += lineBottom422;
                                                            i25 = 0;
                                                            boolean z6222 = false;
                                                            while (i25 < this.descriptionLayout.getLineCount()) {
                                                            }
                                                            int width522 = this.descriptionLayout.getWidth();
                                                            i26 = 0;
                                                            while (i26 < this.descriptionLayout.getLineCount()) {
                                                            }
                                                        }
                                                        this.descriptionLayout = generateStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, i12, (i12 - dp54) - dp55, i14, z17 ? 6 : 100);
                                                        this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                                                        StaticLayout staticLayout18222 = this.descriptionLayout;
                                                        int lineBottom4222 = staticLayout18222.getLineBottom(staticLayout18222.getLineCount() - 1);
                                                        this.linkPreviewHeight += lineBottom4222;
                                                        this.totalHeight += lineBottom4222;
                                                        i25 = 0;
                                                        boolean z62222 = false;
                                                        while (i25 < this.descriptionLayout.getLineCount()) {
                                                        }
                                                        int width5222 = this.descriptionLayout.getWidth();
                                                        i26 = 0;
                                                        while (i26 < this.descriptionLayout.getLineCount()) {
                                                        }
                                                    } catch (Exception e27) {
                                                        e = e27;
                                                    }
                                                }
                                                i24 = i12;
                                                if (z12 && this.descriptionLayout == null && this.titleLayout == null) {
                                                    this.isSmallImage = false;
                                                    z18 = false;
                                                } else {
                                                    z18 = z12;
                                                }
                                                if (!z18) {
                                                    dp54 = i24;
                                                }
                                                if (tLRPC$Document5 == null) {
                                                    messageObject3 = messageObject;
                                                    str11 = str33;
                                                    WebFile webFile6 = webFile2;
                                                    if (MessageObject.isRoundVideoDocument(tLRPC$Document5)) {
                                                        webFile2 = webFile6;
                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                        i31 = extraTimeX2;
                                                        tLRPC$Document6 = tLRPC$Document5;
                                                        this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 90);
                                                        this.photoParentObject = tLRPC$Document6;
                                                        this.documentAttach = tLRPC$Document6;
                                                        this.documentAttachType = 7;
                                                    } else {
                                                        tLRPC$Document6 = tLRPC$Document5;
                                                        if (MessageObject.isGifDocument(tLRPC$Document6, messageObject.hasValidGroupId())) {
                                                            webFile2 = webFile6;
                                                            tLRPC$Photo4 = tLRPC$Photo3;
                                                            i31 = extraTimeX2;
                                                            if (!messageObject.isGame() && !SharedConfig.autoplayGifs) {
                                                                f2 = 1.0f;
                                                                messageObject3.gifState = 1.0f;
                                                            } else {
                                                                f2 = 1.0f;
                                                            }
                                                            this.photoImage.setAllowStartAnimation(messageObject3.gifState != f2);
                                                            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 90);
                                                            this.currentPhotoObject = closestPhotoSizeWithSize;
                                                            if (closestPhotoSizeWithSize != null) {
                                                                this.photoParentObject = tLRPC$Document6;
                                                            } else if (tLRPC$Photo4 != null) {
                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, 90);
                                                                this.photoParentObject = tLRPC$Photo4;
                                                            }
                                                            TLRPC$PhotoSize tLRPC$PhotoSize16 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize16 != null && (tLRPC$PhotoSize16.w == 0 || tLRPC$PhotoSize16.h == 0)) {
                                                                for (int i242 = 0; i242 < tLRPC$Document6.attributes.size(); i242++) {
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute4 = tLRPC$Document6.attributes.get(i242);
                                                                    if ((tLRPC$DocumentAttribute4 instanceof TLRPC$TL_documentAttributeImageSize) || (tLRPC$DocumentAttribute4 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize17 = this.currentPhotoObject;
                                                                        tLRPC$PhotoSize17.w = tLRPC$DocumentAttribute4.w;
                                                                        tLRPC$PhotoSize17.h = tLRPC$DocumentAttribute4.h;
                                                                        break;
                                                                    }
                                                                }
                                                                TLRPC$PhotoSize tLRPC$PhotoSize18 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize18.w == 0 || tLRPC$PhotoSize18.h == 0) {
                                                                    int dp56 = AndroidUtilities.dp(150.0f);
                                                                    tLRPC$PhotoSize18.h = dp56;
                                                                    tLRPC$PhotoSize18.w = dp56;
                                                                }
                                                            }
                                                            this.documentAttach = tLRPC$Document6;
                                                            this.documentAttachType = 2;
                                                        } else if (MessageObject.isVideoDocument(tLRPC$Document6)) {
                                                            webFile2 = webFile6;
                                                            i31 = extraTimeX2;
                                                            if (tLRPC$Photo3 == null) {
                                                                tLRPC$Photo4 = tLRPC$Photo3;
                                                            } else {
                                                                tLRPC$Photo4 = tLRPC$Photo3;
                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, AndroidUtilities.getPhotoSize(), true);
                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, 40);
                                                                this.photoParentObject = tLRPC$Photo4;
                                                            }
                                                            if (this.currentPhotoObject == null) {
                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 320);
                                                                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 40);
                                                                this.photoParentObject = tLRPC$Document6;
                                                            }
                                                            TLRPC$PhotoSize tLRPC$PhotoSize19 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize19 != this.currentPhotoObjectThumb) {
                                                                tLRPC$PhotoSize = null;
                                                            } else {
                                                                tLRPC$PhotoSize = null;
                                                                this.currentPhotoObjectThumb = null;
                                                            }
                                                            BitmapDrawable bitmapDrawable7 = this.currentMessageObject.strippedThumb;
                                                            if (bitmapDrawable7 != null) {
                                                                this.currentPhotoObjectThumb = tLRPC$PhotoSize;
                                                                this.currentPhotoObjectThumbStripped = bitmapDrawable7;
                                                            }
                                                            if (tLRPC$PhotoSize19 == null) {
                                                                TLRPC$TL_photoSize tLRPC$TL_photoSize = new TLRPC$TL_photoSize();
                                                                this.currentPhotoObject = tLRPC$TL_photoSize;
                                                                tLRPC$TL_photoSize.type = "s";
                                                                tLRPC$TL_photoSize.location = new TLRPC$TL_fileLocationUnavailable();
                                                            }
                                                            TLRPC$PhotoSize tLRPC$PhotoSize20 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize20 != null && (tLRPC$PhotoSize20.w == 0 || tLRPC$PhotoSize20.h == 0 || (tLRPC$PhotoSize20 instanceof TLRPC$TL_photoStrippedSize))) {
                                                                int i243 = 0;
                                                                while (true) {
                                                                    if (i243 >= tLRPC$Document6.attributes.size()) {
                                                                        break;
                                                                    }
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute5 = tLRPC$Document6.attributes.get(i243);
                                                                    if (!(tLRPC$DocumentAttribute5 instanceof TLRPC$TL_documentAttributeVideo)) {
                                                                        i243++;
                                                                    } else {
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize21 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize21 instanceof TLRPC$TL_photoStrippedSize) {
                                                                            int i244 = tLRPC$DocumentAttribute5.w;
                                                                            float max12 = Math.max(i244, i244) / 50.0f;
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize22 = this.currentPhotoObject;
                                                                            tLRPC$PhotoSize22.w = (int) (tLRPC$DocumentAttribute5.w / max12);
                                                                            tLRPC$PhotoSize22.h = (int) (tLRPC$DocumentAttribute5.h / max12);
                                                                        } else {
                                                                            tLRPC$PhotoSize21.w = tLRPC$DocumentAttribute5.w;
                                                                            tLRPC$PhotoSize21.h = tLRPC$DocumentAttribute5.h;
                                                                        }
                                                                    }
                                                                }
                                                                TLRPC$PhotoSize tLRPC$PhotoSize23 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize23.w == 0 || tLRPC$PhotoSize23.h == 0) {
                                                                    int dp57 = AndroidUtilities.dp(150.0f);
                                                                    tLRPC$PhotoSize23.h = dp57;
                                                                    tLRPC$PhotoSize23.w = dp57;
                                                                }
                                                            }
                                                            createDocumentLayout(0, messageObject3);
                                                        } else {
                                                            if (MessageObject.isStickerDocument(tLRPC$Document6) || MessageObject.isAnimatedStickerDocument(tLRPC$Document6, true)) {
                                                                webFile2 = webFile6;
                                                                i31 = extraTimeX2;
                                                                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 90);
                                                                this.currentPhotoObject = closestPhotoSizeWithSize2;
                                                                this.photoParentObject = tLRPC$Document6;
                                                                if (closestPhotoSizeWithSize2 != null && (closestPhotoSizeWithSize2.w == 0 || closestPhotoSizeWithSize2.h == 0)) {
                                                                    int i245 = 0;
                                                                    while (true) {
                                                                        if (i245 >= tLRPC$Document6.attributes.size()) {
                                                                            break;
                                                                        }
                                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute6 = tLRPC$Document6.attributes.get(i245);
                                                                        if (tLRPC$DocumentAttribute6 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize24 = this.currentPhotoObject;
                                                                            tLRPC$PhotoSize24.w = tLRPC$DocumentAttribute6.w;
                                                                            tLRPC$PhotoSize24.h = tLRPC$DocumentAttribute6.h;
                                                                            break;
                                                                        }
                                                                        i245++;
                                                                    }
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize25 = this.currentPhotoObject;
                                                                    if (tLRPC$PhotoSize25.w == 0 || tLRPC$PhotoSize25.h == 0) {
                                                                        int dp58 = AndroidUtilities.dp(150.0f);
                                                                        tLRPC$PhotoSize25.h = dp58;
                                                                        tLRPC$PhotoSize25.w = dp58;
                                                                    }
                                                                }
                                                                this.documentAttach = tLRPC$Document6;
                                                                this.documentAttachType = 6;
                                                            } else {
                                                                int i246 = this.drawInstantViewType;
                                                                if (i246 != 6) {
                                                                    if (i246 == 7) {
                                                                        webFile2 = webFile6;
                                                                        i32 = i8;
                                                                        i31 = extraTimeX2;
                                                                        this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 700);
                                                                        BitmapDrawable bitmapDrawable8 = this.currentMessageObject.strippedThumb;
                                                                        if (bitmapDrawable8 == null) {
                                                                            this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 40);
                                                                        } else {
                                                                            this.currentPhotoObjectThumbStripped = bitmapDrawable8;
                                                                        }
                                                                        this.photoParentObject = tLRPC$Document6;
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize26 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize26 != null && (tLRPC$PhotoSize26.w == 0 || tLRPC$PhotoSize26.h == 0)) {
                                                                            int i247 = 0;
                                                                            while (true) {
                                                                                if (i247 >= tLRPC$Document6.attributes.size()) {
                                                                                    break;
                                                                                }
                                                                                TLRPC$DocumentAttribute tLRPC$DocumentAttribute7 = tLRPC$Document6.attributes.get(i247);
                                                                                if (tLRPC$DocumentAttribute7 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                    TLRPC$PhotoSize tLRPC$PhotoSize27 = this.currentPhotoObject;
                                                                                    tLRPC$PhotoSize27.w = tLRPC$DocumentAttribute7.w;
                                                                                    tLRPC$PhotoSize27.h = tLRPC$DocumentAttribute7.h;
                                                                                    break;
                                                                                }
                                                                                i247++;
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize28 = this.currentPhotoObject;
                                                                            if (tLRPC$PhotoSize28.w == 0 || tLRPC$PhotoSize28.h == 0) {
                                                                                int dp59 = AndroidUtilities.dp(150.0f);
                                                                                tLRPC$PhotoSize28.h = dp59;
                                                                                tLRPC$PhotoSize28.w = dp59;
                                                                            }
                                                                        }
                                                                        this.documentAttach = tLRPC$Document6;
                                                                        this.documentAttachType = 9;
                                                                    } else {
                                                                        i32 = i8;
                                                                        i31 = extraTimeX2;
                                                                        calcBackgroundWidth(i32, i31, max);
                                                                        if (this.backgroundWidth < AndroidUtilities.dp(20.0f) + i32) {
                                                                            this.backgroundWidth = AndroidUtilities.dp(20.0f) + i32;
                                                                        }
                                                                        if (MessageObject.isVoiceDocument(tLRPC$Document6)) {
                                                                            webFile3 = webFile6;
                                                                            createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject3);
                                                                            this.mediaOffsetY = this.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                            this.totalHeight += AndroidUtilities.dp(44.0f);
                                                                            this.linkPreviewHeight += AndroidUtilities.dp(44.0f);
                                                                            dp4 = i32 - AndroidUtilities.dp(86.0f);
                                                                            max = !AndroidUtilities.isTablet() ? Math.max(max, (Math.min(getParentWidth() - AndroidUtilities.dp(!z8 ? 0.0f : 52.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp3) : Math.max(max, (Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(!z8 ? 0.0f : 52.0f), AndroidUtilities.dp(220.0f)) - AndroidUtilities.dp(30.0f)) + dp3);
                                                                            calcBackgroundWidth(dp4, i31, max);
                                                                        } else if (MessageObject.isMusicDocument(tLRPC$Document6)) {
                                                                            webFile3 = webFile6;
                                                                            int createDocumentLayout = createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(10.0f), messageObject3);
                                                                            this.mediaOffsetY = this.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                            this.totalHeight += AndroidUtilities.dp(56.0f);
                                                                            this.linkPreviewHeight += AndroidUtilities.dp(56.0f);
                                                                            dp4 = i32 - AndroidUtilities.dp(86.0f);
                                                                            int max13 = Math.max(max, createDocumentLayout + dp3 + AndroidUtilities.dp(94.0f));
                                                                            StaticLayout staticLayout19 = this.songLayout;
                                                                            if (staticLayout19 != null && staticLayout19.getLineCount() > 0) {
                                                                                max13 = (int) Math.max(max13, this.songLayout.getLineWidth(0) + dp3 + AndroidUtilities.dp(86.0f));
                                                                            }
                                                                            StaticLayout staticLayout20 = this.performerLayout;
                                                                            if (staticLayout20 != null && staticLayout20.getLineCount() > 0) {
                                                                                max13 = (int) Math.max(max13, this.performerLayout.getLineWidth(0) + dp3 + AndroidUtilities.dp(86.0f));
                                                                            }
                                                                            max = max13;
                                                                            calcBackgroundWidth(dp4, i31, max);
                                                                        } else {
                                                                            createDocumentLayout(this.backgroundWidth - AndroidUtilities.dp(168.0f), messageObject3);
                                                                            this.drawImageButton = true;
                                                                            if (this.drawPhotoImage) {
                                                                                webFile2 = webFile6;
                                                                                this.totalHeight += AndroidUtilities.dp(100.0f);
                                                                                this.linkPreviewHeight += AndroidUtilities.dp(86.0f);
                                                                                this.photoImage.setImageCoords(0.0f, this.totalHeight + this.namesOffset, AndroidUtilities.dp(86.0f), AndroidUtilities.dp(86.0f));
                                                                            } else {
                                                                                this.mediaOffsetY = this.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f) + this.linkPreviewHeight;
                                                                                webFile2 = webFile6;
                                                                                this.photoImage.setImageCoords(0.0f, (this.totalHeight + this.namesOffset) - AndroidUtilities.dp(14.0f), AndroidUtilities.dp(56.0f), AndroidUtilities.dp(56.0f));
                                                                                this.totalHeight += AndroidUtilities.dp(64.0f);
                                                                                this.linkPreviewHeight += AndroidUtilities.dp(50.0f);
                                                                                StaticLayout staticLayout21 = this.docTitleLayout;
                                                                                if (staticLayout21 != null && staticLayout21.getLineCount() > 1) {
                                                                                    int lineCount7 = (this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f);
                                                                                    this.totalHeight += lineCount7;
                                                                                    this.linkPreviewHeight += lineCount7;
                                                                                }
                                                                            }
                                                                        }
                                                                        i33 = dp4;
                                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                                        webFile4 = webFile3;
                                                                        i34 = this.documentAttachType;
                                                                        if (i34 == 5) {
                                                                        }
                                                                        messageObject4 = messageObject3;
                                                                        i35 = 4;
                                                                        i36 = 3;
                                                                        i37 = 0;
                                                                        f3 = 1.0f;
                                                                        z19 = true;
                                                                        createInstantViewButton();
                                                                        i58 = i37;
                                                                    }
                                                                    i8 = i32;
                                                                } else {
                                                                    webFile2 = webFile6;
                                                                    int i248 = i8;
                                                                    i31 = extraTimeX2;
                                                                    TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document6.thumbs, 320);
                                                                    this.currentPhotoObject = closestPhotoSizeWithSize3;
                                                                    this.photoParentObject = tLRPC$Document6;
                                                                    if (closestPhotoSizeWithSize3 != null && (closestPhotoSizeWithSize3.w == 0 || closestPhotoSizeWithSize3.h == 0)) {
                                                                        int i249 = 0;
                                                                        while (true) {
                                                                            if (i249 >= tLRPC$Document6.attributes.size()) {
                                                                                break;
                                                                            }
                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute8 = tLRPC$Document6.attributes.get(i249);
                                                                            if (tLRPC$DocumentAttribute8 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize29 = this.currentPhotoObject;
                                                                                tLRPC$PhotoSize29.w = tLRPC$DocumentAttribute8.w;
                                                                                tLRPC$PhotoSize29.h = tLRPC$DocumentAttribute8.h;
                                                                                break;
                                                                            }
                                                                            i249++;
                                                                        }
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize30 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize30.w == 0 || tLRPC$PhotoSize30.h == 0) {
                                                                            int dp60 = AndroidUtilities.dp(150.0f);
                                                                            tLRPC$PhotoSize30.h = dp60;
                                                                            tLRPC$PhotoSize30.w = dp60;
                                                                        }
                                                                    }
                                                                    this.documentAttach = tLRPC$Document6;
                                                                    this.documentAttachType = 8;
                                                                    i8 = i248;
                                                                    String formatFileSize = AndroidUtilities.formatFileSize(tLRPC$Document6.size);
                                                                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatFileSize));
                                                                    this.videoInfoLayout = new StaticLayout(formatFileSize, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                }
                                                            }
                                                            tLRPC$Photo4 = tLRPC$Photo3;
                                                        }
                                                    }
                                                    i33 = i8;
                                                    webFile4 = webFile2;
                                                    i34 = this.documentAttachType;
                                                    if (i34 == 5) {
                                                    }
                                                    messageObject4 = messageObject3;
                                                    i35 = 4;
                                                    i36 = 3;
                                                    i37 = 0;
                                                    f3 = 1.0f;
                                                    z19 = true;
                                                    createInstantViewButton();
                                                    i58 = i37;
                                                } else {
                                                    if (tLRPC$Photo3 != null) {
                                                        WebFile webFile7 = webFile2;
                                                        if (str33 == null) {
                                                            str11 = str33;
                                                        } else {
                                                            str11 = str33;
                                                            if (str11.equals("photo")) {
                                                                messageObject3 = messageObject;
                                                                z22 = true;
                                                                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject3.photoThumbs, (!z22 && z18) ? dp54 : AndroidUtilities.getPhotoSize(), !z22);
                                                                this.photoParentObject = messageObject3.photoThumbsObject;
                                                                this.checkOnlyButtonPressed = !z22;
                                                                bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                                if (bitmapDrawable == null) {
                                                                    this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject3.photoThumbs, 40);
                                                                } else {
                                                                    this.currentPhotoObjectThumbStripped = bitmapDrawable;
                                                                }
                                                                if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                                    this.currentPhotoObjectThumb = null;
                                                                }
                                                                webFile2 = webFile7;
                                                                tLRPC$Photo4 = tLRPC$Photo3;
                                                            }
                                                        }
                                                        messageObject3 = messageObject;
                                                        z22 = false;
                                                        if (!z22) {
                                                            this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject3.photoThumbs, (!z22 && z18) ? dp54 : AndroidUtilities.getPhotoSize(), !z22);
                                                            this.photoParentObject = messageObject3.photoThumbsObject;
                                                            this.checkOnlyButtonPressed = !z22;
                                                            bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                            if (bitmapDrawable == null) {
                                                            }
                                                            if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                            }
                                                            webFile2 = webFile7;
                                                            tLRPC$Photo4 = tLRPC$Photo3;
                                                        }
                                                        this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject3.photoThumbs, (!z22 && z18) ? dp54 : AndroidUtilities.getPhotoSize(), !z22);
                                                        this.photoParentObject = messageObject3.photoThumbsObject;
                                                        this.checkOnlyButtonPressed = !z22;
                                                        bitmapDrawable = this.currentMessageObject.strippedThumb;
                                                        if (bitmapDrawable == null) {
                                                        }
                                                        if (this.currentPhotoObjectThumb == this.currentPhotoObject) {
                                                        }
                                                        webFile2 = webFile7;
                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                    } else if (webFile2 == null) {
                                                        messageObject3 = messageObject;
                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                        str11 = str33;
                                                    } else {
                                                        WebFile webFile8 = webFile2;
                                                        if (!webFile8.mime_type.startsWith("image/")) {
                                                            webFile8 = null;
                                                        }
                                                        this.drawImageButton = false;
                                                        messageObject3 = messageObject;
                                                        webFile4 = webFile8;
                                                        tLRPC$Photo4 = tLRPC$Photo3;
                                                        str11 = str33;
                                                        i33 = i8;
                                                        i31 = extraTimeX2;
                                                        tLRPC$Document6 = tLRPC$Document5;
                                                        i34 = this.documentAttachType;
                                                        if (i34 == 5 || i34 == 3 || i34 == 1) {
                                                            messageObject4 = messageObject3;
                                                            i35 = 4;
                                                            i36 = 3;
                                                            i37 = 0;
                                                            f3 = 1.0f;
                                                            z19 = true;
                                                        } else {
                                                            if (this.currentPhotoObject != null || webFile4 != null || i34 == 8 || i34 == 9) {
                                                                this.drawImageButton = (tLRPC$Photo4 != null && !z18) || (str11 != null && (str11.equals("photo") || ((str11.equals("document") && this.documentAttachType != 6) || str11.equals("gif") || (i38 = this.documentAttachType) == 4 || i38 == 8)));
                                                                i39 = this.linkPreviewHeight;
                                                                if (i39 != 0) {
                                                                    this.linkPreviewHeight = i39 + AndroidUtilities.dp(2.0f);
                                                                    this.totalHeight += AndroidUtilities.dp(2.0f);
                                                                }
                                                                if (this.imageBackgroundSideColor != 0) {
                                                                    dp54 = AndroidUtilities.dp(208.0f);
                                                                } else {
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize31 = this.currentPhotoObject;
                                                                    if ((tLRPC$PhotoSize31 instanceof TLRPC$TL_photoSizeEmpty) && (i54 = tLRPC$PhotoSize31.w) != 0) {
                                                                        dp54 = i54;
                                                                    } else {
                                                                        int i250 = this.documentAttachType;
                                                                        if (i250 == 6 || i250 == 8 || i250 == 9) {
                                                                            if (AndroidUtilities.isTablet()) {
                                                                                minTabletSide3 = AndroidUtilities.getMinTabletSide();
                                                                            } else {
                                                                                minTabletSide3 = getParentWidth();
                                                                            }
                                                                            dp54 = (int) (minTabletSide3 * 0.5f);
                                                                        } else if (i250 == 7) {
                                                                            dp54 = AndroidUtilities.roundMessageSize;
                                                                            this.photoImage.setAllowDecodeSingleFrame(true);
                                                                        }
                                                                    }
                                                                }
                                                                if (this.hasInvoicePreview && dp54 < (i53 = messageObject3.textWidth)) {
                                                                    dp54 = i53 + AndroidUtilities.dp(22.0f);
                                                                }
                                                                max2 = Math.max(max, (dp54 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp3);
                                                                tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                                if (tLRPC$PhotoSize2 != null) {
                                                                    tLRPC$PhotoSize2.size = -1;
                                                                    TLRPC$PhotoSize tLRPC$PhotoSize32 = this.currentPhotoObjectThumb;
                                                                    if (tLRPC$PhotoSize32 != null) {
                                                                        tLRPC$PhotoSize32.size = -1;
                                                                    }
                                                                } else if (webFile4 != null) {
                                                                    webFile4.size = -1;
                                                                }
                                                                if (this.imageBackgroundSideColor != 0) {
                                                                    this.imageBackgroundSideWidth = max2 - AndroidUtilities.dp(13.0f);
                                                                }
                                                                if (z18 || this.documentAttachType == 7) {
                                                                    i40 = dp54;
                                                                } else if (this.hasGamePreview || this.hasInvoicePreview) {
                                                                    if (this.hasInvoicePreview) {
                                                                        int size11 = webFile4.attributes.size();
                                                                        for (int i251 = 0; i251 < size11; i251++) {
                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute9 = webFile4.attributes.get(i251);
                                                                            if (tLRPC$DocumentAttribute9 instanceof TLRPC$TL_documentAttributeImageSize) {
                                                                                i46 = tLRPC$DocumentAttribute9.w;
                                                                                i47 = tLRPC$DocumentAttribute9.h;
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    i46 = 640;
                                                                    i47 = 360;
                                                                    float f34 = i46;
                                                                    float dp61 = f34 / (dp54 - AndroidUtilities.dp(2.0f));
                                                                    dp54 = (int) (i47 / dp61);
                                                                    i40 = (int) (f34 / dp61);
                                                                } else {
                                                                    if (this.drawInstantViewType == 7) {
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize33 = this.currentPhotoObject;
                                                                        if (tLRPC$PhotoSize33 == null) {
                                                                            i48 = 30;
                                                                            i49 = 50;
                                                                        } else {
                                                                            int i252 = tLRPC$PhotoSize33.w;
                                                                            i49 = tLRPC$PhotoSize33.h;
                                                                            i48 = i252;
                                                                        }
                                                                    } else {
                                                                        i48 = 560;
                                                                        i49 = 678;
                                                                    }
                                                                    float f35 = i48;
                                                                    float dp62 = f35 / (dp54 - AndroidUtilities.dp(2.0f));
                                                                    i40 = (int) (f35 / dp62);
                                                                    i50 = (int) (i49 / dp62);
                                                                    if (str9 == null || (!str9.toLowerCase().equals("instagram") && this.documentAttachType == 0)) {
                                                                        i51 = AndroidUtilities.displaySize.y;
                                                                        if (i50 > i51 / 3) {
                                                                            i50 = i51 / 3;
                                                                            if (this.imageBackgroundSideColor != 0) {
                                                                                float f36 = i50;
                                                                                float dp63 = f36 / AndroidUtilities.dp(160.0f);
                                                                                i40 = (int) (i40 / dp63);
                                                                                i50 = (int) (f36 / dp63);
                                                                            }
                                                                            dp54 = i50;
                                                                            if (dp54 < AndroidUtilities.dp(60.0f)) {
                                                                                dp54 = AndroidUtilities.dp(60.0f);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        i52 = AndroidUtilities.displaySize.y;
                                                                        if (i50 > i52 / 2) {
                                                                            i50 = i52 / 2;
                                                                        }
                                                                    }
                                                                    if (this.imageBackgroundSideColor != 0) {
                                                                    }
                                                                    dp54 = i50;
                                                                    if (dp54 < AndroidUtilities.dp(60.0f)) {
                                                                    }
                                                                }
                                                                if (!this.isSmallImage) {
                                                                    if (AndroidUtilities.dp(50.0f) > this.linkPreviewHeight) {
                                                                        this.totalHeight += (AndroidUtilities.dp(50.0f) - this.linkPreviewHeight) + AndroidUtilities.dp(8.0f);
                                                                        this.linkPreviewHeight = AndroidUtilities.dp(50.0f);
                                                                    }
                                                                    this.linkPreviewHeight -= AndroidUtilities.dp(8.0f);
                                                                } else {
                                                                    this.totalHeight += AndroidUtilities.dp(12.0f) + dp54;
                                                                    this.linkPreviewHeight += dp54;
                                                                }
                                                                if (this.documentAttachType == 8 && this.imageBackgroundSideColor == 0) {
                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, Math.max(max2 - AndroidUtilities.dp(13.0f), i40), dp54);
                                                                } else {
                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                                }
                                                                float f37 = AndroidUtilities.density;
                                                                int i253 = (int) (i40 / f37);
                                                                int i254 = (int) (dp54 / f37);
                                                                Locale locale = Locale.US;
                                                                this.currentPhotoFilter = String.format(locale, "%d_%d", Integer.valueOf(i253), Integer.valueOf(i254));
                                                                this.currentPhotoFilterThumb = String.format(locale, "%d_%d_b", Integer.valueOf(i253), Integer.valueOf(i254));
                                                                if (webFile4 != null) {
                                                                    i41 = i31;
                                                                    messageObject4 = messageObject3;
                                                                    str12 = str11;
                                                                    i42 = max2;
                                                                    i36 = 3;
                                                                    i43 = 0;
                                                                    f3 = 1.0f;
                                                                    this.photoImage.setImage(ImageLocation.getForWebFile(webFile4), this.currentPhotoFilter, null, null, webFile4.size, null, messageObject, 1);
                                                                } else {
                                                                    int i255 = this.documentAttachType;
                                                                    if (i255 == 8) {
                                                                        i41 = i31;
                                                                        messageObject4 = messageObject3;
                                                                        str12 = str11;
                                                                        i42 = max2;
                                                                        i36 = 3;
                                                                        i43 = 0;
                                                                        i43 = 0;
                                                                        f3 = 1.0f;
                                                                        if (messageObject4.mediaExists) {
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document6), "b1", 0L, "jpg", messageObject, 1);
                                                                        } else {
                                                                            this.photoImage.setImage(null, null, ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document6), "b1", 0L, "jpg", messageObject, 1);
                                                                        }
                                                                    } else if (i255 == 9) {
                                                                        i41 = i31;
                                                                        messageObject4 = messageObject3;
                                                                        str12 = str11;
                                                                        i42 = max2;
                                                                        i36 = 3;
                                                                        i43 = 0;
                                                                        i43 = 0;
                                                                        f3 = 1.0f;
                                                                        if (tLRPC$Document6 instanceof DocumentObject.ThemeDocument) {
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document6), this.currentPhotoFilter, null, "b1", 0L, "jpg", messageObject, 1);
                                                                        } else {
                                                                            this.photoImage.setImage(ImageLocation.getForDocument(this.currentPhotoObject, tLRPC$Document6), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, tLRPC$Document6), "b1", this.currentPhotoObjectThumbStripped, 0L, "jpg", messageObject, 1);
                                                                        }
                                                                    } else if (i255 == 6) {
                                                                        i41 = i31;
                                                                        str12 = str11;
                                                                        i42 = max2;
                                                                        i43 = 0;
                                                                        f3 = 1.0f;
                                                                        boolean isSticker = messageObject.isSticker();
                                                                        if (!SharedConfig.loopStickers && messageObject.isVideoSticker()) {
                                                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 1;
                                                                        }
                                                                        if (SharedConfig.loopStickers || (isSticker && !messageObject.isVideoSticker())) {
                                                                            messageObject4 = messageObject;
                                                                            i36 = 3;
                                                                            this.photoImage.setAutoRepeat(1);
                                                                        } else {
                                                                            i36 = 3;
                                                                            messageObject4 = messageObject;
                                                                            this.currentPhotoFilter = String.format(locale, "%d_%d_nr_messageId=%d", Integer.valueOf(i253), Integer.valueOf(i254), Integer.valueOf(messageObject4.stableId));
                                                                            ImageReceiver imageReceiver9 = this.photoImage;
                                                                            ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                                                                            imageReceiver9.setAutoRepeat((chatMessageCellDelegate4 != null && chatMessageCellDelegate4.shouldRepeatSticker(messageObject4)) ? 2 : 3);
                                                                        }
                                                                        this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", this.documentAttach.size, "webp", messageObject, 1);
                                                                    } else if (i255 == 4) {
                                                                        i41 = i31;
                                                                        str12 = str11;
                                                                        i42 = max2;
                                                                        i43 = 0;
                                                                        f3 = 1.0f;
                                                                        this.photoImage.setNeedsQualityThumb(true);
                                                                        this.photoImage.setShouldGenerateQualityThumb(true);
                                                                        if (SharedConfig.autoplayVideo) {
                                                                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                                                                MessageObject messageObject26 = this.currentMessageObject;
                                                                                if (!messageObject26.isMediaSpoilersRevealed) {
                                                                                }
                                                                            }
                                                                            if (this.currentMessageObject.mediaExists || (messageObject.canStreamVideo() && DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject))) {
                                                                                this.photoImage.setAllowDecodeSingleFrame(true);
                                                                                this.photoImage.setAllowStartAnimation(true);
                                                                                this.photoImage.startAnimation();
                                                                                this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), ImageLoader.AUTOPLAY_FILTER, ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObjectThumb, this.documentAttach), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, messageObject, 0);
                                                                                this.autoPlayingMedia = true;
                                                                                messageObject4 = messageObject;
                                                                                i36 = 3;
                                                                            }
                                                                        }
                                                                        if (this.currentPhotoObjectThumb != null || this.currentPhotoObjectThumbStripped != null) {
                                                                            this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                        } else {
                                                                            ImageReceiver imageReceiver10 = this.photoImage;
                                                                            ImageLocation forObject6 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize34 = this.currentPhotoObject;
                                                                            imageReceiver10.setImage(null, null, forObject6, (!(tLRPC$PhotoSize34 instanceof TLRPC$TL_photoStrippedSize) && !"s".equals(tLRPC$PhotoSize34.type)) ? this.currentPhotoFilter : this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                        }
                                                                        messageObject4 = messageObject;
                                                                        i36 = 3;
                                                                    } else if (i255 == 2 || i255 == 7) {
                                                                        i41 = i31;
                                                                        MessageObject messageObject27 = messageObject3;
                                                                        i42 = max2;
                                                                        f3 = 1.0f;
                                                                        this.photoImage.setAllowDecodeSingleFrame(true);
                                                                        if (MessageObject.isRoundVideoDocument(tLRPC$Document6)) {
                                                                            this.photoImage.setRoundRadius(AndroidUtilities.roundMessageSize / 2);
                                                                            canDownloadMedia = DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                            z19 = false;
                                                                        } else {
                                                                            canDownloadMedia = !MessageObject.isGifDocument(tLRPC$Document6, messageObject.hasValidGroupId()) ? false : DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject);
                                                                            z19 = true;
                                                                        }
                                                                        TLRPC$PhotoSize tLRPC$PhotoSize35 = this.currentPhotoObject;
                                                                        String str34 = (!(tLRPC$PhotoSize35 instanceof TLRPC$TL_photoStrippedSize) && !"s".equals(tLRPC$PhotoSize35.type)) ? this.currentPhotoFilter : this.currentPhotoFilterThumb;
                                                                        if (messageObject27.mediaExists || canDownloadMedia) {
                                                                            this.autoPlayingMedia = true;
                                                                            TLRPC$VideoSize documentVideoThumb2 = MessageObject.getDocumentVideoThumb(tLRPC$Document6);
                                                                            if (!messageObject27.mediaExists && documentVideoThumb2 != null && (this.currentPhotoObject == null || this.currentPhotoObjectThumb == null)) {
                                                                                str12 = str11;
                                                                                i45 = 0;
                                                                                ImageReceiver imageReceiver11 = this.photoImage;
                                                                                ImageLocation forDocument5 = ImageLocation.getForDocument(tLRPC$Document6);
                                                                                String str35 = tLRPC$Document6.size >= 32768 ? ImageLoader.AUTOPLAY_FILTER : null;
                                                                                ImageLocation forDocument6 = ImageLocation.getForDocument(documentVideoThumb2, this.documentAttach);
                                                                                TLRPC$PhotoSize tLRPC$PhotoSize36 = this.currentPhotoObject;
                                                                                if (tLRPC$PhotoSize36 == null) {
                                                                                    tLRPC$PhotoSize36 = this.currentPhotoObjectThumb;
                                                                                }
                                                                                ImageLocation forDocument7 = ImageLocation.getForDocument(tLRPC$PhotoSize36, this.documentAttach);
                                                                                if (this.currentPhotoObject == null) {
                                                                                    str34 = this.currentPhotoFilterThumb;
                                                                                }
                                                                                imageReceiver11.setImage(forDocument5, str35, forDocument6, null, forDocument7, str34, this.currentPhotoObjectThumbStripped, tLRPC$Document6.size, null, messageObject, 0);
                                                                            } else {
                                                                                str12 = str11;
                                                                                i45 = 0;
                                                                                this.photoImage.setImage(ImageLocation.getForDocument(tLRPC$Document6), tLRPC$Document6.size >= 32768 ? ImageLoader.AUTOPLAY_FILTER : null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), str34, ImageLocation.getForDocument(this.currentPhotoObjectThumb, this.documentAttach), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, tLRPC$Document6.size, null, messageObject, 0);
                                                                            }
                                                                        } else {
                                                                            this.photoImage.setImage(null, null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), str34, 0L, null, this.currentMessageObject, 0);
                                                                            str12 = str11;
                                                                            i45 = 0;
                                                                        }
                                                                        messageObject4 = messageObject;
                                                                        i36 = 3;
                                                                        i44 = i45;
                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                            this.blurredPhotoImage.getBitmap().recycle();
                                                                            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                                        }
                                                                        if (this.photoImage.getBitmap() != null && !this.photoImage.getBitmap().isRecycled() && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed) {
                                                                            this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                                                                        }
                                                                        this.drawPhotoImage = true;
                                                                        str13 = str12;
                                                                        if (str13 != null && str13.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && i9 != 0) {
                                                                            String formatShortDuration = AndroidUtilities.formatShortDuration(i9);
                                                                            this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration));
                                                                            this.videoInfoLayout = new StaticLayout(formatShortDuration, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                        } else if (this.hasGamePreview) {
                                                                            try {
                                                                                TLRPC$Message tLRPC$Message7 = messageObject4.messageOwner;
                                                                                j = tLRPC$Message7.via_bot_id;
                                                                                if (j == 0) {
                                                                                    j = tLRPC$Message7.from_id.user_id;
                                                                                }
                                                                            } catch (Exception unused3) {
                                                                            }
                                                                            if (j != 0 && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j))) != null && (str14 = user.username) != null) {
                                                                                if (str14.equals("donate")) {
                                                                                    z20 = false;
                                                                                    if (z20) {
                                                                                        String upperCase2 = LocaleController.getString("AttachGame", R.string.AttachGame).toUpperCase();
                                                                                        this.durationWidth = (int) Math.ceil(Theme.chat_gamePaint.measureText(upperCase2));
                                                                                        this.videoInfoLayout = new StaticLayout(upperCase2, Theme.chat_gamePaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                    }
                                                                                }
                                                                            }
                                                                            z20 = true;
                                                                            if (z20) {
                                                                            }
                                                                        }
                                                                        max = i42;
                                                                        i55 = i44;
                                                                    } else {
                                                                        boolean z63 = messageObject3.mediaExists;
                                                                        String attachFileName3 = FileLoader.getAttachFileName(this.currentPhotoObject);
                                                                        if (this.hasGamePreview || z63 || DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject)) {
                                                                            i41 = i31;
                                                                            messageObject4 = messageObject3;
                                                                            i42 = max2;
                                                                            z21 = false;
                                                                            f3 = 1.0f;
                                                                        } else if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(attachFileName3)) {
                                                                            this.photoNotSet = true;
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize37 = this.currentPhotoObjectThumb;
                                                                            if (tLRPC$PhotoSize37 != null || this.currentPhotoObjectThumbStripped != null) {
                                                                                messageObject4 = messageObject3;
                                                                                f3 = 1.0f;
                                                                                i42 = max2;
                                                                                i41 = i31;
                                                                                this.photoImage.setImage(null, null, ImageLocation.getForObject(tLRPC$PhotoSize37, this.photoParentObject), String.format(locale, "%d_%d_b", Integer.valueOf(i253), Integer.valueOf(i254)), this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                                str12 = str11;
                                                                                i36 = 3;
                                                                                i43 = 0;
                                                                            } else {
                                                                                this.photoImage.setImageBitmap((Drawable) null);
                                                                                i41 = i31;
                                                                                messageObject4 = messageObject3;
                                                                                str12 = str11;
                                                                                i42 = max2;
                                                                                i36 = 3;
                                                                                i43 = 0;
                                                                                f3 = 1.0f;
                                                                            }
                                                                        } else {
                                                                            i41 = i31;
                                                                            messageObject4 = messageObject3;
                                                                            i42 = max2;
                                                                            f3 = 1.0f;
                                                                            z21 = false;
                                                                        }
                                                                        this.photoNotSet = z21;
                                                                        this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 0);
                                                                        str12 = str11;
                                                                        i36 = 3;
                                                                        i43 = 0;
                                                                    }
                                                                }
                                                                z19 = true;
                                                                i44 = i43;
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                }
                                                                if (this.photoImage.getBitmap() != null) {
                                                                    this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(this.photoImage.getBitmap(), 5.0f));
                                                                }
                                                                this.drawPhotoImage = true;
                                                                str13 = str12;
                                                                if (str13 != null) {
                                                                    String formatShortDuration2 = AndroidUtilities.formatShortDuration(i9);
                                                                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatShortDuration2));
                                                                    this.videoInfoLayout = new StaticLayout(formatShortDuration2, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                    max = i42;
                                                                    i55 = i44;
                                                                }
                                                                if (this.hasGamePreview) {
                                                                }
                                                                max = i42;
                                                                i55 = i44;
                                                            } else {
                                                                this.photoImage.setImageBitmap((Drawable) null);
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                    this.blurredPhotoImage.getBitmap().recycle();
                                                                    this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                                                }
                                                                this.linkPreviewHeight -= AndroidUtilities.dp(6.0f);
                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                                i41 = i31;
                                                                messageObject4 = messageObject3;
                                                                i36 = 3;
                                                                i55 = 0;
                                                                f3 = 1.0f;
                                                                z19 = true;
                                                            }
                                                            if (this.hasInvoicePreview) {
                                                                i35 = 4;
                                                            } else {
                                                                i35 = 4;
                                                                if ((MessageObject.getMedia(messageObject4.messageOwner).flags & 4) != 0) {
                                                                    upperCase = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt).toUpperCase();
                                                                } else if (MessageObject.getMedia(messageObject4.messageOwner).test) {
                                                                    upperCase = LocaleController.getString("PaymentTestInvoice", R.string.PaymentTestInvoice).toUpperCase();
                                                                } else {
                                                                    upperCase = LocaleController.getString("PaymentInvoice", R.string.PaymentInvoice).toUpperCase();
                                                                }
                                                                String formatCurrencyString = LocaleController.getInstance().formatCurrencyString(MessageObject.getMedia(messageObject4.messageOwner).total_amount, MessageObject.getMedia(messageObject4.messageOwner).currency);
                                                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(formatCurrencyString + " " + ((Object) upperCase));
                                                                TypefaceSpan typefaceSpan = new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                                                                int length = formatCurrencyString.length();
                                                                int i256 = i55 == 1 ? 1 : 0;
                                                                int i257 = i55 == 1 ? 1 : 0;
                                                                int i258 = i55 == 1 ? 1 : 0;
                                                                int i259 = i55 == 1 ? 1 : 0;
                                                                int i260 = i55 == 1 ? 1 : 0;
                                                                int i261 = i55 == 1 ? 1 : 0;
                                                                int i262 = i55 == 1 ? 1 : 0;
                                                                int i263 = i55 == 1 ? 1 : 0;
                                                                int i264 = i55 == 1 ? 1 : 0;
                                                                int i265 = i55 == 1 ? 1 : 0;
                                                                int i266 = i55 == 1 ? 1 : 0;
                                                                int i267 = i55 == 1 ? 1 : 0;
                                                                int i268 = i55 == 1 ? 1 : 0;
                                                                int i269 = i55 == 1 ? 1 : 0;
                                                                int i270 = i55 == 1 ? 1 : 0;
                                                                spannableStringBuilder.setSpan(typefaceSpan, i256, length, 33);
                                                                this.durationWidth = (int) Math.ceil(Theme.chat_shipmentPaint.measureText(spannableStringBuilder, i55, spannableStringBuilder.length()));
                                                                this.videoInfoLayout = new StaticLayout(spannableStringBuilder, Theme.chat_shipmentPaint, this.durationWidth + AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                if (!this.drawPhotoImage) {
                                                                    this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                    int dp64 = this.timeWidth + AndroidUtilities.dp(14 + (!messageObject.isOutOwner() ? 0 : 20));
                                                                    int i271 = this.durationWidth;
                                                                    if (i271 + dp64 > i33) {
                                                                        max3 = Math.max(i271, max);
                                                                        this.totalHeight += AndroidUtilities.dp(12.0f);
                                                                    } else {
                                                                        max3 = Math.max(i271 + dp64, max);
                                                                    }
                                                                    max = max3;
                                                                }
                                                            }
                                                            if (this.hasGamePreview && (i56 = messageObject4.textHeight) != 0) {
                                                                this.linkPreviewHeight += i56 + AndroidUtilities.dp(6.0f);
                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                            }
                                                            calcBackgroundWidth(i33, i41, max);
                                                            i37 = i55;
                                                        }
                                                        createInstantViewButton();
                                                        i58 = i37;
                                                    }
                                                    i31 = extraTimeX2;
                                                    tLRPC$Document6 = tLRPC$Document5;
                                                    i33 = i8;
                                                    webFile4 = webFile2;
                                                    i34 = this.documentAttachType;
                                                    if (i34 == 5) {
                                                        if (this.currentPhotoObject != null) {
                                                            this.photoImage.setImageBitmap((Drawable) null);
                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                            }
                                                            this.linkPreviewHeight -= AndroidUtilities.dp(6.0f);
                                                            this.totalHeight += AndroidUtilities.dp(4.0f);
                                                            i41 = i31;
                                                            messageObject4 = messageObject3;
                                                            i36 = 3;
                                                            i55 = 0;
                                                            f3 = 1.0f;
                                                            z19 = true;
                                                            if (this.hasInvoicePreview) {
                                                            }
                                                            if (this.hasGamePreview) {
                                                                this.linkPreviewHeight += i56 + AndroidUtilities.dp(6.0f);
                                                                this.totalHeight += AndroidUtilities.dp(4.0f);
                                                            }
                                                            calcBackgroundWidth(i33, i41, max);
                                                            i37 = i55;
                                                            createInstantViewButton();
                                                            i58 = i37;
                                                        }
                                                        if (tLRPC$Photo4 != null) {
                                                            this.drawImageButton = (tLRPC$Photo4 != null && !z18) || (str11 != null && (str11.equals("photo") || ((str11.equals("document") && this.documentAttachType != 6) || str11.equals("gif") || (i38 = this.documentAttachType) == 4 || i38 == 8)));
                                                            i39 = this.linkPreviewHeight;
                                                            if (i39 != 0) {
                                                            }
                                                            if (this.imageBackgroundSideColor != 0) {
                                                            }
                                                            if (this.hasInvoicePreview) {
                                                                dp54 = i53 + AndroidUtilities.dp(22.0f);
                                                            }
                                                            max2 = Math.max(max, (dp54 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp3);
                                                            tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                            if (tLRPC$PhotoSize2 != null) {
                                                            }
                                                            if (this.imageBackgroundSideColor != 0) {
                                                            }
                                                            if (z18) {
                                                                if (this.hasGamePreview) {
                                                                    if (this.drawInstantViewType == 7) {
                                                                    }
                                                                    float f352 = i48;
                                                                    float dp622 = f352 / (dp54 - AndroidUtilities.dp(2.0f));
                                                                    i40 = (int) (f352 / dp622);
                                                                    i50 = (int) (i49 / dp622);
                                                                    if (str9 == null) {
                                                                        i52 = AndroidUtilities.displaySize.y;
                                                                        if (i50 > i52 / 2) {
                                                                        }
                                                                        if (this.imageBackgroundSideColor != 0) {
                                                                        }
                                                                        dp54 = i50;
                                                                        if (dp54 < AndroidUtilities.dp(60.0f)) {
                                                                        }
                                                                        if (!this.isSmallImage) {
                                                                        }
                                                                        if (this.documentAttachType == 8) {
                                                                            this.photoImage.setImageCoords(0.0f, 0.0f, Math.max(max2 - AndroidUtilities.dp(13.0f), i40), dp54);
                                                                            float f372 = AndroidUtilities.density;
                                                                            int i2532 = (int) (i40 / f372);
                                                                            int i2542 = (int) (dp54 / f372);
                                                                            Locale locale2 = Locale.US;
                                                                            this.currentPhotoFilter = String.format(locale2, "%d_%d", Integer.valueOf(i2532), Integer.valueOf(i2542));
                                                                            this.currentPhotoFilterThumb = String.format(locale2, "%d_%d_b", Integer.valueOf(i2532), Integer.valueOf(i2542));
                                                                            if (webFile4 != null) {
                                                                            }
                                                                            z19 = true;
                                                                            i44 = i43;
                                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                                            }
                                                                            if (this.photoImage.getBitmap() != null) {
                                                                            }
                                                                            this.drawPhotoImage = true;
                                                                            str13 = str12;
                                                                            if (str13 != null) {
                                                                            }
                                                                            if (this.hasGamePreview) {
                                                                            }
                                                                            max = i42;
                                                                            i55 = i44;
                                                                            if (this.hasInvoicePreview) {
                                                                            }
                                                                            if (this.hasGamePreview) {
                                                                            }
                                                                            calcBackgroundWidth(i33, i41, max);
                                                                            i37 = i55;
                                                                            createInstantViewButton();
                                                                            i58 = i37;
                                                                        }
                                                                        this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                                        float f3722 = AndroidUtilities.density;
                                                                        int i25322 = (int) (i40 / f3722);
                                                                        int i25422 = (int) (dp54 / f3722);
                                                                        Locale locale22 = Locale.US;
                                                                        this.currentPhotoFilter = String.format(locale22, "%d_%d", Integer.valueOf(i25322), Integer.valueOf(i25422));
                                                                        this.currentPhotoFilterThumb = String.format(locale22, "%d_%d_b", Integer.valueOf(i25322), Integer.valueOf(i25422));
                                                                        if (webFile4 != null) {
                                                                        }
                                                                        z19 = true;
                                                                        i44 = i43;
                                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                                        }
                                                                        if (this.photoImage.getBitmap() != null) {
                                                                        }
                                                                        this.drawPhotoImage = true;
                                                                        str13 = str12;
                                                                        if (str13 != null) {
                                                                        }
                                                                        if (this.hasGamePreview) {
                                                                        }
                                                                        max = i42;
                                                                        i55 = i44;
                                                                        if (this.hasInvoicePreview) {
                                                                        }
                                                                        if (this.hasGamePreview) {
                                                                        }
                                                                        calcBackgroundWidth(i33, i41, max);
                                                                        i37 = i55;
                                                                        createInstantViewButton();
                                                                        i58 = i37;
                                                                    }
                                                                    i51 = AndroidUtilities.displaySize.y;
                                                                    if (i50 > i51 / 3) {
                                                                    }
                                                                    if (this.imageBackgroundSideColor != 0) {
                                                                    }
                                                                    dp54 = i50;
                                                                    if (dp54 < AndroidUtilities.dp(60.0f)) {
                                                                    }
                                                                    if (!this.isSmallImage) {
                                                                    }
                                                                    if (this.documentAttachType == 8) {
                                                                    }
                                                                    this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                                    float f37222 = AndroidUtilities.density;
                                                                    int i253222 = (int) (i40 / f37222);
                                                                    int i254222 = (int) (dp54 / f37222);
                                                                    Locale locale222 = Locale.US;
                                                                    this.currentPhotoFilter = String.format(locale222, "%d_%d", Integer.valueOf(i253222), Integer.valueOf(i254222));
                                                                    this.currentPhotoFilterThumb = String.format(locale222, "%d_%d_b", Integer.valueOf(i253222), Integer.valueOf(i254222));
                                                                    if (webFile4 != null) {
                                                                    }
                                                                    z19 = true;
                                                                    i44 = i43;
                                                                    if (this.blurredPhotoImage.getBitmap() != null) {
                                                                    }
                                                                    if (this.photoImage.getBitmap() != null) {
                                                                    }
                                                                    this.drawPhotoImage = true;
                                                                    str13 = str12;
                                                                    if (str13 != null) {
                                                                    }
                                                                    if (this.hasGamePreview) {
                                                                    }
                                                                    max = i42;
                                                                    i55 = i44;
                                                                    if (this.hasInvoicePreview) {
                                                                    }
                                                                    if (this.hasGamePreview) {
                                                                    }
                                                                    calcBackgroundWidth(i33, i41, max);
                                                                    i37 = i55;
                                                                    createInstantViewButton();
                                                                    i58 = i37;
                                                                }
                                                                if (this.hasInvoicePreview) {
                                                                }
                                                                i46 = 640;
                                                                i47 = 360;
                                                                float f342 = i46;
                                                                float dp612 = f342 / (dp54 - AndroidUtilities.dp(2.0f));
                                                                dp54 = (int) (i47 / dp612);
                                                                i40 = (int) (f342 / dp612);
                                                                if (!this.isSmallImage) {
                                                                }
                                                                if (this.documentAttachType == 8) {
                                                                }
                                                                this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                                float f372222 = AndroidUtilities.density;
                                                                int i2532222 = (int) (i40 / f372222);
                                                                int i2542222 = (int) (dp54 / f372222);
                                                                Locale locale2222 = Locale.US;
                                                                this.currentPhotoFilter = String.format(locale2222, "%d_%d", Integer.valueOf(i2532222), Integer.valueOf(i2542222));
                                                                this.currentPhotoFilterThumb = String.format(locale2222, "%d_%d_b", Integer.valueOf(i2532222), Integer.valueOf(i2542222));
                                                                if (webFile4 != null) {
                                                                }
                                                                z19 = true;
                                                                i44 = i43;
                                                                if (this.blurredPhotoImage.getBitmap() != null) {
                                                                }
                                                                if (this.photoImage.getBitmap() != null) {
                                                                }
                                                                this.drawPhotoImage = true;
                                                                str13 = str12;
                                                                if (str13 != null) {
                                                                }
                                                                if (this.hasGamePreview) {
                                                                }
                                                                max = i42;
                                                                i55 = i44;
                                                                if (this.hasInvoicePreview) {
                                                                }
                                                                if (this.hasGamePreview) {
                                                                }
                                                                calcBackgroundWidth(i33, i41, max);
                                                                i37 = i55;
                                                                createInstantViewButton();
                                                                i58 = i37;
                                                            }
                                                            i40 = dp54;
                                                            if (!this.isSmallImage) {
                                                            }
                                                            if (this.documentAttachType == 8) {
                                                            }
                                                            this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                            float f3722222 = AndroidUtilities.density;
                                                            int i25322222 = (int) (i40 / f3722222);
                                                            int i25422222 = (int) (dp54 / f3722222);
                                                            Locale locale22222 = Locale.US;
                                                            this.currentPhotoFilter = String.format(locale22222, "%d_%d", Integer.valueOf(i25322222), Integer.valueOf(i25422222));
                                                            this.currentPhotoFilterThumb = String.format(locale22222, "%d_%d_b", Integer.valueOf(i25322222), Integer.valueOf(i25422222));
                                                            if (webFile4 != null) {
                                                            }
                                                            z19 = true;
                                                            i44 = i43;
                                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                            }
                                                            if (this.photoImage.getBitmap() != null) {
                                                            }
                                                            this.drawPhotoImage = true;
                                                            str13 = str12;
                                                            if (str13 != null) {
                                                            }
                                                            if (this.hasGamePreview) {
                                                            }
                                                            max = i42;
                                                            i55 = i44;
                                                            if (this.hasInvoicePreview) {
                                                            }
                                                            if (this.hasGamePreview) {
                                                            }
                                                            calcBackgroundWidth(i33, i41, max);
                                                            i37 = i55;
                                                            createInstantViewButton();
                                                            i58 = i37;
                                                        }
                                                        this.drawImageButton = (tLRPC$Photo4 != null && !z18) || (str11 != null && (str11.equals("photo") || ((str11.equals("document") && this.documentAttachType != 6) || str11.equals("gif") || (i38 = this.documentAttachType) == 4 || i38 == 8)));
                                                        i39 = this.linkPreviewHeight;
                                                        if (i39 != 0) {
                                                        }
                                                        if (this.imageBackgroundSideColor != 0) {
                                                        }
                                                        if (this.hasInvoicePreview) {
                                                        }
                                                        max2 = Math.max(max, (dp54 - (!this.hasInvoicePreview ? 0 : AndroidUtilities.dp(12.0f))) + dp3);
                                                        tLRPC$PhotoSize2 = this.currentPhotoObject;
                                                        if (tLRPC$PhotoSize2 != null) {
                                                        }
                                                        if (this.imageBackgroundSideColor != 0) {
                                                        }
                                                        if (z18) {
                                                        }
                                                        i40 = dp54;
                                                        if (!this.isSmallImage) {
                                                        }
                                                        if (this.documentAttachType == 8) {
                                                        }
                                                        this.photoImage.setImageCoords(0.0f, 0.0f, i40, dp54);
                                                        float f37222222 = AndroidUtilities.density;
                                                        int i253222222 = (int) (i40 / f37222222);
                                                        int i254222222 = (int) (dp54 / f37222222);
                                                        Locale locale222222 = Locale.US;
                                                        this.currentPhotoFilter = String.format(locale222222, "%d_%d", Integer.valueOf(i253222222), Integer.valueOf(i254222222));
                                                        this.currentPhotoFilterThumb = String.format(locale222222, "%d_%d_b", Integer.valueOf(i253222222), Integer.valueOf(i254222222));
                                                        if (webFile4 != null) {
                                                        }
                                                        z19 = true;
                                                        i44 = i43;
                                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                                        }
                                                        if (this.photoImage.getBitmap() != null) {
                                                        }
                                                        this.drawPhotoImage = true;
                                                        str13 = str12;
                                                        if (str13 != null) {
                                                        }
                                                        if (this.hasGamePreview) {
                                                        }
                                                        max = i42;
                                                        i55 = i44;
                                                        if (this.hasInvoicePreview) {
                                                        }
                                                        if (this.hasGamePreview) {
                                                        }
                                                        calcBackgroundWidth(i33, i41, max);
                                                        i37 = i55;
                                                        createInstantViewButton();
                                                        i58 = i37;
                                                    }
                                                    messageObject4 = messageObject3;
                                                    i35 = 4;
                                                    i36 = 3;
                                                    i37 = 0;
                                                    f3 = 1.0f;
                                                    z19 = true;
                                                    createInstantViewButton();
                                                    i58 = i37;
                                                }
                                            }
                                            str8 = string;
                                            if (this.hasInvoicePreview) {
                                            }
                                            i12 = i228 - dp3;
                                            messageObject2 = this.currentMessageObject;
                                            String str332 = str6;
                                            if (messageObject2.photoThumbs == null) {
                                                messageObject2.generateThumbs(true);
                                            }
                                            if (str8 != null) {
                                            }
                                            if (str7 != null) {
                                            }
                                            if (str10 != null) {
                                                i57 = this.linkPreviewHeight;
                                                if (i57 == 0) {
                                                }
                                                str15 = str10;
                                                str16 = Emoji.replaceEmoji(str15, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                if (i14 == 3) {
                                                }
                                                StaticLayout generateStaticLayout322 = generateStaticLayout(str16, Theme.chat_replyNamePaint, i12, (i12 - dp54) - dp55, i14, 1);
                                                this.authorLayout = generateStaticLayout322;
                                                i14 -= generateStaticLayout322.getLineCount();
                                                StaticLayout staticLayout17222 = this.authorLayout;
                                                int lineBottom3222 = staticLayout17222.getLineBottom(staticLayout17222.getLineCount() - 1);
                                                this.linkPreviewHeight += lineBottom3222;
                                                this.totalHeight += lineBottom3222;
                                                max4 = (int) Math.max(this.authorLayout.getLineLeft(0), 0.0f);
                                                this.authorX = -max4;
                                                if (max4 == 0) {
                                                }
                                                int i239222 = width3 + dp3;
                                                max = Math.max(max, i239222);
                                                i15 = Math.max(i15, i239222);
                                                if (str3 != null) {
                                                }
                                                i24 = i12;
                                                if (z12) {
                                                    this.isSmallImage = false;
                                                    z18 = false;
                                                    if (!z18) {
                                                    }
                                                    if (tLRPC$Document5 == null) {
                                                    }
                                                }
                                                z18 = z12;
                                                if (!z18) {
                                                }
                                                if (tLRPC$Document5 == null) {
                                                }
                                            }
                                            z16 = false;
                                            if (str3 != null) {
                                            }
                                            i24 = i12;
                                            if (z12) {
                                            }
                                            z18 = z12;
                                            if (!z18) {
                                            }
                                            if (tLRPC$Document5 == null) {
                                            }
                                        } else {
                                            this.photoImage.setImageBitmap((Drawable) null);
                                            calcBackgroundWidth(i223, extraTimeX2, max);
                                            if (this.blurredPhotoImage.getBitmap() != null) {
                                                this.blurredPhotoImage.getBitmap().recycle();
                                                this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                                            }
                                            messageObject4 = messageObject25;
                                            i35 = 4;
                                            i36 = 3;
                                            i58 = 0;
                                            f3 = 1.0f;
                                            z19 = true;
                                        }
                                        z24 = z19;
                                        c = 0;
                                        r15 = i58;
                                    }
                                }
                                int max14 = Math.max(i223, messageObject25.lastLineWidth) + AndroidUtilities.dp(31.0f);
                                this.backgroundWidth = max14;
                                this.backgroundWidth = Math.max(max14, this.timeWidth + AndroidUtilities.dp(31.0f));
                                this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                if (messageObject.isRoundVideo()) {
                                }
                                setMessageObjectInternal(messageObject);
                                if (!this.hasGamePreview) {
                                    this.backgroundWidth = messageObject25.textWidth + (getExtraTextX() * 2) + ((!this.hasGamePreview && !this.hasInvoicePreview) ? 0 : AndroidUtilities.dp(10.0f));
                                    this.totalHeight = messageObject25.textHeight + AndroidUtilities.dp(19.5f) + this.namesOffset;
                                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                    if (!reactionsLayoutInBubble.isSmall) {
                                    }
                                    if (this.drawPinnedTop) {
                                    }
                                    int max92 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                    messageTopicButton = this.topicButton;
                                    if (messageTopicButton != null) {
                                    }
                                    max = Math.max(max92, this.replyTextWidth);
                                    if (this.commentLayout != null) {
                                        max = Math.max(max, this.totalCommentWidth);
                                    }
                                    if (this.hasLinkPreview) {
                                        this.photoImage.setImageBitmap((Drawable) null);
                                        calcBackgroundWidth(i223, extraTimeX2, max);
                                        if (this.blurredPhotoImage.getBitmap() != null) {
                                        }
                                        messageObject4 = messageObject25;
                                        i35 = 4;
                                        i36 = 3;
                                        i58 = 0;
                                        f3 = 1.0f;
                                        z19 = true;
                                        z24 = z19;
                                        c = 0;
                                        r15 = i58;
                                    }
                                    if (!AndroidUtilities.isTablet()) {
                                    }
                                    int i2282 = minTabletSide2 - dp2;
                                    if (this.drawSideButton != 0) {
                                    }
                                    int dp542 = AndroidUtilities.dp(48.0f);
                                    int dp552 = AndroidUtilities.dp(10.0f);
                                    if (this.hasLinkPreview) {
                                    }
                                    i11 = this.drawInstantViewType;
                                    if (i11 == 11) {
                                    }
                                    str8 = string;
                                    if (this.hasInvoicePreview) {
                                    }
                                    i12 = i2282 - dp3;
                                    messageObject2 = this.currentMessageObject;
                                    String str3322 = str6;
                                    if (messageObject2.photoThumbs == null) {
                                    }
                                    if (str8 != null) {
                                    }
                                    if (str7 != null) {
                                    }
                                    if (str10 != null) {
                                    }
                                    z16 = false;
                                    if (str3 != null) {
                                    }
                                    i24 = i12;
                                    if (z12) {
                                    }
                                    z18 = z12;
                                    if (!z18) {
                                    }
                                    if (tLRPC$Document5 == null) {
                                    }
                                    z24 = z19;
                                    c = 0;
                                    r15 = i58;
                                }
                                this.backgroundWidth = messageObject25.textWidth + (getExtraTextX() * 2) + ((!this.hasGamePreview && !this.hasInvoicePreview) ? 0 : AndroidUtilities.dp(10.0f));
                                this.totalHeight = messageObject25.textHeight + AndroidUtilities.dp(19.5f) + this.namesOffset;
                                reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble.isSmall) {
                                }
                                if (this.drawPinnedTop) {
                                }
                                int max922 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                                messageTopicButton = this.topicButton;
                                if (messageTopicButton != null) {
                                }
                                max = Math.max(max922, this.replyTextWidth);
                                if (this.commentLayout != null) {
                                }
                                if (this.hasLinkPreview) {
                                }
                                if (!AndroidUtilities.isTablet()) {
                                }
                                int i22822 = minTabletSide2 - dp2;
                                if (this.drawSideButton != 0) {
                                }
                                int dp5422 = AndroidUtilities.dp(48.0f);
                                int dp5522 = AndroidUtilities.dp(10.0f);
                                if (this.hasLinkPreview) {
                                }
                                i11 = this.drawInstantViewType;
                                if (i11 == 11) {
                                }
                                str8 = string;
                                if (this.hasInvoicePreview) {
                                }
                                i12 = i22822 - dp3;
                                messageObject2 = this.currentMessageObject;
                                String str33222 = str6;
                                if (messageObject2.photoThumbs == null) {
                                }
                                if (str8 != null) {
                                }
                                if (str7 != null) {
                                }
                                if (str10 != null) {
                                }
                                z16 = false;
                                if (str3 != null) {
                                }
                                i24 = i12;
                                if (z12) {
                                }
                                z18 = z12;
                                if (!z18) {
                                }
                                if (tLRPC$Document5 == null) {
                                }
                                z24 = z19;
                                c = 0;
                                r15 = i58;
                            }
                        }
                    } else if ("telegram_livestream".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 11;
                    } else if ("telegram_voicechat".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 9;
                    } else if ("telegram_channel".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 1;
                    } else if ("telegram_user".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 13;
                    } else if ("telegram_megagroup".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 2;
                    } else if ("telegram_message".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 3;
                    } else if ("telegram_theme".equals(str27)) {
                        int size12 = MessageObject.getMedia(messageObject25.messageOwner).webpage.attributes.size();
                        TLRPC$Document tLRPC$Document11 = null;
                        int i272 = 0;
                        while (true) {
                            if (i272 >= size12) {
                                tLRPC$Document = tLRPC$Document11;
                                tLRPC$ThemeSettings = null;
                                break;
                            }
                            TLRPC$TL_webPageAttributeTheme tLRPC$TL_webPageAttributeTheme = MessageObject.getMedia(messageObject25.messageOwner).webpage.attributes.get(i272);
                            ArrayList<TLRPC$Document> arrayList8 = tLRPC$TL_webPageAttributeTheme.documents;
                            int size13 = arrayList8.size();
                            int i273 = 0;
                            while (true) {
                                if (i273 >= size13) {
                                    break;
                                }
                                TLRPC$Document tLRPC$Document12 = arrayList8.get(i273);
                                if ("application/x-tgtheme-android".equals(tLRPC$Document12.mime_type)) {
                                    this.drawInstantView = true;
                                    this.drawInstantViewType = 7;
                                    tLRPC$Document11 = tLRPC$Document12;
                                    break;
                                }
                                i273++;
                            }
                            if (this.drawInstantView) {
                                tLRPC$Document = tLRPC$Document11;
                                tLRPC$ThemeSettings = null;
                                break;
                            }
                            TLRPC$ThemeSettings tLRPC$ThemeSettings3 = tLRPC$TL_webPageAttributeTheme.settings;
                            if (tLRPC$ThemeSettings3 != null) {
                                this.drawInstantView = true;
                                this.drawInstantViewType = 7;
                                tLRPC$ThemeSettings = tLRPC$ThemeSettings3;
                                tLRPC$Document = tLRPC$Document11;
                                break;
                            }
                            i272++;
                        }
                        tLRPC$Document2 = tLRPC$Document;
                        tLRPC$ThemeSettings2 = tLRPC$ThemeSettings;
                        z10 = false;
                        this.backgroundWidth = i223;
                        if (!this.hasLinkPreview) {
                            i59 = messageObject25.lastLineWidth;
                            if (i223 - i59 >= extraTimeX2) {
                            }
                        }
                        int max142 = Math.max(i223, messageObject25.lastLineWidth) + AndroidUtilities.dp(31.0f);
                        this.backgroundWidth = max142;
                        this.backgroundWidth = Math.max(max142, this.timeWidth + AndroidUtilities.dp(31.0f));
                        this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                        if (messageObject.isRoundVideo()) {
                        }
                        setMessageObjectInternal(messageObject);
                        this.backgroundWidth = messageObject25.textWidth + (getExtraTextX() * 2) + ((!this.hasGamePreview && !this.hasInvoicePreview) ? 0 : AndroidUtilities.dp(10.0f));
                        this.totalHeight = messageObject25.textHeight + AndroidUtilities.dp(19.5f) + this.namesOffset;
                        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble.isSmall) {
                        }
                        if (this.drawPinnedTop) {
                        }
                        int max9222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                        messageTopicButton = this.topicButton;
                        if (messageTopicButton != null) {
                        }
                        max = Math.max(max9222, this.replyTextWidth);
                        if (this.commentLayout != null) {
                        }
                        if (this.hasLinkPreview) {
                        }
                        if (!AndroidUtilities.isTablet()) {
                        }
                        int i228222 = minTabletSide2 - dp2;
                        if (this.drawSideButton != 0) {
                        }
                        int dp54222 = AndroidUtilities.dp(48.0f);
                        int dp55222 = AndroidUtilities.dp(10.0f);
                        if (this.hasLinkPreview) {
                        }
                        i11 = this.drawInstantViewType;
                        if (i11 == 11) {
                        }
                        str8 = string;
                        if (this.hasInvoicePreview) {
                        }
                        i12 = i228222 - dp3;
                        messageObject2 = this.currentMessageObject;
                        String str332222 = str6;
                        if (messageObject2.photoThumbs == null) {
                        }
                        if (str8 != null) {
                        }
                        if (str7 != null) {
                        }
                        if (str10 != null) {
                        }
                        z16 = false;
                        if (str3 != null) {
                        }
                        i24 = i12;
                        if (z12) {
                        }
                        z18 = z12;
                        if (!z18) {
                        }
                        if (tLRPC$Document5 == null) {
                        }
                        z24 = z19;
                        c = 0;
                        r15 = i58;
                    } else if ("telegram_background".equals(str27)) {
                        this.drawInstantView = true;
                        this.drawInstantViewType = 6;
                        try {
                            Uri parse = Uri.parse(MessageObject.getMedia(messageObject25.messageOwner).webpage.url);
                            this.imageBackgroundIntensity = Utilities.parseInt((CharSequence) parse.getQueryParameter("intensity")).intValue();
                            String queryParameter = parse.getQueryParameter("bg_color");
                            String queryParameter2 = parse.getQueryParameter("rotation");
                            if (queryParameter2 != null) {
                                this.imageBackgroundGradientRotation = Utilities.parseInt((CharSequence) queryParameter2).intValue();
                            }
                            if (TextUtils.isEmpty(queryParameter)) {
                                TLRPC$Document document5 = messageObject.getDocument();
                                if (document5 != null && "image/png".equals(document5.mime_type)) {
                                    queryParameter = "ffffff";
                                }
                                if (this.imageBackgroundIntensity == 0.0f) {
                                    try {
                                        this.imageBackgroundIntensity = 50.0f;
                                        if (queryParameter == null) {
                                            int parseInt = Integer.parseInt(queryParameter.substring(0, 6), 16) | (-16777216);
                                            this.imageBackgroundColor = parseInt;
                                            if (queryParameter.length() >= 13 && AndroidUtilities.isValidWallChar(queryParameter.charAt(6))) {
                                                int parseInt2 = Integer.parseInt(queryParameter.substring(7, 13), 16) | (-16777216);
                                                this.imageBackgroundGradientColor1 = parseInt2;
                                                parseInt = AndroidUtilities.getAverageColor(this.imageBackgroundColor, parseInt2);
                                            }
                                            if (queryParameter.length() >= 20 && AndroidUtilities.isValidWallChar(queryParameter.charAt(13))) {
                                                this.imageBackgroundGradientColor2 = Integer.parseInt(queryParameter.substring(14, 20), 16) | (-16777216);
                                            }
                                            if (queryParameter.length() == 27 && AndroidUtilities.isValidWallChar(queryParameter.charAt(20))) {
                                                this.imageBackgroundGradientColor3 = Integer.parseInt(queryParameter.substring(21), 16) | (-16777216);
                                            }
                                            if (this.imageBackgroundIntensity < 0.0f) {
                                                this.imageBackgroundSideColor = -15658735;
                                            } else {
                                                this.imageBackgroundSideColor = AndroidUtilities.getPatternSideColor(parseInt);
                                            }
                                            this.photoImage.setColorFilter(new PorterDuffColorFilter(AndroidUtilities.getPatternColor(parseInt), PorterDuff.Mode.SRC_IN));
                                            this.photoImage.setAlpha(Math.abs(this.imageBackgroundIntensity) / 100.0f);
                                        } else {
                                            String lastPathSegment = parse.getLastPathSegment();
                                            if (lastPathSegment != null && lastPathSegment.length() >= 6) {
                                                this.imageBackgroundColor = Integer.parseInt(lastPathSegment.substring(0, 6), 16) | (-16777216);
                                                if (lastPathSegment.length() >= 13 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(6))) {
                                                    this.imageBackgroundGradientColor1 = Integer.parseInt(lastPathSegment.substring(7, 13), 16) | (-16777216);
                                                }
                                                if (lastPathSegment.length() >= 20 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(13))) {
                                                    this.imageBackgroundGradientColor2 = Integer.parseInt(lastPathSegment.substring(14, 20), 16) | (-16777216);
                                                }
                                                if (lastPathSegment.length() == 27 && AndroidUtilities.isValidWallChar(lastPathSegment.charAt(20))) {
                                                    this.imageBackgroundGradientColor3 = Integer.parseInt(lastPathSegment.substring(21), 16) | (-16777216);
                                                }
                                                TLRPC$TL_photoSizeEmpty tLRPC$TL_photoSizeEmpty = new TLRPC$TL_photoSizeEmpty();
                                                this.currentPhotoObject = tLRPC$TL_photoSizeEmpty;
                                                tLRPC$TL_photoSizeEmpty.type = "s";
                                                tLRPC$TL_photoSizeEmpty.w = AndroidUtilities.dp(180.0f);
                                                this.currentPhotoObject.h = AndroidUtilities.dp(150.0f);
                                                this.currentPhotoObject.location = new TLRPC$TL_fileLocationUnavailable();
                                            }
                                        }
                                    } catch (Exception unused4) {
                                    }
                                }
                            }
                            if (queryParameter == null) {
                            }
                        } catch (Exception unused5) {
                        }
                    }
                    z10 = false;
                    tLRPC$Document2 = null;
                    tLRPC$ThemeSettings2 = null;
                    this.backgroundWidth = i223;
                    if (!this.hasLinkPreview) {
                    }
                    int max1422 = Math.max(i223, messageObject25.lastLineWidth) + AndroidUtilities.dp(31.0f);
                    this.backgroundWidth = max1422;
                    this.backgroundWidth = Math.max(max1422, this.timeWidth + AndroidUtilities.dp(31.0f));
                    this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                    if (messageObject.isRoundVideo()) {
                    }
                    setMessageObjectInternal(messageObject);
                    this.backgroundWidth = messageObject25.textWidth + (getExtraTextX() * 2) + ((!this.hasGamePreview && !this.hasInvoicePreview) ? 0 : AndroidUtilities.dp(10.0f));
                    this.totalHeight = messageObject25.textHeight + AndroidUtilities.dp(19.5f) + this.namesOffset;
                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (!reactionsLayoutInBubble.isSmall) {
                    }
                    if (this.drawPinnedTop) {
                    }
                    int max92222 = Math.max(Math.max(Math.max(this.backgroundWidth, this.nameWidth), this.forwardedNameWidth), this.replyNameWidth);
                    messageTopicButton = this.topicButton;
                    if (messageTopicButton != null) {
                    }
                    max = Math.max(max92222, this.replyTextWidth);
                    if (this.commentLayout != null) {
                    }
                    if (this.hasLinkPreview) {
                    }
                    if (!AndroidUtilities.isTablet()) {
                    }
                    int i2282222 = minTabletSide2 - dp2;
                    if (this.drawSideButton != 0) {
                    }
                    int dp542222 = AndroidUtilities.dp(48.0f);
                    int dp552222 = AndroidUtilities.dp(10.0f);
                    if (this.hasLinkPreview) {
                    }
                    i11 = this.drawInstantViewType;
                    if (i11 == 11) {
                    }
                    str8 = string;
                    if (this.hasInvoicePreview) {
                    }
                    i12 = i2282222 - dp3;
                    messageObject2 = this.currentMessageObject;
                    String str3322222 = str6;
                    if (messageObject2.photoThumbs == null) {
                    }
                    if (str8 != null) {
                    }
                    if (str7 != null) {
                    }
                    if (str10 != null) {
                    }
                    z16 = false;
                    if (str3 != null) {
                    }
                    i24 = i12;
                    if (z12) {
                    }
                    z18 = z12;
                    if (!z18) {
                    }
                    if (tLRPC$Document5 == null) {
                    }
                    z24 = z19;
                    c = 0;
                    r15 = i58;
                }
                if ((this.currentPosition != null && !this.currentMessageObject.isMusic() && !this.currentMessageObject.isDocument()) || messageObject.isAnyKindOfSticker() || this.addedCaptionHeight != 0) {
                    i60 = 5;
                } else {
                    if (!messageObject4.isRestrictedMessage && this.captionLayout == null && (messageObject4.caption != null || messageObject.isVoiceTranscriptionOpen())) {
                        CharSequence voiceTranscription = !messageObject.isVoiceTranscriptionOpen() ? messageObject4.caption : messageObject.getVoiceTranscription();
                        this.currentCaption = voiceTranscription;
                        if (voiceTranscription != null && !TextUtils.isEmpty(messageObject4.messageOwner.voiceTranscription) && this.currentMessageObject.isVoiceTranscriptionOpen() && !this.currentMessageObject.messageOwner.voiceTranscriptionFinal) {
                            String str36 = ((Object) this.currentCaption) + " ";
                            this.currentCaption = str36;
                            if (!(str36 instanceof Spannable)) {
                                this.currentCaption = new SpannableString(this.currentCaption);
                            }
                            ((SpannableString) this.currentCaption).setSpan(new TranscribeButton.LoadingPointsSpan(), this.currentCaption.length() - 1, this.currentCaption.length(), 33);
                        }
                        try {
                            int i274 = this.backgroundWidth;
                            try {
                                if (this.currentMessageObject.type != 2 && !this.isRoundVideo) {
                                    if (this.drawSideButton != 0 && this.isRoundVideo) {
                                        i274 -= AndroidUtilities.dp(24.0f);
                                    }
                                    i60 = 5;
                                    int dp65 = (i274 - AndroidUtilities.dp(31 + (this.currentMessageObject.type != 5 ? 0 : 10))) - (getExtraTextX() * 2);
                                    if (Build.VERSION.SDK_INT < 24) {
                                        CharSequence charSequence6 = this.currentCaption;
                                        int length2 = charSequence6.length();
                                        TextPaint textPaint2 = Theme.chat_msgTextPaint;
                                        int i275 = r15 == true ? 1 : 0;
                                        int i276 = r15 == true ? 1 : 0;
                                        int i277 = r15 == true ? 1 : 0;
                                        int i278 = r15 == true ? 1 : 0;
                                        int i279 = r15 == true ? 1 : 0;
                                        int i280 = r15 == true ? 1 : 0;
                                        this.captionLayout = StaticLayout.Builder.obtain(charSequence6, i275, length2, textPaint2, dp65).setBreakStrategy(1).setHyphenationFrequency(r15).setAlignment(Layout.Alignment.ALIGN_NORMAL).build();
                                    } else {
                                        this.captionLayout = new StaticLayout(this.currentCaption, Theme.chat_msgTextPaint, dp65, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    }
                                    updateSeekBarWaveformWidth(null);
                                    updateCaptionSpoilers();
                                }
                                int dp652 = (i274 - AndroidUtilities.dp(31 + (this.currentMessageObject.type != 5 ? 0 : 10))) - (getExtraTextX() * 2);
                                if (Build.VERSION.SDK_INT < 24) {
                                }
                                updateSeekBarWaveformWidth(null);
                                updateCaptionSpoilers();
                            } catch (Exception e28) {
                                e = e28;
                                FileLog.e(e);
                                if (this.captionLayout == null) {
                                }
                                try {
                                    if (messageObject.isVoiceTranscriptionOpen()) {
                                        float dp66 = ((this.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                                        float f38 = dp66;
                                        while (i61 < this.captionLayout.getLineCount()) {
                                        }
                                        this.backgroundWidth = (int) (this.backgroundWidth + (f38 - dp66));
                                    }
                                    int dp67 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                                    staticLayout2 = this.captionLayout;
                                } catch (Exception e29) {
                                    FileLog.e(e29);
                                }
                                if (staticLayout2 != null) {
                                    StaticLayout staticLayout22 = this.captionLayout;
                                    float lineWidth2 = staticLayout22.getLineWidth(staticLayout22.getLineCount() - 1);
                                    StaticLayout staticLayout23 = this.captionLayout;
                                    valueOf = Float.valueOf(lineWidth2 + staticLayout23.getLineLeft(staticLayout23.getLineCount() - 1));
                                    if (valueOf != null) {
                                    }
                                    groupedMessagePosition3 = this.currentPosition;
                                    if (groupedMessagePosition3 != null) {
                                    }
                                    int i2142222222222222222 = this.widthBeforeNewTimeLine;
                                    i63 = -1;
                                    messageObject5 = this.currentMessageObject;
                                    if (messageObject5.eventId == 0) {
                                    }
                                    f4 = 0.0f;
                                    if (messageObject.isSponsored()) {
                                    }
                                    this.botButtons.clear();
                                    if (z45) {
                                    }
                                    if (!messageObject4.isRestrictedMessage) {
                                    }
                                    this.substractBackgroundHeight = r15;
                                    this.keyboardHeight = r15;
                                    if (this.drawCommentButton) {
                                    }
                                    z26 = this.drawPinnedBottom;
                                    if (z26) {
                                    }
                                    if (z26) {
                                    }
                                    if (!this.mediaBackground) {
                                    }
                                    if (messageObject4.type != 19) {
                                    }
                                    if (!this.drawPhotoImage) {
                                    }
                                    if (this.documentAttachType != i60) {
                                    }
                                    calculateUnlockXY();
                                    if (z24) {
                                    }
                                    updateAnimatedEmojis();
                                    z43 = r15;
                                    if (z45) {
                                    }
                                    transcribeButton = this.transcribeButton;
                                    if (transcribeButton != null) {
                                    }
                                    updateWaveform();
                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                    if (!this.currentMessageObject.loadingCancelled) {
                                    }
                                    chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                    }
                                    this.accessibilityVirtualViewBounds.clear();
                                    this.transitionParams.updatePhotoImageX = true;
                                    updateFlagSecure();
                                }
                                if (this.currentMessageObject.type == 2) {
                                }
                                if (valueOf != null) {
                                }
                                groupedMessagePosition3 = this.currentPosition;
                                if (groupedMessagePosition3 != null) {
                                }
                                int i21422222222222222222 = this.widthBeforeNewTimeLine;
                                i63 = -1;
                                messageObject5 = this.currentMessageObject;
                                if (messageObject5.eventId == 0) {
                                }
                                f4 = 0.0f;
                                if (messageObject.isSponsored()) {
                                }
                                this.botButtons.clear();
                                if (z45) {
                                }
                                if (!messageObject4.isRestrictedMessage) {
                                }
                                this.substractBackgroundHeight = r15;
                                this.keyboardHeight = r15;
                                if (this.drawCommentButton) {
                                }
                                z26 = this.drawPinnedBottom;
                                if (z26) {
                                }
                                if (z26) {
                                }
                                if (!this.mediaBackground) {
                                }
                                if (messageObject4.type != 19) {
                                }
                                if (!this.drawPhotoImage) {
                                }
                                if (this.documentAttachType != i60) {
                                }
                                calculateUnlockXY();
                                if (z24) {
                                }
                                updateAnimatedEmojis();
                                z43 = r15;
                                if (z45) {
                                }
                                transcribeButton = this.transcribeButton;
                                if (transcribeButton != null) {
                                }
                                updateWaveform();
                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                if (!this.currentMessageObject.loadingCancelled) {
                                }
                                chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                }
                                this.accessibilityVirtualViewBounds.clear();
                                this.transitionParams.updatePhotoImageX = true;
                                updateFlagSecure();
                            }
                            if (messageObject.isVoiceTranscriptionOpen()) {
                                if (AndroidUtilities.isTablet()) {
                                    minTabletSide5 = AndroidUtilities.getMinTabletSide();
                                    if (!z8) {
                                        f8 = 50.0f;
                                    }
                                    dp6 = AndroidUtilities.dp(f8);
                                } else {
                                    minTabletSide5 = getParentWidth();
                                    if (!z8) {
                                        f8 = 50.0f;
                                    }
                                    dp6 = AndroidUtilities.dp(f8);
                                }
                                i274 = minTabletSide5 - dp6;
                            }
                            if (this.drawSideButton != 0) {
                                i274 -= AndroidUtilities.dp(24.0f);
                            }
                            i60 = 5;
                        } catch (Exception e30) {
                            e = e30;
                            i60 = 5;
                        }
                    } else {
                        i60 = 5;
                    }
                    if (this.captionLayout == null || (i62 = this.currentMessageObject.type) == 2 || i62 == i60) {
                        if (messageObject.isVoiceTranscriptionOpen() && this.captionLayout != null) {
                            float dp662 = ((this.backgroundWidth - AndroidUtilities.dp(31.0f)) - AndroidUtilities.dp(10.0f)) - (getExtraTextX() * 2);
                            float f382 = dp662;
                            for (i61 = 0; i61 < this.captionLayout.getLineCount(); i61++) {
                                float lineWidth3 = this.captionLayout.getLineWidth(i61);
                                if (lineWidth3 > f382) {
                                    f382 = lineWidth3;
                                }
                            }
                            this.backgroundWidth = (int) (this.backgroundWidth + (f382 - dp662));
                        }
                        int dp672 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                        staticLayout2 = this.captionLayout;
                        if (staticLayout2 != null && staticLayout2.getLineCount() > 0) {
                            StaticLayout staticLayout222 = this.captionLayout;
                            float lineWidth22 = staticLayout222.getLineWidth(staticLayout222.getLineCount() - 1);
                            StaticLayout staticLayout232 = this.captionLayout;
                            valueOf = Float.valueOf(lineWidth22 + staticLayout232.getLineLeft(staticLayout232.getLineCount() - 1));
                            if (valueOf != null) {
                                StaticLayout staticLayout24 = this.captionLayout;
                                if (staticLayout24 != null) {
                                    this.captionWidth = dp672;
                                    this.captionHeight = staticLayout24.getHeight();
                                }
                                this.totalHeight += this.captionHeight + AndroidUtilities.dp(9.0f);
                                ReactionsLayoutInBubble reactionsLayoutInBubble30 = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble30.isEmpty && !reactionsLayoutInBubble30.isSmall) {
                                }
                                MessageObject.GroupedMessagePosition groupedMessagePosition25 = this.currentPosition;
                                if (groupedMessagePosition25 != null && (groupedMessagePosition25.flags & 8) == 0) {
                                }
                                if ((dp672 - AndroidUtilities.dp(8.0f)) - valueOf.floatValue() < this.timeWidth + (!messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(20.0f)) + getExtraTimeX()) {
                                    this.totalHeight += AndroidUtilities.dp(14.0f);
                                    if (this.captionLayout != null) {
                                        this.captionHeight += AndroidUtilities.dp(14.0f);
                                        c2 = 2;
                                        c = c2;
                                    }
                                }
                                c2 = c;
                                c = c2;
                            }
                        }
                        valueOf = this.currentMessageObject.type == 2 ? null : Float.valueOf(AndroidUtilities.dp(64.0f));
                        if (valueOf != null) {
                        }
                    }
                }
                groupedMessagePosition3 = this.currentPosition;
                if ((groupedMessagePosition3 != null || (groupedMessagePosition3.flags & 8) != 0) && this.captionLayout == null) {
                    int i214222222222222222222 = this.widthBeforeNewTimeLine;
                }
                i63 = -1;
                messageObject5 = this.currentMessageObject;
                if (messageObject5.eventId == 0 || messageObject5.isMediaEmpty() || MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage == null) {
                    f4 = 0.0f;
                } else {
                    int dp68 = this.backgroundWidth - AndroidUtilities.dp(41.0f);
                    this.hasOldCaptionPreview = true;
                    this.linkPreviewHeight = r15;
                    TLRPC$WebPage tLRPC$WebPage = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                    try {
                        int ceil23 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(tLRPC$WebPage.site_name) + f3);
                        this.siteNameWidth = ceil23;
                        ?? staticLayout25 = new StaticLayout(tLRPC$WebPage.site_name, Theme.chat_replyNamePaint, Math.min(ceil23, dp68), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.siteNameLayout = staticLayout25;
                        f4 = 0.0f;
                    } catch (Exception e31) {
                        e = e31;
                        f4 = 0.0f;
                    }
                    try {
                        this.siteNameRtl = staticLayout25.getLineLeft(r15) == 0.0f;
                        StaticLayout staticLayout26 = this.siteNameLayout;
                        int lineBottom5 = staticLayout26.getLineBottom(staticLayout26.getLineCount() - 1);
                        this.linkPreviewHeight += lineBottom5;
                        this.totalHeight += lineBottom5;
                    } catch (Exception e32) {
                        e = e32;
                        FileLog.e(e);
                        this.descriptionX = r15;
                        if (this.linkPreviewHeight != 0) {
                        }
                        StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(tLRPC$WebPage.description, Theme.chat_replyTextPaint, dp68, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(f3), false, TextUtils.TruncateAt.END, dp68, 6);
                        this.descriptionLayout = createStaticLayout;
                        int lineBottom6 = createStaticLayout.getLineBottom(createStaticLayout.getLineCount() - 1);
                        this.linkPreviewHeight += lineBottom6;
                        this.totalHeight += lineBottom6;
                        z25 = false;
                        while (i65 < this.descriptionLayout.getLineCount()) {
                        }
                        if (z25) {
                        }
                        i64 = messageObject4.type;
                        if (i64 != 1) {
                        }
                        this.totalHeight += AndroidUtilities.dp(6.0f);
                        int dp69 = this.totalHeight + AndroidUtilities.dp(17.0f);
                        this.totalHeight = dp69;
                        if (c != 0) {
                        }
                        if (messageObject.isSponsored()) {
                        }
                        this.botButtons.clear();
                        if (z45) {
                        }
                        if (!messageObject4.isRestrictedMessage) {
                        }
                        this.substractBackgroundHeight = r15;
                        this.keyboardHeight = r15;
                        if (this.drawCommentButton) {
                        }
                        z26 = this.drawPinnedBottom;
                        if (z26) {
                        }
                        if (z26) {
                        }
                        if (!this.mediaBackground) {
                        }
                        if (messageObject4.type != 19) {
                        }
                        if (!this.drawPhotoImage) {
                        }
                        if (this.documentAttachType != i60) {
                        }
                        calculateUnlockXY();
                        if (z24) {
                        }
                        updateAnimatedEmojis();
                        z43 = r15;
                        if (z45) {
                        }
                        transcribeButton = this.transcribeButton;
                        if (transcribeButton != null) {
                        }
                        updateWaveform();
                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                        if (!this.currentMessageObject.loadingCancelled) {
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null) {
                        }
                        this.accessibilityVirtualViewBounds.clear();
                        this.transitionParams.updatePhotoImageX = true;
                        updateFlagSecure();
                    }
                    this.descriptionX = r15;
                    if (this.linkPreviewHeight != 0) {
                        this.totalHeight += AndroidUtilities.dp(2.0f);
                    }
                    StaticLayout createStaticLayout2 = StaticLayoutEx.createStaticLayout(tLRPC$WebPage.description, Theme.chat_replyTextPaint, dp68, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(f3), false, TextUtils.TruncateAt.END, dp68, 6);
                    this.descriptionLayout = createStaticLayout2;
                    int lineBottom62 = createStaticLayout2.getLineBottom(createStaticLayout2.getLineCount() - 1);
                    this.linkPreviewHeight += lineBottom62;
                    this.totalHeight += lineBottom62;
                    z25 = false;
                    for (i65 = 0; i65 < this.descriptionLayout.getLineCount(); i65++) {
                        int ceil24 = (int) Math.ceil(this.descriptionLayout.getLineLeft(i65));
                        if (ceil24 == 0) {
                            z25 = true;
                        } else {
                            int i281 = this.descriptionX;
                            if (i281 == 0) {
                                this.descriptionX = -ceil24;
                            } else {
                                this.descriptionX = Math.max(i281, -ceil24);
                            }
                        }
                    }
                    if (z25) {
                        this.descriptionX = r15;
                    }
                    i64 = messageObject4.type;
                    if (i64 != 1 || i64 == i36 || i64 == 20) {
                        this.totalHeight += AndroidUtilities.dp(6.0f);
                    }
                    int dp692 = this.totalHeight + AndroidUtilities.dp(17.0f);
                    this.totalHeight = dp692;
                    if (c != 0) {
                        this.totalHeight = dp692 - AndroidUtilities.dp(14.0f);
                        if (c == 2) {
                            this.captionHeight -= AndroidUtilities.dp(14.0f);
                        }
                    }
                }
                if (messageObject.isSponsored()) {
                    this.drawInstantView = true;
                    if (messageObject4.sponsoredChannelPost != 0) {
                        this.drawInstantViewType = 12;
                    } else {
                        this.drawInstantViewType = 1;
                    }
                    long peerId2 = MessageObject.getPeerId(messageObject4.messageOwner.from_id);
                    if (peerId2 > 0 && (user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerId2))) != null && user2.bot) {
                        this.drawInstantViewType = 10;
                    }
                    createInstantViewButton();
                }
                this.botButtons.clear();
                if (z45) {
                    this.botButtonsByData.clear();
                    this.botButtonsByPosition.clear();
                    this.botButtonsLayout = null;
                }
                if (!messageObject4.isRestrictedMessage && this.currentPosition == null && (messageObject4.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && !messageObject.hasExtendedMedia()) {
                    TLRPC$ReplyMarkup tLRPC$ReplyMarkup = messageObject4.messageOwner.reply_markup;
                    int size14 = tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup ? 1 : tLRPC$ReplyMarkup.rows.size();
                    int dp70 = (AndroidUtilities.dp(48.0f) * size14) + AndroidUtilities.dp(f3);
                    this.keyboardHeight = dp70;
                    this.substractBackgroundHeight = dp70;
                    dp8 = this.backgroundWidth - AndroidUtilities.dp(this.mediaBackground ? 9.0f : 0.0f);
                    this.widthForButtons = dp8;
                    if (messageObject4.wantedBotKeyboardWidth > dp8) {
                        int i282 = -AndroidUtilities.dp(!z8 ? 10.0f : 62.0f);
                        if (AndroidUtilities.isTablet()) {
                            minTabletSide6 = AndroidUtilities.getMinTabletSide();
                        } else {
                            minTabletSide6 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y) - AndroidUtilities.dp(5.0f);
                        }
                        this.widthForButtons = Math.max(this.backgroundWidth, Math.min(messageObject4.wantedBotKeyboardWidth, i282 + minTabletSide6));
                    }
                    HashMap hashMap3 = new HashMap(this.botButtonsByData);
                    sb = messageObject4.botButtonsLayout;
                    if (sb != null && (str17 = this.botButtonsLayout) != null && str17.equals(sb.toString())) {
                        hashMap = new HashMap(this.botButtonsByPosition);
                    } else {
                        sb2 = messageObject4.botButtonsLayout;
                        if (sb2 != null) {
                            this.botButtonsLayout = sb2.toString();
                        }
                        hashMap = null;
                    }
                    this.botButtonsByData.clear();
                    if (!(messageObject4.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                        i68 = 0;
                    } else {
                        int i283 = 0;
                        int i284 = 0;
                        while (i284 < size14) {
                            TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject4.messageOwner.reply_markup.rows.get(i284);
                            int size15 = tLRPC$TL_keyboardButtonRow.buttons.size();
                            if (size15 != 0) {
                                int dp71 = ((this.widthForButtons - (AndroidUtilities.dp(5.0f) * (size15 - 1))) - AndroidUtilities.dp(2.0f)) / size15;
                                int i285 = 0;
                                while (i285 < tLRPC$TL_keyboardButtonRow.buttons.size()) {
                                    BotButton botButton2 = new BotButton();
                                    botButton2.button = tLRPC$TL_keyboardButtonRow.buttons.get(i285);
                                    String bytesToHex = Utilities.bytesToHex(botButton2.button.data);
                                    String str37 = i284 + "" + i285;
                                    if (hashMap != null) {
                                        botButton = (BotButton) hashMap.get(str37);
                                    } else {
                                        botButton = (BotButton) hashMap3.get(bytesToHex);
                                    }
                                    if (botButton == null) {
                                        i69 = size14;
                                        hashMap2 = hashMap3;
                                        botButton2.lastUpdateTime = System.currentTimeMillis();
                                    } else {
                                        i69 = size14;
                                        hashMap2 = hashMap3;
                                        botButton2.progressAlpha = botButton.progressAlpha;
                                        botButton2.angle = botButton.angle;
                                        botButton2.lastUpdateTime = botButton.lastUpdateTime;
                                    }
                                    this.botButtonsByData.put(bytesToHex, botButton2);
                                    this.botButtonsByPosition.put(str37, botButton2);
                                    botButton2.x = (AndroidUtilities.dp(5.0f) + dp71) * i285;
                                    botButton2.y = (AndroidUtilities.dp(48.0f) * i284) + AndroidUtilities.dp(5.0f);
                                    botButton2.width = dp71;
                                    botButton2.height = AndroidUtilities.dp(44.0f);
                                    TextPaint textPaint3 = (TextPaint) getThemedPaint("paintChatBotButton");
                                    if ((botButton2.button instanceof TLRPC$TL_keyboardButtonBuy) && (MessageObject.getMedia(messageObject4.messageOwner).flags & i35) != 0) {
                                        ellipsize = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt);
                                    } else {
                                        ellipsize = TextUtils.ellipsize(Emoji.replaceEmoji(botButton2.button.text != null ? botButton2.button.text : "", textPaint3.getFontMetricsInt(), AndroidUtilities.dp(15.0f), r15), textPaint3, dp71 - AndroidUtilities.dp(10.0f), TextUtils.TruncateAt.END);
                                    }
                                    botButton2.title = new StaticLayout(ellipsize, textPaint3, dp71 - AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                                    this.botButtons.add(botButton2);
                                    if (i285 == tLRPC$TL_keyboardButtonRow.buttons.size() - 1) {
                                        i283 = Math.max(i283, botButton2.x + botButton2.width);
                                    }
                                    if (messageObject.isFromUser() && (botButton2.button instanceof TLRPC$TL_keyboardButtonUrl)) {
                                        try {
                                            Uri parse2 = Uri.parse(botButton2.button.url);
                                            String lowerCase2 = parse2.getHost().toLowerCase();
                                            if (parse2.getQueryParameter("startgroup") != null) {
                                                if (!"http".equals(parse2.getScheme()) && !"https".equals(parse2.getScheme())) {
                                                    if ("tg".equals(parse2.getScheme())) {
                                                        if (botButton2.button.url.startsWith("tg:resolve")) {
                                                        }
                                                        z27 = true;
                                                        botButton2.isInviteButton = z27;
                                                    }
                                                }
                                                if (!"t.me".equals(lowerCase2)) {
                                                    if (!"telegram.me".equals(lowerCase2)) {
                                                        if ("telegram.dog".equals(lowerCase2)) {
                                                        }
                                                        if ("tg".equals(parse2.getScheme())) {
                                                        }
                                                    }
                                                }
                                                z27 = true;
                                                botButton2.isInviteButton = z27;
                                            }
                                            z27 = false;
                                            botButton2.isInviteButton = z27;
                                        } catch (Exception unused6) {
                                        }
                                    }
                                    i285++;
                                    size14 = i69;
                                    hashMap3 = hashMap2;
                                }
                            }
                            i284++;
                            size14 = size14;
                            hashMap3 = hashMap3;
                            i60 = 5;
                            i63 = -1;
                            f4 = 0.0f;
                            i36 = 3;
                        }
                        i68 = i283;
                    }
                    this.widthForButtons = i68;
                } else {
                    this.substractBackgroundHeight = r15;
                    this.keyboardHeight = r15;
                }
                if (this.drawCommentButton) {
                    this.totalHeight += AndroidUtilities.dp(!shouldDrawTimeOnMedia() ? 43.0f : 41.3f);
                    createSelectorDrawable(1);
                }
                z26 = this.drawPinnedBottom;
                if (z26 && this.drawPinnedTop) {
                    this.totalHeight -= AndroidUtilities.dp(2.0f);
                } else if (z26) {
                    this.totalHeight -= AndroidUtilities.dp(f3);
                } else if (this.drawPinnedTop && this.pinnedBottom && (groupedMessagePosition4 = this.currentPosition) != null && groupedMessagePosition4.siblingHeights == null) {
                    this.totalHeight -= AndroidUtilities.dp(f3);
                }
                if (!this.mediaBackground) {
                    if (messageObject4.type == 0) {
                        this.totalHeight -= AndroidUtilities.dp(2.0f);
                    }
                    if (this.drawPinnedBottom) {
                        this.totalHeight -= AndroidUtilities.dp(f3);
                    }
                    if (this.drawPinnedTop) {
                        this.totalHeight -= AndroidUtilities.dp(f3);
                    }
                }
                if (messageObject4.type != 19) {
                    if (messageObject.isAnyKindOfSticker() && this.totalHeight < AndroidUtilities.dp(70.0f)) {
                        int dp72 = AndroidUtilities.dp(70.0f);
                        int i286 = this.totalHeight;
                        int i287 = dp72 - i286;
                        this.additionalTimeOffsetY = i287;
                        this.totalHeight = i286 + i287;
                    } else if (messageObject.isAnimatedEmoji()) {
                        this.additionalTimeOffsetY = AndroidUtilities.dp(16.0f);
                        this.totalHeight += AndroidUtilities.dp(16.0f);
                    }
                }
                if (!this.drawPhotoImage) {
                    r2 = 0;
                } else {
                    r2 = 0;
                    r2 = 0;
                    this.photoImage.setImageBitmap((Drawable) null);
                    if (this.blurredPhotoImage.getBitmap() != null) {
                        this.blurredPhotoImage.getBitmap().recycle();
                        this.blurredPhotoImage.setImageBitmap((Bitmap) null);
                    }
                }
                if (this.documentAttachType != i60) {
                    if (MessageObject.isDocumentHasThumb(this.documentAttach)) {
                        this.radialProgress.setImageOverlay(FileLoader.getClosestPhotoSizeWithSize(this.documentAttach.thumbs, 90), this.documentAttach, messageObject4);
                    } else {
                        String artworkUrl = messageObject4.getArtworkUrl(true);
                        if (!TextUtils.isEmpty(artworkUrl)) {
                            this.radialProgress.setImageOverlay(artworkUrl);
                        } else {
                            this.radialProgress.setImageOverlay(r2, r2, r2);
                        }
                    }
                } else {
                    this.radialProgress.setImageOverlay(r2, r2, r2);
                }
                calculateUnlockXY();
                if (z24) {
                    int dp73 = AndroidUtilities.dp(4.0f);
                    int i288 = SharedConfig.bubbleRadius;
                    if (i288 > 2) {
                        dp7 = AndroidUtilities.dp(i288 - 2);
                    } else {
                        dp7 = AndroidUtilities.dp(i288);
                    }
                    int min7 = Math.min(AndroidUtilities.dp(3.0f), dp7);
                    if (dp73 > dp7) {
                        dp73 = dp7;
                    }
                    if (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
                        dp7 = dp73;
                    }
                    StaticLayout[] staticLayoutArr2 = this.forwardedNameLayout;
                    char c5 = r15 == true ? 1 : 0;
                    char c6 = r15 == true ? 1 : 0;
                    char c7 = r15 == true ? 1 : 0;
                    char c8 = r15 == true ? 1 : 0;
                    char c9 = r15 == true ? 1 : 0;
                    char c10 = r15 == true ? 1 : 0;
                    char c11 = r15 == true ? 1 : 0;
                    int i289 = (staticLayoutArr2[c5] == null && this.replyNameLayout == null && !this.drawNameLayout) ? dp7 : dp73;
                    if (this.captionLayout != null || this.drawCommentButton) {
                        dp7 = dp73;
                    }
                    if (this.documentAttachType != 1) {
                        i67 = dp7;
                        i66 = i289;
                    } else {
                        i66 = dp73;
                        i67 = i66;
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition26 = this.currentPosition;
                    if (groupedMessagePosition26 != null && this.currentMessagesGroup != null) {
                        int i290 = groupedMessagePosition26.flags;
                        if ((i290 & 2) == 0) {
                            i66 = dp73;
                            i67 = i66;
                        }
                        if ((i290 & 1) == 0) {
                            dp7 = dp73;
                            i289 = dp7;
                        }
                        if ((i290 & 8) == 0) {
                            dp7 = dp73;
                            i67 = dp7;
                        }
                        if ((i290 & i35) == 0) {
                            i66 = dp73;
                            if (this.pinnedTop) {
                                if (!this.currentMessageObject.isOutOwner()) {
                                    dp73 = min7;
                                } else {
                                    i66 = min7;
                                }
                            }
                            if (this.pinnedBottom) {
                                if (!this.currentMessageObject.isOutOwner()) {
                                    dp7 = min7;
                                } else {
                                    i67 = min7;
                                }
                            }
                            if (!this.mediaBackground && !this.currentMessageObject.isOutOwner()) {
                                dp7 = min7;
                            }
                            messageObject6 = this.currentMessageObject;
                            if (messageObject6.type == i35 && (MessageObject.getMedia(messageObject6) instanceof TLRPC$TL_messageMediaVenue)) {
                                dp7 = min7;
                            } else {
                                min7 = i67;
                            }
                            this.photoImage.setRoundRadius(dp73, i66, min7, dp7);
                        }
                    }
                    dp73 = i289;
                    if (this.pinnedTop) {
                    }
                    if (this.pinnedBottom) {
                    }
                    if (!this.mediaBackground) {
                        dp7 = min7;
                    }
                    messageObject6 = this.currentMessageObject;
                    if (messageObject6.type == i35) {
                        dp7 = min7;
                        this.photoImage.setRoundRadius(dp73, i66, min7, dp7);
                    }
                    min7 = i67;
                    this.photoImage.setRoundRadius(dp73, i66, min7, dp7);
                }
                updateAnimatedEmojis();
                z43 = r15;
            }
            if (z45) {
                this.currentUrl = null;
                this.currentWebFile = null;
                this.loadingProgressLayout = null;
                this.animatingLoadingProgressProgress = f4;
                this.lastLoadingSizeTotal = 0L;
                this.selectedBackgroundProgress = f4;
                ValueAnimator valueAnimator = this.statusDrawableAnimator;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.statusDrawableAnimator.cancel();
                }
                this.transitionParams.lastStatusDrawableParams = i63;
                this.statusDrawableAnimationInProgress = z43;
                if (this.documentAttachType == i60) {
                    this.toSeekBarProgress = !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? 0.0f : 1.0f;
                }
                SeekBar seekBar = this.seekBar;
                if (seekBar != null) {
                    seekBar.updateTimestamps(this.currentMessageObject, null);
                }
                this.seekBarWaveform.setProgress(f4);
                AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
                if (swapAnimatedEmojiDrawable != null) {
                    swapAnimatedEmojiDrawable.play();
                }
            }
            transcribeButton = this.transcribeButton;
            if (transcribeButton != null) {
                MessageObject messageObject28 = this.currentMessageObject;
                TLRPC$Message tLRPC$Message8 = messageObject28.messageOwner;
                transcribeButton.setOpen(tLRPC$Message8 != null && tLRPC$Message8.voiceTranscriptionOpen && tLRPC$Message8.voiceTranscriptionFinal && TranscribeButton.isVideoTranscriptionOpen(messageObject28), !z45);
                this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), !z45);
            }
            updateWaveform();
            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
            if (!this.currentMessageObject.loadingCancelled && this.buttonState == 2 && this.documentAttachType == i36 && DownloadController.getInstance(this.currentAccount).canDownloadMedia(messageObject4)) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, z43 ? 1 : 0);
                this.buttonState = i35;
                this.radialProgress.setIcon(getIconForCurrentState(), z43, z43);
            }
            chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 != null && chatMessageCellDelegate2.getTextSelectionHelper() != null && !z45 && z3) {
                this.delegate.getTextSelectionHelper().checkDataChanged(messageObject4);
            }
            this.accessibilityVirtualViewBounds.clear();
            this.transitionParams.updatePhotoImageX = true;
            updateFlagSecure();
        }
        z3 = true;
        MessageObject messageObject162 = this.currentMessageObject;
        if (messageObject162 != null) {
            if (groupedMessages != this.currentMessagesGroup) {
            }
            if (!z45) {
                messageObject14.copyStableParams(messageObject13);
            }
            this.accessibilityText = null;
            if (!this.drawCommentButton) {
            }
            z4 = true;
            if (!z3) {
                setCurrentDiceValue(this.isUpdating);
            }
            if (!z3) {
                if (MessageObject.getMedia(messageObject14.messageOwner) instanceof TLRPC$TL_messageMediaPoll) {
                }
                if (arrayList4 == null) {
                    if (!z6) {
                        z6 = true;
                    }
                    tLRPC$Poll2 = this.lastPoll;
                    if (tLRPC$Poll2 != tLRPC$Poll) {
                        if (!this.pollVoted) {
                        }
                        z6 = true;
                    }
                    this.animatePollAvatars = false;
                    if (z6) {
                        this.pollAnimationProgressTime = 0.0f;
                        if (this.pollVoted) {
                            this.pollUnvoteInProgress = true;
                        }
                        int i1312 = this.lastPollResultsVoters;
                        if (i1312 == 0) {
                            this.animatePollAvatars = i1312 == 0 || (i1312 != 0 && i128 == 0);
                        }
                        this.animatePollAvatars = i1312 == 0 || (i1312 != 0 && i128 == 0);
                    }
                    if (!z45) {
                        size = tLRPC$TL_messageMediaPoll.results.results.size();
                        i129 = 0;
                        while (true) {
                            if (i129 < size) {
                            }
                            i129++;
                        }
                        if (tLRPC$TL_pollAnswerVoters != null) {
                        }
                    }
                    if (!z5) {
                        if ((groupedMessages.messages.size() > 1 ? null : this.currentMessagesGroup.positions.get(this.currentMessageObject)) == this.currentPosition) {
                        }
                    }
                    i = -1;
                    f = 1.0f;
                    i2 = 2;
                    if (!z3) {
                        messageObject4 = messageObject14;
                        i35 = 4;
                        i60 = 5;
                        i63 = -1;
                        f4 = 0.0f;
                        i36 = 3;
                        z43 = false;
                        if (z45) {
                        }
                        transcribeButton = this.transcribeButton;
                        if (transcribeButton != null) {
                        }
                        updateWaveform();
                        if (!z45) {
                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                            if (!this.currentMessageObject.loadingCancelled) {
                                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, z43 ? 1 : 0);
                                this.buttonState = i35;
                                this.radialProgress.setIcon(getIconForCurrentState(), z43, z43);
                            }
                            chatMessageCellDelegate2 = this.delegate;
                            if (chatMessageCellDelegate2 != null) {
                                this.delegate.getTextSelectionHelper().checkDataChanged(messageObject4);
                            }
                            this.accessibilityVirtualViewBounds.clear();
                            this.transitionParams.updatePhotoImageX = true;
                            updateFlagSecure();
                        }
                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                        if (!this.currentMessageObject.loadingCancelled) {
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null) {
                        }
                        this.accessibilityVirtualViewBounds.clear();
                        this.transitionParams.updatePhotoImageX = true;
                        updateFlagSecure();
                    }
                    this.wasPinned = this.isPinned;
                    this.pinnedBottom = z;
                    this.pinnedTop = z2;
                    this.currentMessageObject = messageObject14;
                    this.currentMessagesGroup = groupedMessages;
                    this.lastTime = -2;
                    this.lastPostAuthor = messageObject14.messageOwner.post_author;
                    if (!z45) {
                    }
                    this.isHighlightedAnimated = false;
                    this.wasTranscriptionOpen = false;
                    this.widthBeforeNewTimeLine = -1;
                    if (groupedMessages != null) {
                        groupedMessagePosition = this.currentMessagesGroup.positions.get(this.currentMessageObject);
                        this.currentPosition = groupedMessagePosition;
                        if (groupedMessagePosition == null) {
                        }
                        groupedMessages2 = this.currentMessagesGroup;
                        if (groupedMessages2 == null) {
                            if (this.pinnedTop) {
                                this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 4) != 0);
                                if (this.pinnedBottom) {
                                    this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition15 = this.currentPosition) == null || (groupedMessagePosition15.flags & 8) != 0);
                                    boolean z462 = this.isPlayingRound;
                                    if (this.isRoundVideo) {
                                        this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                                        this.photoImage.setCrossfadeWithOldImage(false);
                                        this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                        this.photoImage.setCrossfadeByScale(0.0f);
                                        this.photoImage.setGradientBitmap(null);
                                        TLRPC$Message tLRPC$Message62 = messageObject14.messageOwner;
                                        this.lastSendState = tLRPC$Message62.send_state;
                                        this.lastDeleteDate = tLRPC$Message62.destroyTime;
                                        this.lastViewsCount = tLRPC$Message62.views;
                                        this.lastRepliesCount = getRepliesCount();
                                        if (z45) {
                                        }
                                        this.gamePreviewPressed = z7;
                                        this.sideButtonPressed = z7;
                                        this.hasNewLineForTime = z7;
                                        this.flipImage = z7;
                                        if (this.isThreadChat) {
                                            this.isThreadPost = z47;
                                            if (!z47) {
                                                this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                                                if (this.isChat) {
                                                    if (messageObject14.customAvatarDrawable == null) {
                                                    }
                                                    this.wasLayout = r3;
                                                    this.groupPhotoInvisible = r3;
                                                    int i1332 = r3 == true ? 1 : 0;
                                                    int i1342 = r3 == true ? 1 : 0;
                                                    this.animatingDrawVideoImageButton = i1332;
                                                    this.drawVideoSize = r3;
                                                    this.canStreamVideo = r3;
                                                    this.animatingNoSound = r3;
                                                    if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                                        if (!this.isRepliesChat) {
                                                            this.drawSideButton = i135;
                                                            if (!this.isPinnedChat) {
                                                            }
                                                            this.drawSideButton = 2;
                                                            r32 = 0;
                                                            this.replyNameLayout = null;
                                                            this.adminLayout = null;
                                                            this.checkOnlyButtonPressed = r32;
                                                            this.replyTextLayout = null;
                                                            AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                                            this.lastReplyMessage = null;
                                                            this.hasEmbed = r32;
                                                            this.autoPlayingMedia = r32;
                                                            int i1362 = r32 == true ? 1 : 0;
                                                            int i1372 = r32 == true ? 1 : 0;
                                                            this.replyNameWidth = i1362;
                                                            this.replyTextWidth = r32;
                                                            this.viaWidth = r32;
                                                            this.viaNameWidth = r32;
                                                            this.addedCaptionHeight = r32;
                                                            this.currentReplyPhoto = null;
                                                            this.currentUser = null;
                                                            this.currentChat = null;
                                                            this.currentReplyUserId = 0L;
                                                            this.currentViaBotUser = null;
                                                            this.instantViewLayout = null;
                                                            this.drawNameLayout = r32;
                                                            this.lastLoadingSizeTotal = 0L;
                                                            if (this.scheduledInvalidate) {
                                                            }
                                                            this.links.clear();
                                                            this.pressedLink = null;
                                                            this.pressedEmoji = null;
                                                            this.pressedLinkType = -1;
                                                            messageObject14.forceUpdate = r32;
                                                            this.drawPhotoImage = r32;
                                                            this.drawMediaCheckBox = r32;
                                                            this.hasLinkPreview = r32;
                                                            this.hasOldCaptionPreview = r32;
                                                            this.hasGamePreview = r32;
                                                            this.hasInvoicePreview = r32;
                                                            this.commentButtonPressed = r32;
                                                            this.instantButtonPressed = r32;
                                                            this.instantPressed = r32;
                                                            if (!z6) {
                                                                i3 = 0;
                                                                while (true) {
                                                                    drawableArr = this.selectorDrawable;
                                                                    if (i3 < drawableArr.length) {
                                                                    }
                                                                    i3++;
                                                                    messageObject14 = messageObject17;
                                                                    z4 = z49;
                                                                    i2 = 2;
                                                                    f = 1.0f;
                                                                    r13 = 1;
                                                                    i = -1;
                                                                }
                                                            }
                                                            this.spoilerPressed = null;
                                                            this.isCaptionSpoilerPressed = false;
                                                            this.isSpoilerRevealing = false;
                                                            this.linkPreviewPressed = false;
                                                            this.buttonPressed = 0;
                                                            this.additionalTimeOffsetY = 0;
                                                            this.miniButtonPressed = 0;
                                                            this.pressedBotButton = i;
                                                            this.pressedVoteButton = i;
                                                            this.pollHintPressed = false;
                                                            this.psaHintPressed = false;
                                                            this.linkPreviewHeight = 0;
                                                            this.mediaOffsetY = 0;
                                                            this.documentAttachType = 0;
                                                            this.documentAttach = null;
                                                            this.descriptionLayout = null;
                                                            this.titleLayout = null;
                                                            this.videoInfoLayout = null;
                                                            this.photosCountLayout = null;
                                                            this.siteNameLayout = null;
                                                            this.authorLayout = null;
                                                            this.captionLayout = null;
                                                            this.captionWidth = 0;
                                                            this.captionHeight = 0;
                                                            this.captionOffsetX = 0;
                                                            this.currentCaption = null;
                                                            this.docTitleLayout = null;
                                                            this.drawImageButton = false;
                                                            this.drawVideoImageButton = false;
                                                            this.currentPhotoObject = null;
                                                            this.photoParentObject = null;
                                                            this.currentPhotoObjectThumb = null;
                                                            this.currentPhotoObjectThumbStripped = null;
                                                            if (!z3) {
                                                            }
                                                            this.currentPhotoFilter = null;
                                                            this.buttonState = i;
                                                            this.miniButtonState = i;
                                                            this.hasMiniProgress = 0;
                                                            if (this.addedForTest) {
                                                                ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
                                                            }
                                                            this.addedForTest = false;
                                                            this.photoNotSet = false;
                                                            this.drawBackground = r13;
                                                            this.drawName = false;
                                                            this.useSeekBarWaveform = false;
                                                            this.useTranscribeButton = false;
                                                            this.drawInstantView = false;
                                                            this.drawInstantViewType = 0;
                                                            this.drawForwardedName = false;
                                                            this.drawCommentButton = false;
                                                            this.photoImage.setSideClip(0.0f);
                                                            this.photoImage.setAspectFit(false);
                                                            this.gradientShader = null;
                                                            this.motionBackgroundDrawable = null;
                                                            this.imageBackgroundColor = 0;
                                                            this.imageBackgroundGradientColor1 = 0;
                                                            this.imageBackgroundGradientColor2 = 0;
                                                            this.imageBackgroundIntensity = 0.0f;
                                                            this.imageBackgroundGradientColor3 = 0;
                                                            this.imageBackgroundGradientRotation = 45;
                                                            this.imageBackgroundSideColor = 0;
                                                            this.mediaBackground = false;
                                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22 = messageObject14.messageOwner.fwd_from;
                                                            if (tLRPC$MessageFwdHeader22 != null) {
                                                                this.hasPsaHint = z9;
                                                                if (z9) {
                                                                }
                                                                this.photoImage.setAlpha(f);
                                                                if (!z3) {
                                                                }
                                                                this.pollButtons.clear();
                                                                this.availableTimeWidth = 0;
                                                                this.photoImage.setForceLoading(false);
                                                                this.photoImage.setNeedsQualityThumb(false);
                                                                this.photoImage.setShouldGenerateQualityThumb(false);
                                                                this.photoImage.setAllowDecodeSingleFrame(false);
                                                                this.photoImage.setColorFilter(null);
                                                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                                if (!z45) {
                                                                }
                                                                messageObject14.reactionsChanged = false;
                                                                groupedMessagePosition13 = this.currentPosition;
                                                                if (groupedMessagePosition13 == null) {
                                                                    this.reactionsLayoutInBubble.setMessage(null, false, this.resourcesProvider);
                                                                    if (z3) {
                                                                    }
                                                                    groupedMessages3 = this.currentMessagesGroup;
                                                                    if (groupedMessages3 != null) {
                                                                        isLinkedToChat = this.currentMessagesGroup.messages.get(0).isLinkedToChat(this.linkedChatId);
                                                                        if (this.hasDiscussion) {
                                                                            repliesCount = getRepliesCount();
                                                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                                                                this.drawCommentButton = r13;
                                                                                if (this.commentProgress == null) {
                                                                                }
                                                                                if (!this.isRepliesChat) {
                                                                                }
                                                                                i126 = 0;
                                                                                int ceil522 = (int) Math.ceil(Theme.chat_commentTextPaint.measureText(string5));
                                                                                this.totalCommentWidth = ceil522;
                                                                                this.commentWidth = ceil522;
                                                                                this.commentLayout = new StaticLayout(string5, Theme.chat_commentTextPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                if (repliesCount != 0) {
                                                                                }
                                                                                this.drawCommentNumber = false;
                                                                                animatedNumberLayout2 = this.commentNumberLayout;
                                                                                if (animatedNumberLayout2 != null) {
                                                                                }
                                                                                this.totalCommentWidth += AndroidUtilities.dp(i126 + 70);
                                                                                i4 = messageObject14.type;
                                                                                float f82 = 102.0f;
                                                                                if (i4 != 0) {
                                                                                }
                                                                                if (this.currentPosition != null) {
                                                                                    i60 = 5;
                                                                                    groupedMessagePosition3 = this.currentPosition;
                                                                                    if (groupedMessagePosition3 != null) {
                                                                                    }
                                                                                    int i2142222222222222222222 = this.widthBeforeNewTimeLine;
                                                                                    i63 = -1;
                                                                                    messageObject5 = this.currentMessageObject;
                                                                                    if (messageObject5.eventId == 0) {
                                                                                        int dp682 = this.backgroundWidth - AndroidUtilities.dp(41.0f);
                                                                                        this.hasOldCaptionPreview = true;
                                                                                        this.linkPreviewHeight = r15;
                                                                                        TLRPC$WebPage tLRPC$WebPage2 = MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                                                                                        int ceil232 = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(tLRPC$WebPage2.site_name) + f3);
                                                                                        this.siteNameWidth = ceil232;
                                                                                        ?? staticLayout252 = new StaticLayout(tLRPC$WebPage2.site_name, Theme.chat_replyNamePaint, Math.min(ceil232, dp682), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                        this.siteNameLayout = staticLayout252;
                                                                                        f4 = 0.0f;
                                                                                        this.siteNameRtl = staticLayout252.getLineLeft(r15) == 0.0f;
                                                                                        StaticLayout staticLayout262 = this.siteNameLayout;
                                                                                        int lineBottom52 = staticLayout262.getLineBottom(staticLayout262.getLineCount() - 1);
                                                                                        this.linkPreviewHeight += lineBottom52;
                                                                                        this.totalHeight += lineBottom52;
                                                                                        this.descriptionX = r15;
                                                                                        if (this.linkPreviewHeight != 0) {
                                                                                        }
                                                                                        StaticLayout createStaticLayout22 = StaticLayoutEx.createStaticLayout(tLRPC$WebPage2.description, Theme.chat_replyTextPaint, dp682, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(f3), false, TextUtils.TruncateAt.END, dp682, 6);
                                                                                        this.descriptionLayout = createStaticLayout22;
                                                                                        int lineBottom622 = createStaticLayout22.getLineBottom(createStaticLayout22.getLineCount() - 1);
                                                                                        this.linkPreviewHeight += lineBottom622;
                                                                                        this.totalHeight += lineBottom622;
                                                                                        z25 = false;
                                                                                        while (i65 < this.descriptionLayout.getLineCount()) {
                                                                                        }
                                                                                        if (z25) {
                                                                                        }
                                                                                        i64 = messageObject4.type;
                                                                                        if (i64 != 1) {
                                                                                        }
                                                                                        this.totalHeight += AndroidUtilities.dp(6.0f);
                                                                                        int dp6922 = this.totalHeight + AndroidUtilities.dp(17.0f);
                                                                                        this.totalHeight = dp6922;
                                                                                        if (c != 0) {
                                                                                        }
                                                                                        if (messageObject.isSponsored()) {
                                                                                        }
                                                                                        this.botButtons.clear();
                                                                                        if (z45) {
                                                                                        }
                                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                                            TLRPC$ReplyMarkup tLRPC$ReplyMarkup2 = messageObject4.messageOwner.reply_markup;
                                                                                            if (tLRPC$ReplyMarkup2 instanceof TLRPC$TL_replyInlineMarkup) {
                                                                                            }
                                                                                            int dp702 = (AndroidUtilities.dp(48.0f) * size14) + AndroidUtilities.dp(f3);
                                                                                            this.keyboardHeight = dp702;
                                                                                            this.substractBackgroundHeight = dp702;
                                                                                            dp8 = this.backgroundWidth - AndroidUtilities.dp(this.mediaBackground ? 9.0f : 0.0f);
                                                                                            this.widthForButtons = dp8;
                                                                                            if (messageObject4.wantedBotKeyboardWidth > dp8) {
                                                                                            }
                                                                                            HashMap hashMap32 = new HashMap(this.botButtonsByData);
                                                                                            sb = messageObject4.botButtonsLayout;
                                                                                            if (sb != null) {
                                                                                                hashMap = new HashMap(this.botButtonsByPosition);
                                                                                                this.botButtonsByData.clear();
                                                                                                if (!(messageObject4.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                                                                                                }
                                                                                                this.widthForButtons = i68;
                                                                                                if (this.drawCommentButton) {
                                                                                                }
                                                                                                z26 = this.drawPinnedBottom;
                                                                                                if (z26) {
                                                                                                    this.totalHeight -= AndroidUtilities.dp(2.0f);
                                                                                                    if (!this.mediaBackground) {
                                                                                                    }
                                                                                                    if (messageObject4.type != 19) {
                                                                                                    }
                                                                                                    if (!this.drawPhotoImage) {
                                                                                                    }
                                                                                                    if (this.documentAttachType != i60) {
                                                                                                    }
                                                                                                    calculateUnlockXY();
                                                                                                    if (z24) {
                                                                                                    }
                                                                                                    updateAnimatedEmojis();
                                                                                                    z43 = r15;
                                                                                                    if (z45) {
                                                                                                    }
                                                                                                    transcribeButton = this.transcribeButton;
                                                                                                    if (transcribeButton != null) {
                                                                                                    }
                                                                                                    updateWaveform();
                                                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                                    }
                                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                                    }
                                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                                                    updateFlagSecure();
                                                                                                }
                                                                                                if (z26) {
                                                                                                }
                                                                                                if (!this.mediaBackground) {
                                                                                                }
                                                                                                if (messageObject4.type != 19) {
                                                                                                }
                                                                                                if (!this.drawPhotoImage) {
                                                                                                }
                                                                                                if (this.documentAttachType != i60) {
                                                                                                }
                                                                                                calculateUnlockXY();
                                                                                                if (z24) {
                                                                                                }
                                                                                                updateAnimatedEmojis();
                                                                                                z43 = r15;
                                                                                                if (z45) {
                                                                                                }
                                                                                                transcribeButton = this.transcribeButton;
                                                                                                if (transcribeButton != null) {
                                                                                                }
                                                                                                updateWaveform();
                                                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                                }
                                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                                }
                                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                                this.transitionParams.updatePhotoImageX = true;
                                                                                                updateFlagSecure();
                                                                                            }
                                                                                            sb2 = messageObject4.botButtonsLayout;
                                                                                            if (sb2 != null) {
                                                                                            }
                                                                                            hashMap = null;
                                                                                            this.botButtonsByData.clear();
                                                                                            if (!(messageObject4.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                                                                                            }
                                                                                            this.widthForButtons = i68;
                                                                                            if (this.drawCommentButton) {
                                                                                            }
                                                                                            z26 = this.drawPinnedBottom;
                                                                                            if (z26) {
                                                                                            }
                                                                                            if (z26) {
                                                                                            }
                                                                                            if (!this.mediaBackground) {
                                                                                            }
                                                                                            if (messageObject4.type != 19) {
                                                                                            }
                                                                                            if (!this.drawPhotoImage) {
                                                                                            }
                                                                                            if (this.documentAttachType != i60) {
                                                                                            }
                                                                                            calculateUnlockXY();
                                                                                            if (z24) {
                                                                                            }
                                                                                            updateAnimatedEmojis();
                                                                                            z43 = r15;
                                                                                            if (z45) {
                                                                                            }
                                                                                            transcribeButton = this.transcribeButton;
                                                                                            if (transcribeButton != null) {
                                                                                            }
                                                                                            updateWaveform();
                                                                                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                                            }
                                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                                            if (chatMessageCellDelegate2 != null) {
                                                                                            }
                                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                                            this.transitionParams.updatePhotoImageX = true;
                                                                                            updateFlagSecure();
                                                                                        }
                                                                                        this.substractBackgroundHeight = r15;
                                                                                        this.keyboardHeight = r15;
                                                                                        if (this.drawCommentButton) {
                                                                                        }
                                                                                        z26 = this.drawPinnedBottom;
                                                                                        if (z26) {
                                                                                        }
                                                                                        if (z26) {
                                                                                        }
                                                                                        if (!this.mediaBackground) {
                                                                                        }
                                                                                        if (messageObject4.type != 19) {
                                                                                        }
                                                                                        if (!this.drawPhotoImage) {
                                                                                        }
                                                                                        if (this.documentAttachType != i60) {
                                                                                        }
                                                                                        calculateUnlockXY();
                                                                                        if (z24) {
                                                                                        }
                                                                                        updateAnimatedEmojis();
                                                                                        z43 = r15;
                                                                                        if (z45) {
                                                                                        }
                                                                                        transcribeButton = this.transcribeButton;
                                                                                        if (transcribeButton != null) {
                                                                                        }
                                                                                        updateWaveform();
                                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                                        }
                                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                                        if (chatMessageCellDelegate2 != null) {
                                                                                        }
                                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                                        updateFlagSecure();
                                                                                    }
                                                                                    f4 = 0.0f;
                                                                                    if (messageObject.isSponsored()) {
                                                                                    }
                                                                                    this.botButtons.clear();
                                                                                    if (z45) {
                                                                                    }
                                                                                    if (!messageObject4.isRestrictedMessage) {
                                                                                    }
                                                                                    this.substractBackgroundHeight = r15;
                                                                                    this.keyboardHeight = r15;
                                                                                    if (this.drawCommentButton) {
                                                                                    }
                                                                                    z26 = this.drawPinnedBottom;
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (z26) {
                                                                                    }
                                                                                    if (!this.mediaBackground) {
                                                                                    }
                                                                                    if (messageObject4.type != 19) {
                                                                                    }
                                                                                    if (!this.drawPhotoImage) {
                                                                                    }
                                                                                    if (this.documentAttachType != i60) {
                                                                                    }
                                                                                    calculateUnlockXY();
                                                                                    if (z24) {
                                                                                    }
                                                                                    updateAnimatedEmojis();
                                                                                    z43 = r15;
                                                                                    if (z45) {
                                                                                    }
                                                                                    transcribeButton = this.transcribeButton;
                                                                                    if (transcribeButton != null) {
                                                                                    }
                                                                                    updateWaveform();
                                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                                    }
                                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                                    if (chatMessageCellDelegate2 != null) {
                                                                                    }
                                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                                    updateFlagSecure();
                                                                                }
                                                                                i60 = 5;
                                                                                groupedMessagePosition3 = this.currentPosition;
                                                                                if (groupedMessagePosition3 != null) {
                                                                                }
                                                                                int i21422222222222222222222 = this.widthBeforeNewTimeLine;
                                                                                i63 = -1;
                                                                                messageObject5 = this.currentMessageObject;
                                                                                if (messageObject5.eventId == 0) {
                                                                                }
                                                                                f4 = 0.0f;
                                                                                if (messageObject.isSponsored()) {
                                                                                }
                                                                                this.botButtons.clear();
                                                                                if (z45) {
                                                                                }
                                                                                if (!messageObject4.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = r15;
                                                                                this.keyboardHeight = r15;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                z26 = this.drawPinnedBottom;
                                                                                if (z26) {
                                                                                }
                                                                                if (z26) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject4.type != 19) {
                                                                                }
                                                                                if (!this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType != i60) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z24) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                z43 = r15;
                                                                                if (z45) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = true;
                                                                                updateFlagSecure();
                                                                            }
                                                                            if (!this.isRepliesChat) {
                                                                                String formatShortNumber2 = LocaleController.formatShortNumber(repliesCount, null);
                                                                                int ceil62 = (int) Math.ceil(Theme.chat_stickerCommentCountPaint.measureText(formatShortNumber2));
                                                                                this.totalCommentWidth = ceil62;
                                                                                this.commentWidth = ceil62;
                                                                                this.commentLayout = new StaticLayout(formatShortNumber2, Theme.chat_stickerCommentCountPaint, this.commentWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                                                                this.drawCommentNumber = false;
                                                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                                i4 = messageObject14.type;
                                                                                float f822 = 102.0f;
                                                                                if (i4 != 0) {
                                                                                }
                                                                                if (this.currentPosition != null) {
                                                                                }
                                                                                i60 = 5;
                                                                                groupedMessagePosition3 = this.currentPosition;
                                                                                if (groupedMessagePosition3 != null) {
                                                                                }
                                                                                int i214222222222222222222222 = this.widthBeforeNewTimeLine;
                                                                                i63 = -1;
                                                                                messageObject5 = this.currentMessageObject;
                                                                                if (messageObject5.eventId == 0) {
                                                                                }
                                                                                f4 = 0.0f;
                                                                                if (messageObject.isSponsored()) {
                                                                                }
                                                                                this.botButtons.clear();
                                                                                if (z45) {
                                                                                }
                                                                                if (!messageObject4.isRestrictedMessage) {
                                                                                }
                                                                                this.substractBackgroundHeight = r15;
                                                                                this.keyboardHeight = r15;
                                                                                if (this.drawCommentButton) {
                                                                                }
                                                                                z26 = this.drawPinnedBottom;
                                                                                if (z26) {
                                                                                }
                                                                                if (z26) {
                                                                                }
                                                                                if (!this.mediaBackground) {
                                                                                }
                                                                                if (messageObject4.type != 19) {
                                                                                }
                                                                                if (!this.drawPhotoImage) {
                                                                                }
                                                                                if (this.documentAttachType != i60) {
                                                                                }
                                                                                calculateUnlockXY();
                                                                                if (z24) {
                                                                                }
                                                                                updateAnimatedEmojis();
                                                                                z43 = r15;
                                                                                if (z45) {
                                                                                }
                                                                                transcribeButton = this.transcribeButton;
                                                                                if (transcribeButton != null) {
                                                                                }
                                                                                updateWaveform();
                                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                                }
                                                                                chatMessageCellDelegate2 = this.delegate;
                                                                                if (chatMessageCellDelegate2 != null) {
                                                                                }
                                                                                this.accessibilityVirtualViewBounds.clear();
                                                                                this.transitionParams.updatePhotoImageX = true;
                                                                                updateFlagSecure();
                                                                            }
                                                                            this.commentLayout = null;
                                                                            this.drawCommentNumber = false;
                                                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                            i4 = messageObject14.type;
                                                                            float f8222 = 102.0f;
                                                                            if (i4 != 0) {
                                                                            }
                                                                            if (this.currentPosition != null) {
                                                                            }
                                                                            i60 = 5;
                                                                            groupedMessagePosition3 = this.currentPosition;
                                                                            if (groupedMessagePosition3 != null) {
                                                                            }
                                                                            int i2142222222222222222222222 = this.widthBeforeNewTimeLine;
                                                                            i63 = -1;
                                                                            messageObject5 = this.currentMessageObject;
                                                                            if (messageObject5.eventId == 0) {
                                                                            }
                                                                            f4 = 0.0f;
                                                                            if (messageObject.isSponsored()) {
                                                                            }
                                                                            this.botButtons.clear();
                                                                            if (z45) {
                                                                            }
                                                                            if (!messageObject4.isRestrictedMessage) {
                                                                            }
                                                                            this.substractBackgroundHeight = r15;
                                                                            this.keyboardHeight = r15;
                                                                            if (this.drawCommentButton) {
                                                                            }
                                                                            z26 = this.drawPinnedBottom;
                                                                            if (z26) {
                                                                            }
                                                                            if (z26) {
                                                                            }
                                                                            if (!this.mediaBackground) {
                                                                            }
                                                                            if (messageObject4.type != 19) {
                                                                            }
                                                                            if (!this.drawPhotoImage) {
                                                                            }
                                                                            if (this.documentAttachType != i60) {
                                                                            }
                                                                            calculateUnlockXY();
                                                                            if (z24) {
                                                                            }
                                                                            updateAnimatedEmojis();
                                                                            z43 = r15;
                                                                            if (z45) {
                                                                            }
                                                                            transcribeButton = this.transcribeButton;
                                                                            if (transcribeButton != null) {
                                                                            }
                                                                            updateWaveform();
                                                                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                                            }
                                                                            chatMessageCellDelegate2 = this.delegate;
                                                                            if (chatMessageCellDelegate2 != null) {
                                                                            }
                                                                            this.accessibilityVirtualViewBounds.clear();
                                                                            this.transitionParams.updatePhotoImageX = true;
                                                                            updateFlagSecure();
                                                                        }
                                                                        repliesCount = getRepliesCount();
                                                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                                                        }
                                                                        if (!this.isRepliesChat) {
                                                                        }
                                                                        this.commentLayout = null;
                                                                        this.drawCommentNumber = false;
                                                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                        i4 = messageObject14.type;
                                                                        float f82222 = 102.0f;
                                                                        if (i4 != 0) {
                                                                        }
                                                                        if (this.currentPosition != null) {
                                                                        }
                                                                        i60 = 5;
                                                                        groupedMessagePosition3 = this.currentPosition;
                                                                        if (groupedMessagePosition3 != null) {
                                                                        }
                                                                        int i21422222222222222222222222 = this.widthBeforeNewTimeLine;
                                                                        i63 = -1;
                                                                        messageObject5 = this.currentMessageObject;
                                                                        if (messageObject5.eventId == 0) {
                                                                        }
                                                                        f4 = 0.0f;
                                                                        if (messageObject.isSponsored()) {
                                                                        }
                                                                        this.botButtons.clear();
                                                                        if (z45) {
                                                                        }
                                                                        if (!messageObject4.isRestrictedMessage) {
                                                                        }
                                                                        this.substractBackgroundHeight = r15;
                                                                        this.keyboardHeight = r15;
                                                                        if (this.drawCommentButton) {
                                                                        }
                                                                        z26 = this.drawPinnedBottom;
                                                                        if (z26) {
                                                                        }
                                                                        if (z26) {
                                                                        }
                                                                        if (!this.mediaBackground) {
                                                                        }
                                                                        if (messageObject4.type != 19) {
                                                                        }
                                                                        if (!this.drawPhotoImage) {
                                                                        }
                                                                        if (this.documentAttachType != i60) {
                                                                        }
                                                                        calculateUnlockXY();
                                                                        if (z24) {
                                                                        }
                                                                        updateAnimatedEmojis();
                                                                        z43 = r15;
                                                                        if (z45) {
                                                                        }
                                                                        transcribeButton = this.transcribeButton;
                                                                        if (transcribeButton != null) {
                                                                        }
                                                                        updateWaveform();
                                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                                        }
                                                                        chatMessageCellDelegate2 = this.delegate;
                                                                        if (chatMessageCellDelegate2 != null) {
                                                                        }
                                                                        this.accessibilityVirtualViewBounds.clear();
                                                                        this.transitionParams.updatePhotoImageX = true;
                                                                        updateFlagSecure();
                                                                    }
                                                                    isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                                    if (this.hasDiscussion) {
                                                                    }
                                                                    repliesCount = getRepliesCount();
                                                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                                                    }
                                                                    if (!this.isRepliesChat) {
                                                                    }
                                                                    this.commentLayout = null;
                                                                    this.drawCommentNumber = false;
                                                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                    i4 = messageObject14.type;
                                                                    float f822222 = 102.0f;
                                                                    if (i4 != 0) {
                                                                    }
                                                                    if (this.currentPosition != null) {
                                                                    }
                                                                    i60 = 5;
                                                                    groupedMessagePosition3 = this.currentPosition;
                                                                    if (groupedMessagePosition3 != null) {
                                                                    }
                                                                    int i214222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                                    i63 = -1;
                                                                    messageObject5 = this.currentMessageObject;
                                                                    if (messageObject5.eventId == 0) {
                                                                    }
                                                                    f4 = 0.0f;
                                                                    if (messageObject.isSponsored()) {
                                                                    }
                                                                    this.botButtons.clear();
                                                                    if (z45) {
                                                                    }
                                                                    if (!messageObject4.isRestrictedMessage) {
                                                                    }
                                                                    this.substractBackgroundHeight = r15;
                                                                    this.keyboardHeight = r15;
                                                                    if (this.drawCommentButton) {
                                                                    }
                                                                    z26 = this.drawPinnedBottom;
                                                                    if (z26) {
                                                                    }
                                                                    if (z26) {
                                                                    }
                                                                    if (!this.mediaBackground) {
                                                                    }
                                                                    if (messageObject4.type != 19) {
                                                                    }
                                                                    if (!this.drawPhotoImage) {
                                                                    }
                                                                    if (this.documentAttachType != i60) {
                                                                    }
                                                                    calculateUnlockXY();
                                                                    if (z24) {
                                                                    }
                                                                    updateAnimatedEmojis();
                                                                    z43 = r15;
                                                                    if (z45) {
                                                                    }
                                                                    transcribeButton = this.transcribeButton;
                                                                    if (transcribeButton != null) {
                                                                    }
                                                                    updateWaveform();
                                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                                    }
                                                                    chatMessageCellDelegate2 = this.delegate;
                                                                    if (chatMessageCellDelegate2 != null) {
                                                                    }
                                                                    this.accessibilityVirtualViewBounds.clear();
                                                                    this.transitionParams.updatePhotoImageX = true;
                                                                    updateFlagSecure();
                                                                }
                                                                if (messageObject.shouldDrawReactionsInLayout()) {
                                                                }
                                                                if (z42) {
                                                                    int i1382 = 0;
                                                                    int i1392 = 0;
                                                                    while (i127 < messageObject14.messageOwner.reactions.results.size()) {
                                                                    }
                                                                }
                                                                if (this.currentPosition == null) {
                                                                }
                                                                if (z3) {
                                                                }
                                                                groupedMessages3 = this.currentMessagesGroup;
                                                                if (groupedMessages3 != null) {
                                                                }
                                                                isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                                if (this.hasDiscussion) {
                                                                }
                                                                repliesCount = getRepliesCount();
                                                                if (!messageObject.shouldDrawWithoutBackground()) {
                                                                }
                                                                if (!this.isRepliesChat) {
                                                                }
                                                                this.commentLayout = null;
                                                                this.drawCommentNumber = false;
                                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                                i4 = messageObject14.type;
                                                                float f8222222 = 102.0f;
                                                                if (i4 != 0) {
                                                                }
                                                                if (this.currentPosition != null) {
                                                                }
                                                                i60 = 5;
                                                                groupedMessagePosition3 = this.currentPosition;
                                                                if (groupedMessagePosition3 != null) {
                                                                }
                                                                int i2142222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                                i63 = -1;
                                                                messageObject5 = this.currentMessageObject;
                                                                if (messageObject5.eventId == 0) {
                                                                }
                                                                f4 = 0.0f;
                                                                if (messageObject.isSponsored()) {
                                                                }
                                                                this.botButtons.clear();
                                                                if (z45) {
                                                                }
                                                                if (!messageObject4.isRestrictedMessage) {
                                                                }
                                                                this.substractBackgroundHeight = r15;
                                                                this.keyboardHeight = r15;
                                                                if (this.drawCommentButton) {
                                                                }
                                                                z26 = this.drawPinnedBottom;
                                                                if (z26) {
                                                                }
                                                                if (z26) {
                                                                }
                                                                if (!this.mediaBackground) {
                                                                }
                                                                if (messageObject4.type != 19) {
                                                                }
                                                                if (!this.drawPhotoImage) {
                                                                }
                                                                if (this.documentAttachType != i60) {
                                                                }
                                                                calculateUnlockXY();
                                                                if (z24) {
                                                                }
                                                                updateAnimatedEmojis();
                                                                z43 = r15;
                                                                if (z45) {
                                                                }
                                                                transcribeButton = this.transcribeButton;
                                                                if (transcribeButton != null) {
                                                                }
                                                                updateWaveform();
                                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                                if (!this.currentMessageObject.loadingCancelled) {
                                                                }
                                                                chatMessageCellDelegate2 = this.delegate;
                                                                if (chatMessageCellDelegate2 != null) {
                                                                }
                                                                this.accessibilityVirtualViewBounds.clear();
                                                                this.transitionParams.updatePhotoImageX = true;
                                                                updateFlagSecure();
                                                            }
                                                            this.hasPsaHint = z9;
                                                            if (z9) {
                                                            }
                                                            this.photoImage.setAlpha(f);
                                                            if (!z3) {
                                                            }
                                                            this.pollButtons.clear();
                                                            this.availableTimeWidth = 0;
                                                            this.photoImage.setForceLoading(false);
                                                            this.photoImage.setNeedsQualityThumb(false);
                                                            this.photoImage.setShouldGenerateQualityThumb(false);
                                                            this.photoImage.setAllowDecodeSingleFrame(false);
                                                            this.photoImage.setColorFilter(null);
                                                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                            if (!z45) {
                                                            }
                                                            messageObject14.reactionsChanged = false;
                                                            groupedMessagePosition13 = this.currentPosition;
                                                            if (groupedMessagePosition13 == null) {
                                                            }
                                                            if (messageObject.shouldDrawReactionsInLayout()) {
                                                            }
                                                            if (z42) {
                                                            }
                                                            if (this.currentPosition == null) {
                                                            }
                                                            if (z3) {
                                                            }
                                                            groupedMessages3 = this.currentMessagesGroup;
                                                            if (groupedMessages3 != null) {
                                                            }
                                                            isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                            if (this.hasDiscussion) {
                                                            }
                                                            repliesCount = getRepliesCount();
                                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                                            }
                                                            if (!this.isRepliesChat) {
                                                            }
                                                            this.commentLayout = null;
                                                            this.drawCommentNumber = false;
                                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                            i4 = messageObject14.type;
                                                            float f82222222 = 102.0f;
                                                            if (i4 != 0) {
                                                            }
                                                            if (this.currentPosition != null) {
                                                            }
                                                            i60 = 5;
                                                            groupedMessagePosition3 = this.currentPosition;
                                                            if (groupedMessagePosition3 != null) {
                                                            }
                                                            int i21422222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                            i63 = -1;
                                                            messageObject5 = this.currentMessageObject;
                                                            if (messageObject5.eventId == 0) {
                                                            }
                                                            f4 = 0.0f;
                                                            if (messageObject.isSponsored()) {
                                                            }
                                                            this.botButtons.clear();
                                                            if (z45) {
                                                            }
                                                            if (!messageObject4.isRestrictedMessage) {
                                                            }
                                                            this.substractBackgroundHeight = r15;
                                                            this.keyboardHeight = r15;
                                                            if (this.drawCommentButton) {
                                                            }
                                                            z26 = this.drawPinnedBottom;
                                                            if (z26) {
                                                            }
                                                            if (z26) {
                                                            }
                                                            if (!this.mediaBackground) {
                                                            }
                                                            if (messageObject4.type != 19) {
                                                            }
                                                            if (!this.drawPhotoImage) {
                                                            }
                                                            if (this.documentAttachType != i60) {
                                                            }
                                                            calculateUnlockXY();
                                                            if (z24) {
                                                            }
                                                            updateAnimatedEmojis();
                                                            z43 = r15;
                                                            if (z45) {
                                                            }
                                                            transcribeButton = this.transcribeButton;
                                                            if (transcribeButton != null) {
                                                            }
                                                            updateWaveform();
                                                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                            if (!this.currentMessageObject.loadingCancelled) {
                                                            }
                                                            chatMessageCellDelegate2 = this.delegate;
                                                            if (chatMessageCellDelegate2 != null) {
                                                            }
                                                            this.accessibilityVirtualViewBounds.clear();
                                                            this.transitionParams.updatePhotoImageX = true;
                                                            updateFlagSecure();
                                                        }
                                                        this.drawSideButton = i135;
                                                        if (!this.isPinnedChat) {
                                                        }
                                                        this.drawSideButton = 2;
                                                        r32 = 0;
                                                        this.replyNameLayout = null;
                                                        this.adminLayout = null;
                                                        this.checkOnlyButtonPressed = r32;
                                                        this.replyTextLayout = null;
                                                        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                                        this.lastReplyMessage = null;
                                                        this.hasEmbed = r32;
                                                        this.autoPlayingMedia = r32;
                                                        int i13622 = r32 == true ? 1 : 0;
                                                        int i13722 = r32 == true ? 1 : 0;
                                                        this.replyNameWidth = i13622;
                                                        this.replyTextWidth = r32;
                                                        this.viaWidth = r32;
                                                        this.viaNameWidth = r32;
                                                        this.addedCaptionHeight = r32;
                                                        this.currentReplyPhoto = null;
                                                        this.currentUser = null;
                                                        this.currentChat = null;
                                                        this.currentReplyUserId = 0L;
                                                        this.currentViaBotUser = null;
                                                        this.instantViewLayout = null;
                                                        this.drawNameLayout = r32;
                                                        this.lastLoadingSizeTotal = 0L;
                                                        if (this.scheduledInvalidate) {
                                                        }
                                                        this.links.clear();
                                                        this.pressedLink = null;
                                                        this.pressedEmoji = null;
                                                        this.pressedLinkType = -1;
                                                        messageObject14.forceUpdate = r32;
                                                        this.drawPhotoImage = r32;
                                                        this.drawMediaCheckBox = r32;
                                                        this.hasLinkPreview = r32;
                                                        this.hasOldCaptionPreview = r32;
                                                        this.hasGamePreview = r32;
                                                        this.hasInvoicePreview = r32;
                                                        this.commentButtonPressed = r32;
                                                        this.instantButtonPressed = r32;
                                                        this.instantPressed = r32;
                                                        if (!z6) {
                                                        }
                                                        this.spoilerPressed = null;
                                                        this.isCaptionSpoilerPressed = false;
                                                        this.isSpoilerRevealing = false;
                                                        this.linkPreviewPressed = false;
                                                        this.buttonPressed = 0;
                                                        this.additionalTimeOffsetY = 0;
                                                        this.miniButtonPressed = 0;
                                                        this.pressedBotButton = i;
                                                        this.pressedVoteButton = i;
                                                        this.pollHintPressed = false;
                                                        this.psaHintPressed = false;
                                                        this.linkPreviewHeight = 0;
                                                        this.mediaOffsetY = 0;
                                                        this.documentAttachType = 0;
                                                        this.documentAttach = null;
                                                        this.descriptionLayout = null;
                                                        this.titleLayout = null;
                                                        this.videoInfoLayout = null;
                                                        this.photosCountLayout = null;
                                                        this.siteNameLayout = null;
                                                        this.authorLayout = null;
                                                        this.captionLayout = null;
                                                        this.captionWidth = 0;
                                                        this.captionHeight = 0;
                                                        this.captionOffsetX = 0;
                                                        this.currentCaption = null;
                                                        this.docTitleLayout = null;
                                                        this.drawImageButton = false;
                                                        this.drawVideoImageButton = false;
                                                        this.currentPhotoObject = null;
                                                        this.photoParentObject = null;
                                                        this.currentPhotoObjectThumb = null;
                                                        this.currentPhotoObjectThumbStripped = null;
                                                        if (!z3) {
                                                        }
                                                        this.currentPhotoFilter = null;
                                                        this.buttonState = i;
                                                        this.miniButtonState = i;
                                                        this.hasMiniProgress = 0;
                                                        if (this.addedForTest) {
                                                        }
                                                        this.addedForTest = false;
                                                        this.photoNotSet = false;
                                                        this.drawBackground = r13;
                                                        this.drawName = false;
                                                        this.useSeekBarWaveform = false;
                                                        this.useTranscribeButton = false;
                                                        this.drawInstantView = false;
                                                        this.drawInstantViewType = 0;
                                                        this.drawForwardedName = false;
                                                        this.drawCommentButton = false;
                                                        this.photoImage.setSideClip(0.0f);
                                                        this.photoImage.setAspectFit(false);
                                                        this.gradientShader = null;
                                                        this.motionBackgroundDrawable = null;
                                                        this.imageBackgroundColor = 0;
                                                        this.imageBackgroundGradientColor1 = 0;
                                                        this.imageBackgroundGradientColor2 = 0;
                                                        this.imageBackgroundIntensity = 0.0f;
                                                        this.imageBackgroundGradientColor3 = 0;
                                                        this.imageBackgroundGradientRotation = 45;
                                                        this.imageBackgroundSideColor = 0;
                                                        this.mediaBackground = false;
                                                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222 = messageObject14.messageOwner.fwd_from;
                                                        if (tLRPC$MessageFwdHeader222 != null) {
                                                        }
                                                        this.hasPsaHint = z9;
                                                        if (z9) {
                                                        }
                                                        this.photoImage.setAlpha(f);
                                                        if (!z3) {
                                                        }
                                                        this.pollButtons.clear();
                                                        this.availableTimeWidth = 0;
                                                        this.photoImage.setForceLoading(false);
                                                        this.photoImage.setNeedsQualityThumb(false);
                                                        this.photoImage.setShouldGenerateQualityThumb(false);
                                                        this.photoImage.setAllowDecodeSingleFrame(false);
                                                        this.photoImage.setColorFilter(null);
                                                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                        if (!z45) {
                                                        }
                                                        messageObject14.reactionsChanged = false;
                                                        groupedMessagePosition13 = this.currentPosition;
                                                        if (groupedMessagePosition13 == null) {
                                                        }
                                                        if (messageObject.shouldDrawReactionsInLayout()) {
                                                        }
                                                        if (z42) {
                                                        }
                                                        if (this.currentPosition == null) {
                                                        }
                                                        if (z3) {
                                                        }
                                                        groupedMessages3 = this.currentMessagesGroup;
                                                        if (groupedMessages3 != null) {
                                                        }
                                                        isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                        if (this.hasDiscussion) {
                                                        }
                                                        repliesCount = getRepliesCount();
                                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                                        }
                                                        if (!this.isRepliesChat) {
                                                        }
                                                        this.commentLayout = null;
                                                        this.drawCommentNumber = false;
                                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                        i4 = messageObject14.type;
                                                        float f822222222 = 102.0f;
                                                        if (i4 != 0) {
                                                        }
                                                        if (this.currentPosition != null) {
                                                        }
                                                        i60 = 5;
                                                        groupedMessagePosition3 = this.currentPosition;
                                                        if (groupedMessagePosition3 != null) {
                                                        }
                                                        int i214222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                        i63 = -1;
                                                        messageObject5 = this.currentMessageObject;
                                                        if (messageObject5.eventId == 0) {
                                                        }
                                                        f4 = 0.0f;
                                                        if (messageObject.isSponsored()) {
                                                        }
                                                        this.botButtons.clear();
                                                        if (z45) {
                                                        }
                                                        if (!messageObject4.isRestrictedMessage) {
                                                        }
                                                        this.substractBackgroundHeight = r15;
                                                        this.keyboardHeight = r15;
                                                        if (this.drawCommentButton) {
                                                        }
                                                        z26 = this.drawPinnedBottom;
                                                        if (z26) {
                                                        }
                                                        if (z26) {
                                                        }
                                                        if (!this.mediaBackground) {
                                                        }
                                                        if (messageObject4.type != 19) {
                                                        }
                                                        if (!this.drawPhotoImage) {
                                                        }
                                                        if (this.documentAttachType != i60) {
                                                        }
                                                        calculateUnlockXY();
                                                        if (z24) {
                                                        }
                                                        updateAnimatedEmojis();
                                                        z43 = r15;
                                                        if (z45) {
                                                        }
                                                        transcribeButton = this.transcribeButton;
                                                        if (transcribeButton != null) {
                                                        }
                                                        updateWaveform();
                                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                        if (!this.currentMessageObject.loadingCancelled) {
                                                        }
                                                        chatMessageCellDelegate2 = this.delegate;
                                                        if (chatMessageCellDelegate2 != null) {
                                                        }
                                                        this.accessibilityVirtualViewBounds.clear();
                                                        this.transitionParams.updatePhotoImageX = true;
                                                        updateFlagSecure();
                                                    }
                                                    r32 = 0;
                                                    this.drawSideButton = 0;
                                                    this.replyNameLayout = null;
                                                    this.adminLayout = null;
                                                    this.checkOnlyButtonPressed = r32;
                                                    this.replyTextLayout = null;
                                                    AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                                    this.lastReplyMessage = null;
                                                    this.hasEmbed = r32;
                                                    this.autoPlayingMedia = r32;
                                                    int i136222 = r32 == true ? 1 : 0;
                                                    int i137222 = r32 == true ? 1 : 0;
                                                    this.replyNameWidth = i136222;
                                                    this.replyTextWidth = r32;
                                                    this.viaWidth = r32;
                                                    this.viaNameWidth = r32;
                                                    this.addedCaptionHeight = r32;
                                                    this.currentReplyPhoto = null;
                                                    this.currentUser = null;
                                                    this.currentChat = null;
                                                    this.currentReplyUserId = 0L;
                                                    this.currentViaBotUser = null;
                                                    this.instantViewLayout = null;
                                                    this.drawNameLayout = r32;
                                                    this.lastLoadingSizeTotal = 0L;
                                                    if (this.scheduledInvalidate) {
                                                    }
                                                    this.links.clear();
                                                    this.pressedLink = null;
                                                    this.pressedEmoji = null;
                                                    this.pressedLinkType = -1;
                                                    messageObject14.forceUpdate = r32;
                                                    this.drawPhotoImage = r32;
                                                    this.drawMediaCheckBox = r32;
                                                    this.hasLinkPreview = r32;
                                                    this.hasOldCaptionPreview = r32;
                                                    this.hasGamePreview = r32;
                                                    this.hasInvoicePreview = r32;
                                                    this.commentButtonPressed = r32;
                                                    this.instantButtonPressed = r32;
                                                    this.instantPressed = r32;
                                                    if (!z6) {
                                                    }
                                                    this.spoilerPressed = null;
                                                    this.isCaptionSpoilerPressed = false;
                                                    this.isSpoilerRevealing = false;
                                                    this.linkPreviewPressed = false;
                                                    this.buttonPressed = 0;
                                                    this.additionalTimeOffsetY = 0;
                                                    this.miniButtonPressed = 0;
                                                    this.pressedBotButton = i;
                                                    this.pressedVoteButton = i;
                                                    this.pollHintPressed = false;
                                                    this.psaHintPressed = false;
                                                    this.linkPreviewHeight = 0;
                                                    this.mediaOffsetY = 0;
                                                    this.documentAttachType = 0;
                                                    this.documentAttach = null;
                                                    this.descriptionLayout = null;
                                                    this.titleLayout = null;
                                                    this.videoInfoLayout = null;
                                                    this.photosCountLayout = null;
                                                    this.siteNameLayout = null;
                                                    this.authorLayout = null;
                                                    this.captionLayout = null;
                                                    this.captionWidth = 0;
                                                    this.captionHeight = 0;
                                                    this.captionOffsetX = 0;
                                                    this.currentCaption = null;
                                                    this.docTitleLayout = null;
                                                    this.drawImageButton = false;
                                                    this.drawVideoImageButton = false;
                                                    this.currentPhotoObject = null;
                                                    this.photoParentObject = null;
                                                    this.currentPhotoObjectThumb = null;
                                                    this.currentPhotoObjectThumbStripped = null;
                                                    if (!z3) {
                                                    }
                                                    this.currentPhotoFilter = null;
                                                    this.buttonState = i;
                                                    this.miniButtonState = i;
                                                    this.hasMiniProgress = 0;
                                                    if (this.addedForTest) {
                                                    }
                                                    this.addedForTest = false;
                                                    this.photoNotSet = false;
                                                    this.drawBackground = r13;
                                                    this.drawName = false;
                                                    this.useSeekBarWaveform = false;
                                                    this.useTranscribeButton = false;
                                                    this.drawInstantView = false;
                                                    this.drawInstantViewType = 0;
                                                    this.drawForwardedName = false;
                                                    this.drawCommentButton = false;
                                                    this.photoImage.setSideClip(0.0f);
                                                    this.photoImage.setAspectFit(false);
                                                    this.gradientShader = null;
                                                    this.motionBackgroundDrawable = null;
                                                    this.imageBackgroundColor = 0;
                                                    this.imageBackgroundGradientColor1 = 0;
                                                    this.imageBackgroundGradientColor2 = 0;
                                                    this.imageBackgroundIntensity = 0.0f;
                                                    this.imageBackgroundGradientColor3 = 0;
                                                    this.imageBackgroundGradientRotation = 45;
                                                    this.imageBackgroundSideColor = 0;
                                                    this.mediaBackground = false;
                                                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222 = messageObject14.messageOwner.fwd_from;
                                                    if (tLRPC$MessageFwdHeader2222 != null) {
                                                    }
                                                    this.hasPsaHint = z9;
                                                    if (z9) {
                                                    }
                                                    this.photoImage.setAlpha(f);
                                                    if (!z3) {
                                                    }
                                                    this.pollButtons.clear();
                                                    this.availableTimeWidth = 0;
                                                    this.photoImage.setForceLoading(false);
                                                    this.photoImage.setNeedsQualityThumb(false);
                                                    this.photoImage.setShouldGenerateQualityThumb(false);
                                                    this.photoImage.setAllowDecodeSingleFrame(false);
                                                    this.photoImage.setColorFilter(null);
                                                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                    if (!z45) {
                                                    }
                                                    messageObject14.reactionsChanged = false;
                                                    groupedMessagePosition13 = this.currentPosition;
                                                    if (groupedMessagePosition13 == null) {
                                                    }
                                                    if (messageObject.shouldDrawReactionsInLayout()) {
                                                    }
                                                    if (z42) {
                                                    }
                                                    if (this.currentPosition == null) {
                                                    }
                                                    if (z3) {
                                                    }
                                                    groupedMessages3 = this.currentMessagesGroup;
                                                    if (groupedMessages3 != null) {
                                                    }
                                                    isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                    if (this.hasDiscussion) {
                                                    }
                                                    repliesCount = getRepliesCount();
                                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                                    }
                                                    if (!this.isRepliesChat) {
                                                    }
                                                    this.commentLayout = null;
                                                    this.drawCommentNumber = false;
                                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                    i4 = messageObject14.type;
                                                    float f8222222222 = 102.0f;
                                                    if (i4 != 0) {
                                                    }
                                                    if (this.currentPosition != null) {
                                                    }
                                                    i60 = 5;
                                                    groupedMessagePosition3 = this.currentPosition;
                                                    if (groupedMessagePosition3 != null) {
                                                    }
                                                    int i2142222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                    i63 = -1;
                                                    messageObject5 = this.currentMessageObject;
                                                    if (messageObject5.eventId == 0) {
                                                    }
                                                    f4 = 0.0f;
                                                    if (messageObject.isSponsored()) {
                                                    }
                                                    this.botButtons.clear();
                                                    if (z45) {
                                                    }
                                                    if (!messageObject4.isRestrictedMessage) {
                                                    }
                                                    this.substractBackgroundHeight = r15;
                                                    this.keyboardHeight = r15;
                                                    if (this.drawCommentButton) {
                                                    }
                                                    z26 = this.drawPinnedBottom;
                                                    if (z26) {
                                                    }
                                                    if (z26) {
                                                    }
                                                    if (!this.mediaBackground) {
                                                    }
                                                    if (messageObject4.type != 19) {
                                                    }
                                                    if (!this.drawPhotoImage) {
                                                    }
                                                    if (this.documentAttachType != i60) {
                                                    }
                                                    calculateUnlockXY();
                                                    if (z24) {
                                                    }
                                                    updateAnimatedEmojis();
                                                    z43 = r15;
                                                    if (z45) {
                                                    }
                                                    transcribeButton = this.transcribeButton;
                                                    if (transcribeButton != null) {
                                                    }
                                                    updateWaveform();
                                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                    if (!this.currentMessageObject.loadingCancelled) {
                                                    }
                                                    chatMessageCellDelegate2 = this.delegate;
                                                    if (chatMessageCellDelegate2 != null) {
                                                    }
                                                    this.accessibilityVirtualViewBounds.clear();
                                                    this.transitionParams.updatePhotoImageX = true;
                                                    updateFlagSecure();
                                                }
                                                if (messageObject14.customAvatarDrawable == null) {
                                                }
                                                this.wasLayout = r3;
                                                this.groupPhotoInvisible = r3;
                                                int i13322 = r3 == true ? 1 : 0;
                                                int i13422 = r3 == true ? 1 : 0;
                                                this.animatingDrawVideoImageButton = i13322;
                                                this.drawVideoSize = r3;
                                                this.canStreamVideo = r3;
                                                this.animatingNoSound = r3;
                                                if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                                }
                                                r32 = 0;
                                                this.drawSideButton = 0;
                                                this.replyNameLayout = null;
                                                this.adminLayout = null;
                                                this.checkOnlyButtonPressed = r32;
                                                this.replyTextLayout = null;
                                                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                                this.lastReplyMessage = null;
                                                this.hasEmbed = r32;
                                                this.autoPlayingMedia = r32;
                                                int i1362222 = r32 == true ? 1 : 0;
                                                int i1372222 = r32 == true ? 1 : 0;
                                                this.replyNameWidth = i1362222;
                                                this.replyTextWidth = r32;
                                                this.viaWidth = r32;
                                                this.viaNameWidth = r32;
                                                this.addedCaptionHeight = r32;
                                                this.currentReplyPhoto = null;
                                                this.currentUser = null;
                                                this.currentChat = null;
                                                this.currentReplyUserId = 0L;
                                                this.currentViaBotUser = null;
                                                this.instantViewLayout = null;
                                                this.drawNameLayout = r32;
                                                this.lastLoadingSizeTotal = 0L;
                                                if (this.scheduledInvalidate) {
                                                }
                                                this.links.clear();
                                                this.pressedLink = null;
                                                this.pressedEmoji = null;
                                                this.pressedLinkType = -1;
                                                messageObject14.forceUpdate = r32;
                                                this.drawPhotoImage = r32;
                                                this.drawMediaCheckBox = r32;
                                                this.hasLinkPreview = r32;
                                                this.hasOldCaptionPreview = r32;
                                                this.hasGamePreview = r32;
                                                this.hasInvoicePreview = r32;
                                                this.commentButtonPressed = r32;
                                                this.instantButtonPressed = r32;
                                                this.instantPressed = r32;
                                                if (!z6) {
                                                }
                                                this.spoilerPressed = null;
                                                this.isCaptionSpoilerPressed = false;
                                                this.isSpoilerRevealing = false;
                                                this.linkPreviewPressed = false;
                                                this.buttonPressed = 0;
                                                this.additionalTimeOffsetY = 0;
                                                this.miniButtonPressed = 0;
                                                this.pressedBotButton = i;
                                                this.pressedVoteButton = i;
                                                this.pollHintPressed = false;
                                                this.psaHintPressed = false;
                                                this.linkPreviewHeight = 0;
                                                this.mediaOffsetY = 0;
                                                this.documentAttachType = 0;
                                                this.documentAttach = null;
                                                this.descriptionLayout = null;
                                                this.titleLayout = null;
                                                this.videoInfoLayout = null;
                                                this.photosCountLayout = null;
                                                this.siteNameLayout = null;
                                                this.authorLayout = null;
                                                this.captionLayout = null;
                                                this.captionWidth = 0;
                                                this.captionHeight = 0;
                                                this.captionOffsetX = 0;
                                                this.currentCaption = null;
                                                this.docTitleLayout = null;
                                                this.drawImageButton = false;
                                                this.drawVideoImageButton = false;
                                                this.currentPhotoObject = null;
                                                this.photoParentObject = null;
                                                this.currentPhotoObjectThumb = null;
                                                this.currentPhotoObjectThumbStripped = null;
                                                if (!z3) {
                                                }
                                                this.currentPhotoFilter = null;
                                                this.buttonState = i;
                                                this.miniButtonState = i;
                                                this.hasMiniProgress = 0;
                                                if (this.addedForTest) {
                                                }
                                                this.addedForTest = false;
                                                this.photoNotSet = false;
                                                this.drawBackground = r13;
                                                this.drawName = false;
                                                this.useSeekBarWaveform = false;
                                                this.useTranscribeButton = false;
                                                this.drawInstantView = false;
                                                this.drawInstantViewType = 0;
                                                this.drawForwardedName = false;
                                                this.drawCommentButton = false;
                                                this.photoImage.setSideClip(0.0f);
                                                this.photoImage.setAspectFit(false);
                                                this.gradientShader = null;
                                                this.motionBackgroundDrawable = null;
                                                this.imageBackgroundColor = 0;
                                                this.imageBackgroundGradientColor1 = 0;
                                                this.imageBackgroundGradientColor2 = 0;
                                                this.imageBackgroundIntensity = 0.0f;
                                                this.imageBackgroundGradientColor3 = 0;
                                                this.imageBackgroundGradientRotation = 45;
                                                this.imageBackgroundSideColor = 0;
                                                this.mediaBackground = false;
                                                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222 = messageObject14.messageOwner.fwd_from;
                                                if (tLRPC$MessageFwdHeader22222 != null) {
                                                }
                                                this.hasPsaHint = z9;
                                                if (z9) {
                                                }
                                                this.photoImage.setAlpha(f);
                                                if (!z3) {
                                                }
                                                this.pollButtons.clear();
                                                this.availableTimeWidth = 0;
                                                this.photoImage.setForceLoading(false);
                                                this.photoImage.setNeedsQualityThumb(false);
                                                this.photoImage.setShouldGenerateQualityThumb(false);
                                                this.photoImage.setAllowDecodeSingleFrame(false);
                                                this.photoImage.setColorFilter(null);
                                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                                if (!z45) {
                                                }
                                                messageObject14.reactionsChanged = false;
                                                groupedMessagePosition13 = this.currentPosition;
                                                if (groupedMessagePosition13 == null) {
                                                }
                                                if (messageObject.shouldDrawReactionsInLayout()) {
                                                }
                                                if (z42) {
                                                }
                                                if (this.currentPosition == null) {
                                                }
                                                if (z3) {
                                                }
                                                groupedMessages3 = this.currentMessagesGroup;
                                                if (groupedMessages3 != null) {
                                                }
                                                isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                                if (this.hasDiscussion) {
                                                }
                                                repliesCount = getRepliesCount();
                                                if (!messageObject.shouldDrawWithoutBackground()) {
                                                }
                                                if (!this.isRepliesChat) {
                                                }
                                                this.commentLayout = null;
                                                this.drawCommentNumber = false;
                                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                                i4 = messageObject14.type;
                                                float f82222222222 = 102.0f;
                                                if (i4 != 0) {
                                                }
                                                if (this.currentPosition != null) {
                                                }
                                                i60 = 5;
                                                groupedMessagePosition3 = this.currentPosition;
                                                if (groupedMessagePosition3 != null) {
                                                }
                                                int i21422222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                                i63 = -1;
                                                messageObject5 = this.currentMessageObject;
                                                if (messageObject5.eventId == 0) {
                                                }
                                                f4 = 0.0f;
                                                if (messageObject.isSponsored()) {
                                                }
                                                this.botButtons.clear();
                                                if (z45) {
                                                }
                                                if (!messageObject4.isRestrictedMessage) {
                                                }
                                                this.substractBackgroundHeight = r15;
                                                this.keyboardHeight = r15;
                                                if (this.drawCommentButton) {
                                                }
                                                z26 = this.drawPinnedBottom;
                                                if (z26) {
                                                }
                                                if (z26) {
                                                }
                                                if (!this.mediaBackground) {
                                                }
                                                if (messageObject4.type != 19) {
                                                }
                                                if (!this.drawPhotoImage) {
                                                }
                                                if (this.documentAttachType != i60) {
                                                }
                                                calculateUnlockXY();
                                                if (z24) {
                                                }
                                                updateAnimatedEmojis();
                                                z43 = r15;
                                                if (z45) {
                                                }
                                                transcribeButton = this.transcribeButton;
                                                if (transcribeButton != null) {
                                                }
                                                updateWaveform();
                                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                                if (!this.currentMessageObject.loadingCancelled) {
                                                }
                                                chatMessageCellDelegate2 = this.delegate;
                                                if (chatMessageCellDelegate2 != null) {
                                                }
                                                this.accessibilityVirtualViewBounds.clear();
                                                this.transitionParams.updatePhotoImageX = true;
                                                updateFlagSecure();
                                            }
                                            this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                                            if (this.isChat) {
                                            }
                                            if (messageObject14.customAvatarDrawable == null) {
                                            }
                                            this.wasLayout = r3;
                                            this.groupPhotoInvisible = r3;
                                            int i133222 = r3 == true ? 1 : 0;
                                            int i134222 = r3 == true ? 1 : 0;
                                            this.animatingDrawVideoImageButton = i133222;
                                            this.drawVideoSize = r3;
                                            this.canStreamVideo = r3;
                                            this.animatingNoSound = r3;
                                            if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                            }
                                            r32 = 0;
                                            this.drawSideButton = 0;
                                            this.replyNameLayout = null;
                                            this.adminLayout = null;
                                            this.checkOnlyButtonPressed = r32;
                                            this.replyTextLayout = null;
                                            AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                            this.lastReplyMessage = null;
                                            this.hasEmbed = r32;
                                            this.autoPlayingMedia = r32;
                                            int i13622222 = r32 == true ? 1 : 0;
                                            int i13722222 = r32 == true ? 1 : 0;
                                            this.replyNameWidth = i13622222;
                                            this.replyTextWidth = r32;
                                            this.viaWidth = r32;
                                            this.viaNameWidth = r32;
                                            this.addedCaptionHeight = r32;
                                            this.currentReplyPhoto = null;
                                            this.currentUser = null;
                                            this.currentChat = null;
                                            this.currentReplyUserId = 0L;
                                            this.currentViaBotUser = null;
                                            this.instantViewLayout = null;
                                            this.drawNameLayout = r32;
                                            this.lastLoadingSizeTotal = 0L;
                                            if (this.scheduledInvalidate) {
                                            }
                                            this.links.clear();
                                            this.pressedLink = null;
                                            this.pressedEmoji = null;
                                            this.pressedLinkType = -1;
                                            messageObject14.forceUpdate = r32;
                                            this.drawPhotoImage = r32;
                                            this.drawMediaCheckBox = r32;
                                            this.hasLinkPreview = r32;
                                            this.hasOldCaptionPreview = r32;
                                            this.hasGamePreview = r32;
                                            this.hasInvoicePreview = r32;
                                            this.commentButtonPressed = r32;
                                            this.instantButtonPressed = r32;
                                            this.instantPressed = r32;
                                            if (!z6) {
                                            }
                                            this.spoilerPressed = null;
                                            this.isCaptionSpoilerPressed = false;
                                            this.isSpoilerRevealing = false;
                                            this.linkPreviewPressed = false;
                                            this.buttonPressed = 0;
                                            this.additionalTimeOffsetY = 0;
                                            this.miniButtonPressed = 0;
                                            this.pressedBotButton = i;
                                            this.pressedVoteButton = i;
                                            this.pollHintPressed = false;
                                            this.psaHintPressed = false;
                                            this.linkPreviewHeight = 0;
                                            this.mediaOffsetY = 0;
                                            this.documentAttachType = 0;
                                            this.documentAttach = null;
                                            this.descriptionLayout = null;
                                            this.titleLayout = null;
                                            this.videoInfoLayout = null;
                                            this.photosCountLayout = null;
                                            this.siteNameLayout = null;
                                            this.authorLayout = null;
                                            this.captionLayout = null;
                                            this.captionWidth = 0;
                                            this.captionHeight = 0;
                                            this.captionOffsetX = 0;
                                            this.currentCaption = null;
                                            this.docTitleLayout = null;
                                            this.drawImageButton = false;
                                            this.drawVideoImageButton = false;
                                            this.currentPhotoObject = null;
                                            this.photoParentObject = null;
                                            this.currentPhotoObjectThumb = null;
                                            this.currentPhotoObjectThumbStripped = null;
                                            if (!z3) {
                                            }
                                            this.currentPhotoFilter = null;
                                            this.buttonState = i;
                                            this.miniButtonState = i;
                                            this.hasMiniProgress = 0;
                                            if (this.addedForTest) {
                                            }
                                            this.addedForTest = false;
                                            this.photoNotSet = false;
                                            this.drawBackground = r13;
                                            this.drawName = false;
                                            this.useSeekBarWaveform = false;
                                            this.useTranscribeButton = false;
                                            this.drawInstantView = false;
                                            this.drawInstantViewType = 0;
                                            this.drawForwardedName = false;
                                            this.drawCommentButton = false;
                                            this.photoImage.setSideClip(0.0f);
                                            this.photoImage.setAspectFit(false);
                                            this.gradientShader = null;
                                            this.motionBackgroundDrawable = null;
                                            this.imageBackgroundColor = 0;
                                            this.imageBackgroundGradientColor1 = 0;
                                            this.imageBackgroundGradientColor2 = 0;
                                            this.imageBackgroundIntensity = 0.0f;
                                            this.imageBackgroundGradientColor3 = 0;
                                            this.imageBackgroundGradientRotation = 45;
                                            this.imageBackgroundSideColor = 0;
                                            this.mediaBackground = false;
                                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222 = messageObject14.messageOwner.fwd_from;
                                            if (tLRPC$MessageFwdHeader222222 != null) {
                                            }
                                            this.hasPsaHint = z9;
                                            if (z9) {
                                            }
                                            this.photoImage.setAlpha(f);
                                            if (!z3) {
                                            }
                                            this.pollButtons.clear();
                                            this.availableTimeWidth = 0;
                                            this.photoImage.setForceLoading(false);
                                            this.photoImage.setNeedsQualityThumb(false);
                                            this.photoImage.setShouldGenerateQualityThumb(false);
                                            this.photoImage.setAllowDecodeSingleFrame(false);
                                            this.photoImage.setColorFilter(null);
                                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                                            if (!z45) {
                                            }
                                            messageObject14.reactionsChanged = false;
                                            groupedMessagePosition13 = this.currentPosition;
                                            if (groupedMessagePosition13 == null) {
                                            }
                                            if (messageObject.shouldDrawReactionsInLayout()) {
                                            }
                                            if (z42) {
                                            }
                                            if (this.currentPosition == null) {
                                            }
                                            if (z3) {
                                            }
                                            groupedMessages3 = this.currentMessagesGroup;
                                            if (groupedMessages3 != null) {
                                            }
                                            isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                            if (this.hasDiscussion) {
                                            }
                                            repliesCount = getRepliesCount();
                                            if (!messageObject.shouldDrawWithoutBackground()) {
                                            }
                                            if (!this.isRepliesChat) {
                                            }
                                            this.commentLayout = null;
                                            this.drawCommentNumber = false;
                                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                            i4 = messageObject14.type;
                                            float f822222222222 = 102.0f;
                                            if (i4 != 0) {
                                            }
                                            if (this.currentPosition != null) {
                                            }
                                            i60 = 5;
                                            groupedMessagePosition3 = this.currentPosition;
                                            if (groupedMessagePosition3 != null) {
                                            }
                                            int i214222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                            i63 = -1;
                                            messageObject5 = this.currentMessageObject;
                                            if (messageObject5.eventId == 0) {
                                            }
                                            f4 = 0.0f;
                                            if (messageObject.isSponsored()) {
                                            }
                                            this.botButtons.clear();
                                            if (z45) {
                                            }
                                            if (!messageObject4.isRestrictedMessage) {
                                            }
                                            this.substractBackgroundHeight = r15;
                                            this.keyboardHeight = r15;
                                            if (this.drawCommentButton) {
                                            }
                                            z26 = this.drawPinnedBottom;
                                            if (z26) {
                                            }
                                            if (z26) {
                                            }
                                            if (!this.mediaBackground) {
                                            }
                                            if (messageObject4.type != 19) {
                                            }
                                            if (!this.drawPhotoImage) {
                                            }
                                            if (this.documentAttachType != i60) {
                                            }
                                            calculateUnlockXY();
                                            if (z24) {
                                            }
                                            updateAnimatedEmojis();
                                            z43 = r15;
                                            if (z45) {
                                            }
                                            transcribeButton = this.transcribeButton;
                                            if (transcribeButton != null) {
                                            }
                                            updateWaveform();
                                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                            if (!this.currentMessageObject.loadingCancelled) {
                                            }
                                            chatMessageCellDelegate2 = this.delegate;
                                            if (chatMessageCellDelegate2 != null) {
                                            }
                                            this.accessibilityVirtualViewBounds.clear();
                                            this.transitionParams.updatePhotoImageX = true;
                                            updateFlagSecure();
                                        }
                                        this.isThreadPost = z47;
                                        this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                                        if (this.isChat) {
                                        }
                                        if (messageObject14.customAvatarDrawable == null) {
                                        }
                                        this.wasLayout = r3;
                                        this.groupPhotoInvisible = r3;
                                        int i1332222 = r3 == true ? 1 : 0;
                                        int i1342222 = r3 == true ? 1 : 0;
                                        this.animatingDrawVideoImageButton = i1332222;
                                        this.drawVideoSize = r3;
                                        this.canStreamVideo = r3;
                                        this.animatingNoSound = r3;
                                        if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                        }
                                        r32 = 0;
                                        this.drawSideButton = 0;
                                        this.replyNameLayout = null;
                                        this.adminLayout = null;
                                        this.checkOnlyButtonPressed = r32;
                                        this.replyTextLayout = null;
                                        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                        this.lastReplyMessage = null;
                                        this.hasEmbed = r32;
                                        this.autoPlayingMedia = r32;
                                        int i136222222 = r32 == true ? 1 : 0;
                                        int i137222222 = r32 == true ? 1 : 0;
                                        this.replyNameWidth = i136222222;
                                        this.replyTextWidth = r32;
                                        this.viaWidth = r32;
                                        this.viaNameWidth = r32;
                                        this.addedCaptionHeight = r32;
                                        this.currentReplyPhoto = null;
                                        this.currentUser = null;
                                        this.currentChat = null;
                                        this.currentReplyUserId = 0L;
                                        this.currentViaBotUser = null;
                                        this.instantViewLayout = null;
                                        this.drawNameLayout = r32;
                                        this.lastLoadingSizeTotal = 0L;
                                        if (this.scheduledInvalidate) {
                                        }
                                        this.links.clear();
                                        this.pressedLink = null;
                                        this.pressedEmoji = null;
                                        this.pressedLinkType = -1;
                                        messageObject14.forceUpdate = r32;
                                        this.drawPhotoImage = r32;
                                        this.drawMediaCheckBox = r32;
                                        this.hasLinkPreview = r32;
                                        this.hasOldCaptionPreview = r32;
                                        this.hasGamePreview = r32;
                                        this.hasInvoicePreview = r32;
                                        this.commentButtonPressed = r32;
                                        this.instantButtonPressed = r32;
                                        this.instantPressed = r32;
                                        if (!z6) {
                                        }
                                        this.spoilerPressed = null;
                                        this.isCaptionSpoilerPressed = false;
                                        this.isSpoilerRevealing = false;
                                        this.linkPreviewPressed = false;
                                        this.buttonPressed = 0;
                                        this.additionalTimeOffsetY = 0;
                                        this.miniButtonPressed = 0;
                                        this.pressedBotButton = i;
                                        this.pressedVoteButton = i;
                                        this.pollHintPressed = false;
                                        this.psaHintPressed = false;
                                        this.linkPreviewHeight = 0;
                                        this.mediaOffsetY = 0;
                                        this.documentAttachType = 0;
                                        this.documentAttach = null;
                                        this.descriptionLayout = null;
                                        this.titleLayout = null;
                                        this.videoInfoLayout = null;
                                        this.photosCountLayout = null;
                                        this.siteNameLayout = null;
                                        this.authorLayout = null;
                                        this.captionLayout = null;
                                        this.captionWidth = 0;
                                        this.captionHeight = 0;
                                        this.captionOffsetX = 0;
                                        this.currentCaption = null;
                                        this.docTitleLayout = null;
                                        this.drawImageButton = false;
                                        this.drawVideoImageButton = false;
                                        this.currentPhotoObject = null;
                                        this.photoParentObject = null;
                                        this.currentPhotoObjectThumb = null;
                                        this.currentPhotoObjectThumbStripped = null;
                                        if (!z3) {
                                        }
                                        this.currentPhotoFilter = null;
                                        this.buttonState = i;
                                        this.miniButtonState = i;
                                        this.hasMiniProgress = 0;
                                        if (this.addedForTest) {
                                        }
                                        this.addedForTest = false;
                                        this.photoNotSet = false;
                                        this.drawBackground = r13;
                                        this.drawName = false;
                                        this.useSeekBarWaveform = false;
                                        this.useTranscribeButton = false;
                                        this.drawInstantView = false;
                                        this.drawInstantViewType = 0;
                                        this.drawForwardedName = false;
                                        this.drawCommentButton = false;
                                        this.photoImage.setSideClip(0.0f);
                                        this.photoImage.setAspectFit(false);
                                        this.gradientShader = null;
                                        this.motionBackgroundDrawable = null;
                                        this.imageBackgroundColor = 0;
                                        this.imageBackgroundGradientColor1 = 0;
                                        this.imageBackgroundGradientColor2 = 0;
                                        this.imageBackgroundIntensity = 0.0f;
                                        this.imageBackgroundGradientColor3 = 0;
                                        this.imageBackgroundGradientRotation = 45;
                                        this.imageBackgroundSideColor = 0;
                                        this.mediaBackground = false;
                                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222 = messageObject14.messageOwner.fwd_from;
                                        if (tLRPC$MessageFwdHeader2222222 != null) {
                                        }
                                        this.hasPsaHint = z9;
                                        if (z9) {
                                        }
                                        this.photoImage.setAlpha(f);
                                        if (!z3) {
                                        }
                                        this.pollButtons.clear();
                                        this.availableTimeWidth = 0;
                                        this.photoImage.setForceLoading(false);
                                        this.photoImage.setNeedsQualityThumb(false);
                                        this.photoImage.setShouldGenerateQualityThumb(false);
                                        this.photoImage.setAllowDecodeSingleFrame(false);
                                        this.photoImage.setColorFilter(null);
                                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                                        if (!z45) {
                                        }
                                        messageObject14.reactionsChanged = false;
                                        groupedMessagePosition13 = this.currentPosition;
                                        if (groupedMessagePosition13 == null) {
                                        }
                                        if (messageObject.shouldDrawReactionsInLayout()) {
                                        }
                                        if (z42) {
                                        }
                                        if (this.currentPosition == null) {
                                        }
                                        if (z3) {
                                        }
                                        groupedMessages3 = this.currentMessagesGroup;
                                        if (groupedMessages3 != null) {
                                        }
                                        isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                        if (this.hasDiscussion) {
                                        }
                                        repliesCount = getRepliesCount();
                                        if (!messageObject.shouldDrawWithoutBackground()) {
                                        }
                                        if (!this.isRepliesChat) {
                                        }
                                        this.commentLayout = null;
                                        this.drawCommentNumber = false;
                                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                        i4 = messageObject14.type;
                                        float f8222222222222 = 102.0f;
                                        if (i4 != 0) {
                                        }
                                        if (this.currentPosition != null) {
                                        }
                                        i60 = 5;
                                        groupedMessagePosition3 = this.currentPosition;
                                        if (groupedMessagePosition3 != null) {
                                        }
                                        int i2142222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                        i63 = -1;
                                        messageObject5 = this.currentMessageObject;
                                        if (messageObject5.eventId == 0) {
                                        }
                                        f4 = 0.0f;
                                        if (messageObject.isSponsored()) {
                                        }
                                        this.botButtons.clear();
                                        if (z45) {
                                        }
                                        if (!messageObject4.isRestrictedMessage) {
                                        }
                                        this.substractBackgroundHeight = r15;
                                        this.keyboardHeight = r15;
                                        if (this.drawCommentButton) {
                                        }
                                        z26 = this.drawPinnedBottom;
                                        if (z26) {
                                        }
                                        if (z26) {
                                        }
                                        if (!this.mediaBackground) {
                                        }
                                        if (messageObject4.type != 19) {
                                        }
                                        if (!this.drawPhotoImage) {
                                        }
                                        if (this.documentAttachType != i60) {
                                        }
                                        calculateUnlockXY();
                                        if (z24) {
                                        }
                                        updateAnimatedEmojis();
                                        z43 = r15;
                                        if (z45) {
                                        }
                                        transcribeButton = this.transcribeButton;
                                        if (transcribeButton != null) {
                                        }
                                        updateWaveform();
                                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                        if (!this.currentMessageObject.loadingCancelled) {
                                        }
                                        chatMessageCellDelegate2 = this.delegate;
                                        if (chatMessageCellDelegate2 != null) {
                                        }
                                        this.accessibilityVirtualViewBounds.clear();
                                        this.transitionParams.updatePhotoImageX = true;
                                        updateFlagSecure();
                                    }
                                    this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                                    this.photoImage.setCrossfadeWithOldImage(false);
                                    this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                    this.photoImage.setCrossfadeByScale(0.0f);
                                    this.photoImage.setGradientBitmap(null);
                                    TLRPC$Message tLRPC$Message622 = messageObject14.messageOwner;
                                    this.lastSendState = tLRPC$Message622.send_state;
                                    this.lastDeleteDate = tLRPC$Message622.destroyTime;
                                    this.lastViewsCount = tLRPC$Message622.views;
                                    this.lastRepliesCount = getRepliesCount();
                                    if (z45) {
                                    }
                                    this.gamePreviewPressed = z7;
                                    this.sideButtonPressed = z7;
                                    this.hasNewLineForTime = z7;
                                    this.flipImage = z7;
                                    if (this.isThreadChat) {
                                    }
                                    this.isThreadPost = z47;
                                    this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                                    if (this.isChat) {
                                    }
                                    if (messageObject14.customAvatarDrawable == null) {
                                    }
                                    this.wasLayout = r3;
                                    this.groupPhotoInvisible = r3;
                                    int i13322222 = r3 == true ? 1 : 0;
                                    int i13422222 = r3 == true ? 1 : 0;
                                    this.animatingDrawVideoImageButton = i13322222;
                                    this.drawVideoSize = r3;
                                    this.canStreamVideo = r3;
                                    this.animatingNoSound = r3;
                                    if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                    }
                                    r32 = 0;
                                    this.drawSideButton = 0;
                                    this.replyNameLayout = null;
                                    this.adminLayout = null;
                                    this.checkOnlyButtonPressed = r32;
                                    this.replyTextLayout = null;
                                    AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                    this.lastReplyMessage = null;
                                    this.hasEmbed = r32;
                                    this.autoPlayingMedia = r32;
                                    int i1362222222 = r32 == true ? 1 : 0;
                                    int i1372222222 = r32 == true ? 1 : 0;
                                    this.replyNameWidth = i1362222222;
                                    this.replyTextWidth = r32;
                                    this.viaWidth = r32;
                                    this.viaNameWidth = r32;
                                    this.addedCaptionHeight = r32;
                                    this.currentReplyPhoto = null;
                                    this.currentUser = null;
                                    this.currentChat = null;
                                    this.currentReplyUserId = 0L;
                                    this.currentViaBotUser = null;
                                    this.instantViewLayout = null;
                                    this.drawNameLayout = r32;
                                    this.lastLoadingSizeTotal = 0L;
                                    if (this.scheduledInvalidate) {
                                    }
                                    this.links.clear();
                                    this.pressedLink = null;
                                    this.pressedEmoji = null;
                                    this.pressedLinkType = -1;
                                    messageObject14.forceUpdate = r32;
                                    this.drawPhotoImage = r32;
                                    this.drawMediaCheckBox = r32;
                                    this.hasLinkPreview = r32;
                                    this.hasOldCaptionPreview = r32;
                                    this.hasGamePreview = r32;
                                    this.hasInvoicePreview = r32;
                                    this.commentButtonPressed = r32;
                                    this.instantButtonPressed = r32;
                                    this.instantPressed = r32;
                                    if (!z6) {
                                    }
                                    this.spoilerPressed = null;
                                    this.isCaptionSpoilerPressed = false;
                                    this.isSpoilerRevealing = false;
                                    this.linkPreviewPressed = false;
                                    this.buttonPressed = 0;
                                    this.additionalTimeOffsetY = 0;
                                    this.miniButtonPressed = 0;
                                    this.pressedBotButton = i;
                                    this.pressedVoteButton = i;
                                    this.pollHintPressed = false;
                                    this.psaHintPressed = false;
                                    this.linkPreviewHeight = 0;
                                    this.mediaOffsetY = 0;
                                    this.documentAttachType = 0;
                                    this.documentAttach = null;
                                    this.descriptionLayout = null;
                                    this.titleLayout = null;
                                    this.videoInfoLayout = null;
                                    this.photosCountLayout = null;
                                    this.siteNameLayout = null;
                                    this.authorLayout = null;
                                    this.captionLayout = null;
                                    this.captionWidth = 0;
                                    this.captionHeight = 0;
                                    this.captionOffsetX = 0;
                                    this.currentCaption = null;
                                    this.docTitleLayout = null;
                                    this.drawImageButton = false;
                                    this.drawVideoImageButton = false;
                                    this.currentPhotoObject = null;
                                    this.photoParentObject = null;
                                    this.currentPhotoObjectThumb = null;
                                    this.currentPhotoObjectThumbStripped = null;
                                    if (!z3) {
                                    }
                                    this.currentPhotoFilter = null;
                                    this.buttonState = i;
                                    this.miniButtonState = i;
                                    this.hasMiniProgress = 0;
                                    if (this.addedForTest) {
                                    }
                                    this.addedForTest = false;
                                    this.photoNotSet = false;
                                    this.drawBackground = r13;
                                    this.drawName = false;
                                    this.useSeekBarWaveform = false;
                                    this.useTranscribeButton = false;
                                    this.drawInstantView = false;
                                    this.drawInstantViewType = 0;
                                    this.drawForwardedName = false;
                                    this.drawCommentButton = false;
                                    this.photoImage.setSideClip(0.0f);
                                    this.photoImage.setAspectFit(false);
                                    this.gradientShader = null;
                                    this.motionBackgroundDrawable = null;
                                    this.imageBackgroundColor = 0;
                                    this.imageBackgroundGradientColor1 = 0;
                                    this.imageBackgroundGradientColor2 = 0;
                                    this.imageBackgroundIntensity = 0.0f;
                                    this.imageBackgroundGradientColor3 = 0;
                                    this.imageBackgroundGradientRotation = 45;
                                    this.imageBackgroundSideColor = 0;
                                    this.mediaBackground = false;
                                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222 = messageObject14.messageOwner.fwd_from;
                                    if (tLRPC$MessageFwdHeader22222222 != null) {
                                    }
                                    this.hasPsaHint = z9;
                                    if (z9) {
                                    }
                                    this.photoImage.setAlpha(f);
                                    if (!z3) {
                                    }
                                    this.pollButtons.clear();
                                    this.availableTimeWidth = 0;
                                    this.photoImage.setForceLoading(false);
                                    this.photoImage.setNeedsQualityThumb(false);
                                    this.photoImage.setShouldGenerateQualityThumb(false);
                                    this.photoImage.setAllowDecodeSingleFrame(false);
                                    this.photoImage.setColorFilter(null);
                                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                                    if (!z45) {
                                    }
                                    messageObject14.reactionsChanged = false;
                                    groupedMessagePosition13 = this.currentPosition;
                                    if (groupedMessagePosition13 == null) {
                                    }
                                    if (messageObject.shouldDrawReactionsInLayout()) {
                                    }
                                    if (z42) {
                                    }
                                    if (this.currentPosition == null) {
                                    }
                                    if (z3) {
                                    }
                                    groupedMessages3 = this.currentMessagesGroup;
                                    if (groupedMessages3 != null) {
                                    }
                                    isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                    if (this.hasDiscussion) {
                                    }
                                    repliesCount = getRepliesCount();
                                    if (!messageObject.shouldDrawWithoutBackground()) {
                                    }
                                    if (!this.isRepliesChat) {
                                    }
                                    this.commentLayout = null;
                                    this.drawCommentNumber = false;
                                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                    i4 = messageObject14.type;
                                    float f82222222222222 = 102.0f;
                                    if (i4 != 0) {
                                    }
                                    if (this.currentPosition != null) {
                                    }
                                    i60 = 5;
                                    groupedMessagePosition3 = this.currentPosition;
                                    if (groupedMessagePosition3 != null) {
                                    }
                                    int i21422222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                    i63 = -1;
                                    messageObject5 = this.currentMessageObject;
                                    if (messageObject5.eventId == 0) {
                                    }
                                    f4 = 0.0f;
                                    if (messageObject.isSponsored()) {
                                    }
                                    this.botButtons.clear();
                                    if (z45) {
                                    }
                                    if (!messageObject4.isRestrictedMessage) {
                                    }
                                    this.substractBackgroundHeight = r15;
                                    this.keyboardHeight = r15;
                                    if (this.drawCommentButton) {
                                    }
                                    z26 = this.drawPinnedBottom;
                                    if (z26) {
                                    }
                                    if (z26) {
                                    }
                                    if (!this.mediaBackground) {
                                    }
                                    if (messageObject4.type != 19) {
                                    }
                                    if (!this.drawPhotoImage) {
                                    }
                                    if (this.documentAttachType != i60) {
                                    }
                                    calculateUnlockXY();
                                    if (z24) {
                                    }
                                    updateAnimatedEmojis();
                                    z43 = r15;
                                    if (z45) {
                                    }
                                    transcribeButton = this.transcribeButton;
                                    if (transcribeButton != null) {
                                    }
                                    updateWaveform();
                                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                    if (!this.currentMessageObject.loadingCancelled) {
                                    }
                                    chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                    }
                                    this.accessibilityVirtualViewBounds.clear();
                                    this.transitionParams.updatePhotoImageX = true;
                                    updateFlagSecure();
                                }
                                this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition15 = this.currentPosition) == null || (groupedMessagePosition15.flags & 8) != 0);
                                boolean z4622 = this.isPlayingRound;
                                this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                                this.photoImage.setCrossfadeWithOldImage(false);
                                this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                this.photoImage.setCrossfadeByScale(0.0f);
                                this.photoImage.setGradientBitmap(null);
                                TLRPC$Message tLRPC$Message6222 = messageObject14.messageOwner;
                                this.lastSendState = tLRPC$Message6222.send_state;
                                this.lastDeleteDate = tLRPC$Message6222.destroyTime;
                                this.lastViewsCount = tLRPC$Message6222.views;
                                this.lastRepliesCount = getRepliesCount();
                                if (z45) {
                                }
                                this.gamePreviewPressed = z7;
                                this.sideButtonPressed = z7;
                                this.hasNewLineForTime = z7;
                                this.flipImage = z7;
                                if (this.isThreadChat) {
                                }
                                this.isThreadPost = z47;
                                this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                                if (this.isChat) {
                                }
                                if (messageObject14.customAvatarDrawable == null) {
                                }
                                this.wasLayout = r3;
                                this.groupPhotoInvisible = r3;
                                int i133222222 = r3 == true ? 1 : 0;
                                int i134222222 = r3 == true ? 1 : 0;
                                this.animatingDrawVideoImageButton = i133222222;
                                this.drawVideoSize = r3;
                                this.canStreamVideo = r3;
                                this.animatingNoSound = r3;
                                if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                                }
                                r32 = 0;
                                this.drawSideButton = 0;
                                this.replyNameLayout = null;
                                this.adminLayout = null;
                                this.checkOnlyButtonPressed = r32;
                                this.replyTextLayout = null;
                                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                                this.lastReplyMessage = null;
                                this.hasEmbed = r32;
                                this.autoPlayingMedia = r32;
                                int i13622222222 = r32 == true ? 1 : 0;
                                int i13722222222 = r32 == true ? 1 : 0;
                                this.replyNameWidth = i13622222222;
                                this.replyTextWidth = r32;
                                this.viaWidth = r32;
                                this.viaNameWidth = r32;
                                this.addedCaptionHeight = r32;
                                this.currentReplyPhoto = null;
                                this.currentUser = null;
                                this.currentChat = null;
                                this.currentReplyUserId = 0L;
                                this.currentViaBotUser = null;
                                this.instantViewLayout = null;
                                this.drawNameLayout = r32;
                                this.lastLoadingSizeTotal = 0L;
                                if (this.scheduledInvalidate) {
                                }
                                this.links.clear();
                                this.pressedLink = null;
                                this.pressedEmoji = null;
                                this.pressedLinkType = -1;
                                messageObject14.forceUpdate = r32;
                                this.drawPhotoImage = r32;
                                this.drawMediaCheckBox = r32;
                                this.hasLinkPreview = r32;
                                this.hasOldCaptionPreview = r32;
                                this.hasGamePreview = r32;
                                this.hasInvoicePreview = r32;
                                this.commentButtonPressed = r32;
                                this.instantButtonPressed = r32;
                                this.instantPressed = r32;
                                if (!z6) {
                                }
                                this.spoilerPressed = null;
                                this.isCaptionSpoilerPressed = false;
                                this.isSpoilerRevealing = false;
                                this.linkPreviewPressed = false;
                                this.buttonPressed = 0;
                                this.additionalTimeOffsetY = 0;
                                this.miniButtonPressed = 0;
                                this.pressedBotButton = i;
                                this.pressedVoteButton = i;
                                this.pollHintPressed = false;
                                this.psaHintPressed = false;
                                this.linkPreviewHeight = 0;
                                this.mediaOffsetY = 0;
                                this.documentAttachType = 0;
                                this.documentAttach = null;
                                this.descriptionLayout = null;
                                this.titleLayout = null;
                                this.videoInfoLayout = null;
                                this.photosCountLayout = null;
                                this.siteNameLayout = null;
                                this.authorLayout = null;
                                this.captionLayout = null;
                                this.captionWidth = 0;
                                this.captionHeight = 0;
                                this.captionOffsetX = 0;
                                this.currentCaption = null;
                                this.docTitleLayout = null;
                                this.drawImageButton = false;
                                this.drawVideoImageButton = false;
                                this.currentPhotoObject = null;
                                this.photoParentObject = null;
                                this.currentPhotoObjectThumb = null;
                                this.currentPhotoObjectThumbStripped = null;
                                if (!z3) {
                                }
                                this.currentPhotoFilter = null;
                                this.buttonState = i;
                                this.miniButtonState = i;
                                this.hasMiniProgress = 0;
                                if (this.addedForTest) {
                                }
                                this.addedForTest = false;
                                this.photoNotSet = false;
                                this.drawBackground = r13;
                                this.drawName = false;
                                this.useSeekBarWaveform = false;
                                this.useTranscribeButton = false;
                                this.drawInstantView = false;
                                this.drawInstantViewType = 0;
                                this.drawForwardedName = false;
                                this.drawCommentButton = false;
                                this.photoImage.setSideClip(0.0f);
                                this.photoImage.setAspectFit(false);
                                this.gradientShader = null;
                                this.motionBackgroundDrawable = null;
                                this.imageBackgroundColor = 0;
                                this.imageBackgroundGradientColor1 = 0;
                                this.imageBackgroundGradientColor2 = 0;
                                this.imageBackgroundIntensity = 0.0f;
                                this.imageBackgroundGradientColor3 = 0;
                                this.imageBackgroundGradientRotation = 45;
                                this.imageBackgroundSideColor = 0;
                                this.mediaBackground = false;
                                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222 = messageObject14.messageOwner.fwd_from;
                                if (tLRPC$MessageFwdHeader222222222 != null) {
                                }
                                this.hasPsaHint = z9;
                                if (z9) {
                                }
                                this.photoImage.setAlpha(f);
                                if (!z3) {
                                }
                                this.pollButtons.clear();
                                this.availableTimeWidth = 0;
                                this.photoImage.setForceLoading(false);
                                this.photoImage.setNeedsQualityThumb(false);
                                this.photoImage.setShouldGenerateQualityThumb(false);
                                this.photoImage.setAllowDecodeSingleFrame(false);
                                this.photoImage.setColorFilter(null);
                                this.photoImage.setMediaStartEndTime(-1L, -1L);
                                if (!z45) {
                                }
                                messageObject14.reactionsChanged = false;
                                groupedMessagePosition13 = this.currentPosition;
                                if (groupedMessagePosition13 == null) {
                                }
                                if (messageObject.shouldDrawReactionsInLayout()) {
                                }
                                if (z42) {
                                }
                                if (this.currentPosition == null) {
                                }
                                if (z3) {
                                }
                                groupedMessages3 = this.currentMessagesGroup;
                                if (groupedMessages3 != null) {
                                }
                                isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                                if (this.hasDiscussion) {
                                }
                                repliesCount = getRepliesCount();
                                if (!messageObject.shouldDrawWithoutBackground()) {
                                }
                                if (!this.isRepliesChat) {
                                }
                                this.commentLayout = null;
                                this.drawCommentNumber = false;
                                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                                i4 = messageObject14.type;
                                float f822222222222222 = 102.0f;
                                if (i4 != 0) {
                                }
                                if (this.currentPosition != null) {
                                }
                                i60 = 5;
                                groupedMessagePosition3 = this.currentPosition;
                                if (groupedMessagePosition3 != null) {
                                }
                                int i214222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                                i63 = -1;
                                messageObject5 = this.currentMessageObject;
                                if (messageObject5.eventId == 0) {
                                }
                                f4 = 0.0f;
                                if (messageObject.isSponsored()) {
                                }
                                this.botButtons.clear();
                                if (z45) {
                                }
                                if (!messageObject4.isRestrictedMessage) {
                                }
                                this.substractBackgroundHeight = r15;
                                this.keyboardHeight = r15;
                                if (this.drawCommentButton) {
                                }
                                z26 = this.drawPinnedBottom;
                                if (z26) {
                                }
                                if (z26) {
                                }
                                if (!this.mediaBackground) {
                                }
                                if (messageObject4.type != 19) {
                                }
                                if (!this.drawPhotoImage) {
                                }
                                if (this.documentAttachType != i60) {
                                }
                                calculateUnlockXY();
                                if (z24) {
                                }
                                updateAnimatedEmojis();
                                z43 = r15;
                                if (z45) {
                                }
                                transcribeButton = this.transcribeButton;
                                if (transcribeButton != null) {
                                }
                                updateWaveform();
                                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                                if (!this.currentMessageObject.loadingCancelled) {
                                }
                                chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                }
                                this.accessibilityVirtualViewBounds.clear();
                                this.transitionParams.updatePhotoImageX = true;
                                updateFlagSecure();
                            }
                            this.drawPinnedTop = this.pinnedTop && ((groupedMessagePosition16 = this.currentPosition) == null || (groupedMessagePosition16.flags & 4) != 0);
                            this.drawPinnedBottom = this.pinnedBottom && ((groupedMessagePosition15 = this.currentPosition) == null || (groupedMessagePosition15.flags & 8) != 0);
                            boolean z46222 = this.isPlayingRound;
                            this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                            this.photoImage.setCrossfadeWithOldImage(false);
                            this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                            this.photoImage.setCrossfadeByScale(0.0f);
                            this.photoImage.setGradientBitmap(null);
                            TLRPC$Message tLRPC$Message62222 = messageObject14.messageOwner;
                            this.lastSendState = tLRPC$Message62222.send_state;
                            this.lastDeleteDate = tLRPC$Message62222.destroyTime;
                            this.lastViewsCount = tLRPC$Message62222.views;
                            this.lastRepliesCount = getRepliesCount();
                            if (z45) {
                            }
                            this.gamePreviewPressed = z7;
                            this.sideButtonPressed = z7;
                            this.hasNewLineForTime = z7;
                            this.flipImage = z7;
                            if (this.isThreadChat) {
                            }
                            this.isThreadPost = z47;
                            this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                            if (this.isChat) {
                            }
                            if (messageObject14.customAvatarDrawable == null) {
                            }
                            this.wasLayout = r3;
                            this.groupPhotoInvisible = r3;
                            int i1332222222 = r3 == true ? 1 : 0;
                            int i1342222222 = r3 == true ? 1 : 0;
                            this.animatingDrawVideoImageButton = i1332222222;
                            this.drawVideoSize = r3;
                            this.canStreamVideo = r3;
                            this.animatingNoSound = r3;
                            if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                            }
                            r32 = 0;
                            this.drawSideButton = 0;
                            this.replyNameLayout = null;
                            this.adminLayout = null;
                            this.checkOnlyButtonPressed = r32;
                            this.replyTextLayout = null;
                            AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                            this.lastReplyMessage = null;
                            this.hasEmbed = r32;
                            this.autoPlayingMedia = r32;
                            int i136222222222 = r32 == true ? 1 : 0;
                            int i137222222222 = r32 == true ? 1 : 0;
                            this.replyNameWidth = i136222222222;
                            this.replyTextWidth = r32;
                            this.viaWidth = r32;
                            this.viaNameWidth = r32;
                            this.addedCaptionHeight = r32;
                            this.currentReplyPhoto = null;
                            this.currentUser = null;
                            this.currentChat = null;
                            this.currentReplyUserId = 0L;
                            this.currentViaBotUser = null;
                            this.instantViewLayout = null;
                            this.drawNameLayout = r32;
                            this.lastLoadingSizeTotal = 0L;
                            if (this.scheduledInvalidate) {
                            }
                            this.links.clear();
                            this.pressedLink = null;
                            this.pressedEmoji = null;
                            this.pressedLinkType = -1;
                            messageObject14.forceUpdate = r32;
                            this.drawPhotoImage = r32;
                            this.drawMediaCheckBox = r32;
                            this.hasLinkPreview = r32;
                            this.hasOldCaptionPreview = r32;
                            this.hasGamePreview = r32;
                            this.hasInvoicePreview = r32;
                            this.commentButtonPressed = r32;
                            this.instantButtonPressed = r32;
                            this.instantPressed = r32;
                            if (!z6) {
                            }
                            this.spoilerPressed = null;
                            this.isCaptionSpoilerPressed = false;
                            this.isSpoilerRevealing = false;
                            this.linkPreviewPressed = false;
                            this.buttonPressed = 0;
                            this.additionalTimeOffsetY = 0;
                            this.miniButtonPressed = 0;
                            this.pressedBotButton = i;
                            this.pressedVoteButton = i;
                            this.pollHintPressed = false;
                            this.psaHintPressed = false;
                            this.linkPreviewHeight = 0;
                            this.mediaOffsetY = 0;
                            this.documentAttachType = 0;
                            this.documentAttach = null;
                            this.descriptionLayout = null;
                            this.titleLayout = null;
                            this.videoInfoLayout = null;
                            this.photosCountLayout = null;
                            this.siteNameLayout = null;
                            this.authorLayout = null;
                            this.captionLayout = null;
                            this.captionWidth = 0;
                            this.captionHeight = 0;
                            this.captionOffsetX = 0;
                            this.currentCaption = null;
                            this.docTitleLayout = null;
                            this.drawImageButton = false;
                            this.drawVideoImageButton = false;
                            this.currentPhotoObject = null;
                            this.photoParentObject = null;
                            this.currentPhotoObjectThumb = null;
                            this.currentPhotoObjectThumbStripped = null;
                            if (!z3) {
                            }
                            this.currentPhotoFilter = null;
                            this.buttonState = i;
                            this.miniButtonState = i;
                            this.hasMiniProgress = 0;
                            if (this.addedForTest) {
                            }
                            this.addedForTest = false;
                            this.photoNotSet = false;
                            this.drawBackground = r13;
                            this.drawName = false;
                            this.useSeekBarWaveform = false;
                            this.useTranscribeButton = false;
                            this.drawInstantView = false;
                            this.drawInstantViewType = 0;
                            this.drawForwardedName = false;
                            this.drawCommentButton = false;
                            this.photoImage.setSideClip(0.0f);
                            this.photoImage.setAspectFit(false);
                            this.gradientShader = null;
                            this.motionBackgroundDrawable = null;
                            this.imageBackgroundColor = 0;
                            this.imageBackgroundGradientColor1 = 0;
                            this.imageBackgroundGradientColor2 = 0;
                            this.imageBackgroundIntensity = 0.0f;
                            this.imageBackgroundGradientColor3 = 0;
                            this.imageBackgroundGradientRotation = 45;
                            this.imageBackgroundSideColor = 0;
                            this.mediaBackground = false;
                            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222222 = messageObject14.messageOwner.fwd_from;
                            if (tLRPC$MessageFwdHeader2222222222 != null) {
                            }
                            this.hasPsaHint = z9;
                            if (z9) {
                            }
                            this.photoImage.setAlpha(f);
                            if (!z3) {
                            }
                            this.pollButtons.clear();
                            this.availableTimeWidth = 0;
                            this.photoImage.setForceLoading(false);
                            this.photoImage.setNeedsQualityThumb(false);
                            this.photoImage.setShouldGenerateQualityThumb(false);
                            this.photoImage.setAllowDecodeSingleFrame(false);
                            this.photoImage.setColorFilter(null);
                            this.photoImage.setMediaStartEndTime(-1L, -1L);
                            if (!z45) {
                            }
                            messageObject14.reactionsChanged = false;
                            groupedMessagePosition13 = this.currentPosition;
                            if (groupedMessagePosition13 == null) {
                            }
                            if (messageObject.shouldDrawReactionsInLayout()) {
                            }
                            if (z42) {
                            }
                            if (this.currentPosition == null) {
                            }
                            if (z3) {
                            }
                            groupedMessages3 = this.currentMessagesGroup;
                            if (groupedMessages3 != null) {
                            }
                            isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                            if (this.hasDiscussion) {
                            }
                            repliesCount = getRepliesCount();
                            if (!messageObject.shouldDrawWithoutBackground()) {
                            }
                            if (!this.isRepliesChat) {
                            }
                            this.commentLayout = null;
                            this.drawCommentNumber = false;
                            this.drawSideButton = this.isRepliesChat ? 3 : 2;
                            i4 = messageObject14.type;
                            float f8222222222222222 = 102.0f;
                            if (i4 != 0) {
                            }
                            if (this.currentPosition != null) {
                            }
                            i60 = 5;
                            groupedMessagePosition3 = this.currentPosition;
                            if (groupedMessagePosition3 != null) {
                            }
                            int i2142222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                            i63 = -1;
                            messageObject5 = this.currentMessageObject;
                            if (messageObject5.eventId == 0) {
                            }
                            f4 = 0.0f;
                            if (messageObject.isSponsored()) {
                            }
                            this.botButtons.clear();
                            if (z45) {
                            }
                            if (!messageObject4.isRestrictedMessage) {
                            }
                            this.substractBackgroundHeight = r15;
                            this.keyboardHeight = r15;
                            if (this.drawCommentButton) {
                            }
                            z26 = this.drawPinnedBottom;
                            if (z26) {
                            }
                            if (z26) {
                            }
                            if (!this.mediaBackground) {
                            }
                            if (messageObject4.type != 19) {
                            }
                            if (!this.drawPhotoImage) {
                            }
                            if (this.documentAttachType != i60) {
                            }
                            calculateUnlockXY();
                            if (z24) {
                            }
                            updateAnimatedEmojis();
                            z43 = r15;
                            if (z45) {
                            }
                            transcribeButton = this.transcribeButton;
                            if (transcribeButton != null) {
                            }
                            updateWaveform();
                            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                            if (!this.currentMessageObject.loadingCancelled) {
                            }
                            chatMessageCellDelegate2 = this.delegate;
                            if (chatMessageCellDelegate2 != null) {
                            }
                            this.accessibilityVirtualViewBounds.clear();
                            this.transitionParams.updatePhotoImageX = true;
                            updateFlagSecure();
                        }
                        this.drawPinnedTop = this.pinnedTop;
                        this.drawPinnedBottom = this.pinnedBottom;
                        boolean z462222 = this.isPlayingRound;
                        this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                        this.photoImage.setCrossfadeWithOldImage(false);
                        this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                        this.photoImage.setCrossfadeByScale(0.0f);
                        this.photoImage.setGradientBitmap(null);
                        TLRPC$Message tLRPC$Message622222 = messageObject14.messageOwner;
                        this.lastSendState = tLRPC$Message622222.send_state;
                        this.lastDeleteDate = tLRPC$Message622222.destroyTime;
                        this.lastViewsCount = tLRPC$Message622222.views;
                        this.lastRepliesCount = getRepliesCount();
                        if (z45) {
                        }
                        this.gamePreviewPressed = z7;
                        this.sideButtonPressed = z7;
                        this.hasNewLineForTime = z7;
                        this.flipImage = z7;
                        if (this.isThreadChat) {
                        }
                        this.isThreadPost = z47;
                        this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                        if (this.isChat) {
                        }
                        if (messageObject14.customAvatarDrawable == null) {
                        }
                        this.wasLayout = r3;
                        this.groupPhotoInvisible = r3;
                        int i13322222222 = r3 == true ? 1 : 0;
                        int i13422222222 = r3 == true ? 1 : 0;
                        this.animatingDrawVideoImageButton = i13322222222;
                        this.drawVideoSize = r3;
                        this.canStreamVideo = r3;
                        this.animatingNoSound = r3;
                        if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                        }
                        r32 = 0;
                        this.drawSideButton = 0;
                        this.replyNameLayout = null;
                        this.adminLayout = null;
                        this.checkOnlyButtonPressed = r32;
                        this.replyTextLayout = null;
                        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                        this.lastReplyMessage = null;
                        this.hasEmbed = r32;
                        this.autoPlayingMedia = r32;
                        int i1362222222222 = r32 == true ? 1 : 0;
                        int i1372222222222 = r32 == true ? 1 : 0;
                        this.replyNameWidth = i1362222222222;
                        this.replyTextWidth = r32;
                        this.viaWidth = r32;
                        this.viaNameWidth = r32;
                        this.addedCaptionHeight = r32;
                        this.currentReplyPhoto = null;
                        this.currentUser = null;
                        this.currentChat = null;
                        this.currentReplyUserId = 0L;
                        this.currentViaBotUser = null;
                        this.instantViewLayout = null;
                        this.drawNameLayout = r32;
                        this.lastLoadingSizeTotal = 0L;
                        if (this.scheduledInvalidate) {
                        }
                        this.links.clear();
                        this.pressedLink = null;
                        this.pressedEmoji = null;
                        this.pressedLinkType = -1;
                        messageObject14.forceUpdate = r32;
                        this.drawPhotoImage = r32;
                        this.drawMediaCheckBox = r32;
                        this.hasLinkPreview = r32;
                        this.hasOldCaptionPreview = r32;
                        this.hasGamePreview = r32;
                        this.hasInvoicePreview = r32;
                        this.commentButtonPressed = r32;
                        this.instantButtonPressed = r32;
                        this.instantPressed = r32;
                        if (!z6) {
                        }
                        this.spoilerPressed = null;
                        this.isCaptionSpoilerPressed = false;
                        this.isSpoilerRevealing = false;
                        this.linkPreviewPressed = false;
                        this.buttonPressed = 0;
                        this.additionalTimeOffsetY = 0;
                        this.miniButtonPressed = 0;
                        this.pressedBotButton = i;
                        this.pressedVoteButton = i;
                        this.pollHintPressed = false;
                        this.psaHintPressed = false;
                        this.linkPreviewHeight = 0;
                        this.mediaOffsetY = 0;
                        this.documentAttachType = 0;
                        this.documentAttach = null;
                        this.descriptionLayout = null;
                        this.titleLayout = null;
                        this.videoInfoLayout = null;
                        this.photosCountLayout = null;
                        this.siteNameLayout = null;
                        this.authorLayout = null;
                        this.captionLayout = null;
                        this.captionWidth = 0;
                        this.captionHeight = 0;
                        this.captionOffsetX = 0;
                        this.currentCaption = null;
                        this.docTitleLayout = null;
                        this.drawImageButton = false;
                        this.drawVideoImageButton = false;
                        this.currentPhotoObject = null;
                        this.photoParentObject = null;
                        this.currentPhotoObjectThumb = null;
                        this.currentPhotoObjectThumbStripped = null;
                        if (!z3) {
                        }
                        this.currentPhotoFilter = null;
                        this.buttonState = i;
                        this.miniButtonState = i;
                        this.hasMiniProgress = 0;
                        if (this.addedForTest) {
                        }
                        this.addedForTest = false;
                        this.photoNotSet = false;
                        this.drawBackground = r13;
                        this.drawName = false;
                        this.useSeekBarWaveform = false;
                        this.useTranscribeButton = false;
                        this.drawInstantView = false;
                        this.drawInstantViewType = 0;
                        this.drawForwardedName = false;
                        this.drawCommentButton = false;
                        this.photoImage.setSideClip(0.0f);
                        this.photoImage.setAspectFit(false);
                        this.gradientShader = null;
                        this.motionBackgroundDrawable = null;
                        this.imageBackgroundColor = 0;
                        this.imageBackgroundGradientColor1 = 0;
                        this.imageBackgroundGradientColor2 = 0;
                        this.imageBackgroundIntensity = 0.0f;
                        this.imageBackgroundGradientColor3 = 0;
                        this.imageBackgroundGradientRotation = 45;
                        this.imageBackgroundSideColor = 0;
                        this.mediaBackground = false;
                        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222222 = messageObject14.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader22222222222 != null) {
                        }
                        this.hasPsaHint = z9;
                        if (z9) {
                        }
                        this.photoImage.setAlpha(f);
                        if (!z3) {
                        }
                        this.pollButtons.clear();
                        this.availableTimeWidth = 0;
                        this.photoImage.setForceLoading(false);
                        this.photoImage.setNeedsQualityThumb(false);
                        this.photoImage.setShouldGenerateQualityThumb(false);
                        this.photoImage.setAllowDecodeSingleFrame(false);
                        this.photoImage.setColorFilter(null);
                        this.photoImage.setMediaStartEndTime(-1L, -1L);
                        if (!z45) {
                        }
                        messageObject14.reactionsChanged = false;
                        groupedMessagePosition13 = this.currentPosition;
                        if (groupedMessagePosition13 == null) {
                        }
                        if (messageObject.shouldDrawReactionsInLayout()) {
                        }
                        if (z42) {
                        }
                        if (this.currentPosition == null) {
                        }
                        if (z3) {
                        }
                        groupedMessages3 = this.currentMessagesGroup;
                        if (groupedMessages3 != null) {
                        }
                        isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                        if (this.hasDiscussion) {
                        }
                        repliesCount = getRepliesCount();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                        }
                        if (!this.isRepliesChat) {
                        }
                        this.commentLayout = null;
                        this.drawCommentNumber = false;
                        this.drawSideButton = this.isRepliesChat ? 3 : 2;
                        i4 = messageObject14.type;
                        float f82222222222222222 = 102.0f;
                        if (i4 != 0) {
                        }
                        if (this.currentPosition != null) {
                        }
                        i60 = 5;
                        groupedMessagePosition3 = this.currentPosition;
                        if (groupedMessagePosition3 != null) {
                        }
                        int i21422222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                        i63 = -1;
                        messageObject5 = this.currentMessageObject;
                        if (messageObject5.eventId == 0) {
                        }
                        f4 = 0.0f;
                        if (messageObject.isSponsored()) {
                        }
                        this.botButtons.clear();
                        if (z45) {
                        }
                        if (!messageObject4.isRestrictedMessage) {
                        }
                        this.substractBackgroundHeight = r15;
                        this.keyboardHeight = r15;
                        if (this.drawCommentButton) {
                        }
                        z26 = this.drawPinnedBottom;
                        if (z26) {
                        }
                        if (z26) {
                        }
                        if (!this.mediaBackground) {
                        }
                        if (messageObject4.type != 19) {
                        }
                        if (!this.drawPhotoImage) {
                        }
                        if (this.documentAttachType != i60) {
                        }
                        calculateUnlockXY();
                        if (z24) {
                        }
                        updateAnimatedEmojis();
                        z43 = r15;
                        if (z45) {
                        }
                        transcribeButton = this.transcribeButton;
                        if (transcribeButton != null) {
                        }
                        updateWaveform();
                        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                        if (!this.currentMessageObject.loadingCancelled) {
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null) {
                        }
                        this.accessibilityVirtualViewBounds.clear();
                        this.transitionParams.updatePhotoImageX = true;
                        updateFlagSecure();
                    }
                    this.currentMessagesGroup = null;
                    this.currentPosition = null;
                    groupedMessages2 = this.currentMessagesGroup;
                    if (groupedMessages2 == null) {
                    }
                    this.drawPinnedTop = this.pinnedTop;
                    this.drawPinnedBottom = this.pinnedBottom;
                    boolean z4622222 = this.isPlayingRound;
                    this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                    this.photoImage.setCrossfadeWithOldImage(false);
                    this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                    this.photoImage.setCrossfadeByScale(0.0f);
                    this.photoImage.setGradientBitmap(null);
                    TLRPC$Message tLRPC$Message6222222 = messageObject14.messageOwner;
                    this.lastSendState = tLRPC$Message6222222.send_state;
                    this.lastDeleteDate = tLRPC$Message6222222.destroyTime;
                    this.lastViewsCount = tLRPC$Message6222222.views;
                    this.lastRepliesCount = getRepliesCount();
                    if (z45) {
                    }
                    this.gamePreviewPressed = z7;
                    this.sideButtonPressed = z7;
                    this.hasNewLineForTime = z7;
                    this.flipImage = z7;
                    if (this.isThreadChat) {
                    }
                    this.isThreadPost = z47;
                    this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                    if (this.isChat) {
                    }
                    if (messageObject14.customAvatarDrawable == null) {
                    }
                    this.wasLayout = r3;
                    this.groupPhotoInvisible = r3;
                    int i133222222222 = r3 == true ? 1 : 0;
                    int i134222222222 = r3 == true ? 1 : 0;
                    this.animatingDrawVideoImageButton = i133222222222;
                    this.drawVideoSize = r3;
                    this.canStreamVideo = r3;
                    this.animatingNoSound = r3;
                    if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                    }
                    r32 = 0;
                    this.drawSideButton = 0;
                    this.replyNameLayout = null;
                    this.adminLayout = null;
                    this.checkOnlyButtonPressed = r32;
                    this.replyTextLayout = null;
                    AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                    this.lastReplyMessage = null;
                    this.hasEmbed = r32;
                    this.autoPlayingMedia = r32;
                    int i13622222222222 = r32 == true ? 1 : 0;
                    int i13722222222222 = r32 == true ? 1 : 0;
                    this.replyNameWidth = i13622222222222;
                    this.replyTextWidth = r32;
                    this.viaWidth = r32;
                    this.viaNameWidth = r32;
                    this.addedCaptionHeight = r32;
                    this.currentReplyPhoto = null;
                    this.currentUser = null;
                    this.currentChat = null;
                    this.currentReplyUserId = 0L;
                    this.currentViaBotUser = null;
                    this.instantViewLayout = null;
                    this.drawNameLayout = r32;
                    this.lastLoadingSizeTotal = 0L;
                    if (this.scheduledInvalidate) {
                    }
                    this.links.clear();
                    this.pressedLink = null;
                    this.pressedEmoji = null;
                    this.pressedLinkType = -1;
                    messageObject14.forceUpdate = r32;
                    this.drawPhotoImage = r32;
                    this.drawMediaCheckBox = r32;
                    this.hasLinkPreview = r32;
                    this.hasOldCaptionPreview = r32;
                    this.hasGamePreview = r32;
                    this.hasInvoicePreview = r32;
                    this.commentButtonPressed = r32;
                    this.instantButtonPressed = r32;
                    this.instantPressed = r32;
                    if (!z6) {
                    }
                    this.spoilerPressed = null;
                    this.isCaptionSpoilerPressed = false;
                    this.isSpoilerRevealing = false;
                    this.linkPreviewPressed = false;
                    this.buttonPressed = 0;
                    this.additionalTimeOffsetY = 0;
                    this.miniButtonPressed = 0;
                    this.pressedBotButton = i;
                    this.pressedVoteButton = i;
                    this.pollHintPressed = false;
                    this.psaHintPressed = false;
                    this.linkPreviewHeight = 0;
                    this.mediaOffsetY = 0;
                    this.documentAttachType = 0;
                    this.documentAttach = null;
                    this.descriptionLayout = null;
                    this.titleLayout = null;
                    this.videoInfoLayout = null;
                    this.photosCountLayout = null;
                    this.siteNameLayout = null;
                    this.authorLayout = null;
                    this.captionLayout = null;
                    this.captionWidth = 0;
                    this.captionHeight = 0;
                    this.captionOffsetX = 0;
                    this.currentCaption = null;
                    this.docTitleLayout = null;
                    this.drawImageButton = false;
                    this.drawVideoImageButton = false;
                    this.currentPhotoObject = null;
                    this.photoParentObject = null;
                    this.currentPhotoObjectThumb = null;
                    this.currentPhotoObjectThumbStripped = null;
                    if (!z3) {
                    }
                    this.currentPhotoFilter = null;
                    this.buttonState = i;
                    this.miniButtonState = i;
                    this.hasMiniProgress = 0;
                    if (this.addedForTest) {
                    }
                    this.addedForTest = false;
                    this.photoNotSet = false;
                    this.drawBackground = r13;
                    this.drawName = false;
                    this.useSeekBarWaveform = false;
                    this.useTranscribeButton = false;
                    this.drawInstantView = false;
                    this.drawInstantViewType = 0;
                    this.drawForwardedName = false;
                    this.drawCommentButton = false;
                    this.photoImage.setSideClip(0.0f);
                    this.photoImage.setAspectFit(false);
                    this.gradientShader = null;
                    this.motionBackgroundDrawable = null;
                    this.imageBackgroundColor = 0;
                    this.imageBackgroundGradientColor1 = 0;
                    this.imageBackgroundGradientColor2 = 0;
                    this.imageBackgroundIntensity = 0.0f;
                    this.imageBackgroundGradientColor3 = 0;
                    this.imageBackgroundGradientRotation = 45;
                    this.imageBackgroundSideColor = 0;
                    this.mediaBackground = false;
                    this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222222 = messageObject14.messageOwner.fwd_from;
                    if (tLRPC$MessageFwdHeader222222222222 != null) {
                    }
                    this.hasPsaHint = z9;
                    if (z9) {
                    }
                    this.photoImage.setAlpha(f);
                    if (!z3) {
                    }
                    this.pollButtons.clear();
                    this.availableTimeWidth = 0;
                    this.photoImage.setForceLoading(false);
                    this.photoImage.setNeedsQualityThumb(false);
                    this.photoImage.setShouldGenerateQualityThumb(false);
                    this.photoImage.setAllowDecodeSingleFrame(false);
                    this.photoImage.setColorFilter(null);
                    this.photoImage.setMediaStartEndTime(-1L, -1L);
                    if (!z45) {
                    }
                    messageObject14.reactionsChanged = false;
                    groupedMessagePosition13 = this.currentPosition;
                    if (groupedMessagePosition13 == null) {
                    }
                    if (messageObject.shouldDrawReactionsInLayout()) {
                    }
                    if (z42) {
                    }
                    if (this.currentPosition == null) {
                    }
                    if (z3) {
                    }
                    groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 != null) {
                    }
                    isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                    if (this.hasDiscussion) {
                    }
                    repliesCount = getRepliesCount();
                    if (!messageObject.shouldDrawWithoutBackground()) {
                    }
                    if (!this.isRepliesChat) {
                    }
                    this.commentLayout = null;
                    this.drawCommentNumber = false;
                    this.drawSideButton = this.isRepliesChat ? 3 : 2;
                    i4 = messageObject14.type;
                    float f822222222222222222 = 102.0f;
                    if (i4 != 0) {
                    }
                    if (this.currentPosition != null) {
                    }
                    i60 = 5;
                    groupedMessagePosition3 = this.currentPosition;
                    if (groupedMessagePosition3 != null) {
                    }
                    int i214222222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                    i63 = -1;
                    messageObject5 = this.currentMessageObject;
                    if (messageObject5.eventId == 0) {
                    }
                    f4 = 0.0f;
                    if (messageObject.isSponsored()) {
                    }
                    this.botButtons.clear();
                    if (z45) {
                    }
                    if (!messageObject4.isRestrictedMessage) {
                    }
                    this.substractBackgroundHeight = r15;
                    this.keyboardHeight = r15;
                    if (this.drawCommentButton) {
                    }
                    z26 = this.drawPinnedBottom;
                    if (z26) {
                    }
                    if (z26) {
                    }
                    if (!this.mediaBackground) {
                    }
                    if (messageObject4.type != 19) {
                    }
                    if (!this.drawPhotoImage) {
                    }
                    if (this.documentAttachType != i60) {
                    }
                    calculateUnlockXY();
                    if (z24) {
                    }
                    updateAnimatedEmojis();
                    z43 = r15;
                    if (z45) {
                    }
                    transcribeButton = this.transcribeButton;
                    if (transcribeButton != null) {
                    }
                    updateWaveform();
                    updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                    if (!this.currentMessageObject.loadingCancelled) {
                    }
                    chatMessageCellDelegate2 = this.delegate;
                    if (chatMessageCellDelegate2 != null) {
                    }
                    this.accessibilityVirtualViewBounds.clear();
                    this.transitionParams.updatePhotoImageX = true;
                    updateFlagSecure();
                }
                if (!z6) {
                }
                tLRPC$Poll2 = this.lastPoll;
                if (tLRPC$Poll2 != tLRPC$Poll) {
                }
                this.animatePollAvatars = false;
                if (z6) {
                }
                if (!z45) {
                }
                if (!z5) {
                }
                i = -1;
                f = 1.0f;
                i2 = 2;
                if (!z3) {
                }
                this.wasPinned = this.isPinned;
                this.pinnedBottom = z;
                this.pinnedTop = z2;
                this.currentMessageObject = messageObject14;
                this.currentMessagesGroup = groupedMessages;
                this.lastTime = -2;
                this.lastPostAuthor = messageObject14.messageOwner.post_author;
                if (!z45) {
                }
                this.isHighlightedAnimated = false;
                this.wasTranscriptionOpen = false;
                this.widthBeforeNewTimeLine = -1;
                if (groupedMessages != null) {
                }
                this.currentMessagesGroup = null;
                this.currentPosition = null;
                groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 == null) {
                }
                this.drawPinnedTop = this.pinnedTop;
                this.drawPinnedBottom = this.pinnedBottom;
                boolean z46222222 = this.isPlayingRound;
                this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
                this.photoImage.setCrossfadeWithOldImage(false);
                this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                this.photoImage.setCrossfadeByScale(0.0f);
                this.photoImage.setGradientBitmap(null);
                TLRPC$Message tLRPC$Message62222222 = messageObject14.messageOwner;
                this.lastSendState = tLRPC$Message62222222.send_state;
                this.lastDeleteDate = tLRPC$Message62222222.destroyTime;
                this.lastViewsCount = tLRPC$Message62222222.views;
                this.lastRepliesCount = getRepliesCount();
                if (z45) {
                }
                this.gamePreviewPressed = z7;
                this.sideButtonPressed = z7;
                this.hasNewLineForTime = z7;
                this.flipImage = z7;
                if (this.isThreadChat) {
                }
                this.isThreadPost = z47;
                this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
                if (this.isChat) {
                }
                if (messageObject14.customAvatarDrawable == null) {
                }
                this.wasLayout = r3;
                this.groupPhotoInvisible = r3;
                int i1332222222222 = r3 == true ? 1 : 0;
                int i1342222222222 = r3 == true ? 1 : 0;
                this.animatingDrawVideoImageButton = i1332222222222;
                this.drawVideoSize = r3;
                this.canStreamVideo = r3;
                this.animatingNoSound = r3;
                if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
                }
                r32 = 0;
                this.drawSideButton = 0;
                this.replyNameLayout = null;
                this.adminLayout = null;
                this.checkOnlyButtonPressed = r32;
                this.replyTextLayout = null;
                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                this.lastReplyMessage = null;
                this.hasEmbed = r32;
                this.autoPlayingMedia = r32;
                int i136222222222222 = r32 == true ? 1 : 0;
                int i137222222222222 = r32 == true ? 1 : 0;
                this.replyNameWidth = i136222222222222;
                this.replyTextWidth = r32;
                this.viaWidth = r32;
                this.viaNameWidth = r32;
                this.addedCaptionHeight = r32;
                this.currentReplyPhoto = null;
                this.currentUser = null;
                this.currentChat = null;
                this.currentReplyUserId = 0L;
                this.currentViaBotUser = null;
                this.instantViewLayout = null;
                this.drawNameLayout = r32;
                this.lastLoadingSizeTotal = 0L;
                if (this.scheduledInvalidate) {
                }
                this.links.clear();
                this.pressedLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
                messageObject14.forceUpdate = r32;
                this.drawPhotoImage = r32;
                this.drawMediaCheckBox = r32;
                this.hasLinkPreview = r32;
                this.hasOldCaptionPreview = r32;
                this.hasGamePreview = r32;
                this.hasInvoicePreview = r32;
                this.commentButtonPressed = r32;
                this.instantButtonPressed = r32;
                this.instantPressed = r32;
                if (!z6) {
                }
                this.spoilerPressed = null;
                this.isCaptionSpoilerPressed = false;
                this.isSpoilerRevealing = false;
                this.linkPreviewPressed = false;
                this.buttonPressed = 0;
                this.additionalTimeOffsetY = 0;
                this.miniButtonPressed = 0;
                this.pressedBotButton = i;
                this.pressedVoteButton = i;
                this.pollHintPressed = false;
                this.psaHintPressed = false;
                this.linkPreviewHeight = 0;
                this.mediaOffsetY = 0;
                this.documentAttachType = 0;
                this.documentAttach = null;
                this.descriptionLayout = null;
                this.titleLayout = null;
                this.videoInfoLayout = null;
                this.photosCountLayout = null;
                this.siteNameLayout = null;
                this.authorLayout = null;
                this.captionLayout = null;
                this.captionWidth = 0;
                this.captionHeight = 0;
                this.captionOffsetX = 0;
                this.currentCaption = null;
                this.docTitleLayout = null;
                this.drawImageButton = false;
                this.drawVideoImageButton = false;
                this.currentPhotoObject = null;
                this.photoParentObject = null;
                this.currentPhotoObjectThumb = null;
                this.currentPhotoObjectThumbStripped = null;
                if (!z3) {
                }
                this.currentPhotoFilter = null;
                this.buttonState = i;
                this.miniButtonState = i;
                this.hasMiniProgress = 0;
                if (this.addedForTest) {
                }
                this.addedForTest = false;
                this.photoNotSet = false;
                this.drawBackground = r13;
                this.drawName = false;
                this.useSeekBarWaveform = false;
                this.useTranscribeButton = false;
                this.drawInstantView = false;
                this.drawInstantViewType = 0;
                this.drawForwardedName = false;
                this.drawCommentButton = false;
                this.photoImage.setSideClip(0.0f);
                this.photoImage.setAspectFit(false);
                this.gradientShader = null;
                this.motionBackgroundDrawable = null;
                this.imageBackgroundColor = 0;
                this.imageBackgroundGradientColor1 = 0;
                this.imageBackgroundGradientColor2 = 0;
                this.imageBackgroundIntensity = 0.0f;
                this.imageBackgroundGradientColor3 = 0;
                this.imageBackgroundGradientRotation = 45;
                this.imageBackgroundSideColor = 0;
                this.mediaBackground = false;
                this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2222222222222 = messageObject14.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader2222222222222 != null) {
                }
                this.hasPsaHint = z9;
                if (z9) {
                }
                this.photoImage.setAlpha(f);
                if (!z3) {
                }
                this.pollButtons.clear();
                this.availableTimeWidth = 0;
                this.photoImage.setForceLoading(false);
                this.photoImage.setNeedsQualityThumb(false);
                this.photoImage.setShouldGenerateQualityThumb(false);
                this.photoImage.setAllowDecodeSingleFrame(false);
                this.photoImage.setColorFilter(null);
                this.photoImage.setMediaStartEndTime(-1L, -1L);
                if (!z45) {
                }
                messageObject14.reactionsChanged = false;
                groupedMessagePosition13 = this.currentPosition;
                if (groupedMessagePosition13 == null) {
                }
                if (messageObject.shouldDrawReactionsInLayout()) {
                }
                if (z42) {
                }
                if (this.currentPosition == null) {
                }
                if (z3) {
                }
                groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 != null) {
                }
                isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
                if (this.hasDiscussion) {
                }
                repliesCount = getRepliesCount();
                if (!messageObject.shouldDrawWithoutBackground()) {
                }
                if (!this.isRepliesChat) {
                }
                this.commentLayout = null;
                this.drawCommentNumber = false;
                this.drawSideButton = this.isRepliesChat ? 3 : 2;
                i4 = messageObject14.type;
                float f8222222222222222222 = 102.0f;
                if (i4 != 0) {
                }
                if (this.currentPosition != null) {
                }
                i60 = 5;
                groupedMessagePosition3 = this.currentPosition;
                if (groupedMessagePosition3 != null) {
                }
                int i2142222222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
                i63 = -1;
                messageObject5 = this.currentMessageObject;
                if (messageObject5.eventId == 0) {
                }
                f4 = 0.0f;
                if (messageObject.isSponsored()) {
                }
                this.botButtons.clear();
                if (z45) {
                }
                if (!messageObject4.isRestrictedMessage) {
                }
                this.substractBackgroundHeight = r15;
                this.keyboardHeight = r15;
                if (this.drawCommentButton) {
                }
                z26 = this.drawPinnedBottom;
                if (z26) {
                }
                if (z26) {
                }
                if (!this.mediaBackground) {
                }
                if (messageObject4.type != 19) {
                }
                if (!this.drawPhotoImage) {
                }
                if (this.documentAttachType != i60) {
                }
                calculateUnlockXY();
                if (z24) {
                }
                updateAnimatedEmojis();
                z43 = r15;
                if (z45) {
                }
                transcribeButton = this.transcribeButton;
                if (transcribeButton != null) {
                }
                updateWaveform();
                updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
                if (!this.currentMessageObject.loadingCancelled) {
                }
                chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null) {
                }
                this.accessibilityVirtualViewBounds.clear();
                this.transitionParams.updatePhotoImageX = true;
                updateFlagSecure();
            }
            z6 = false;
            if (!z5) {
            }
            i = -1;
            f = 1.0f;
            i2 = 2;
            if (!z3) {
            }
            this.wasPinned = this.isPinned;
            this.pinnedBottom = z;
            this.pinnedTop = z2;
            this.currentMessageObject = messageObject14;
            this.currentMessagesGroup = groupedMessages;
            this.lastTime = -2;
            this.lastPostAuthor = messageObject14.messageOwner.post_author;
            if (!z45) {
            }
            this.isHighlightedAnimated = false;
            this.wasTranscriptionOpen = false;
            this.widthBeforeNewTimeLine = -1;
            if (groupedMessages != null) {
            }
            this.currentMessagesGroup = null;
            this.currentPosition = null;
            groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 == null) {
            }
            this.drawPinnedTop = this.pinnedTop;
            this.drawPinnedBottom = this.pinnedBottom;
            boolean z462222222 = this.isPlayingRound;
            this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
            this.photoImage.setCrossfadeWithOldImage(false);
            this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
            this.photoImage.setCrossfadeByScale(0.0f);
            this.photoImage.setGradientBitmap(null);
            TLRPC$Message tLRPC$Message622222222 = messageObject14.messageOwner;
            this.lastSendState = tLRPC$Message622222222.send_state;
            this.lastDeleteDate = tLRPC$Message622222222.destroyTime;
            this.lastViewsCount = tLRPC$Message622222222.views;
            this.lastRepliesCount = getRepliesCount();
            if (z45) {
            }
            this.gamePreviewPressed = z7;
            this.sideButtonPressed = z7;
            this.hasNewLineForTime = z7;
            this.flipImage = z7;
            if (this.isThreadChat) {
            }
            this.isThreadPost = z47;
            this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
            if (this.isChat) {
            }
            if (messageObject14.customAvatarDrawable == null) {
            }
            this.wasLayout = r3;
            this.groupPhotoInvisible = r3;
            int i13322222222222 = r3 == true ? 1 : 0;
            int i13422222222222 = r3 == true ? 1 : 0;
            this.animatingDrawVideoImageButton = i13322222222222;
            this.drawVideoSize = r3;
            this.canStreamVideo = r3;
            this.animatingNoSound = r3;
            if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
            }
            r32 = 0;
            this.drawSideButton = 0;
            this.replyNameLayout = null;
            this.adminLayout = null;
            this.checkOnlyButtonPressed = r32;
            this.replyTextLayout = null;
            AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
            this.lastReplyMessage = null;
            this.hasEmbed = r32;
            this.autoPlayingMedia = r32;
            int i1362222222222222 = r32 == true ? 1 : 0;
            int i1372222222222222 = r32 == true ? 1 : 0;
            this.replyNameWidth = i1362222222222222;
            this.replyTextWidth = r32;
            this.viaWidth = r32;
            this.viaNameWidth = r32;
            this.addedCaptionHeight = r32;
            this.currentReplyPhoto = null;
            this.currentUser = null;
            this.currentChat = null;
            this.currentReplyUserId = 0L;
            this.currentViaBotUser = null;
            this.instantViewLayout = null;
            this.drawNameLayout = r32;
            this.lastLoadingSizeTotal = 0L;
            if (this.scheduledInvalidate) {
            }
            this.links.clear();
            this.pressedLink = null;
            this.pressedEmoji = null;
            this.pressedLinkType = -1;
            messageObject14.forceUpdate = r32;
            this.drawPhotoImage = r32;
            this.drawMediaCheckBox = r32;
            this.hasLinkPreview = r32;
            this.hasOldCaptionPreview = r32;
            this.hasGamePreview = r32;
            this.hasInvoicePreview = r32;
            this.commentButtonPressed = r32;
            this.instantButtonPressed = r32;
            this.instantPressed = r32;
            if (!z6) {
            }
            this.spoilerPressed = null;
            this.isCaptionSpoilerPressed = false;
            this.isSpoilerRevealing = false;
            this.linkPreviewPressed = false;
            this.buttonPressed = 0;
            this.additionalTimeOffsetY = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = i;
            this.pressedVoteButton = i;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewHeight = 0;
            this.mediaOffsetY = 0;
            this.documentAttachType = 0;
            this.documentAttach = null;
            this.descriptionLayout = null;
            this.titleLayout = null;
            this.videoInfoLayout = null;
            this.photosCountLayout = null;
            this.siteNameLayout = null;
            this.authorLayout = null;
            this.captionLayout = null;
            this.captionWidth = 0;
            this.captionHeight = 0;
            this.captionOffsetX = 0;
            this.currentCaption = null;
            this.docTitleLayout = null;
            this.drawImageButton = false;
            this.drawVideoImageButton = false;
            this.currentPhotoObject = null;
            this.photoParentObject = null;
            this.currentPhotoObjectThumb = null;
            this.currentPhotoObjectThumbStripped = null;
            if (!z3) {
            }
            this.currentPhotoFilter = null;
            this.buttonState = i;
            this.miniButtonState = i;
            this.hasMiniProgress = 0;
            if (this.addedForTest) {
            }
            this.addedForTest = false;
            this.photoNotSet = false;
            this.drawBackground = r13;
            this.drawName = false;
            this.useSeekBarWaveform = false;
            this.useTranscribeButton = false;
            this.drawInstantView = false;
            this.drawInstantViewType = 0;
            this.drawForwardedName = false;
            this.drawCommentButton = false;
            this.photoImage.setSideClip(0.0f);
            this.photoImage.setAspectFit(false);
            this.gradientShader = null;
            this.motionBackgroundDrawable = null;
            this.imageBackgroundColor = 0;
            this.imageBackgroundGradientColor1 = 0;
            this.imageBackgroundGradientColor2 = 0;
            this.imageBackgroundIntensity = 0.0f;
            this.imageBackgroundGradientColor3 = 0;
            this.imageBackgroundGradientRotation = 45;
            this.imageBackgroundSideColor = 0;
            this.mediaBackground = false;
            this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader22222222222222 = messageObject14.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader22222222222222 != null) {
            }
            this.hasPsaHint = z9;
            if (z9) {
            }
            this.photoImage.setAlpha(f);
            if (!z3) {
            }
            this.pollButtons.clear();
            this.availableTimeWidth = 0;
            this.photoImage.setForceLoading(false);
            this.photoImage.setNeedsQualityThumb(false);
            this.photoImage.setShouldGenerateQualityThumb(false);
            this.photoImage.setAllowDecodeSingleFrame(false);
            this.photoImage.setColorFilter(null);
            this.photoImage.setMediaStartEndTime(-1L, -1L);
            if (!z45) {
            }
            messageObject14.reactionsChanged = false;
            groupedMessagePosition13 = this.currentPosition;
            if (groupedMessagePosition13 == null) {
            }
            if (messageObject.shouldDrawReactionsInLayout()) {
            }
            if (z42) {
            }
            if (this.currentPosition == null) {
            }
            if (z3) {
            }
            groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
            }
            isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
            if (this.hasDiscussion) {
            }
            repliesCount = getRepliesCount();
            if (!messageObject.shouldDrawWithoutBackground()) {
            }
            if (!this.isRepliesChat) {
            }
            this.commentLayout = null;
            this.drawCommentNumber = false;
            this.drawSideButton = this.isRepliesChat ? 3 : 2;
            i4 = messageObject14.type;
            float f82222222222222222222 = 102.0f;
            if (i4 != 0) {
            }
            if (this.currentPosition != null) {
            }
            i60 = 5;
            groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
            }
            int i21422222222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
            i63 = -1;
            messageObject5 = this.currentMessageObject;
            if (messageObject5.eventId == 0) {
            }
            f4 = 0.0f;
            if (messageObject.isSponsored()) {
            }
            this.botButtons.clear();
            if (z45) {
            }
            if (!messageObject4.isRestrictedMessage) {
            }
            this.substractBackgroundHeight = r15;
            this.keyboardHeight = r15;
            if (this.drawCommentButton) {
            }
            z26 = this.drawPinnedBottom;
            if (z26) {
            }
            if (z26) {
            }
            if (!this.mediaBackground) {
            }
            if (messageObject4.type != 19) {
            }
            if (!this.drawPhotoImage) {
            }
            if (this.documentAttachType != i60) {
            }
            calculateUnlockXY();
            if (z24) {
            }
            updateAnimatedEmojis();
            z43 = r15;
            if (z45) {
            }
            transcribeButton = this.transcribeButton;
            if (transcribeButton != null) {
            }
            updateWaveform();
            updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
            if (!this.currentMessageObject.loadingCancelled) {
            }
            chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 != null) {
            }
            this.accessibilityVirtualViewBounds.clear();
            this.transitionParams.updatePhotoImageX = true;
            updateFlagSecure();
        }
        if (groupedMessages != this.currentMessagesGroup) {
        }
        if (!z45) {
        }
        this.accessibilityText = null;
        if (!this.drawCommentButton) {
        }
        z4 = true;
        if (!z3) {
        }
        if (!z3) {
        }
        z6 = false;
        if (!z5) {
        }
        i = -1;
        f = 1.0f;
        i2 = 2;
        if (!z3) {
        }
        this.wasPinned = this.isPinned;
        this.pinnedBottom = z;
        this.pinnedTop = z2;
        this.currentMessageObject = messageObject14;
        this.currentMessagesGroup = groupedMessages;
        this.lastTime = -2;
        this.lastPostAuthor = messageObject14.messageOwner.post_author;
        if (!z45) {
        }
        this.isHighlightedAnimated = false;
        this.wasTranscriptionOpen = false;
        this.widthBeforeNewTimeLine = -1;
        if (groupedMessages != null) {
        }
        this.currentMessagesGroup = null;
        this.currentPosition = null;
        groupedMessages2 = this.currentMessagesGroup;
        if (groupedMessages2 == null) {
        }
        this.drawPinnedTop = this.pinnedTop;
        this.drawPinnedBottom = this.pinnedBottom;
        boolean z4622222222 = this.isPlayingRound;
        this.isPlayingRound = this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && (chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.keyboardIsOpened() && !this.delegate.isLandscape();
        this.photoImage.setCrossfadeWithOldImage(false);
        this.photoImage.setCrossfadeDuration(ImageReceiver.DEFAULT_CROSSFADE_DURATION);
        this.photoImage.setCrossfadeByScale(0.0f);
        this.photoImage.setGradientBitmap(null);
        TLRPC$Message tLRPC$Message6222222222 = messageObject14.messageOwner;
        this.lastSendState = tLRPC$Message6222222222.send_state;
        this.lastDeleteDate = tLRPC$Message6222222222.destroyTime;
        this.lastViewsCount = tLRPC$Message6222222222.views;
        this.lastRepliesCount = getRepliesCount();
        if (z45) {
        }
        this.gamePreviewPressed = z7;
        this.sideButtonPressed = z7;
        this.hasNewLineForTime = z7;
        this.flipImage = z7;
        if (this.isThreadChat) {
        }
        this.isThreadPost = z47;
        this.isAvatarVisible = !z47 && this.isChat && !messageObject.isOutOwner() && messageObject.needDrawAvatar() && ((groupedMessagePosition14 = this.currentPosition) == null || groupedMessagePosition14.edge);
        if (this.isChat) {
        }
        if (messageObject14.customAvatarDrawable == null) {
        }
        this.wasLayout = r3;
        this.groupPhotoInvisible = r3;
        int i133222222222222 = r3 == true ? 1 : 0;
        int i134222222222222 = r3 == true ? 1 : 0;
        this.animatingDrawVideoImageButton = i133222222222222;
        this.drawVideoSize = r3;
        this.canStreamVideo = r3;
        this.animatingNoSound = r3;
        if (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId())) {
        }
        r32 = 0;
        this.drawSideButton = 0;
        this.replyNameLayout = null;
        this.adminLayout = null;
        this.checkOnlyButtonPressed = r32;
        this.replyTextLayout = null;
        AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
        this.lastReplyMessage = null;
        this.hasEmbed = r32;
        this.autoPlayingMedia = r32;
        int i13622222222222222 = r32 == true ? 1 : 0;
        int i13722222222222222 = r32 == true ? 1 : 0;
        this.replyNameWidth = i13622222222222222;
        this.replyTextWidth = r32;
        this.viaWidth = r32;
        this.viaNameWidth = r32;
        this.addedCaptionHeight = r32;
        this.currentReplyPhoto = null;
        this.currentUser = null;
        this.currentChat = null;
        this.currentReplyUserId = 0L;
        this.currentViaBotUser = null;
        this.instantViewLayout = null;
        this.drawNameLayout = r32;
        this.lastLoadingSizeTotal = 0L;
        if (this.scheduledInvalidate) {
        }
        this.links.clear();
        this.pressedLink = null;
        this.pressedEmoji = null;
        this.pressedLinkType = -1;
        messageObject14.forceUpdate = r32;
        this.drawPhotoImage = r32;
        this.drawMediaCheckBox = r32;
        this.hasLinkPreview = r32;
        this.hasOldCaptionPreview = r32;
        this.hasGamePreview = r32;
        this.hasInvoicePreview = r32;
        this.commentButtonPressed = r32;
        this.instantButtonPressed = r32;
        this.instantPressed = r32;
        if (!z6) {
        }
        this.spoilerPressed = null;
        this.isCaptionSpoilerPressed = false;
        this.isSpoilerRevealing = false;
        this.linkPreviewPressed = false;
        this.buttonPressed = 0;
        this.additionalTimeOffsetY = 0;
        this.miniButtonPressed = 0;
        this.pressedBotButton = i;
        this.pressedVoteButton = i;
        this.pollHintPressed = false;
        this.psaHintPressed = false;
        this.linkPreviewHeight = 0;
        this.mediaOffsetY = 0;
        this.documentAttachType = 0;
        this.documentAttach = null;
        this.descriptionLayout = null;
        this.titleLayout = null;
        this.videoInfoLayout = null;
        this.photosCountLayout = null;
        this.siteNameLayout = null;
        this.authorLayout = null;
        this.captionLayout = null;
        this.captionWidth = 0;
        this.captionHeight = 0;
        this.captionOffsetX = 0;
        this.currentCaption = null;
        this.docTitleLayout = null;
        this.drawImageButton = false;
        this.drawVideoImageButton = false;
        this.currentPhotoObject = null;
        this.photoParentObject = null;
        this.currentPhotoObjectThumb = null;
        this.currentPhotoObjectThumbStripped = null;
        if (!z3) {
        }
        this.currentPhotoFilter = null;
        this.buttonState = i;
        this.miniButtonState = i;
        this.hasMiniProgress = 0;
        if (this.addedForTest) {
        }
        this.addedForTest = false;
        this.photoNotSet = false;
        this.drawBackground = r13;
        this.drawName = false;
        this.useSeekBarWaveform = false;
        this.useTranscribeButton = false;
        this.drawInstantView = false;
        this.drawInstantViewType = 0;
        this.drawForwardedName = false;
        this.drawCommentButton = false;
        this.photoImage.setSideClip(0.0f);
        this.photoImage.setAspectFit(false);
        this.gradientShader = null;
        this.motionBackgroundDrawable = null;
        this.imageBackgroundColor = 0;
        this.imageBackgroundGradientColor1 = 0;
        this.imageBackgroundGradientColor2 = 0;
        this.imageBackgroundIntensity = 0.0f;
        this.imageBackgroundGradientColor3 = 0;
        this.imageBackgroundGradientRotation = 45;
        this.imageBackgroundSideColor = 0;
        this.mediaBackground = false;
        this.photoImage.animatedFileDrawableRepeatMaxCount = 0;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader222222222222222 = messageObject14.messageOwner.fwd_from;
        if (tLRPC$MessageFwdHeader222222222222222 != null) {
        }
        this.hasPsaHint = z9;
        if (z9) {
        }
        this.photoImage.setAlpha(f);
        if (!z3) {
        }
        this.pollButtons.clear();
        this.availableTimeWidth = 0;
        this.photoImage.setForceLoading(false);
        this.photoImage.setNeedsQualityThumb(false);
        this.photoImage.setShouldGenerateQualityThumb(false);
        this.photoImage.setAllowDecodeSingleFrame(false);
        this.photoImage.setColorFilter(null);
        this.photoImage.setMediaStartEndTime(-1L, -1L);
        if (!z45) {
        }
        messageObject14.reactionsChanged = false;
        groupedMessagePosition13 = this.currentPosition;
        if (groupedMessagePosition13 == null) {
        }
        if (messageObject.shouldDrawReactionsInLayout()) {
        }
        if (z42) {
        }
        if (this.currentPosition == null) {
        }
        if (z3) {
        }
        groupedMessages3 = this.currentMessagesGroup;
        if (groupedMessages3 != null) {
        }
        isLinkedToChat = messageObject14.isLinkedToChat(this.linkedChatId);
        if (this.hasDiscussion) {
        }
        repliesCount = getRepliesCount();
        if (!messageObject.shouldDrawWithoutBackground()) {
        }
        if (!this.isRepliesChat) {
        }
        this.commentLayout = null;
        this.drawCommentNumber = false;
        this.drawSideButton = this.isRepliesChat ? 3 : 2;
        i4 = messageObject14.type;
        float f822222222222222222222 = 102.0f;
        if (i4 != 0) {
        }
        if (this.currentPosition != null) {
        }
        i60 = 5;
        groupedMessagePosition3 = this.currentPosition;
        if (groupedMessagePosition3 != null) {
        }
        int i214222222222222222222222222222222222222222 = this.widthBeforeNewTimeLine;
        i63 = -1;
        messageObject5 = this.currentMessageObject;
        if (messageObject5.eventId == 0) {
        }
        f4 = 0.0f;
        if (messageObject.isSponsored()) {
        }
        this.botButtons.clear();
        if (z45) {
        }
        if (!messageObject4.isRestrictedMessage) {
        }
        this.substractBackgroundHeight = r15;
        this.keyboardHeight = r15;
        if (this.drawCommentButton) {
        }
        z26 = this.drawPinnedBottom;
        if (z26) {
        }
        if (z26) {
        }
        if (!this.mediaBackground) {
        }
        if (messageObject4.type != 19) {
        }
        if (!this.drawPhotoImage) {
        }
        if (this.documentAttachType != i60) {
        }
        calculateUnlockXY();
        if (z24) {
        }
        updateAnimatedEmojis();
        z43 = r15;
        if (z45) {
        }
        transcribeButton = this.transcribeButton;
        if (transcribeButton != null) {
        }
        updateWaveform();
        updateButtonState(z43, !z45 && !messageObject4.cancelEditing, true);
        if (!this.currentMessageObject.loadingCancelled) {
        }
        chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null) {
        }
        this.accessibilityVirtualViewBounds.clear();
        this.transitionParams.updatePhotoImageX = true;
        updateFlagSecure();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$setMessageContent$7(PollButton pollButton, PollButton pollButton2) {
        if (pollButton.decimal > pollButton2.decimal) {
            return -1;
        }
        if (pollButton.decimal < pollButton2.decimal) {
            return 1;
        }
        if (pollButton.decimal != pollButton2.decimal) {
            return 0;
        }
        if (pollButton.percent > pollButton2.percent) {
            return 1;
        }
        return pollButton.percent < pollButton2.percent ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void highlightCaptionLink(URLSpan uRLSpan) {
        if (uRLSpan != null) {
            try {
                StaticLayout staticLayout = this.captionLayout;
                if (staticLayout == null || !(staticLayout.getText() instanceof Spanned) || uRLSpan == this.highlightPathSpan) {
                    return;
                }
                this.highlightPathSpan = uRLSpan;
                Spanned spanned = (Spanned) this.captionLayout.getText();
                int spanStart = spanned.getSpanStart(this.highlightPathSpan);
                int spanEnd = spanned.getSpanEnd(this.highlightPathSpan);
                LinkPath linkPath = this.highlightPath;
                if (linkPath != null) {
                    linkPath.rewind();
                } else {
                    this.highlightPath = new LinkPath(true);
                }
                this.highlightPath.setCurrentLayout(this.captionLayout, spanStart, 0.0f);
                this.captionLayout.getSelectionPath(spanStart, spanEnd, this.highlightPath);
                this.highlightPathStart = System.currentTimeMillis();
                invalidate();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    private void calculateUnlockXY() {
        if (this.currentMessageObject.type != 20 || this.unlockLayout == null) {
            return;
        }
        this.unlockX = this.backgroundDrawableLeft + ((this.photoImage.getImageWidth() - this.unlockLayout.getWidth()) / 2.0f);
        this.unlockY = this.backgroundDrawableTop + this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - this.unlockLayout.getHeight()) / 2.0f);
    }

    private void updateFlagSecure() {
        Runnable runnable;
        TLRPC$Message tLRPC$Message;
        MessageObject messageObject = this.currentMessageObject;
        boolean z = (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (!tLRPC$Message.noforwards && !messageObject.hasRevealedExtendedMedia())) ? false : true;
        Activity findActivity = AndroidUtilities.findActivity(getContext());
        if (z && this.unregisterFlagSecure == null && findActivity != null) {
            this.unregisterFlagSecure = AndroidUtilities.registerFlagSecure(findActivity.getWindow());
        } else if (z || (runnable = this.unregisterFlagSecure) == null) {
        } else {
            runnable.run();
            this.unregisterFlagSecure = null;
        }
    }

    public void checkVideoPlayback(boolean z, Bitmap bitmap) {
        if (this.currentMessageObject.isVideo()) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                this.photoImage.setAllowStartAnimation(false);
                this.photoImage.stopAnimation();
                return;
            }
            this.photoImage.setAllowStartAnimation(true);
            this.photoImage.startAnimation();
            return;
        }
        if (z) {
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            z = playingMessageObject == null || !playingMessageObject.isRoundVideo();
        }
        this.photoImage.setAllowStartAnimation(z);
        if (bitmap != null) {
            this.photoImage.startCrossfadeFromStaticThumb(bitmap);
        }
        if (z) {
            this.photoImage.startAnimation();
        } else {
            this.photoImage.stopAnimation();
        }
    }

    private static boolean spanSupportsLongPress(CharacterStyle characterStyle) {
        return (characterStyle instanceof URLSpanMono) || (characterStyle instanceof URLSpan);
    }

    @Override // org.telegram.ui.Cells.BaseCell
    protected boolean onLongPress() {
        int i;
        int i2;
        boolean z = false;
        if (this.isRoundVideo && this.isPlayingRound && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && ((this.lastTouchX - this.photoImage.getCenterX()) * (this.lastTouchX - this.photoImage.getCenterX())) + ((this.lastTouchY - this.photoImage.getCenterY()) * (this.lastTouchY - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f) && (this.lastTouchX > this.photoImage.getCenterX() + (this.photoImage.getImageWidth() / 4.0f) || this.lastTouchX < this.photoImage.getCenterX() - (this.photoImage.getImageWidth() / 4.0f))) {
            boolean z2 = this.lastTouchX > this.photoImage.getCenterX();
            if (this.videoPlayerRewinder == null) {
                this.videoForwardDrawable = new VideoForwardDrawable(true);
                this.videoPlayerRewinder = new VideoPlayerRewinder() { // from class: org.telegram.ui.Cells.ChatMessageCell.5
                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindCanceled() {
                        ChatMessageCell.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                        ChatMessageCell.this.videoForwardDrawable.setShowing(false);
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void updateRewindProgressUi(long j, float f, boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setTime(Math.abs(j));
                        if (z3) {
                            ChatMessageCell.this.currentMessageObject.audioProgress = f;
                            ChatMessageCell.this.updatePlayingMessageProgress();
                        }
                    }

                    @Override // org.telegram.messenger.video.VideoPlayerRewinder
                    protected void onRewindStart(boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.5.1
                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void onAnimationEnd() {
                            }

                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void invalidate() {
                                ChatMessageCell.this.invalidate();
                            }
                        });
                        ChatMessageCell.this.videoForwardDrawable.setOneShootAnimation(false);
                        ChatMessageCell.this.videoForwardDrawable.setLeftSide(!z3);
                        ChatMessageCell.this.videoForwardDrawable.setShowing(true);
                        ChatMessageCell.this.invalidate();
                    }
                };
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            this.videoPlayerRewinder.startRewind(MediaController.getInstance().getVideoPlayer(), z2, MediaController.getInstance().getPlaybackSpeed(false));
            return false;
        }
        Drawable drawable = this.replySelector;
        if (drawable != null) {
            this.replySelectorPressed = false;
            drawable.setState(new int[0]);
            invalidate();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.resetClick();
        }
        if (this.pressedEmoji != null) {
            this.pressedEmoji = null;
        }
        LinkSpanDrawable linkSpanDrawable = this.pressedLink;
        if (linkSpanDrawable != null) {
            if (linkSpanDrawable.getSpan() instanceof URLSpanMono) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            } else if (this.pressedLink.getSpan() instanceof URLSpanNoUnderline) {
                URLSpanNoUnderline uRLSpanNoUnderline = (URLSpanNoUnderline) this.pressedLink.getSpan();
                if (ChatActivity.isClickableLink(uRLSpanNoUnderline.getURL()) || uRLSpanNoUnderline.getURL().startsWith("/")) {
                    this.hadLongPress = true;
                    this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                    return true;
                }
            } else if (this.pressedLink.getSpan() instanceof URLSpan) {
                this.hadLongPress = true;
                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), true);
                return true;
            }
        }
        resetPressedLink(-1);
        if (this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.pressedBotButton != -1) {
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.videoButtonPressed = 0;
            this.pressedBotButton = -1;
            invalidate();
        }
        this.linkPreviewPressed = false;
        this.sideButtonPressed = false;
        this.imagePressed = false;
        this.timePressed = false;
        this.gamePreviewPressed = false;
        if (this.pressedVoteButton != -1 || this.pollHintPressed || this.psaHintPressed || this.instantPressed || this.otherPressed || this.commentButtonPressed) {
            this.commentButtonPressed = false;
            this.instantButtonPressed = false;
            this.instantPressed = false;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.otherPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i3 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i3 >= drawableArr.length) {
                        break;
                    }
                    if (drawableArr[i3] != null) {
                        drawableArr[i3].setState(StateSet.NOTHING);
                    }
                    i3++;
                }
            }
            invalidate();
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null) {
            if (this.avatarPressed) {
                TLRPC$User tLRPC$User = this.currentUser;
                if (tLRPC$User != null) {
                    if (tLRPC$User.id != 0) {
                        z = chatMessageCellDelegate.didLongPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    }
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader != null) {
                            if ((tLRPC$MessageFwdHeader.flags & 16) != 0) {
                                i2 = tLRPC$MessageFwdHeader.saved_from_msg_id;
                            } else {
                                i2 = tLRPC$MessageFwdHeader.channel_post;
                            }
                            i = i2;
                        } else {
                            i = 0;
                        }
                        z = chatMessageCellDelegate.didLongPressChannelAvatar(this, tLRPC$Chat, i, this.lastTouchX, this.lastTouchY);
                    }
                }
            }
            if (!z) {
                this.delegate.didLongPress(this, this.lastTouchX, this.lastTouchY);
            }
        }
        return true;
    }

    public void showHintButton(boolean z, boolean z2, int i) {
        float f = 1.0f;
        if (i == -1 || i == 0) {
            if (this.hintButtonVisible == z) {
                return;
            }
            this.hintButtonVisible = z;
            if (!z2) {
                this.hintButtonProgress = z ? 1.0f : 0.0f;
            } else {
                invalidate();
            }
        }
        if ((i == -1 || i == 1) && this.psaButtonVisible != z) {
            this.psaButtonVisible = z;
            if (!z2) {
                if (!z) {
                    f = 0.0f;
                }
                this.psaButtonProgress = f;
                return;
            }
            setInvalidatesParent(true);
            invalidate();
        }
    }

    public void setCheckPressed(boolean z, boolean z2) {
        this.isCheckPressed = z;
        this.isPressed = z2;
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    public void setInvalidateSpoilersParent(boolean z) {
        this.invalidateSpoilersParent = z;
    }

    public void setInvalidatesParent(boolean z) {
        this.invalidatesParent = z;
    }

    private boolean invalidateParentForce() {
        return !this.links.isEmpty() || !this.reactionsLayoutInBubble.isEmpty;
    }

    public void invalidateOutbounds() {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent()) {
            if (!(getParent() instanceof View)) {
                return;
            }
            ((View) getParent()).invalidate();
            return;
        }
        super.invalidate();
    }

    @Override // android.view.View, org.telegram.ui.Cells.TextSelectionHelper.SelectableView
    public void invalidate() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && invalidateParentForce())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    @Override // android.view.View
    public void invalidate(int i, int i2, int i3, int i4) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        super.invalidate(i, i2, i3, i4);
        if (this.invalidatesParent && getParent() != null) {
            ((View) getParent()).invalidate(((int) getX()) + i, ((int) getY()) + i2, ((int) getX()) + i3, ((int) getY()) + i4);
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    public boolean isHighlightedAnimated() {
        return this.isHighlightedAnimated;
    }

    public void setHighlightedAnimated() {
        this.isHighlightedAnimated = true;
        this.highlightProgress = 1000;
        this.lastHighlightProgressTime = System.currentTimeMillis();
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    public boolean isHighlighted() {
        return this.isHighlighted;
    }

    public void setHighlighted(boolean z) {
        if (this.isHighlighted == z) {
            return;
        }
        this.isHighlighted = z;
        if (!z) {
            this.lastHighlightProgressTime = System.currentTimeMillis();
            this.isHighlightedAnimated = true;
            this.highlightProgress = 300;
        } else {
            this.isHighlightedAnimated = false;
            this.highlightProgress = 0;
        }
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
        if (getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    @Override // android.view.View
    public void setPressed(boolean z) {
        super.setPressed(z);
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    private void updateRadialProgressBackground() {
        if (this.drawRadialCheckBackground) {
            return;
        }
        boolean z = true;
        boolean z2 = (this.isHighlighted || this.isPressed || isPressed()) && (!this.drawPhotoImage || !this.photoImage.hasBitmapImage());
        this.radialProgress.setPressed(z2 || this.buttonPressed != 0, false);
        if (this.hasMiniProgress != 0) {
            this.radialProgress.setPressed(z2 || this.miniButtonPressed != 0, true);
        }
        RadialProgress2 radialProgress2 = this.videoRadialProgress;
        if (!z2 && this.videoButtonPressed == 0) {
            z = false;
        }
        radialProgress2.setPressed(z, false);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarPressed() {
        requestDisallowInterceptTouchEvent(true);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarReleased() {
        requestDisallowInterceptTouchEvent(false);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        MediaController.getInstance().seekToProgress(this.currentMessageObject, f);
        updatePlayingMessageProgress();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarContinuousDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        messageObject.audioProgressSec = (int) (messageObject.getDuration() * f);
        updatePlayingMessageProgress();
    }

    public boolean isAnimatingPollAnswer() {
        return this.animatePollAnswerAlpha;
    }

    private void updateWaveform() {
        TLRPC$Message tLRPC$Message;
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message2;
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 != null) {
            int i = this.documentAttachType;
            if (i != 3 && i != 7) {
                return;
            }
            byte[] waveform = messageObject2.getWaveform();
            boolean z = true;
            this.useSeekBarWaveform = waveform != null;
            SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
            if (seekBarWaveform != null) {
                seekBarWaveform.setWaveform(waveform);
            }
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3 == null || ((messageObject3.isOutOwner() && !this.currentMessageObject.isSent()) || ((!UserConfig.getInstance(this.currentAccount).isPremium() && (MessagesController.getInstance(this.currentAccount).didPressTranscribeButtonEnough() || ((((tLRPC$Message2 = (messageObject = this.currentMessageObject).messageOwner) == null || !tLRPC$Message2.voiceTranscriptionForce) && messageObject.getDuration() < 60) || MessagesController.getInstance(this.currentAccount).premiumLocked))) || (((!this.currentMessageObject.isVoice() || !this.useSeekBarWaveform) && !this.currentMessageObject.isRoundVideo()) || (tLRPC$Message = this.currentMessageObject.messageOwner) == null || (MessageObject.getMedia(tLRPC$Message) instanceof TLRPC$TL_messageMediaWebPage))))) {
                z = false;
            }
            this.useTranscribeButton = z;
            updateSeekBarWaveformWidth(null);
        }
    }

    private void updateSeekBarWaveformWidth(Canvas canvas) {
        int i;
        int i2 = 0;
        this.seekBarWaveformTranslateX = 0;
        int i3 = -AndroidUtilities.dp((this.hasLinkPreview ? 10 : 0) + 92);
        TransitionParams transitionParams = this.transitionParams;
        int i4 = 65;
        if (transitionParams.animateBackgroundBoundsInner && ((i = this.documentAttachType) == 3 || i == 7)) {
            int i5 = this.backgroundWidth;
            int i6 = (int) ((i5 - transitionParams.toDeltaLeft) + transitionParams.toDeltaRight);
            int i7 = (int) ((i5 - transitionParams.deltaLeft) + transitionParams.deltaRight);
            if (this.isRoundVideo && !this.drawBackground) {
                i7 = (int) (i7 + (getVideoTranscriptionProgress() * AndroidUtilities.dp(8.0f)));
                i6 += AndroidUtilities.dp(8.0f);
            }
            TransitionParams transitionParams2 = this.transitionParams;
            if (transitionParams2.toDeltaLeft == 0.0f && transitionParams2.toDeltaRight == 0.0f) {
                i6 = i7;
            }
            SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
            if (seekBarWaveform != null) {
                if (transitionParams2.animateUseTranscribeButton) {
                    seekBarWaveform.setSize((i7 + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), AndroidUtilities.dp(30.0f), i5 + i3 + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0), i6 + i3 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0));
                } else {
                    seekBarWaveform.setSize((i7 + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), AndroidUtilities.dp(30.0f), (i5 + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), (i6 + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())));
                }
            }
            SeekBar seekBar = this.seekBar;
            if (seekBar == null) {
                return;
            }
            int useTranscribeButtonProgress = i7 - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)));
            if (this.documentAttachType != 5) {
                i4 = 72;
            }
            if (this.hasLinkPreview) {
                i2 = 10;
            }
            seekBar.setSize(useTranscribeButtonProgress - AndroidUtilities.dp(i4 + i2), AndroidUtilities.dp(30.0f));
            return;
        }
        SeekBarWaveform seekBarWaveform2 = this.seekBarWaveform;
        if (seekBarWaveform2 != null) {
            if (transitionParams.animateUseTranscribeButton) {
                seekBarWaveform2.setSize((this.backgroundWidth + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), AndroidUtilities.dp(30.0f), this.backgroundWidth + i3 + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0), this.backgroundWidth + i3 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0));
            } else {
                seekBarWaveform2.setSize((this.backgroundWidth + i3) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress())), AndroidUtilities.dp(30.0f));
            }
        }
        SeekBar seekBar2 = this.seekBar;
        if (seekBar2 == null) {
            return;
        }
        int useTranscribeButtonProgress2 = this.backgroundWidth - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)));
        if (this.documentAttachType != 5) {
            i4 = 72;
        }
        if (this.hasLinkPreview) {
            i2 = 10;
        }
        seekBar2.setSize(useTranscribeButtonProgress2 - AndroidUtilities.dp(i4 + i2), AndroidUtilities.dp(30.0f));
    }

    private int createDocumentLayout(int i, MessageObject messageObject) {
        int i2;
        int i3;
        int i4 = i;
        if (messageObject.type == 0) {
            this.documentAttach = MessageObject.getMedia(messageObject.messageOwner).webpage.document;
        } else {
            this.documentAttach = messageObject.getDocument();
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        int i5 = 0;
        if (tLRPC$Document == null) {
            return 0;
        }
        if (MessageObject.isVoiceDocument(tLRPC$Document)) {
            this.documentAttachType = 3;
            int i6 = 0;
            while (true) {
                if (i6 >= this.documentAttach.attributes.size()) {
                    i3 = 0;
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute = this.documentAttach.attributes.get(i6);
                if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeAudio) {
                    i3 = tLRPC$DocumentAttribute.duration;
                    break;
                }
                i6++;
            }
            this.widthBeforeNewTimeLine = (i4 - AndroidUtilities.dp(94.0f)) - ((int) Math.ceil(Theme.chat_audioTimePaint.measureText("00:00")));
            this.availableTimeWidth = i4 - AndroidUtilities.dp(18.0f);
            measureTime(messageObject);
            int dp = AndroidUtilities.dp(174.0f) + this.timeWidth;
            if (!this.hasLinkPreview) {
                this.backgroundWidth = Math.min(i4, dp + ((int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatLongDuration(i3)))));
            }
            this.seekBarWaveform.setMessageObject(messageObject);
            return 0;
        } else if (MessageObject.isVideoDocument(this.documentAttach)) {
            this.documentAttachType = 4;
            if (!messageObject.needDrawBluredPreview()) {
                updatePlayingMessageProgress();
                String format = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                this.docTitleLayout = new StaticLayout(format, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        } else if (MessageObject.isMusicDocument(this.documentAttach)) {
            this.documentAttachType = 5;
            int dp2 = i4 - AndroidUtilities.dp(92.0f);
            if (dp2 < 0) {
                dp2 = AndroidUtilities.dp(100.0f);
            }
            int i7 = dp2;
            StaticLayout staticLayout = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicTitle().replace('\n', ' '), Theme.chat_audioTitlePaint, i7 - AndroidUtilities.dp(12.0f), TextUtils.TruncateAt.END), Theme.chat_audioTitlePaint, i7, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.songLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
                this.songX = -((int) Math.ceil(this.songLayout.getLineLeft(0)));
            }
            StaticLayout staticLayout2 = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicAuthor().replace('\n', ' '), Theme.chat_audioPerformerPaint, i7, TextUtils.TruncateAt.END), Theme.chat_audioPerformerPaint, i7, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.performerLayout = staticLayout2;
            if (staticLayout2.getLineCount() > 0) {
                this.performerX = -((int) Math.ceil(this.performerLayout.getLineLeft(0)));
            }
            int i8 = 0;
            while (true) {
                if (i8 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = this.documentAttach.attributes.get(i8);
                if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                    i5 = tLRPC$DocumentAttribute2.duration;
                    break;
                }
                i8++;
            }
            int ceil = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatShortDuration(i5, i5)));
            this.widthBeforeNewTimeLine = (this.backgroundWidth - AndroidUtilities.dp(86.0f)) - ceil;
            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(28.0f);
            return ceil;
        } else if (MessageObject.isGifDocument(this.documentAttach, messageObject.hasValidGroupId())) {
            this.documentAttachType = 2;
            if (!messageObject.needDrawBluredPreview()) {
                String string = LocaleController.getString("AttachGif", R.string.AttachGif);
                this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(string));
                this.infoLayout = new StaticLayout(string, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                String format2 = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                this.docTitleLayout = new StaticLayout(format2, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        } else {
            String str = this.documentAttach.mime_type;
            boolean z = (str != null && (str.toLowerCase().startsWith("image/") || this.documentAttach.mime_type.toLowerCase().startsWith("video/mp4"))) || MessageObject.isDocumentHasThumb(this.documentAttach);
            this.drawPhotoImage = z;
            if (!z) {
                i4 += AndroidUtilities.dp(30.0f);
            }
            this.documentAttachType = 1;
            String documentFileName = FileLoader.getDocumentFileName(this.documentAttach);
            if (documentFileName.length() == 0) {
                documentFileName = LocaleController.getString("AttachDocument", R.string.AttachDocument);
            }
            StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(documentFileName, Theme.chat_docNamePaint, i4, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, i4, 2, false);
            this.docTitleLayout = createStaticLayout;
            this.docTitleOffsetX = Integer.MIN_VALUE;
            if (createStaticLayout != null && createStaticLayout.getLineCount() > 0) {
                int i9 = 0;
                while (i5 < this.docTitleLayout.getLineCount()) {
                    i9 = Math.max(i9, (int) Math.ceil(this.docTitleLayout.getLineWidth(i5)));
                    this.docTitleOffsetX = Math.max(this.docTitleOffsetX, (int) Math.ceil(-this.docTitleLayout.getLineLeft(i5)));
                    i5++;
                }
                i2 = Math.min(i4, i9);
            } else {
                this.docTitleOffsetX = 0;
                i2 = i4;
            }
            int dp3 = i4 - AndroidUtilities.dp(30.0f);
            TextPaint textPaint = Theme.chat_infoPaint;
            int min = Math.min(dp3, (int) Math.ceil(textPaint.measureText("000.0 mm / " + AndroidUtilities.formatFileSize(this.documentAttach.size))));
            this.infoWidth = min;
            CharSequence ellipsize = TextUtils.ellipsize(AndroidUtilities.formatFileSize(this.documentAttach.size) + " " + FileLoader.getDocumentExtension(this.documentAttach), Theme.chat_infoPaint, (float) min, TextUtils.TruncateAt.END);
            try {
                if (this.infoWidth < 0) {
                    this.infoWidth = AndroidUtilities.dp(10.0f);
                }
                this.infoLayout = new StaticLayout(ellipsize, Theme.chat_infoPaint, this.infoWidth + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.drawPhotoImage) {
                this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
                this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
                if ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) == 0) {
                    this.currentPhotoObject = null;
                }
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                if (tLRPC$PhotoSize == null || tLRPC$PhotoSize == this.currentPhotoObjectThumb) {
                    this.currentPhotoObject = null;
                    this.photoImage.setNeedsQualityThumb(true);
                    this.photoImage.setShouldGenerateQualityThumb(true);
                } else {
                    BitmapDrawable bitmapDrawable = this.currentMessageObject.strippedThumb;
                    if (bitmapDrawable != null) {
                        this.currentPhotoObjectThumb = null;
                        this.currentPhotoObjectThumbStripped = bitmapDrawable;
                    }
                }
                this.currentPhotoFilter = "86_86_b";
                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, messageObject.photoThumbsObject), "86_86", ImageLocation.getForObject(this.currentPhotoObjectThumb, messageObject.photoThumbsObject), this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 1);
            }
            return i2;
        }
    }

    private void calcBackgroundWidth(int i, int i2, int i3) {
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        boolean z = reactionsLayoutInBubble.isEmpty;
        int i4 = (z || reactionsLayoutInBubble.isSmall) ? this.currentMessageObject.lastLineWidth : reactionsLayoutInBubble.lastLineX;
        boolean z2 = false;
        if (!z && !reactionsLayoutInBubble.isSmall) {
            if (i - i4 < i2 || this.currentMessageObject.hasRtl) {
                z2 = true;
            }
            if (this.hasInvoicePreview) {
                this.totalHeight += AndroidUtilities.dp(14.0f);
            }
        } else if (this.hasLinkPreview || this.hasOldCaptionPreview || this.hasGamePreview || this.hasInvoicePreview || i - i4 < i2 || this.currentMessageObject.hasRtl) {
            z2 = true;
        }
        if (z2) {
            this.totalHeight += AndroidUtilities.dp(14.0f);
            this.hasNewLineForTime = true;
            int max = Math.max(i3, i4) + AndroidUtilities.dp(31.0f);
            this.backgroundWidth = max;
            this.backgroundWidth = Math.max(max, (this.currentMessageObject.isOutOwner() ? this.timeWidth + AndroidUtilities.dp(17.0f) : this.timeWidth) + AndroidUtilities.dp(31.0f));
            return;
        }
        int extraTextX = (i3 - getExtraTextX()) - i4;
        if (extraTextX >= 0 && extraTextX <= i2) {
            this.backgroundWidth = ((i3 + i2) - extraTextX) + AndroidUtilities.dp(31.0f);
        } else {
            this.backgroundWidth = Math.max(i3, i4 + i2) + AndroidUtilities.dp(31.0f);
        }
    }

    public void setHighlightedText(String str) {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        if (messageObject == null || messageObject.messageOwner.message == null || TextUtils.isEmpty(str)) {
            if (this.urlPathSelection.isEmpty()) {
                return;
            }
            this.linkSelectionBlockNum = -1;
            resetUrlPaths();
            invalidate();
            return;
        }
        String lowerCase = str.toLowerCase();
        String lowerCase2 = messageObject.messageOwner.message.toLowerCase();
        int length = lowerCase2.length();
        int i = -1;
        int i2 = -1;
        for (int i3 = 0; i3 < length; i3++) {
            int min = Math.min(lowerCase.length(), length - i3);
            int i4 = 0;
            for (int i5 = 0; i5 < min; i5++) {
                boolean z = lowerCase2.charAt(i3 + i5) == lowerCase.charAt(i5);
                if (z) {
                    if (i4 != 0 || i3 == 0 || " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(lowerCase2.charAt(i3 - 1)) >= 0) {
                        i4++;
                    } else {
                        z = false;
                    }
                }
                if (!z || i5 == min - 1) {
                    if (i4 > 0 && i4 > i2) {
                        i = i3;
                        i2 = i4;
                    }
                }
            }
        }
        if (i == -1) {
            if (this.urlPathSelection.isEmpty()) {
                return;
            }
            this.linkSelectionBlockNum = -1;
            resetUrlPaths();
            invalidate();
            return;
        }
        int length2 = lowerCase2.length();
        for (int i6 = i + i2; i6 < length2 && " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(lowerCase2.charAt(i6)) < 0; i6++) {
            i2++;
        }
        int i7 = i + i2;
        if (this.captionLayout != null && !TextUtils.isEmpty(messageObject.caption)) {
            resetUrlPaths();
            try {
                LinkPath obtainNewUrlPath = obtainNewUrlPath();
                obtainNewUrlPath.setCurrentLayout(this.captionLayout, i, 0.0f);
                this.captionLayout.getSelectionPath(i, i7, obtainNewUrlPath);
            } catch (Exception e) {
                FileLog.e(e);
            }
            invalidate();
        } else if (messageObject.textLayoutBlocks != null) {
            for (int i8 = 0; i8 < messageObject.textLayoutBlocks.size(); i8++) {
                MessageObject.TextLayoutBlock textLayoutBlock = messageObject.textLayoutBlocks.get(i8);
                if (i >= textLayoutBlock.charactersOffset && i < textLayoutBlock.charactersEnd) {
                    this.linkSelectionBlockNum = i8;
                    resetUrlPaths();
                    try {
                        LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                        obtainNewUrlPath2.setCurrentLayout(textLayoutBlock.textLayout, i, 0.0f);
                        textLayoutBlock.textLayout.getSelectionPath(i, i7, obtainNewUrlPath2);
                        if (i7 >= textLayoutBlock.charactersOffset + i2) {
                            for (int i9 = i8 + 1; i9 < messageObject.textLayoutBlocks.size(); i9++) {
                                MessageObject.TextLayoutBlock textLayoutBlock2 = messageObject.textLayoutBlocks.get(i9);
                                int i10 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                                LinkPath obtainNewUrlPath3 = obtainNewUrlPath();
                                obtainNewUrlPath3.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.height);
                                textLayoutBlock2.textLayout.getSelectionPath(0, i7 - textLayoutBlock2.charactersOffset, obtainNewUrlPath3);
                                if (i7 < (textLayoutBlock.charactersOffset + i10) - 1) {
                                    break;
                                }
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    invalidate();
                    return;
                }
            }
        }
    }

    @Override // android.view.View
    protected boolean verifyDrawable(Drawable drawable) {
        if (!super.verifyDrawable(drawable)) {
            Drawable[] drawableArr = this.selectorDrawable;
            if (drawable != drawableArr[0] && drawable != drawableArr[1]) {
                return false;
            }
        }
        return true;
    }

    @Override // android.view.View, android.graphics.drawable.Drawable.Callback
    public void invalidateDrawable(Drawable drawable) {
        super.invalidateDrawable(drawable);
        if (this.currentMessagesGroup != null) {
            invalidateWithParent();
        }
    }

    private boolean isCurrentLocationTimeExpired(MessageObject messageObject) {
        return MessageObject.getMedia(this.currentMessageObject.messageOwner).period % 60 == 0 ? Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date) > MessageObject.getMedia(messageObject.messageOwner).period : Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date) > MessageObject.getMedia(messageObject.messageOwner).period + (-5);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkLocationExpired() {
        boolean isCurrentLocationTimeExpired;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject)) == this.locationExpired) {
            return;
        }
        this.locationExpired = isCurrentLocationTimeExpired;
        if (!isCurrentLocationTimeExpired) {
            AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
            this.scheduledInvalidate = true;
            int dp = this.backgroundWidth - AndroidUtilities.dp(91.0f);
            this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        this.currentMessageObject = null;
        setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    public void setIsUpdating(boolean z) {
        this.isUpdating = true;
    }

    public void setMessageObject(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        if (this.attachedToWindow) {
            setMessageContent(messageObject, groupedMessages, z, z2);
            return;
        }
        this.messageObjectToSet = messageObject;
        this.groupedMessagesToSet = groupedMessages;
        this.bottomNearToSet = z;
        this.topNearToSet = z2;
    }

    private int getAdditionalWidthForPosition(MessageObject.GroupedMessagePosition groupedMessagePosition) {
        int i = 0;
        if (groupedMessagePosition != null) {
            if ((groupedMessagePosition.flags & 2) == 0) {
                i = 0 + AndroidUtilities.dp(4.0f);
            }
            return (groupedMessagePosition.flags & 1) == 0 ? i + AndroidUtilities.dp(4.0f) : i;
        }
        return 0;
    }

    public void createSelectorDrawable(final int i) {
        int themedColor;
        if (Build.VERSION.SDK_INT < 21) {
            return;
        }
        String str = "chat_outPreviewInstantText";
        if (this.psaHintPressed) {
            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViews" : "chat_inViews");
        } else {
            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? str : "chat_inPreviewInstantText");
        }
        Drawable[] drawableArr = this.selectorDrawable;
        if (drawableArr[i] == null) {
            final Paint paint = new Paint(1);
            paint.setColor(-1);
            Drawable drawable = new Drawable() { // from class: org.telegram.ui.Cells.ChatMessageCell.6
                RectF rect = new RectF();
                Path path = new Path();

                @Override // android.graphics.drawable.Drawable
                public int getOpacity() {
                    return -2;
                }

                @Override // android.graphics.drawable.Drawable
                public void setAlpha(int i2) {
                }

                @Override // android.graphics.drawable.Drawable
                public void setColorFilter(ColorFilter colorFilter) {
                }

                @Override // android.graphics.drawable.Drawable
                public void draw(Canvas canvas) {
                    Rect bounds = getBounds();
                    this.rect.set(bounds.left, bounds.top, bounds.right, bounds.bottom);
                    if (ChatMessageCell.this.selectorDrawableMaskType[i] != 3 && ChatMessageCell.this.selectorDrawableMaskType[i] != 4) {
                        float f = 0.0f;
                        if (ChatMessageCell.this.selectorDrawableMaskType[i] == 2) {
                            this.path.reset();
                            boolean z = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOutOwner();
                            for (int i2 = 0; i2 < 4; i2++) {
                                if (!ChatMessageCell.this.instantTextNewLine) {
                                    if (i2 == 2 && !z) {
                                        float[] fArr = ChatMessageCell.radii;
                                        int i3 = i2 * 2;
                                        float dp = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i3 + 1] = dp;
                                        fArr[i3] = dp;
                                    } else if (i2 != 3 || !z) {
                                        if ((ChatMessageCell.this.mediaBackground || ChatMessageCell.this.pinnedBottom) && (i2 == 2 || i2 == 3)) {
                                            float[] fArr2 = ChatMessageCell.radii;
                                            int i4 = i2 * 2;
                                            float[] fArr3 = ChatMessageCell.radii;
                                            int i5 = i4 + 1;
                                            float dp2 = AndroidUtilities.dp(ChatMessageCell.this.pinnedBottom ? Math.min(5, SharedConfig.bubbleRadius) : SharedConfig.bubbleRadius);
                                            fArr3[i5] = dp2;
                                            fArr2[i4] = dp2;
                                        }
                                    } else {
                                        float[] fArr4 = ChatMessageCell.radii;
                                        int i6 = i2 * 2;
                                        float dp3 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i6 + 1] = dp3;
                                        fArr4[i6] = dp3;
                                    }
                                }
                                float[] fArr5 = ChatMessageCell.radii;
                                int i7 = i2 * 2;
                                ChatMessageCell.radii[i7 + 1] = 0.0f;
                                fArr5[i7] = 0.0f;
                            }
                            if (!z) {
                                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                                if (!chatMessageCell.drawPinnedBottom && chatMessageCell.currentPosition == null && (ChatMessageCell.this.currentMessageObject == null || ChatMessageCell.this.currentMessageObject.type != 17 || ChatMessageCell.this.pollInstantViewTouchesBottom)) {
                                    this.path.moveTo(this.rect.left + AndroidUtilities.dp(6.0f), this.rect.top);
                                    this.path.lineTo(this.rect.left + AndroidUtilities.dp(6.0f), (this.rect.bottom - AndroidUtilities.dp(6.0f)) - AndroidUtilities.dp(5.0f));
                                    RectF rectF = AndroidUtilities.rectTmp;
                                    rectF.set(this.rect.left + AndroidUtilities.dp(-7.0f), this.rect.bottom - AndroidUtilities.dp(23.0f), this.rect.left + AndroidUtilities.dp(6.0f), this.rect.bottom);
                                    this.path.arcTo(rectF, 0.0f, 83.0f, false);
                                    RectF rectF2 = this.rect;
                                    rectF.set(this.rect.right - (ChatMessageCell.radii[4] * 2.0f), this.rect.bottom - (ChatMessageCell.radii[5] * 2.0f), rectF2.right, rectF2.bottom);
                                    this.path.arcTo(rectF, 90.0f, -90.0f, false);
                                    Path path = this.path;
                                    RectF rectF3 = this.rect;
                                    path.lineTo(rectF3.right, rectF3.top);
                                    this.path.close();
                                    this.path.close();
                                    canvas.drawPath(this.path, paint);
                                    return;
                                }
                            }
                            this.path.addRoundRect(this.rect, ChatMessageCell.radii, Path.Direction.CW);
                            this.path.close();
                            canvas.drawPath(this.path, paint);
                            return;
                        }
                        RectF rectF4 = this.rect;
                        float dp4 = ChatMessageCell.this.selectorDrawableMaskType[i] == 0 ? AndroidUtilities.dp(6.0f) : 0.0f;
                        if (ChatMessageCell.this.selectorDrawableMaskType[i] == 0) {
                            f = AndroidUtilities.dp(6.0f);
                        }
                        canvas.drawRoundRect(rectF4, dp4, f, paint);
                        return;
                    }
                    canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(ChatMessageCell.this.selectorDrawableMaskType[i] == 3 ? 16.0f : 20.0f), paint);
                }
            };
            int[][] iArr = {StateSet.WILD_CARD};
            int[] iArr2 = new int[1];
            if (!this.currentMessageObject.isOutOwner()) {
                str = "chat_inPreviewInstantText";
            }
            iArr2[0] = getThemedColor(str) & 436207615;
            this.selectorDrawable[i] = new RippleDrawable(new ColorStateList(iArr, iArr2), null, drawable);
            this.selectorDrawable[i].setCallback(this);
        } else {
            Theme.setSelectorDrawableColor(drawableArr[i], themedColor & 436207615, true);
        }
        this.selectorDrawable[i].setVisible(true, false);
    }

    private void createInstantViewButton() {
        String string;
        int measureText;
        if (Build.VERSION.SDK_INT >= 21 && this.drawInstantView) {
            createSelectorDrawable(0);
        }
        if (!this.drawInstantView || this.instantViewLayout != null) {
            return;
        }
        this.instantWidth = AndroidUtilities.dp(33.0f);
        int i = this.drawInstantViewType;
        if (i == 12) {
            string = LocaleController.getString("OpenChannelPost", R.string.OpenChannelPost);
        } else if (i == 1) {
            string = LocaleController.getString("OpenChannel", R.string.OpenChannel);
        } else if (i == 13) {
            string = LocaleController.getString("SendMessage", R.string.SendMessage).toUpperCase();
        } else if (i == 10) {
            string = LocaleController.getString("OpenBot", R.string.OpenBot);
        } else if (i == 2) {
            string = LocaleController.getString("OpenGroup", R.string.OpenGroup);
        } else if (i == 3) {
            string = LocaleController.getString("OpenMessage", R.string.OpenMessage);
        } else if (i == 5) {
            string = LocaleController.getString("ViewContact", R.string.ViewContact);
        } else if (i == 6) {
            string = LocaleController.getString("OpenBackground", R.string.OpenBackground);
        } else if (i == 7) {
            string = LocaleController.getString("OpenTheme", R.string.OpenTheme);
        } else if (i == 8) {
            if (this.pollVoted || this.pollClosed) {
                string = LocaleController.getString("PollViewResults", R.string.PollViewResults);
            } else {
                string = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
            }
        } else if (i == 9 || i == 11) {
            TLRPC$TL_webPage tLRPC$TL_webPage = (TLRPC$TL_webPage) MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
            if (tLRPC$TL_webPage != null && tLRPC$TL_webPage.url.contains("voicechat=")) {
                string = LocaleController.getString("VoipGroupJoinAsSpeaker", R.string.VoipGroupJoinAsSpeaker);
            } else {
                string = LocaleController.getString("VoipGroupJoinAsLinstener", R.string.VoipGroupJoinAsLinstener);
            }
        } else {
            string = LocaleController.getString("InstantView", R.string.InstantView);
        }
        if (this.currentMessageObject.isSponsored() && this.backgroundWidth < (measureText = (int) (Theme.chat_instantViewPaint.measureText(string) + AndroidUtilities.dp(75.0f)))) {
            this.backgroundWidth = measureText;
        }
        int dp = this.backgroundWidth - AndroidUtilities.dp(75.0f);
        this.instantViewLayout = new StaticLayout(TextUtils.ellipsize(string, Theme.chat_instantViewPaint, dp, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, dp + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        if (this.drawInstantViewType == 8) {
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(13.0f);
        } else {
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(34.0f);
        }
        int dp2 = this.totalHeight + AndroidUtilities.dp(46.0f);
        this.totalHeight = dp2;
        if (this.currentMessageObject.type == 12) {
            this.totalHeight = dp2 + AndroidUtilities.dp(14.0f);
        }
        if (this.currentMessageObject.isSponsored() && this.hasNewLineForTime) {
            this.totalHeight += AndroidUtilities.dp(16.0f);
        }
        StaticLayout staticLayout = this.instantViewLayout;
        if (staticLayout == null || staticLayout.getLineCount() <= 0) {
            return;
        }
        double d = this.instantWidth;
        double ceil = Math.ceil(this.instantViewLayout.getLineWidth(0));
        Double.isNaN(d);
        this.instantTextX = (((int) (d - ceil)) / 2) + (this.drawInstantViewType == 0 ? AndroidUtilities.dp(8.0f) : 0);
        int lineLeft = (int) this.instantViewLayout.getLineLeft(0);
        this.instantTextLeftX = lineLeft;
        this.instantTextX += -lineLeft;
    }

    @Override // android.view.View, android.view.ViewParent
    public void requestLayout() {
        if (this.inLayout) {
            return;
        }
        super.requestLayout();
    }

    @Override // android.view.View
    protected void onMeasure(int i, int i2) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && (messageObject.checkLayout() || this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.inLayout = true;
            MessageObject messageObject2 = this.currentMessageObject;
            this.currentMessageObject = null;
            setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            this.inLayout = false;
        }
        updateSelectionTextPosition();
        setMeasuredDimension(View.MeasureSpec.getSize(i), this.totalHeight + this.keyboardHeight);
    }

    public void forceResetMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.currentMessageObject = null;
        setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    private int getGroupPhotosWidth() {
        int parentWidth = getParentWidth();
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.preview) {
            parentWidth = this.parentWidth;
        }
        if (AndroidUtilities.isInMultiwindow || !AndroidUtilities.isTablet()) {
            return parentWidth;
        }
        if (AndroidUtilities.isSmallTablet() && getResources().getConfiguration().orientation != 2) {
            return parentWidth;
        }
        int i = (parentWidth / 100) * 35;
        if (i < AndroidUtilities.dp(320.0f)) {
            i = AndroidUtilities.dp(320.0f);
        }
        return parentWidth - i;
    }

    private int getExtraTextX() {
        int i = SharedConfig.bubbleRadius;
        if (i >= 15) {
            return AndroidUtilities.dp(2.0f);
        }
        if (i < 11) {
            return 0;
        }
        return AndroidUtilities.dp(1.0f);
    }

    private int getExtraTimeX() {
        int i;
        if (!this.currentMessageObject.isOutOwner() && ((!this.mediaBackground || this.captionLayout != null) && (i = SharedConfig.bubbleRadius) > 11)) {
            return AndroidUtilities.dp((i - 11) / 1.5f);
        }
        if (!this.currentMessageObject.isOutOwner() && this.isPlayingRound && this.isAvatarVisible && this.currentMessageObject.type == 5) {
            return (int) ((AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f);
        }
        return 0;
    }

    @Override // android.view.ViewGroup, android.view.View
    @SuppressLint({"DrawAllocation"})
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        int i5;
        int i6;
        int dp;
        int i7;
        int dp2;
        int i8;
        int dp3;
        int i9;
        int i10;
        int dp4;
        int dp5;
        int dp6;
        int i11;
        int dp7;
        int i12;
        int i13;
        int dp8;
        int dp9;
        if (this.currentMessageObject == null) {
            return;
        }
        int measuredHeight = getMeasuredHeight() + (getMeasuredWidth() << 16);
        if (this.lastSize != measuredHeight || !this.wasLayout) {
            this.layoutWidth = getMeasuredWidth();
            this.layoutHeight = getMeasuredHeight() - this.substractBackgroundHeight;
            if (this.timeTextWidth < 0) {
                this.timeTextWidth = AndroidUtilities.dp(10.0f);
            }
            this.timeLayout = new StaticLayout(this.currentTimeString, Theme.chat_timePaint, AndroidUtilities.dp(100.0f) + this.timeTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            if (this.mediaBackground) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(42.0f);
                } else {
                    this.timeX = (this.backgroundWidth - AndroidUtilities.dp(4.0f)) - this.timeWidth;
                    if (this.currentMessageObject.isAnyKindOfSticker()) {
                        this.timeX = Math.max(AndroidUtilities.dp(26.0f), this.timeX);
                    }
                    if (this.isAvatarVisible) {
                        this.timeX += AndroidUtilities.dp(48.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null && (i5 = groupedMessagePosition.leftSpanOffset) != 0) {
                        this.timeX += (int) Math.ceil((i5 / 1000.0f) * getGroupPhotosWidth());
                    }
                    if (this.captionLayout != null && this.currentPosition != null) {
                        this.timeX += AndroidUtilities.dp(4.0f);
                    }
                }
                if (SharedConfig.bubbleRadius >= 10 && this.captionLayout == null && (i6 = this.documentAttachType) != 7 && i6 != 6) {
                    this.timeX -= AndroidUtilities.dp(2.0f);
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                this.timeX = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(38.5f);
            } else {
                this.timeX = (this.backgroundWidth - AndroidUtilities.dp(9.0f)) - this.timeWidth;
                if (this.currentMessageObject.isAnyKindOfSticker()) {
                    this.timeX = Math.max(0, this.timeX);
                }
                if (this.isAvatarVisible) {
                    this.timeX += AndroidUtilities.dp(48.0f);
                }
                if (shouldDrawTimeOnMedia()) {
                    this.timeX -= AndroidUtilities.dp(7.0f);
                }
            }
            this.timeX -= getExtraTimeX();
            if ((this.currentMessageObject.messageOwner.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
                this.viewsLayout = new StaticLayout(this.currentViewsString, Theme.chat_timePaint, this.viewsTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.viewsLayout = null;
            }
            if (this.currentRepliesString != null && !this.currentMessageObject.scheduled) {
                this.repliesLayout = new StaticLayout(this.currentRepliesString, Theme.chat_timePaint, this.repliesTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.repliesLayout = null;
            }
            if (this.isAvatarVisible) {
                this.avatarImage.setImageCoords(AndroidUtilities.dp(6.0f), this.avatarImage.getImageY(), AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
            }
            if (this.currentMessageObject.type == 20 && this.currentUnlockString != null) {
                this.unlockLayout = new StaticLayout(this.currentUnlockString, Theme.chat_unlockExtendedMediaTextPaint, this.unlockTextWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                int i14 = ((TLRPC$TL_messageExtendedMediaPreview) this.currentMessageObject.messageOwner.media.extended_media).video_duration;
                if (i14 != 0) {
                    String formatDuration = AndroidUtilities.formatDuration(i14, false);
                    this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatDuration));
                    this.videoInfoLayout = new StaticLayout(formatDuration, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                } else {
                    this.videoInfoLayout = null;
                }
            } else {
                this.unlockLayout = null;
            }
            this.wasLayout = true;
        }
        this.lastSize = measuredHeight;
        if (this.currentMessageObject.type == 0) {
            this.textY = AndroidUtilities.dp(10.0f) + this.namesOffset;
        }
        if (this.isRoundVideo) {
            updatePlayingMessageProgress();
        }
        int i15 = this.documentAttachType;
        if (i15 == 3 || i15 == 7) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(57.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(114.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(66.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            int dp10 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp10;
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i16 = this.buttonX;
            radialProgress2.setProgressRect(i16, dp10, AndroidUtilities.dp(44.0f) + i16, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
            if (this.documentAttachType != 7) {
                return;
            }
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject.type == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                if (this.hasGamePreview) {
                    i7 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                } else {
                    if (this.hasInvoicePreview) {
                        i10 = this.unmovedTextX;
                        dp4 = AndroidUtilities.dp(1.0f);
                    } else {
                        i10 = this.unmovedTextX;
                        dp4 = AndroidUtilities.dp(1.0f);
                    }
                    i7 = i10 + dp4;
                }
                if (this.isSmallImage) {
                    i8 = i7 + this.backgroundWidth;
                    dp3 = AndroidUtilities.dp(81.0f);
                    dp = i8 - dp3;
                } else {
                    dp2 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                    dp = i7 + dp2;
                }
            } else if (messageObject.isOutOwner()) {
                if (this.mediaBackground) {
                    i8 = this.layoutWidth - this.backgroundWidth;
                    dp3 = AndroidUtilities.dp(3.0f);
                    dp = i8 - dp3;
                } else {
                    i7 = this.layoutWidth - this.backgroundWidth;
                    dp2 = AndroidUtilities.dp(6.0f);
                    dp = i7 + dp2;
                }
            } else {
                if (this.isChat && this.isAvatarVisible && (!this.isPlayingRound || this.currentMessageObject.isVoiceTranscriptionOpen())) {
                    dp = AndroidUtilities.dp(63.0f);
                } else {
                    dp = AndroidUtilities.dp(15.0f);
                }
                MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                if (groupedMessagePosition2 != null && !groupedMessagePosition2.edge) {
                    dp -= AndroidUtilities.dp(10.0f);
                }
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 1) == 0) {
                    dp -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    dp += (int) Math.ceil((i9 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            if (this.currentMessageObject.type != 0) {
                dp -= AndroidUtilities.dp(2.0f);
            }
            if (this.currentMessageObject.isVoiceTranscriptionOpen()) {
                dp += AndroidUtilities.dp(10.0f);
            }
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.imageChangeBoundsTransition && !transitionParams.updatePhotoImageX) {
                return;
            }
            transitionParams.updatePhotoImageX = false;
            ImageReceiver imageReceiver = this.photoImage;
            imageReceiver.setImageCoords(dp, imageReceiver.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        } else if (i15 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(56.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                this.timeAudioX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.seekBarX = AndroidUtilities.dp(113.0f);
                this.buttonX = AndroidUtilities.dp(71.0f);
                this.timeAudioX = AndroidUtilities.dp(124.0f);
            } else {
                this.seekBarX = AndroidUtilities.dp(65.0f);
                this.buttonX = AndroidUtilities.dp(23.0f);
                this.timeAudioX = AndroidUtilities.dp(76.0f);
            }
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(29.0f) + this.namesOffset + this.mediaOffsetY;
            int dp11 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp11;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i17 = this.buttonX;
            radialProgress22.setProgressRect(i17, dp11, AndroidUtilities.dp(44.0f) + i17, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
        } else if (i15 == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
            } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                this.buttonX = AndroidUtilities.dp(71.0f);
            } else {
                this.buttonX = AndroidUtilities.dp(23.0f);
            }
            if (this.hasLinkPreview) {
                this.buttonX += AndroidUtilities.dp(10.0f);
            }
            int dp12 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY;
            this.buttonY = dp12;
            RadialProgress2 radialProgress23 = this.radialProgress;
            int i18 = this.buttonX;
            radialProgress23.setProgressRect(i18, dp12, AndroidUtilities.dp(44.0f) + i18, this.buttonY + AndroidUtilities.dp(44.0f));
            this.photoImage.setImageCoords(this.buttonX - AndroidUtilities.dp(10.0f), this.buttonY - AndroidUtilities.dp(10.0f), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        } else {
            MessageObject messageObject2 = this.currentMessageObject;
            int i19 = messageObject2.type;
            if (i19 == 12) {
                if (messageObject2.isOutOwner()) {
                    dp9 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                    dp9 = AndroidUtilities.dp(72.0f);
                } else {
                    dp9 = AndroidUtilities.dp(23.0f);
                }
                this.photoImage.setImageCoords(dp9, AndroidUtilities.dp(13.0f) + this.namesOffset, AndroidUtilities.dp(44.0f), AndroidUtilities.dp(44.0f));
                return;
            }
            if (i19 == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                if (this.hasGamePreview) {
                    i11 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
                } else {
                    if (this.hasInvoicePreview) {
                        i13 = this.unmovedTextX;
                        dp8 = AndroidUtilities.dp(1.0f);
                    } else {
                        i13 = this.unmovedTextX;
                        dp8 = AndroidUtilities.dp(1.0f);
                    }
                    i11 = i13 + dp8;
                }
                if (this.isSmallImage) {
                    dp5 = i11 + this.backgroundWidth;
                    dp6 = AndroidUtilities.dp(81.0f);
                    dp5 -= dp6;
                } else {
                    dp7 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                    dp5 = i11 + dp7;
                }
            } else {
                if (messageObject2.isOutOwner()) {
                    if (this.mediaBackground) {
                        dp5 = this.layoutWidth - this.backgroundWidth;
                        dp6 = AndroidUtilities.dp(3.0f);
                    } else {
                        i11 = this.layoutWidth - this.backgroundWidth;
                        dp7 = AndroidUtilities.dp(6.0f);
                        dp5 = i11 + dp7;
                    }
                } else {
                    if (this.isChat && this.isAvatarVisible && !this.isPlayingRound) {
                        dp5 = AndroidUtilities.dp(63.0f);
                    } else {
                        dp5 = AndroidUtilities.dp(15.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                    if (groupedMessagePosition4 != null && !groupedMessagePosition4.edge) {
                        dp6 = AndroidUtilities.dp(10.0f);
                    }
                }
                dp5 -= dp6;
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 != null) {
                if ((groupedMessagePosition5.flags & 1) == 0) {
                    dp5 -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    dp5 += (int) Math.ceil((i12 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            if (this.currentMessageObject.type != 0) {
                dp5 -= AndroidUtilities.dp(2.0f);
            }
            TransitionParams transitionParams2 = this.transitionParams;
            if (!transitionParams2.imageChangeBoundsTransition || transitionParams2.updatePhotoImageX) {
                transitionParams2.updatePhotoImageX = false;
                ImageReceiver imageReceiver2 = this.photoImage;
                imageReceiver2.setImageCoords(dp5, imageReceiver2.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            }
            this.buttonX = (int) (dp5 + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY;
            RadialProgress2 radialProgress24 = this.radialProgress;
            int i20 = this.buttonX;
            radialProgress24.setProgressRect(i20, imageY, AndroidUtilities.dp(48.0f) + i20, this.buttonY + AndroidUtilities.dp(48.0f));
            this.deleteProgressRect.set(this.buttonX + AndroidUtilities.dp(5.0f), this.buttonY + AndroidUtilities.dp(5.0f), this.buttonX + AndroidUtilities.dp(43.0f), this.buttonY + AndroidUtilities.dp(43.0f));
            int i21 = this.documentAttachType;
            if (i21 != 4 && i21 != 2) {
                return;
            }
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY2;
            RadialProgress2 radialProgress25 = this.videoRadialProgress;
            int i22 = this.videoButtonX;
            radialProgress25.setProgressRect(i22, imageY2, AndroidUtilities.dp(24.0f) + i22, this.videoButtonY + AndroidUtilities.dp(24.0f));
        }
    }

    public boolean needDelayRoundProgressDraw() {
        int i = this.documentAttachType;
        return (i == 7 || i == 4) && this.currentMessageObject.type != 5 && MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
    }

    /* JADX WARN: Removed duplicated region for block: B:21:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0094  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00a6  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00cb  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x01a8  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x01b3  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0298  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x02f7  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x02df  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0277  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01ad  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0145  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x014c  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x007f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawRoundProgress(Canvas canvas) {
        float interpolation;
        TransitionParams transitionParams;
        int i;
        VideoForwardDrawable videoForwardDrawable;
        int i2;
        float f;
        int i3;
        float dp = this.isPlayingRound ? AndroidUtilities.dp(4.0f) : 0.0f;
        boolean z = false;
        boolean z2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isMessagePaused();
        if (z2 && this.roundSeekbarTouched == 1) {
            z = true;
        }
        if (z2) {
            float f2 = this.roundToPauseProgress;
            if (f2 != 1.0f) {
                float f3 = f2 + 0.07272727f;
                this.roundToPauseProgress = f3;
                if (f3 > 1.0f) {
                    this.roundToPauseProgress = 1.0f;
                } else {
                    invalidate();
                }
                if (z) {
                    float f4 = this.roundToPauseProgress2;
                    if (f4 != 1.0f) {
                        float f5 = f4 + 0.10666667f;
                        this.roundToPauseProgress2 = f5;
                        if (f5 > 1.0f) {
                            this.roundToPauseProgress2 = 1.0f;
                        } else {
                            invalidate();
                        }
                        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                        transitionParams = this.transitionParams;
                        if (transitionParams.animatePlayingRound) {
                            dp = (this.isPlayingRound ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) * AndroidUtilities.dp(4.0f);
                        }
                        float dp2 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                        if (this.roundToPauseProgress > 0.0f) {
                            Theme.getRadialSeekbarShadowDrawable().draw(canvas, this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.roundToPauseProgress);
                        }
                        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp2, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp2, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp2, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp2);
                        if (this.roundProgressAlpha == 1.0f || (!this.hasLinkPreview && getVideoTranscriptionProgress() > 0.0f)) {
                            int alpha = Theme.chat_radialProgressPaint.getAlpha();
                            Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha));
                            i = alpha;
                        } else {
                            i = -1;
                        }
                        videoForwardDrawable = this.videoForwardDrawable;
                        if (videoForwardDrawable != null && videoForwardDrawable.isAnimating()) {
                            this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                            this.videoForwardDrawable.draw(canvas);
                        }
                        int alpha2 = Theme.chat_radialProgressPaint.getAlpha();
                        float strokeWidth = Theme.chat_radialProgressPaint.getStrokeWidth();
                        float f6 = this.roundProgressAlpha == 1.0f ? this.currentMessageObject.audioProgress : this.lastDrawingAudioProgress;
                        if (interpolation > 0.0f) {
                            float width = this.rect.width() / 2.0f;
                            Theme.chat_radialProgressPaint.setStrokeWidth((0.5f * strokeWidth * this.roundToPauseProgress) + strokeWidth);
                            Theme.chat_radialProgressPaint.setAlpha((int) (alpha2 * this.roundToPauseProgress * 0.3f));
                            canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), width, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha(alpha2);
                            double centerX = this.rect.centerX();
                            double d = ((-360.0f) * f6) + 180.0f;
                            double sin = Math.sin(Math.toRadians(d));
                            i2 = i;
                            double d2 = width;
                            Double.isNaN(d2);
                            Double.isNaN(centerX);
                            this.seekbarRoundX = (float) (centerX + (sin * d2));
                            double centerY = this.rect.centerY();
                            double cos = Math.cos(Math.toRadians(d));
                            Double.isNaN(d2);
                            Double.isNaN(centerY);
                            this.seekbarRoundY = (float) (centerY + (cos * d2));
                            Theme.chat_radialProgressPausedSeekbarPaint.setColor(-1);
                            Theme.chat_radialProgressPausedSeekbarPaint.setAlpha((int) (Math.min(1.0f, interpolation) * 255.0f * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f)));
                            canvas.drawCircle(this.seekbarRoundX, this.seekbarRoundY, AndroidUtilities.dp(3.0f) + (AndroidUtilities.dp(5.0f) * interpolation) + (AndroidUtilities.dp(3.0f) * this.roundToPauseProgress2), Theme.chat_radialProgressPausedSeekbarPaint);
                        } else {
                            i2 = i;
                        }
                        f = this.roundSeekbarOutAlpha;
                        if (f != 0.0f) {
                            float f7 = f - 0.10666667f;
                            this.roundSeekbarOutAlpha = f7;
                            if (f7 < 0.0f) {
                                this.roundSeekbarOutAlpha = 0.0f;
                            } else {
                                invalidate();
                            }
                        }
                        if (this.roundSeekbarOutAlpha != 0.0f) {
                            int i4 = i2;
                            i3 = i4 == -1 ? Theme.chat_radialProgressPaint.getAlpha() : i4;
                            float f8 = alpha2;
                            Theme.chat_radialProgressPaint.setAlpha((int) ((1.0f - this.roundSeekbarOutAlpha) * f8));
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            Theme.chat_radialProgressPaint.setAlpha((int) (f8 * this.roundSeekbarOutAlpha));
                            canvas.drawArc(this.rect, -90.0f, this.roundSeekbarOutProgress * 360.0f, false, Theme.chat_radialProgressPaint);
                        } else {
                            canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                            i3 = i2;
                        }
                        if (i3 != -1) {
                            Theme.chat_radialProgressPaint.setAlpha(i3);
                        }
                        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth);
                    }
                }
                if (!z) {
                    float f9 = this.roundToPauseProgress2;
                    if (f9 != 0.0f) {
                        float f10 = f9 - 0.10666667f;
                        this.roundToPauseProgress2 = f10;
                        if (f10 < 0.0f) {
                            this.roundToPauseProgress2 = 0.0f;
                        } else {
                            invalidate();
                        }
                    }
                }
                interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                transitionParams = this.transitionParams;
                if (transitionParams.animatePlayingRound) {
                }
                float dp22 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                if (this.roundToPauseProgress > 0.0f) {
                }
                this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp22, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp22, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp22, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp22);
                if (this.roundProgressAlpha == 1.0f) {
                }
                int alpha3 = Theme.chat_radialProgressPaint.getAlpha();
                Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha3));
                i = alpha3;
                videoForwardDrawable = this.videoForwardDrawable;
                if (videoForwardDrawable != null) {
                    this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                    this.videoForwardDrawable.draw(canvas);
                }
                int alpha22 = Theme.chat_radialProgressPaint.getAlpha();
                float strokeWidth2 = Theme.chat_radialProgressPaint.getStrokeWidth();
                if (this.roundProgressAlpha == 1.0f) {
                }
                if (interpolation > 0.0f) {
                }
                f = this.roundSeekbarOutAlpha;
                if (f != 0.0f) {
                }
                if (this.roundSeekbarOutAlpha != 0.0f) {
                }
                if (i3 != -1) {
                }
                Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth2);
            }
        }
        if (!z2) {
            float f11 = this.roundToPauseProgress;
            if (f11 != 0.0f) {
                float f12 = f11 - 0.10666667f;
                this.roundToPauseProgress = f12;
                if (f12 < 0.0f) {
                    this.roundToPauseProgress = 0.0f;
                } else {
                    invalidate();
                }
            }
        }
        if (z) {
        }
        if (!z) {
        }
        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
        transitionParams = this.transitionParams;
        if (transitionParams.animatePlayingRound) {
        }
        float dp222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
        if (this.roundToPauseProgress > 0.0f) {
        }
        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp222);
        if (this.roundProgressAlpha == 1.0f) {
        }
        int alpha32 = Theme.chat_radialProgressPaint.getAlpha();
        Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha32));
        i = alpha32;
        videoForwardDrawable = this.videoForwardDrawable;
        if (videoForwardDrawable != null) {
        }
        int alpha222 = Theme.chat_radialProgressPaint.getAlpha();
        float strokeWidth22 = Theme.chat_radialProgressPaint.getStrokeWidth();
        if (this.roundProgressAlpha == 1.0f) {
        }
        if (interpolation > 0.0f) {
        }
        f = this.roundSeekbarOutAlpha;
        if (f != 0.0f) {
        }
        if (this.roundSeekbarOutAlpha != 0.0f) {
        }
        if (i3 != -1) {
        }
        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth22);
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:54:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePollAnimations(long j) {
        if (this.pollVoteInProgress) {
            float f = this.voteRadOffset + (((float) (360 * j)) / 2000.0f);
            this.voteRadOffset = f;
            int i = 360;
            this.voteRadOffset = f - (((int) (f / 360.0f)) * 360);
            float f2 = this.voteCurrentProgressTime + ((float) j);
            this.voteCurrentProgressTime = f2;
            if (f2 >= 500.0f) {
                this.voteCurrentProgressTime = 500.0f;
            }
            if (this.voteRisingCircleLength) {
                this.voteCurrentCircleLength = (AndroidUtilities.accelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f) * 266.0f) + 4.0f;
            } else {
                if (!this.firstCircleLength) {
                    i = 270;
                }
                this.voteCurrentCircleLength = 4.0f - (i * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f)));
            }
            if (this.voteCurrentProgressTime == 500.0f) {
                boolean z = this.voteRisingCircleLength;
                if (z) {
                    this.voteRadOffset += 270.0f;
                    this.voteCurrentCircleLength = -266.0f;
                }
                this.voteRisingCircleLength = !z;
                if (this.firstCircleLength) {
                    this.firstCircleLength = false;
                }
                this.voteCurrentProgressTime = 0.0f;
            }
            invalidate();
        }
        boolean z2 = this.hintButtonVisible;
        if (z2) {
            float f3 = this.hintButtonProgress;
            if (f3 < 1.0f) {
                float f4 = f3 + (((float) j) / 180.0f);
                this.hintButtonProgress = f4;
                if (f4 > 1.0f) {
                    this.hintButtonProgress = 1.0f;
                }
                invalidate();
                if (this.animatePollAnswer) {
                    return;
                }
                float f5 = this.pollAnimationProgressTime + ((float) j);
                this.pollAnimationProgressTime = f5;
                if (f5 >= 300.0f) {
                    this.pollAnimationProgressTime = 300.0f;
                }
                float interpolation = AndroidUtilities.decelerateInterpolator.getInterpolation(this.pollAnimationProgressTime / 300.0f);
                this.pollAnimationProgress = interpolation;
                if (interpolation >= 1.0f) {
                    this.pollAnimationProgress = 1.0f;
                    this.animatePollAnswer = false;
                    this.animatePollAnswerAlpha = false;
                    this.pollVoteInProgress = false;
                    if (this.pollUnvoteInProgress && this.animatePollAvatars) {
                        int i2 = 0;
                        while (true) {
                            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                            if (i2 >= imageReceiverArr.length) {
                                break;
                            }
                            imageReceiverArr[i2].setImageBitmap((Drawable) null);
                            this.pollAvatarImagesVisible[i2] = false;
                            i2++;
                        }
                    }
                    this.pollUnvoteInProgress = false;
                    int size = this.pollButtons.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        this.pollButtons.get(i3).prevChosen = false;
                    }
                }
                invalidate();
                return;
            }
        }
        if (!z2) {
            float f6 = this.hintButtonProgress;
            if (f6 > 0.0f) {
                float f7 = f6 - (((float) j) / 180.0f);
                this.hintButtonProgress = f7;
                if (f7 < 0.0f) {
                    this.hintButtonProgress = 0.0f;
                }
                invalidate();
            }
        }
        if (this.animatePollAnswer) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:101:0x0f69  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0f78  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x0fbc  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x101b  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x1036  */
    /* JADX WARN: Removed duplicated region for block: B:277:0x1072  */
    /* JADX WARN: Removed duplicated region for block: B:278:0x1027  */
    /* JADX WARN: Removed duplicated region for block: B:284:0x1012  */
    /* JADX WARN: Removed duplicated region for block: B:285:0x0fa5  */
    /* JADX WARN: Removed duplicated region for block: B:286:0x0f71  */
    /* JADX WARN: Removed duplicated region for block: B:287:0x0f45  */
    /* JADX WARN: Removed duplicated region for block: B:288:0x0f29  */
    /* JADX WARN: Removed duplicated region for block: B:320:0x08e7  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x0944  */
    /* JADX WARN: Removed duplicated region for block: B:337:0x09e2  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x093c  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0f26  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0f42  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawContent(Canvas canvas) {
        String str;
        int i;
        MessageObject messageObject;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        AudioVisualizerDrawable animatedOutAudioVisualizerDrawable;
        float f;
        boolean isPlayingMessage;
        float currentBackgroundRight;
        float f2;
        float f3;
        Drawable drawable;
        float f4;
        float f5;
        float f6;
        int i2;
        String str2;
        int i3;
        int i4;
        Drawable drawable2;
        float dp;
        int dp2;
        int dp3;
        StaticLayout staticLayout;
        StaticLayout staticLayout2;
        int imageX;
        Path path;
        int i5;
        int dp4;
        ViewGroup viewGroup;
        MessageObject messageObject2;
        Paint paint;
        boolean z = this.needNewVisiblePart && this.currentMessageObject.type == 0;
        boolean hasSpoilers = hasSpoilers();
        if (z || hasSpoilers) {
            getLocalVisibleRect(this.scrollRect);
            if (hasSpoilers) {
                Rect rect = this.scrollRect;
                updateSpoilersVisiblePart(rect.top, rect.bottom);
            }
            if (z) {
                Rect rect2 = this.scrollRect;
                int i6 = rect2.top;
                setVisiblePart(i6, rect2.bottom - i6, this.parentHeight, this.parentViewTopOffset, this.viewTop, this.parentWidth, this.backgroundHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
                this.needNewVisiblePart = false;
            }
        }
        float f7 = this.buttonX;
        float f8 = this.buttonY;
        if (this.transitionParams.animateButton) {
            float f9 = this.transitionParams.animateFromButtonX;
            TransitionParams transitionParams = this.transitionParams;
            float f10 = transitionParams.animateChangeProgress;
            f7 = (f9 * (1.0f - f10)) + (this.buttonX * f10);
            float f11 = transitionParams.animateFromButtonY;
            float f12 = this.transitionParams.animateChangeProgress;
            f8 = (f11 * (1.0f - f12)) + (this.buttonY * f12);
            int i7 = (int) f7;
            int i8 = (int) f8;
            this.radialProgress.setProgressRect(i7, i8, AndroidUtilities.dp(44.0f) + i7, AndroidUtilities.dp(44.0f) + i8);
        }
        float f13 = f8;
        updateSeekBarWaveformWidth(canvas);
        this.forceNotDrawTime = this.currentMessagesGroup != null;
        this.photoImage.setPressed(((this.isHighlightedAnimated || this.isHighlighted) && this.currentPosition != null) ? 2 : 0);
        this.photoImage.setVisible(!PhotoViewer.isShowingImage(this.currentMessageObject) && !SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject), false);
        if (!this.photoImage.getVisible()) {
            this.mediaWasInvisible = true;
            this.timeWasInvisible = true;
            int i9 = this.animatingNoSound;
            if (i9 == 1) {
                this.animatingNoSoundProgress = 0.0f;
                this.animatingNoSound = 0;
            } else if (i9 == 2) {
                this.animatingNoSoundProgress = 1.0f;
                this.animatingNoSound = 0;
            }
        } else if (this.groupPhotoInvisible) {
            this.timeWasInvisible = true;
        } else {
            boolean z2 = this.mediaWasInvisible;
            if (z2 || this.timeWasInvisible) {
                if (z2) {
                    this.controlsAlpha = 0.0f;
                    this.mediaWasInvisible = false;
                }
                if (this.timeWasInvisible) {
                    this.timeAlpha = 0.0f;
                    this.timeWasInvisible = false;
                }
                this.lastControlsAlphaChangeTime = System.currentTimeMillis();
                this.totalChangeTime = 0L;
            }
        }
        this.radialProgress.setProgressColor(getThemedColor("chat_mediaProgress"));
        this.videoRadialProgress.setProgressColor(getThemedColor("chat_mediaProgress"));
        this.imageDrawn = false;
        this.radialProgress.setCircleCrossfadeColor(null, 0.0f, 1.0f);
        MessageObject messageObject3 = this.currentMessageObject;
        int i10 = messageObject3.type;
        float f14 = 11.0f;
        if (i10 == 0 || i10 == 19) {
            if (messageObject3.isOutOwner()) {
                this.textX = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f) + getExtraTextX();
            } else {
                this.textX = getCurrentBackgroundLeft() + (this.currentMessageObject.type == 19 ? 0 : AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f)) + getExtraTextX();
            }
            if (this.hasGamePreview) {
                this.textX += AndroidUtilities.dp(11.0f);
                int dp5 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                this.textY = dp5;
                StaticLayout staticLayout3 = this.siteNameLayout;
                if (staticLayout3 != null) {
                    this.textY = dp5 + staticLayout3.getLineBottom(staticLayout3.getLineCount() - 1);
                }
            } else if (this.hasInvoicePreview) {
                int dp6 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                this.textY = dp6;
                StaticLayout staticLayout4 = this.siteNameLayout;
                if (staticLayout4 != null) {
                    this.textY = dp6 + staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                }
            } else if (this.currentMessageObject.type == 19) {
                this.textY = AndroidUtilities.dp(6.0f) + this.namesOffset;
                if (!this.currentMessageObject.isOut()) {
                    this.textX = getCurrentBackgroundLeft();
                } else {
                    this.textX -= AndroidUtilities.dp(4.0f);
                }
            } else {
                this.textY = AndroidUtilities.dp(8.0f) + this.namesOffset;
            }
            this.unmovedTextX = this.textX;
            if (this.currentMessageObject.textXOffset != 0.0f && this.replyNameLayout != null) {
                int dp7 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                MessageObject messageObject4 = this.currentMessageObject;
                int i11 = dp7 - messageObject4.textWidth;
                if (!this.hasNewLineForTime) {
                    i11 -= this.timeWidth + AndroidUtilities.dp((messageObject4.isOutOwner() ? 20 : 0) + 4);
                }
                if (i11 > 0) {
                    this.textX += i11 - getExtraTimeX();
                }
            }
            if (this.enterTransitionInProgress || (messageObject = this.currentMessageObject) == null || messageObject.preview) {
                str = "chat_mediaProgress";
                i = 5;
            } else {
                if (!this.drawForBlur && this.animatedEmojiStack != null && (((arrayList = messageObject.textLayoutBlocks) != null && !arrayList.isEmpty()) || (this.transitionParams.animateOutTextBlocks != null && !this.transitionParams.animateOutTextBlocks.isEmpty()))) {
                    this.animatedEmojiStack.clearPositions();
                }
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animateChangeProgress != 1.0f && transitionParams2.animateMessageText) {
                    canvas.save();
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null) {
                        Rect bounds = messageDrawable.getBounds();
                        if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                        } else {
                            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                        }
                    }
                    i = 5;
                    str = "chat_mediaProgress";
                    drawMessageText(canvas, this.transitionParams.animateOutTextBlocks, false, 1.0f - this.transitionParams.animateChangeProgress, false);
                    drawMessageText(canvas, this.currentMessageObject.textLayoutBlocks, true, this.transitionParams.animateChangeProgress, false);
                    canvas.restore();
                } else {
                    str = "chat_mediaProgress";
                    i = 5;
                    drawMessageText(canvas, this.currentMessageObject.textLayoutBlocks, true, 1.0f, false);
                }
            }
            if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                drawLinkPreview(canvas, 1.0f);
            }
            this.drawTime = true;
        } else {
            if (this.drawPhotoImage) {
                float f15 = this.roundVideoPlayPipFloat.get();
                if (f15 > 0.0f) {
                    if (this.drillHolePaint == null) {
                        this.drillHolePaint = new Paint(1);
                    }
                    this.drillHolePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLoader" : "chat_inLoader"));
                    this.drillHolePaint.setAlpha((int) (paint.getAlpha() * getVideoTranscriptionProgress()));
                    canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.drillHolePaint);
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated() && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.isVoiceTranscriptionOpen() || f15 >= 1.0f)) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    if (this.currentMessageObject.type == 5 && Theme.chat_roundVideoShadow != null) {
                        float imageX2 = this.photoImage.getImageX() - AndroidUtilities.dp(3.0f);
                        float imageY = this.photoImage.getImageY() - AndroidUtilities.dp(2.0f);
                        Theme.chat_roundVideoShadow.setAlpha((int) ((1.0f - getVideoTranscriptionProgress()) * 255.0f));
                        Theme.chat_roundVideoShadow.setBounds((int) imageX2, (int) imageY, (int) (imageX2 + this.photoImage.getImageWidth() + AndroidUtilities.dp(6.0f)), (int) (imageY + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f)));
                        Theme.chat_roundVideoShadow.draw(canvas);
                        Theme.chat_roundVideoShadow.setAlpha(255);
                        if (!this.photoImage.hasBitmapImage() || this.photoImage.getCurrentAlpha() != 1.0f) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outBubble" : "chat_inBubble"));
                            canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, Theme.chat_docBackPaint);
                        }
                    }
                    CheckBoxBase checkBoxBase = this.mediaCheckBox;
                    boolean z3 = checkBoxBase != null && (this.checkBoxVisible || checkBoxBase.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z3;
                    if (z3 && ((this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && !textIsSelectionMode())) {
                        if (!this.currentMessagesGroup.isDocuments) {
                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outBubbleSelected" : "chat_inBubbleSelected"));
                            this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                            int[] roundRadius = this.photoImage.getRoundRadius();
                            this.rectPath.reset();
                            for (int i12 = 0; i12 < roundRadius.length; i12++) {
                                float[] fArr = radii;
                                int i13 = i12 * 2;
                                float f16 = roundRadius[i12];
                                fArr[i13 + 1] = f16;
                                fArr[i13] = f16;
                            }
                            this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                            this.rectPath.close();
                            canvas.drawPath(this.rectPath, Theme.chat_replyLinePaint);
                        }
                        this.photoImage.setSideClip(AndroidUtilities.dp(14.0f) * this.mediaCheckBox.getProgress());
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                        } else {
                            CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
                            checkBoxBase2.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase2.getProgress());
                        }
                    } else {
                        this.photoImage.setSideClip(0.0f);
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f15 > 0.0f) {
                        canvas.save();
                        Path path2 = this.drillHolePath;
                        if (path2 == null) {
                            this.drillHolePath = new Path();
                        } else {
                            path2.rewind();
                        }
                        this.drillHolePath.addCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), (this.photoImage.getImageWidth() / 2.0f) * (1.0f - f15), Path.Direction.CW);
                        canvas.clipPath(this.drillHolePath);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        float y = getY() + this.photoImage.getImageY();
                        float imageHeight = this.photoImage.getImageHeight() + y;
                        this.photoImageOutOfBounds = false;
                        float f17 = this.parentBoundsTop;
                        if ((f17 != 0.0f || this.parentBoundsBottom != 0) && (imageHeight < f17 || y > this.parentBoundsBottom)) {
                            this.photoImageOutOfBounds = true;
                        }
                        if (!this.photoImageOutOfBounds || this.drawForBlur) {
                            this.photoImage.setSkipUpdateFrame(this.drawForBlur);
                            if (this.flipImage) {
                                canvas.save();
                                canvas.scale(-1.0f, 1.0f, this.photoImage.getCenterX(), this.photoImage.getCenterY());
                                this.imageDrawn = this.photoImage.draw(canvas);
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    drawBlurredPhoto(canvas);
                                }
                                canvas.restore();
                            } else {
                                this.imageDrawn = this.photoImage.draw(canvas);
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    drawBlurredPhoto(canvas);
                                }
                            }
                            this.photoImage.setSkipUpdateFrame(false);
                        }
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f15 > 0.0f) {
                        canvas.restore();
                    }
                    boolean z4 = this.drawTime;
                    boolean visible = this.photoImage.getVisible();
                    boolean z5 = visible || (this.currentMessageObject.shouldDrawReactionsInLayout() && this.currentMessageObject.hasReactions());
                    this.drawTime = z5;
                    if (this.currentPosition != null && z4 != z5 && (viewGroup = (ViewGroup) getParent()) != null) {
                        if (!this.currentPosition.last) {
                            int childCount = viewGroup.getChildCount();
                            for (int i14 = 0; i14 < childCount; i14++) {
                                View childAt = viewGroup.getChildAt(i14);
                                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                                    if (chatMessageCell.getCurrentMessagesGroup() == this.currentMessagesGroup) {
                                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                        if (currentPosition.last && currentPosition.maxY == this.currentPosition.maxY && (chatMessageCell.timeX - AndroidUtilities.dp(4.0f)) + chatMessageCell.getLeft() < getRight()) {
                                            chatMessageCell.groupPhotoInvisible = !visible;
                                            chatMessageCell.invalidate();
                                            viewGroup.invalidate();
                                        }
                                    }
                                }
                            }
                        } else {
                            viewGroup.invalidate();
                        }
                    }
                }
            } else {
                int i15 = this.documentAttachType;
                if (i15 == 5 || i15 == 1) {
                    CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
                    boolean z6 = checkBoxBase3 != null && (this.checkBoxVisible || checkBoxBase3.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z6;
                    if (z6) {
                        this.radialProgress.setCircleCrossfadeColor(this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText", this.checkBoxAnimationProgress, 1.0f - this.mediaCheckBox.getProgress());
                    }
                    if (this.drawMediaCheckBox && !textIsSelectionMode() && (this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress)) {
                        if (this.checkBoxAnimationInProgress) {
                            this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                            if (this.radialProgress.getMiniIcon() == 4) {
                                this.radialProgress.setMiniIconScale(this.checkBoxAnimationProgress);
                            }
                        } else {
                            CheckBoxBase checkBoxBase4 = this.mediaCheckBox;
                            checkBoxBase4.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase4.getProgress());
                        }
                    } else {
                        CheckBoxBase checkBoxBase5 = this.mediaCheckBox;
                        if (checkBoxBase5 != null) {
                            checkBoxBase5.setBackgroundAlpha(1.0f);
                        }
                    }
                }
            }
            str = "chat_mediaProgress";
            i = 5;
        }
        int i16 = this.documentAttachType;
        String str3 = "chat_outAudioSelectedProgress";
        String str4 = "chat_inAudioSelectedProgress";
        if (i16 == 2) {
            if (this.drawPhotoImage && this.photoImage.getVisible() && !this.hasGamePreview && !this.currentMessageObject.needDrawBluredPreview()) {
                int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                Drawable drawable3 = Theme.chat_msgMediaMenuDrawable;
                int imageX3 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                this.otherX = imageX3;
                int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                this.otherY = imageY2;
                BaseCell.setDrawableBounds(drawable3, imageX3, imageY2);
                Theme.chat_msgMediaMenuDrawable.draw(canvas);
                Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
            }
        } else if (i16 == i) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_outAudioTitleText"));
                Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioPerfomerSelectedText" : "chat_outAudioPerfomerText"));
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioDurationSelectedText" : "chat_outAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str3 : "chat_outAudioProgress"));
            } else {
                Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_inAudioTitleText"));
                Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioPerfomerSelectedText" : "chat_inAudioPerfomerText"));
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioDurationSelectedText" : "chat_inAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str4 : "chat_inAudioProgress"));
            }
            this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
            this.radialProgress.draw(canvas);
            canvas.save();
            canvas.translate(this.timeAudioX + this.songX, AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY);
            this.songLayout.draw(canvas);
            canvas.restore();
            boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            if (isPlayingMessage2) {
                float f18 = this.toSeekBarProgress;
                if (f18 != 1.0f) {
                    float f19 = f18 + 0.16f;
                    this.toSeekBarProgress = f19;
                    if (f19 > 1.0f) {
                        this.toSeekBarProgress = 1.0f;
                    }
                    invalidate();
                    f2 = this.toSeekBarProgress;
                    if (f2 <= 0.0f) {
                        if (f2 != 1.0f) {
                            f3 = 0.0f;
                            canvas.saveLayerAlpha(this.seekBarX, this.seekBarY, i2 + this.seekBar.getWidth() + AndroidUtilities.dp(24.0f), this.seekBarY + AndroidUtilities.dp(24.0f), (int) (this.toSeekBarProgress * 255.0f), 31);
                        } else {
                            f3 = 0.0f;
                            canvas.save();
                        }
                        canvas.translate(this.seekBarX, this.seekBarY);
                        this.seekBar.draw(canvas);
                        canvas.restore();
                    } else {
                        f3 = 0.0f;
                    }
                    if (this.toSeekBarProgress < 1.0f) {
                        float f20 = this.timeAudioX + this.performerX;
                        float dp8 = AndroidUtilities.dp(35.0f) + this.namesOffset + this.mediaOffsetY;
                        if (this.toSeekBarProgress != f3) {
                            f4 = dp8;
                            f5 = f20;
                            canvas.saveLayerAlpha(f20, dp8, f20 + this.performerLayout.getWidth(), dp8 + this.performerLayout.getHeight(), (int) ((1.0f - this.toSeekBarProgress) * 255.0f), 31);
                        } else {
                            f4 = dp8;
                            f5 = f20;
                            canvas.save();
                        }
                        float f21 = this.toSeekBarProgress;
                        if (f21 != f3) {
                            float f22 = ((1.0f - f21) * 0.3f) + 0.7f;
                            f6 = f5;
                            canvas.scale(f22, f22, f6, f4 + (this.performerLayout.getHeight() / 2.0f));
                        } else {
                            f6 = f5;
                        }
                        canvas.translate(f6, f4);
                        this.performerLayout.draw(canvas);
                        canvas.restore();
                    }
                    canvas.save();
                    canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + this.mediaOffsetY);
                    this.durationLayout.draw(canvas);
                    canvas.restore();
                    if (shouldDrawMenuDrawable()) {
                        if (this.currentMessageObject.isOutOwner()) {
                            drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                        } else {
                            drawable = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                        }
                        int dp9 = (((int) f7) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f);
                        this.otherX = dp9;
                        int dp10 = ((int) f13) - AndroidUtilities.dp(2.0f);
                        this.otherY = dp10;
                        BaseCell.setDrawableBounds(drawable, dp9, dp10);
                        TransitionParams transitionParams3 = this.transitionParams;
                        if (transitionParams3.animateChangeProgress != 1.0f && transitionParams3.animateShouldDrawMenuDrawable) {
                            drawable.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                        }
                        drawable.draw(canvas);
                        TransitionParams transitionParams4 = this.transitionParams;
                        if (transitionParams4.animateChangeProgress != 1.0f && transitionParams4.animateShouldDrawMenuDrawable) {
                            drawable.setAlpha(255);
                        }
                    }
                }
            }
            if (!isPlayingMessage2) {
                float f23 = this.toSeekBarProgress;
                if (f23 != 0.0f) {
                    float f24 = f23 - 0.16f;
                    this.toSeekBarProgress = f24;
                    if (f24 < 0.0f) {
                        this.toSeekBarProgress = 0.0f;
                    }
                    invalidate();
                }
            }
            f2 = this.toSeekBarProgress;
            if (f2 <= 0.0f) {
            }
            if (this.toSeekBarProgress < 1.0f) {
            }
            canvas.save();
            canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + this.mediaOffsetY);
            this.durationLayout.draw(canvas);
            canvas.restore();
            if (shouldDrawMenuDrawable()) {
            }
        } else if (i16 == 3 || i16 == 7) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outAudioDurationSelectedText" : "chat_outAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str3 : "chat_outAudioProgress"));
            } else {
                Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inAudioDurationSelectedText" : "chat_inAudioDurationText"));
                this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str4 : "chat_inAudioProgress"));
            }
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                animatedOutAudioVisualizerDrawable = Theme.getCurrentAudiVisualizerDrawable();
            } else {
                animatedOutAudioVisualizerDrawable = Theme.getAnimatedOutAudioVisualizerDrawable(this.currentMessageObject);
            }
            if (animatedOutAudioVisualizerDrawable != null && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                animatedOutAudioVisualizerDrawable.setParentView(this);
                animatedOutAudioVisualizerDrawable.draw(canvas, f7 + AndroidUtilities.dp(22.0f), f13 + AndroidUtilities.dp(22.0f), this.currentMessageObject.isOutOwner(), this.documentAttachType == 7 ? getVideoTranscriptionProgress() : 1.0f, this.resourcesProvider);
            }
            if (!this.enterTransitionInProgress && this.documentAttachType == 3) {
                this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                this.radialProgress.draw(canvas);
            }
            int i17 = this.seekBarX;
            int i18 = this.timeAudioX;
            if (this.transitionParams.animateButton) {
                int i19 = this.buttonX;
                float f25 = this.transitionParams.animateFromButtonX;
                float f26 = this.transitionParams.animateChangeProgress;
                int i20 = i19 - ((int) ((f25 * (1.0f - f26)) + (this.buttonX * f26)));
                i17 -= i20;
                i18 -= i20;
            }
            if (this.isRoundVideo && this.currentMessageObject.isOutOwner()) {
                i17 = getCurrentBackgroundLeft() + AndroidUtilities.dp(57.0f);
                i18 = getCurrentBackgroundLeft() + AndroidUtilities.dp(67.0f);
            }
            int videoTranscriptionProgress = this.isRoundVideo ? (int) (0 + ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize)) : 0;
            canvas.save();
            if (this.documentAttachType != 7 || !this.hasLinkPreview) {
                if (this.useSeekBarWaveform) {
                    canvas.translate((AndroidUtilities.dp(13.0f) + i17) - this.seekBarWaveformTranslateX, this.seekBarY + videoTranscriptionProgress);
                    this.seekBarWaveform.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                    this.seekBarWaveform.draw(canvas, this);
                } else {
                    canvas.translate(i17, this.seekBarY + videoTranscriptionProgress);
                    this.seekBar.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                    this.seekBar.draw(canvas);
                }
            }
            canvas.restore();
            float useTranscribeButtonProgress = getUseTranscribeButtonProgress();
            TransitionParams transitionParams5 = this.transitionParams;
            if (transitionParams5.animatePlayingRound) {
                if (this.isPlayingRound) {
                    f = transitionParams5.animateChangeProgress;
                } else {
                    f = 1.0f - transitionParams5.animateChangeProgress;
                }
            } else {
                f = this.isPlayingRound ? 1.0f : 0.0f;
            }
            if (!this.wasTranscriptionOpen) {
                useTranscribeButtonProgress = AndroidUtilities.lerp((1.0f - f) * useTranscribeButtonProgress, useTranscribeButtonProgress, getVideoTranscriptionProgress());
            }
            if (useTranscribeButtonProgress > 0.0f && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                canvas.save();
                int currentBackgroundRight2 = ((getCurrentBackgroundRight() - getCurrentBackgroundLeft()) + AndroidUtilities.dp(this.pinnedBottom ? 6.0f : 0.0f)) - AndroidUtilities.dp(((this.hasLinkPreview ? 10 : 0) + 92) + 36);
                if (this.transcribeButton == null) {
                    TranscribeButton transcribeButton = new TranscribeButton(this, this.seekBarWaveform) { // from class: org.telegram.ui.Cells.ChatMessageCell.7
                        @Override // org.telegram.ui.Components.TranscribeButton
                        public void drawGradientBackground(Canvas canvas2, Rect rect3, float f27) {
                            Paint themedPaint = ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() ? ChatMessageCell.this.getThemedPaint("paintChatActionBackground") : ChatMessageCell.this.getThemedPaint("paintChatTimeBackground");
                            int alpha2 = themedPaint.getAlpha();
                            themedPaint.setAlpha((int) (alpha2 * f27));
                            ChatMessageCell.this.applyServiceShaderMatrix();
                            canvas2.drawRect(rect3, themedPaint);
                            if (themedPaint == ChatMessageCell.this.getThemedPaint("paintChatActionBackground") && ChatMessageCell.this.hasGradientService()) {
                                int alpha3 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha3 * f27));
                                canvas2.drawRect(rect3, Theme.chat_actionBackgroundGradientDarkenPaint);
                                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha3);
                            }
                            themedPaint.setAlpha(alpha2);
                        }

                        @Override // org.telegram.ui.Components.TranscribeButton
                        protected void onOpen() {
                            ChatMessageCell.this.wasTranscriptionOpen = true;
                        }
                    };
                    this.transcribeButton = transcribeButton;
                    MessageObject messageObject5 = this.currentMessageObject;
                    TLRPC$Message tLRPC$Message = messageObject5.messageOwner;
                    transcribeButton.setOpen(tLRPC$Message != null && tLRPC$Message.voiceTranscriptionOpen && tLRPC$Message.voiceTranscriptionFinal && TranscribeButton.isVideoTranscriptionOpen(messageObject5), false);
                    this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), false);
                }
                if (this.drawSideButton != 0) {
                    this.transcribeX = AndroidUtilities.lerp(i17 + AndroidUtilities.dp(21.0f) + currentBackgroundRight2, this.sideStartX, 1.0f - getVideoTranscriptionProgress());
                    this.transcribeY = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), this.sideStartY - AndroidUtilities.dp(40.0f), 1.0f - getVideoTranscriptionProgress());
                } else {
                    float dp11 = i17 + AndroidUtilities.dp(21.0f) + currentBackgroundRight2;
                    MessageObject messageObject6 = this.currentMessageObject;
                    if (messageObject6 != null && messageObject6.isOutOwner()) {
                        currentBackgroundRight = (getCurrentBackgroundLeft() - AndroidUtilities.dp(40.0f)) + (AndroidUtilities.dp(28.0f) * f);
                    } else {
                        currentBackgroundRight = (getCurrentBackgroundRight() + AndroidUtilities.dp(8.0f)) - (AndroidUtilities.dp(40.0f) * f);
                    }
                    this.transcribeX = AndroidUtilities.lerp(dp11, currentBackgroundRight, 1.0f - getVideoTranscriptionProgress());
                    float dp12 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (!reactionsLayoutInBubble.isEmpty) {
                        dp12 -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                    }
                    this.transcribeY = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), ((AndroidUtilities.lerp(dp12, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + this.mediaOffsetY) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress()) + AndroidUtilities.dp(1.7f)) - AndroidUtilities.dp(12.0f)) - (this.currentMessageObject.isOutOwner() ? 0.0f : f * AndroidUtilities.dp(28.0f)), 1.0f - getVideoTranscriptionProgress());
                }
                this.transcribeButton.setBounds((int) this.transcribeX, (int) this.transcribeY, AndroidUtilities.lerp(AndroidUtilities.dp(30.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(24.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(16.0f), 1.0f - getVideoTranscriptionProgress()));
                this.transcribeButton.setColor(ColorUtils.blendARGB(getThemedColor("chat_serviceText"), getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outReactionButtonBackground" : "chat_inReactionButtonBackground"), this.documentAttachType == 3 ? 1.0f : getVideoTranscriptionProgress()), getThemedColor("windowBackgroundWhiteGrayText"), this.currentMessageObject.isOut(), this.documentAttachType == 3 ? 0.0f : 1.0f - getVideoTranscriptionProgress());
                this.transcribeButton.draw(canvas, useTranscribeButtonProgress);
                canvas.restore();
            }
            if (this.documentAttachType == 3) {
                canvas.save();
                canvas.translate(i18, AndroidUtilities.dp(44.0f) + this.namesOffset + this.mediaOffsetY + videoTranscriptionProgress);
                this.durationLayout.draw(canvas);
                canvas.restore();
                MessageObject messageObject7 = this.currentMessageObject;
                if (messageObject7.type != 0 && messageObject7.isContentUnread()) {
                    Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarFill" : "chat_inVoiceSeekbarFill"));
                    canvas.drawCircle(i18 + this.timeWidthAudio + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(51.0f) + this.namesOffset + this.mediaOffsetY, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                }
            }
            if (this.documentAttachType == 7 && this.durationLayout != null && ((isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) || this.roundProgressAlpha != 0.0f)) {
                if (isPlayingMessage) {
                    this.roundProgressAlpha = 1.0f;
                } else {
                    float f27 = this.roundProgressAlpha - 0.10666667f;
                    this.roundProgressAlpha = f27;
                    if (f27 < 0.0f) {
                        this.roundProgressAlpha = 0.0f;
                    } else {
                        invalidate();
                    }
                }
                drawRoundProgress(canvas);
            }
        }
        if (this.captionLayout != null) {
            updateCaptionLayout();
        }
        updateReactionLayoutPosition();
        if (shouldDrawCaptionLayout()) {
            drawCaptionLayout(canvas, false, 1.0f);
        }
        if (this.hasOldCaptionPreview) {
            MessageObject messageObject8 = this.currentMessageObject;
            int i21 = messageObject8.type;
            if (i21 == 1 || i21 == 20) {
                i4 = 4;
            } else {
                i4 = 4;
                if (this.documentAttachType != 4 && i21 != 8) {
                    int i22 = this.backgroundDrawableLeft;
                    if (!messageObject8.isOutOwner()) {
                        f14 = 17.0f;
                    }
                    imageX = i22 + AndroidUtilities.dp(f14);
                    int dp13 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(8.0f);
                    Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outPreviewLine" : "chat_inPreviewLine"));
                    RectF rectF = AndroidUtilities.rectTmp;
                    rectF.set(imageX, dp13 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(3.0f) + imageX, this.linkPreviewHeight + dp13);
                    path = this.replyRoundRectPath;
                    if (path != null) {
                        this.replyRoundRectPath = new Path();
                    } else {
                        path.rewind();
                    }
                    if (this.replyRoundRectRadii != null) {
                        this.replyRoundRectRadii = r4;
                        float dp14 = AndroidUtilities.dp(2.0f);
                        float[] fArr2 = {dp14, dp14, 0.0f, 0.0f, 0.0f, 0.0f, dp14, dp14};
                        float[] fArr3 = this.replyRoundRectRadii;
                        float dp15 = AndroidUtilities.dp(1.0f);
                        fArr3[5] = dp15;
                        fArr3[i4] = dp15;
                        fArr3[3] = dp15;
                        fArr3[2] = dp15;
                    }
                    this.replyRoundRectPath.addRoundRect(rectF, this.replyRoundRectRadii, Path.Direction.CW);
                    canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                    if (this.siteNameLayout == null) {
                        Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outSiteNameText" : "chat_inSiteNameText"));
                        canvas.save();
                        if (this.siteNameRtl) {
                            dp4 = (this.backgroundWidth - this.siteNameWidth) - AndroidUtilities.dp(32.0f);
                        } else {
                            dp4 = this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f);
                        }
                        canvas.translate(dp4 + imageX, dp13 - AndroidUtilities.dp(3.0f));
                        this.siteNameLayout.draw(canvas);
                        canvas.restore();
                        StaticLayout staticLayout5 = this.siteNameLayout;
                        i5 = staticLayout5.getLineBottom(staticLayout5.getLineCount() - 1) + dp13;
                    } else {
                        i5 = dp13;
                    }
                    if (!this.currentMessageObject.isOutOwner()) {
                        Theme.chat_replyTextPaint.setColor(getThemedColor("chat_messageTextOut"));
                    } else {
                        Theme.chat_replyTextPaint.setColor(getThemedColor("chat_messageTextIn"));
                    }
                    if (this.descriptionLayout == null) {
                        if (i5 != dp13) {
                            i5 += AndroidUtilities.dp(2.0f);
                        }
                        this.descriptionY = i5 - AndroidUtilities.dp(3.0f);
                        canvas.save();
                        canvas.translate(imageX + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
                        this.descriptionLayout.draw(canvas);
                        str2 = str;
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.descriptionLayout, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f);
                        canvas.restore();
                    } else {
                        str2 = str;
                    }
                    i3 = 1;
                    this.drawTime = true;
                }
            }
            imageX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(5.0f));
            int dp132 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(8.0f);
            Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? "chat_outPreviewLine" : "chat_inPreviewLine"));
            RectF rectF2 = AndroidUtilities.rectTmp;
            rectF2.set(imageX, dp132 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(3.0f) + imageX, this.linkPreviewHeight + dp132);
            path = this.replyRoundRectPath;
            if (path != null) {
            }
            if (this.replyRoundRectRadii != null) {
            }
            this.replyRoundRectPath.addRoundRect(rectF2, this.replyRoundRectRadii, Path.Direction.CW);
            canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
            if (this.siteNameLayout == null) {
            }
            if (!this.currentMessageObject.isOutOwner()) {
            }
            if (this.descriptionLayout == null) {
            }
            i3 = 1;
            this.drawTime = true;
        } else {
            str2 = str;
            i3 = 1;
            i4 = 4;
        }
        if (this.documentAttachType == i3) {
            if (this.currentMessageObject.isOutOwner()) {
                Theme.chat_docNamePaint.setColor(getThemedColor("chat_outFileNameText"));
                Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileInfoSelectedText" : "chat_outFileInfoText"));
                Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileBackgroundSelected" : "chat_outFileBackground"));
                drawable2 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
            } else {
                Theme.chat_docNamePaint.setColor(getThemedColor("chat_inFileNameText"));
                Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileInfoSelectedText" : "chat_inFileInfoText"));
                Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileBackgroundSelected" : "chat_inFileBackground"));
                drawable2 = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
            }
            if (this.drawPhotoImage) {
                if (this.currentMessageObject.type == 0) {
                    int imageX4 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(56.0f));
                    this.otherX = imageX4;
                    int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                    this.otherY = imageY3;
                    BaseCell.setDrawableBounds(drawable2, imageX4, imageY3);
                } else {
                    int imageX5 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(40.0f));
                    this.otherX = imageX5;
                    int imageY4 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                    this.otherY = imageY4;
                    BaseCell.setDrawableBounds(drawable2, imageX5, imageY4);
                }
                dp = (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(10.0f));
                dp2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                dp3 = (int) (this.photoImage.getImageY() + (this.docTitleLayout != null ? staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1) + AndroidUtilities.dp(13.0f) : AndroidUtilities.dp(8.0f)));
                if (!this.imageDrawn) {
                    if (this.currentMessageObject.isOutOwner()) {
                        this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
                        this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileProgressSelected" : "chat_outFileProgress"));
                        this.videoRadialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
                        this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_outFileProgressSelected" : "chat_outFileProgress"));
                    } else {
                        this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
                        this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileProgressSelected" : "chat_inFileProgress"));
                        this.videoRadialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
                        this.videoRadialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? "chat_inFileProgressSelected" : "chat_inFileProgress"));
                    }
                    this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                    int[] roundRadius2 = this.photoImage.getRoundRadius();
                    this.rectPath.reset();
                    for (int i23 = 0; i23 < roundRadius2.length; i23++) {
                        float[] fArr4 = radii;
                        int i24 = i23 * 2;
                        fArr4[i24] = roundRadius2[i23];
                        fArr4[i24 + 1] = roundRadius2[i23];
                    }
                    this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                    this.rectPath.close();
                    canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                } else {
                    this.radialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
                    this.radialProgress.setProgressColor(getThemedColor(str2));
                    this.videoRadialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
                    this.videoRadialProgress.setProgressColor(getThemedColor(str2));
                    if (this.buttonState == -1 && this.radialProgress.getIcon() != i4) {
                        this.radialProgress.setIcon(i4, true, true);
                    }
                }
            } else {
                int dp16 = (((int) f7) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f);
                this.otherX = dp16;
                int i25 = (int) f13;
                int dp17 = i25 - AndroidUtilities.dp(2.0f);
                this.otherY = dp17;
                BaseCell.setDrawableBounds(drawable2, dp16, dp17);
                dp = f7 + AndroidUtilities.dp(53.0f);
                dp2 = AndroidUtilities.dp(4.0f) + i25;
                dp3 = i25 + AndroidUtilities.dp(27.0f);
                StaticLayout staticLayout6 = this.docTitleLayout;
                if (staticLayout6 != null && staticLayout6.getLineCount() > 1) {
                    dp3 += ((this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f)) + AndroidUtilities.dp(2.0f);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str3 : "chat_outAudioProgress"));
                    RadialProgress2 radialProgress2 = this.videoRadialProgress;
                    if (!isDrawSelectionBackground() && this.videoButtonPressed == 0) {
                        str3 = "chat_outAudioProgress";
                    }
                    radialProgress2.setProgressColor(getThemedColor(str3));
                } else {
                    this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? str4 : "chat_inAudioProgress"));
                    RadialProgress2 radialProgress22 = this.videoRadialProgress;
                    if (!isDrawSelectionBackground() && this.videoButtonPressed == 0) {
                        str4 = "chat_inAudioProgress";
                    }
                    radialProgress22.setProgressColor(getThemedColor(str4));
                }
            }
            int i26 = dp2;
            float f28 = dp;
            if (shouldDrawMenuDrawable()) {
                TransitionParams transitionParams6 = this.transitionParams;
                if (transitionParams6.animateChangeProgress != 1.0f && transitionParams6.animateShouldDrawMenuDrawable) {
                    drawable2.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                }
                drawable2.draw(canvas);
                TransitionParams transitionParams7 = this.transitionParams;
                if (transitionParams7.animateChangeProgress != 1.0f && transitionParams7.animateShouldDrawMenuDrawable) {
                    drawable2.setAlpha(255);
                }
            }
            try {
                if (this.docTitleLayout != null) {
                    canvas.save();
                    canvas.translate(this.docTitleOffsetX + f28, i26);
                    this.docTitleLayout.draw(canvas);
                    canvas.restore();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            try {
                if (this.infoLayout != null) {
                    canvas.save();
                    canvas.translate(f28, dp3);
                    if (this.buttonState == 1 && (staticLayout = this.loadingProgressLayout) != null) {
                        staticLayout.draw(canvas);
                    } else {
                        this.infoLayout.draw(canvas);
                    }
                    canvas.restore();
                }
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
        MessageObject messageObject9 = this.currentMessageObject;
        if (messageObject9.type == i4 && !(MessageObject.getMedia(messageObject9.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive) && this.currentMapProvider == 2 && this.photoImage.hasNotThumb()) {
            int intrinsicWidth = (int) (Theme.chat_redLocationIcon.getIntrinsicWidth() * 0.8f);
            int intrinsicHeight = (int) (Theme.chat_redLocationIcon.getIntrinsicHeight() * 0.8f);
            int imageX6 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth) / 2.0f));
            int imageY5 = (int) ((this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(this.photoImage.getCurrentAlpha()))));
            Theme.chat_redLocationIcon.setAlpha((int) (Math.min(1.0f, this.photoImage.getCurrentAlpha() * 5.0f) * 255.0f));
            Theme.chat_redLocationIcon.setBounds(imageX6, imageY5, intrinsicWidth + imageX6, intrinsicHeight + imageY5);
            Theme.chat_redLocationIcon.draw(canvas);
            if (this.photoImage.getCurrentAlpha() < 1.0f) {
                invalidate();
            }
        }
        this.transitionParams.recordDrawingState();
    }

    private void startRevealMedia(float f, float f2) {
        float sqrt = (float) Math.sqrt(Math.pow(this.photoImage.getImageWidth(), 2.0d) + Math.pow(this.photoImage.getImageHeight(), 2.0d));
        this.mediaSpoilerRevealMaxRadius = sqrt;
        startRevealMedia(f, f2, sqrt);
    }

    private void startRevealMedia(float f, float f2, float f3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress != 0.0f) {
            return;
        }
        if (messageObject.type == 3) {
            messageObject.forceUpdate = true;
            messageObject.revealingMediaSpoilers = true;
            setMessageContent(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            MessageObject messageObject2 = this.currentMessageObject;
            messageObject2.revealingMediaSpoilers = false;
            messageObject2.forceUpdate = false;
            if (this.currentMessagesGroup != null) {
                this.radialProgress.setProgress(0.0f, false);
            }
        }
        this.mediaSpoilerRevealX = f;
        this.mediaSpoilerRevealY = f2;
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(MathUtils.clamp(this.mediaSpoilerRevealMaxRadius * 0.3f, 250.0f, 550.0f));
        duration.setInterpolator(CubicBezierInterpolator.EASE_BOTH);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda0
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatMessageCell.this.lambda$startRevealMedia$8(valueAnimator);
            }
        });
        duration.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.8
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatMessageCell.this.currentMessageObject.isMediaSpoilersRevealed = true;
                ChatMessageCell.this.invalidate();
            }
        });
        duration.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startRevealMedia$8(ValueAnimator valueAnimator) {
        this.mediaSpoilerRevealProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
    }

    private void drawBlurredPhoto(Canvas canvas) {
        if (this.currentMessageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress == 1.0f) {
            return;
        }
        int[] roundRadius = this.photoImage.getRoundRadius();
        float[] fArr = this.mediaSpoilerRadii;
        float f = roundRadius[0];
        fArr[1] = f;
        fArr[0] = f;
        float f2 = roundRadius[1];
        fArr[3] = f2;
        fArr[2] = f2;
        float f3 = roundRadius[2];
        fArr[5] = f3;
        fArr[4] = f3;
        float f4 = roundRadius[3];
        fArr[7] = f4;
        fArr[6] = f4;
        this.mediaSpoilerPath.rewind();
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
        this.mediaSpoilerPath.addRoundRect(rectF, this.mediaSpoilerRadii, Path.Direction.CW);
        canvas.save();
        canvas.clipPath(this.mediaSpoilerPath);
        if (this.mediaSpoilerRevealProgress != 0.0f) {
            this.mediaSpoilerPath.rewind();
            this.mediaSpoilerPath.addCircle(this.mediaSpoilerRevealX, this.mediaSpoilerRevealY, this.mediaSpoilerRevealMaxRadius * this.mediaSpoilerRevealProgress, Path.Direction.CW);
            canvas.clipPath(this.mediaSpoilerPath, Region.Op.DIFFERENCE);
        }
        this.blurredPhotoImage.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
        this.blurredPhotoImage.draw(canvas);
        this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.photoImage.getAlpha())));
        this.mediaSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
        this.mediaSpoilerEffect.draw(canvas);
        canvas.restore();
        invalidate();
    }

    private float getUseTranscribeButtonProgress() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateUseTranscribeButton) {
            return this.useTranscribeButton ? 1.0f : 0.0f;
        } else if (this.useTranscribeButton) {
            return transitionParams.animateChangeProgress;
        } else {
            return 1.0f - transitionParams.animateChangeProgress;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:8:0x0017, code lost:
        if ((r1 & 1) != 0) goto L9;
     */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01a1  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x01bd  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateReactionLayoutPosition() {
        int i;
        float dp;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
        int i2 = 0;
        if (!reactionsLayoutInBubble2.isEmpty) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i3 = groupedMessagePosition.flags;
                if ((i3 & 8) != 0) {
                }
            }
            if (!reactionsLayoutInBubble2.isSmall) {
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject.type == 19 || messageObject.isAnimatedEmoji() || this.currentMessageObject.isAnyKindOfSticker()) {
                    if (this.currentMessageObject.isOutOwner()) {
                        this.reactionsLayoutInBubble.x = (getMeasuredWidth() - this.reactionsLayoutInBubble.width) - AndroidUtilities.dp(16.0f);
                    } else {
                        this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft();
                    }
                } else {
                    float f = 11.0f;
                    if (this.currentMessageObject.isOutOwner()) {
                        this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                    } else if (this.isRoundVideo) {
                        this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f) + AndroidUtilities.dp(AndroidUtilities.lerp(0, !this.drawPinnedBottom ? 6 : 0, getVideoTranscriptionProgress()));
                        this.reactionsLayoutInBubble.x -= (int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f));
                    } else {
                        ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                        int currentBackgroundLeft = getCurrentBackgroundLeft();
                        if (this.mediaBackground || !this.drawPinnedBottom) {
                            f = 17.0f;
                        }
                        reactionsLayoutInBubble3.x = currentBackgroundLeft + AndroidUtilities.dp(f);
                        if (this.mediaBackground) {
                            this.reactionsLayoutInBubble.x -= AndroidUtilities.dp(9.0f);
                        }
                    }
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                int backgroundDrawableBottom = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                ReactionsLayoutInBubble reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                reactionsLayoutInBubble4.y = backgroundDrawableBottom - reactionsLayoutInBubble5.height;
                reactionsLayoutInBubble5.y -= this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0;
                if (this.hasNewLineForTime && (!this.drawForwardedName || !this.hasLinkPreview || this.documentAttachType != 3)) {
                    this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(16.0f);
                }
                if (this.captionLayout != null) {
                    MessageObject messageObject2 = this.currentMessageObject;
                    if ((messageObject2.type != 2 && ((!messageObject2.isOut() || !this.drawForwardedName || this.drawPhotoImage) && (this.currentMessageObject.type != 9 || !this.drawPhotoImage))) || (this.currentPosition != null && this.currentMessagesGroup != null)) {
                        this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(14.0f);
                    }
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
                reactionsLayoutInBubble6.y += reactionsLayoutInBubble6.positionOffsetY;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble7.isSmall || reactionsLayoutInBubble7.isEmpty) {
            return;
        }
        if (shouldDrawTimeOnMedia()) {
            if (this.drawCommentButton) {
                i2 = AndroidUtilities.dp(41.3f);
            }
        } else if (this.currentMessageObject.isSponsored()) {
            i = -AndroidUtilities.dp(48.0f);
            if (this.hasNewLineForTime) {
                i -= AndroidUtilities.dp(16.0f);
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble8 = this.reactionsLayoutInBubble;
            if (!shouldDrawTimeOnMedia()) {
                dp = ((this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
            } else {
                dp = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + i;
            }
            reactionsLayoutInBubble8.y = (int) dp;
            this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
            this.reactionsLayoutInBubble.x = this.timeX;
        } else if (this.drawCommentButton) {
            i2 = AndroidUtilities.dp(43.0f);
        }
        i = -i2;
        ReactionsLayoutInBubble reactionsLayoutInBubble82 = this.reactionsLayoutInBubble;
        if (!shouldDrawTimeOnMedia()) {
        }
        reactionsLayoutInBubble82.y = (int) dp;
        this.reactionsLayoutInBubble.y = (int) (reactionsLayoutInBubble.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
        this.reactionsLayoutInBubble.x = this.timeX;
    }

    /* JADX WARN: Removed duplicated region for block: B:190:0x0935  */
    /* JADX WARN: Type inference failed for: r14v1 */
    /* JADX WARN: Type inference failed for: r14v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r14v23 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawLinkPreview(Canvas canvas, float f) {
        int dp;
        int i;
        int dp2;
        int i2;
        int i3;
        int i4;
        int i5;
        int i6;
        ?? r14;
        int i7;
        int i8;
        int i9;
        int i10;
        Drawable themedDrawable;
        int i11;
        int i12;
        float f2;
        int i13;
        boolean z;
        float f3;
        boolean z2;
        int i14;
        int dp3;
        Paint paint;
        if (this.currentMessageObject.isSponsored() || this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
            if (this.hasGamePreview) {
                dp = AndroidUtilities.dp(14.0f) + this.namesOffset;
                i2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    dp = AndroidUtilities.dp(14.0f) + this.namesOffset;
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                } else if (this.currentMessageObject.isSponsored()) {
                    dp = (this.textY + this.currentMessageObject.textHeight) - AndroidUtilities.dp(2.0f);
                    if (this.hasNewLineForTime) {
                        dp += AndroidUtilities.dp(16.0f);
                    }
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                } else {
                    dp = this.textY + this.currentMessageObject.textHeight + AndroidUtilities.dp(8.0f);
                    i = this.unmovedTextX;
                    dp2 = AndroidUtilities.dp(1.0f);
                }
                i2 = i + dp2;
            }
            int i15 = i2;
            if (!this.hasInvoicePreview && !this.currentMessageObject.isSponsored()) {
                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPreviewLine" : "chat_inPreviewLine"));
                if (f != 1.0f) {
                    Theme.chat_replyLinePaint.setAlpha((int) (paint.getAlpha() * f));
                }
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(i15, dp - AndroidUtilities.dp(3.0f), i15 + AndroidUtilities.dp(3.0f), this.linkPreviewHeight + dp + AndroidUtilities.dp(3.0f));
                Path path = this.replyRoundRectPath;
                if (path == null) {
                    this.replyRoundRectPath = new Path();
                } else {
                    path.rewind();
                }
                if (this.replyRoundRectRadii == null) {
                    this.replyRoundRectRadii = r6;
                    float dp4 = AndroidUtilities.dp(2.0f);
                    float[] fArr = {dp4, dp4, 0.0f, 0.0f, 0.0f, 0.0f, dp4, dp4};
                    float[] fArr2 = this.replyRoundRectRadii;
                    float dp5 = AndroidUtilities.dp(1.0f);
                    fArr2[5] = dp5;
                    fArr2[4] = dp5;
                    fArr2[3] = dp5;
                    fArr2[2] = dp5;
                }
                this.replyRoundRectPath.addRoundRect(rectF, this.replyRoundRectRadii, Path.Direction.CW);
                canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
            }
            if (this.siteNameLayout != null) {
                int dp6 = dp - AndroidUtilities.dp(1.0f);
                Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outSiteNameText" : "chat_inSiteNameText"));
                if (f != 1.0f) {
                    Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * f));
                }
                canvas.save();
                if (this.siteNameRtl) {
                    dp3 = (this.backgroundWidth - this.siteNameWidth) - AndroidUtilities.dp(32.0f);
                    if (this.isSmallImage) {
                        dp3 -= AndroidUtilities.dp(54.0f);
                    }
                } else {
                    dp3 = this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f);
                }
                canvas.translate(dp3 + i15, dp - AndroidUtilities.dp(3.0f));
                this.siteNameLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout = this.siteNameLayout;
                i3 = staticLayout.getLineBottom(staticLayout.getLineCount() - 1) + dp;
                i4 = dp6;
            } else {
                i3 = dp;
                i4 = 0;
            }
            if ((this.hasGamePreview || this.hasInvoicePreview) && (i5 = this.currentMessageObject.textHeight) != 0) {
                dp += i5 + AndroidUtilities.dp(4.0f);
                i3 += this.currentMessageObject.textHeight + AndroidUtilities.dp(4.0f);
            }
            int i16 = i3;
            int i17 = dp;
            int i18 = i16;
            if ((!this.drawPhotoImage || !this.drawInstantView || (i14 = this.drawInstantViewType) == 9 || i14 == 2 || i14 == 13 || i14 == 11 || i14 == 1) && (this.drawInstantViewType != 6 || this.imageBackgroundColor == 0)) {
                i6 = i17;
                r14 = 1;
            } else {
                if (i18 != i17) {
                    i18 += AndroidUtilities.dp(2.0f);
                }
                int i19 = i18;
                if (this.imageBackgroundSideColor != 0) {
                    int dp7 = AndroidUtilities.dp(10.0f) + i15;
                    ImageReceiver imageReceiver = this.photoImage;
                    float f4 = dp7;
                    imageReceiver.setImageCoords(((this.imageBackgroundSideWidth - imageReceiver.getImageWidth()) / 2.0f) + f4, i19, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                    this.rect.set(f4, this.photoImage.getImageY(), dp7 + this.imageBackgroundSideWidth, this.photoImage.getImageY2());
                    Theme.chat_instantViewPaint.setColor(ColorUtils.setAlphaComponent(this.imageBackgroundSideColor, (int) (f * 255.0f)));
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                } else {
                    this.photoImage.setImageCoords(AndroidUtilities.dp(10.0f) + i15, i19, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                }
                if (this.imageBackgroundColor != 0) {
                    this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                    if (this.imageBackgroundGradientColor1 != 0) {
                        if (this.imageBackgroundGradientColor2 != 0) {
                            if (this.motionBackgroundDrawable == null) {
                                MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable(this.imageBackgroundColor, this.imageBackgroundGradientColor1, this.imageBackgroundGradientColor2, this.imageBackgroundGradientColor3, true);
                                this.motionBackgroundDrawable = motionBackgroundDrawable;
                                if (this.imageBackgroundIntensity < 0.0f) {
                                    this.photoImage.setGradientBitmap(motionBackgroundDrawable.getBitmap());
                                }
                                if (!this.photoImage.hasImageSet()) {
                                    this.motionBackgroundDrawable.setRoundRadius(AndroidUtilities.dp(4.0f));
                                }
                            }
                        } else {
                            if (this.gradientShader == null) {
                                Rect gradientPoints = BackgroundGradientDrawable.getGradientPoints(AndroidUtilities.getWallpaperRotation(this.imageBackgroundGradientRotation, false), (int) this.rect.width(), (int) this.rect.height());
                                this.gradientShader = new LinearGradient(gradientPoints.left, gradientPoints.top, gradientPoints.right, gradientPoints.bottom, new int[]{this.imageBackgroundColor, this.imageBackgroundGradientColor1}, (float[]) null, Shader.TileMode.CLAMP);
                            }
                            Theme.chat_instantViewPaint.setShader(this.gradientShader);
                            if (f != 1.0f) {
                                Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                            }
                        }
                    } else {
                        Theme.chat_instantViewPaint.setShader(null);
                        Theme.chat_instantViewPaint.setColor(this.imageBackgroundColor);
                        if (f != 1.0f) {
                            Theme.chat_instantViewPaint.setAlpha((int) (f * 255.0f));
                        }
                    }
                    MotionBackgroundDrawable motionBackgroundDrawable2 = this.motionBackgroundDrawable;
                    if (motionBackgroundDrawable2 != null) {
                        RectF rectF2 = this.rect;
                        motionBackgroundDrawable2.setBounds((int) rectF2.left, (int) rectF2.top, (int) rectF2.right, (int) rectF2.bottom);
                        this.motionBackgroundDrawable.draw(canvas);
                        i6 = i17;
                        z2 = true;
                    } else if (this.imageBackgroundSideColor != 0) {
                        z2 = true;
                        i6 = i17;
                        canvas.drawRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2(), Theme.chat_instantViewPaint);
                    } else {
                        i6 = i17;
                        z2 = true;
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                    }
                    Theme.chat_instantViewPaint.setShader(null);
                    Theme.chat_instantViewPaint.setAlpha(255);
                    z = z2;
                } else {
                    i6 = i17;
                    z = true;
                }
                if (this.drawPhotoImage && this.drawInstantView && this.drawInstantViewType != 9) {
                    if (this.drawImageButton) {
                        int dp8 = AndroidUtilities.dp(48.0f);
                        float f5 = dp8;
                        int imageX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f5) / 2.0f));
                        this.buttonX = imageX;
                        this.buttonX = imageX;
                        int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f5) / 2.0f));
                        this.buttonY = imageY;
                        this.buttonY = imageY;
                        RadialProgress2 radialProgress2 = this.radialProgress;
                        int i20 = this.buttonX;
                        radialProgress2.setProgressRect(i20, imageY, i20 + dp8, dp8 + imageY);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            this.imageDrawn = this.photoImage.draw(canvas);
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                this.blurredPhotoImage.setAlpha(f);
                                drawBlurredPhoto(canvas);
                                f3 = 1.0f;
                                this.blurredPhotoImage.setAlpha(1.0f);
                            } else {
                                f3 = 1.0f;
                            }
                            this.photoImage.setAlpha(f3);
                        } else {
                            this.imageDrawn = this.photoImage.draw(canvas);
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                drawBlurredPhoto(canvas);
                            }
                        }
                    }
                }
                i18 = (int) (i19 + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f));
                r14 = z;
            }
            if (this.currentMessageObject.isOutOwner()) {
                int i21 = (int) (f * 255.0f);
                Theme.chat_replyNamePaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextOut"), i21));
                Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextOut"), i21));
            } else {
                int i22 = (int) (f * 255.0f);
                Theme.chat_replyNamePaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextIn"), i22));
                Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor("chat_messageTextIn"), i22));
            }
            if (this.titleLayout != null) {
                if (i18 != i6) {
                    i18 += AndroidUtilities.dp(2.0f);
                }
                if (i4 == 0) {
                    i4 = i18 - AndroidUtilities.dp(1.0f);
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) + i15 + this.titleX, i18 - AndroidUtilities.dp(3.0f));
                this.titleLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout2 = this.titleLayout;
                i18 += staticLayout2.getLineBottom(staticLayout2.getLineCount() - r14);
            }
            if (this.authorLayout != null) {
                if (i18 != i6) {
                    i18 += AndroidUtilities.dp(2.0f);
                }
                if (i4 == 0) {
                    i4 = i18 - AndroidUtilities.dp(1.0f);
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) + i15 + this.authorX, i18 - AndroidUtilities.dp(3.0f));
                this.authorLayout.draw(canvas);
                canvas.restore();
                StaticLayout staticLayout3 = this.authorLayout;
                i18 += staticLayout3.getLineBottom(staticLayout3.getLineCount() - r14);
            }
            if (this.descriptionLayout != null) {
                if (i18 != i6) {
                    i18 += AndroidUtilities.dp(2.0f);
                }
                int i23 = i18;
                int dp9 = i4 == 0 ? i23 - AndroidUtilities.dp(1.0f) : i4;
                this.descriptionY = i23 - AndroidUtilities.dp(3.0f);
                canvas.save();
                canvas.translate((this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f)) + i15 + this.descriptionX, this.descriptionY);
                if (this.linkBlockNum == -10 && this.links.draw(canvas)) {
                    invalidate();
                }
                drawProgressLoadingLink(canvas, -2);
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null && chatMessageCellDelegate2.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                    this.delegate.getTextSelectionHelper().drawDescription(this.currentMessageObject.isOutOwner(), this.descriptionLayout, canvas);
                }
                this.descriptionLayout.draw(canvas);
                i7 = i6;
                i8 = i15;
                AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.descriptionLayout, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f);
                canvas.restore();
                StaticLayout staticLayout4 = this.descriptionLayout;
                int lineCount = staticLayout4.getLineCount();
                int i24 = r14 == true ? 1 : 0;
                int i25 = r14 == true ? 1 : 0;
                int i26 = r14 == true ? 1 : 0;
                int i27 = r14 == true ? 1 : 0;
                i18 = i23 + staticLayout4.getLineBottom(lineCount - i24);
                i4 = dp9;
            } else {
                i7 = i6;
                i8 = i15;
            }
            if (this.drawPhotoImage) {
                if (!this.drawInstantView || (i13 = this.drawInstantViewType) == 9) {
                    i10 = 2;
                } else {
                    i10 = 2;
                    if (i13 != 2 && i13 != 11 && i13 != 13 && i13 != r14) {
                        i9 = i8;
                    }
                }
                if (i18 != i7) {
                    i18 += AndroidUtilities.dp(2.0f);
                }
                if (this.isSmallImage) {
                    i9 = i8;
                    this.photoImage.setImageCoords((i9 + this.backgroundWidth) - AndroidUtilities.dp(81.0f), i4, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                } else {
                    i9 = i8;
                    this.photoImage.setImageCoords(i9 + (this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)), i18, this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                    if (this.drawImageButton) {
                        int dp10 = AndroidUtilities.dp(48.0f);
                        float f6 = dp10;
                        int imageX2 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f6) / 2.0f));
                        this.buttonX = imageX2;
                        this.buttonX = imageX2;
                        int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f6) / 2.0f));
                        this.buttonY = imageY2;
                        this.buttonY = imageY2;
                        RadialProgress2 radialProgress22 = this.radialProgress;
                        int i28 = this.buttonX;
                        radialProgress22.setProgressRect(i28, imageY2, i28 + dp10, dp10 + imageY2);
                    }
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                    this.imageDrawn = r14;
                    this.drawTime = r14;
                } else {
                    ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                    if (chatMessageCellDelegate3 == null || chatMessageCellDelegate3.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            this.imageDrawn = this.photoImage.draw(canvas);
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                this.blurredPhotoImage.setAlpha(f);
                                drawBlurredPhoto(canvas);
                                f2 = 1.0f;
                                this.blurredPhotoImage.setAlpha(1.0f);
                            } else {
                                f2 = 1.0f;
                            }
                            this.photoImage.setAlpha(f2);
                        } else {
                            this.imageDrawn = this.photoImage.draw(canvas);
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                drawBlurredPhoto(canvas);
                            }
                        }
                    }
                }
            } else {
                i9 = i8;
                i10 = 2;
            }
            int i29 = this.documentAttachType;
            if (i29 == 4 || i29 == i10) {
                this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                this.videoButtonY = imageY3;
                RadialProgress2 radialProgress23 = this.videoRadialProgress;
                int i30 = this.videoButtonX;
                radialProgress23.setProgressRect(i30, imageY3, AndroidUtilities.dp(24.0f) + i30, this.videoButtonY + AndroidUtilities.dp(24.0f));
            }
            Paint themedPaint = getThemedPaint("paintChatTimeBackground");
            float f7 = 14.5f;
            if (this.photosCountLayout != null && this.photoImage.getVisible()) {
                int imageX3 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                int imageY4 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                this.rect.set(imageX3 - AndroidUtilities.dp(4.0f), imageY4 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX3 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(14.5f) + imageY4);
                int alpha = themedPaint.getAlpha();
                themedPaint.setAlpha((int) (alpha * this.controlsAlpha));
                Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                themedPaint.setAlpha(alpha);
                canvas.save();
                canvas.translate(imageX3, imageY4);
                this.photosCountLayout.draw(canvas);
                canvas.restore();
                Theme.chat_durationPaint.setAlpha(255);
            }
            if (this.videoInfoLayout != null && ((!this.drawPhotoImage || this.photoImage.getVisible()) && this.imageBackgroundSideColor == 0)) {
                if (this.hasGamePreview || this.hasInvoicePreview) {
                    i11 = 8;
                } else {
                    i11 = 8;
                    if (this.documentAttachType != 8) {
                        i12 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.durationWidth);
                        i18 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                        this.rect.set(i12 - AndroidUtilities.dp(4.0f), i18 - AndroidUtilities.dp(1.5f), this.durationWidth + i12 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(14.5f) + i18);
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatTimeBackground"));
                        canvas.save();
                        canvas.translate(i12, i18);
                        if (this.hasInvoicePreview) {
                            if (this.drawPhotoImage) {
                                Theme.chat_shipmentPaint.setColor(getThemedColor("chat_previewGameText"));
                            } else if (this.currentMessageObject.isOutOwner()) {
                                Theme.chat_shipmentPaint.setColor(getThemedColor("chat_messageTextOut"));
                            } else {
                                Theme.chat_shipmentPaint.setColor(getThemedColor("chat_messageTextIn"));
                            }
                        }
                        this.videoInfoLayout.draw(canvas);
                        canvas.restore();
                    }
                }
                if (this.drawPhotoImage) {
                    i12 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.5f));
                    i18 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                    if (this.documentAttachType != i11) {
                        f7 = 16.5f;
                    }
                    this.rect.set(i12 - AndroidUtilities.dp(4.0f), i18 - AndroidUtilities.dp(1.5f), this.durationWidth + i12 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(f7) + i18);
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                } else {
                    i12 = i9;
                }
                canvas.save();
                canvas.translate(i12, i18);
                if (this.hasInvoicePreview) {
                }
                this.videoInfoLayout.draw(canvas);
                canvas.restore();
            }
            if (!this.drawInstantView) {
                return;
            }
            int dp11 = i7 + this.linkPreviewHeight + AndroidUtilities.dp(10.0f);
            Paint paint2 = Theme.chat_instantViewRectPaint;
            if (this.currentMessageObject.isOutOwner()) {
                themedDrawable = getThemedDrawable("drawableMsgOutInstant");
                Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                paint2.setColor(getThemedColor("chat_outPreviewInstantText"));
            } else {
                themedDrawable = getThemedDrawable("drawableMsgInInstant");
                Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                paint2.setColor(getThemedColor("chat_inPreviewInstantText"));
            }
            this.instantButtonRect.set(i9, dp11, i9 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp11);
            if (Build.VERSION.SDK_INT >= 21) {
                this.selectorDrawableMaskType[0] = 0;
                this.selectorDrawable[0].setBounds(i9, dp11, i9 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp11);
                this.selectorDrawable[0].draw(canvas);
            }
            canvas.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), paint2);
            if (this.drawInstantViewType == 0) {
                BaseCell.setDrawableBounds(themedDrawable, ((this.instantTextLeftX + this.instantTextX) + i9) - AndroidUtilities.dp(15.0f), AndroidUtilities.dp(11.5f) + dp11, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                themedDrawable.draw(canvas);
            }
            if (this.instantViewLayout == null) {
                return;
            }
            canvas.save();
            canvas.translate(i9 + this.instantTextX, dp11 + AndroidUtilities.dp(10.5f));
            this.instantViewLayout.draw(canvas);
            canvas.restore();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean shouldDrawMenuDrawable() {
        return this.currentMessagesGroup == null || (this.currentPosition.flags & 4) != 0;
    }

    private void drawBotButtons(Canvas canvas, ArrayList<BotButton> arrayList, float f) {
        int dp;
        BotButton botButton;
        Drawable themedDrawable;
        if (this.currentMessageObject.isOutOwner()) {
            dp = (getMeasuredWidth() - this.widthForButtons) - AndroidUtilities.dp(10.0f);
        } else {
            dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
        }
        int i = dp;
        float f2 = 2.0f;
        float dp2 = (this.layoutHeight - AndroidUtilities.dp(2.0f)) + this.transitionParams.deltaBottom;
        float f3 = 0.0f;
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            BotButton botButton2 = arrayList.get(i2);
            float f4 = botButton2.y + botButton2.height;
            if (f4 > f3) {
                f3 = f4;
            }
        }
        this.rect.set(0.0f, dp2, getMeasuredWidth(), f3 + dp2);
        if (f != 1.0f) {
            canvas.saveLayerAlpha(this.rect, (int) (f * 255.0f), 31);
        } else {
            canvas.save();
        }
        int i3 = 0;
        while (i3 < arrayList.size()) {
            BotButton botButton3 = arrayList.get(i3);
            float dp3 = ((botButton3.y + this.layoutHeight) - AndroidUtilities.dp(f2)) + this.transitionParams.deltaBottom;
            this.rect.set(botButton3.x + i, dp3, botButton3.x + i + botButton3.width, botButton3.height + dp3);
            applyServiceShaderMatrix();
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint(i3 == this.pressedBotButton ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            canvas.save();
            boolean z = true;
            canvas.translate(botButton3.x + i + AndroidUtilities.dp(5.0f), ((AndroidUtilities.dp(44.0f) - botButton3.title.getLineBottom(botButton3.title.getLineCount() - 1)) / 2) + dp3);
            botButton3.title.draw(canvas);
            canvas.restore();
            if (!(botButton3.button instanceof TLRPC$TL_keyboardButtonWebView)) {
                if (botButton3.button instanceof TLRPC$TL_keyboardButtonUrl) {
                    if (botButton3.isInviteButton) {
                        themedDrawable = getThemedDrawable("drawable_botInvite");
                    } else {
                        themedDrawable = getThemedDrawable("drawableBotLink");
                    }
                    BaseCell.setDrawableBounds(themedDrawable, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - themedDrawable.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                    themedDrawable.draw(canvas);
                } else if (!(botButton3.button instanceof TLRPC$TL_keyboardButtonSwitchInline)) {
                    if ((botButton3.button instanceof TLRPC$TL_keyboardButtonCallback) || (botButton3.button instanceof TLRPC$TL_keyboardButtonRequestGeoLocation) || (botButton3.button instanceof TLRPC$TL_keyboardButtonGame) || (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) || (botButton3.button instanceof TLRPC$TL_keyboardButtonUrlAuth)) {
                        if (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) {
                            BaseCell.setDrawableBounds(Theme.chat_botCardDrawable, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(5.0f)) - Theme.chat_botCardDrawable.getIntrinsicWidth()) + i, AndroidUtilities.dp(4.0f) + dp3);
                            Theme.chat_botCardDrawable.draw(canvas);
                        }
                        if (((!(botButton3.button instanceof TLRPC$TL_keyboardButtonCallback) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonGame) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) && !(botButton3.button instanceof TLRPC$TL_keyboardButtonUrlAuth)) || !SendMessagesHelper.getInstance(this.currentAccount).isSendingCallback(this.currentMessageObject, botButton3.button)) && (!(botButton3.button instanceof TLRPC$TL_keyboardButtonRequestGeoLocation) || !SendMessagesHelper.getInstance(this.currentAccount).isSendingCurrentLocation(this.currentMessageObject, botButton3.button))) {
                            z = false;
                        }
                        if (z || botButton3.progressAlpha != 0.0f) {
                            Theme.chat_botProgressPaint.setAlpha(Math.min(255, (int) (botButton3.progressAlpha * 255.0f)));
                            int dp4 = ((botButton3.x + botButton3.width) - AndroidUtilities.dp(12.0f)) + i;
                            if (botButton3.button instanceof TLRPC$TL_keyboardButtonBuy) {
                                dp3 += AndroidUtilities.dp(26.0f);
                            }
                            this.rect.set(dp4, AndroidUtilities.dp(4.0f) + dp3, dp4 + AndroidUtilities.dp(8.0f), dp3 + AndroidUtilities.dp(12.0f));
                            canvas.drawArc(this.rect, botButton3.angle, 220.0f, false, Theme.chat_botProgressPaint);
                            invalidate();
                            if (getParent() != null) {
                                ((View) getParent()).invalidate();
                            }
                            long currentTimeMillis = System.currentTimeMillis();
                            if (Math.abs(botButton3.lastUpdateTime - System.currentTimeMillis()) < 1000) {
                                long j = currentTimeMillis - botButton3.lastUpdateTime;
                                botButton = botButton3;
                                BotButton.access$2916(botButton, ((float) (360 * j)) / 2000.0f);
                                BotButton.access$2920(botButton, (botButton.angle / 360) * 360);
                                if (z) {
                                    if (botButton.progressAlpha < 1.0f) {
                                        BotButton.access$2816(botButton, ((float) j) / 200.0f);
                                        if (botButton.progressAlpha > 1.0f) {
                                            botButton.progressAlpha = 1.0f;
                                        }
                                    }
                                } else if (botButton.progressAlpha > 0.0f) {
                                    BotButton.access$2824(botButton, ((float) j) / 200.0f);
                                    if (botButton.progressAlpha < 0.0f) {
                                        botButton.progressAlpha = 0.0f;
                                    }
                                }
                            } else {
                                botButton = botButton3;
                            }
                            botButton.lastUpdateTime = currentTimeMillis;
                        }
                    }
                } else {
                    Drawable themedDrawable2 = getThemedDrawable("drawableBotInline");
                    BaseCell.setDrawableBounds(themedDrawable2, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - themedDrawable2.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                    themedDrawable2.draw(canvas);
                }
            } else {
                Drawable themedDrawable3 = getThemedDrawable("drawableBotWebView");
                BaseCell.setDrawableBounds(themedDrawable3, (((botButton3.x + botButton3.width) - AndroidUtilities.dp(3.0f)) - themedDrawable3.getIntrinsicWidth()) + i, dp3 + AndroidUtilities.dp(3.0f));
                themedDrawable3.draw(canvas);
            }
            i3++;
            f2 = 2.0f;
        }
        canvas.restore();
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0179 A[LOOP:1: B:47:0x0171->B:49:0x0179, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0141  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x01f7  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x020e  */
    /* JADX WARN: Removed duplicated region for block: B:81:? A[RETURN, SYNTHETIC] */
    @SuppressLint({"Range"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawMessageText(Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, boolean z, float f, boolean z2) {
        int size;
        int i;
        int i2;
        int i3;
        int i4;
        boolean z3;
        int color;
        int i5;
        int i6;
        MessageObject.TextLayoutBlock textLayoutBlock;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        if (arrayList == null || arrayList.isEmpty() || f == 0.0f) {
            return;
        }
        if (z) {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        } else {
            size = arrayList.size();
            i = 0;
        }
        int i12 = this.textY;
        float f2 = i12;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f3 = transitionParams.animateFromTextY;
            float f4 = transitionParams.animateChangeProgress;
            f2 = (f3 * (1.0f - f4)) + (i12 * f4);
        }
        float f5 = f2;
        if (i < 0) {
            return;
        }
        if (f == 1.0f) {
            i2 = 0;
            i3 = 0;
            i4 = Integer.MIN_VALUE;
        } else if (z2) {
            int alpha = Theme.chat_msgTextPaint.getAlpha();
            int alpha2 = Color.alpha(Theme.chat_msgTextPaint.linkColor);
            Theme.chat_msgTextPaint.setAlpha((int) (alpha * f));
            TextPaint textPaint = Theme.chat_msgTextPaint;
            textPaint.linkColor = ColorUtils.setAlphaComponent(textPaint.linkColor, (int) (alpha2 * f));
            i3 = alpha;
            i2 = alpha2;
            i4 = Integer.MIN_VALUE;
            z3 = true;
            color = (this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor("chat_outTimeText");
            i5 = i;
            while (i5 <= size && i5 < arrayList.size()) {
                textLayoutBlock = arrayList.get(i5);
                canvas.save();
                canvas.translate(this.textX - (!textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), f5 + textLayoutBlock.textYOffset + this.transitionYOffsetForDrawables);
                if (i5 == this.linkBlockNum && !z2) {
                    if (this.links.draw(canvas)) {
                        invalidate();
                    }
                    drawProgressLoadingLink(canvas, i5);
                }
                if (i5 == this.linkSelectionBlockNum && !this.urlPathSelection.isEmpty() && !z2) {
                    for (i11 = 0; i11 < this.urlPathSelection.size(); i11++) {
                        canvas.drawPath(this.urlPathSelection.get(i11), Theme.chat_textSearchSelectionPaint);
                    }
                }
                if (this.delegate.getTextSelectionHelper() != null && this.transitionParams.animateChangeProgress == 1.0f && !z2) {
                    this.delegate.getTextSelectionHelper().draw(this.currentMessageObject, textLayoutBlock, canvas);
                }
                try {
                    Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                    i7 = i5;
                    i8 = i2;
                    i9 = i3;
                    i10 = i4;
                } catch (Exception e) {
                    e = e;
                    i7 = i5;
                    i8 = i2;
                    i9 = i3;
                    i10 = i4;
                }
                try {
                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color, 0, textLayoutBlock.spoilersPatchedTextLayout, textLayoutBlock.textLayout, textLayoutBlock.spoilers, canvas, false);
                    Emoji.emojiDrawingYOffset = 0.0f;
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    canvas.restore();
                    i5 = i7 + 1;
                    i2 = i8;
                    i3 = i9;
                    i4 = i10;
                }
                canvas.restore();
                i5 = i7 + 1;
                i2 = i8;
                i3 = i9;
                i4 = i10;
            }
            int i13 = i2;
            int i14 = i3;
            i6 = i4;
            if (z3) {
                Theme.chat_msgTextPaint.setAlpha(i14);
                TextPaint textPaint2 = Theme.chat_msgTextPaint;
                textPaint2.linkColor = ColorUtils.setAlphaComponent(textPaint2.linkColor, i13);
            }
            if (i6 != Integer.MIN_VALUE) {
                return;
            }
            canvas.restoreToCount(i6);
            return;
        } else {
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                int i15 = messageDrawable.getBounds().top;
                int i16 = this.currentBackgroundDrawable.getBounds().bottom;
                if (getY() < 0.0f) {
                    i15 = (int) (-getY());
                }
                float y = getY() + getMeasuredHeight();
                int i17 = this.parentHeight;
                if (y > i17) {
                    i16 = (int) (i17 - getY());
                }
                this.rect.set(getCurrentBackgroundLeft(), i15, this.currentBackgroundDrawable.getBounds().right, i16);
            } else {
                this.rect.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
            }
            i4 = canvas.saveLayerAlpha(this.rect, (int) (255.0f * f), 31);
            i2 = 0;
            i3 = 0;
        }
        z3 = false;
        color = (this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor("chat_outTimeText");
        i5 = i;
        while (i5 <= size) {
            textLayoutBlock = arrayList.get(i5);
            canvas.save();
            canvas.translate(this.textX - (!textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), f5 + textLayoutBlock.textYOffset + this.transitionYOffsetForDrawables);
            if (i5 == this.linkBlockNum) {
                if (this.links.draw(canvas)) {
                }
                drawProgressLoadingLink(canvas, i5);
            }
            if (i5 == this.linkSelectionBlockNum) {
                while (i11 < this.urlPathSelection.size()) {
                }
            }
            if (this.delegate.getTextSelectionHelper() != null) {
                this.delegate.getTextSelectionHelper().draw(this.currentMessageObject, textLayoutBlock, canvas);
            }
            Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
            i7 = i5;
            i8 = i2;
            i9 = i3;
            i10 = i4;
            SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color, 0, textLayoutBlock.spoilersPatchedTextLayout, textLayoutBlock.textLayout, textLayoutBlock.spoilers, canvas, false);
            Emoji.emojiDrawingYOffset = 0.0f;
            canvas.restore();
            i5 = i7 + 1;
            i2 = i8;
            i3 = i9;
            i4 = i10;
        }
        int i132 = i2;
        int i142 = i3;
        i6 = i4;
        if (z3) {
        }
        if (i6 != Integer.MIN_VALUE) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x003a  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x004a  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0052  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0063 A[LOOP:1: B:26:0x0063->B:28:0x0066, LOOP_START, PHI: r2 r5 
      PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:25:0x0061, B:28:0x0066] A[DONT_GENERATE, DONT_INLINE]
      PHI: (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:25:0x0061, B:28:0x0066] A[DONT_GENERATE, DONT_INLINE]] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0060  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x004c  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0047  */
    /* JADX WARN: Removed duplicated region for block: B:8:0x0021  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public AnimatedEmojiSpan[] getAnimatedEmojiSpans() {
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        MessageObject messageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr2;
        int i;
        MessageObject messageObject2 = this.currentMessageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr3 = null;
        int i2 = 0;
        if (messageObject2 != null) {
            CharSequence charSequence = messageObject2.messageText;
            if (charSequence instanceof Spanned) {
                animatedEmojiSpanArr = (AnimatedEmojiSpan[]) ((Spanned) charSequence).getSpans(0, charSequence.length(), AnimatedEmojiSpan.class);
                messageObject = this.currentMessageObject;
                if (messageObject != null) {
                    CharSequence charSequence2 = messageObject.caption;
                    if (charSequence2 instanceof Spanned) {
                        animatedEmojiSpanArr2 = (AnimatedEmojiSpan[]) ((Spanned) charSequence2).getSpans(0, charSequence2.length(), AnimatedEmojiSpan.class);
                        if ((animatedEmojiSpanArr != null && animatedEmojiSpanArr.length != 0) || (animatedEmojiSpanArr2 != null && animatedEmojiSpanArr2.length != 0)) {
                            animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                            if (animatedEmojiSpanArr == null) {
                                int i3 = 0;
                                i = 0;
                                while (i3 < animatedEmojiSpanArr.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr[i3];
                                    i3++;
                                    i++;
                                }
                            } else {
                                i = 0;
                            }
                            if (animatedEmojiSpanArr2 != null) {
                                while (i2 < animatedEmojiSpanArr2.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr2[i2];
                                    i2++;
                                    i++;
                                }
                            }
                        }
                        return animatedEmojiSpanArr3;
                    }
                }
                animatedEmojiSpanArr2 = null;
                if (animatedEmojiSpanArr != null) {
                    animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                    if (animatedEmojiSpanArr == null) {
                    }
                    if (animatedEmojiSpanArr2 != null) {
                    }
                    return animatedEmojiSpanArr3;
                }
                animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                if (animatedEmojiSpanArr == null) {
                }
                if (animatedEmojiSpanArr2 != null) {
                }
                return animatedEmojiSpanArr3;
            }
        }
        animatedEmojiSpanArr = null;
        messageObject = this.currentMessageObject;
        if (messageObject != null) {
        }
        animatedEmojiSpanArr2 = null;
        if (animatedEmojiSpanArr != null) {
        }
        animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
        if (animatedEmojiSpanArr == null) {
        }
        if (animatedEmojiSpanArr2 != null) {
        }
        return animatedEmojiSpanArr3;
    }

    public void updateCaptionLayout() {
        float imageX;
        float imageY;
        float imageHeight;
        MessageObject messageObject = this.currentMessageObject;
        int i = messageObject.type;
        if (i == 1 || i == 20 || this.documentAttachType == 4 || i == 8) {
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.imageChangeBoundsTransition) {
                imageX = transitionParams.animateToImageX;
                imageY = transitionParams.animateToImageY;
                imageHeight = transitionParams.animateToImageH;
            } else {
                imageX = this.photoImage.getImageX();
                imageY = this.photoImage.getImageY();
                imageHeight = this.photoImage.getImageHeight();
            }
            this.captionX = imageX + AndroidUtilities.dp(5.0f) + this.captionOffsetX;
            this.captionY = imageY + imageHeight + AndroidUtilities.dp(6.0f);
        } else {
            float f = 41.3f;
            float f2 = 9.0f;
            float f3 = 11.0f;
            if (this.hasOldCaptionPreview) {
                int i2 = this.backgroundDrawableLeft;
                if (!messageObject.isOutOwner()) {
                    f3 = 17.0f;
                }
                this.captionX = i2 + AndroidUtilities.dp(f3) + this.captionOffsetX;
                int i3 = this.totalHeight - this.captionHeight;
                if (!this.drawPinnedTop) {
                    f2 = 10.0f;
                }
                float dp = ((i3 - AndroidUtilities.dp(f2)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f);
                this.captionY = dp;
                if (this.drawCommentButton && this.drawSideButton != 3) {
                    if (!shouldDrawTimeOnMedia()) {
                        f = 43.0f;
                    }
                    this.captionY = dp - AndroidUtilities.dp(f);
                }
            } else {
                if (this.isRoundVideo) {
                    this.captionX = getBackgroundDrawableLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() ? 0 : 6) + 11);
                } else {
                    int i4 = this.backgroundDrawableLeft;
                    if (!messageObject.isOutOwner() && !this.mediaBackground && !this.drawPinnedBottom) {
                        f3 = 17.0f;
                    }
                    this.captionX = i4 + AndroidUtilities.dp(f3) + this.captionOffsetX;
                }
                int i5 = this.totalHeight - this.captionHeight;
                if (!this.drawPinnedTop) {
                    f2 = 10.0f;
                }
                float dp2 = i5 - AndroidUtilities.dp(f2);
                this.captionY = dp2;
                if (this.drawCommentButton && this.drawSideButton != 3) {
                    if (!shouldDrawTimeOnMedia()) {
                        f = 43.0f;
                    }
                    this.captionY = dp2 - AndroidUtilities.dp(f);
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (!reactionsLayoutInBubble.isEmpty && !reactionsLayoutInBubble.isSmall) {
                    this.captionY -= reactionsLayoutInBubble.totalHeight;
                }
            }
        }
        this.captionX += getExtraTextX();
    }

    private boolean textIsSelectionMode() {
        return getCurrentMessagesGroup() == null && this.delegate.getTextSelectionHelper() != null && this.delegate.getTextSelectionHelper().isSelected(this.currentMessageObject);
    }

    public float getViewTop() {
        return this.viewTop;
    }

    public int getBackgroundHeight() {
        return this.backgroundHeight;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMiniIconForCurrentState() {
        int i = this.miniButtonState;
        if (i < 0) {
            return 4;
        }
        return i == 0 ? 2 : 3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getIconForCurrentState() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (messageObject != null && messageObject.hasExtendedMedia())) {
            return 4;
        }
        if (this.documentAttachType == 7 && this.currentMessageObject.isVoiceTranscriptionOpen() && this.canStreamVideo) {
            int i = this.buttonState;
            return (i == 1 || i == 4) ? 1 : 0;
        }
        int i2 = this.documentAttachType;
        if (i2 == 3 || i2 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
            } else {
                this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
            }
            int i3 = this.buttonState;
            if (i3 == 1) {
                return 1;
            }
            if (i3 == 2) {
                return 2;
            }
            return i3 == 4 ? 3 : 0;
        }
        if (i2 == 1 && !this.drawPhotoImage) {
            if (this.currentMessageObject.isOutOwner()) {
                this.radialProgress.setColors("chat_outLoader", "chat_outLoaderSelected", "chat_outMediaIcon", "chat_outMediaIconSelected");
            } else {
                this.radialProgress.setColors("chat_inLoader", "chat_inLoaderSelected", "chat_inMediaIcon", "chat_inMediaIconSelected");
            }
            int i4 = this.buttonState;
            if (i4 == -1) {
                return 5;
            }
            if (i4 == 0) {
                return 2;
            }
            if (i4 == 1) {
                return 3;
            }
        } else {
            this.radialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
            this.videoRadialProgress.setColors("chat_mediaLoaderPhoto", "chat_mediaLoaderPhotoSelected", "chat_mediaLoaderPhotoIcon", "chat_mediaLoaderPhotoIconSelected");
            int i5 = this.buttonState;
            if (i5 >= 0 && i5 < 4) {
                if (i5 == 0) {
                    return 2;
                }
                if (i5 == 1) {
                    return 3;
                }
                return (i5 != 2 && this.autoPlayingMedia) ? 4 : 0;
            } else if (i5 == -1) {
                if (this.documentAttachType == 1) {
                    if (this.drawPhotoImage && (this.currentPhotoObject != null || this.currentPhotoObjectThumb != null)) {
                        if (this.photoImage.hasBitmapImage()) {
                            return 4;
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2.mediaExists || messageObject2.attachPathExists) {
                            return 4;
                        }
                    }
                    return 5;
                } else if (this.currentMessageObject.needDrawBluredPreview()) {
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (messageObject3.messageOwner.destroyTime == 0) {
                        return 7;
                    }
                    return messageObject3.isOutOwner() ? 9 : 11;
                } else if (this.hasEmbed) {
                    return 0;
                }
            }
        }
        MessageObject messageObject4 = this.currentMessageObject;
        return (messageObject4 == null || !this.isRoundVideo || !messageObject4.isVoiceTranscriptionOpen()) ? 4 : 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:56:0x010f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int getMaxNameWidth() {
        int min;
        int min2;
        int dp;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i;
        int parentWidth;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i2 = this.documentAttachType;
        if (i2 == 6 || i2 == 8 || (i = (messageObject2 = this.currentMessageObject).type) == 5) {
            if (AndroidUtilities.isTablet()) {
                if (this.isChat && !this.isThreadPost && !this.currentMessageObject.isOutOwner() && this.currentMessageObject.needDrawAvatar()) {
                    min2 = AndroidUtilities.getMinTabletSide();
                    dp = AndroidUtilities.dp(42.0f);
                    min = min2 - dp;
                    if (!this.isPlayingRound) {
                    }
                    return (min - this.backgroundWidth) - AndroidUtilities.dp(57.0f);
                }
                min = AndroidUtilities.getMinTabletSide();
                if (!this.isPlayingRound && ((messageObject = this.currentMessageObject) == null || !messageObject.isVoiceTranscriptionOpen())) {
                    return (min - (this.backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize))) - AndroidUtilities.dp(57.0f);
                }
                return (min - this.backgroundWidth) - AndroidUtilities.dp(57.0f);
            } else if (this.isChat && !this.isThreadPost && !this.currentMessageObject.isOutOwner() && this.currentMessageObject.needDrawAvatar()) {
                min2 = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                dp = AndroidUtilities.dp(42.0f);
                min = min2 - dp;
                if (!this.isPlayingRound) {
                }
                return (min - this.backgroundWidth) - AndroidUtilities.dp(57.0f);
            } else {
                min = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
                if (!this.isPlayingRound) {
                }
                return (min - this.backgroundWidth) - AndroidUtilities.dp(57.0f);
            }
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        int i3 = 0;
        if (groupedMessages == null || groupedMessages.isDocuments) {
            if (i != 19) {
                return this.backgroundWidth - AndroidUtilities.dp(this.mediaBackground ? 22.0f : 31.0f);
            }
            int i4 = messageObject2.textWidth;
            int dp2 = AndroidUtilities.displaySize.x - AndroidUtilities.dp(52.0f);
            if (this.isAvatarVisible) {
                i3 = AndroidUtilities.dp(48.0f);
            }
            return Math.max(i4, (int) ((dp2 - i3) * 0.5f));
        }
        if (AndroidUtilities.isTablet()) {
            parentWidth = AndroidUtilities.getMinTabletSide();
        } else {
            parentWidth = getParentWidth();
        }
        int i5 = 0;
        for (int i6 = 0; i6 < this.currentMessagesGroup.posArray.size(); i6++) {
            if (this.currentMessagesGroup.posArray.get(i6).minY != 0) {
                break;
            }
            double d = i5;
            double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * parentWidth);
            Double.isNaN(d);
            i5 = (int) (d + ceil);
        }
        if (this.isAvatarVisible) {
            i3 = 48;
        }
        return i5 - AndroidUtilities.dp(i3 + 31);
    }

    /* JADX WARN: Code restructure failed: missing block: B:44:0x011c, code lost:
        if ((r12 & 2) != 0) goto L49;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateButtonState(boolean z, boolean z2, boolean z3) {
        boolean z4;
        int i;
        int i2;
        int i3;
        int i4;
        boolean isLoadingVideo;
        int i5;
        boolean z5;
        int i6;
        int i7;
        int i8;
        boolean z6;
        int i9;
        int i10;
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null) {
            return;
        }
        boolean z7 = (!z2 || (!PhotoViewer.isShowingImage(messageObject2) && this.attachedToWindow)) ? z2 : false;
        this.drawRadialCheckBackground = false;
        String str = null;
        MessageObject messageObject3 = this.currentMessageObject;
        int i11 = messageObject3.type;
        if (i11 == 1) {
            TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
            if (tLRPC$PhotoSize == null) {
                this.radialProgress.setIcon(4, z, z7);
                return;
            } else {
                str = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                z4 = this.currentMessageObject.mediaExists;
            }
        } else if (i11 == 8 || (i2 = this.documentAttachType) == 7 || i2 == 4 || i2 == 8 || i11 == 9 || i2 == 3 || i2 == 5) {
            if (messageObject3.useCustomPhoto) {
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                return;
            } else if (messageObject3.attachPathExists && !TextUtils.isEmpty(messageObject3.messageOwner.attachPath)) {
                str = this.currentMessageObject.messageOwner.attachPath;
                z4 = true;
            } else {
                if (!this.currentMessageObject.isSendError() || (i = this.documentAttachType) == 3 || i == 5) {
                    str = this.currentMessageObject.getFileName();
                    z4 = this.currentMessageObject.mediaExists;
                }
                z4 = false;
            }
        } else if (i2 != 0) {
            str = FileLoader.getAttachFileName(this.documentAttach);
            z4 = this.currentMessageObject.mediaExists;
        } else {
            TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
            if (tLRPC$PhotoSize2 != null) {
                str = FileLoader.getAttachFileName(tLRPC$PhotoSize2);
                z4 = this.currentMessageObject.mediaExists;
            }
            z4 = false;
        }
        TLRPC$Document tLRPC$Document = this.documentAttach;
        boolean canDownloadMedia = (tLRPC$Document == null || tLRPC$Document.dc_id != Integer.MIN_VALUE) ? DownloadController.getInstance(this.currentAccount).canDownloadMedia(this.currentMessageObject) : false;
        this.canStreamVideo = (this.currentMessageObject.isSent() || this.currentMessageObject.isForwarded()) && ((i3 = this.documentAttachType) == 4 || i3 == 7 || (i3 == 2 && canDownloadMedia)) && this.currentMessageObject.canStreamVideo() && !this.currentMessageObject.needDrawBluredPreview();
        if (SharedConfig.streamMedia && ((int) this.currentMessageObject.getDialogId()) != 0 && !this.currentMessageObject.isSecretMedia()) {
            if (this.documentAttachType != 5) {
                if (this.canStreamVideo && (groupedMessagePosition = this.currentPosition) != null) {
                    int i12 = groupedMessagePosition.flags;
                    if ((i12 & 1) != 0) {
                    }
                }
            }
            this.hasMiniProgress = z4 ? 1 : 2;
            z4 = true;
        }
        if (this.currentMessageObject.isSendError() || (TextUtils.isEmpty(str) && (this.currentMessageObject.isAnyKindOfSticker() || (!this.currentMessageObject.isSending() && !this.currentMessageObject.isEditing())))) {
            this.radialProgress.setIcon(4, z, false);
            this.radialProgress.setMiniIcon(4, z, false);
            this.videoRadialProgress.setIcon(4, z, false);
            this.videoRadialProgress.setMiniIcon(4, z, false);
            return;
        }
        HashMap<String, String> hashMap = this.currentMessageObject.messageOwner.params;
        boolean z8 = hashMap != null && hashMap.containsKey("query_id");
        int i13 = this.documentAttachType;
        float f = 0.0f;
        if (i13 == 3 || i13 == 5 || (i13 == 7 && (messageObject = this.currentMessageObject) != null && messageObject.isVoiceTranscriptionOpen() && this.canStreamVideo)) {
            if ((this.currentMessageObject.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) || (this.currentMessageObject.isSendError() && z8)) {
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController downloadController = DownloadController.getInstance(this.currentAccount);
                    MessageObject messageObject4 = this.currentMessageObject;
                    downloadController.addLoadingFileObserver(messageObject4.messageOwner.attachPath, messageObject4, this);
                    this.wasSending = true;
                    this.buttonState = 4;
                    boolean isSendingMessage = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                    if (this.currentPosition != null && isSendingMessage && this.buttonState == 4) {
                        this.drawRadialCheckBackground = true;
                        getIconForCurrentState();
                        this.radialProgress.setIcon(6, z, z7);
                    } else {
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                    }
                    this.radialProgress.setMiniIcon(4, z, z7);
                    if (!z8) {
                        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                        if (fileProgressSizes == null && isSendingMessage) {
                            f = 1.0f;
                        } else if (fileProgressSizes != null) {
                            f = DownloadController.getProgress(fileProgressSizes);
                        }
                        this.radialProgress.setProgress(f, false);
                    } else {
                        this.radialProgress.setProgress(0.0f, false);
                    }
                } else {
                    this.buttonState = -1;
                    getIconForCurrentState();
                    this.radialProgress.setIcon(12, z, false);
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(4, z, false);
                }
            } else if (this.hasMiniProgress != 0) {
                this.radialProgress.setMiniProgressBackgroundColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outLoader" : "chat_inLoader"));
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    i4 = 1;
                    this.buttonState = 0;
                } else {
                    i4 = 1;
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                if (this.hasMiniProgress == i4) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    this.miniButtonState = -1;
                } else {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        createLoadingProgressLayout(this.documentAttach);
                        this.miniButtonState = 0;
                    } else {
                        this.miniButtonState = 1;
                        long[] fileProgressSizes2 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes2 != null) {
                            this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes2), z7);
                            createLoadingProgressLayout(fileProgressSizes2[0], fileProgressSizes2[1]);
                        } else {
                            this.radialProgress.setProgress(0.0f, z7);
                            createLoadingProgressLayout(0L, this.currentMessageObject.getSize());
                        }
                    }
                }
                this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z7);
            } else if (z4) {
                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                    this.buttonState = 0;
                } else {
                    this.buttonState = 1;
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
            } else {
                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                    this.buttonState = 2;
                } else {
                    this.buttonState = 4;
                    long[] fileProgressSizes3 = ImageLoader.getInstance().getFileProgressSizes(str);
                    if (fileProgressSizes3 != null) {
                        this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes3), z7);
                        createLoadingProgressLayout(fileProgressSizes3[0], fileProgressSizes3[1]);
                    } else {
                        createLoadingProgressLayout(this.documentAttach);
                        this.radialProgress.setProgress(0.0f, z7);
                    }
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
            }
            updatePlayingMessageProgress();
        } else {
            MessageObject messageObject5 = this.currentMessageObject;
            if (messageObject5.type == 0 && (i9 = this.documentAttachType) != 1 && i9 != 2 && i9 != 4 && i9 != 8 && i9 != 9) {
                if (this.currentPhotoObject == null || !this.drawImageButton) {
                    return;
                }
                if (!z4) {
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        MessageObject messageObject6 = this.currentMessageObject;
                        if (!messageObject6.loadingCancelled && (((i10 = this.documentAttachType) == 0 && canDownloadMedia) || (i10 == 2 && MessageObject.isGifDocument(this.documentAttach, messageObject6.hasValidGroupId()) && canDownloadMedia))) {
                            this.buttonState = 1;
                        } else {
                            this.buttonState = 0;
                        }
                    } else {
                        this.buttonState = 1;
                        long[] fileProgressSizes4 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes4 != null) {
                            f = DownloadController.getProgress(fileProgressSizes4);
                        }
                        if (fileProgressSizes4 != null && fileProgressSizes4[0] == fileProgressSizes4[1]) {
                            createLoadingProgressLayout(fileProgressSizes4[0], fileProgressSizes4[1]);
                        } else if (this.currentMessageObject.getDocument() != null) {
                            MessageObject messageObject7 = this.currentMessageObject;
                            createLoadingProgressLayout(messageObject7.loadedFileSize, messageObject7.getSize());
                        }
                    }
                    this.radialProgress.setProgress(f, false);
                } else {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    if (this.documentAttachType == 2 && !this.photoImage.isAllowStartAnimation()) {
                        this.buttonState = 2;
                    } else {
                        this.buttonState = -1;
                    }
                }
                this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                invalidate();
            } else if (messageObject5.isOut() && ((this.currentMessageObject.isSending() && !this.currentMessageObject.isForwarded()) || (this.currentMessageObject.isEditing() && this.currentMessageObject.isEditingMedia()))) {
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController downloadController2 = DownloadController.getInstance(this.currentAccount);
                    MessageObject messageObject8 = this.currentMessageObject;
                    downloadController2.addLoadingFileObserver(messageObject8.messageOwner.attachPath, messageObject8, this);
                    this.wasSending = true;
                    String str2 = this.currentMessageObject.messageOwner.attachPath;
                    boolean z9 = str2 == null || !str2.startsWith("http");
                    TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                    HashMap<String, String> hashMap2 = tLRPC$Message.params;
                    if (tLRPC$Message.message != null && hashMap2 != null && (hashMap2.containsKey("url") || hashMap2.containsKey("bot"))) {
                        this.buttonState = -1;
                        z9 = false;
                        z6 = true;
                    } else {
                        z6 = true;
                        this.buttonState = 1;
                    }
                    boolean isSendingMessage2 = SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId());
                    if (this.currentPosition != null && isSendingMessage2 && this.buttonState == z6) {
                        this.drawRadialCheckBackground = z6;
                        getIconForCurrentState();
                        this.radialProgress.setIcon(6, z, z7);
                    } else {
                        this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                    }
                    if (z9) {
                        long[] fileProgressSizes5 = ImageLoader.getInstance().getFileProgressSizes(this.currentMessageObject.messageOwner.attachPath);
                        if (fileProgressSizes5 == null && isSendingMessage2) {
                            f = 1.0f;
                        } else if (fileProgressSizes5 != null) {
                            f = DownloadController.getProgress(fileProgressSizes5);
                            createLoadingProgressLayout(fileProgressSizes5[0], fileProgressSizes5[1]);
                        }
                        this.radialProgress.setProgress(f, false);
                    } else {
                        this.radialProgress.setProgress(0.0f, false);
                    }
                    invalidate();
                    i8 = 4;
                } else {
                    getIconForCurrentState();
                    if (this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedSticker() || this.currentMessageObject.isLocation() || this.currentMessageObject.isGif()) {
                        this.buttonState = -1;
                        i8 = 4;
                        this.radialProgress.setIcon(4, z, false);
                    } else {
                        this.buttonState = 1;
                        this.radialProgress.setIcon(12, z, false);
                        i8 = 4;
                    }
                    this.radialProgress.setProgress(0.0f, false);
                }
                this.videoRadialProgress.setIcon(i8, z, false);
            } else {
                if (this.wasSending && !TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                }
                int i14 = this.documentAttachType;
                if ((i14 == 4 || i14 == 2 || i14 == 7) && this.autoPlayingMedia) {
                    isLoadingVideo = FileLoader.getInstance(this.currentAccount).isLoadingVideo(this.documentAttach, MediaController.getInstance().isPlayingMessage(this.currentMessageObject));
                    AnimatedFileDrawable animation = this.photoImage.getAnimation();
                    if (animation != null) {
                        MessageObject messageObject9 = this.currentMessageObject;
                        if (messageObject9.hadAnimationNotReadyLoading) {
                            if (animation.hasBitmap()) {
                                this.currentMessageObject.hadAnimationNotReadyLoading = false;
                            }
                        } else {
                            messageObject9.hadAnimationNotReadyLoading = isLoadingVideo && !animation.hasBitmap();
                        }
                    } else if (this.documentAttachType == 2 && !z4) {
                        this.currentMessageObject.hadAnimationNotReadyLoading = true;
                    }
                } else {
                    isLoadingVideo = false;
                }
                if (this.hasMiniProgress != 0) {
                    this.radialProgress.setMiniProgressBackgroundColor(getThemedColor("chat_inLoaderPhoto"));
                    this.buttonState = 3;
                    this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                    if (this.hasMiniProgress == 1) {
                        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                        this.miniButtonState = -1;
                    } else {
                        DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                        if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                            this.miniButtonState = 0;
                        } else {
                            this.miniButtonState = 1;
                            long[] fileProgressSizes6 = ImageLoader.getInstance().getFileProgressSizes(str);
                            if (fileProgressSizes6 != null) {
                                createLoadingProgressLayout(fileProgressSizes6[0], fileProgressSizes6[1]);
                                this.radialProgress.setProgress(DownloadController.getProgress(fileProgressSizes6), z7);
                            } else {
                                createLoadingProgressLayout(this.documentAttach);
                                this.radialProgress.setProgress(0.0f, z7);
                            }
                        }
                    }
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), z, z7);
                } else if (z4 || (((i6 = this.documentAttachType) == 4 || i6 == 2 || i6 == 7) && this.autoPlayingMedia && !this.currentMessageObject.hadAnimationNotReadyLoading && !isLoadingVideo)) {
                    DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                    if (this.drawVideoImageButton && z7) {
                        int i15 = this.animatingDrawVideoImageButton;
                        if (i15 != 1 && this.animatingDrawVideoImageButtonProgress > 0.0f) {
                            if (i15 == 0) {
                                this.animatingDrawVideoImageButtonProgress = 1.0f;
                            }
                            this.animatingDrawVideoImageButton = 1;
                        }
                    } else if (this.animatingDrawVideoImageButton == 0) {
                        this.animatingDrawVideoImageButton = 1;
                    }
                    this.drawVideoImageButton = false;
                    this.drawVideoSize = false;
                    if (this.currentMessageObject.needDrawBluredPreview()) {
                        this.buttonState = -1;
                    } else {
                        int i16 = this.documentAttachType;
                        if (i16 == 2 && this.currentMessageObject.gifState == 1.0f) {
                            if (this.photoImage.isAnimationRunning()) {
                                this.currentMessageObject.gifState = 0.0f;
                                this.buttonState = -1;
                            } else {
                                this.buttonState = 2;
                            }
                        } else if (i16 == 4 && !this.hasEmbed) {
                            this.buttonState = 3;
                        } else {
                            this.buttonState = -1;
                        }
                    }
                    RadialProgress2 radialProgress2 = this.videoRadialProgress;
                    if (this.animatingDrawVideoImageButton != 0) {
                        i5 = 4;
                        z5 = true;
                    } else {
                        i5 = 4;
                        z5 = false;
                    }
                    radialProgress2.setIcon(i5, z, z5);
                    this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                    if (!z3 && this.photoNotSet) {
                        setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                    }
                    invalidate();
                } else {
                    this.drawVideoSize = i6 == 4 || i6 == 2;
                    if ((i6 == 4 || i6 == 2 || i6 == 7) && this.canStreamVideo && !this.drawVideoImageButton && z7) {
                        int i17 = this.animatingDrawVideoImageButton;
                        if (i17 != 2 && this.animatingDrawVideoImageButtonProgress < 1.0f) {
                            if (i17 == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                            this.animatingDrawVideoImageButton = 2;
                        }
                    } else if (this.animatingDrawVideoImageButton == 0) {
                        this.animatingDrawVideoImageButtonProgress = 1.0f;
                    }
                    DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(str, this.currentMessageObject, this);
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(str)) {
                        MessageObject messageObject10 = this.currentMessageObject;
                        if (!messageObject10.loadingCancelled && canDownloadMedia) {
                            this.buttonState = 1;
                            i7 = 4;
                        } else {
                            i7 = 4;
                            if (messageObject10.type == 4) {
                                this.buttonState = -1;
                            } else {
                                this.buttonState = 0;
                            }
                        }
                        int i18 = messageObject10.type;
                        boolean z10 = i18 == 3 || i18 == 8 || this.documentAttachType == i7;
                        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                        boolean z11 = groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 3) == 3;
                        int i19 = this.documentAttachType;
                        if ((i19 == 4 || (i19 == 2 && canDownloadMedia)) && this.canStreamVideo && z10 && z11) {
                            this.drawVideoImageButton = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon(this.autoPlayingMedia ? 4 : 0, z, z7);
                            this.videoRadialProgress.setIcon(2, z, z7);
                        } else {
                            this.drawVideoImageButton = false;
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                            this.videoRadialProgress.setIcon(4, z, false);
                            if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                        }
                    } else {
                        this.buttonState = 1;
                        long[] fileProgressSizes7 = ImageLoader.getInstance().getFileProgressSizes(str);
                        if (fileProgressSizes7 != null) {
                            createLoadingProgressLayout(fileProgressSizes7[0], fileProgressSizes7[1]);
                        } else {
                            createLoadingProgressLayout(this.documentAttach);
                        }
                        MessageObject messageObject11 = this.currentMessageObject;
                        int i20 = messageObject11.type;
                        boolean z12 = i20 == 3 || i20 == 8 || this.documentAttachType == 4;
                        MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                        boolean z13 = groupedMessagePosition3 == null || (groupedMessagePosition3.flags & 3) == 3;
                        if ((this.documentAttachType == 4 || (MessageObject.isGifDocument(this.documentAttach, messageObject11.hasValidGroupId()) && canDownloadMedia)) && this.canStreamVideo && z12 && z13) {
                            this.drawVideoImageButton = true;
                            getIconForCurrentState();
                            this.radialProgress.setIcon((this.autoPlayingMedia || this.documentAttachType == 2) ? 4 : 0, z, z7);
                            RadialProgress2 radialProgress22 = this.videoRadialProgress;
                            if (fileProgressSizes7 != null) {
                                f = DownloadController.getProgress(fileProgressSizes7);
                            }
                            radialProgress22.setProgress(f, z7);
                            this.videoRadialProgress.setIcon(14, z, z7);
                        } else {
                            this.drawVideoImageButton = false;
                            this.radialProgress.setProgress(fileProgressSizes7 != null ? DownloadController.getProgress(fileProgressSizes7) : 0.0f, z7);
                            this.radialProgress.setIcon(getIconForCurrentState(), z, z7);
                            this.videoRadialProgress.setIcon(4, z, false);
                            if (!this.drawVideoSize && this.animatingDrawVideoImageButton == 0) {
                                this.animatingDrawVideoImageButtonProgress = 0.0f;
                            }
                        }
                    }
                    invalidate();
                }
            }
        }
        if (this.hasMiniProgress != 0) {
            return;
        }
        this.radialProgress.setMiniIcon(4, false, z7);
    }

    private void didPressMiniButton(boolean z) {
        int i = this.miniButtonState;
        if (i != 0) {
            if (i != 1) {
                return;
            }
            int i2 = this.documentAttachType;
            if ((i2 == 3 || i2 == 5 || i2 == 7) && MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                MediaController.getInstance().cleanupPlayer(true, true);
            }
            this.miniButtonState = 0;
            this.currentMessageObject.loadingCancelled = true;
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
            this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
            invalidate();
            return;
        }
        this.miniButtonState = 1;
        this.radialProgress.setProgress(0.0f, false);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i3 = this.documentAttachType;
        if (i3 == 3 || i3 == 5) {
            FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
            this.currentMessageObject.loadingCancelled = false;
        } else if (i3 == 4 || i3 == 7) {
            createLoadingProgressLayout(this.documentAttach);
            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
            TLRPC$Document tLRPC$Document = this.documentAttach;
            MessageObject messageObject2 = this.currentMessageObject;
            fileLoader.loadFile(tLRPC$Document, messageObject2, 2, messageObject2.shouldEncryptPhotoOrVideo() ? 2 : 0);
            this.currentMessageObject.loadingCancelled = false;
        }
        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
        invalidate();
    }

    private void didPressButton(boolean z, boolean z2) {
        MessageObject messageObject;
        MessageObject messageObject2;
        MessageObject messageObject3;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str;
        MessageObject messageObject4;
        MessageObject messageObject5 = this.currentMessageObject;
        if (messageObject5 != null && !messageObject5.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i = this.buttonState;
        int i2 = 2;
        if (i == 0 && (!this.drawVideoImageButton || z2)) {
            int i3 = this.documentAttachType;
            if (i3 == 3 || i3 == 5 || (i3 == 7 && (messageObject4 = this.currentMessageObject) != null && messageObject4.isVoiceTranscriptionOpen() && this.currentMessageObject.mediaExists)) {
                if (this.miniButtonState == 0) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                    this.currentMessageObject.loadingCancelled = false;
                }
                if (!this.delegate.needPlayMessage(this.currentMessageObject, false)) {
                    return;
                }
                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                    this.miniButtonState = 1;
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                }
                updatePlayingMessageProgress();
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                invalidate();
                return;
            }
            if (z2) {
                this.videoRadialProgress.setProgress(0.0f, false);
            } else {
                this.radialProgress.setProgress(0.0f, false);
            }
            if (this.currentPhotoObject != null && (this.photoImage.hasNotThumb() || this.currentPhotoObjectThumb == null)) {
                tLRPC$PhotoSize = this.currentPhotoObject;
                str = ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || "s".equals(tLRPC$PhotoSize.type)) ? this.currentPhotoFilterThumb : this.currentPhotoFilter;
            } else {
                tLRPC$PhotoSize = this.currentPhotoObjectThumb;
                str = this.currentPhotoFilterThumb;
            }
            String str2 = str;
            MessageObject messageObject6 = this.currentMessageObject;
            int i4 = messageObject6.type;
            if (i4 == 1 || i4 == 20) {
                this.photoImage.setForceLoading(true);
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                String str3 = this.currentPhotoFilter;
                ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject);
                String str4 = this.currentPhotoFilterThumb;
                BitmapDrawable bitmapDrawable = this.currentPhotoObjectThumbStripped;
                long j = this.currentPhotoObject.size;
                MessageObject messageObject7 = this.currentMessageObject;
                imageReceiver.setImage(forObject, str3, forObject2, str4, bitmapDrawable, j, null, messageObject7, messageObject7.shouldEncryptPhotoOrVideo() ? 2 : 0);
            } else if (i4 == 8) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else if (this.isRoundVideo) {
                if (messageObject6.isSecretMedia()) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.currentMessageObject.getDocument(), this.currentMessageObject, 2, 1);
                } else {
                    MessageObject messageObject8 = this.currentMessageObject;
                    messageObject8.gifState = 2.0f;
                    TLRPC$Document document = messageObject8.getDocument();
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(document), null, ImageLocation.getForObject(tLRPC$PhotoSize, document), str2, document.size, null, this.currentMessageObject, 0);
                }
                this.wouldBeInPip = true;
                invalidate();
            } else if (i4 == 9) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                if (this.currentMessageObject.loadedFileSize > 0) {
                    createLoadingProgressLayout(this.documentAttach);
                }
            } else {
                int i5 = this.documentAttachType;
                if (i5 == 4) {
                    FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                    TLRPC$Document tLRPC$Document = this.documentAttach;
                    MessageObject messageObject9 = this.currentMessageObject;
                    if (!messageObject9.shouldEncryptPhotoOrVideo()) {
                        i2 = 0;
                    }
                    fileLoader.loadFile(tLRPC$Document, messageObject9, 1, i2);
                    MessageObject messageObject10 = this.currentMessageObject;
                    if (messageObject10.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject10.getDocument());
                    }
                } else if (i4 != 0 || i5 == 0) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, 0);
                } else if (i5 == 2) {
                    this.photoImage.setForceLoading(true);
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), this.currentPhotoFilterThumb, this.documentAttach.size, null, this.currentMessageObject, 0);
                    MessageObject messageObject11 = this.currentMessageObject;
                    messageObject11.gifState = 2.0f;
                    if (messageObject11.loadedFileSize > 0) {
                        createLoadingProgressLayout(messageObject11.getDocument());
                    }
                } else if (i5 == 1) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                } else if (i5 == 8) {
                    this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", 0L, "jpg", this.currentMessageObject, 1);
                }
            }
            this.currentMessageObject.loadingCancelled = false;
            this.buttonState = 1;
            if (z2) {
                this.videoRadialProgress.setIcon(14, false, z);
            } else {
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
            }
            invalidate();
        } else if (i == 1 && (!this.drawVideoImageButton || z2)) {
            this.photoImage.setForceLoading(false);
            int i6 = this.documentAttachType;
            if (i6 == 3 || i6 == 5 || (i6 == 7 && (messageObject3 = this.currentMessageObject) != null && messageObject3.isVoiceTranscriptionOpen())) {
                if (!MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject)) {
                    return;
                }
                this.buttonState = 0;
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                invalidate();
            } else if (this.currentMessageObject.isOut() && !this.drawVideoImageButton && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) {
                if (this.radialProgress.getIcon() == 6) {
                    return;
                }
                this.delegate.didPressCancelSendButton(this);
            } else {
                MessageObject messageObject12 = this.currentMessageObject;
                messageObject12.loadingCancelled = true;
                int i7 = this.documentAttachType;
                if (i7 == 2 || i7 == 4 || i7 == 1 || i7 == 8) {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                } else {
                    int i8 = messageObject12.type;
                    if (i8 == 0 || i8 == 1 || i8 == 20 || i8 == 8 || i8 == 5) {
                        ImageLoader.getInstance().cancelForceLoadingForImageReceiver(this.photoImage);
                        this.photoImage.cancelLoadImage();
                    } else if (i8 == 9) {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
                    }
                }
                this.buttonState = 0;
                if (z2) {
                    this.videoRadialProgress.setIcon(2, false, z);
                } else {
                    this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                }
                invalidate();
            }
        } else if (i != 2) {
            if (i == 3 || i == 0) {
                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                    this.miniButtonState = 1;
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, z);
                }
                this.delegate.didPressImage(this, 0.0f, 0.0f);
            } else if (i != 4) {
            } else {
                int i9 = this.documentAttachType;
                if (i9 != 3 && i9 != 5 && (i9 != 7 || (messageObject = this.currentMessageObject) == null || !messageObject.isVoiceTranscriptionOpen())) {
                    return;
                }
                if ((this.currentMessageObject.isOut() && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) || this.currentMessageObject.isSendError()) {
                    if (this.delegate == null || this.radialProgress.getIcon() == 6) {
                        return;
                    }
                    this.delegate.didPressCancelSendButton(this);
                    return;
                }
                this.currentMessageObject.loadingCancelled = true;
                FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                this.buttonState = 2;
                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                invalidate();
            }
        } else if (this.documentAttachType == 7 && (messageObject2 = this.currentMessageObject) != null && messageObject2.isVoiceTranscriptionOpen()) {
            if (this.miniButtonState == 0) {
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                this.currentMessageObject.loadingCancelled = false;
            }
            if (this.delegate.needPlayMessage(this.currentMessageObject, false)) {
                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                    this.miniButtonState = 1;
                    this.radialProgress.setProgress(0.0f, false);
                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                }
                updatePlayingMessageProgress();
                this.buttonState = 1;
                this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                invalidate();
            }
            if (!this.isRoundVideo) {
                return;
            }
            this.wouldBeInPip = true;
            invalidate();
        } else {
            int i10 = this.documentAttachType;
            if (i10 == 3 || i10 == 5) {
                this.radialProgress.setProgress(0.0f, false);
                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                this.currentMessageObject.loadingCancelled = false;
                this.buttonState = 4;
                this.radialProgress.setIcon(getIconForCurrentState(), true, z);
                invalidate();
                return;
            }
            if (this.isRoundVideo) {
                MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject == null || !playingMessageObject.isRoundVideo()) {
                    this.photoImage.setAllowStartAnimation(true);
                    this.photoImage.startAnimation();
                }
            } else {
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
            }
            this.currentMessageObject.gifState = 0.0f;
            this.buttonState = -1;
            this.radialProgress.setIcon(getIconForCurrentState(), false, z);
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onFailedDownload(String str, boolean z) {
        int i = this.documentAttachType;
        updateButtonState(true, i == 3 || i == 5, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:40:0x00b8, code lost:
        if ((r7 & 2) != 0) goto L41;
     */
    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onSuccessDownload(String str) {
        TLRPC$Document tLRPC$Document;
        if (this.documentAttachType == 6 && this.currentMessageObject.isDice()) {
            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
            setCurrentDiceValue(true);
            return;
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            updateButtonState(false, true, false);
            updateWaveform();
            return;
        }
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(1.0f, true);
        } else {
            this.radialProgress.setProgress(1.0f, true);
        }
        if (!this.currentMessageObject.needDrawBluredPreview() && !this.autoPlayingMedia && (tLRPC$Document = this.documentAttach) != null) {
            int i2 = this.documentAttachType;
            if (i2 == 7) {
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forDocument = ImageLocation.getForDocument(tLRPC$Document);
                ImageLocation forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                TLRPC$PhotoSize tLRPC$PhotoSize = this.currentPhotoObject;
                imageReceiver.setImage(forDocument, ImageLoader.AUTOPLAY_FILTER, forObject, ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize != null && "s".equals(tLRPC$PhotoSize.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
                this.autoPlayingMedia = true;
            } else {
                if (SharedConfig.autoplayVideo && i2 == 4) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null) {
                        int i3 = groupedMessagePosition.flags;
                        if ((i3 & 1) != 0) {
                        }
                    }
                    this.animatingNoSound = 2;
                    ImageReceiver imageReceiver2 = this.photoImage;
                    ImageLocation forDocument2 = ImageLocation.getForDocument(tLRPC$Document);
                    ImageLocation forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize2 = this.currentPhotoObject;
                    imageReceiver2.setImage(forDocument2, ImageLoader.AUTOPLAY_FILTER, forObject2, ((tLRPC$PhotoSize2 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize2 != null && "s".equals(tLRPC$PhotoSize2.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (!PhotoViewer.isPlayingMessage(this.currentMessageObject)) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                    }
                    this.autoPlayingMedia = true;
                }
                if (i2 == 2) {
                    ImageReceiver imageReceiver3 = this.photoImage;
                    ImageLocation forDocument3 = ImageLocation.getForDocument(tLRPC$Document);
                    ImageLocation forObject3 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                    TLRPC$PhotoSize tLRPC$PhotoSize3 = this.currentPhotoObject;
                    imageReceiver3.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forObject3, ((tLRPC$PhotoSize3 instanceof TLRPC$TL_photoStrippedSize) || (tLRPC$PhotoSize3 != null && "s".equals(tLRPC$PhotoSize3.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (SharedConfig.autoplayGifs) {
                        this.photoImage.setAllowStartAnimation(true);
                        this.photoImage.startAnimation();
                    } else {
                        this.photoImage.setAllowStartAnimation(false);
                        this.photoImage.stopAnimation();
                    }
                    this.autoPlayingMedia = true;
                }
            }
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type == 0) {
            if (!this.autoPlayingMedia && this.documentAttachType == 2 && messageObject.gifState != 1.0f) {
                this.buttonState = 2;
                didPressButton(true, false);
                return;
            } else if (!this.photoNotSet) {
                updateButtonState(false, true, false);
                return;
            } else {
                setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
                return;
            }
        }
        if (!this.photoNotSet) {
            updateButtonState(false, true, false);
        }
        if (!this.photoNotSet) {
            return;
        }
        setMessageObject(this.currentMessageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    /* JADX WARN: Code restructure failed: missing block: B:17:0x0024, code lost:
        if (r8.mediaExists == false) goto L18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x003f, code lost:
        if (r0 == 6) goto L18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x0041, code lost:
        if (r8 == 1) goto L18;
     */
    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && z) {
            if (setCurrentDiceValue(!z3 && !messageObject.wasUnread)) {
                return;
            }
            if (z2) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type == 20) {
                }
            }
            if (!z2) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (!messageObject3.mediaExists) {
                    if (!messageObject3.attachPathExists) {
                        int i = messageObject3.type;
                        if (i == 0) {
                            int i2 = this.documentAttachType;
                            if (i2 != 8) {
                                if (i2 != 0) {
                                }
                            }
                            this.currentMessageObject.mediaExists = true;
                            updateButtonState(false, true, false);
                        }
                    }
                }
            }
        }
        if (!z || z2 || this.currentMessageObject == null) {
            return;
        }
        if (this.blurredPhotoImage.getBitmap() != null) {
            this.blurredPhotoImage.getBitmap().recycle();
            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
        }
        if (!this.currentMessageObject.hasMediaSpoilers() || imageReceiver.getBitmap() == null || imageReceiver.getBitmap().isRecycled()) {
            return;
        }
        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapWithScaleFactor(imageReceiver.getBitmap(), 5.0f));
    }

    public boolean setCurrentDiceValue(boolean z) {
        MessagesController.DiceFrameSuccess diceFrameSuccess;
        if (this.currentMessageObject.isDice()) {
            Drawable drawable = this.photoImage.getDrawable();
            if (drawable instanceof RLottieDrawable) {
                RLottieDrawable rLottieDrawable = (RLottieDrawable) drawable;
                String diceEmoji = this.currentMessageObject.getDiceEmoji();
                TLRPC$TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
                if (stickerSetByEmojiOrName != null) {
                    int diceValue = this.currentMessageObject.getDiceValue();
                    if ("🎰".equals(this.currentMessageObject.getDiceEmoji())) {
                        if (diceValue >= 0 && diceValue <= 64) {
                            ((SlotsDrawable) rLottieDrawable).setDiceNumber(this, diceValue, stickerSetByEmojiOrName, z);
                            if (this.currentMessageObject.isOut()) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, ConnectionsManager.DEFAULT_DATACENTER_ID);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            ((SlotsDrawable) rLottieDrawable).setBaseDice(this, stickerSetByEmojiOrName);
                        }
                    } else {
                        if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                            TLRPC$Document tLRPC$Document = stickerSetByEmojiOrName.documents.get(0);
                            if (rLottieDrawable.setBaseDice(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document, true))) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document, stickerSetByEmojiOrName, 1, 1);
                            }
                        }
                        if (diceValue >= 0 && diceValue < stickerSetByEmojiOrName.documents.size()) {
                            if (!z && this.currentMessageObject.isOut() && (diceFrameSuccess = MessagesController.getInstance(this.currentAccount).diceSuccess.get(diceEmoji)) != null && diceFrameSuccess.num == diceValue) {
                                rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, diceFrameSuccess.frame);
                            }
                            TLRPC$Document tLRPC$Document2 = stickerSetByEmojiOrName.documents.get(Math.max(diceValue, 0));
                            if (rLottieDrawable.setDiceNumber(FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$Document2, true), z)) {
                                DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                            } else {
                                DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(tLRPC$Document2), this.currentMessageObject, this);
                                FileLoader.getInstance(this.currentAccount).loadFile(tLRPC$Document2, stickerSetByEmojiOrName, 1, 1);
                            }
                            this.currentMessageObject.wasUnread = false;
                        }
                    }
                } else {
                    MediaDataController.getInstance(this.currentAccount).loadStickersByEmojiOrName(diceEmoji, true, true);
                }
            }
            return true;
        }
        return false;
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public void onAnimationReady(ImageReceiver imageReceiver) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || imageReceiver != this.photoImage || !messageObject.isAnimatedSticker()) {
            return;
        }
        this.delegate.setShouldNotRepeatSticker(this.currentMessageObject);
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressDownload(String str, long j, long j2) {
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        createLoadingProgressLayout(j, j2);
        if (this.drawVideoImageButton) {
            this.videoRadialProgress.setProgress(min, true);
        } else {
            this.radialProgress.setProgress(min, true);
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            if (this.hasMiniProgress != 0) {
                if (this.miniButtonState == 1) {
                    return;
                }
                updateButtonState(false, false, false);
            } else if (this.buttonState == 4) {
            } else {
                updateButtonState(false, false, false);
            }
        } else if (this.hasMiniProgress != 0) {
            if (this.miniButtonState == 1) {
                return;
            }
            updateButtonState(false, false, false);
        } else if (this.buttonState == 1) {
        } else {
            updateButtonState(false, false, false);
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressUpload(String str, long j, long j2, boolean z) {
        int i;
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, ((float) j) / ((float) j2));
        this.currentMessageObject.loadedFileSize = j;
        this.radialProgress.setProgress(min, true);
        if (j == j2 && this.currentPosition != null && SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId()) && ((i = this.buttonState) == 1 || (i == 4 && this.documentAttachType == 5))) {
            this.drawRadialCheckBackground = true;
            getIconForCurrentState();
            this.radialProgress.setIcon(6, false, true);
        }
        createLoadingProgressLayout(j, j2);
    }

    private void createLoadingProgressLayout(TLRPC$Document tLRPC$Document) {
        if (tLRPC$Document == null) {
            return;
        }
        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(FileLoader.getDocumentFileName(tLRPC$Document));
        if (fileProgressSizes != null) {
            createLoadingProgressLayout(fileProgressSizes[0], fileProgressSizes[1]);
        } else {
            createLoadingProgressLayout(this.currentMessageObject.loadedFileSize, tLRPC$Document.size);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:11:0x004b  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x006a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createLoadingProgressLayout(long j, long j2) {
        boolean z;
        String format;
        int ceil;
        String str;
        int i;
        long j3 = j2;
        if (j3 <= 0 || this.documentAttach == null) {
            this.loadingProgressLayout = null;
            return;
        }
        long j4 = this.lastLoadingSizeTotal;
        if (j4 == 0) {
            this.lastLoadingSizeTotal = j3;
        } else if (j > j4) {
            j3 = j4;
            String formatFileSize = AndroidUtilities.formatFileSize(j3);
            int ceil2 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize)));
            String str2 = "100%";
            if (this.documentAttachType != 1) {
                format = ceil2 <= Math.max(this.infoWidth, this.docTitleWidth) ? String.format("%s / %s", AndroidUtilities.formatFileSize(j4), formatFileSize) : AndroidUtilities.formatFileSize(j4);
                z = true;
            } else {
                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                z = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                if (!z) {
                    int min = (int) (Math.min(1.0f, ((float) j4) / ((float) j3)) * 100.0f);
                    format = min >= 100 ? str2 : String.format(Locale.US, "%2d%%", Integer.valueOf(min));
                } else {
                    format = String.format("%s / %s", AndroidUtilities.formatFileSize(j4), formatFileSize);
                }
            }
            ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
            if (z || ceil <= this.backgroundWidth - AndroidUtilities.dp(48.0f)) {
                str = format;
                i = ceil;
            } else {
                int min2 = (int) (Math.min(1.0f, ((float) j4) / ((float) j3)) * 100.0f);
                if (min2 < 100) {
                    str2 = String.format(Locale.US, "%2d%%", Integer.valueOf(min2));
                }
                i = (int) Math.ceil(Theme.chat_infoPaint.measureText(str2));
                str = str2;
            }
            this.loadingProgressLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        } else {
            j3 = j4;
        }
        j4 = j;
        String formatFileSize2 = AndroidUtilities.formatFileSize(j3);
        int ceil22 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize2)));
        String str22 = "100%";
        if (this.documentAttachType != 1) {
        }
        ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
        if (z) {
        }
        str = format;
        i = ceil;
        this.loadingProgressLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
    }

    @Override // android.view.View
    public void onProvideStructure(ViewStructure viewStructure) {
        super.onProvideStructure(viewStructure);
        if (!this.allowAssistant || Build.VERSION.SDK_INT < 23) {
            return;
        }
        CharSequence charSequence = this.currentMessageObject.messageText;
        if (charSequence != null && charSequence.length() > 0) {
            viewStructure.setText(this.currentMessageObject.messageText);
            return;
        }
        CharSequence charSequence2 = this.currentMessageObject.caption;
        if (charSequence2 == null || charSequence2.length() <= 0) {
            return;
        }
        viewStructure.setText(this.currentMessageObject.caption);
    }

    public void setDelegate(ChatMessageCellDelegate chatMessageCellDelegate) {
        this.delegate = chatMessageCellDelegate;
    }

    public ChatMessageCellDelegate getDelegate() {
        return this.delegate;
    }

    public void setAllowAssistant(boolean z) {
        this.allowAssistant = z;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:114:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:116:0x0306  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x021e  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x0214  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x00c5  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x01e4  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x021c  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0236  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0256  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x02ad  */
    /* JADX WARN: Removed duplicated region for block: B:6:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x030c  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0371  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0387  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x03d2  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void measureTime(MessageObject messageObject) {
        TLRPC$User user;
        String replace;
        String str;
        String str2;
        CharSequence charSequence;
        int ceil;
        MessageObject messageObject2;
        TLRPC$Message tLRPC$Message;
        String str3;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        int dp;
        String format;
        Locale locale;
        String format2;
        TLRPC$Message tLRPC$Message2;
        MessageObject.GroupedMessages groupedMessages;
        long fromChatId = messageObject.getFromChatId();
        CharSequence charSequence2 = "";
        if (!messageObject.scheduled) {
            TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
            if (tLRPC$Message3.post_author != null) {
                if (!this.isMegagroup || messageObject.getFromChatId() != messageObject.getDialogId()) {
                    replace = messageObject.messageOwner.post_author.replace("\n", charSequence2);
                }
            } else {
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message3.fwd_from;
                if (tLRPC$MessageFwdHeader != null && (str = tLRPC$MessageFwdHeader.post_author) != null) {
                    replace = str.replace("\n", charSequence2);
                } else if (tLRPC$MessageFwdHeader != null && tLRPC$MessageFwdHeader.imported) {
                    replace = tLRPC$MessageFwdHeader.date == tLRPC$Message3.date ? LocaleController.getString("ImportedMessage", R.string.ImportedMessage) : LocaleController.formatImportedDate(messageObject.messageOwner.fwd_from.date) + " " + LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
                } else if (!messageObject.isOutOwner() && fromChatId > 0 && messageObject.messageOwner.post && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId))) != null) {
                    replace = ContactsController.formatName(user.first_name, user.last_name).replace('\n', ' ');
                }
            }
            TLRPC$User user2 = !this.currentMessageObject.isFromUser() ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId)) : null;
            boolean hasReplies = messageObject.hasReplies();
            int i = 0;
            if (!messageObject.scheduled && !messageObject.isLiveLocation() && !messageObject.messageOwner.edit_hide && messageObject.getDialogId() != 777000) {
                tLRPC$Message2 = messageObject.messageOwner;
                if (tLRPC$Message2.via_bot_id == 0 && tLRPC$Message2.via_bot_name == null && (user2 == null || !user2.bot)) {
                    if (this.currentPosition != null || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.isEmpty()) {
                        this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                    } else {
                        this.edited = false;
                        hasReplies = this.currentMessagesGroup.messages.get(0).hasReplies();
                        if (!this.currentMessagesGroup.messages.get(0).messageOwner.edit_hide) {
                            int size = this.currentMessagesGroup.messages.size();
                            for (int i2 = 0; i2 < size; i2++) {
                                MessageObject messageObject3 = this.currentMessagesGroup.messages.get(i2);
                                if ((messageObject3.messageOwner.flags & 32768) != 0 || messageObject3.isEditing()) {
                                    this.edited = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!this.currentMessageObject.isSponsored()) {
                        if (this.currentMessageObject.sponsoredRecommended) {
                            str2 = LocaleController.getString("SponsoredMessageRecommended", R.string.SponsoredMessageRecommended);
                        } else {
                            str2 = LocaleController.getString("SponsoredMessage", R.string.SponsoredMessage);
                        }
                    } else {
                        MessageObject messageObject4 = this.currentMessageObject;
                        if (messageObject4.scheduled && messageObject4.messageOwner.date == 2147483646) {
                            str2 = charSequence2;
                        } else if (this.edited) {
                            str2 = LocaleController.getString("EditedMessage", R.string.EditedMessage) + " " + LocaleController.getInstance().formatterDay.format(messageObject.messageOwner.date * 1000);
                        } else {
                            str2 = LocaleController.getInstance().formatterDay.format(messageObject.messageOwner.date * 1000);
                        }
                    }
                    if (replace == null) {
                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject.messageOwner.fwd_from;
                        if (tLRPC$MessageFwdHeader2 != null && tLRPC$MessageFwdHeader2.imported) {
                            this.currentTimeString = " " + str2;
                        } else {
                            this.currentTimeString = ", " + str2;
                        }
                    } else {
                        this.currentTimeString = str2;
                    }
                    TextPaint textPaint = Theme.chat_timePaint;
                    ceil = (int) Math.ceil(textPaint.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                    this.timeWidth = ceil;
                    this.timeTextWidth = ceil;
                    messageObject2 = this.currentMessageObject;
                    if (messageObject2.scheduled && messageObject2.messageOwner.date == 2147483646) {
                        this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
                    }
                    tLRPC$Message = messageObject.messageOwner;
                    if ((tLRPC$Message.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
                        this.currentViewsString = String.format("%s", LocaleController.formatShortNumber(Math.max(1, tLRPC$Message.views), null));
                        this.viewsTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(format2));
                        this.timeWidth = (int) (this.timeWidth + this.viewsTextWidth + ((Theme.chat_msgInViewsDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInViewsDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                    }
                    if (messageObject.type != 20) {
                        int i3 = R.string.PaymentCheckoutPay;
                        LocaleController localeController = LocaleController.getInstance();
                        TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                        str3 = "%s";
                        String formatString = LocaleController.formatString(i3, localeController.formatCurrencyString(tLRPC$MessageMedia.total_amount, tLRPC$MessageMedia.currency).toUpperCase(Locale.ROOT));
                        if (formatString.length() >= 2) {
                            formatString = formatString.substring(0, 1).toUpperCase(locale) + formatString.substring(1).toLowerCase(locale);
                        }
                        this.currentUnlockString = formatString;
                        this.unlockTextWidth = (int) Math.ceil(Theme.chat_unlockExtendedMediaTextPaint.measureText(formatString));
                    } else {
                        str3 = "%s";
                    }
                    if (!this.isChat && this.isMegagroup && !this.isThreadChat && hasReplies) {
                        this.currentRepliesString = String.format(str3, LocaleController.formatShortNumber(getRepliesCount(), null));
                        this.repliesTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(format));
                        this.timeWidth = (int) (this.timeWidth + this.repliesTextWidth + ((Theme.chat_msgInRepliesDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInRepliesDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                    } else {
                        this.currentRepliesString = null;
                    }
                    if (this.isPinned) {
                        this.timeWidth += Theme.chat_msgInPinnedDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3.0f);
                    }
                    if (messageObject.scheduled) {
                        if (messageObject.isSendError()) {
                            this.timeWidth += AndroidUtilities.dp(18.0f);
                        } else if (messageObject.isSending() && messageObject.messageOwner.peer_id.channel_id != 0 && !messageObject.isSupergroup()) {
                            this.timeWidth += AndroidUtilities.dp(18.0f);
                        }
                    }
                    reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble.isSmall) {
                        reactionsLayoutInBubble.measure(ConnectionsManager.DEFAULT_DATACENTER_ID, 3);
                        this.timeWidth += this.reactionsLayoutInBubble.width;
                    }
                    if (replace != null) {
                        return;
                    }
                    if (this.availableTimeWidth == 0) {
                        this.availableTimeWidth = AndroidUtilities.dp(1000.0f);
                    }
                    int i4 = this.availableTimeWidth - this.timeWidth;
                    if (messageObject.isOutOwner()) {
                        if (messageObject.type == 5) {
                            dp = AndroidUtilities.dp(20.0f);
                        } else {
                            dp = AndroidUtilities.dp(96.0f);
                        }
                        i4 -= dp;
                    }
                    CharSequence replaceEmoji = Emoji.replaceEmoji(replace, Theme.chat_timePaint.getFontMetricsInt(), AndroidUtilities.dp(10.0f), false);
                    int ceil2 = (int) Math.ceil(Theme.chat_timePaint.measureText(replaceEmoji, 0, replaceEmoji.length()));
                    if (ceil2 <= i4) {
                        charSequence2 = replaceEmoji;
                        i = ceil2;
                    } else if (i4 > 0) {
                        charSequence2 = TextUtils.ellipsize(replaceEmoji, Theme.chat_timePaint, i4, TextUtils.TruncateAt.END);
                        i = i4;
                    }
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence2);
                    spannableStringBuilder.append(this.currentTimeString);
                    this.currentTimeString = spannableStringBuilder;
                    this.timeTextWidth += i;
                    this.timeWidth += i;
                    return;
                }
            }
            this.edited = false;
            if (!this.currentMessageObject.isSponsored()) {
            }
            if (replace == null) {
            }
            TextPaint textPaint2 = Theme.chat_timePaint;
            ceil = (int) Math.ceil(textPaint2.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
            this.timeWidth = ceil;
            this.timeTextWidth = ceil;
            messageObject2 = this.currentMessageObject;
            if (messageObject2.scheduled) {
                this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
            }
            tLRPC$Message = messageObject.messageOwner;
            if ((tLRPC$Message.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
            }
            if (messageObject.type != 20) {
            }
            if (!this.isChat) {
            }
            this.currentRepliesString = null;
            if (this.isPinned) {
            }
            if (messageObject.scheduled) {
            }
            reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble.isSmall) {
            }
            if (replace != null) {
            }
        }
        replace = null;
        if (!this.currentMessageObject.isFromUser()) {
        }
        boolean hasReplies2 = messageObject.hasReplies();
        int i5 = 0;
        if (!messageObject.scheduled) {
            tLRPC$Message2 = messageObject.messageOwner;
            if (tLRPC$Message2.via_bot_id == 0) {
                if (this.currentPosition != null) {
                }
                this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                if (!this.currentMessageObject.isSponsored()) {
                }
                if (replace == null) {
                }
                TextPaint textPaint22 = Theme.chat_timePaint;
                ceil = (int) Math.ceil(textPaint22.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
                this.timeWidth = ceil;
                this.timeTextWidth = ceil;
                messageObject2 = this.currentMessageObject;
                if (messageObject2.scheduled) {
                }
                tLRPC$Message = messageObject.messageOwner;
                if ((tLRPC$Message.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
                }
                if (messageObject.type != 20) {
                }
                if (!this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isSmall) {
                }
                if (replace != null) {
                }
            }
        }
        this.edited = false;
        if (!this.currentMessageObject.isSponsored()) {
        }
        if (replace == null) {
        }
        TextPaint textPaint222 = Theme.chat_timePaint;
        ceil = (int) Math.ceil(textPaint222.measureText(charSequence, 0, this.currentTimeString != null ? 0 : charSequence.length()));
        this.timeWidth = ceil;
        this.timeTextWidth = ceil;
        messageObject2 = this.currentMessageObject;
        if (messageObject2.scheduled) {
        }
        tLRPC$Message = messageObject.messageOwner;
        if ((tLRPC$Message.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
        }
        if (messageObject.type != 20) {
        }
        if (!this.isChat) {
        }
        this.currentRepliesString = null;
        if (this.isPinned) {
        }
        if (messageObject.scheduled) {
        }
        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
        }
        if (replace != null) {
        }
    }

    private boolean shouldDrawSelectionOverlay() {
        return hasSelectionOverlay() && ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted || this.isHighlightedAnimated)) && !textIsSelectionMode() && ((this.currentMessagesGroup == null || this.drawSelectionBackground) && this.currentBackgroundDrawable != null);
    }

    private Integer getSelectionOverlayColor() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider == null) {
            return null;
        }
        MessageObject messageObject = this.currentMessageObject;
        return resourcesProvider.getColor((messageObject == null || !messageObject.isOut()) ? "chat_inBubbleSelectedOverlay" : "chat_outBubbleSelectedOverlay");
    }

    private boolean hasSelectionOverlay() {
        Integer selectionOverlayColor = getSelectionOverlayColor();
        return (selectionOverlayColor == null || selectionOverlayColor.intValue() == -65536) ? false : true;
    }

    private boolean isDrawSelectionBackground() {
        return ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted)) && !textIsSelectionMode() && !hasSelectionOverlay();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isOpenChatByShare(MessageObject messageObject) {
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
        return (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.saved_from_peer == null) ? false : true;
    }

    private boolean checkNeedDrawShareButton(MessageObject messageObject) {
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.deleted || messageObject2.isSponsored()) {
            return false;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && !this.currentMessagesGroup.isDocuments && !groupedMessagePosition.last) {
            return false;
        }
        return messageObject.needDrawShareButton();
    }

    public boolean isInsideBackground(float f, float f2) {
        if (this.currentBackgroundDrawable != null) {
            int i = this.backgroundDrawableLeft;
            if (f >= i && f <= i + this.backgroundDrawableRight) {
                return true;
            }
        }
        return false;
    }

    private void updateCurrentUserAndChat() {
        TLRPC$Peer tLRPC$Peer;
        MessageObject messageObject;
        if (this.currentMessageObject == null) {
            return;
        }
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerChannel) && this.currentMessageObject.getDialogId() == clientUserId) {
            this.currentChat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(tLRPC$MessageFwdHeader.from_id.channel_id));
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer) != null) {
            long j = tLRPC$Peer.user_id;
            if (j != 0) {
                TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                    this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer2.user_id));
                } else {
                    this.currentUser = messagesController.getUser(Long.valueOf(j));
                }
            } else if (tLRPC$Peer.channel_id != 0) {
                if (this.currentMessageObject.isSavedFromMegagroup()) {
                    TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer3.user_id));
                    }
                }
                this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$MessageFwdHeader.saved_from_peer.channel_id));
            } else {
                long j2 = tLRPC$Peer.chat_id;
                if (j2 != 0) {
                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                        this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$Peer4.user_id));
                    } else {
                        this.currentChat = messagesController.getChat(Long.valueOf(j2));
                    }
                }
            }
        } else if (tLRPC$MessageFwdHeader != null && (tLRPC$MessageFwdHeader.from_id instanceof TLRPC$TL_peerUser) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            this.currentUser = messagesController.getUser(Long.valueOf(tLRPC$MessageFwdHeader.from_id.user_id));
        } else if (tLRPC$MessageFwdHeader != null && !TextUtils.isEmpty(tLRPC$MessageFwdHeader.from_name) && (tLRPC$MessageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
            TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
            this.currentUser = tLRPC$TL_user;
            tLRPC$TL_user.first_name = tLRPC$MessageFwdHeader.from_name;
        } else {
            long fromChatId = this.currentMessageObject.getFromChatId();
            if (DialogObject.isUserDialog(fromChatId) && !this.currentMessageObject.messageOwner.post) {
                this.currentUser = messagesController.getUser(Long.valueOf(fromChatId));
            } else if (DialogObject.isChatDialog(fromChatId)) {
                this.currentChat = messagesController.getChat(Long.valueOf(-fromChatId));
            } else {
                TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                if (tLRPC$Message.post) {
                    this.currentChat = messagesController.getChat(Long.valueOf(tLRPC$Message.peer_id.channel_id));
                }
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 != null && messageObject2.getChatId() != 0) {
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3.messageOwner != null && (messageObject = messageObject3.replyMessageObject) != null && messageObject.isFromUser()) {
                this.currentReplyUserId = this.currentMessageObject.replyMessageObject.messageOwner.from_id.user_id;
                return;
            }
        }
        this.currentReplyUserId = 0L;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(28:21|(1:23)|24|(1:526)(2:30|(23:32|33|34|(1:36)(1:(1:494)(1:495))|37|(1:39)(1:492)|40|(7:42|(1:44)|45|(1:47)(3:53|(1:55)(1:57)|56)|48|(1:50)(1:52)|51)|58|59|60|61|62|(3:64|(1:66)|67)(1:487)|68|(1:70)|(1:72)(1:486)|73|(1:75)|76|(1:78)(2:480|(1:482)(2:483|(1:485)))|79|(1:81)))|496|(24:503|(4:516|(1:518)(1:525)|519|(3:521|(1:523)|524))|507|34|(0)(0)|37|(0)(0)|40|(0)|58|59|60|61|62|(0)(0)|68|(0)|(0)(0)|73|(0)|76|(0)(0)|79|(0))(1:502)|33|34|(0)(0)|37|(0)(0)|40|(0)|58|59|60|61|62|(0)(0)|68|(0)|(0)(0)|73|(0)|76|(0)(0)|79|(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:461:0x07c1, code lost:
        if ((r0.action instanceof org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate) == false) goto L462;
     */
    /* JADX WARN: Code restructure failed: missing block: B:488:0x03b7, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:489:0x03b8, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x01f0  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0216  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0224  */
    /* JADX WARN: Removed duplicated region for block: B:480:0x03d8  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x03b3 A[Catch: Exception -> 0x03b7, TRY_LEAVE, TryCatch #5 {Exception -> 0x03b7, blocks: (B:62:0x031a, B:64:0x033d, B:66:0x0353, B:67:0x0368, B:68:0x0375, B:70:0x0379, B:72:0x0386, B:486:0x03b3, B:487:0x0371), top: B:61:0x031a }] */
    /* JADX WARN: Removed duplicated region for block: B:487:0x0371 A[Catch: Exception -> 0x03b7, TryCatch #5 {Exception -> 0x03b7, blocks: (B:62:0x031a, B:64:0x033d, B:66:0x0353, B:67:0x0368, B:68:0x0375, B:70:0x0379, B:72:0x0386, B:486:0x03b3, B:487:0x0371), top: B:61:0x031a }] */
    /* JADX WARN: Removed duplicated region for block: B:492:0x0219  */
    /* JADX WARN: Removed duplicated region for block: B:493:0x01f3  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x033d A[Catch: Exception -> 0x03b7, TryCatch #5 {Exception -> 0x03b7, blocks: (B:62:0x031a, B:64:0x033d, B:66:0x0353, B:67:0x0368, B:68:0x0375, B:70:0x0379, B:72:0x0386, B:486:0x03b3, B:487:0x0371), top: B:61:0x031a }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0379 A[Catch: Exception -> 0x03b7, TryCatch #5 {Exception -> 0x03b7, blocks: (B:62:0x031a, B:64:0x033d, B:66:0x0353, B:67:0x0368, B:68:0x0375, B:70:0x0379, B:72:0x0386, B:486:0x03b3, B:487:0x0371), top: B:61:0x031a }] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0386 A[Catch: Exception -> 0x03b7, TryCatch #5 {Exception -> 0x03b7, blocks: (B:62:0x031a, B:64:0x033d, B:66:0x0353, B:67:0x0368, B:68:0x0375, B:70:0x0379, B:72:0x0386, B:486:0x03b3, B:487:0x0371), top: B:61:0x031a }] */
    /* JADX WARN: Removed duplicated region for block: B:75:0x03bf  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x03d1  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x03fc  */
    /* JADX WARN: Type inference failed for: r0v18, types: [android.text.StaticLayout[]] */
    /* JADX WARN: Type inference failed for: r15v0, types: [java.lang.CharSequence, java.lang.String] */
    /* JADX WARN: Type inference failed for: r15v1, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r15v3 */
    /* JADX WARN: Type inference failed for: r15v4, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r15v5, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v149 */
    /* JADX WARN: Type inference failed for: r4v191, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r4v193 */
    /* JADX WARN: Type inference failed for: r4v2, types: [org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$User, java.lang.String] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageObjectInternal(MessageObject messageObject) {
        String str;
        SpannableStringBuilder replaceTags;
        String str2;
        ?? r4;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i;
        int i2;
        String str3;
        CharSequence charSequence;
        CharSequence charSequence2;
        MessageObject messageObject2;
        TLRPC$Message tLRPC$Message;
        int i3;
        CharSequence charSequence3;
        String str4;
        int i4;
        TextStyleSpan[] textStyleSpanArr;
        MessageTopicButton messageTopicButton;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int dp;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        String charSequence4;
        SpannableStringBuilder spannableStringBuilder;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        String adminRank;
        int ceil;
        Object obj;
        String str5;
        String str6;
        Object obj2;
        StaticLayout staticLayout;
        int themedColor;
        SpannableStringBuilder spannableStringBuilder2;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
        if ((tLRPC$Message2.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0 || tLRPC$Message2.replies != null) {
            MessageObject messageObject3 = this.currentMessageObject;
            if (!messageObject3.scheduled && !messageObject3.isSponsored() && !this.currentMessageObject.viewsReloaded) {
                MessagesController.getInstance(this.currentAccount).addToViewsQueue(this.currentMessageObject);
                this.currentMessageObject.viewsReloaded = true;
            }
        }
        updateCurrentUserAndChat();
        setAvatar(messageObject);
        measureTime(messageObject);
        this.namesOffset = 0;
        TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
        if (tLRPC$Message3.via_bot_id != 0) {
            TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.via_bot_id));
            if (user != null && !TextUtils.isEmpty(user.username)) {
                str = "@" + user.username;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
                this.currentViaBotUser = user;
            }
            str = null;
            replaceTags = null;
        } else {
            if (!TextUtils.isEmpty(tLRPC$Message3.via_bot_name)) {
                str = "@" + messageObject.messageOwner.via_bot_name;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
            }
            str = null;
            replaceTags = null;
        }
        boolean isNeedAuthorName = isNeedAuthorName();
        boolean z = (messageObject.messageOwner.fwd_from == null || messageObject.type == 14) && str != null;
        ?? r15 = "";
        if (!this.hasPsaHint && (isNeedAuthorName || z)) {
            this.drawNameLayout = true;
            int maxNameWidth = getMaxNameWidth();
            this.nameWidth = maxNameWidth;
            if (maxNameWidth < 0) {
                this.nameWidth = AndroidUtilities.dp(100.0f);
            }
            if (!this.isMegagroup || (tLRPC$Chat = this.currentChat) == null || messageObject.messageOwner.post_author == null) {
                str2 = str;
            } else {
                str2 = str;
                if (tLRPC$Chat.id == (-this.currentMessageObject.getFromChatId())) {
                    adminRank = messageObject.messageOwner.post_author.replace("\n", r15);
                    ceil = (int) Math.ceil(Theme.chat_adminPaint.measureText(adminRank));
                    this.nameWidth -= ceil;
                    str5 = adminRank;
                    obj = null;
                    this.currentNameStatus = obj;
                    str6 = messageObject.customName;
                    if (str6 != null) {
                        this.currentNameString = str6;
                    } else if (isNeedAuthorName) {
                        this.currentNameString = getAuthorName();
                        this.currentNameStatus = getAuthorStatus();
                    } else {
                        this.currentNameString = r15;
                    }
                    CharSequence ellipsize = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
                    if (z) {
                        int ceil2 = (int) Math.ceil(Theme.chat_namePaint.measureText(ellipsize, 0, ellipsize.length()));
                        this.viaNameWidth = ceil2;
                        if (ceil2 != 0) {
                            this.viaNameWidth = ceil2 + AndroidUtilities.dp(4.0f);
                        }
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            themedColor = getThemedColor("chat_stickerViaBotNameText");
                        } else {
                            themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViaBotNameText" : "chat_inViaBotNameText");
                        }
                        String string = LocaleController.getString("ViaBot", R.string.ViaBot);
                        if (this.currentNameString.length() > 0) {
                            SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(String.format("%s %s %s", ellipsize, string, str2));
                            TypefaceSpan typefaceSpan = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan;
                            spannableStringBuilder3.setSpan(typefaceSpan, ellipsize.length() + 1, ellipsize.length() + 1 + string.length(), 33);
                            TypefaceSpan typefaceSpan2 = new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM), 0, themedColor);
                            this.viaSpan2 = typefaceSpan2;
                            spannableStringBuilder3.setSpan(typefaceSpan2, ellipsize.length() + 2 + string.length(), spannableStringBuilder3.length(), 33);
                            spannableStringBuilder2 = spannableStringBuilder3;
                        } else {
                            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(String.format("%s %s", string, str2));
                            TypefaceSpan typefaceSpan3 = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan3;
                            spannableStringBuilder4.setSpan(typefaceSpan3, 0, string.length() + 1, 33);
                            TypefaceSpan typefaceSpan4 = new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM), 0, themedColor);
                            this.viaSpan2 = typefaceSpan4;
                            spannableStringBuilder4.setSpan(typefaceSpan4, string.length() + 1, spannableStringBuilder4.length(), 33);
                            spannableStringBuilder2 = spannableStringBuilder4;
                        }
                        ellipsize = TextUtils.ellipsize(spannableStringBuilder2, Theme.chat_namePaint, this.nameWidth, TextUtils.TruncateAt.END);
                    }
                    ellipsize = Emoji.replaceEmoji(ellipsize, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                    staticLayout = new StaticLayout(ellipsize, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.nameLayout = staticLayout;
                    if (staticLayout.getLineCount() > 0) {
                        int ceil3 = (int) Math.ceil(this.nameLayout.getLineWidth(0));
                        this.nameLayoutWidth = ceil3;
                        this.nameWidth = ceil3;
                        if (!messageObject.isAnyKindOfSticker()) {
                            this.namesOffset = (int) (this.namesOffset + AndroidUtilities.dp(5.0f) + Theme.chat_namePaint.getTextSize());
                        }
                        this.nameOffsetX = this.nameLayout.getLineLeft(0);
                    } else {
                        this.nameLayoutWidth = 0;
                        this.nameWidth = 0;
                    }
                    if (this.currentNameStatus != null) {
                        this.nameWidth += AndroidUtilities.dp(20.0f);
                    }
                    if (str5 != null) {
                        StaticLayout staticLayout2 = new StaticLayout(str5, Theme.chat_adminPaint, ceil + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.adminLayout = staticLayout2;
                        this.nameWidth = (int) (this.nameWidth + staticLayout2.getLineWidth(0) + AndroidUtilities.dp(8.0f));
                    } else {
                        this.adminLayout = null;
                    }
                    if (this.currentNameStatusDrawable == null) {
                        this.currentNameStatusDrawable = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(20.0f));
                    }
                    obj2 = this.currentNameStatus;
                    if (obj2 == null) {
                        this.currentNameStatusDrawable.set((Drawable) null, false);
                    } else if (obj2 instanceof Long) {
                        this.currentNameStatusDrawable.set(((Long) obj2).longValue(), false);
                    } else if (obj2 instanceof Drawable) {
                        this.currentNameStatusDrawable.set((Drawable) obj2, false);
                    }
                    r4 = 0;
                    r4 = 0;
                    if (this.currentNameString.length() == 0) {
                        this.currentNameString = null;
                    }
                }
            }
            if (this.isMegagroup && this.currentChat != null && this.currentMessageObject.isForwardedChannelPost()) {
                adminRank = LocaleController.getString("DiscussChannel", R.string.DiscussChannel);
                ceil = (int) Math.ceil(Theme.chat_adminPaint.measureText(adminRank));
                this.nameWidth -= ceil;
            } else {
                if ((this.currentUser != null || this.currentChat != null) && !this.currentMessageObject.isOutOwner() && !this.currentMessageObject.isAnyKindOfSticker() && this.currentMessageObject.type != 5 && (chatMessageCellDelegate2 = this.delegate) != null) {
                    TLRPC$User tLRPC$User = this.currentUser;
                    adminRank = chatMessageCellDelegate2.getAdminRank(tLRPC$User != null ? tLRPC$User.id : this.currentChat.id);
                    if (adminRank != null) {
                        if (adminRank.length() == 0) {
                            adminRank = LocaleController.getString("ChatAdmin", R.string.ChatAdmin);
                        }
                        ceil = (int) Math.ceil(Theme.chat_adminPaint.measureText(adminRank));
                        this.nameWidth -= ceil;
                    }
                }
                obj = null;
                ceil = 0;
                str5 = null;
                this.currentNameStatus = obj;
                str6 = messageObject.customName;
                if (str6 != null) {
                }
                CharSequence ellipsize2 = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
                if (z) {
                }
                ellipsize2 = Emoji.replaceEmoji(ellipsize2, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                staticLayout = new StaticLayout(ellipsize2, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                this.nameLayout = staticLayout;
                if (staticLayout.getLineCount() > 0) {
                }
                if (this.currentNameStatus != null) {
                }
                if (str5 != null) {
                }
                if (this.currentNameStatusDrawable == null) {
                }
                obj2 = this.currentNameStatus;
                if (obj2 == null) {
                }
                r4 = 0;
                r4 = 0;
                if (this.currentNameString.length() == 0) {
                }
            }
            str5 = adminRank;
            obj = null;
            this.currentNameStatus = obj;
            str6 = messageObject.customName;
            if (str6 != null) {
            }
            CharSequence ellipsize22 = TextUtils.ellipsize(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '), Theme.chat_namePaint, this.nameWidth - (z ? this.viaWidth : 0), TextUtils.TruncateAt.END);
            if (z) {
            }
            ellipsize22 = Emoji.replaceEmoji(ellipsize22, Theme.chat_namePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
            staticLayout = new StaticLayout(ellipsize22, Theme.chat_namePaint, this.nameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.nameLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
            }
            if (this.currentNameStatus != null) {
            }
            if (str5 != null) {
            }
            if (this.currentNameStatusDrawable == null) {
            }
            obj2 = this.currentNameStatus;
            if (obj2 == null) {
            }
            r4 = 0;
            r4 = 0;
            if (this.currentNameString.length() == 0) {
            }
        } else {
            str2 = str;
            r4 = 0;
            this.currentNameString = null;
            this.nameLayout = null;
            this.nameWidth = 0;
        }
        this.currentForwardUser = r4;
        this.currentForwardNameString = r4;
        this.currentForwardChannel = r4;
        this.currentForwardName = r4;
        ?? r0 = this.forwardedNameLayout;
        r0[0] = r4;
        r0[1] = r4;
        this.replyPanelIsForward = false;
        this.forwardedNameWidth = 0;
        if (messageObject.isForwarded()) {
            TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.from_id;
            if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
            } else if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
                this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
            }
        }
        if (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition2 = this.currentPosition) == null || groupedMessagePosition2.minY == 0)) {
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            String str7 = tLRPC$MessageFwdHeader.from_name;
            if (str7 != null) {
                this.currentForwardName = str7;
            }
            TLRPC$User tLRPC$User2 = this.currentForwardUser;
            if (tLRPC$User2 != null || this.currentForwardChannel != null || this.currentForwardName != null) {
                TLRPC$Chat tLRPC$Chat2 = this.currentForwardChannel;
                if (tLRPC$Chat2 != null) {
                    if (tLRPC$User2 != null) {
                        this.currentForwardNameString = String.format("%s (%s)", tLRPC$Chat2.title, UserObject.getUserName(tLRPC$User2));
                    } else if (!TextUtils.isEmpty(tLRPC$MessageFwdHeader.post_author)) {
                        this.currentForwardNameString = String.format("%s (%s)", this.currentForwardChannel.title, messageObject.messageOwner.fwd_from.post_author);
                    } else {
                        this.currentForwardNameString = this.currentForwardChannel.title;
                    }
                } else if (tLRPC$User2 != null) {
                    this.currentForwardNameString = UserObject.getUserName(tLRPC$User2);
                } else {
                    this.currentForwardNameString = this.currentForwardName;
                }
                this.forwardedNameWidth = getMaxNameWidth();
                String forwardedMessageText = getForwardedMessageText(messageObject);
                if (this.hasPsaHint) {
                    this.forwardedNameWidth -= AndroidUtilities.dp(36.0f);
                }
                String string2 = LocaleController.getString("From", R.string.From);
                String string3 = LocaleController.getString("FromFormatted", R.string.FromFormatted);
                int indexOf = string3.indexOf("%1$s");
                TextPaint textPaint = Theme.chat_forwardNamePaint;
                int ceil4 = (int) Math.ceil(textPaint.measureText(string2 + " "));
                CharSequence ellipsize3 = TextUtils.ellipsize(this.currentForwardNameString.replace('\n', ' '), Theme.chat_replyNamePaint, (float) ((this.forwardedNameWidth - ceil4) - this.viaWidth), TextUtils.TruncateAt.END);
                try {
                    charSequence4 = String.format(string3, ellipsize3);
                } catch (Exception unused) {
                    charSequence4 = ellipsize3.toString();
                }
                if (replaceTags != null) {
                    spannableStringBuilder = new SpannableStringBuilder(String.format("%s %s %s", charSequence4, LocaleController.getString("ViaBot", R.string.ViaBot), str2));
                    this.viaNameWidth = (int) Math.ceil(Theme.chat_forwardNamePaint.measureText(charSequence4));
                    spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), (spannableStringBuilder.length() - str2.length()) - 1, spannableStringBuilder.length(), 33);
                } else {
                    spannableStringBuilder = new SpannableStringBuilder(String.format(string3, ellipsize3));
                }
                this.forwardNameCenterX = ceil4 + (((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(ellipsize3, 0, ellipsize3.length()))) / 2);
                if (indexOf >= 0 && (this.currentForwardName == null || messageObject.messageOwner.fwd_from.from_id != null)) {
                    spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), indexOf, ellipsize3.length() + indexOf, 33);
                }
                CharSequence ellipsize4 = TextUtils.ellipsize(spannableStringBuilder, Theme.chat_forwardNamePaint, this.forwardedNameWidth, TextUtils.TruncateAt.END);
                try {
                    ellipsize4 = Emoji.replaceEmoji(ellipsize4, Theme.chat_forwardNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                } catch (Exception unused2) {
                }
                try {
                    this.forwardedNameLayout[1] = new StaticLayout(ellipsize4, Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.forwardedNameLayout[0] = new StaticLayout(TextUtils.ellipsize(AndroidUtilities.replaceTags(forwardedMessageText), Theme.chat_forwardNamePaint, this.forwardedNameWidth, TextUtils.TruncateAt.END), Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    int max = Math.max((int) Math.ceil(this.forwardedNameLayout[0].getLineWidth(0)), (int) Math.ceil(this.forwardedNameLayout[1].getLineWidth(0)));
                    this.forwardedNameWidth = max;
                    if (this.hasPsaHint) {
                        this.forwardedNameWidth = max + AndroidUtilities.dp(36.0f);
                    }
                    this.forwardNameOffsetX[0] = this.forwardedNameLayout[0].getLineLeft(0);
                    this.forwardNameOffsetX[1] = this.forwardedNameLayout[1].getLineLeft(0);
                    if ((messageObject.type != 5 && !messageObject.isAnyKindOfSticker()) || messageObject.type == 19) {
                        int dp2 = (int) (this.namesOffset + AndroidUtilities.dp(8.0f) + (Theme.chat_forwardNamePaint.getTextSize() * 2.0f));
                        this.namesOffset = dp2;
                        if (messageObject.type == 19) {
                            this.namesOffset = dp2 + AndroidUtilities.dp(8.0f);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
            }
        }
        this.drawTopic = false;
        if (!this.isThreadChat && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.shouldShowTopicButton() && !this.pinnedTop && ((MessageObject.getTopicId(messageObject.messageOwner, true) != 0 || messageObject.replyToForumTopic != null) && ((groupedMessagePosition = this.currentPosition) == null || groupedMessagePosition.minY == 0))) {
            TLRPC$TL_forumTopic tLRPC$TL_forumTopic = messageObject.replyToForumTopic;
            int topicId = tLRPC$TL_forumTopic == null ? MessageObject.getTopicId(messageObject.messageOwner, true) : tLRPC$TL_forumTopic.id;
            TLRPC$TL_forumTopic tLRPC$TL_forumTopic2 = messageObject.replyToForumTopic;
            if (tLRPC$TL_forumTopic2 == null) {
                tLRPC$TL_forumTopic2 = MessagesController.getInstance(this.currentAccount).getTopicsController().findTopic(-messageObject.getDialogId(), topicId);
            }
            if (tLRPC$TL_forumTopic2 != null) {
                this.drawTopic = true;
                int maxNameWidth2 = getMaxNameWidth();
                if (!messageObject.shouldDrawWithoutBackground()) {
                    maxNameWidth2 -= AndroidUtilities.dp(10.0f);
                } else {
                    if (messageObject.type == 5) {
                        dp = AndroidUtilities.dp(48.0f);
                    } else if (messageObject.isAnyKindOfSticker()) {
                        dp = AndroidUtilities.dp(25.0f);
                    }
                    maxNameWidth2 += dp;
                }
                if (this.topicButton == null) {
                    this.topicButton = new MessageTopicButton(getContext(), this.resourcesProvider) { // from class: org.telegram.ui.Cells.ChatMessageCell.9
                        @Override // org.telegram.ui.Components.Forum.MessageTopicButton
                        protected void onClick() {
                            if (ChatMessageCell.this.delegate != null) {
                                ChatMessageCell.this.delegate.didPressTopicButton(ChatMessageCell.this);
                            }
                        }
                    };
                }
                this.namesOffset += this.topicButton.set(this, messageObject, tLRPC$TL_forumTopic2, maxNameWidth2);
            }
        }
        if (!this.drawTopic && (messageTopicButton = this.topicButton) != null) {
            messageTopicButton.onDetached(this);
            this.topicButton = null;
        }
        if (((!this.isThreadChat || messageObject.getReplyTopMsgId() != 0) && messageObject.hasValidReplyMessageObject()) || (messageObject.messageOwner.fwd_from != null && messageObject.isDice())) {
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 == null || groupedMessagePosition3.minY == 0) {
                if ((!messageObject.isAnyKindOfSticker() && messageObject.type != 5) || messageObject.type == 19) {
                    int dp3 = (int) (this.namesOffset + AndroidUtilities.dp(14.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                    this.namesOffset = dp3;
                    int i5 = messageObject.type;
                    if (i5 == 19 && !this.drawForwardedName) {
                        this.namesOffset = dp3 + AndroidUtilities.dp(12.0f);
                    } else if (i5 != 0) {
                        this.namesOffset = dp3 + AndroidUtilities.dp(5.0f);
                    }
                }
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    this.namesOffset += AndroidUtilities.dp(2.0f);
                }
                int maxNameWidth3 = getMaxNameWidth();
                if (!messageObject.shouldDrawWithoutBackground()) {
                    maxNameWidth3 -= AndroidUtilities.dp(10.0f);
                } else if (messageObject.type == 5) {
                    maxNameWidth3 += AndroidUtilities.dp(13.0f);
                }
                if ((!this.isThreadChat || messageObject.getReplyTopMsgId() != 0) && messageObject.hasValidReplyMessageObject()) {
                    MessageObject messageObject4 = messageObject.replyMessageObject;
                    this.lastReplyMessage = messageObject4.messageOwner;
                    boolean hasMediaSpoilers = messageObject4.hasMediaSpoilers();
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 320);
                    TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 40);
                    MessageObject messageObject5 = messageObject.replyMessageObject;
                    TLObject tLObject = messageObject5.photoThumbsObject2;
                    if (closestPhotoSizeWithSize == null) {
                        if (messageObject5.mediaExists) {
                            closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject5.photoThumbs, AndroidUtilities.getPhotoSize());
                            i = closestPhotoSizeWithSize != null ? closestPhotoSizeWithSize.size : 0;
                            i4 = 0;
                        } else {
                            closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject5.photoThumbs, 320);
                            i = 0;
                            i4 = 1;
                        }
                        i2 = i4;
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 40);
                        tLObject = messageObject.replyMessageObject.photoThumbsObject;
                    } else {
                        tLRPC$PhotoSize = closestPhotoSizeWithSize2;
                        i = 0;
                        i2 = 1;
                    }
                    if (tLRPC$PhotoSize == closestPhotoSizeWithSize) {
                        tLRPC$PhotoSize = null;
                    }
                    if (closestPhotoSizeWithSize == null || messageObject.replyMessageObject.isAnyKindOfSticker() || ((messageObject.isAnyKindOfSticker() && !AndroidUtilities.isTablet()) || messageObject.replyMessageObject.isSecretMedia() || messageObject.replyMessageObject.isWebpageDocument())) {
                        this.replyImageReceiver.setImageBitmap((Drawable) null);
                        this.needReplyImage = false;
                    } else {
                        if (messageObject.replyMessageObject.isRoundVideo()) {
                            this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(32.0f));
                        } else {
                            this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(4.0f));
                        }
                        this.currentReplyPhoto = closestPhotoSizeWithSize;
                        this.replyImageReceiver.setImage(ImageLocation.getForObject(closestPhotoSizeWithSize, tLObject), hasMediaSpoilers ? "50_50_b4" : "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), hasMediaSpoilers ? "50_50_b4" : "50_50_b", i, null, messageObject.replyMessageObject, i2);
                        this.needReplyImage = true;
                        maxNameWidth3 = (int) (maxNameWidth3 - (AndroidUtilities.dp(16.0f) + (Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())));
                    }
                    if (messageObject.hideSendersName) {
                        TLRPC$Peer tLRPC$Peer2 = messageObject.sendAsPeer;
                        if (tLRPC$Peer2 != null) {
                            if (tLRPC$Peer2.channel_id != 0) {
                                TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.sendAsPeer.channel_id));
                                str3 = chat != null ? chat.title : null;
                            } else {
                                str3 = UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.sendAsPeer.user_id)));
                            }
                        } else {
                            str3 = UserObject.getUserName(AccountInstance.getInstance(this.currentAccount).getUserConfig().getCurrentUser());
                        }
                    } else {
                        str3 = messageObject.customReplyName;
                        if (str3 == null) {
                            str3 = this.drawForwardedName ? messageObject.replyMessageObject.getForwardedName() : null;
                            if (str3 == null) {
                                long fromChatId = messageObject.replyMessageObject.getFromChatId();
                                if (fromChatId > 0) {
                                    TLRPC$User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId));
                                    if (user2 != null) {
                                        str3 = UserObject.getUserName(user2);
                                    }
                                } else if (fromChatId < 0) {
                                    TLRPC$Chat chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-fromChatId));
                                    if (chat2 != null) {
                                        str3 = chat2.title;
                                    }
                                } else {
                                    TLRPC$Chat chat3 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.replyMessageObject.messageOwner.peer_id.channel_id));
                                    if (chat3 != null) {
                                        str3 = chat3.title;
                                    }
                                }
                            }
                        }
                    }
                    if (str3 == null) {
                        str3 = LocaleController.getString("Loading", R.string.Loading);
                    }
                    MessageObject messageObject6 = messageObject.replyMessageObject;
                    CharSequence charSequence5 = messageObject6.messageTextForReply;
                    if (charSequence5 != null) {
                        charSequence = charSequence5;
                    } else if (MessageObject.getMedia(messageObject6) instanceof TLRPC$TL_messageMediaGame) {
                        charSequence = TextUtils.ellipsize(Emoji.replaceEmoji(MessageObject.getMedia(messageObject.replyMessageObject).game.title, Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), Theme.chat_replyTextPaint, maxNameWidth3, TextUtils.TruncateAt.END);
                    } else if (MessageObject.getMedia(messageObject.replyMessageObject) instanceof TLRPC$TL_messageMediaInvoice) {
                        charSequence = TextUtils.ellipsize(Emoji.replaceEmoji(MessageObject.getMedia(messageObject.replyMessageObject).title, Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false), Theme.chat_replyTextPaint, maxNameWidth3, TextUtils.TruncateAt.END);
                    } else if (!TextUtils.isEmpty(messageObject.replyMessageObject.caption)) {
                        String charSequence6 = messageObject.replyMessageObject.caption.toString();
                        if (charSequence6.length() > 150) {
                            charSequence6 = charSequence6.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                        }
                        CharSequence replaceEmoji = Emoji.replaceEmoji(charSequence6.replace('\n', ' '), Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        TLRPC$Message tLRPC$Message4 = messageObject.replyMessageObject.messageOwner;
                        if (tLRPC$Message4 != null) {
                            replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, tLRPC$Message4.entities, Theme.chat_replyTextPaint.getFontMetricsInt(), true);
                        }
                        charSequence = TextUtils.ellipsize(replaceEmoji, Theme.chat_replyTextPaint, maxNameWidth3, TextUtils.TruncateAt.END);
                        if ((charSequence instanceof Spannable) && (tLRPC$Message = (messageObject2 = messageObject.replyMessageObject).messageOwner) != null) {
                            MediaDataController.addTextStyleRuns(tLRPC$Message.entities, messageObject2.caption, (Spannable) charSequence);
                        }
                    } else {
                        MessageObject messageObject7 = messageObject.replyMessageObject;
                        if (messageObject7 == null || (charSequence2 = messageObject7.messageText) == null || charSequence2.length() <= 0) {
                            charSequence = null;
                        } else {
                            String charSequence7 = messageObject.replyMessageObject.messageText.toString();
                            if (charSequence7.length() > 150) {
                                charSequence7 = charSequence7.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                            }
                            CharSequence replaceEmoji2 = Emoji.replaceEmoji(charSequence7.replace('\n', ' '), Theme.chat_replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                            TLRPC$Message tLRPC$Message5 = messageObject.replyMessageObject.messageOwner;
                            if (tLRPC$Message5 != null) {
                                replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, tLRPC$Message5.entities, Theme.chat_replyTextPaint.getFontMetricsInt(), true);
                            }
                            charSequence = TextUtils.ellipsize(replaceEmoji2, Theme.chat_replyTextPaint, maxNameWidth3, TextUtils.TruncateAt.END);
                            if (charSequence instanceof Spannable) {
                                MediaDataController.addTextStyleRuns(messageObject.replyMessageObject, (Spannable) charSequence);
                            }
                        }
                    }
                    i3 = maxNameWidth3;
                    charSequence3 = charSequence;
                    str4 = str3;
                } else {
                    charSequence3 = null;
                    this.replyImageReceiver.setImageBitmap((Drawable) null);
                    this.needReplyImage = false;
                    this.replyPanelIsForward = true;
                    TLRPC$Peer tLRPC$Peer3 = messageObject.messageOwner.fwd_from.from_id;
                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerChannel) {
                        this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.channel_id));
                    } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerChat) {
                        this.currentForwardChannel = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.chat_id));
                    } else if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                        this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
                    }
                    String str8 = messageObject.messageOwner.fwd_from.from_name;
                    if (str8 != null) {
                        this.currentForwardName = str8;
                    }
                    TLRPC$User tLRPC$User3 = this.currentForwardUser;
                    if (tLRPC$User3 == null && this.currentForwardChannel == null && this.currentForwardName == null) {
                        i3 = maxNameWidth3;
                        str4 = null;
                    } else {
                        TLRPC$Chat tLRPC$Chat3 = this.currentForwardChannel;
                        if (tLRPC$Chat3 != null) {
                            if (tLRPC$User3 != null) {
                                this.currentForwardNameString = String.format("%s (%s)", tLRPC$Chat3.title, UserObject.getUserName(tLRPC$User3));
                            } else {
                                this.currentForwardNameString = tLRPC$Chat3.title;
                            }
                        } else if (tLRPC$User3 != null) {
                            this.currentForwardNameString = UserObject.getUserName(tLRPC$User3);
                        } else {
                            this.currentForwardNameString = this.currentForwardName;
                        }
                        str4 = getForwardedMessageText(messageObject);
                        String string4 = LocaleController.getString("From", R.string.From);
                        String string5 = LocaleController.getString("FromFormatted", R.string.FromFormatted);
                        int indexOf2 = string5.indexOf("%1$s");
                        TextPaint textPaint2 = Theme.chat_replyNamePaint;
                        int ceil5 = (int) Math.ceil(textPaint2.measureText(string4 + " "));
                        String str9 = this.currentForwardNameString;
                        CharSequence ellipsize5 = TextUtils.ellipsize(str9 == null ? r15 : str9.replace('\n', ' '), Theme.chat_replyNamePaint, maxNameWidth3 - ceil5, TextUtils.TruncateAt.END);
                        SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(String.format(string5, ellipsize5));
                        if (indexOf2 >= 0 && (this.currentForwardName == null || messageObject.messageOwner.fwd_from.from_id != null)) {
                            spannableStringBuilder5.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), indexOf2, ellipsize5.length() + indexOf2, 33);
                        }
                        CharSequence ellipsize6 = TextUtils.ellipsize(spannableStringBuilder5, Theme.chat_replyTextPaint, maxNameWidth3, TextUtils.TruncateAt.END);
                        this.forwardNameCenterX = ceil5 + (((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize5, 0, ellipsize5.length()))) / 2);
                        charSequence3 = ellipsize6;
                        i3 = maxNameWidth3;
                    }
                }
                if (str4 != null) {
                    r15 = TextUtils.ellipsize(str4.replace('\n', ' '), Theme.chat_replyNamePaint, i3, TextUtils.TruncateAt.END);
                }
                try {
                    r15 = Emoji.replaceEmoji(r15, Theme.chat_replyNamePaint.getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                } catch (Exception unused3) {
                }
                CharSequence charSequence8 = r15;
                try {
                    this.replyNameWidth = AndroidUtilities.dp(4.0f) + (this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                    if (charSequence8 != null) {
                        StaticLayout staticLayout3 = new StaticLayout(charSequence8, Theme.chat_replyNamePaint, i3 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.replyNameLayout = staticLayout3;
                        if (staticLayout3.getLineCount() > 0) {
                            this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                            this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
                try {
                    this.replyTextWidth = AndroidUtilities.dp(4.0f) + (this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                    if (charSequence3 != null) {
                        SpannableStringBuilder spannableStringBuilder6 = new SpannableStringBuilder(charSequence3);
                        for (TextStyleSpan textStyleSpan : (TextStyleSpan[]) spannableStringBuilder6.getSpans(0, spannableStringBuilder6.length(), TextStyleSpan.class)) {
                            if ((textStyleSpan.getTextStyleRun().flags & 4) != 0) {
                                spannableStringBuilder6.removeSpan(textStyleSpan);
                            }
                        }
                        StaticLayout staticLayout4 = new StaticLayout(TextUtils.ellipsize(spannableStringBuilder6, Theme.chat_replyTextPaint, i3, TextUtils.TruncateAt.END), Theme.chat_replyTextPaint, i3 + AndroidUtilities.dp(10.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        this.replyTextLayout = staticLayout4;
                        if (staticLayout4.getLineCount() > 0) {
                            this.replyTextWidth += ((int) Math.ceil(this.replyTextLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                            this.replyTextOffset = (int) this.replyTextLayout.getLineLeft(0);
                        }
                        this.replySpoilers.clear();
                        if (getMessageObject().replyMessageObject != null && !getMessageObject().replyMessageObject.isSpoilersRevealed) {
                            SpoilerEffect.addSpoilers(this, this.replyTextLayout, this.replySpoilersPool, this.replySpoilers);
                        }
                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
                    }
                    int i6 = this.replyNameWidth;
                    if (i6 > this.replyTextWidth) {
                        this.replyNameWidth = i6 + AndroidUtilities.dp(Math.max(2.0f, SharedConfig.bubbleRadius / 4.0f));
                    }
                } catch (Exception e3) {
                    FileLog.e(e3);
                }
            }
        } else if (!this.isThreadChat && messageObject.getReplyMsgId() != 0) {
            MessageObject messageObject8 = messageObject.replyMessageObject;
            if (messageObject8 != null) {
                TLRPC$Message tLRPC$Message6 = messageObject8.messageOwner;
                if (!(tLRPC$Message6 instanceof TLRPC$TL_messageEmpty)) {
                    if (tLRPC$Message6 != null) {
                    }
                }
            }
            if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                int dp4 = (int) (this.namesOffset + AndroidUtilities.dp(14.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                this.namesOffset = dp4;
                if (messageObject.type != 0) {
                    this.namesOffset = dp4 + AndroidUtilities.dp(5.0f);
                }
            }
            this.needReplyImage = false;
            int maxNameWidth4 = getMaxNameWidth();
            if (!messageObject.shouldDrawWithoutBackground()) {
                maxNameWidth4 -= AndroidUtilities.dp(10.0f);
            } else if (messageObject.type == 5) {
                maxNameWidth4 += AndroidUtilities.dp(13.0f);
            }
            StaticLayout staticLayout5 = new StaticLayout(LocaleController.getString("Loading", R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth4 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.replyNameLayout = staticLayout5;
            if (staticLayout5.getLineCount() > 0) {
                this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
            }
        }
        requestLayout();
    }

    private boolean isNeedAuthorName() {
        return (this.isPinnedChat && this.currentMessageObject.type == 0) || (!this.pinnedTop && this.drawName && this.isChat && (!this.currentMessageObject.isOutOwner() || (this.currentMessageObject.isSupergroup() && this.currentMessageObject.isFromGroup()))) || (this.currentMessageObject.isImportedForward() && this.currentMessageObject.messageOwner.fwd_from.from_id == null);
    }

    private String getAuthorName() {
        TLRPC$Chat tLRPC$Chat;
        String str;
        String str2;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            return UserObject.getUserName(tLRPC$User);
        }
        TLRPC$Chat tLRPC$Chat2 = this.currentChat;
        if (tLRPC$Chat2 != null) {
            return tLRPC$Chat2.title;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored()) {
            return "DELETED";
        }
        TLRPC$ChatInvite tLRPC$ChatInvite = this.currentMessageObject.sponsoredChatInvite;
        return (tLRPC$ChatInvite == null || (str2 = tLRPC$ChatInvite.title) == null) ? (tLRPC$ChatInvite == null || (tLRPC$Chat = tLRPC$ChatInvite.chat) == null || (str = tLRPC$Chat.title) == null) ? "" : str : str2;
    }

    private Object getAuthorStatus() {
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            TLRPC$EmojiStatus tLRPC$EmojiStatus = tLRPC$User.emoji_status;
            if ((tLRPC$EmojiStatus instanceof TLRPC$TL_emojiStatusUntil) && ((TLRPC$TL_emojiStatusUntil) tLRPC$EmojiStatus).until > ((int) (System.currentTimeMillis() / 1000))) {
                return Long.valueOf(((TLRPC$TL_emojiStatusUntil) this.currentUser.emoji_status).document_id);
            }
            TLRPC$User tLRPC$User2 = this.currentUser;
            TLRPC$EmojiStatus tLRPC$EmojiStatus2 = tLRPC$User2.emoji_status;
            if (tLRPC$EmojiStatus2 instanceof TLRPC$TL_emojiStatus) {
                return Long.valueOf(((TLRPC$TL_emojiStatus) tLRPC$EmojiStatus2).document_id);
            }
            if (!tLRPC$User2.premium) {
                return null;
            }
            return ContextCompat.getDrawable(ApplicationLoader.applicationContext, R.drawable.msg_premium_liststar).mutate();
        }
        return null;
    }

    private String getForwardedMessageText(MessageObject messageObject) {
        if (this.hasPsaHint) {
            String string = LocaleController.getString("PsaMessage_" + messageObject.messageOwner.fwd_from.psa_type);
            return string == null ? LocaleController.getString("PsaMessageDefault", R.string.PsaMessageDefault) : string;
        }
        return LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage);
    }

    public int getExtraInsetHeight() {
        int i = this.addedCaptionHeight;
        if (this.drawCommentButton) {
            i += AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
        }
        return (this.reactionsLayoutInBubble.isEmpty || !this.currentMessageObject.shouldDrawReactionsInLayout()) ? i : i + this.reactionsLayoutInBubble.totalHeight;
    }

    public ImageReceiver getAvatarImage() {
        if (this.isAvatarVisible) {
            return this.avatarImage;
        }
        return null;
    }

    public float getCheckBoxTranslation() {
        return this.checkBoxTranslation;
    }

    public boolean shouldDrawAlphaLayer() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        return (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) && getAlpha() != 1.0f;
    }

    public float getCaptionX() {
        return this.captionX;
    }

    public boolean isDrawPinnedBottom() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        return this.mediaBackground || this.drawPinnedBottom || (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments);
    }

    public void drawCheckBox(Canvas canvas) {
        float f;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSending() || this.currentMessageObject.isSendError() || this.checkBox == null) {
            return;
        }
        if (!this.checkBoxVisible && !this.checkBoxAnimationInProgress) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        canvas.save();
        float y = getY();
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.messages.size() > 1) {
            f = (getTop() + this.currentMessagesGroup.transitionParams.offsetTop) - getTranslationY();
        } else {
            f = y + this.transitionParams.deltaTop;
        }
        canvas.translate(0.0f, f + this.transitionYOffsetForDrawables);
        this.checkBox.draw(canvas);
        canvas.restore();
    }

    /* JADX WARN: Removed duplicated region for block: B:20:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0046  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setBackgroundTopY(boolean z) {
        int i;
        int i2;
        int i3 = 0;
        while (i3 < 2) {
            if (i3 == 1 && !z) {
                return;
            }
            Theme.MessageDrawable messageDrawable = i3 == 0 ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable;
            if (messageDrawable != null) {
                int i4 = this.parentWidth;
                int i5 = this.parentHeight;
                if (i5 == 0) {
                    i4 = getParentWidth();
                    i5 = AndroidUtilities.displaySize.y;
                    if (getParent() instanceof View) {
                        View view = (View) getParent();
                        int measuredWidth = view.getMeasuredWidth();
                        i2 = view.getMeasuredHeight();
                        i = measuredWidth;
                        float y = !z ? getY() : getTop();
                        float f = this.parentViewTopOffset;
                        messageDrawable.setTop((int) (y + f), i, i2, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
                    }
                }
                i = i4;
                i2 = i5;
                if (!z) {
                }
                float f2 = this.parentViewTopOffset;
                messageDrawable.setTop((int) (y + f2), i, i2, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
            }
            i3++;
        }
    }

    public void setBackgroundTopY(int i) {
        int i2;
        int i3;
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        int i4 = this.parentWidth;
        int i5 = this.parentHeight;
        if (i5 == 0) {
            i4 = getParentWidth();
            i5 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                i3 = view.getMeasuredWidth();
                i2 = view.getMeasuredHeight();
                float f = this.parentViewTopOffset;
                messageDrawable.setTop((int) (i + f), i3, i2, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
            }
        }
        i2 = i5;
        i3 = i4;
        float f2 = this.parentViewTopOffset;
        messageDrawable.setTop((int) (i + f2), i3, i2, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, !this.pinnedBottom || this.transitionParams.changePinnedBottomProgress != 1.0f);
    }

    public void setDrawableBoundsInner(Drawable drawable, int i, int i2, int i3, int i4) {
        if (drawable != null) {
            float f = i4 + i2;
            TransitionParams transitionParams = this.transitionParams;
            float f2 = transitionParams.deltaBottom;
            this.transitionYOffsetForDrawables = (f + f2) - ((int) (f + f2));
            drawable.setBounds((int) (i + transitionParams.deltaLeft), (int) (i2 + transitionParams.deltaTop), (int) (i + i3 + transitionParams.deltaRight), (int) (f + f2));
        }
    }

    @Override // android.view.View
    @SuppressLint({"WrongCall"})
    protected void onDraw(Canvas canvas) {
        boolean z;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageTopicButton messageTopicButton;
        MessageTopicButton messageTopicButton2;
        Theme.MessageDrawable messageDrawable;
        int i;
        int i2;
        int i3;
        int i4;
        if (this.currentMessageObject == null) {
            return;
        }
        if (!this.wasLayout) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        if (this.enterTransitionInProgress && this.currentMessageObject.isAnimatedEmojiStickers()) {
            return;
        }
        if (this.currentMessageObject.isOutOwner()) {
            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextOut"));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor("chat_messageTextOut"));
            Theme.chat_msgGameTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
            Theme.chat_replyTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
        } else {
            Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextIn"));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor("chat_messageTextIn"));
            Theme.chat_msgGameTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
            Theme.chat_replyTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
            Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
        }
        if (this.documentAttach != null) {
            int i5 = this.documentAttachType;
            if (i5 == 3 || i5 == 7) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBarWaveform.setColors(getThemedColor("chat_outVoiceSeekbar"), getThemedColor("chat_outVoiceSeekbarFill"), getThemedColor("chat_outVoiceSeekbarSelected"));
                    this.seekBar.setColors(getThemedColor("chat_outAudioSeekbar"), getThemedColor("chat_outAudioCacheSeekbar"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarSelected"));
                } else {
                    this.seekBarWaveform.setColors(getThemedColor("chat_inVoiceSeekbar"), getThemedColor("chat_inVoiceSeekbarFill"), getThemedColor("chat_inVoiceSeekbarSelected"));
                    this.seekBar.setColors(getThemedColor("chat_inAudioSeekbar"), getThemedColor("chat_inAudioCacheSeekbar"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarSelected"));
                }
            } else if (i5 == 5) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBar.setColors(getThemedColor("chat_outAudioSeekbar"), getThemedColor("chat_outAudioCacheSeekbar"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarFill"), getThemedColor("chat_outAudioSeekbarSelected"));
                } else {
                    this.seekBar.setColors(getThemedColor("chat_inAudioSeekbar"), getThemedColor("chat_inAudioCacheSeekbar"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarFill"), getThemedColor("chat_inAudioSeekbarSelected"));
                }
            }
        }
        MessageObject messageObject = this.currentMessageObject;
        String str = "chat_outTimeText";
        String str2 = "chat_inTimeText";
        if (messageObject.type == 5) {
            TextPaint textPaint = Theme.chat_timePaint;
            int themedColor = getThemedColor("chat_serviceText");
            if (isDrawSelectionBackground()) {
                str = this.currentMessageObject.isOutOwner() ? "chat_outTimeSelectedText" : "chat_inTimeSelectedText";
            } else if (!this.currentMessageObject.isOutOwner()) {
                str = str2;
            }
            textPaint.setColor(ColorUtils.blendARGB(themedColor, getThemedColor(str), getVideoTranscriptionProgress()));
        } else if (this.mediaBackground) {
            if (messageObject.shouldDrawWithoutBackground()) {
                Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor("chat_mediaTimeText"));
            }
        } else if (messageObject.isOutOwner()) {
            TextPaint textPaint2 = Theme.chat_timePaint;
            if (isDrawSelectionBackground()) {
                str = "chat_outTimeSelectedText";
            }
            textPaint2.setColor(getThemedColor(str));
        } else {
            TextPaint textPaint3 = Theme.chat_timePaint;
            if (isDrawSelectionBackground()) {
                str2 = "chat_inTimeSelectedText";
            }
            textPaint3.setColor(getThemedColor(str2));
        }
        drawBackgroundInternal(canvas, false);
        long j = 17;
        if (this.isHighlightedAnimated) {
            long currentTimeMillis = System.currentTimeMillis();
            long abs = Math.abs(currentTimeMillis - this.lastHighlightProgressTime);
            if (abs > 17) {
                abs = 17;
            }
            int i6 = (int) (this.highlightProgress - abs);
            this.highlightProgress = i6;
            this.lastHighlightProgressTime = currentTimeMillis;
            if (i6 <= 0) {
                this.highlightProgress = 0;
                this.isHighlightedAnimated = false;
            }
            invalidate();
            if (getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        int i7 = Integer.MIN_VALUE;
        if (this.alphaInternal != 1.0f) {
            int measuredHeight = getMeasuredHeight();
            int measuredWidth = getMeasuredWidth();
            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                i4 = messageDrawable2.getBounds().top;
                i3 = this.currentBackgroundDrawable.getBounds().bottom;
                i2 = this.currentBackgroundDrawable.getBounds().left;
                i = this.currentBackgroundDrawable.getBounds().right;
            } else {
                i = measuredWidth;
                i2 = 0;
                i3 = measuredHeight;
                i4 = 0;
            }
            if (this.drawSideButton != 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i2 -= AndroidUtilities.dp(40.0f);
                } else {
                    i += AndroidUtilities.dp(40.0f);
                }
            }
            if (getY() < 0.0f) {
                i4 = (int) (-getY());
            }
            float y = getY() + getMeasuredHeight();
            int i8 = this.parentHeight;
            if (y > i8) {
                i3 = (int) (i8 - getY());
            }
            this.rect.set(i2, i4, i, i3);
            i7 = canvas.saveLayerAlpha(this.rect, (int) (this.alphaInternal * 255.0f), 31);
        }
        if (!this.transitionParams.animateBackgroundBoundsInner || (messageDrawable = this.currentBackgroundDrawable) == null || this.isRoundVideo) {
            z = false;
        } else {
            Rect bounds = messageDrawable.getBounds();
            canvas.save();
            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
            z = true;
        }
        drawContent(canvas);
        if (z) {
            canvas.restore();
        }
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || chatMessageCellDelegate.canDrawOutboundsContent() || this.transitionParams.messageEntering || getAlpha() != 1.0f) {
            drawOutboundsContent(canvas);
        }
        if (this.replyNameLayout != null) {
            this.replyHeight = AndroidUtilities.dp(7.0f) + Theme.chat_replyNamePaint.getTextSize() + Theme.chat_replyTextPaint.getTextSize();
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type != 19) {
                    if (messageObject2.isOutOwner()) {
                        int dp = AndroidUtilities.dp(23.0f);
                        this.replyStartX = dp;
                        if (this.isPlayingRound) {
                            this.replyStartX = dp - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
                        }
                    } else if (this.currentMessageObject.type == 5) {
                        this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(4.0f);
                    } else {
                        this.replyStartX = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                    }
                    if (this.drawForwardedName) {
                        int dp2 = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                        this.forwardHeight = dp2;
                        this.replyStartY = this.forwardNameY + dp2 + AndroidUtilities.dp(6.0f);
                    } else {
                        int dp3 = AndroidUtilities.dp(12.0f);
                        this.replyStartY = dp3;
                        if (this.drawTopic && (messageTopicButton2 = this.topicButton) != null) {
                            this.replyStartY = dp3 + messageTopicButton2.height() + AndroidUtilities.dp(10.0f);
                        }
                    }
                }
            }
            if (this.currentMessageObject.isOutOwner()) {
                int dp4 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                this.replyStartX = dp4;
                if (this.currentMessageObject.type == 19) {
                    this.replyStartX = dp4 - Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp4) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else if (this.mediaBackground) {
                this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
            } else {
                this.replyStartX = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f) + getExtraTextX();
            }
            if (this.currentMessageObject.type == 19) {
                this.replyStartX -= AndroidUtilities.dp(7.0f);
            }
            this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
            int dp5 = AndroidUtilities.dp(12.0f) + ((!this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize())) + ((!this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : AndroidUtilities.dp(4.0f) + this.forwardHeight);
            this.replyStartY = dp5;
            if (this.drawTopic && (messageTopicButton = this.topicButton) != null) {
                this.replyStartY = dp5 + messageTopicButton.height() + AndroidUtilities.dp(5.0f);
            }
        }
        if (this.currentPosition == null && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawNamesLayout(canvas, 1.0f);
        }
        if ((!this.autoPlayingMedia || !MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject) || this.isRoundVideo) && !this.transitionParams.animateBackgroundBoundsInner) {
            drawOverlays(canvas);
        }
        if ((this.drawTime || !this.mediaBackground) && !this.forceNotDrawTime && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawTime(canvas, 1.0f, false);
        }
        if ((this.controlsAlpha != 1.0f || this.timeAlpha != 1.0f) && this.currentMessageObject.type != 5) {
            long currentTimeMillis2 = System.currentTimeMillis();
            long abs2 = Math.abs(this.lastControlsAlphaChangeTime - currentTimeMillis2);
            if (abs2 <= 17) {
                j = abs2;
            }
            long j2 = this.totalChangeTime + j;
            this.totalChangeTime = j2;
            if (j2 > 200) {
                this.totalChangeTime = 200L;
            }
            this.lastControlsAlphaChangeTime = currentTimeMillis2;
            if (this.controlsAlpha != 1.0f) {
                this.controlsAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 200.0f);
            }
            if (this.timeAlpha != 1.0f) {
                this.timeAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(((float) this.totalChangeTime) / 200.0f);
            }
            invalidate();
            if (this.forceNotDrawTime && (groupedMessagePosition = this.currentPosition) != null && groupedMessagePosition.last && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if ((this.drawBackground || this.transitionParams.animateDrawBackground) && shouldDrawSelectionOverlay() && this.currentMessagesGroup == null) {
            if (this.selectionOverlayPaint == null) {
                this.selectionOverlayPaint = new Paint(1);
            }
            this.selectionOverlayPaint.setColor(getSelectionOverlayColor().intValue());
            int alpha = this.selectionOverlayPaint.getAlpha();
            this.selectionOverlayPaint.setAlpha((int) (alpha * getHighlightAlpha() * getAlpha()));
            if (this.selectionOverlayPaint.getAlpha() > 0) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), getMeasuredHeight());
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams, this.selectionOverlayPaint);
                canvas.restore();
            }
            this.selectionOverlayPaint.setAlpha(alpha);
        }
        if (i7 != Integer.MIN_VALUE) {
            canvas.restoreToCount(i7);
        }
        updateSelectionTextPosition();
    }

    /* JADX WARN: Removed duplicated region for block: B:208:0x0716  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x07c6  */
    @SuppressLint({"WrongCall"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackgroundInternal(Canvas canvas, boolean z) {
        Drawable shadowDrawable;
        Drawable drawable;
        int i;
        int i2;
        int dp;
        int i3;
        String str;
        String str2;
        String str3;
        float f;
        float f2;
        MessageObject.GroupedMessages groupedMessages;
        Theme.MessageDrawable messageDrawable;
        int i4;
        int i5;
        int i6;
        int dp2;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Drawable shadowDrawable2;
        int i7;
        int i8;
        int i9;
        int dp3;
        if (this.currentMessageObject == null) {
            return;
        }
        boolean z2 = this.wasLayout;
        if (!z2 && !this.animationRunning) {
            forceLayout();
            return;
        }
        if (!z2) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
        boolean z3 = groupedMessagePosition2 != null && (groupedMessagePosition2.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
        if (this.currentMessageObject.isOutOwner()) {
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z3) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                shadowDrawable2 = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                shadowDrawable2 = this.currentBackgroundDrawable.getShadowDrawable();
            }
            drawable = shadowDrawable2;
            this.backgroundDrawableLeft = (this.layoutWidth - this.backgroundWidth) - (!this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f));
            int dp4 = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            this.backgroundDrawableRight = dp4;
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null && !groupedMessages2.isDocuments && !this.currentPosition.edge) {
                this.backgroundDrawableRight = dp4 + AndroidUtilities.dp(10.0f);
            }
            int i10 = this.backgroundDrawableLeft;
            if (!z3 && this.transitionParams.changePinnedBottomProgress != 1.0f) {
                if (!this.mediaBackground) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
            } else if (!this.mediaBackground && this.drawPinnedBottom) {
                this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((1 & this.currentPosition.flags) == 0) {
                    i10 -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i8 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i9 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3) + 0;
                } else {
                    i8 = 0;
                    i9 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i9 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                }
                i7 = i10;
            } else {
                i7 = i10;
                i8 = 0;
                i9 = 0;
            }
            boolean z4 = this.drawPinnedBottom;
            if (z4 && this.drawPinnedTop) {
                dp3 = 0;
            } else if (z4) {
                dp3 = AndroidUtilities.dp(1.0f);
            } else {
                dp3 = AndroidUtilities.dp(2.0f);
            }
            int dp5 = (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f)) + i8;
            this.backgroundDrawableTop = dp5;
            int i11 = (this.layoutHeight - dp3) + i9;
            this.backgroundDrawableBottom = dp5 + i11;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp5 - AndroidUtilities.dp(1.0f);
                    i11 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i11 += AndroidUtilities.dp(1.0f);
                }
            }
            int i12 = i11;
            if (z3) {
                setDrawableBoundsInner(this.currentBackgroundDrawable, i7, this.backgroundDrawableTop - i8, this.backgroundDrawableRight, (i12 - i9) + 10);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i12);
            } else {
                int i13 = i7;
                setDrawableBoundsInner(this.currentBackgroundDrawable, i13, this.backgroundDrawableTop, this.backgroundDrawableRight, i12);
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, i13, this.backgroundDrawableTop, this.backgroundDrawableRight, i12);
            }
            setDrawableBoundsInner(drawable, i7, this.backgroundDrawableTop, this.backgroundDrawableRight, i12);
        } else {
            if (this.transitionParams.changePinnedBottomProgress >= 1.0f && !this.mediaBackground && !this.drawPinnedBottom && !z3) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            }
            setBackgroundTopY(true);
            if (isDrawSelectionBackground() && (this.currentPosition == null || getBackground() != null)) {
                shadowDrawable = this.currentBackgroundSelectedDrawable.getShadowDrawable();
            } else {
                shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
            }
            drawable = shadowDrawable;
            this.backgroundDrawableLeft = AndroidUtilities.dp(((!this.isChat || !this.isAvatarVisible) ? 0 : 48) + (!this.mediaBackground ? 3 : 9));
            this.backgroundDrawableRight = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                if (!this.currentPosition.edge) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(10.0f);
                    this.backgroundDrawableRight += AndroidUtilities.dp(10.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    this.backgroundDrawableLeft += (int) Math.ceil((i3 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            boolean z5 = this.mediaBackground;
            if ((!z5 && this.drawPinnedBottom) || (!z3 && this.transitionParams.changePinnedBottomProgress != 1.0f)) {
                if (this.drawPinnedBottom || !z5) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
                if (!this.mediaBackground) {
                    this.backgroundDrawableLeft += AndroidUtilities.dp(6.0f);
                }
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 != null) {
                if ((groupedMessagePosition4.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i2 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3) + 0;
                } else {
                    i = 0;
                    i2 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i2 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 4);
                }
            } else {
                i = 0;
                i2 = 0;
            }
            boolean z6 = this.drawPinnedBottom;
            if (z6 && this.drawPinnedTop) {
                dp = 0;
            } else if (z6) {
                dp = AndroidUtilities.dp(1.0f);
            } else {
                dp = AndroidUtilities.dp(2.0f);
            }
            int dp6 = i + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
            this.backgroundDrawableTop = dp6;
            int i14 = (this.layoutHeight - dp) + i2;
            this.backgroundDrawableBottom = dp6 + i14;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp6 - AndroidUtilities.dp(1.0f);
                    i14 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i14 += AndroidUtilities.dp(1.0f);
                }
            }
            int i15 = i14;
            setDrawableBoundsInner(this.currentBackgroundDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i15);
            if (z3) {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, AndroidUtilities.dp(6.0f) + this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight - AndroidUtilities.dp(6.0f), i15);
            } else {
                setDrawableBoundsInner(this.currentBackgroundSelectedDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i15);
            }
            setDrawableBoundsInner(drawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i15);
        }
        Drawable drawable2 = drawable;
        if (!this.currentMessageObject.isOutOwner() && this.transitionParams.changePinnedBottomProgress != 1.0f && !this.mediaBackground && !this.drawPinnedBottom) {
            this.backgroundDrawableLeft -= AndroidUtilities.dp(6.0f);
            this.backgroundDrawableRight += AndroidUtilities.dp(6.0f);
        }
        if (this.hasPsaHint) {
            MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
            if (groupedMessagePosition5 == null || (groupedMessagePosition5.flags & 2) != 0) {
                i6 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                int groupPhotosWidth = getGroupPhotosWidth();
                i6 = 0;
                for (int i16 = 0; i16 < this.currentMessagesGroup.posArray.size(); i16++) {
                    if (this.currentMessagesGroup.posArray.get(i16).minY != 0) {
                        break;
                    }
                    double d = i6;
                    double ceil = Math.ceil(((groupedMessagePosition.pw + groupedMessagePosition.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    i6 = (int) (d + ceil);
                }
            }
            Drawable drawable3 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
            if (this.currentMessageObject.type == 5) {
                dp2 = AndroidUtilities.dp(12.0f);
            } else {
                dp2 = AndroidUtilities.dp((this.drawNameLayout ? 19 : 0) + 10);
            }
            this.psaHelpX = (i6 - drawable3.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 20.0f : 14.0f);
            this.psaHelpY = dp2 + AndroidUtilities.dp(4.0f);
        }
        if (this.checkBoxVisible || this.checkBoxAnimationInProgress) {
            animateCheckboxTranslation();
            int dp7 = AndroidUtilities.dp(21.0f);
            this.checkBox.setBounds(AndroidUtilities.dp(-27.0f) + this.checkBoxTranslation, (this.currentBackgroundDrawable.getBounds().bottom - AndroidUtilities.dp(8.0f)) - dp7, dp7, dp7);
        }
        if (!z && drawBackgroundInParent()) {
            return;
        }
        int saveCount = canvas.getSaveCount();
        if (this.transitionYOffsetForDrawables != 0.0f) {
            canvas.save();
            canvas.translate(0.0f, this.transitionYOffsetForDrawables);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isRoundVideo()) {
            str = "drawableMsgInMedia";
            str2 = "drawableMsgIn";
            str3 = "drawableMsgOut";
            f = 0.0f;
        } else {
            float videoTranscriptionProgress = getVideoTranscriptionProgress();
            this.currentBackgroundDrawable.setRoundingRadius(1.0f - videoTranscriptionProgress);
            f = AndroidUtilities.lerp(this.backgroundWidth / 2, 0, videoTranscriptionProgress);
            int i17 = (int) (videoTranscriptionProgress * 255.0f);
            str = "drawableMsgInMedia";
            str2 = "drawableMsgIn";
            str3 = "drawableMsgOut";
            canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), Math.max(this.currentBackgroundDrawable.getBounds().bottom, getHeight()), i17, 31);
            this.roundVideoPlayPipFloat.set((((!MediaController.getInstance().isPiPShown() || !MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject)) && !this.wouldBeInPip) || !canvas.isHardwareAccelerated()) ? 0.0f : 1.0f);
            if (MediaController.getInstance().isPiPShown()) {
                this.wouldBeInPip = false;
            }
        }
        if ((this.drawBackground || this.transitionParams.animateDrawBackground) && this.currentBackgroundDrawable != null && ((this.currentPosition == null || (isDrawSelectionBackground() && (this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()))) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()))) {
            float f3 = this.alphaInternal;
            if (z) {
                f3 *= getAlpha();
            }
            if (hasSelectionOverlay()) {
                this.currentSelectedBackgroundAlpha = 0.0f;
                int i18 = (int) (f3 * 255.0f);
                this.currentBackgroundDrawable.setAlpha(i18);
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                if (drawable2 != null && this.currentPosition == null) {
                    drawable2.setAlpha(i18);
                    drawable2.draw(canvas);
                }
            } else {
                if (this.isHighlightedAnimated) {
                    this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    float highlightAlpha = getHighlightAlpha();
                    this.currentSelectedBackgroundAlpha = highlightAlpha;
                    if (this.currentPosition == null) {
                        this.currentBackgroundSelectedDrawable.setAlpha((int) (highlightAlpha * f3 * 255.0f));
                        this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                    }
                } else if (this.selectedBackgroundProgress != 0.0f && ((groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments)) {
                    this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    float f4 = this.selectedBackgroundProgress;
                    this.currentSelectedBackgroundAlpha = f4;
                    this.currentBackgroundSelectedDrawable.setAlpha((int) (f4 * f3 * 255.0f));
                    this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                    if (this.currentBackgroundDrawable.getGradientShader() == null) {
                        drawable2 = null;
                    }
                } else {
                    if (isDrawSelectionBackground() && (this.currentPosition == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument() || getBackground() != null)) {
                        if (this.currentPosition != null) {
                            canvas.save();
                        }
                        f2 = 1.0f;
                        this.currentSelectedBackgroundAlpha = 1.0f;
                        this.currentBackgroundSelectedDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundSelectedDrawable.drawCached(canvas, this.backgroundCacheParams);
                        if (this.currentPosition != null) {
                            canvas.restore();
                        }
                    } else {
                        f2 = 1.0f;
                        this.currentSelectedBackgroundAlpha = 0.0f;
                        this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    }
                    if (drawable2 != null && this.currentPosition == null) {
                        drawable2.setAlpha((int) (f3 * 255.0f));
                        drawable2.draw(canvas);
                    }
                    if (this.transitionParams.changePinnedBottomProgress != f2 && this.currentPosition == null) {
                        if (!this.currentMessageObject.isOutOwner()) {
                            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable(str3);
                            Rect bounds = this.currentBackgroundDrawable.getBounds();
                            messageDrawable2.setBounds(bounds.left, bounds.top, bounds.right + AndroidUtilities.dp(6.0f), bounds.bottom);
                            canvas.save();
                            canvas.translate(-f, 0.0f);
                            canvas.clipRect(bounds.right - AndroidUtilities.dp(16.0f), bounds.bottom - AndroidUtilities.dp(16.0f), bounds.right + AndroidUtilities.dp(16.0f), bounds.bottom);
                            int i19 = this.parentWidth;
                            int i20 = this.parentHeight;
                            if (i20 == 0) {
                                i19 = getParentWidth();
                                i20 = AndroidUtilities.displaySize.y;
                                if (getParent() instanceof View) {
                                    View view = (View) getParent();
                                    int measuredWidth = view.getMeasuredWidth();
                                    i5 = view.getMeasuredHeight();
                                    i4 = measuredWidth;
                                    float y = getY();
                                    float f5 = this.parentViewTopOffset;
                                    messageDrawable2.setTop((int) (y + f5), i4, i5, (int) f5, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                    messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                    messageDrawable2.draw(canvas);
                                    messageDrawable2.setAlpha(255);
                                    canvas.restore();
                                }
                            }
                            i4 = i19;
                            i5 = i20;
                            float y2 = getY();
                            float f52 = this.parentViewTopOffset;
                            messageDrawable2.setTop((int) (y2 + f52), i4, i5, (int) f52, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                            messageDrawable2.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                            messageDrawable2.draw(canvas);
                            messageDrawable2.setAlpha(255);
                            canvas.restore();
                        } else {
                            if (this.transitionParams.drawPinnedBottomBackground) {
                                messageDrawable = (Theme.MessageDrawable) getThemedDrawable(str2);
                            } else {
                                messageDrawable = (Theme.MessageDrawable) getThemedDrawable(str);
                            }
                            messageDrawable.setAlpha((int) (((this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                            Rect bounds2 = this.currentBackgroundDrawable.getBounds();
                            messageDrawable.setBounds(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.top, bounds2.right, bounds2.bottom);
                            canvas.save();
                            canvas.translate(f, 0.0f);
                            canvas.clipRect(bounds2.left - AndroidUtilities.dp(6.0f), bounds2.bottom - AndroidUtilities.dp(16.0f), bounds2.left + AndroidUtilities.dp(18.0f), bounds2.bottom);
                            messageDrawable.draw(canvas);
                            messageDrawable.setAlpha(255);
                            canvas.restore();
                        }
                    }
                }
                f2 = 1.0f;
                if (drawable2 != null) {
                    drawable2.setAlpha((int) (f3 * 255.0f));
                    drawable2.draw(canvas);
                }
                if (this.transitionParams.changePinnedBottomProgress != f2) {
                    if (!this.currentMessageObject.isOutOwner()) {
                    }
                }
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 != null && messageObject2.isRoundVideo()) {
            this.currentBackgroundDrawable.setRoundingRadius(0.0f);
        }
        canvas.restoreToCount(saveCount);
    }

    private void animateCheckboxTranslation() {
        boolean z = this.checkBoxVisible;
        if (z || this.checkBoxAnimationInProgress) {
            if ((z && this.checkBoxAnimationProgress == 1.0f) || (!z && this.checkBoxAnimationProgress == 0.0f)) {
                this.checkBoxAnimationInProgress = false;
            }
            this.checkBoxTranslation = (int) Math.ceil((z ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            if (!this.currentMessageObject.isOutOwner()) {
                updateTranslation();
            }
            if (!this.checkBoxAnimationInProgress) {
                return;
            }
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long j = elapsedRealtime - this.lastCheckBoxAnimationTime;
            this.lastCheckBoxAnimationTime = elapsedRealtime;
            if (this.checkBoxVisible) {
                float f = this.checkBoxAnimationProgress + (((float) j) / 200.0f);
                this.checkBoxAnimationProgress = f;
                if (f > 1.0f) {
                    this.checkBoxAnimationProgress = 1.0f;
                }
            } else {
                float f2 = this.checkBoxAnimationProgress - (((float) j) / 200.0f);
                this.checkBoxAnimationProgress = f2;
                if (f2 <= 0.0f) {
                    this.checkBoxAnimationProgress = 0.0f;
                }
            }
            invalidate();
            ((View) getParent()).invalidate();
        }
    }

    public boolean drawBackgroundInParent() {
        MessageObject messageObject;
        if (!this.canDrawBackgroundInParent || (messageObject = this.currentMessageObject) == null || !messageObject.isOutOwner()) {
            return false;
        }
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.getCurrentColor("chat_outBubbleGradient") != null : Theme.getColorOrNull("chat_outBubbleGradient") != null;
    }

    public void drawCommentButton(Canvas canvas, float f) {
        if (this.drawSideButton != 3) {
            return;
        }
        int dp = AndroidUtilities.dp(32.0f);
        if (this.commentLayout != null) {
            this.sideStartY -= AndroidUtilities.dp(18.0f);
            dp += AndroidUtilities.dp(18.0f);
        }
        RectF rectF = this.rect;
        float f2 = this.sideStartX;
        rectF.set(f2, this.sideStartY, AndroidUtilities.dp(32.0f) + f2, this.sideStartY + dp);
        applyServiceShaderMatrix();
        String str = "paintChatActionBackground";
        if (f != 1.0f) {
            int alpha = getThemedPaint(str).getAlpha();
            getThemedPaint(str).setAlpha((int) (alpha * f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(str));
            getThemedPaint(str).setAlpha(alpha);
        } else {
            RectF rectF2 = this.rect;
            float dp2 = AndroidUtilities.dp(16.0f);
            float dp3 = AndroidUtilities.dp(16.0f);
            if (this.sideButtonPressed) {
                str = "paintChatActionBackgroundSelected";
            }
            canvas.drawRoundRect(rectF2, dp2, dp3, getThemedPaint(str));
        }
        if (hasGradientService()) {
            if (f != 1.0f) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            } else {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
        }
        Drawable themeDrawable = Theme.getThemeDrawable("drawableCommentSticker");
        BaseCell.setDrawableBounds(themeDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
        if (f != 1.0f) {
            themeDrawable.setAlpha((int) (f * 255.0f));
            themeDrawable.draw(canvas);
            themeDrawable.setAlpha(255);
        } else {
            themeDrawable.draw(canvas);
        }
        if (this.commentLayout == null) {
            return;
        }
        Theme.chat_stickerCommentCountPaint.setColor(getThemedColor("chat_stickerReplyNameText"));
        Theme.chat_stickerCommentCountPaint.setAlpha((int) (f * 255.0f));
        if (this.transitionParams.animateComments) {
            if (this.transitionParams.animateCommentsLayout != null) {
                canvas.save();
                TextPaint textPaint = Theme.chat_stickerCommentCountPaint;
                double d = this.transitionParams.animateChangeProgress;
                Double.isNaN(d);
                double d2 = f;
                Double.isNaN(d2);
                textPaint.setAlpha((int) ((1.0d - d) * 255.0d * d2));
                canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.transitionParams.animateTotalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
                this.transitionParams.animateCommentsLayout.draw(canvas);
                canvas.restore();
            }
            Theme.chat_stickerCommentCountPaint.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
        }
        canvas.save();
        canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.totalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
        this.commentLayout.draw(canvas);
        canvas.restore();
    }

    public void applyServiceShaderMatrix() {
        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
    }

    private void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider != null) {
            resourcesProvider.applyServiceShaderMatrix(i, i2, f, f2);
        } else {
            Theme.applyServiceShaderMatrix(i, i2, f, f2);
        }
    }

    public boolean hasOutboundsContent() {
        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable;
        if (getAlpha() != 1.0f) {
            return false;
        }
        if ((this.transitionParams.transitionBotButtons.isEmpty() || !this.transitionParams.animateBotButtonsChanged) && this.botButtons.isEmpty() && this.drawSideButton == 0 && ((!this.drawNameLayout || this.nameLayout == null || (swapAnimatedEmojiDrawable = this.currentNameStatusDrawable) == null || swapAnimatedEmojiDrawable.getDrawable() == null) && (((emojiGroupedSpans = this.animatedEmojiStack) == null || emojiGroupedSpans.holders.isEmpty()) && (!this.drawTopic || this.topicButton == null || ((groupedMessagePosition = this.currentPosition) != null && (groupedMessagePosition.minY != 0 || groupedMessagePosition.minX != 0)))))) {
            if (this.currentMessagesGroup != null) {
                return false;
            }
            TransitionParams transitionParams = this.transitionParams;
            if (((!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) && (transitionParams.animateChangeProgress == 1.0f || !transitionParams.animateMessageText)) || transitionParams.animateOutAnimateEmoji == null || this.transitionParams.animateOutAnimateEmoji.holders.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    public void drawOutboundsContent(Canvas canvas) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        float f;
        float f2;
        float f3;
        int themedColor;
        float f4;
        float f5 = 1.0f;
        if (!this.enterTransitionInProgress) {
            drawAnimatedEmojis(canvas, 1.0f);
        }
        if (this.currentNameStatusDrawable != null && this.drawNameLayout && this.nameLayout != null) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                themedColor = getThemedColor("chat_stickerNameText");
                if (this.currentMessageObject.isOutOwner()) {
                    this.nameX = AndroidUtilities.dp(28.0f);
                } else {
                    this.nameX = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                }
                this.nameY = this.layoutHeight - AndroidUtilities.dp(38.0f);
                this.nameX -= this.nameOffsetX;
            } else {
                float f6 = 11.0f;
                if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                    this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp(11.0f)) - this.nameOffsetX) + getExtraTextX();
                } else {
                    float f7 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft;
                    if (this.mediaBackground || !this.drawPinnedBottom) {
                        f6 = 17.0f;
                    }
                    this.nameX = ((f7 + AndroidUtilities.dp(f6)) - this.nameOffsetX) + getExtraTextX();
                }
                if (this.currentUser != null) {
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null && messageDrawable.hasGradient()) {
                        themedColor = getThemedColor("chat_messageTextOut");
                    } else {
                        themedColor = getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentUser.id));
                    }
                } else if (this.currentChat != null) {
                    if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                        Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                        if (messageDrawable2 != null && messageDrawable2.hasGradient()) {
                            themedColor = getThemedColor("chat_messageTextOut");
                        } else {
                            themedColor = getThemedColor("chat_outForwardedNameText");
                        }
                    } else if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                        themedColor = Theme.changeColorAccent(getThemedColor(AvatarDrawable.getNameColorNameForId(5L)));
                    } else if (this.currentMessageObject.isOutOwner()) {
                        themedColor = getThemedColor("chat_outForwardedNameText");
                    } else {
                        themedColor = getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentChat.id));
                    }
                } else {
                    themedColor = getThemedColor(AvatarDrawable.getNameColorNameForId(0L));
                }
                this.nameY = AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
                if (transitionParams.backgroundChangeBounds) {
                    this.nameX += transitionParams.offsetLeft;
                    this.nameY += transitionParams.offsetTop - getTranslationY();
                }
            }
            this.nameX += this.animationOffsetX;
            float f8 = this.nameY;
            TransitionParams transitionParams2 = this.transitionParams;
            this.nameY = f8 + transitionParams2.deltaTop;
            if (!transitionParams2.animateSign) {
                f4 = this.nameX;
            } else {
                f4 = this.transitionParams.animateNameX + ((this.nameX - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress);
            }
            this.currentNameStatusDrawable.setBounds((int) (Math.abs(f4) + this.nameLayoutWidth + AndroidUtilities.dp(2.0f)), (((int) this.nameY) + (this.nameLayout.getHeight() / 2)) - AndroidUtilities.dp(10.0f), (int) (Math.abs(f4) + this.nameLayoutWidth + AndroidUtilities.dp(22.0f)), (int) (this.nameY + (this.nameLayout.getHeight() / 2) + AndroidUtilities.dp(10.0f)));
            this.currentNameStatusDrawable.setColor(Integer.valueOf(ColorUtils.setAlphaComponent(themedColor, 115)));
            this.currentNameStatusDrawable.draw(canvas);
        }
        if (this.drawTopic && this.topicButton != null && ((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0))) {
            if (!this.isRoundVideo || this.hasLinkPreview) {
                f = 1.0f;
            } else {
                f = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
                TransitionParams transitionParams3 = this.transitionParams;
                if (transitionParams3.animatePlayingRound) {
                    if (this.isPlayingRound) {
                        f3 = 1.0f - transitionParams3.animateChangeProgress;
                    } else {
                        f3 = transitionParams3.animateChangeProgress;
                    }
                    f *= f3;
                } else if (this.isPlayingRound) {
                    f = 0.0f;
                }
            }
            if (!this.transitionParams.animateForwardedLayout) {
                f2 = 1.0f;
            } else if (!this.currentMessageObject.needDrawForwarded()) {
                f2 = 1.0f - this.transitionParams.animateChangeProgress;
            } else {
                f2 = this.transitionParams.animateChangeProgress;
            }
            this.topicButton.drawOutbounds(canvas, f2 * f);
        }
        if (!this.transitionParams.transitionBotButtons.isEmpty()) {
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4.animateBotButtonsChanged) {
                drawBotButtons(canvas, transitionParams4.transitionBotButtons, 1.0f - this.transitionParams.animateChangeProgress);
            }
        }
        if (!this.botButtons.isEmpty()) {
            ArrayList<BotButton> arrayList = this.botButtons;
            TransitionParams transitionParams5 = this.transitionParams;
            if (transitionParams5.animateBotButtonsChanged) {
                f5 = transitionParams5.animateChangeProgress;
            }
            drawBotButtons(canvas, arrayList, f5);
        }
        drawSideButton(canvas);
    }

    public void drawAnimatedEmojis(Canvas canvas, float f) {
        drawAnimatedEmojiMessageText(canvas, f);
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas, float f) {
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateChangeProgress != 1.0f && transitionParams.animateMessageText) {
            canvas.save();
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                Rect bounds = messageDrawable.getBounds();
                if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                } else {
                    canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                }
            }
            drawAnimatedEmojiMessageText(canvas, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutAnimateEmoji, false, f * (1.0f - this.transitionParams.animateChangeProgress));
            drawAnimatedEmojiMessageText(canvas, this.currentMessageObject.textLayoutBlocks, this.animatedEmojiStack, true, f * this.transitionParams.animateChangeProgress);
            canvas.restore();
            return;
        }
        drawAnimatedEmojiMessageText(canvas, this.currentMessageObject.textLayoutBlocks, this.animatedEmojiStack, true, f);
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas, ArrayList<MessageObject.TextLayoutBlock> arrayList, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, boolean z, float f) {
        int size;
        int i;
        if (arrayList == null || arrayList.isEmpty() || f == 0.0f) {
            return;
        }
        if (z) {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        } else {
            size = arrayList.size();
            i = 0;
        }
        int i2 = this.textY;
        float f2 = i2;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f3 = transitionParams.animateFromTextY;
            float f4 = transitionParams.animateChangeProgress;
            f2 = (f3 * (1.0f - f4)) + (i2 * f4);
        }
        float f5 = f2;
        for (int i3 = i; i3 <= size && i3 < arrayList.size(); i3++) {
            if (i3 >= 0) {
                MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i3);
                canvas.save();
                canvas.translate(this.textX - (textLayoutBlock.isRtl() ? (int) Math.ceil(this.currentMessageObject.textXOffset) : 0), textLayoutBlock.textYOffset + f5 + this.transitionYOffsetForDrawables);
                float f6 = textLayoutBlock.textYOffset + f5 + this.transitionYOffsetForDrawables;
                boolean z2 = this.transitionParams.messageEntering;
                AnimatedEmojiSpan.drawAnimatedEmojis(canvas, textLayoutBlock.textLayout, emojiGroupedSpans, 0.0f, textLayoutBlock.spoilers, 0.0f, 0.0f, f6, f);
                canvas.restore();
            }
        }
    }

    public void drawAnimatedEmojiCaption(Canvas canvas, float f) {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            drawAnimatedEmojiCaption(canvas, this.captionLayout, this.animatedEmojiStack, f);
            return;
        }
        drawAnimatedEmojiCaption(canvas, transitionParams.animateOutCaptionLayout, this.transitionParams.animateOutAnimateEmoji, (1.0f - this.transitionParams.animateChangeProgress) * f);
        drawAnimatedEmojiCaption(canvas, this.captionLayout, this.animatedEmojiStack, f * this.transitionParams.animateChangeProgress);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(8:16|(3:18|(1:20)(2:22|(6:24|25|26|27|28|29)(2:33|(1:37)))|21)|38|25|26|27|28|29) */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x008a, code lost:
        r12 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x008b, code lost:
        org.telegram.messenger.FileLog.e(r12);
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawAnimatedEmojiCaption(Canvas canvas, Layout layout, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, float f) {
        float f2;
        float f3;
        if (layout != null) {
            if ((this.currentMessageObject.deleted && this.currentPosition != null) || f <= 0.0f) {
                return;
            }
            canvas.save();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                f *= groupedMessages.transitionParams.captionEnterProgress;
            }
            float f4 = f;
            if (f4 == 0.0f) {
                return;
            }
            float f5 = this.captionY;
            float f6 = this.captionX;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner) {
                if (transitionParams.transformGroupToSingleMessage) {
                    f5 -= getTranslationY();
                    f3 = this.transitionParams.deltaLeft;
                } else if (transitionParams.moveCaption) {
                    float f7 = this.captionX;
                    TransitionParams transitionParams2 = this.transitionParams;
                    float f8 = transitionParams2.animateChangeProgress;
                    float f9 = (f7 * f8) + (transitionParams2.captionFromX * (1.0f - f8));
                    float f10 = (this.captionY * f8) + (transitionParams2.captionFromY * (1.0f - f8));
                    f6 = f9;
                    f2 = f10;
                    canvas.translate(f6, f2);
                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, layout, emojiGroupedSpans, 0.0f, this.captionSpoilers, 0.0f, 0.0f, f2, f4);
                    canvas.restore();
                } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                    f3 = this.transitionParams.deltaLeft;
                }
                f6 += f3;
            }
            f2 = f5;
            canvas.translate(f6, f2);
            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, layout, emojiGroupedSpans, 0.0f, this.captionSpoilers, 0.0f, 0.0f, f2, f4);
            canvas.restore();
        }
    }

    private void drawSideButton(Canvas canvas) {
        if (this.drawSideButton != 0) {
            if (this.currentMessageObject.isOutOwner()) {
                float dp = this.transitionParams.lastBackgroundLeft - AndroidUtilities.dp(40.0f);
                this.sideStartX = dp;
                MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
                if (groupedMessages != null) {
                    this.sideStartX = dp + (groupedMessages.transitionParams.offsetLeft - this.animationOffsetX);
                }
            } else {
                float dp2 = this.transitionParams.lastBackgroundRight + AndroidUtilities.dp(8.0f);
                this.sideStartX = dp2;
                MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                    this.sideStartX = dp2 + (groupedMessages2.transitionParams.offsetRight - this.animationOffsetX);
                }
            }
            float dp3 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(41.0f);
            this.sideStartY = dp3;
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject.type == 19 && messageObject.textWidth < this.timeTextWidth) {
                this.sideStartY = dp3 - AndroidUtilities.dp(22.0f);
            }
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                float f = this.sideStartY;
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages3.transitionParams;
                float f2 = f + transitionParams.offsetBottom;
                this.sideStartY = f2;
                if (transitionParams.backgroundChangeBounds) {
                    this.sideStartY = f2 - getTranslationY();
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            float f3 = 0.0f;
            if (!reactionsLayoutInBubble.isSmall) {
                if (this.isRoundVideo) {
                    this.sideStartY -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                } else if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
                    this.sideStartY -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                }
            }
            if (!this.currentMessageObject.isOutOwner() && this.isRoundVideo && !this.hasLinkPreview) {
                float dp4 = this.isAvatarVisible ? (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f : AndroidUtilities.dp(50.0f);
                float videoTranscriptionProgress = this.isPlayingRound ? (1.0f - getVideoTranscriptionProgress()) * dp4 : 0.0f;
                if (this.isPlayingRound) {
                    f3 = AndroidUtilities.dp(28.0f) * (1.0f - getVideoTranscriptionProgress());
                }
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animatePlayingRound) {
                    videoTranscriptionProgress = (this.isPlayingRound ? transitionParams2.animateChangeProgress : 1.0f - transitionParams2.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress()) * dp4;
                    f3 = AndroidUtilities.dp(28.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                }
                this.sideStartX -= videoTranscriptionProgress;
                this.sideStartY -= f3;
            }
            if (this.drawSideButton == 3) {
                if (this.enterTransitionInProgress && !this.currentMessageObject.isVoice()) {
                    return;
                }
                drawCommentButton(canvas, 1.0f);
                return;
            }
            RectF rectF = this.rect;
            float f4 = this.sideStartX;
            rectF.set(f4, this.sideStartY, AndroidUtilities.dp(32.0f) + f4, this.sideStartY + AndroidUtilities.dp(32.0f));
            applyServiceShaderMatrix();
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            if (this.drawSideButton == 2) {
                Drawable themedDrawable = getThemedDrawable("drawableGoIcon");
                if (this.currentMessageObject.isOutOwner()) {
                    BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(10.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
                    canvas.save();
                    canvas.scale(-1.0f, 1.0f, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                } else {
                    BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(12.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
                }
                themedDrawable.draw(canvas);
                if (!this.currentMessageObject.isOutOwner()) {
                    return;
                }
                canvas.restore();
                return;
            }
            Drawable themedDrawable2 = getThemedDrawable("drawableShareIcon");
            BaseCell.setDrawableBounds(themedDrawable2, this.sideStartX + AndroidUtilities.dp(8.0f), this.sideStartY + AndroidUtilities.dp(9.0f));
            themedDrawable2.draw(canvas);
        }
    }

    public void setTimeAlpha(float f) {
        this.timeAlpha = f;
    }

    public float getTimeAlpha() {
        return this.timeAlpha;
    }

    public int getBackgroundDrawableLeft() {
        int dp;
        int dp2;
        int i;
        int i2 = 0;
        if (this.currentMessageObject.isOutOwner()) {
            if (this.isRoundVideo) {
                return (this.layoutWidth - this.backgroundWidth) - ((int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f)));
            }
            int i3 = this.layoutWidth - this.backgroundWidth;
            if (this.mediaBackground) {
                i2 = AndroidUtilities.dp(9.0f);
            }
            return i3 - i2;
        }
        int i4 = 3;
        if (this.isRoundVideo) {
            if (this.isChat && this.isAvatarVisible) {
                i2 = 48;
            }
            dp = AndroidUtilities.dp(i2 + 3) + ((int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
        } else {
            if (this.isChat && this.isAvatarVisible) {
                i2 = 48;
            }
            if (this.mediaBackground) {
                i4 = 9;
            }
            dp = AndroidUtilities.dp(i2 + i4);
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.isDocuments && (i = this.currentPosition.leftSpanOffset) != 0) {
            dp += (int) Math.ceil((i / 1000.0f) * getGroupPhotosWidth());
        }
        if (this.isRoundVideo) {
            if (!this.drawPinnedBottom) {
                return dp;
            }
            dp2 = (int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress()));
        } else if (this.mediaBackground || !this.drawPinnedBottom) {
            return dp;
        } else {
            dp2 = AndroidUtilities.dp(6.0f);
        }
        return dp + dp2;
    }

    public int getBackgroundDrawableRight() {
        int dp;
        int backgroundDrawableLeft;
        int i = this.backgroundWidth;
        if (this.isRoundVideo) {
            dp = i - ((int) (getVideoTranscriptionProgress() * AndroidUtilities.dp(3.0f)));
            if (this.drawPinnedBottom && this.currentMessageObject.isOutOwner()) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
            if (this.drawPinnedBottom && !this.currentMessageObject.isOutOwner()) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
            backgroundDrawableLeft = getBackgroundDrawableLeft();
        } else {
            dp = i - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            if (!this.mediaBackground && this.drawPinnedBottom) {
                dp -= AndroidUtilities.dp(6.0f);
            }
            backgroundDrawableLeft = getBackgroundDrawableLeft();
        }
        return backgroundDrawableLeft + dp;
    }

    public int getBackgroundDrawableTop() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int i = 0;
        int dp = (groupedMessagePosition == null || (groupedMessagePosition.flags & 4) != 0) ? 0 : 0 - AndroidUtilities.dp(3.0f);
        if (!this.drawPinnedTop) {
            i = AndroidUtilities.dp(1.0f);
        }
        int i2 = dp + i;
        return (this.mediaBackground || !this.drawPinnedTop) ? i2 : i2 - AndroidUtilities.dp(1.0f);
    }

    public int getBackgroundDrawableBottom() {
        int i;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int i2 = 0;
        if (groupedMessagePosition != null) {
            int i3 = 4;
            i = (groupedMessagePosition.flags & 4) == 0 ? AndroidUtilities.dp(3.0f) + 0 : 0;
            if ((this.currentPosition.flags & 8) == 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i3 = 3;
                }
                i += AndroidUtilities.dp(i3);
            }
        } else {
            i = 0;
        }
        boolean z = this.drawPinnedBottom;
        if (!z || !this.drawPinnedTop) {
            if (z) {
                i2 = AndroidUtilities.dp(1.0f);
            } else {
                i2 = AndroidUtilities.dp(2.0f);
            }
        }
        int backgroundDrawableTop = ((getBackgroundDrawableTop() + this.layoutHeight) - i2) + i;
        if (!this.mediaBackground) {
            if (this.drawPinnedTop) {
                backgroundDrawableTop += AndroidUtilities.dp(1.0f);
            }
            return this.drawPinnedBottom ? backgroundDrawableTop + AndroidUtilities.dp(1.0f) : backgroundDrawableTop;
        }
        return backgroundDrawableTop;
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x008b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackground(Canvas canvas, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3, int i5) {
        int i6;
        int i7;
        Theme.MessageDrawable messageDrawable;
        if (this.currentMessageObject.isOutOwner()) {
            if (!this.mediaBackground && !z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutSelected" : "drawableMsgOut");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgOutMediaSelected" : "drawableMsgOutMedia");
            }
        } else if (!this.mediaBackground && !z2) {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInSelected" : "drawableMsgIn");
        } else {
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(z3 ? "drawableMsgInMediaSelected" : "drawableMsgInMedia");
        }
        int i8 = this.parentWidth;
        int i9 = this.parentHeight;
        if (i9 == 0) {
            i8 = getParentWidth();
            i9 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i7 = view.getMeasuredHeight();
                i6 = measuredWidth;
                messageDrawable = this.currentBackgroundDrawable;
                if (messageDrawable != null) {
                    messageDrawable.setTop(i5, i6, i7, (int) this.parentViewTopOffset, this.blurredViewTopOffset, this.blurredViewBottomOffset, z, z2);
                    Drawable shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
                    if (shadowDrawable != null) {
                        shadowDrawable.setAlpha((int) (getAlpha() * 255.0f));
                        shadowDrawable.setBounds(i, i2, i3, i4);
                        shadowDrawable.draw(canvas);
                        shadowDrawable.setAlpha(255);
                    }
                    this.currentBackgroundDrawable.setAlpha((int) (getAlpha() * 255.0f));
                    this.currentBackgroundDrawable.setBounds(i, i2, i3, i4);
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    this.currentBackgroundDrawable.setAlpha(255);
                }
                animateCheckboxTranslation();
            }
        }
        i6 = i8;
        i7 = i9;
        messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable != null) {
        }
        animateCheckboxTranslation();
    }

    public boolean hasNameLayout() {
        if (!this.drawNameLayout || this.nameLayout == null) {
            if (this.drawForwardedName) {
                StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                if (staticLayoutArr[0] != null && staticLayoutArr[1] != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition == null) {
                        return true;
                    }
                    if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                        return true;
                    }
                }
            }
            return this.replyNameLayout != null || this.drawTopic;
        }
        return true;
    }

    public boolean isDrawNameLayout() {
        return this.drawNameLayout && this.nameLayout != null;
    }

    public boolean isDrawTopic() {
        return this.drawTopic;
    }

    public float getDrawTopicHeight() {
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            return messageTopicButton.height();
        }
        return 0.0f;
    }

    public boolean isAdminLayoutChanged() {
        return !TextUtils.equals(this.lastPostAuthor, this.currentMessageObject.messageOwner.post_author);
    }

    /* JADX WARN: Removed duplicated region for block: B:151:0x08ac  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0912  */
    /* JADX WARN: Removed duplicated region for block: B:166:0x0919  */
    /* JADX WARN: Removed duplicated region for block: B:198:0x09fd  */
    /* JADX WARN: Removed duplicated region for block: B:212:0x0a1e  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x0adb  */
    /* JADX WARN: Removed duplicated region for block: B:232:0x0a76  */
    /* JADX WARN: Removed duplicated region for block: B:241:0x0a86  */
    /* JADX WARN: Removed duplicated region for block: B:251:0x0ae7  */
    /* JADX WARN: Removed duplicated region for block: B:364:0x12f8  */
    /* JADX WARN: Removed duplicated region for block: B:366:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:585:0x0505  */
    /* JADX WARN: Removed duplicated region for block: B:586:0x04dd  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x04ba  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x04db  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x04e8  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0511  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawNamesLayout(Canvas canvas, float f) {
        int i;
        float f2;
        String str;
        boolean z;
        boolean z2;
        float f3;
        String str2;
        boolean z3;
        int i2;
        int i3;
        Paint paint;
        int alphaComponent;
        int i4;
        int i5;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        float backgroundDrawableRight;
        float f9;
        float f10;
        float f11;
        boolean z4;
        int i6;
        float f12;
        int i7;
        float f13;
        ChatMessageCellDelegate chatMessageCellDelegate;
        float f14;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int dp;
        int extraTextX;
        int i8;
        float dp2;
        float dp3;
        TransitionParams transitionParams;
        int i9;
        int dp4;
        float f15;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        float f16;
        String str3;
        boolean z5;
        int alpha;
        int i10;
        float f17;
        int alpha2;
        MessageTopicButton messageTopicButton;
        float f18;
        float f19;
        boolean z6;
        int i11;
        float f20;
        int i12;
        MessageTopicButton messageTopicButton2;
        float f21;
        int themedColor;
        float dp5;
        float lineWidth;
        float dp6;
        float lineWidth2;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        float f22;
        MessageObject.GroupedMessages groupedMessages;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j = elapsedRealtime - this.lastNamesAnimationTime;
        if (j > 17) {
            j = 17;
        }
        this.lastNamesAnimationTime = elapsedRealtime;
        if (!this.currentMessageObject.deleted || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.size() < 1) {
            if (f != 1.0f) {
                this.rect.set(0.0f, 0.0f, getMaxNameWidth(), getMeasuredHeight());
                i = canvas.saveLayerAlpha(this.rect, (int) (255.0f * f), 31);
            } else {
                i = Integer.MIN_VALUE;
            }
            if (!this.isRoundVideo || this.hasLinkPreview) {
                f2 = 1.0f;
            } else {
                f2 = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animatePlayingRound) {
                    if (this.isPlayingRound) {
                        f22 = 1.0f - transitionParams2.animateChangeProgress;
                    } else {
                        f22 = transitionParams2.animateChangeProgress;
                    }
                    f2 *= f22;
                } else if (this.isPlayingRound) {
                    f2 = 0.0f;
                }
            }
            String str4 = "paintChatActionBackground";
            if (this.drawNameLayout && this.nameLayout != null) {
                canvas.save();
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    Theme.chat_namePaint.setColor(getThemedColor("chat_stickerNameText"));
                    if (this.currentMessageObject.isOutOwner()) {
                        this.nameX = AndroidUtilities.dp(28.0f);
                    } else {
                        this.nameX = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                    }
                    this.nameY = this.layoutHeight - AndroidUtilities.dp(38.0f);
                    float f23 = (!this.currentMessageObject.isOut() || (!this.checkBoxVisible && !this.checkBoxAnimationInProgress)) ? 1.0f : 1.0f - this.checkBoxAnimationProgress;
                    this.rect.set(((int) this.nameX) - AndroidUtilities.dp(12.0f), ((int) this.nameY) - AndroidUtilities.dp(5.0f), ((int) this.nameX) + AndroidUtilities.dp(12.0f) + this.nameWidth, ((int) this.nameY) + AndroidUtilities.dp(22.0f));
                    int alpha3 = getThemedPaint(str4).getAlpha();
                    getThemedPaint(str4).setAlpha((int) (alpha3 * f23 * f2));
                    applyServiceShaderMatrix();
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint(str4));
                    if (hasGradientService()) {
                        int alpha4 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha4 * this.timeAlpha * f2));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha4);
                    }
                    if (this.viaSpan1 != null || this.viaSpan2 != null) {
                        int alpha5 = (((int) (Color.alpha(getThemedColor("chat_stickerViaBotNameText")) * f23)) << 24) | (getThemedColor("chat_stickerViaBotNameText") & 16777215);
                        TypefaceSpan typefaceSpan = this.viaSpan1;
                        if (typefaceSpan != null) {
                            typefaceSpan.setColor(alpha5);
                        }
                        TypefaceSpan typefaceSpan2 = this.viaSpan2;
                        if (typefaceSpan2 != null) {
                            typefaceSpan2.setColor(alpha5);
                        }
                    }
                    this.nameX -= this.nameOffsetX;
                    getThemedPaint(str4).setAlpha(alpha3);
                } else {
                    if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                        this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp(11.0f)) - this.nameOffsetX) + getExtraTextX();
                    } else {
                        this.nameX = (((this.backgroundDrawableLeft + this.transitionParams.deltaLeft) + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f)) - this.nameOffsetX) + getExtraTextX();
                    }
                    if (this.currentUser != null) {
                        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                        if (messageDrawable != null && messageDrawable.hasGradient()) {
                            Theme.chat_namePaint.setColor(getThemedColor("chat_messageTextOut"));
                        } else {
                            Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentUser.id)));
                        }
                    } else if (this.currentChat != null) {
                        if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                            if (messageDrawable2 != null && messageDrawable2.hasGradient()) {
                                Theme.chat_namePaint.setColor(getThemedColor("chat_messageTextOut"));
                            } else {
                                Theme.chat_namePaint.setColor(getThemedColor("chat_outForwardedNameText"));
                            }
                        } else if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                            Theme.chat_namePaint.setColor(Theme.changeColorAccent(getThemedColor(AvatarDrawable.getNameColorNameForId(5L))));
                        } else if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_namePaint.setColor(getThemedColor("chat_outForwardedNameText"));
                        } else {
                            Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentChat.id)));
                        }
                    } else {
                        Theme.chat_namePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(0L)));
                    }
                    this.nameY = AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                    if (this.viaSpan1 != null || this.viaSpan2 != null) {
                        int themedColor2 = getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outViaBotNameText" : "chat_inViaBotNameText");
                        TypefaceSpan typefaceSpan3 = this.viaSpan1;
                        if (typefaceSpan3 != null) {
                            typefaceSpan3.setColor(themedColor2);
                        }
                        TypefaceSpan typefaceSpan4 = this.viaSpan2;
                        if (typefaceSpan4 != null) {
                            typefaceSpan4.setColor(themedColor2);
                        }
                    }
                }
                MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                if (groupedMessages2 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages2.transitionParams;
                    if (transitionParams3.backgroundChangeBounds) {
                        this.nameX += transitionParams3.offsetLeft;
                        this.nameY += transitionParams3.offsetTop - getTranslationY();
                    }
                }
                this.nameX += this.animationOffsetX;
                float f24 = this.nameY;
                TransitionParams transitionParams4 = this.transitionParams;
                this.nameY = f24 + transitionParams4.deltaTop;
                if (!transitionParams4.animateSign) {
                    f21 = this.nameX;
                } else {
                    f21 = this.transitionParams.animateNameX + ((this.nameX - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress);
                }
                canvas.translate(f21, this.nameY);
                this.nameLayout.draw(canvas);
                canvas.restore();
                if (this.adminLayout != null) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        themedColor = getThemedColor("chat_stickerReplyNameText");
                    } else if (this.currentMessageObject.isOutOwner()) {
                        themedColor = getThemedColor(isDrawSelectionBackground() ? "chat_outAdminSelectedText" : "chat_outAdminText");
                    } else {
                        themedColor = getThemedColor(isDrawSelectionBackground() ? "chat_adminSelectedText" : "chat_adminText");
                    }
                    Theme.chat_adminPaint.setColor(themedColor);
                    canvas.save();
                    MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                    if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                        int groupPhotosWidth = getGroupPhotosWidth();
                        int i13 = 0;
                        int i14 = 0;
                        while (i13 < this.currentMessagesGroup.posArray.size()) {
                            if (this.currentMessagesGroup.posArray.get(i13).minY != 0) {
                                break;
                            }
                            double d = i14;
                            double ceil = Math.ceil(((groupedMessagePosition3.pw + groupedMessagePosition3.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                            Double.isNaN(d);
                            i14 = (int) (d + ceil);
                            i13++;
                            str4 = str4;
                        }
                        str = str4;
                        if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            dp6 = (this.backgroundDrawableLeft + i14) - AndroidUtilities.dp(17.0f);
                            lineWidth2 = this.adminLayout.getLineWidth(0);
                        } else {
                            dp6 = (this.backgroundDrawableLeft + i14) - AndroidUtilities.dp(11.0f);
                            lineWidth2 = this.adminLayout.getLineWidth(0);
                        }
                        dp5 = (dp6 - lineWidth2) - (getExtraTextX() + AndroidUtilities.dp(8.0f));
                        if (!this.currentMessageObject.isOutOwner()) {
                            lineWidth = AndroidUtilities.dp(48.0f);
                        }
                        canvas.translate(dp5, this.nameY + AndroidUtilities.dp(0.5f));
                        if (this.transitionParams.animateSign) {
                            Theme.chat_adminPaint.setAlpha((int) (Color.alpha(themedColor) * this.transitionParams.animateChangeProgress));
                        }
                        this.adminLayout.draw(canvas);
                        canvas.restore();
                        z = this.drawForwardedName;
                        z2 = this.replyNameLayout != null;
                        StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                        int i15 = this.forwardedNameWidth;
                        if (!this.transitionParams.animateForwardedLayout) {
                            f3 = 1.0f;
                        } else if (!this.currentMessageObject.needDrawForwarded()) {
                            TransitionParams transitionParams5 = this.transitionParams;
                            staticLayoutArr = transitionParams5.animatingForwardedNameLayout;
                            f3 = 1.0f - transitionParams5.animateChangeProgress;
                            i15 = transitionParams5.animateForwardNameWidth;
                            z = true;
                        } else {
                            f3 = this.transitionParams.animateChangeProgress;
                        }
                        if (z || staticLayoutArr[0] == null || staticLayoutArr[1] == null || !((groupedMessagePosition2 = this.currentPosition) == null || (groupedMessagePosition2.minY == 0 && groupedMessagePosition2.minX == 0))) {
                            str2 = str;
                            z3 = true;
                        } else {
                            MessageObject messageObject = this.currentMessageObject;
                            if (messageObject.type == 5 || messageObject.isAnyKindOfSticker()) {
                                Theme.chat_forwardNamePaint.setColor(getThemedColor("chat_stickerReplyNameText"));
                                MessageObject messageObject2 = this.currentMessageObject;
                                if (messageObject2.type == 19) {
                                    if (messageObject2.isOutOwner()) {
                                        if (this.currentMessageObject.needDrawForwarded()) {
                                            float dp7 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                                            this.forwardNameX = dp7;
                                            f19 = dp7 + this.transitionParams.deltaLeft;
                                        } else {
                                            f19 = this.transitionParams.animateForwardNameX;
                                        }
                                        f18 = f19 - Math.max(0.0f, (Math.max(AndroidUtilities.dp(14.0f) + i15, z2 ? Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f) : 0) + f19) - AndroidUtilities.displaySize.x);
                                    } else if (this.currentMessageObject.needDrawForwarded()) {
                                        f18 = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 11.0f : 17.0f) + getExtraTextX();
                                        this.forwardNameX = f18;
                                    } else {
                                        f18 = this.transitionParams.animateForwardNameX;
                                    }
                                    f16 = f18 - AndroidUtilities.dp(7.0f);
                                } else if (messageObject2.needDrawForwarded()) {
                                    if (this.currentMessageObject.isOutOwner()) {
                                        f16 = AndroidUtilities.dp(23.0f);
                                        this.forwardNameX = f16;
                                    } else {
                                        f16 = this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                                        this.forwardNameX = f16;
                                    }
                                } else {
                                    f16 = this.transitionParams.animateForwardNameX;
                                }
                                if (!this.currentMessageObject.isVoiceTranscriptionOpen() && ((this.currentMessageObject.isOutOwner() && this.currentMessageObject.type == 5 && this.transitionParams.animatePlayingRound) || this.isPlayingRound)) {
                                    f16 -= AndroidUtilities.dp(78.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress);
                                }
                                this.forwardNameY = AndroidUtilities.dp(12.0f) + ((!this.drawTopic || (messageTopicButton = this.topicButton) == null) ? 0 : messageTopicButton.height() + AndroidUtilities.dp(14.0f));
                                this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                                int dp8 = i15 + AndroidUtilities.dp(14.0f);
                                if (z2) {
                                    int i16 = (int) f16;
                                    str3 = str;
                                    this.rect.set(i16 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i16 - AndroidUtilities.dp(7.0f)) + Math.max(dp8, Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f)), this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f) + AndroidUtilities.dp(41.0f));
                                    z5 = false;
                                } else {
                                    str3 = str;
                                    int i17 = (int) f16;
                                    this.rect.set(i17 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i17 - AndroidUtilities.dp(7.0f)) + dp8, this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f));
                                    z5 = true;
                                }
                                applyServiceShaderMatrix();
                                if (f3 == 1.0f && f2 == 1.0f) {
                                    str2 = str3;
                                    alpha = -1;
                                } else {
                                    str2 = str3;
                                    alpha = getThemedPaint(str2).getAlpha();
                                    getThemedPaint(str2).setAlpha((int) (alpha * f3 * f2));
                                }
                                float f25 = f16;
                                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint(str2));
                                if (hasGradientService()) {
                                    if (f3 == 1.0f && f2 == 1.0f) {
                                        alpha2 = -1;
                                    } else {
                                        alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * f3 * f2));
                                    }
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    i10 = alpha2;
                                } else {
                                    i10 = -1;
                                }
                                if (alpha >= 0) {
                                    getThemedPaint(str2).setAlpha(alpha);
                                }
                                if (i10 >= 0) {
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(i10);
                                }
                                f17 = f25;
                            } else {
                                int dp9 = AndroidUtilities.dp(10.0f) + (this.drawNameLayout ? AndroidUtilities.dp(5.0f) + ((int) Theme.chat_namePaint.getTextSize()) : 0);
                                if (!this.drawTopic || (messageTopicButton2 = this.topicButton) == null) {
                                    i12 = 0;
                                } else {
                                    i12 = messageTopicButton2.height() + AndroidUtilities.dp((this.currentMessageObject.type != 0 ? 3 : 0) + 7);
                                }
                                this.forwardNameY = dp9 + i12;
                                this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                                if (this.currentMessageObject.isOutOwner()) {
                                    Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? "chat_outPsaNameText" : "chat_outForwardedNameText"));
                                    if (this.currentMessageObject.needDrawForwarded()) {
                                        float dp10 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                                        this.forwardNameX = dp10;
                                        f17 = dp10 + this.transitionParams.deltaLeft;
                                    } else {
                                        f17 = this.transitionParams.animateForwardNameX;
                                    }
                                } else {
                                    Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? "chat_inPsaNameText" : "chat_inForwardedNameText"));
                                    if (this.currentMessageObject.needDrawForwarded()) {
                                        f17 = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 11.0f : 17.0f) + getExtraTextX();
                                        this.forwardNameX = f17;
                                    } else {
                                        f17 = this.transitionParams.animateForwardNameX;
                                    }
                                }
                                str2 = str;
                                z5 = true;
                            }
                            if (this.transitionParams.animateForwardedLayout && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                                MessageObject messageObject3 = this.currentMessageObject;
                                if (messageObject3.type != 5 && !messageObject3.isAnyKindOfSticker()) {
                                    Rect bounds = this.currentBackgroundDrawable.getBounds();
                                    canvas.save();
                                    if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(10.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                                    } else {
                                        canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
                                    }
                                    z6 = true;
                                    i11 = 0;
                                    while (i11 < 2) {
                                        canvas.save();
                                        float f26 = f17;
                                        boolean z7 = z5;
                                        canvas.translate(f17 - this.forwardNameOffsetX[i11], this.forwardNameY + (((this.forwardHeight / 2.0f) + 2.0f) * i11));
                                        if (f3 != 1.0f || f2 != 1.0f) {
                                            int alpha6 = staticLayoutArr[i11].getPaint().getAlpha();
                                            staticLayoutArr[i11].getPaint().setAlpha((int) (alpha6 * f3 * f2));
                                            staticLayoutArr[i11].draw(canvas);
                                            staticLayoutArr[i11].getPaint().setAlpha(alpha6);
                                        } else {
                                            staticLayoutArr[i11].draw(canvas);
                                        }
                                        canvas.restore();
                                        i11++;
                                        f17 = f26;
                                        z5 = z7;
                                    }
                                    z3 = z5;
                                    if (z6) {
                                        canvas.restore();
                                    }
                                    if (this.hasPsaHint) {
                                        if (this.psaButtonVisible || this.psaButtonProgress > 0.0f) {
                                            Drawable drawable = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                            int intrinsicWidth = this.psaHelpX + (drawable.getIntrinsicWidth() / 2);
                                            int intrinsicHeight = this.psaHelpY + (drawable.getIntrinsicHeight() / 2);
                                            if (this.psaButtonVisible) {
                                                float f27 = this.psaButtonProgress;
                                                if (f27 < 1.0f) {
                                                    f20 = AnimationProperties.overshootInterpolator.getInterpolation(f27);
                                                    int intrinsicWidth2 = ((int) (drawable.getIntrinsicWidth() * f20)) / 2;
                                                    int intrinsicHeight2 = ((int) (drawable.getIntrinsicHeight() * f20)) / 2;
                                                    drawable.setBounds(intrinsicWidth - intrinsicWidth2, intrinsicHeight - intrinsicHeight2, intrinsicWidth + intrinsicWidth2, intrinsicHeight + intrinsicHeight2);
                                                    drawable.draw(canvas);
                                                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.selectorDrawableMaskType[0] == 3) {
                                                        canvas.save();
                                                        float f28 = this.psaButtonProgress;
                                                        canvas.scale(f28, f28, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                                        this.selectorDrawable[0].draw(canvas);
                                                        canvas.restore();
                                                    }
                                                }
                                            }
                                            f20 = this.psaButtonProgress;
                                            int intrinsicWidth22 = ((int) (drawable.getIntrinsicWidth() * f20)) / 2;
                                            int intrinsicHeight22 = ((int) (drawable.getIntrinsicHeight() * f20)) / 2;
                                            drawable.setBounds(intrinsicWidth - intrinsicWidth22, intrinsicHeight - intrinsicHeight22, intrinsicWidth + intrinsicWidth22, intrinsicHeight + intrinsicHeight22);
                                            drawable.draw(canvas);
                                            if (Build.VERSION.SDK_INT >= 21) {
                                                canvas.save();
                                                float f282 = this.psaButtonProgress;
                                                canvas.scale(f282, f282, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                                this.selectorDrawable[0].draw(canvas);
                                                canvas.restore();
                                            }
                                        }
                                        boolean z8 = this.psaButtonVisible;
                                        if (z8) {
                                            float f29 = this.psaButtonProgress;
                                            if (f29 < 1.0f) {
                                                this.psaButtonProgress = f29 + (((float) j) / 180.0f);
                                                invalidate();
                                                if (this.psaButtonProgress > 1.0f) {
                                                    this.psaButtonProgress = 1.0f;
                                                    setInvalidatesParent(false);
                                                }
                                            }
                                        }
                                        if (!z8) {
                                            float f30 = this.psaButtonProgress;
                                            if (f30 > 0.0f) {
                                                this.psaButtonProgress = f30 - (((float) j) / 180.0f);
                                                invalidate();
                                                if (this.psaButtonProgress < 0.0f) {
                                                    this.psaButtonProgress = 0.0f;
                                                    setInvalidatesParent(false);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            z6 = false;
                            i11 = 0;
                            while (i11 < 2) {
                            }
                            z3 = z5;
                            if (z6) {
                            }
                            if (this.hasPsaHint) {
                            }
                        }
                        if (this.drawTopic && this.topicButton != null && f3 > 0.0f && f2 > 0.0f && ((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0))) {
                            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                                MessageObject messageObject4 = this.currentMessageObject;
                                if (messageObject4.type != 19) {
                                    if (messageObject4.isOutOwner()) {
                                        f15 = AndroidUtilities.dp(23.0f);
                                        if (this.isPlayingRound) {
                                            f15 -= AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize;
                                        }
                                    } else {
                                        if (this.currentMessageObject.type == 5) {
                                            i9 = this.backgroundDrawableLeft + this.backgroundDrawableRight;
                                            dp4 = AndroidUtilities.dp(4.0f);
                                        } else {
                                            i9 = this.backgroundDrawableLeft + this.backgroundDrawableRight;
                                            dp4 = AndroidUtilities.dp(17.0f);
                                        }
                                        f15 = i9 + dp4;
                                    }
                                    dp3 = AndroidUtilities.dp(12.0f);
                                    dp2 = f15 - AndroidUtilities.dp(8.0f);
                                    transitionParams = this.transitionParams;
                                    if (transitionParams.animateBackgroundBoundsInner) {
                                        dp2 += transitionParams.deltaLeft;
                                    }
                                    this.topicButton.draw(canvas, dp2, dp3, f3 * f2);
                                }
                            }
                            if (!this.currentMessageObject.isOutOwner()) {
                                i8 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                            } else {
                                if (this.mediaBackground) {
                                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                                    extraTextX = getExtraTextX();
                                } else {
                                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                                    extraTextX = getExtraTextX();
                                }
                                i8 = dp + extraTextX;
                            }
                            dp2 = i8 - AndroidUtilities.dp(2.33f);
                            dp3 = AndroidUtilities.dp(12.0f) + ((this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()));
                            transitionParams = this.transitionParams;
                            if (transitionParams.animateBackgroundBoundsInner) {
                            }
                            this.topicButton.draw(canvas, dp2, dp3, f3 * f2);
                        }
                        if (z2) {
                            float f31 = this.replyStartX;
                            float f32 = this.replyStartY;
                            MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                            if (groupedMessages4 != null) {
                                MessageObject.GroupedMessages.TransitionParams transitionParams6 = groupedMessages4.transitionParams;
                                if (transitionParams6.backgroundChangeBounds) {
                                    f31 += transitionParams6.offsetLeft;
                                }
                            }
                            TransitionParams transitionParams7 = this.transitionParams;
                            if (transitionParams7.animateBackgroundBoundsInner) {
                                if (this.isRoundVideo) {
                                    f14 = (this.currentMessageObject.isOutOwner() ? 0.0f : this.transitionParams.deltaLeft) + this.transitionParams.deltaRight;
                                } else {
                                    f14 = transitionParams7.deltaLeft;
                                }
                                f31 += f14;
                                TransitionParams transitionParams8 = this.transitionParams;
                                float f33 = transitionParams8.animateChangeProgress;
                                f32 = (this.replyStartY * f33) + (transitionParams8.animateFromReplyY * (1.0f - f33));
                            }
                            boolean z9 = (this.currentMessageObject == null || (chatMessageCellDelegate = this.delegate) == null || !chatMessageCellDelegate.isProgressLoading(this, 0)) ? false : true;
                            if (this.replyPressedFloat == null) {
                                this.replyPressedFloat = new AnimatedFloat(this);
                            }
                            float f34 = this.replyPressedFloat.set((this.replySelectorPressed || z9) ? 1.0f : 0.0f);
                            int themedColor3 = getThemedColor("listSelectorSDK21");
                            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                                Theme.chat_replyLinePaint.setColor(getThemedColor("chat_stickerReplyLine"));
                                Theme.chat_replyLinePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * this.timeAlpha * f2));
                                i4 = ColorUtils.setAlphaComponent(Theme.chat_replyLinePaint.getColor(), Color.alpha(themedColor3));
                                Theme.chat_replyNamePaint.setColor(getThemedColor("chat_stickerReplyNameText"));
                                Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyNamePaint.getAlpha() * this.timeAlpha * f2));
                                Theme.chat_replyTextPaint.setColor(getThemedColor("chat_stickerReplyMessageText"));
                                Theme.chat_replyTextPaint.setAlpha((int) (Theme.chat_replyTextPaint.getAlpha() * this.timeAlpha * f2));
                                if (z3) {
                                    int i18 = (int) f31;
                                    this.rect.set(i18 - AndroidUtilities.dp(7.0f), f32 - AndroidUtilities.dp(6.0f), (i18 - AndroidUtilities.dp(7.0f)) + Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f), AndroidUtilities.dp(6.0f) + f32 + this.replyHeight);
                                    applyServiceShaderMatrix();
                                    int alpha7 = getThemedPaint(str2).getAlpha();
                                    getThemedPaint(str2).setAlpha((int) (alpha7 * this.timeAlpha * f2));
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint(str2));
                                    getThemedPaint(str2).setAlpha(alpha7);
                                    if (hasGradientService()) {
                                        int alpha8 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha8 * this.timeAlpha * f2));
                                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha8);
                                    }
                                }
                            } else {
                                if (this.currentMessageObject.isOutOwner()) {
                                    Theme.chat_replyLinePaint.setColor(getThemedColor("chat_outReplyLine"));
                                    Theme.chat_replyNamePaint.setColor(getThemedColor("chat_outReplyNameText"));
                                    alphaComponent = ColorUtils.setAlphaComponent(getThemedColor("chat_outReplyLine"), 30);
                                    if (this.currentMessageObject.hasValidReplyMessageObject()) {
                                        MessageObject messageObject5 = this.currentMessageObject.replyMessageObject;
                                        if ((messageObject5.type == 0 || !TextUtils.isEmpty(messageObject5.caption)) && !(MessageObject.getMedia(this.currentMessageObject.replyMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaGame) && !(MessageObject.getMedia(this.currentMessageObject.replyMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaInvoice)) {
                                            Theme.chat_replyTextPaint.setColor(getThemedColor("chat_outReplyMessageText"));
                                        }
                                    }
                                    int themedColor4 = getThemedColor(isDrawSelectionBackground() ? "chat_outReplyMediaMessageSelectedText" : "chat_outReplyMediaMessageText");
                                    Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor4, Theme.adaptHue(themedColor4, Theme.chat_replyNamePaint.getColor()), f34));
                                } else {
                                    long j2 = this.currentReplyUserId;
                                    if (j2 == 0) {
                                        Theme.chat_replyLinePaint.setColor(getThemedColor("chat_inReplyLine"));
                                        Theme.chat_replyNamePaint.setColor(getThemedColor("chat_inReplyNameText"));
                                        alphaComponent = ColorUtils.setAlphaComponent(getThemedColor("chat_inReplyLine"), 30);
                                    } else {
                                        Theme.chat_replyLinePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(j2)));
                                        Theme.chat_replyLinePaint.setAlpha((int) (paint.getAlpha() * 0.9f));
                                        Theme.chat_replyNamePaint.setColor(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentReplyUserId)));
                                        alphaComponent = ColorUtils.setAlphaComponent(getThemedColor(AvatarDrawable.getNameColorNameForId(this.currentReplyUserId)), 30);
                                    }
                                    if (this.currentMessageObject.hasValidReplyMessageObject()) {
                                        MessageObject messageObject6 = this.currentMessageObject.replyMessageObject;
                                        if ((messageObject6.type == 0 || !TextUtils.isEmpty(messageObject6.caption)) && !(MessageObject.getMedia(this.currentMessageObject.replyMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaGame) && !(MessageObject.getMedia(this.currentMessageObject.replyMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaInvoice)) {
                                            Theme.chat_replyTextPaint.setColor(getThemedColor("chat_inReplyMessageText"));
                                        }
                                    }
                                    int themedColor5 = getThemedColor(isDrawSelectionBackground() ? "chat_inReplyMediaMessageSelectedText" : "chat_inReplyMediaMessageText");
                                    Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor5, Theme.adaptHue(themedColor5, Theme.chat_replyNamePaint.getColor()), f34));
                                }
                                i4 = alphaComponent;
                            }
                            int min = (int) Math.min(AndroidUtilities.dp(10.0f), ((this.replyHeight - AndroidUtilities.dp(35.0f)) / 1.5f) + AndroidUtilities.dp(10.0f));
                            float f35 = min;
                            this.forwardNameX = (f31 - this.replyTextOffset) + f35 + (this.needReplyImage ? (min - AndroidUtilities.dp(1.0f)) + this.replyHeight : 0.0f);
                            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                            if ((groupedMessagePosition4 == null || (groupedMessagePosition4.minY == 0 && groupedMessagePosition4.minX == 0)) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
                                if (getAlpha() * f2 != 1.0f) {
                                    RectF rectF = AndroidUtilities.rectTmp;
                                    rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                                    i5 = canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f * f2), 31);
                                } else {
                                    i5 = -1;
                                }
                                float min2 = Math.min(6.75f, SharedConfig.bubbleRadius);
                                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                                    i2 = i;
                                    this.replySelectorRect.set((int) (f31 - AndroidUtilities.dp(7.0f)), (int) (f32 - AndroidUtilities.dp(7.0f)), (int) (Math.max(this.replyNameWidth, this.replyTextWidth) + f31 + AndroidUtilities.dp(7.0f)), (int) (this.replyHeight + f32 + AndroidUtilities.dp(7.0f)));
                                    f11 = 9.0f;
                                    f10 = 9.0f;
                                    f9 = 9.0f;
                                } else {
                                    i2 = i;
                                    if (this.drawTopic || this.drawNameLayout || (this.drawForwardedName && this.forwardedNameLayout[0] != null)) {
                                        f4 = min2;
                                    } else if (this.currentMessageObject.isOutOwner() || !this.drawPinnedTop) {
                                        f4 = SharedConfig.bubbleRadius * 0.75f;
                                    } else {
                                        f4 = Math.min(6, SharedConfig.bubbleRadius);
                                    }
                                    if (this.drawTopic || this.drawNameLayout || (this.drawForwardedName && this.forwardedNameLayout[0] != null)) {
                                        f5 = min2;
                                    } else if (!this.currentMessageObject.isOutOwner() || !this.drawPinnedTop) {
                                        f5 = SharedConfig.bubbleRadius * 0.75f;
                                    } else {
                                        f5 = Math.min(6, SharedConfig.bubbleRadius) / 3.0f;
                                    }
                                    Rect rect = this.replySelectorRect;
                                    int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp(5 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX();
                                    if (this.drawNameLayout) {
                                        f6 = min2;
                                        f7 = 4.0f;
                                    } else {
                                        f6 = min2;
                                        f7 = (4 + ((this.mediaBackground || !this.drawPinnedTop) ? 0 : 2)) - ((!this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : 2);
                                    }
                                    int dp11 = (int) (f32 - AndroidUtilities.dp(f7));
                                    if (this.currentMessagesGroup != null) {
                                        f8 = f4;
                                        backgroundDrawableRight = Math.max(this.replyNameWidth, this.replyTextWidth) + f31 + AndroidUtilities.dp(10.0f);
                                    } else {
                                        f8 = f4;
                                        backgroundDrawableRight = getBackgroundDrawableRight();
                                    }
                                    float f36 = f5;
                                    rect.set(currentBackgroundLeft, dp11, (int) ((backgroundDrawableRight - AndroidUtilities.dp(5 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX()), (int) (this.replyHeight + f32 + AndroidUtilities.dp(4.0f)));
                                    f9 = f6;
                                    f10 = f36;
                                    f11 = f8;
                                }
                                if (this.replySelector == null) {
                                    this.replySelectorColor = i4;
                                    Drawable createRadSelectorDrawable = Theme.createRadSelectorDrawable(i4, 0, 0);
                                    this.replySelector = createRadSelectorDrawable;
                                    createRadSelectorDrawable.setCallback(this);
                                }
                                this.replySelector.setBounds(this.replySelectorRect);
                                if (f11 != this.replySelectorRadLeft || f10 != this.replySelectorRadRight) {
                                    Drawable drawable2 = this.replySelector;
                                    this.replySelectorRadLeft = f11;
                                    this.replySelectorRadRight = f10;
                                    Theme.setMaskDrawableRad(drawable2, f11, f10, f9, f9);
                                }
                                if (i4 != this.replySelectorColor) {
                                    Drawable drawable3 = this.replySelector;
                                    this.replySelectorColor = i4;
                                    z4 = true;
                                    Theme.setSelectorDrawableColor(drawable3, i4, true);
                                } else {
                                    z4 = true;
                                }
                                if (z9) {
                                    if (this.replyLoadingDrawable == null) {
                                        LoadingDrawable loadingDrawable = new LoadingDrawable();
                                        this.replyLoadingDrawable = loadingDrawable;
                                        loadingDrawable.setAppearByGradient(z4);
                                        this.replyLoadingDrawable.setGradientScale(3.5f);
                                        this.replyLoadingDrawable.setSpeed(0.5f);
                                    }
                                    int alpha9 = Color.alpha(i4);
                                    int i19 = alpha9 / 2;
                                    i7 = i5;
                                    i6 = min;
                                    f12 = f35;
                                    this.replyLoadingDrawable.setColors(ColorUtils.setAlphaComponent(i4, MathUtils.clamp(i19, 0, 255)), ColorUtils.setAlphaComponent(i4, MathUtils.clamp(alpha9 * 2, 0, 255)), ColorUtils.setAlphaComponent(i4, MathUtils.clamp(i19, 0, 255)), ColorUtils.setAlphaComponent(i4, 255));
                                    this.replyLoadingDrawable.setBounds(this.replySelectorRect);
                                    this.replyLoadingDrawable.setRadiiDp(f11, f10, f9, f9);
                                    this.replyLoadingDrawable.strokePaint.setStrokeWidth(AndroidUtilities.dp(1.0f));
                                    this.replyLoadingDrawable.draw(canvas);
                                } else {
                                    i6 = min;
                                    f12 = f35;
                                    i7 = i5;
                                    LoadingDrawable loadingDrawable2 = this.replyLoadingDrawable;
                                    if (loadingDrawable2 != null) {
                                        loadingDrawable2.reset();
                                    }
                                }
                                this.replySelector.draw(canvas);
                                RectF rectF2 = AndroidUtilities.rectTmp;
                                rectF2.set(f31, f32, AndroidUtilities.dp(3.0f) + f31, this.replyHeight + f32);
                                Path path = this.replyRoundRectPath;
                                if (path == null) {
                                    this.replyRoundRectPath = new Path();
                                } else {
                                    path.rewind();
                                }
                                if (this.replyRoundRectRadii == null) {
                                    this.replyRoundRectRadii = r4;
                                    float dp12 = AndroidUtilities.dp(2.0f);
                                    float[] fArr = {dp12, dp12, 0.0f, 0.0f, 0.0f, 0.0f, dp12, dp12};
                                    float[] fArr2 = this.replyRoundRectRadii;
                                    float dp13 = AndroidUtilities.dp(1.0f);
                                    fArr2[5] = dp13;
                                    fArr2[4] = dp13;
                                    fArr2[3] = dp13;
                                    fArr2[2] = dp13;
                                }
                                this.replyRoundRectPath.addRoundRect(rectF2, this.replyRoundRectRadii, Path.Direction.CW);
                                int alpha10 = Theme.chat_replyLinePaint.getAlpha();
                                if (z9) {
                                    Theme.chat_replyLinePaint.setAlpha((int) (alpha10 * 0.3f));
                                    canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                                    Theme.chat_replyLinePaint.setAlpha(alpha10);
                                    this.replyRoundRectPath.rewind();
                                    this.replyLoadingT = this.replyLoadingT + (1000.0f / AndroidUtilities.screenRefreshRate);
                                    if (this.replyLoadingSegment == null) {
                                        this.replyLoadingSegment = new float[2];
                                    }
                                    float pow = ((float) Math.pow((f13 / 120.0f) / 4.0f, 0.8500000238418579d)) * 4.0f;
                                    rectF2.set(f31, (this.replyHeight * (1.0f - CubicBezierInterpolator.EASE_IN.getInterpolation(MathUtils.clamp(((Math.max(pow, 0.5f) + 1.5f) % 3.5f) * 0.5f, 0.0f, 1.0f)))) + f32, AndroidUtilities.dp(3.0f) + f31, (this.replyHeight * (1.0f - CubicBezierInterpolator.EASE_OUT.getInterpolation(MathUtils.clamp((((pow + 1.5f) % 3.5f) - 1.5f) * 0.5f, 0.0f, 1.0f)))) + f32);
                                    this.replyRoundRectPath.addRoundRect(rectF2, this.replyRoundRectRadii, Path.Direction.CW);
                                    canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                                    invalidate();
                                } else {
                                    this.replyLoadingT = 0.0f;
                                    canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                                }
                                Theme.chat_replyLinePaint.setAlpha(alpha10);
                                if (this.needReplyImage) {
                                    this.replyImageReceiver.setAlpha(f2);
                                    float f37 = this.replyHeight;
                                    this.replyImageReceiver.setImageCoords(f31 + f12, f32, f37, f37);
                                    this.replyImageReceiver.draw(canvas);
                                    MessageObject messageObject7 = this.currentMessageObject;
                                    if (messageObject7 != null && messageObject7.hasValidReplyMessageObject() && this.currentMessageObject.replyMessageObject.hasMediaSpoilers()) {
                                        int[] roundRadius = this.replyImageReceiver.getRoundRadius();
                                        float[] fArr3 = this.mediaSpoilerRadii;
                                        float f38 = roundRadius[0];
                                        fArr3[1] = f38;
                                        fArr3[0] = f38;
                                        float f39 = roundRadius[1];
                                        fArr3[3] = f39;
                                        fArr3[2] = f39;
                                        float f40 = roundRadius[2];
                                        fArr3[5] = f40;
                                        fArr3[4] = f40;
                                        float f41 = roundRadius[3];
                                        fArr3[7] = f41;
                                        fArr3[6] = f41;
                                        this.mediaSpoilerPath.rewind();
                                        rectF2.set(this.replyImageReceiver.getImageX(), this.replyImageReceiver.getImageY(), this.replyImageReceiver.getImageX2(), this.replyImageReceiver.getImageY2());
                                        this.mediaSpoilerPath.addRoundRect(rectF2, this.mediaSpoilerRadii, Path.Direction.CW);
                                        canvas.save();
                                        canvas.clipPath(this.mediaSpoilerPath);
                                        this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.replyImageReceiver.getAlpha())));
                                        this.mediaSpoilerEffect.setBounds((int) this.replyImageReceiver.getImageX(), (int) this.replyImageReceiver.getImageY(), (int) this.replyImageReceiver.getImageX2(), (int) this.replyImageReceiver.getImageY2());
                                        this.mediaSpoilerEffect.draw(canvas);
                                        canvas.restore();
                                        invalidate();
                                    }
                                }
                                if (this.replyNameLayout != null) {
                                    canvas.save();
                                    canvas.translate((f31 - this.replyNameOffset) + f12 + (this.needReplyImage ? (i6 - AndroidUtilities.dp(1.0f)) + this.replyHeight : 0.0f), f32);
                                    this.replyNameLayout.draw(canvas);
                                    canvas.restore();
                                }
                                if (this.replyTextLayout != null) {
                                    canvas.save();
                                    canvas.translate(this.forwardNameX, f32 + Theme.chat_replyNamePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, (!this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? this.replyTextLayout.getPaint().getColor() : getThemedColor("chat_outTimeText"), -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, this.replyTextLayout, this.replySpoilers, canvas, false);
                                    AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.replyTextLayout, this.animatedEmojiReplyStack, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f);
                                    canvas.restore();
                                }
                                if (i7 >= 0) {
                                    canvas.restoreToCount(i7);
                                }
                                i3 = i2;
                                if (i3 != Integer.MIN_VALUE) {
                                    return;
                                }
                                canvas.restoreToCount(i3);
                                return;
                            }
                        }
                        i2 = i;
                        i3 = i2;
                        if (i3 != Integer.MIN_VALUE) {
                        }
                    } else {
                        str = str4;
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            if (this.currentMessageObject.isOutOwner()) {
                                dp5 = AndroidUtilities.dp(28.0f) + this.nameWidth;
                                lineWidth = this.adminLayout.getLineWidth(0);
                            } else {
                                dp5 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f) + this.nameWidth;
                                lineWidth = this.adminLayout.getLineWidth(0);
                            }
                        } else if (!this.mediaBackground && this.currentMessageObject.isOutOwner()) {
                            dp5 = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(17.0f);
                            lineWidth = this.adminLayout.getLineWidth(0);
                        } else {
                            dp5 = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(11.0f);
                            lineWidth = this.adminLayout.getLineWidth(0);
                        }
                    }
                    dp5 -= lineWidth;
                    canvas.translate(dp5, this.nameY + AndroidUtilities.dp(0.5f));
                    if (this.transitionParams.animateSign) {
                    }
                    this.adminLayout.draw(canvas);
                    canvas.restore();
                    z = this.drawForwardedName;
                    if (this.replyNameLayout != null) {
                    }
                    StaticLayout[] staticLayoutArr2 = this.forwardedNameLayout;
                    int i152 = this.forwardedNameWidth;
                    if (!this.transitionParams.animateForwardedLayout) {
                    }
                    if (z) {
                    }
                    str2 = str;
                    z3 = true;
                    if (this.drawTopic) {
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        }
                        if (!this.currentMessageObject.isOutOwner()) {
                        }
                        dp2 = i8 - AndroidUtilities.dp(2.33f);
                        dp3 = AndroidUtilities.dp(12.0f) + ((this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()));
                        transitionParams = this.transitionParams;
                        if (transitionParams.animateBackgroundBoundsInner) {
                        }
                        this.topicButton.draw(canvas, dp2, dp3, f3 * f2);
                    }
                    if (z2) {
                    }
                    i2 = i;
                    i3 = i2;
                    if (i3 != Integer.MIN_VALUE) {
                    }
                }
            }
            str = str4;
            z = this.drawForwardedName;
            if (this.replyNameLayout != null) {
            }
            StaticLayout[] staticLayoutArr22 = this.forwardedNameLayout;
            int i1522 = this.forwardedNameWidth;
            if (!this.transitionParams.animateForwardedLayout) {
            }
            if (z) {
            }
            str2 = str;
            z3 = true;
            if (this.drawTopic) {
            }
            if (z2) {
            }
            i2 = i;
            i3 = i2;
            if (i3 != Integer.MIN_VALUE) {
            }
        }
    }

    public boolean hasCaptionLayout() {
        return this.captionLayout != null;
    }

    public boolean hasCommentLayout() {
        return this.drawCommentButton;
    }

    public StaticLayout getCaptionLayout() {
        return this.captionLayout;
    }

    public void setDrawSelectionBackground(boolean z) {
        if (this.drawSelectionBackground != z) {
            this.drawSelectionBackground = z;
            invalidate();
        }
    }

    public boolean isDrawingSelectionBackground() {
        return this.drawSelectionBackground || this.isHighlightedAnimated || this.isHighlighted;
    }

    public float getHighlightAlpha() {
        int i;
        if (this.drawSelectionBackground || !this.isHighlightedAnimated || (i = this.highlightProgress) >= 300) {
            return 1.0f;
        }
        return i / 300.0f;
    }

    public void setCheckBoxVisible(boolean z, boolean z2) {
        MessageObject.GroupedMessages groupedMessages;
        MessageObject.GroupedMessages groupedMessages2;
        if (z && this.checkBox == null) {
            CheckBoxBase checkBoxBase = new CheckBoxBase(this, 21, this.resourcesProvider);
            this.checkBox = checkBoxBase;
            if (this.attachedToWindow) {
                checkBoxBase.onAttachedToWindow();
            }
        }
        if (z && this.mediaCheckBox == null && (((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.messages.size() > 1) || ((groupedMessages2 = this.groupedMessagesToSet) != null && groupedMessages2.messages.size() > 1))) {
            CheckBoxBase checkBoxBase2 = new CheckBoxBase(this, 21, this.resourcesProvider);
            this.mediaCheckBox = checkBoxBase2;
            checkBoxBase2.setUseDefaultCheck(true);
            if (this.attachedToWindow) {
                this.mediaCheckBox.onAttachedToWindow();
            }
        }
        float f = 1.0f;
        if (this.checkBoxVisible == z) {
            if (z2 == this.checkBoxAnimationInProgress || z2) {
                return;
            }
            if (!z) {
                f = 0.0f;
            }
            this.checkBoxAnimationProgress = f;
            invalidate();
            return;
        }
        this.checkBoxAnimationInProgress = z2;
        this.checkBoxVisible = z;
        if (z2) {
            this.lastCheckBoxAnimationTime = SystemClock.elapsedRealtime();
        } else {
            if (!z) {
                f = 0.0f;
            }
            this.checkBoxAnimationProgress = f;
        }
        invalidate();
    }

    public void setChecked(boolean z, boolean z2, boolean z3) {
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.setChecked(z2, z3);
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.setChecked(z, z3);
        }
        this.backgroundDrawable.setSelected(z2, z3);
    }

    public void setLastTouchCoords(float f, float f2) {
        this.lastTouchX = f;
        this.lastTouchY = f2;
        this.backgroundDrawable.setTouchCoords(f + getTranslationX(), this.lastTouchY);
    }

    public MessageBackgroundDrawable getBackgroundDrawable() {
        return this.backgroundDrawable;
    }

    public Theme.MessageDrawable getCurrentBackgroundDrawable(boolean z) {
        if (z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            boolean z2 = groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
            if (this.currentMessageObject.isOutOwner()) {
                if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                } else {
                    this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                }
            } else if (!this.mediaBackground && !this.drawPinnedBottom && !z2) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
            }
        }
        this.currentBackgroundDrawable.getBackgroundDrawable();
        return this.currentBackgroundDrawable;
    }

    private boolean shouldDrawCaptionLayout() {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject = this.currentMessageObject;
        return !messageObject.preview && ((groupedMessagePosition = this.currentPosition) == null || ((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.isDocuments && (groupedMessagePosition.flags & 8) == 0)) && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || !messageObject.isVoice());
    }

    public void drawCaptionLayout(Canvas canvas, boolean z, float f) {
        if (this.animatedEmojiStack != null && (this.captionLayout != null || this.transitionParams.animateOutCaptionLayout != null)) {
            this.animatedEmojiStack.clearPositions();
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            drawCaptionLayout(canvas, this.captionLayout, z, f);
        } else {
            drawCaptionLayout(canvas, transitionParams.animateOutCaptionLayout, z, (1.0f - this.transitionParams.animateChangeProgress) * f);
            drawCaptionLayout(canvas, this.captionLayout, z, this.transitionParams.animateChangeProgress * f);
        }
        if (!z) {
            drawAnimatedEmojiCaption(canvas, f);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.messageOwner != null && messageObject.isVoiceTranscriptionOpen()) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (!messageObject2.messageOwner.voiceTranscriptionFinal && TranscribeButton.isTranscribing(messageObject2)) {
                invalidate();
            }
        }
        if (this.isRoundVideo) {
            this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
        }
        if (!z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i = groupedMessagePosition.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble.isSmall) {
                return;
            }
            if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
                applyServiceShaderMatrix();
            }
            if (getAlpha() != 1.0f) {
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            if (reactionsLayoutInBubble2.drawServiceShaderBackground > 0.0f || !this.transitionParams.animateBackgroundBoundsInner || this.currentPosition != null || this.isRoundVideo) {
                TransitionParams transitionParams2 = this.transitionParams;
                reactionsLayoutInBubble2.draw(canvas, transitionParams2.animateChange ? transitionParams2.animateChangeProgress : 1.0f, null);
            } else {
                canvas.save();
                canvas.clipRect(0.0f, 0.0f, getMeasuredWidth(), getBackgroundDrawableBottom() + this.transitionParams.deltaBottom);
                ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                TransitionParams transitionParams3 = this.transitionParams;
                reactionsLayoutInBubble3.draw(canvas, transitionParams3.animateChange ? transitionParams3.animateChangeProgress : 1.0f, null);
                canvas.restore();
            }
            if (getAlpha() == 1.0f) {
                return;
            }
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:145:0x0509  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x0518  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x0584  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x05d0  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x05f9  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x0618  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x061c  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x06d9  */
    /* JADX WARN: Removed duplicated region for block: B:340:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:345:0x0633  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x05fe  */
    /* JADX WARN: Removed duplicated region for block: B:351:0x05ea  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCaptionLayout(Canvas canvas, StaticLayout staticLayout, boolean z, float f) {
        float f2;
        int i;
        Rect rect;
        String str;
        Path path;
        float f3;
        int dp;
        int extraTextX;
        int dp2;
        int i2;
        int i3;
        float f4;
        MessageObject messageObject;
        int i4;
        boolean z2;
        Paint paint;
        int i5;
        int i6;
        boolean shouldDrawThreadProgress;
        long j;
        float f5;
        InfiniteProgress infiniteProgress;
        TextPaint textPaint;
        TextPaint textPaint2;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        boolean z3;
        int themedColor;
        int i7;
        int i8;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        int i9 = 1;
        if (this.currentBackgroundDrawable != null && this.drawCommentButton && this.timeLayout != null) {
            float f6 = 18.0f;
            float dp3 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(18.0f)) - this.timeLayout.getHeight();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
                dp3 += transitionParams.offsetBottom;
                if (transitionParams.backgroundChangeBounds) {
                    dp3 -= getTranslationY();
                }
            }
            float f7 = dp3;
            if (this.mediaBackground) {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f);
                extraTextX = getExtraTextX();
            } else {
                int i10 = this.backgroundDrawableLeft;
                if (this.drawPinnedBottom) {
                    f6 = 12.0f;
                }
                dp = i10 + AndroidUtilities.dp(f6);
                extraTextX = getExtraTextX();
            }
            int i11 = dp + extraTextX;
            int extraTextX2 = i11 - getExtraTextX();
            if (this.currentMessagesGroup == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()) {
                dp2 = extraTextX2 + (this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f)));
            } else {
                int groupPhotosWidth = getGroupPhotosWidth();
                if ((this.currentPosition.flags & 1) == 0) {
                    double d = extraTextX2;
                    double ceil = Math.ceil((groupedMessagePosition.pw / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    dp2 = (int) (d + ceil);
                } else {
                    int i12 = 0;
                    for (int i13 = 0; i13 < this.currentMessagesGroup.posArray.size(); i13++) {
                        if (this.currentMessagesGroup.posArray.get(i13).minY != 0) {
                            break;
                        }
                        double d2 = i12;
                        double ceil2 = Math.ceil(((groupedMessagePosition2.pw + groupedMessagePosition2.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                        Double.isNaN(d2);
                        i12 = (int) (d2 + ceil2);
                    }
                    dp2 = extraTextX2 + (i12 - AndroidUtilities.dp(9.0f));
                }
            }
            if (this.pinnedBottom) {
                i2 = 2;
                i3 = 3;
            } else if (this.pinnedTop) {
                i2 = 4;
                i3 = 1;
            } else {
                i2 = 3;
                i3 = 0;
            }
            int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
            float dp4 = this.layoutHeight - AndroidUtilities.dp(45.1f - i3);
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null && (groupedMessagePosition3.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
                dp2 += AndroidUtilities.dp(14.0f);
                currentBackgroundLeft -= AndroidUtilities.dp(10.0f);
            }
            Rect rect2 = this.commentButtonRect;
            MessageObject messageObject2 = this.currentMessageObject;
            rect2.set(currentBackgroundLeft - AndroidUtilities.dp(((messageObject2 == null || !messageObject2.isOut()) && !this.drawPinnedBottom && this.currentPosition == null && ((messageObject = this.currentMessageObject) == null || messageObject.type != 17 || this.pollInstantViewTouchesBottom)) ? 6.0f : 0.0f), (int) dp4, dp2 - AndroidUtilities.dp(14.0f), this.layoutHeight - AndroidUtilities.dp(i2));
            if (this.selectorDrawable[1] != null && this.selectorDrawableMaskType[1] == 2) {
                int saveCount = canvas.getSaveCount();
                this.selectorDrawable[1].setBounds(this.commentButtonRect);
                this.selectorDrawable[1].draw(canvas);
                canvas.restoreToCount(saveCount);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 == null || ((groupedMessagePosition4.flags & 1) != 0 && groupedMessagePosition4.minX == 0 && groupedMessagePosition4.maxX == 0)) {
                if (getAlpha() != 1.0f) {
                    RectF rectF = AndroidUtilities.rectTmp;
                    rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                    canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
                }
                Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                if (this.commentAvatarImages != null) {
                    int dp5 = AndroidUtilities.dp(17.0f);
                    int extraTextX3 = getExtraTextX() + i11;
                    int length = this.commentAvatarImages.length - 1;
                    i4 = 2;
                    z2 = false;
                    while (length >= 0) {
                        if (this.commentAvatarImagesVisible[length] && this.commentAvatarImages[length].hasImageSet()) {
                            this.commentAvatarImages[length].setImageX((dp5 * length) + extraTextX3);
                            this.commentAvatarImages[length].setImageY((f7 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                            if (length != imageReceiverArr.length - i9) {
                                canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.commentAvatarImages[length].getCenterY(), AndroidUtilities.dp(13.0f), this.currentBackgroundDrawable.getPaint());
                            }
                            this.commentAvatarImages[length].draw(canvas);
                            if (length != 0) {
                                i4 += 17;
                            }
                            z2 = true;
                        }
                        length--;
                        i9 = 1;
                    }
                } else {
                    i4 = 2;
                    z2 = false;
                }
                if (getAlpha() != 1.0f) {
                    canvas.restore();
                }
                if (this.mediaBackground && staticLayout == null) {
                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                        i5 = i11;
                        if (this.commentLayout == null && this.drawSideButton != 3) {
                            Theme.chat_commentTextPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPreviewInstantText" : "chat_inPreviewInstantText"));
                            float f8 = i4 + 33;
                            int dp6 = AndroidUtilities.dp(f8) + i5;
                            this.commentX = dp6;
                            if (this.drawCommentNumber) {
                                this.commentX = dp6 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            int alpha = Theme.chat_commentTextPaint.getAlpha();
                            if (this.transitionParams.animateComments && this.transitionParams.animateCommentsLayout != null) {
                                canvas.save();
                                TextPaint textPaint3 = Theme.chat_commentTextPaint;
                                double d3 = alpha;
                                double d4 = this.transitionParams.animateChangeProgress;
                                Double.isNaN(d4);
                                Double.isNaN(d3);
                                textPaint3.setAlpha((int) (d3 * (1.0d - d4)));
                                canvas.translate(this.transitionParams.animateCommentX + ((this.commentX - this.transitionParams.animateCommentX) * this.transitionParams.animateChangeProgress), (f7 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                                this.transitionParams.animateCommentsLayout.draw(canvas);
                                canvas.restore();
                            }
                            canvas.save();
                            canvas.translate(AndroidUtilities.dp(f8) + i5, (f7 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (!this.currentMessageObject.isSent()) {
                                Theme.chat_commentTextPaint.setAlpha(127);
                                Theme.chat_commentArrowDrawable.setAlpha(127);
                                Theme.chat_commentDrawable.setAlpha(127);
                            } else {
                                Theme.chat_commentArrowDrawable.setAlpha(255);
                                Theme.chat_commentDrawable.setAlpha(255);
                            }
                            if (this.drawCommentNumber || (this.transitionParams.animateComments && this.transitionParams.animateDrawCommentNumber)) {
                                if (this.drawCommentNumber && this.transitionParams.animateComments) {
                                    if (this.transitionParams.animateDrawCommentNumber) {
                                        Theme.chat_commentTextPaint.setAlpha(alpha);
                                    } else {
                                        Theme.chat_commentTextPaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                                    }
                                }
                                Theme.chat_commentTextPaint.setAlpha((int) (textPaint.getAlpha() * getAlpha()));
                                this.commentNumberLayout.draw(canvas);
                                if (this.drawCommentNumber) {
                                    canvas.translate(this.commentNumberWidth + AndroidUtilities.dp(4.0f), 0.0f);
                                }
                            }
                            if (this.transitionParams.animateComments && this.transitionParams.animateCommentsLayout != null) {
                                Theme.chat_commentTextPaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                            } else {
                                Theme.chat_commentTextPaint.setAlpha((int) (alpha * f));
                            }
                            Theme.chat_commentTextPaint.setAlpha((int) (textPaint2.getAlpha() * getAlpha()));
                            this.commentLayout.draw(canvas);
                            canvas.restore();
                            int dp7 = this.commentWidth + i5 + AndroidUtilities.dp(f8) + AndroidUtilities.dp(9.0f);
                            this.commentUnreadX = dp7;
                            if (this.drawCommentNumber) {
                                this.commentUnreadX = dp7 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                            }
                            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                            if (groupedMessages2 != null && !groupedMessages2.messages.isEmpty()) {
                                MessageObject messageObject3 = this.currentMessagesGroup.messages.get(0);
                                if (messageObject3.hasReplies()) {
                                    tLRPC$MessageReplies = messageObject3.messageOwner.replies;
                                    if (tLRPC$MessageReplies == null) {
                                    }
                                    this.commentDrawUnread = z3;
                                    if (z3) {
                                    }
                                }
                                tLRPC$MessageReplies = null;
                                if (tLRPC$MessageReplies == null) {
                                }
                                this.commentDrawUnread = z3;
                                if (z3) {
                                }
                            } else {
                                if (this.currentMessageObject.hasReplies()) {
                                    tLRPC$MessageReplies = this.currentMessageObject.messageOwner.replies;
                                    z3 = tLRPC$MessageReplies == null && (i8 = tLRPC$MessageReplies.read_max_id) != 0 && i8 < tLRPC$MessageReplies.max_id;
                                    this.commentDrawUnread = z3;
                                    if (z3) {
                                        Theme.chat_docBackPaint.setColor(getThemedColor("chat_inInstant"));
                                        if (!this.transitionParams.animateComments) {
                                            i7 = this.commentUnreadX;
                                        } else {
                                            if (!this.transitionParams.animateCommentDrawUnread) {
                                                Theme.chat_docBackPaint.setAlpha((int) (Color.alpha(themedColor) * this.transitionParams.animateChangeProgress));
                                            }
                                            i7 = (int) (this.transitionParams.animateCommentUnreadX + ((this.commentUnreadX - this.transitionParams.animateCommentUnreadX) * this.transitionParams.animateChangeProgress));
                                        }
                                        canvas.drawCircle(i7, f7 + AndroidUtilities.dp(8.0f) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0), AndroidUtilities.dp(2.5f), Theme.chat_docBackPaint);
                                    }
                                }
                                tLRPC$MessageReplies = null;
                                if (tLRPC$MessageReplies == null) {
                                }
                                this.commentDrawUnread = z3;
                                if (z3) {
                                }
                            }
                            if (staticLayout != null) {
                                return;
                            }
                            if (z && this.links.isEmpty()) {
                                return;
                            }
                            MessageObject messageObject4 = this.currentMessageObject;
                            if ((messageObject4.deleted && this.currentPosition != null) || f == 0.0f) {
                                return;
                            }
                            if (messageObject4.isOutOwner()) {
                                Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextOut"));
                                Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkOut");
                            } else {
                                Theme.chat_msgTextPaint.setColor(getThemedColor("chat_messageTextIn"));
                                Theme.chat_msgTextPaint.linkColor = getThemedColor("chat_messageLinkIn");
                            }
                            canvas.save();
                            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                            float f9 = groupedMessages3 != null ? groupedMessages3.transitionParams.captionEnterProgress * f : f;
                            if (f9 == 0.0f) {
                                return;
                            }
                            float f10 = this.captionY;
                            float f11 = this.captionX;
                            TransitionParams transitionParams2 = this.transitionParams;
                            if (transitionParams2.animateBackgroundBoundsInner) {
                                if (transitionParams2.transformGroupToSingleMessage) {
                                    f10 -= getTranslationY();
                                    f3 = this.transitionParams.deltaLeft;
                                } else if (transitionParams2.moveCaption) {
                                    float f12 = this.captionX;
                                    TransitionParams transitionParams3 = this.transitionParams;
                                    float f13 = transitionParams3.animateChangeProgress;
                                    float f14 = (f12 * f13) + (transitionParams3.captionFromX * (1.0f - f13));
                                    float f15 = (transitionParams3.captionFromY * (1.0f - f13)) + (this.captionY * f13);
                                    f11 = f14;
                                    f10 = f15;
                                } else if ((!this.currentMessageObject.isVoice() && !this.currentMessageObject.isRoundVideo()) || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                                    f3 = this.transitionParams.deltaLeft;
                                }
                                f11 += f3;
                            }
                            if (!this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                                f2 = 1.0f;
                            } else {
                                f2 = 1.0f;
                                f10 += (1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize;
                            }
                            if (f9 != f2) {
                                this.rect.set(f11, f10, staticLayout.getWidth() + f11, staticLayout.getHeight() + f10);
                                i = canvas.saveLayerAlpha(this.rect, (int) (f9 * 255.0f), 31);
                            } else {
                                i = Integer.MIN_VALUE;
                            }
                            if (this.isRoundVideo && this.transitionParams.animateDrawBackground) {
                                Theme.MessageDrawable.PathDrawParams pathDrawParams = this.backgroundCacheParams;
                                if (pathDrawParams != null && (path = pathDrawParams.getPath()) != null && !path.isEmpty()) {
                                    canvas.translate(0.0f, this.transitionYOffsetForDrawables);
                                    canvas.clipPath(path);
                                    canvas.translate(0.0f, -this.transitionYOffsetForDrawables);
                                }
                            } else if (this.transitionParams.animateBackgroundBoundsInner && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                                int height = (!this.drawCommentButton || (rect = this.commentButtonRect) == null) ? 0 : rect.height();
                                ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                                int i14 = height + ((reactionsLayoutInBubble2 == null || reactionsLayoutInBubble2.isSmall) ? 0 : reactionsLayoutInBubble2.height);
                                if (this.currentMessageObject.isOutOwner() && !this.mediaBackground && !this.pinnedBottom) {
                                    canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(10.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i14);
                                } else {
                                    canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i14);
                                }
                            }
                            canvas.translate(f11, f10);
                            if (this.links.draw(canvas)) {
                                invalidate();
                            }
                            drawProgressLoadingLink(canvas, -1);
                            if (!this.urlPathSelection.isEmpty()) {
                                for (int i15 = 0; i15 < this.urlPathSelection.size(); i15++) {
                                    canvas.drawPath(this.urlPathSelection.get(i15), Theme.chat_textSearchSelectionPaint);
                                }
                            }
                            if (this.highlightPath != null) {
                                float currentTimeMillis = ((float) (System.currentTimeMillis() - this.highlightPathStart)) / 850.0f;
                                if (currentTimeMillis > 1.0f) {
                                    this.highlightPath = null;
                                } else {
                                    int alpha2 = Theme.chat_textSearchSelectionPaint.getAlpha();
                                    float f16 = currentTimeMillis * 4.0f;
                                    Theme.chat_textSearchSelectionPaint.setAlpha((int) (alpha2 * 0.8f * (1.0f - currentTimeMillis) * f16));
                                    canvas.save();
                                    float interpolation = (AndroidUtilities.overshootInterpolator.getInterpolation(Math.min(1.0f, f16)) * 0.6f) + 0.4f;
                                    LinkPath linkPath = this.highlightPath;
                                    canvas.scale(interpolation, interpolation, linkPath.centerX, linkPath.centerY);
                                    canvas.drawPath(this.highlightPath, Theme.chat_textSearchSelectionPaint);
                                    canvas.restore();
                                    Theme.chat_textSearchSelectionPaint.setAlpha(alpha2);
                                }
                                invalidate();
                            }
                            if (this.currentMessageObject.type == 5) {
                                TextPaint textPaint4 = Theme.chat_timePaint;
                                int themedColor2 = getThemedColor("chat_serviceText");
                                if (isDrawSelectionBackground()) {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outTimeSelectedText" : "chat_inTimeSelectedText";
                                } else {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText";
                                }
                                textPaint4.setColor(ColorUtils.blendARGB(themedColor2, getThemedColor(str), getVideoTranscriptionProgress()));
                            }
                            if (!z) {
                                try {
                                    if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                                        getDelegate().getTextSelectionHelper().drawCaption(this.currentMessageObject.isOutOwner(), staticLayout, canvas);
                                    }
                                    getY();
                                    getY();
                                    Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                                    SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, (!this.currentMessageObject.isOut() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? staticLayout.getPaint().getColor() : getThemedColor("chat_outTimeText"), 0, this.captionPatchedSpoilersLayout, staticLayout, this.captionSpoilers, canvas, this.currentMessagesGroup != null);
                                    Emoji.emojiDrawingYOffset = 0.0f;
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                            }
                            if (i != Integer.MIN_VALUE) {
                                canvas.restoreToCount(i);
                            }
                            canvas.restore();
                            return;
                        }
                        if (!z2) {
                            BaseCell.setDrawableBounds(Theme.chat_commentDrawable, i5, (f7 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            if (f != 1.0f) {
                                Theme.chat_commentDrawable.setAlpha((int) (f * 255.0f));
                                Theme.chat_commentDrawable.draw(canvas);
                                Theme.chat_commentDrawable.setAlpha(255);
                            } else {
                                Theme.chat_commentDrawable.draw(canvas);
                            }
                        }
                        this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
                        if (this.transitionParams.animateComments) {
                            i6 = this.commentArrowX;
                        } else {
                            i6 = (int) (this.transitionParams.animateCommentArrowX + ((this.commentArrowX - this.transitionParams.animateCommentArrowX) * this.transitionParams.animateChangeProgress));
                        }
                        float dp8 = (f7 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                        shouldDrawThreadProgress = this.delegate.shouldDrawThreadProgress(this);
                        long elapsedRealtime = SystemClock.elapsedRealtime();
                        j = elapsedRealtime - this.commentProgressLastUpadteTime;
                        this.commentProgressLastUpadteTime = elapsedRealtime;
                        if (j > 17) {
                            j = 17;
                        }
                        if (!shouldDrawThreadProgress) {
                            float f17 = this.commentProgressAlpha;
                            if (f17 < 1.0f) {
                                float f18 = f17 + (((float) j) / 180.0f);
                                this.commentProgressAlpha = f18;
                                if (f18 > 1.0f) {
                                    this.commentProgressAlpha = 1.0f;
                                }
                            }
                            f5 = 0.0f;
                        } else {
                            float f19 = this.commentProgressAlpha;
                            f5 = 0.0f;
                            if (f19 > 0.0f) {
                                float f20 = f19 - (((float) j) / 180.0f);
                                this.commentProgressAlpha = f20;
                                if (f20 < 0.0f) {
                                    this.commentProgressAlpha = 0.0f;
                                }
                            }
                        }
                        if ((!shouldDrawThreadProgress || this.commentProgressAlpha > f5) && (infiniteProgress = this.commentProgress) != null) {
                            infiniteProgress.setColor(getThemedColor("chat_inInstant"));
                            this.commentProgress.setAlpha(this.commentProgressAlpha);
                            this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i6, dp8 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                            invalidate();
                        }
                        if (shouldDrawThreadProgress || this.commentProgressAlpha < 1.0f) {
                            int intrinsicWidth = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                            float f21 = i6 + intrinsicWidth;
                            float intrinsicHeight = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                            float f22 = dp8 + intrinsicHeight;
                            Drawable drawable = Theme.chat_commentArrowDrawable;
                            float f23 = intrinsicWidth;
                            float f24 = this.commentProgressAlpha;
                            drawable.setBounds((int) (f21 - ((1.0f - f24) * f23)), (int) (f22 - ((1.0f - f24) * intrinsicHeight)), (int) (f21 + (f23 * (1.0f - f24))), (int) (f22 + (intrinsicHeight * (1.0f - f24))));
                            Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                            Theme.chat_commentArrowDrawable.draw(canvas);
                        }
                        if (staticLayout != null) {
                        }
                    }
                }
                if (isDrawSelectionBackground()) {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarSelected" : "chat_inVoiceSeekbarSelected"));
                } else {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbar" : "chat_inVoiceSeekbar"));
                }
                TransitionParams transitionParams4 = this.transitionParams;
                float dp9 = (this.layoutHeight - AndroidUtilities.dp(f4)) + transitionParams4.deltaBottom;
                MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages4.transitionParams;
                    dp9 += transitionParams5.offsetBottom;
                    if (transitionParams5.backgroundChangeBounds) {
                        dp9 -= getTranslationY();
                    }
                } else {
                    dp2 = (((int) ((this.backgroundWidth - transitionParams4.deltaLeft) + transitionParams4.deltaRight)) + i11) - AndroidUtilities.dp(12.0f);
                }
                int i16 = dp2;
                float f25 = dp9;
                Theme.chat_replyLinePaint.setAlpha((int) (paint.getAlpha() * getAlpha()));
                i5 = i11;
                canvas.drawLine(i11, f25, i16 - AndroidUtilities.dp(14.0f), f25, Theme.chat_replyLinePaint);
                dp2 = i16;
                if (this.commentLayout == null) {
                }
                if (!z2) {
                }
                this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
                if (this.transitionParams.animateComments) {
                }
                float dp82 = (f7 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                shouldDrawThreadProgress = this.delegate.shouldDrawThreadProgress(this);
                long elapsedRealtime2 = SystemClock.elapsedRealtime();
                j = elapsedRealtime2 - this.commentProgressLastUpadteTime;
                this.commentProgressLastUpadteTime = elapsedRealtime2;
                if (j > 17) {
                }
                if (!shouldDrawThreadProgress) {
                }
                if (!shouldDrawThreadProgress) {
                }
                infiniteProgress.setColor(getThemedColor("chat_inInstant"));
                this.commentProgress.setAlpha(this.commentProgressAlpha);
                this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i6, dp82 + AndroidUtilities.dp(12.0f), this.commentProgressAlpha);
                invalidate();
                if (shouldDrawThreadProgress) {
                }
                int intrinsicWidth2 = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                float f212 = i6 + intrinsicWidth2;
                float intrinsicHeight2 = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                float f222 = dp82 + intrinsicHeight2;
                Drawable drawable2 = Theme.chat_commentArrowDrawable;
                float f232 = intrinsicWidth2;
                float f242 = this.commentProgressAlpha;
                drawable2.setBounds((int) (f212 - ((1.0f - f242) * f232)), (int) (f222 - ((1.0f - f242) * intrinsicHeight2)), (int) (f212 + (f232 * (1.0f - f242))), (int) (f222 + (intrinsicHeight2 * (1.0f - f242))));
                Theme.chat_commentArrowDrawable.setAlpha((int) ((1.0f - this.commentProgressAlpha) * 255.0f * f));
                Theme.chat_commentArrowDrawable.draw(canvas);
                if (staticLayout != null) {
                }
            }
        }
        if (staticLayout != null) {
        }
    }

    public void drawProgressLoadingLink(Canvas canvas, int i) {
        updateProgressLoadingLink();
        ArrayList<LoadingDrawableLocation> arrayList = this.progressLoadingLinkDrawables;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        int themedColor = getThemedColor((messageObject == null || !messageObject.isOutOwner()) ? "chat_linkSelectBackground" : "chat_outLinkSelectBackground");
        int i2 = 0;
        while (i2 < this.progressLoadingLinkDrawables.size()) {
            LoadingDrawableLocation loadingDrawableLocation = this.progressLoadingLinkDrawables.get(i2);
            if (loadingDrawableLocation.blockNum == i) {
                LoadingDrawable loadingDrawable = loadingDrawableLocation.drawable;
                loadingDrawable.setColors(Theme.multAlpha(themedColor, 0.85f), Theme.multAlpha(themedColor, 2.0f), Theme.multAlpha(themedColor, 3.5f), Theme.multAlpha(themedColor, 6.0f));
                loadingDrawable.draw(canvas);
                invalidate();
                if (loadingDrawable.isDisappeared()) {
                    this.progressLoadingLinkDrawables.remove(i2);
                    i2--;
                }
            }
            i2++;
        }
    }

    public void updateProgressLoadingLink() {
        StaticLayout staticLayout;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null) {
            return;
        }
        if (!chatMessageCellDelegate.isProgressLoading(this, 1)) {
            this.progressLoadingLink = null;
            ArrayList<LoadingDrawableLocation> arrayList2 = this.progressLoadingLinkDrawables;
            if (arrayList2 == null || arrayList2.isEmpty()) {
                return;
            }
            for (int i = 0; i < this.progressLoadingLinkDrawables.size(); i++) {
                LoadingDrawableLocation loadingDrawableLocation = this.progressLoadingLinkDrawables.get(i);
                if (!loadingDrawableLocation.drawable.isDisappearing()) {
                    loadingDrawableLocation.drawable.disappear();
                }
            }
            return;
        }
        CharacterStyle progressLoadingLink = this.delegate.getProgressLoadingLink(this);
        if (progressLoadingLink == this.progressLoadingLink) {
            return;
        }
        this.progressLoadingLink = progressLoadingLink;
        LoadingDrawable loadingDrawable = this.progressLoadingLinkCurrentDrawable;
        if (loadingDrawable != null) {
            loadingDrawable.disappear();
            this.progressLoadingLinkCurrentDrawable = null;
        }
        LoadingDrawable loadingDrawable2 = new LoadingDrawable();
        this.progressLoadingLinkCurrentDrawable = loadingDrawable2;
        loadingDrawable2.setAppearByGradient(true);
        LinkPath linkPath = new LinkPath(true);
        this.progressLoadingLinkCurrentDrawable.usePath(linkPath);
        this.progressLoadingLinkCurrentDrawable.setRadiiDp(5.0f);
        LoadingDrawableLocation loadingDrawableLocation2 = new LoadingDrawableLocation(this);
        loadingDrawableLocation2.drawable = this.progressLoadingLinkCurrentDrawable;
        loadingDrawableLocation2.blockNum = -3;
        if (this.progressLoadingLinkDrawables == null) {
            this.progressLoadingLinkDrawables = new ArrayList<>();
        }
        this.progressLoadingLinkDrawables.add(loadingDrawableLocation2);
        if (this.progressLoadingLink == null) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        int max = Math.max(0, (messageObject == null || (arrayList = messageObject.textLayoutBlocks) == null) ? 0 : arrayList.size());
        for (int i2 = -2; i2 < max; i2++) {
            float f = 0.0f;
            if (i2 == -2) {
                staticLayout = this.descriptionLayout;
            } else if (i2 == -1) {
                staticLayout = this.captionLayout;
            } else {
                StaticLayout staticLayout2 = this.currentMessageObject.textLayoutBlocks.get(i2).textLayout;
                f = this.currentMessageObject.textLayoutBlocks.get(i2).textYOffset;
                staticLayout = staticLayout2;
            }
            if (staticLayout != null && (staticLayout.getText() instanceof Spanned)) {
                Spanned spanned = (Spanned) staticLayout.getText();
                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spanned.getSpans(0, spanned.length(), CharacterStyle.class);
                if (characterStyleArr != null) {
                    int i3 = 0;
                    while (true) {
                        if (i3 >= characterStyleArr.length) {
                            break;
                        } else if (characterStyleArr[i3] == this.progressLoadingLink) {
                            loadingDrawableLocation2.blockNum = i2;
                            break;
                        } else {
                            i3++;
                        }
                    }
                }
                if (loadingDrawableLocation2.blockNum == i2) {
                    linkPath.rewind();
                    int spanStart = spanned.getSpanStart(this.progressLoadingLink);
                    int spanEnd = spanned.getSpanEnd(this.progressLoadingLink);
                    linkPath.setCurrentLayout(staticLayout, spanStart, f);
                    staticLayout.getSelectionPath(spanStart, spanEnd, linkPath);
                    this.progressLoadingLinkCurrentDrawable.updateBounds();
                    return;
                }
            }
        }
    }

    public boolean needDrawTime() {
        return !this.forceNotDrawTime;
    }

    public boolean shouldDrawTimeOnMedia() {
        int i = this.overideShouldDrawTimeOnMedia;
        if (i != 0) {
            return i == 1;
        } else if (!this.mediaBackground || this.captionLayout != null) {
            return false;
        } else {
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            return reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall || this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.isRoundVideo();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:58:0x0102  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0126  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawTime(Canvas canvas, float f, boolean z) {
        float f2;
        float f3;
        TransitionParams transitionParams;
        float f4;
        float f5;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this) || !shouldDrawTimeOnMedia()) {
            int i = 0;
            while (i < 2) {
                if (i != 0 || !isDrawSelectionBackground() || this.currentSelectedBackgroundAlpha != 1.0f || shouldDrawTimeOnMedia()) {
                    if (i == 1 && ((!isDrawSelectionBackground() && this.currentSelectedBackgroundAlpha == 0.0f) || shouldDrawTimeOnMedia())) {
                        break;
                    }
                    boolean z2 = i == 1;
                    if (i == 1) {
                        f3 = this.currentSelectedBackgroundAlpha;
                    } else if (!shouldDrawTimeOnMedia()) {
                        f3 = 1.0f - this.currentSelectedBackgroundAlpha;
                    } else {
                        f2 = f;
                        if (!this.transitionParams.animateShouldDrawTimeOnMedia && this.transitionParams.animateChangeProgress != 1.0f) {
                            if (shouldDrawTimeOnMedia()) {
                                this.overideShouldDrawTimeOnMedia = 1;
                                boolean z3 = z2;
                                drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z3);
                                this.overideShouldDrawTimeOnMedia = 2;
                                TransitionParams transitionParams2 = this.transitionParams;
                                drawTimeInternal(canvas, f2 * (1.0f - transitionParams2.animateChangeProgress), z, transitionParams2.animateFromTimeX, transitionParams2.animateTimeLayout, this.transitionParams.animateTimeWidth, z3);
                            } else {
                                this.overideShouldDrawTimeOnMedia = 2;
                                boolean z4 = z2;
                                drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z4);
                                this.overideShouldDrawTimeOnMedia = 1;
                                TransitionParams transitionParams3 = this.transitionParams;
                                drawTimeInternal(canvas, f2 * (1.0f - transitionParams3.animateChangeProgress), z, transitionParams3.animateFromTimeX, transitionParams3.animateTimeLayout, this.transitionParams.animateTimeWidth, z4);
                            }
                            this.overideShouldDrawTimeOnMedia = 0;
                        } else {
                            transitionParams = this.transitionParams;
                            if (!transitionParams.shouldAnimateTimeX) {
                                float f6 = transitionParams.animateChangeProgress;
                                f5 = (this.timeX * f6) + (transitionParams.animateFromTimeX * (1.0f - f6));
                                f4 = (this.timeWidth * f6) + (transitionParams.animateTimeWidth * (1.0f - this.transitionParams.animateChangeProgress));
                            } else {
                                float f7 = this.timeX + transitionParams.deltaRight;
                                f4 = this.timeWidth;
                                f5 = f7;
                            }
                            drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                        }
                    }
                    f2 = f3 * f;
                    if (!this.transitionParams.animateShouldDrawTimeOnMedia) {
                    }
                    transitionParams = this.transitionParams;
                    if (!transitionParams.shouldAnimateTimeX) {
                    }
                    drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                }
                i++;
            }
            if (!this.transitionParams.animateBackgroundBoundsInner) {
                return;
            }
            drawOverlays(canvas);
        }
    }

    private void drawTimeInternal(Canvas canvas, float f, boolean z, float f2, StaticLayout staticLayout, float f3, boolean z2) {
        int i;
        float f4;
        float f5;
        char c;
        char c2;
        int i2;
        int i3;
        boolean z3;
        float f6;
        char c3;
        float dp;
        boolean z4;
        Paint themedPaint;
        float f7;
        int dp2;
        float imageY2;
        int i4;
        int i5;
        float f8;
        float currentWidth;
        TextPaint textPaint;
        if (((!this.drawTime || this.groupPhotoInvisible) && shouldDrawTimeOnMedia()) || staticLayout == null) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        if ((messageObject.deleted && this.currentPosition != null) || (i = messageObject.type) == 16) {
            return;
        }
        String str = "chat_outTimeSelectedText";
        String str2 = "chat_inTimeSelectedText";
        if (i == 5) {
            TextPaint textPaint2 = Theme.chat_timePaint;
            int themedColor = getThemedColor("chat_serviceText");
            if (isDrawSelectionBackground()) {
                if (!this.currentMessageObject.isOutOwner()) {
                    str = str2;
                }
            } else {
                str = this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText";
            }
            textPaint2.setColor(ColorUtils.blendARGB(themedColor, getThemedColor(str), getVideoTranscriptionProgress()));
        } else if (shouldDrawTimeOnMedia()) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                Theme.chat_timePaint.setColor(getThemedColor("chat_serviceText"));
            } else {
                Theme.chat_timePaint.setColor(getThemedColor("chat_mediaTimeText"));
            }
        } else if (this.currentMessageObject.isOutOwner()) {
            TextPaint textPaint3 = Theme.chat_timePaint;
            if (!z2) {
                str = "chat_outTimeText";
            }
            textPaint3.setColor(getThemedColor(str));
        } else {
            TextPaint textPaint4 = Theme.chat_timePaint;
            if (!z2) {
                str2 = "chat_inTimeText";
            }
            textPaint4.setColor(getThemedColor(str2));
        }
        float f9 = getTransitionParams().animateDrawingTimeAlpha ? getTransitionParams().animateChangeProgress * f : f;
        if (f9 != 1.0f) {
            Theme.chat_timePaint.setAlpha((int) (textPaint.getAlpha() * f9));
        }
        canvas.save();
        float f10 = 2.0f;
        if (this.drawPinnedBottom && !shouldDrawTimeOnMedia()) {
            canvas.translate(0.0f, AndroidUtilities.dp(2.0f));
        }
        float f11 = this.layoutHeight;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner) {
            f11 += transitionParams.deltaBottom;
        }
        if (transitionParams.shouldAnimateTimeX) {
            float f12 = transitionParams.animateChangeProgress;
            f4 = (transitionParams.animateFromTimeX * (1.0f - f12)) + (this.timeX * f12);
        } else {
            f4 = f2;
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) {
            f5 = f2;
        } else {
            f11 -= getTranslationY();
            float f13 = this.currentMessagesGroup.transitionParams.offsetRight;
            f5 = f2 + f13;
            f4 += f13;
        }
        if (this.drawPinnedBottom && shouldDrawTimeOnMedia()) {
            f11 += AndroidUtilities.dp(1.0f);
        }
        float f14 = f11;
        TransitionParams transitionParams2 = this.transitionParams;
        boolean z5 = transitionParams2.animateBackgroundBoundsInner;
        if (z5) {
            float f15 = this.animationOffsetX;
            f5 += f15;
            f4 += f15;
        }
        float f16 = f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            if (z5 && transitionParams2.deltaRight != 0.0f) {
                currentWidth = reactionsLayoutInBubble.getCurrentWidth(1.0f);
            } else {
                currentWidth = reactionsLayoutInBubble.getCurrentWidth(transitionParams2.animateChangeProgress);
            }
            f4 += currentWidth;
        }
        if (this.transitionParams.animateEditedEnter) {
            f4 -= this.transitionParams.animateEditedWidthDiff * (1.0f - this.transitionParams.animateChangeProgress);
        }
        float f17 = f4;
        boolean z6 = true;
        if (shouldDrawTimeOnMedia()) {
            int i6 = -(this.drawCommentButton ? AndroidUtilities.dp(41.3f) : 0);
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                themedPaint = getThemedPaint("paintChatActionBackground");
            } else {
                themedPaint = getThemedPaint("paintChatTimeBackground");
            }
            int alpha = themedPaint.getAlpha();
            Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f * f9));
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || messageObject2.type != 4) {
                f7 = f9;
            } else {
                float currentAlpha = this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                if (!this.photoImage.hasNotThumb()) {
                    currentAlpha = 0.0f;
                }
                f7 = AndroidUtilities.lerp(0.35f, 1.0f, currentAlpha);
            }
            themedPaint.setAlpha((int) (alpha * this.timeAlpha * f7));
            int i7 = this.documentAttachType;
            if (i7 != 7 && i7 != 6 && this.currentMessageObject.type != 19) {
                int[] roundRadius = this.photoImage.getRoundRadius();
                dp2 = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[2], roundRadius[3]));
                z3 = SharedConfig.bubbleRadius >= 10;
            } else {
                dp2 = AndroidUtilities.dp(4.0f);
                z3 = false;
            }
            float dp3 = f16 - AndroidUtilities.dp(z3 ? 6.0f : 4.0f);
            if (this.documentAttachType == 7) {
                imageY2 = f14 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
            } else {
                imageY2 = this.photoImage.getImageY2() + this.additionalTimeOffsetY;
            }
            float f18 = imageY2;
            float dp4 = f18 - AndroidUtilities.dp(23.0f);
            float max = Math.max(AndroidUtilities.dp(17.0f), Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(5.0f));
            RectF rectF = this.rect;
            float f19 = dp3 + f3;
            int i8 = z3 ? 12 : 8;
            if (this.currentMessageObject.isOutOwner()) {
                i4 = (this.currentMessageObject.type == 19 ? 4 : 0) + 20;
            } else {
                i4 = 0;
            }
            rectF.set(dp3, dp4, f19 + AndroidUtilities.dp(i8 + i4), max + dp4);
            applyServiceShaderMatrix();
            float f20 = dp2;
            canvas.drawRoundRect(this.rect, f20, f20, themedPaint);
            if (themedPaint == getThemedPaint("paintChatActionBackground") && hasGradientService()) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * this.timeAlpha * f7));
                canvas.drawRoundRect(this.rect, f20, f20, Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            }
            themedPaint.setAlpha(alpha);
            float f21 = -staticLayout.getLineLeft(0);
            if (this.reactionsLayoutInBubble.isSmall) {
                updateReactionLayoutPosition();
                this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
            }
            if ((!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && (this.currentMessageObject.messageOwner.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) == 0 && this.repliesLayout == null && !this.isPinned) {
                i5 = i6;
                c = 7;
                c2 = 4;
            } else {
                float lineWidth = f21 + (this.timeWidth - staticLayout.getLineWidth(0));
                ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                    lineWidth -= reactionsLayoutInBubble2.width;
                }
                float f22 = lineWidth;
                int createStatusDrawableParams = this.transitionParams.createStatusDrawableParams();
                int i9 = this.transitionParams.lastStatusDrawableParams;
                if (i9 >= 0 && i9 != createStatusDrawableParams && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i9, createStatusDrawableParams, z);
                }
                boolean z7 = this.statusDrawableAnimationInProgress;
                if (z7) {
                    createStatusDrawableParams = this.animateToStatusDrawableParams;
                }
                boolean z8 = (createStatusDrawableParams & 4) != 0;
                boolean z9 = (createStatusDrawableParams & 8) != 0;
                if (z7) {
                    int i10 = this.animateFromStatusDrawableParams;
                    boolean z10 = (i10 & 4) != 0;
                    boolean z11 = (i10 & 8) != 0;
                    float f23 = i6;
                    float f24 = f9;
                    f8 = f22;
                    c2 = 4;
                    i5 = i6;
                    c = 7;
                    drawClockOrErrorLayout(canvas, z10, z11, f14, f24, f23, f16, 1.0f - this.statusDrawableProgress, z2);
                    drawClockOrErrorLayout(canvas, z8, z9, f14, f24, f23, f16, this.statusDrawableProgress, z2);
                    if (!this.currentMessageObject.isOutOwner()) {
                        if (!z10 && !z11) {
                            drawViewsAndRepliesLayout(canvas, f14, f9, f23, f16, 1.0f - this.statusDrawableProgress, z2);
                        }
                        if (!z8 && !z9) {
                            drawViewsAndRepliesLayout(canvas, f14, f9, f23, f16, this.statusDrawableProgress, z2);
                        }
                    }
                } else {
                    f8 = f22;
                    c = 7;
                    c2 = 4;
                    i5 = i6;
                    if (!this.currentMessageObject.isOutOwner() && !z8 && !z9) {
                        drawViewsAndRepliesLayout(canvas, f14, f9, i5, f16, 1.0f, z2);
                    }
                    drawClockOrErrorLayout(canvas, z8, z9, f14, f9, i5, f16, 1.0f, z2);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    drawViewsAndRepliesLayout(canvas, f14, f9, i5, f16, 1.0f, z2);
                }
                TransitionParams transitionParams3 = this.transitionParams;
                transitionParams3.lastStatusDrawableParams = transitionParams3.createStatusDrawableParams();
                if (z8 && z && getParent() != null) {
                    ((View) getParent()).invalidate();
                }
                f21 = f8;
            }
            canvas.save();
            float f25 = f17 + f21;
            this.drawTimeX = f25;
            float dp5 = (f18 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
            this.drawTimeY = dp5;
            canvas.translate(f25, dp5);
            staticLayout.draw(canvas);
            canvas.restore();
            Theme.chat_timePaint.setAlpha(255);
            i3 = i5;
        } else {
            c = 7;
            c2 = 4;
            if (this.currentMessageObject.isSponsored()) {
                i2 = -AndroidUtilities.dp(48.0f);
                if (this.hasNewLineForTime) {
                    i2 -= AndroidUtilities.dp(16.0f);
                }
            } else {
                i2 = -(this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0);
            }
            int i11 = i2;
            float f26 = -staticLayout.getLineLeft(0);
            if (this.reactionsLayoutInBubble.isSmall) {
                updateReactionLayoutPosition();
                this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
            }
            if ((ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) || (this.currentMessageObject.messageOwner.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0 || this.repliesLayout != null || this.transitionParams.animateReplies || this.isPinned || this.transitionParams.animatePinned) {
                float lineWidth2 = f26 + (f3 - staticLayout.getLineWidth(0));
                ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble3.isSmall && !reactionsLayoutInBubble3.isEmpty) {
                    lineWidth2 -= reactionsLayoutInBubble3.width;
                }
                float f27 = lineWidth2;
                int createStatusDrawableParams2 = this.transitionParams.createStatusDrawableParams();
                int i12 = this.transitionParams.lastStatusDrawableParams;
                if (i12 >= 0 && i12 != createStatusDrawableParams2 && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i12, createStatusDrawableParams2, z);
                }
                boolean z12 = this.statusDrawableAnimationInProgress;
                if (z12) {
                    createStatusDrawableParams2 = this.animateToStatusDrawableParams;
                }
                boolean z13 = (createStatusDrawableParams2 & 4) != 0;
                boolean z14 = (createStatusDrawableParams2 & 8) != 0;
                if (z12) {
                    int i13 = this.animateFromStatusDrawableParams;
                    boolean z15 = (i13 & 4) != 0;
                    boolean z16 = (i13 & 8) != 0;
                    float f28 = i11;
                    float f29 = f9;
                    drawClockOrErrorLayout(canvas, z15, z16, f14, f29, f28, f16, 1.0f - this.statusDrawableProgress, z2);
                    drawClockOrErrorLayout(canvas, z13, z14, f14, f29, f28, f16, this.statusDrawableProgress, z2);
                    if (!this.currentMessageObject.isOutOwner()) {
                        if (!z15 && !z16) {
                            drawViewsAndRepliesLayout(canvas, f14, f9, f28, f16, 1.0f - this.statusDrawableProgress, z2);
                        }
                        if (!z13 && !z14) {
                            drawViewsAndRepliesLayout(canvas, f14, f9, f28, f16, this.statusDrawableProgress, z2);
                        }
                    }
                } else {
                    if (!this.currentMessageObject.isOutOwner() && !z13 && !z14) {
                        drawViewsAndRepliesLayout(canvas, f14, f9, i11, f16, 1.0f, z2);
                    }
                    drawClockOrErrorLayout(canvas, z13, z14, f14, f9, i11, f16, 1.0f, z2);
                }
                if (this.currentMessageObject.isOutOwner()) {
                    drawViewsAndRepliesLayout(canvas, f14, f9, i11, f16, 1.0f, z2);
                }
                TransitionParams transitionParams4 = this.transitionParams;
                transitionParams4.lastStatusDrawableParams = transitionParams4.createStatusDrawableParams();
                if (z13 && z && getParent() != null) {
                    ((View) getParent()).invalidate();
                }
                f26 = f27;
            }
            canvas.save();
            float f30 = 6.5f;
            if (this.transitionParams.animateEditedEnter) {
                TransitionParams transitionParams5 = this.transitionParams;
                if (transitionParams5.animateChangeProgress != 1.0f) {
                    if (transitionParams5.animateEditedLayout != null) {
                        float f31 = f17 + f26;
                        if (this.pinnedBottom || this.pinnedTop) {
                            f30 = 7.5f;
                        }
                        canvas.translate(f31, ((f14 - AndroidUtilities.dp(f30)) - staticLayout.getHeight()) + i11);
                        int alpha3 = Theme.chat_timePaint.getAlpha();
                        Theme.chat_timePaint.setAlpha((int) (alpha3 * this.transitionParams.animateChangeProgress));
                        this.transitionParams.animateEditedLayout.draw(canvas);
                        Theme.chat_timePaint.setAlpha(alpha3);
                        this.transitionParams.animateTimeLayout.draw(canvas);
                    } else {
                        int alpha4 = Theme.chat_timePaint.getAlpha();
                        canvas.save();
                        float f32 = i11;
                        canvas.translate(this.transitionParams.animateFromTimeX + f26, ((f14 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - staticLayout.getHeight()) + f32);
                        float f33 = alpha4;
                        Theme.chat_timePaint.setAlpha((int) ((1.0f - this.transitionParams.animateChangeProgress) * f33));
                        this.transitionParams.animateTimeLayout.draw(canvas);
                        canvas.restore();
                        float f34 = f17 + f26;
                        if (this.pinnedBottom || this.pinnedTop) {
                            f30 = 7.5f;
                        }
                        canvas.translate(f34, ((f14 - AndroidUtilities.dp(f30)) - staticLayout.getHeight()) + f32);
                        Theme.chat_timePaint.setAlpha((int) (f33 * this.transitionParams.animateChangeProgress));
                        staticLayout.draw(canvas);
                        Theme.chat_timePaint.setAlpha(alpha4);
                    }
                    canvas.restore();
                    i3 = i11;
                    z3 = false;
                }
            }
            float f35 = f17 + f26;
            this.drawTimeX = f35;
            if (this.pinnedBottom || this.pinnedTop) {
                f30 = 7.5f;
            }
            float dp6 = ((f14 - AndroidUtilities.dp(f30)) - staticLayout.getHeight()) + i11;
            this.drawTimeY = dp6;
            canvas.translate(f35, dp6);
            staticLayout.draw(canvas);
            canvas.restore();
            i3 = i11;
            z3 = false;
        }
        if (this.currentMessageObject.isOutOwner()) {
            int createStatusDrawableParams3 = this.transitionParams.createStatusDrawableParams();
            int i14 = this.transitionParams.lastStatusDrawableParams;
            if (i14 >= 0 && i14 != createStatusDrawableParams3 && !this.statusDrawableAnimationInProgress) {
                createStatusDrawableAnimator(i14, createStatusDrawableParams3, z);
            }
            if (this.statusDrawableAnimationInProgress) {
                createStatusDrawableParams3 = this.animateToStatusDrawableParams;
            }
            boolean z17 = (createStatusDrawableParams3 & 1) != 0;
            boolean z18 = (createStatusDrawableParams3 & 2) != 0;
            boolean z19 = (createStatusDrawableParams3 & 4) != 0;
            boolean z20 = (createStatusDrawableParams3 & 8) != 0;
            if (this.transitionYOffsetForDrawables != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, this.transitionYOffsetForDrawables);
                z4 = true;
            } else {
                z4 = false;
            }
            if (this.statusDrawableAnimationInProgress) {
                int i15 = this.animateFromStatusDrawableParams;
                boolean z21 = (i15 & 1) != 0;
                boolean z22 = (i15 & 2) != 0;
                boolean z23 = (i15 & 4) != 0;
                boolean z24 = (i15 & 8) != 0;
                if (!z23 && z22 && z18 && !z21 && z17) {
                    f6 = 0.0f;
                    c3 = 5;
                    drawStatusDrawable(canvas, z17, z18, z19, z20, f9, z3, i3, f14, this.statusDrawableProgress, true, z2);
                } else {
                    f6 = 0.0f;
                    c3 = 5;
                    float f36 = i3;
                    boolean z25 = z23;
                    boolean z26 = z24;
                    float f37 = f9;
                    boolean z27 = z3;
                    drawStatusDrawable(canvas, z21, z22, z25, z26, f37, z27, f36, f14, 1.0f - this.statusDrawableProgress, false, z2);
                    drawStatusDrawable(canvas, z17, z18, z19, z20, f37, z27, f36, f14, this.statusDrawableProgress, false, z2);
                }
            } else {
                f6 = 0.0f;
                c3 = 5;
                drawStatusDrawable(canvas, z17, z18, z19, z20, f9, z3, i3, f14, 1.0f, false, z2);
            }
            if (z4) {
                canvas.restore();
            }
            TransitionParams transitionParams6 = this.transitionParams;
            transitionParams6.lastStatusDrawableParams = transitionParams6.createStatusDrawableParams();
            if (z && z19 && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        } else {
            f6 = 0.0f;
            c3 = 5;
        }
        canvas.restore();
        if (this.unlockLayout == null) {
            return;
        }
        if (this.unlockX == f6 || this.unlockY == f6) {
            calculateUnlockXY();
        }
        this.unlockSpoilerPath.rewind();
        RectF rectF2 = AndroidUtilities.rectTmp;
        rectF2.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
        int[] roundRadius2 = this.photoImage.getRoundRadius();
        float[] fArr = this.unlockSpoilerRadii;
        float f38 = roundRadius2[0];
        fArr[1] = f38;
        fArr[0] = f38;
        float f39 = roundRadius2[1];
        fArr[3] = f39;
        fArr[2] = f39;
        float f40 = roundRadius2[2];
        fArr[c3] = f40;
        fArr[c2] = f40;
        float f41 = roundRadius2[3];
        fArr[c] = f41;
        fArr[6] = f41;
        this.unlockSpoilerPath.addRoundRect(rectF2, fArr, Path.Direction.CW);
        canvas.save();
        canvas.clipPath(this.unlockSpoilerPath);
        this.unlockSpoilerPath.rewind();
        rectF2.set(this.unlockX - AndroidUtilities.dp(12.0f), this.unlockY - AndroidUtilities.dp(8.0f), this.unlockX + Theme.chat_msgUnlockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(14.0f) + this.unlockLayout.getWidth() + AndroidUtilities.dp(12.0f), this.unlockY + this.unlockLayout.getHeight() + AndroidUtilities.dp(8.0f));
        this.unlockSpoilerPath.addRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), Path.Direction.CW);
        canvas.clipPath(this.unlockSpoilerPath, Region.Op.DIFFERENCE);
        this.unlockSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
        this.unlockSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
        this.unlockSpoilerEffect.draw(canvas);
        invalidate();
        canvas.restore();
        canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), (int) (this.unlockAlpha * 255.0f), 31);
        int alpha5 = Theme.chat_timeBackgroundPaint.getAlpha();
        Theme.chat_timeBackgroundPaint.setAlpha((int) (alpha5 * 0.7f));
        canvas.drawRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), Theme.chat_timeBackgroundPaint);
        Theme.chat_timeBackgroundPaint.setAlpha(alpha5);
        canvas.translate(this.unlockX + AndroidUtilities.dp(4.0f), this.unlockY);
        Drawable drawable = Theme.chat_msgUnlockDrawable;
        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), Theme.chat_msgUnlockDrawable.getIntrinsicHeight());
        Theme.chat_msgUnlockDrawable.draw(canvas);
        canvas.translate(AndroidUtilities.dp(6.0f) + Theme.chat_msgUnlockDrawable.getIntrinsicWidth(), f6);
        this.unlockLayout.draw(canvas);
        canvas.restore();
        if (this.videoInfoLayout == null || !this.photoImage.getVisible() || this.imageBackgroundSideColor != 0) {
            return;
        }
        int i16 = SharedConfig.bubbleRadius;
        if (i16 > 2) {
            dp = AndroidUtilities.dp(i16 - 2);
            if (SharedConfig.bubbleRadius < 10) {
                z6 = false;
            }
            z3 = z6;
        } else {
            dp = AndroidUtilities.dp(i16);
        }
        int imageX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(9.0f));
        int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
        RectF rectF3 = this.rect;
        float dp7 = imageX - AndroidUtilities.dp(4.0f);
        float dp8 = imageY - AndroidUtilities.dp(1.5f);
        int dp9 = this.durationWidth + imageX + AndroidUtilities.dp(4.0f);
        if (!z3) {
            f10 = 0.0f;
        }
        rectF3.set(dp7, dp8, dp9 + AndroidUtilities.dp(f10), this.videoInfoLayout.getHeight() + imageY + AndroidUtilities.dp(1.5f));
        canvas.drawRoundRect(this.rect, dp, dp, getThemedPaint("paintChatTimeBackground"));
        canvas.save();
        canvas.translate(imageX + (z3 ? 2 : 0), imageY);
        this.videoInfoLayout.draw(canvas);
        canvas.restore();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createStatusDrawableAnimator(int i, int i2, final boolean z) {
        boolean z2 = false;
        boolean z3 = (i2 & 1) != 0;
        boolean z4 = (i2 & 2) != 0;
        boolean z5 = (i & 1) != 0;
        boolean z6 = (i & 2) != 0;
        if (!((i & 4) != 0) && z6 && z4 && !z5 && z3) {
            z2 = true;
        }
        if (!this.transitionParams.messageEntering || z2) {
            this.statusDrawableProgress = 0.0f;
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.statusDrawableAnimator = ofFloat;
            if (z2) {
                ofFloat.setDuration(220L);
            } else {
                ofFloat.setDuration(150L);
            }
            this.statusDrawableAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.animateFromStatusDrawableParams = i;
            this.animateToStatusDrawableParams = i2;
            this.statusDrawableAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda1
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatMessageCell.this.lambda$createStatusDrawableAnimator$9(z, valueAnimator);
                }
            });
            this.statusDrawableAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.10
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    int createStatusDrawableParams = ChatMessageCell.this.transitionParams.createStatusDrawableParams();
                    if (ChatMessageCell.this.animateToStatusDrawableParams == createStatusDrawableParams) {
                        ChatMessageCell.this.statusDrawableAnimationInProgress = false;
                        ChatMessageCell.this.transitionParams.lastStatusDrawableParams = ChatMessageCell.this.animateToStatusDrawableParams;
                        return;
                    }
                    ChatMessageCell chatMessageCell = ChatMessageCell.this;
                    chatMessageCell.createStatusDrawableAnimator(chatMessageCell.animateToStatusDrawableParams, createStatusDrawableParams, z);
                }
            });
            this.statusDrawableAnimationInProgress = true;
            this.statusDrawableAnimator.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createStatusDrawableAnimator$9(boolean z, ValueAnimator valueAnimator) {
        this.statusDrawableProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
        if (!z || getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    /* JADX WARN: Removed duplicated region for block: B:56:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x01a8  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawClockOrErrorLayout(Canvas canvas, boolean z, boolean z2, float f, float f2, float f3, float f4, float f5, boolean z3) {
        float dp;
        float currentTotalHeight;
        int themedColor;
        float f6;
        int i = 0;
        boolean z4 = f5 != 1.0f;
        float f7 = (f5 * 0.5f) + 0.5f;
        float f8 = f2 * f5;
        if (z) {
            if (this.currentMessageObject.isOutOwner()) {
                return;
            }
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            String str = "chat_mediaSentClock";
            if (shouldDrawTimeOnMedia()) {
                themedColor = getThemedColor(str);
            } else {
                if (z3) {
                    str = "chat_outSentClockSelected";
                }
                themedColor = getThemedColor(str);
            }
            msgClockDrawable.setColor(themedColor);
            if (shouldDrawTimeOnMedia()) {
                f6 = (this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(9.0f);
            } else {
                float dp2 = (f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.5f : 8.5f)) + f3;
                if (this.isRoundVideo) {
                    f6 = dp2 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
                } else {
                    f6 = dp2;
                }
            }
            if (!this.currentMessageObject.scheduled) {
                i = AndroidUtilities.dp(11.0f);
            }
            BaseCell.setDrawableBounds(msgClockDrawable, f4 + i, f6 - msgClockDrawable.getIntrinsicHeight());
            msgClockDrawable.setAlpha((int) (f8 * 255.0f));
            if (z4) {
                canvas.save();
                canvas.scale(f7, f7, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(255);
            invalidate();
            if (!z4) {
                return;
            }
            canvas.restore();
        } else if (!z2 || this.currentMessageObject.isOutOwner()) {
        } else {
            if (!this.currentMessageObject.scheduled) {
                i = AndroidUtilities.dp(11.0f);
            }
            float f9 = f4 + i;
            float f10 = 21.5f;
            if (shouldDrawTimeOnMedia()) {
                dp = this.photoImage.getImageY2() + this.additionalTimeOffsetY;
                currentTotalHeight = AndroidUtilities.dp(21.5f);
            } else {
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f10 = 20.5f;
                }
                dp = (f - AndroidUtilities.dp(f10)) + f3;
                if (this.isRoundVideo) {
                    currentTotalHeight = this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                }
                this.rect.set(f9, dp, AndroidUtilities.dp(14.0f) + f9, AndroidUtilities.dp(14.0f) + dp);
                int alpha = Theme.chat_msgErrorPaint.getAlpha();
                int i2 = (int) (f8 * 255.0f);
                Theme.chat_msgErrorPaint.setAlpha(i2);
                if (z4) {
                    canvas.save();
                    canvas.scale(f7, f7, this.rect.centerX(), this.rect.centerY());
                }
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
                Theme.chat_msgErrorPaint.setAlpha(alpha);
                Drawable themedDrawable = getThemedDrawable("drawableMsgError");
                BaseCell.setDrawableBounds(themedDrawable, f9 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
                themedDrawable.setAlpha(i2);
                themedDrawable.draw(canvas);
                themedDrawable.setAlpha(255);
                if (z4) {
                    return;
                }
                canvas.restore();
                return;
            }
            dp -= currentTotalHeight;
            this.rect.set(f9, dp, AndroidUtilities.dp(14.0f) + f9, AndroidUtilities.dp(14.0f) + dp);
            int alpha2 = Theme.chat_msgErrorPaint.getAlpha();
            int i22 = (int) (f8 * 255.0f);
            Theme.chat_msgErrorPaint.setAlpha(i22);
            if (z4) {
            }
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha2);
            Drawable themedDrawable2 = getThemedDrawable("drawableMsgError");
            BaseCell.setDrawableBounds(themedDrawable2, f9 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
            themedDrawable2.setAlpha(i22);
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(255);
            if (z4) {
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x04a8  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x04c2  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x048e  */
    /* JADX WARN: Removed duplicated region for block: B:109:0x0427  */
    /* JADX WARN: Removed duplicated region for block: B:120:0x03b6  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x039e  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x012d  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x013c  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0145  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x0192  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x01bc  */
    /* JADX WARN: Removed duplicated region for block: B:192:0x0219  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0235  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x0244  */
    /* JADX WARN: Removed duplicated region for block: B:200:0x024f  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x021d  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x0203  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0180  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x025d  */
    /* JADX WARN: Removed duplicated region for block: B:211:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:227:0x00b7  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x03b2  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x03db  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x03fd  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x040c  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0415  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x044a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawViewsAndRepliesLayout(Canvas canvas, float f, float f2, float f3, float f4, float f5, boolean z) {
        float dp;
        float dp2;
        float f6;
        boolean z2;
        TransitionParams transitionParams;
        MessageObject.GroupedMessages groupedMessages;
        Drawable themedDrawable;
        float f7;
        float f8;
        float f9;
        float f10;
        StaticLayout staticLayout;
        float f11;
        MessageObject.GroupedMessages groupedMessages2;
        Drawable themedDrawable2;
        float drawableBounds;
        Drawable themedDrawable3;
        boolean z3 = f5 != 1.0f;
        float f12 = (f5 * 0.5f) + 0.5f;
        float f13 = f2 * f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float currentWidth = reactionsLayoutInBubble.isSmall ? reactionsLayoutInBubble.getCurrentWidth(1.0f) : 0.0f;
        int alpha = Theme.chat_timePaint.getAlpha();
        if (shouldDrawTimeOnMedia() && this.documentAttachType != 7) {
            dp = (this.photoImage.getImageY2() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f);
            dp2 = this.timeLayout.getHeight();
        } else {
            dp = ((f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + f3;
            if (this.isRoundVideo) {
                dp2 = (AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress());
            }
            if (this.repliesLayout == null || this.transitionParams.animateReplies) {
                TransitionParams transitionParams2 = this.transitionParams;
                f6 = (!transitionParams2.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
                z2 = !transitionParams2.animateReplies && this.transitionParams.animateRepliesLayout == null && this.repliesLayout != null;
                boolean z4 = !this.transitionParams.animateReplies && this.transitionParams.animateRepliesLayout != null && this.repliesLayout == null;
                boolean z5 = (this.transitionParams.animateReplies || this.transitionParams.animateRepliesLayout == null || this.repliesLayout == null) ? false : true;
                if (this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                    transitionParams = this.transitionParams;
                    if (transitionParams.shouldAnimateTimeX || z2) {
                        f6 += transitionParams.deltaRight;
                    } else if (z4) {
                        f6 = transitionParams.animateFromTimeXReplies;
                    } else {
                        float f14 = transitionParams.animateFromTimeXReplies;
                        float f15 = this.transitionParams.animateChangeProgress;
                        f6 = (f6 * f15) + (f14 * (1.0f - f15));
                    }
                }
                groupedMessages = this.currentMessagesGroup;
                if (groupedMessages != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages.transitionParams;
                    if (transitionParams3.backgroundChangeBounds) {
                        f6 += transitionParams3.offsetRight;
                    }
                }
                if (this.transitionParams.animateBackgroundBoundsInner) {
                    f6 += this.animationOffsetX;
                }
                if (!shouldDrawTimeOnMedia()) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        themedDrawable = getThemedDrawable("drawableMsgStickerReplies");
                    } else {
                        themedDrawable = Theme.chat_msgMediaRepliesDrawable;
                    }
                } else if (!this.currentMessageObject.isOutOwner()) {
                    themedDrawable = z ? Theme.chat_msgInRepliesSelectedDrawable : Theme.chat_msgInRepliesDrawable;
                } else {
                    themedDrawable = getThemedDrawable("drawableMsgOutReplies");
                }
                float drawableBounds2 = BaseCell.setDrawableBounds(themedDrawable, f6, dp, Theme.chat_timePaint.getTextSize());
                if (!z2) {
                    f8 = this.transitionParams.animateChangeProgress;
                } else if (z4) {
                    f8 = 1.0f - this.transitionParams.animateChangeProgress;
                } else {
                    f7 = f13;
                    themedDrawable.setAlpha((int) (f7 * 255.0f));
                    if (z3) {
                        canvas.save();
                        canvas.scale(f12, f12, (((AndroidUtilities.dp(3.0f) + drawableBounds2) + this.repliesTextWidth) / 2.0f) + f6, themedDrawable.getBounds().centerY());
                    }
                    themedDrawable.draw(canvas);
                    themedDrawable.setAlpha(255);
                    if (this.transitionParams.animateReplies) {
                        if (z5) {
                            canvas.save();
                            TextPaint textPaint = Theme.chat_timePaint;
                            double d = alpha;
                            f9 = f13;
                            f10 = f12;
                            double d2 = this.transitionParams.animateChangeProgress;
                            Double.isNaN(d2);
                            Double.isNaN(d);
                            textPaint.setAlpha((int) (d * (1.0d - d2)));
                            canvas.translate(f6 + drawableBounds2 + AndroidUtilities.dp(3.0f), dp);
                            this.transitionParams.animateRepliesLayout.draw(canvas);
                            canvas.restore();
                        } else {
                            f9 = f13;
                            f10 = f12;
                        }
                        Theme.chat_timePaint.setAlpha((int) (alpha * f7));
                    } else {
                        f9 = f13;
                        f10 = f12;
                    }
                    canvas.save();
                    canvas.translate(f6 + drawableBounds2 + AndroidUtilities.dp(3.0f), dp);
                    staticLayout = this.repliesLayout;
                    if (staticLayout != null) {
                        staticLayout.draw(canvas);
                    } else if (this.transitionParams.animateRepliesLayout != null) {
                        this.transitionParams.animateRepliesLayout.draw(canvas);
                    }
                    canvas.restore();
                    if (this.repliesLayout != null) {
                        currentWidth += drawableBounds2 + this.repliesTextWidth + AndroidUtilities.dp(10.0f);
                    }
                    if (z3) {
                        canvas.restore();
                    }
                    if (this.transitionParams.animateReplies) {
                        Theme.chat_timePaint.setAlpha(alpha);
                    }
                    this.transitionParams.lastTimeXReplies = f6;
                }
                f7 = f8 * f13;
                themedDrawable.setAlpha((int) (f7 * 255.0f));
                if (z3) {
                }
                themedDrawable.draw(canvas);
                themedDrawable.setAlpha(255);
                if (this.transitionParams.animateReplies) {
                }
                canvas.save();
                canvas.translate(f6 + drawableBounds2 + AndroidUtilities.dp(3.0f), dp);
                staticLayout = this.repliesLayout;
                if (staticLayout != null) {
                }
                canvas.restore();
                if (this.repliesLayout != null) {
                }
                if (z3) {
                }
                if (this.transitionParams.animateReplies) {
                }
                this.transitionParams.lastTimeXReplies = f6;
            } else {
                f9 = f13;
                f10 = f12;
            }
            if (this.viewsLayout == null) {
                TransitionParams transitionParams4 = this.transitionParams;
                boolean z6 = transitionParams4.shouldAnimateTimeX;
                float f16 = (z6 ? this.timeX : f4) + currentWidth;
                if (!this.isRoundVideo || !transitionParams4.animateDrawBackground) {
                    if (!z6) {
                        f16 += transitionParams4.deltaRight;
                    } else {
                        float f17 = transitionParams4.animateFromTimeXViews;
                        float f18 = this.transitionParams.animateChangeProgress;
                        f16 = (f16 * f18) + (f17 * (1.0f - f18));
                    }
                }
                MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages3.transitionParams;
                    if (transitionParams5.backgroundChangeBounds) {
                        f16 += transitionParams5.offsetRight;
                    }
                }
                if (this.transitionParams.animateBackgroundBoundsInner) {
                    f16 += this.animationOffsetX;
                }
                if (shouldDrawTimeOnMedia()) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        themedDrawable3 = getThemedDrawable("drawableMsgStickerViews");
                    } else {
                        themedDrawable3 = Theme.chat_msgMediaViewsDrawable;
                    }
                } else if (!this.currentMessageObject.isOutOwner()) {
                    themedDrawable3 = z ? Theme.chat_msgInViewsSelectedDrawable : Theme.chat_msgInViewsDrawable;
                } else {
                    themedDrawable3 = getThemedDrawable(z ? "drawableMsgOutViewsSelected" : "drawableMsgOutViews");
                }
                float drawableBounds3 = BaseCell.setDrawableBounds(themedDrawable3, f16, AndroidUtilities.dp(1.5f) + dp, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
                if (z3) {
                    canvas.save();
                    f11 = f10;
                    canvas.scale(f11, f11, (((themedDrawable3.getIntrinsicWidth() + AndroidUtilities.dp(3.0f)) + this.viewsTextWidth) / 2.0f) + f16, themedDrawable3.getBounds().centerY());
                } else {
                    f11 = f10;
                }
                themedDrawable3.setAlpha((int) (f9 * 255.0f));
                themedDrawable3.draw(canvas);
                themedDrawable3.setAlpha(255);
                if (this.transitionParams.animateViewsLayout != null) {
                    canvas.save();
                    TextPaint textPaint2 = Theme.chat_timePaint;
                    double d3 = alpha;
                    double d4 = this.transitionParams.animateChangeProgress;
                    Double.isNaN(d4);
                    Double.isNaN(d3);
                    textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                    canvas.translate(f16 + drawableBounds3 + AndroidUtilities.dp(3.0f), dp);
                    this.transitionParams.animateViewsLayout.draw(canvas);
                    canvas.restore();
                    Theme.chat_timePaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                }
                canvas.save();
                canvas.translate(f16 + drawableBounds3 + AndroidUtilities.dp(3.0f), dp);
                this.viewsLayout.draw(canvas);
                canvas.restore();
                if (z3) {
                    canvas.restore();
                }
                currentWidth += this.viewsTextWidth + drawableBounds3 + AndroidUtilities.dp(10.0f);
                if (this.transitionParams.animateViewsLayout != null) {
                    Theme.chat_timePaint.setAlpha(alpha);
                }
                this.transitionParams.lastTimeXViews = f16;
            } else {
                f11 = f10;
            }
            if (this.isPinned && !this.transitionParams.animatePinned) {
                return;
            }
            TransitionParams transitionParams6 = this.transitionParams;
            float f19 = (!transitionParams6.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z7 = !transitionParams6.animatePinned && this.isPinned;
            boolean z8 = !this.transitionParams.animatePinned && !this.isPinned;
            if (!this.isRoundVideo) {
                TransitionParams transitionParams7 = this.transitionParams;
                if (!transitionParams7.shouldAnimateTimeX || z7) {
                    f19 += transitionParams7.deltaRight;
                } else if (z8) {
                    f19 = transitionParams7.animateFromTimeXPinned;
                } else {
                    float f20 = transitionParams7.animateFromTimeXPinned;
                    float f21 = transitionParams7.animateChangeProgress;
                    f19 = (f19 * f21) + (f20 * (1.0f - f21));
                }
            }
            groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams8 = groupedMessages2.transitionParams;
                if (transitionParams8.backgroundChangeBounds) {
                    f19 += transitionParams8.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f19 += this.animationOffsetX;
            }
            if (!shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    themedDrawable2 = getThemedDrawable("drawableMsgStickerPinned");
                } else {
                    themedDrawable2 = Theme.chat_msgMediaPinnedDrawable;
                }
            } else if (!this.currentMessageObject.isOutOwner()) {
                themedDrawable2 = z ? Theme.chat_msgInPinnedSelectedDrawable : Theme.chat_msgInPinnedDrawable;
            } else {
                themedDrawable2 = getThemedDrawable(z ? "drawableMsgOutPinnedSelected" : "drawableMsgOutPinned");
            }
            if (!this.transitionParams.animatePinned) {
                if (this.isPinned) {
                    themedDrawable2.setAlpha((int) (f9 * 255.0f * this.transitionParams.animateChangeProgress));
                    drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, dp, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
                } else {
                    themedDrawable2.setAlpha((int) (f9 * 255.0f * (1.0f - this.transitionParams.animateChangeProgress)));
                    drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, dp, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
                }
            } else {
                themedDrawable2.setAlpha((int) (f9 * 255.0f));
                drawableBounds = BaseCell.setDrawableBounds(themedDrawable2, f19, dp, Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(1.0f));
            }
            if (z3) {
                canvas.save();
                canvas.scale(f11, f11, (drawableBounds / 2.0f) + f19, themedDrawable2.getBounds().centerY());
            }
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(255);
            if (z3) {
                canvas.restore();
            }
            this.transitionParams.lastTimeXPinned = f19;
        }
        dp -= dp2;
        if (this.repliesLayout == null) {
        }
        TransitionParams transitionParams22 = this.transitionParams;
        f6 = (!transitionParams22.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
        if (!transitionParams22.animateReplies) {
        }
        if (!this.transitionParams.animateReplies) {
        }
        if (this.transitionParams.animateReplies) {
        }
        if (this.isRoundVideo) {
        }
        transitionParams = this.transitionParams;
        if (transitionParams.shouldAnimateTimeX) {
        }
        f6 += transitionParams.deltaRight;
        groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null) {
        }
        if (this.transitionParams.animateBackgroundBoundsInner) {
        }
        if (!shouldDrawTimeOnMedia()) {
        }
        float drawableBounds22 = BaseCell.setDrawableBounds(themedDrawable, f6, dp, Theme.chat_timePaint.getTextSize());
        if (!z2) {
        }
        f7 = f8 * f13;
        themedDrawable.setAlpha((int) (f7 * 255.0f));
        if (z3) {
        }
        themedDrawable.draw(canvas);
        themedDrawable.setAlpha(255);
        if (this.transitionParams.animateReplies) {
        }
        canvas.save();
        canvas.translate(f6 + drawableBounds22 + AndroidUtilities.dp(3.0f), dp);
        staticLayout = this.repliesLayout;
        if (staticLayout != null) {
        }
        canvas.restore();
        if (this.repliesLayout != null) {
        }
        if (z3) {
        }
        if (this.transitionParams.animateReplies) {
        }
        this.transitionParams.lastTimeXReplies = f6;
        if (this.viewsLayout == null) {
        }
        if (this.isPinned) {
        }
        TransitionParams transitionParams62 = this.transitionParams;
        float f192 = (!transitionParams62.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
        if (!transitionParams62.animatePinned) {
        }
        if (!this.transitionParams.animatePinned) {
        }
        if (!this.isRoundVideo) {
        }
        groupedMessages2 = this.currentMessagesGroup;
        if (groupedMessages2 != null) {
        }
        if (this.transitionParams.animateBackgroundBoundsInner) {
        }
        if (!shouldDrawTimeOnMedia()) {
        }
        if (!this.transitionParams.animatePinned) {
        }
        if (z3) {
        }
        themedDrawable2.draw(canvas);
        themedDrawable2.setAlpha(255);
        if (z3) {
        }
        this.transitionParams.lastTimeXPinned = f192;
    }

    private void drawStatusDrawable(Canvas canvas, boolean z, boolean z2, boolean z3, boolean z4, float f, boolean z5, float f2, float f3, float f4, boolean z6, boolean z7) {
        float imageY2;
        int dp;
        int dp2;
        Drawable themedDrawable;
        Drawable drawable;
        int i;
        boolean z8 = f4 != 1.0f && !z6;
        float f5 = (f4 * 0.5f) + 0.5f;
        float f6 = z8 ? f * f4 : f;
        if (this.documentAttachType == 7) {
            imageY2 = f3 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
        } else {
            imageY2 = this.photoImage.getImageY2() + this.additionalTimeOffsetY;
        }
        float dp3 = imageY2 - AndroidUtilities.dp(8.5f);
        if (z3) {
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            if (shouldDrawTimeOnMedia()) {
                float f7 = 24.0f;
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i = getThemedColor("chat_serviceText");
                    int i2 = this.layoutWidth;
                    if (!z5) {
                        f7 = 22.0f;
                    }
                    BaseCell.setDrawableBounds(msgClockDrawable, (i2 - AndroidUtilities.dp(f7)) - msgClockDrawable.getIntrinsicWidth(), (dp3 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    i = getThemedColor("chat_mediaSentClock");
                    int i3 = this.layoutWidth;
                    if (!z5) {
                        f7 = 22.0f;
                    }
                    BaseCell.setDrawableBounds(msgClockDrawable, (i3 - AndroidUtilities.dp(f7)) - msgClockDrawable.getIntrinsicWidth(), (dp3 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                }
            } else {
                int themedColor = getThemedColor("chat_outSentClock");
                BaseCell.setDrawableBounds(msgClockDrawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - msgClockDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp(8.5f)) - msgClockDrawable.getIntrinsicHeight()) + f2);
                msgClockDrawable.setAlpha((int) (f6 * 255.0f));
                i = themedColor;
            }
            msgClockDrawable.setColor(i);
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(255);
            if (z8) {
                canvas.restore();
            }
            invalidate();
        }
        float f8 = 23.5f;
        float f9 = 9.0f;
        if (z2) {
            if (shouldDrawTimeOnMedia()) {
                if (z6) {
                    canvas.save();
                }
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable = getThemedDrawable("drawableMsgStickerCheck");
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        BaseCell.setDrawableBounds(drawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 28.3f : 26.3f)) - drawable.getIntrinsicWidth(), (dp3 - drawable.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(drawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - drawable.getIntrinsicWidth(), (dp3 - drawable.getIntrinsicHeight()) + f2);
                    }
                    drawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                } else {
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        BaseCell.setDrawableBounds(Theme.chat_msgMediaCheckDrawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 28.3f : 26.3f)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (dp3 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    } else {
                        BaseCell.setDrawableBounds(Theme.chat_msgMediaCheckDrawable, (this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (dp3 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    }
                    Theme.chat_msgMediaCheckDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                    drawable = Theme.chat_msgMediaCheckDrawable;
                }
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, drawable.getBounds().centerX(), drawable.getBounds().centerY());
                }
                drawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                drawable.setAlpha(255);
            } else {
                if (z6) {
                    canvas.save();
                }
                if (z) {
                    if (z6) {
                        canvas.translate(AndroidUtilities.dp(4.0f) * (1.0f - f4), 0.0f);
                    }
                    themedDrawable = getThemedDrawable(z7 ? "drawableMsgOutCheckReadSelected" : "drawableMsgOutCheckRead");
                    BaseCell.setDrawableBounds(themedDrawable, (this.layoutWidth - AndroidUtilities.dp(22.5f)) - themedDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable.getIntrinsicHeight()) + f2);
                } else {
                    themedDrawable = getThemedDrawable(z7 ? "drawableMsgOutCheckSelected" : "drawableMsgOutCheck");
                    BaseCell.setDrawableBounds(themedDrawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - themedDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable.getIntrinsicHeight()) + f2);
                }
                themedDrawable.setAlpha((int) (f6 * 255.0f));
                if (z8) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
                if (z6) {
                    canvas.restore();
                }
                themedDrawable.setAlpha(255);
            }
        }
        if (z) {
            if (shouldDrawTimeOnMedia()) {
                Drawable themedDrawable2 = this.currentMessageObject.shouldDrawWithoutBackground() ? getThemedDrawable("drawableMsgStickerHalfCheck") : Theme.chat_msgMediaHalfCheckDrawable;
                int i4 = this.layoutWidth;
                if (!z5) {
                    f8 = 21.5f;
                }
                BaseCell.setDrawableBounds(themedDrawable2, (i4 - AndroidUtilities.dp(f8)) - themedDrawable2.getIntrinsicWidth(), (dp3 - themedDrawable2.getIntrinsicHeight()) + f2);
                themedDrawable2.setAlpha((int) (this.timeAlpha * 255.0f * f6));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable2.getBounds().centerX(), themedDrawable2.getBounds().centerY());
                }
                themedDrawable2.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable2.setAlpha(255);
            } else {
                Drawable themedDrawable3 = getThemedDrawable(z7 ? "drawableMsgOutHalfCheckSelected" : "drawableMsgOutHalfCheck");
                float dp4 = (this.layoutWidth - AndroidUtilities.dp(18.0f)) - themedDrawable3.getIntrinsicWidth();
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f9 = 8.0f;
                }
                BaseCell.setDrawableBounds(themedDrawable3, dp4, ((f3 - AndroidUtilities.dp(f9)) - themedDrawable3.getIntrinsicHeight()) + f2);
                themedDrawable3.setAlpha((int) (f6 * 255.0f));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f5, f5, themedDrawable3.getBounds().centerX(), themedDrawable3.getBounds().centerY());
                }
                themedDrawable3.draw(canvas);
                if (z8 || z6) {
                    canvas.restore();
                }
                themedDrawable3.setAlpha(255);
            }
        }
        if (z4) {
            if (shouldDrawTimeOnMedia()) {
                dp = this.layoutWidth - AndroidUtilities.dp(34.5f);
                dp2 = AndroidUtilities.dp(26.5f);
            } else {
                dp = this.layoutWidth - AndroidUtilities.dp(32.0f);
                dp2 = AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 22.0f : 21.0f);
            }
            float f10 = (f3 - dp2) + f2;
            this.rect.set(dp, f10, AndroidUtilities.dp(14.0f) + dp, AndroidUtilities.dp(14.0f) + f10);
            int alpha = Theme.chat_msgErrorPaint.getAlpha();
            Theme.chat_msgErrorPaint.setAlpha((int) (alpha * f6));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha);
            BaseCell.setDrawableBounds(Theme.chat_msgErrorDrawable, dp + AndroidUtilities.dp(6.0f), f10 + AndroidUtilities.dp(2.0f));
            Theme.chat_msgErrorDrawable.setAlpha((int) (f6 * 255.0f));
            if (z8) {
                canvas.save();
                canvas.scale(f5, f5, Theme.chat_msgErrorDrawable.getBounds().centerX(), Theme.chat_msgErrorDrawable.getBounds().centerY());
            }
            Theme.chat_msgErrorDrawable.draw(canvas);
            Theme.chat_msgErrorDrawable.setAlpha(255);
            if (!z8) {
                return;
            }
            canvas.restore();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:332:0x0a31, code lost:
        if (r1[0] == 3) goto L333;
     */
    /* JADX WARN: Code restructure failed: missing block: B:616:0x1199, code lost:
        if (r3 == 2) goto L668;
     */
    /* JADX WARN: Code restructure failed: missing block: B:858:0x1685, code lost:
        if (r2.revealingMediaSpoilers != false) goto L867;
     */
    /* JADX WARN: Code restructure failed: missing block: B:866:0x169e, code lost:
        if (r27.radialProgress.getIcon() != 4) goto L867;
     */
    /* JADX WARN: Removed duplicated region for block: B:1011:0x1a90  */
    /* JADX WARN: Removed duplicated region for block: B:1018:0x1aaf  */
    /* JADX WARN: Removed duplicated region for block: B:1021:0x1b03  */
    /* JADX WARN: Removed duplicated region for block: B:1058:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1070:0x18ab  */
    /* JADX WARN: Removed duplicated region for block: B:1075:0x17d7  */
    /* JADX WARN: Removed duplicated region for block: B:382:0x0e2e  */
    /* JADX WARN: Removed duplicated region for block: B:385:0x0e37 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x02e8  */
    /* JADX WARN: Removed duplicated region for block: B:620:0x1489  */
    /* JADX WARN: Removed duplicated region for block: B:626:0x14c3  */
    /* JADX WARN: Removed duplicated region for block: B:643:0x1518  */
    /* JADX WARN: Removed duplicated region for block: B:647:0x1529  */
    /* JADX WARN: Removed duplicated region for block: B:656:0x14da  */
    /* JADX WARN: Removed duplicated region for block: B:662:0x14a2  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x02eb  */
    /* JADX WARN: Removed duplicated region for block: B:848:0x1717  */
    /* JADX WARN: Removed duplicated region for block: B:855:0x167d  */
    /* JADX WARN: Removed duplicated region for block: B:869:0x16a4  */
    /* JADX WARN: Removed duplicated region for block: B:880:0x170f  */
    /* JADX WARN: Removed duplicated region for block: B:923:0x17c3  */
    /* JADX WARN: Removed duplicated region for block: B:927:0x17e5  */
    /* JADX WARN: Removed duplicated region for block: B:952:0x18b2  */
    /* JADX WARN: Type inference failed for: r2v508, types: [boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawOverlays(Canvas canvas) {
        float f;
        float dp;
        float dp2;
        float f2;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        boolean z;
        int i;
        boolean z2;
        float f3;
        boolean z3;
        float f4;
        int i2;
        int i3;
        boolean z4;
        StaticLayout staticLayout;
        int i4;
        int i5;
        long j;
        int i6;
        float f5;
        float f6;
        int i7;
        Drawable drawable;
        int themedColor;
        int themedColor2;
        int dp3;
        float f7;
        String format;
        Drawable drawable2;
        String str;
        float f8;
        float f9;
        String formatDurationNoHours;
        int i8;
        int i9;
        int dp4;
        int i10;
        int i11;
        float f10;
        float f11;
        float f12;
        int dp5;
        Drawable drawable3;
        Drawable drawable4;
        StaticLayout staticLayout2;
        float abs;
        float f13;
        String formatLocationLeftTime;
        float currentAlpha;
        int imageX;
        int imageY;
        int i12;
        AnimatedFileDrawable animation;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long j2 = elapsedRealtime - this.lastAnimationTime;
            if (j2 > 17) {
                j2 = 17;
            }
            this.lastAnimationTime = elapsedRealtime;
            if (this.currentMessageObject.hadAnimationNotReadyLoading && this.photoImage.getVisible() && !this.currentMessageObject.needDrawBluredPreview() && (((i12 = this.documentAttachType) == 7 || i12 == 4 || i12 == 2) && (animation = this.photoImage.getAnimation()) != null && animation.hasBitmap())) {
                this.currentMessageObject.hadAnimationNotReadyLoading = false;
                updateButtonState(false, true, false);
            }
            if (!this.hasGamePreview) {
                MessageObject messageObject = this.currentMessageObject;
                int i13 = messageObject.type;
                long j3 = j2;
                if (i13 == 3 || i13 == 1 || i13 == 20 || (i7 = this.documentAttachType) == 4 || i7 == 2) {
                    if (this.photoImage.getVisible()) {
                        if (!this.currentMessageObject.needDrawBluredPreview() && this.documentAttachType == 4) {
                            int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                            if (this.drawMediaCheckBox) {
                                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha * (1.0f - this.checkBoxAnimationProgress)));
                            } else {
                                Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                            }
                            Drawable drawable5 = Theme.chat_msgMediaMenuDrawable;
                            int imageX2 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                            this.otherX = imageX2;
                            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                            this.otherY = imageY2;
                            BaseCell.setDrawableBounds(drawable5, imageX2, imageY2);
                            Theme.chat_msgMediaMenuDrawable.draw(canvas);
                            Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                        }
                        boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                        if (this.animatingNoSoundPlaying != isPlayingMessage) {
                            this.animatingNoSoundPlaying = isPlayingMessage;
                            this.animatingNoSound = isPlayingMessage ? 1 : 2;
                            this.animatingNoSoundProgress = isPlayingMessage ? 1.0f : 0.0f;
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                        boolean z5 = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                        int i14 = this.documentAttachType;
                        int i15 = i14 != 4 ? 2 : 2;
                        int i16 = this.buttonState;
                        if (i16 == 1 || i16 == i15 || i16 == 0 || i16 == 3 || i16 == -1 || this.currentMessageObject.needDrawBluredPreview()) {
                            if (this.autoPlayingMedia) {
                                updatePlayingMessageProgress();
                            }
                            if ((this.infoLayout != null || this.loadingProgressLayout != null) && (!this.forceNotDrawTime || this.autoPlayingMedia || this.drawVideoImageButton || this.animatingLoadingProgressProgress != 0.0f || ((z5 && this.docTitleLayout != null) || (this.loadingProgressLayout != null && this.currentPosition != null && ((i4 = this.buttonState) == 1 || (i4 == 3 && this.miniButtonState == 1)))))) {
                                if (!z5) {
                                    f4 = this.animatingLoadingProgressProgress;
                                    z3 = true;
                                    z2 = false;
                                    f3 = 0.0f;
                                } else {
                                    boolean z6 = (this.buttonState == 1 || this.miniButtonState == 1 || this.animatingLoadingProgressProgress != 0.0f) && !this.currentMessageObject.isSecretMedia() && ((i = this.documentAttachType) == 4 || i == 2 || i == 1);
                                    MessageObject messageObject2 = this.currentMessageObject;
                                    int i17 = messageObject2.type;
                                    float f14 = ((i17 == 3 || i17 == 8 || this.documentAttachType == 4) && (!messageObject2.needDrawBluredPreview() || this.docTitleLayout != null)) ? this.animatingDrawVideoImageButtonProgress : 0.0f;
                                    z2 = f14 > 0.0f && this.docTitleLayout != null;
                                    if (z2 || (!z6 && this.infoLayout != null)) {
                                        f3 = f14;
                                        z3 = z6;
                                        f4 = 1.0f;
                                    } else {
                                        float f15 = f14;
                                        z3 = z6;
                                        f4 = this.animatingLoadingProgressProgress;
                                        f3 = f15;
                                    }
                                }
                                int i18 = this.documentAttachType;
                                boolean z7 = (i18 == 7 || i18 == 6 || this.currentMessageObject.type == 19 || SharedConfig.bubbleRadius < 10) ? false : true;
                                Theme.chat_infoPaint.setColor(getThemedColor("chat_mediaInfoText"));
                                int imageX3 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(4.0f));
                                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                                int intrinsicWidth = (!this.autoPlayingMedia || (isPlayingMessage && this.animatingNoSound == 0)) ? 0 : (int) ((Theme.chat_msgNoSoundDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4.0f)) * this.animatingNoSoundProgress);
                                if (z3 && (staticLayout = this.loadingProgressLayout) != null) {
                                    i3 = (int) staticLayout.getLineWidth(0);
                                    i2 = 0;
                                } else {
                                    i2 = intrinsicWidth;
                                    i3 = this.infoWidth;
                                }
                                int ceil = (int) Math.ceil(AndroidUtilities.dp(z7 ? 12.0f : 8.0f) + i3 + i2 + ((((Math.max((this.infoWidth == i3 ? i2 : 0) + i3, this.docTitleWidth) + (this.canStreamVideo ? AndroidUtilities.dp(32.0f) : 0)) - i3) - i2) * f3));
                                if (f3 != 0.0f && this.docTitleLayout == null) {
                                    f3 = 0.0f;
                                }
                                canvas.save();
                                float f16 = imageX3;
                                float f17 = imageY3;
                                canvas.scale(f4, f4, f16, f17);
                                int alpha2 = getThemedPaint("paintChatTimeBackground").getAlpha();
                                z4 = z5;
                                getThemedPaint("paintChatTimeBackground").setAlpha((int) (alpha2 * this.controlsAlpha * f4));
                                if (z2 || ((z3 && this.loadingProgressLayout != null) || (!z3 && this.infoLayout != null))) {
                                    this.rect.set(f16, f17, imageX3 + ceil, imageY3 + AndroidUtilities.dp((15.5f * f3) + 16.5f));
                                    int[] roundRadius = this.photoImage.getRoundRadius();
                                    float min = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[0], roundRadius[1]));
                                    canvas.drawRoundRect(this.rect, min, min, getThemedPaint("paintChatTimeBackground"));
                                }
                                Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f4));
                                int imageX4 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp((z7 ? 10 : 8) + (this.canStreamVideo ? 30.0f * f3 : 0.0f)));
                                this.noSoundCenterX = imageX4;
                                canvas.translate(imageX4, this.photoImage.getImageY() + AndroidUtilities.dp((0.2f * f3) + 5.5f));
                                StaticLayout staticLayout3 = this.infoLayout;
                                if (staticLayout3 != null && (!z3 || z2)) {
                                    staticLayout3.draw(canvas);
                                }
                                if (i2 != 0 && (!z3 || z2)) {
                                    canvas.save();
                                    Drawable drawable6 = Theme.chat_msgNoSoundDrawable;
                                    float f18 = this.animatingNoSoundProgress;
                                    drawable6.setAlpha((int) (f18 * 255.0f * f18 * this.controlsAlpha));
                                    int dp6 = AndroidUtilities.dp(this.animatingNoSoundProgress * 14.0f);
                                    int dp7 = (AndroidUtilities.dp(14.0f) - dp6) / 2;
                                    int dp8 = this.infoWidth + AndroidUtilities.dp(4.0f);
                                    canvas.translate(dp8, 0.0f);
                                    Theme.chat_msgNoSoundDrawable.setBounds(0, dp7, dp6, dp7 + dp6);
                                    Theme.chat_msgNoSoundDrawable.draw(canvas);
                                    this.noSoundCenterX += dp8 + (dp6 / 2);
                                    canvas.restore();
                                }
                                if (z3 && this.loadingProgressLayout != null) {
                                    canvas.save();
                                    if (z2) {
                                        Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f3));
                                        canvas.translate(0.0f, AndroidUtilities.dp(f3 * 14.3f));
                                    }
                                    this.loadingProgressLayout.draw(canvas);
                                    canvas.restore();
                                } else if (z2) {
                                    Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f3));
                                    canvas.translate(0.0f, AndroidUtilities.dp(f3 * 14.3f));
                                    this.docTitleLayout.draw(canvas);
                                }
                                canvas.restore();
                                Theme.chat_infoPaint.setAlpha(255);
                                getThemedPaint("paintChatTimeBackground").setAlpha(alpha2);
                                i5 = this.animatingDrawVideoImageButton;
                                if (i5 != 1) {
                                    j = j3;
                                    float f19 = this.animatingDrawVideoImageButtonProgress - (((float) j) / 160.0f);
                                    this.animatingDrawVideoImageButtonProgress = f19;
                                    if (f19 <= 0.0f) {
                                        this.animatingDrawVideoImageButtonProgress = 0.0f;
                                        this.animatingDrawVideoImageButton = 0;
                                    }
                                    invalidate();
                                } else {
                                    j = j3;
                                    if (i5 == 2) {
                                        float f20 = this.animatingDrawVideoImageButtonProgress + (((float) j) / 160.0f);
                                        this.animatingDrawVideoImageButtonProgress = f20;
                                        if (f20 >= 1.0f) {
                                            this.animatingDrawVideoImageButtonProgress = 1.0f;
                                            this.animatingDrawVideoImageButton = 0;
                                        }
                                        invalidate();
                                    }
                                }
                                i6 = this.animatingNoSound;
                                if (i6 != 1) {
                                    float f21 = this.animatingNoSoundProgress - (((float) j) / 180.0f);
                                    this.animatingNoSoundProgress = f21;
                                    if (f21 <= 0.0f) {
                                        this.animatingNoSoundProgress = 0.0f;
                                        this.animatingNoSound = 0;
                                    }
                                    invalidate();
                                } else if (i6 == 2) {
                                    float f22 = this.animatingNoSoundProgress + (((float) j) / 180.0f);
                                    this.animatingNoSoundProgress = f22;
                                    if (f22 >= 1.0f) {
                                        this.animatingNoSoundProgress = 1.0f;
                                        this.animatingNoSound = 0;
                                    }
                                    invalidate();
                                }
                                f5 = ((this.buttonState != 1 || this.miniButtonState == 1) && this.loadingProgressLayout != null) ? 1.0f : 0.0f;
                                if (f5 == 0.0f && this.infoLayout != null && z4) {
                                    this.animatingLoadingProgressProgress = 0.0f;
                                }
                                f6 = this.animatingLoadingProgressProgress;
                                if (f6 >= f5) {
                                    float f23 = f6 + (((float) j) / 160.0f);
                                    this.animatingLoadingProgressProgress = f23;
                                    if (f23 > f5) {
                                        this.animatingLoadingProgressProgress = f5;
                                    }
                                    invalidate();
                                } else if (f6 != f5) {
                                    float f24 = f6 - (((float) j) / 160.0f);
                                    this.animatingLoadingProgressProgress = f24;
                                    if (f24 < f5) {
                                        this.animatingLoadingProgressProgress = f5;
                                    }
                                    invalidate();
                                }
                            }
                        }
                        z4 = z5;
                        i5 = this.animatingDrawVideoImageButton;
                        if (i5 != 1) {
                        }
                        i6 = this.animatingNoSound;
                        if (i6 != 1) {
                        }
                        if (this.buttonState != 1) {
                        }
                        if (f5 == 0.0f) {
                            this.animatingLoadingProgressProgress = 0.0f;
                        }
                        f6 = this.animatingLoadingProgressProgress;
                        if (f6 >= f5) {
                        }
                    }
                } else if (i13 == 4) {
                    if (this.docTitleLayout != null) {
                        if (messageObject.isOutOwner()) {
                            Theme.chat_locationTitlePaint.setColor(getThemedColor("chat_messageTextOut"));
                            Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outVenueInfoSelectedText" : "chat_outVenueInfoText"));
                        } else {
                            Theme.chat_locationTitlePaint.setColor(getThemedColor("chat_messageTextIn"));
                            Theme.chat_locationAddressPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inVenueInfoSelectedText" : "chat_inVenueInfoText"));
                        }
                        if (MessageObject.getMedia(this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaGeoLive) {
                            int imageY22 = (int) (this.photoImage.getImageY2() + AndroidUtilities.dp(30.0f));
                            if (this.locationExpired) {
                                TransitionParams transitionParams = this.transitionParams;
                                if (!transitionParams.animateLocationIsExpired) {
                                    transitionParams.lastDrawLocationExpireText = null;
                                    transitionParams.lastDrawDocTitleLayout = null;
                                    transitionParams.lastDrawInfoLayout = null;
                                    currentAlpha = !this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                                    if (currentAlpha > 0.0f && (this.photoImage.hasNotThumb() || this.photoImage.isCrossfadingWithOldImage())) {
                                        BaseCell.setDrawableBounds(Theme.chat_msgAvatarLiveLocationDrawable, (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f)), (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha)))));
                                        float f25 = currentAlpha * 5.0f;
                                        Theme.chat_msgAvatarLiveLocationDrawable.setAlpha((int) (Math.min(1.0f, f25) * 255.0f));
                                        Theme.chat_msgAvatarLiveLocationDrawable.draw(canvas);
                                        this.locationImageReceiver.setImageCoords(imageX + AndroidUtilities.dp(5.0f), imageY + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                                        this.locationImageReceiver.setAlpha(Math.min(1.0f, f25));
                                        this.locationImageReceiver.draw(canvas);
                                    }
                                }
                            }
                            this.forceNotDrawTime = true;
                            StaticLayout staticLayout4 = this.docTitleLayout;
                            StaticLayout staticLayout5 = this.infoLayout;
                            TransitionParams transitionParams2 = this.transitionParams;
                            if (transitionParams2.animateLocationIsExpired) {
                                float f26 = transitionParams2.lastDrawLocationExpireProgress;
                                String str2 = transitionParams2.lastDrawLocationExpireText;
                                staticLayout2 = transitionParams2.lastDrawDocTitleLayout;
                                StaticLayout staticLayout6 = transitionParams2.lastDrawInfoLayout;
                                f13 = 1.0f - transitionParams2.animateChangeProgress;
                                formatLocationLeftTime = str2;
                                staticLayout5 = staticLayout6;
                                abs = f26;
                            } else {
                                staticLayout2 = staticLayout4;
                                abs = 1.0f - (Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date) / MessageObject.getMedia(this.currentMessageObject.messageOwner).period);
                                f13 = 1.0f;
                                formatLocationLeftTime = LocaleController.formatLocationLeftTime(Math.abs(MessageObject.getMedia(this.currentMessageObject.messageOwner).period - (ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date)));
                            }
                            this.rect.set(this.photoImage.getImageX2() - AndroidUtilities.dp(43.0f), imageY22 - AndroidUtilities.dp(15.0f), this.photoImage.getImageX2() - AndroidUtilities.dp(13.0f), AndroidUtilities.dp(15.0f) + imageY22);
                            if (this.currentMessageObject.isOutOwner()) {
                                Theme.chat_radialProgress2Paint.setColor(getThemedColor("chat_outInstant"));
                                Theme.chat_livePaint.setColor(getThemedColor("chat_outInstant"));
                            } else {
                                Theme.chat_radialProgress2Paint.setColor(getThemedColor("chat_inInstant"));
                                Theme.chat_livePaint.setColor(getThemedColor("chat_inInstant"));
                            }
                            int alpha3 = Theme.chat_locationTitlePaint.getAlpha();
                            int alpha4 = Theme.chat_locationAddressPaint.getAlpha();
                            int alpha5 = Theme.chat_livePaint.getAlpha();
                            if (f13 != 1.0f) {
                                Theme.chat_locationTitlePaint.setAlpha((int) (alpha3 * f13));
                                Theme.chat_locationAddressPaint.setAlpha((int) (alpha4 * f13));
                                Theme.chat_livePaint.setAlpha((int) (alpha5 * f13));
                                canvas.save();
                                canvas.translate(0.0f, (-AndroidUtilities.dp(50.0f)) * this.transitionParams.animateChangeProgress);
                            }
                            Theme.chat_radialProgress2Paint.setAlpha((int) (50.0f * f13));
                            canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(15.0f), Theme.chat_radialProgress2Paint);
                            Theme.chat_radialProgress2Paint.setAlpha((int) (f13 * 255.0f));
                            StaticLayout staticLayout7 = staticLayout5;
                            String str3 = formatLocationLeftTime;
                            StaticLayout staticLayout8 = staticLayout2;
                            float f27 = abs;
                            canvas.drawArc(this.rect, -90.0f, abs * (-360.0f), false, Theme.chat_radialProgress2Paint);
                            canvas.drawText(str3, this.rect.centerX() - (Theme.chat_livePaint.measureText(str3) / 2.0f), imageY22 + AndroidUtilities.dp(4.0f), Theme.chat_livePaint);
                            if (staticLayout8 != null && staticLayout7 != null) {
                                canvas.save();
                                canvas.translate(this.photoImage.getImageX() + AndroidUtilities.dp(10.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(10.0f));
                                staticLayout8.draw(canvas);
                                canvas.translate(0.0f, AndroidUtilities.dp(23.0f));
                                staticLayout7.draw(canvas);
                                canvas.restore();
                            }
                            if (f13 != 1.0f) {
                                Theme.chat_locationTitlePaint.setAlpha(alpha3);
                                Theme.chat_locationAddressPaint.setAlpha(alpha4);
                                Theme.chat_livePaint.setAlpha(alpha5);
                                canvas.restore();
                            }
                            TransitionParams transitionParams3 = this.transitionParams;
                            transitionParams3.lastDrawLocationExpireProgress = f27;
                            transitionParams3.lastDrawLocationExpireText = str3;
                            transitionParams3.lastDrawDocTitleLayout = staticLayout8;
                            transitionParams3.lastDrawInfoLayout = staticLayout7;
                            if (!this.photoImage.isCrossfadingWithOldImage()) {
                            }
                            if (currentAlpha > 0.0f) {
                                BaseCell.setDrawableBounds(Theme.chat_msgAvatarLiveLocationDrawable, (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f)), (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha)))));
                                float f252 = currentAlpha * 5.0f;
                                Theme.chat_msgAvatarLiveLocationDrawable.setAlpha((int) (Math.min(1.0f, f252) * 255.0f));
                                Theme.chat_msgAvatarLiveLocationDrawable.draw(canvas);
                                this.locationImageReceiver.setImageCoords(imageX + AndroidUtilities.dp(5.0f), imageY + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                                this.locationImageReceiver.setAlpha(Math.min(1.0f, f252));
                                this.locationImageReceiver.draw(canvas);
                            }
                        } else {
                            canvas.save();
                            canvas.translate(this.photoImage.getImageX() + AndroidUtilities.dp(6.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(8.0f));
                            this.docTitleLayout.draw(canvas);
                            if (this.infoLayout != null) {
                                canvas.translate(0.0f, AndroidUtilities.dp(21.0f));
                                this.infoLayout.draw(canvas);
                            }
                            canvas.restore();
                        }
                    }
                } else if (i13 == 16) {
                    if (messageObject.isOutOwner()) {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_messageTextOut"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outTimeSelectedText" : "chat_outTimeText"));
                    } else {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor("chat_messageTextIn"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inTimeSelectedText" : "chat_inTimeText"));
                    }
                    this.forceNotDrawTime = true;
                    if (this.currentMessageObject.isOutOwner()) {
                        dp5 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(16.0f);
                    } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                        dp5 = AndroidUtilities.dp(74.0f);
                    } else {
                        dp5 = AndroidUtilities.dp(25.0f);
                    }
                    this.otherX = dp5;
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(dp5, AndroidUtilities.dp(12.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(AndroidUtilities.dp(19.0f) + dp5, AndroidUtilities.dp(37.0f) + this.namesOffset);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                    ?? isVideoCall = this.currentMessageObject.isVideoCall();
                    if (this.currentMessageObject.isOutOwner()) {
                        drawable3 = Theme.chat_msgCallUpGreenDrawable;
                        if (this.currentMessageObject.isVideoCall()) {
                            isDrawSelectionBackground();
                            drawable4 = getThemedDrawable("drawableMsgOutCallVideo");
                        } else {
                            drawable4 = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutCallAudioSelected" : "drawableMsgOutCallAudio");
                        }
                    } else {
                        TLRPC$PhoneCallDiscardReason tLRPC$PhoneCallDiscardReason = this.currentMessageObject.messageOwner.action.reason;
                        if ((tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonMissed) || (tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonBusy)) {
                            drawable3 = Theme.chat_msgCallDownRedDrawable;
                        } else {
                            drawable3 = Theme.chat_msgCallDownGreenDrawable;
                        }
                        drawable4 = isDrawSelectionBackground() ? Theme.chat_msgInCallSelectedDrawable[isVideoCall] : Theme.chat_msgInCallDrawable[isVideoCall == true ? 1 : 0];
                    }
                    BaseCell.setDrawableBounds(drawable3, dp5 - AndroidUtilities.dp(1.0f), AndroidUtilities.dp(37.0f) + this.namesOffset);
                    drawable3.draw(canvas);
                    if (Build.VERSION.SDK_INT >= 21) {
                        Drawable[] drawableArr = this.selectorDrawable;
                        if (drawableArr[0] != null && this.selectorDrawableMaskType[0] == 4) {
                            drawableArr[0].draw(canvas);
                        }
                    }
                    boolean z8 = this.pinnedBottom;
                    if (!z8 && !this.pinnedTop) {
                        this.otherY = AndroidUtilities.dp(18.5f);
                    } else if (z8 && this.pinnedTop) {
                        this.otherY = AndroidUtilities.dp(18.0f);
                    } else if (!z8) {
                        this.otherY = AndroidUtilities.dp(17.0f);
                    } else {
                        this.otherY = AndroidUtilities.dp(19.0f);
                    }
                    BaseCell.setDrawableBounds(drawable4, dp5 + AndroidUtilities.dp(isVideoCall == 0 ? 201.0f : 200.0f), this.otherY);
                    drawable4.draw(canvas);
                } else if (i13 == 17) {
                    long currentTimeMillis = System.currentTimeMillis();
                    long j4 = currentTimeMillis - this.voteLastUpdateTime;
                    if (j4 > 17) {
                        j4 = 17;
                    }
                    this.voteLastUpdateTime = currentTimeMillis;
                    if (this.currentMessageObject.isOutOwner()) {
                        themedColor = getThemedColor("chat_messageTextOut");
                        themedColor2 = getThemedColor(isDrawSelectionBackground() ? "chat_outTimeSelectedText" : "chat_outTimeText");
                    } else {
                        themedColor = getThemedColor("chat_messageTextIn");
                        themedColor2 = getThemedColor(isDrawSelectionBackground() ? "chat_inTimeSelectedText" : "chat_inTimeText");
                    }
                    Theme.chat_audioTitlePaint.setColor(themedColor);
                    Theme.chat_audioPerformerPaint.setColor(themedColor);
                    Theme.chat_instantViewPaint.setColor(themedColor);
                    Theme.chat_timePaint.setColor(themedColor2);
                    Theme.chat_livePaint.setColor(themedColor2);
                    Theme.chat_locationAddressPaint.setColor(themedColor2);
                    canvas.save();
                    TransitionParams transitionParams4 = this.transitionParams;
                    if (transitionParams4.animateForwardedLayout) {
                        float f28 = transitionParams4.animateChangeProgress;
                        float f29 = (this.namesOffset * f28) + (transitionParams4.animateForwardedNamesOffset * (1.0f - f28));
                        if (this.currentMessageObject.needDrawForwarded()) {
                            f29 -= this.namesOffset;
                        }
                        canvas.translate(0.0f, f29);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        dp3 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(11.0f);
                    } else if (this.isChat && !this.isThreadPost && this.currentMessageObject.needDrawAvatar()) {
                        dp3 = AndroidUtilities.dp(68.0f);
                    } else {
                        dp3 = AndroidUtilities.dp(20.0f);
                    }
                    int i19 = dp3;
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(getExtraTextX() + i19, AndroidUtilities.dp(15.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    StaticLayout staticLayout9 = this.titleLayout;
                    int height = (staticLayout9 != null ? staticLayout9.getHeight() : 0) + AndroidUtilities.dp(20.0f) + this.namesOffset;
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.docTitleOffsetX + i19 + getExtraTextX(), height);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) MessageObject.getMedia(this.currentMessageObject.messageOwner);
                        if (this.lastPoll.quiz && ((this.pollVoted || this.pollClosed) && !TextUtils.isEmpty(tLRPC$TL_messageMediaPoll.results.solution))) {
                            Drawable themedDrawable = getThemedDrawable(this.currentMessageObject.isOutOwner() ? "drawable_chat_pollHintDrawableOut" : "drawable_chat_pollHintDrawableIn");
                            if (this.pollVoteInProgress) {
                                themedDrawable.setAlpha((int) (this.pollAnimationProgress * 255.0f));
                            } else {
                                themedDrawable.setAlpha(255);
                            }
                            int i20 = this.docTitleOffsetX;
                            if (i20 < 0 || (i20 == 0 && this.docTitleLayout.getLineLeft(0) == 0.0f)) {
                                this.pollHintX = (this.currentBackgroundDrawable.getBounds().right - themedDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 17.0f : 11.0f);
                            } else {
                                this.pollHintX = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                            }
                            this.pollHintY = height - AndroidUtilities.dp(6.0f);
                            int intrinsicWidth2 = this.pollHintX + (themedDrawable.getIntrinsicWidth() / 2);
                            int intrinsicHeight = this.pollHintY + (themedDrawable.getIntrinsicHeight() / 2);
                            if (this.hintButtonVisible) {
                                float f30 = this.hintButtonProgress;
                                if (f30 < 1.0f) {
                                    f12 = AnimationProperties.overshootInterpolator.getInterpolation(f30);
                                    int intrinsicWidth3 = ((int) (themedDrawable.getIntrinsicWidth() * f12)) / 2;
                                    int intrinsicHeight2 = ((int) (themedDrawable.getIntrinsicHeight() * f12)) / 2;
                                    themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth3, intrinsicHeight - intrinsicHeight2, intrinsicWidth2 + intrinsicWidth3, intrinsicHeight + intrinsicHeight2);
                                    themedDrawable.draw(canvas);
                                }
                            }
                            f12 = this.hintButtonProgress;
                            int intrinsicWidth32 = ((int) (themedDrawable.getIntrinsicWidth() * f12)) / 2;
                            int intrinsicHeight22 = ((int) (themedDrawable.getIntrinsicHeight() * f12)) / 2;
                            themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth32, intrinsicHeight - intrinsicHeight22, intrinsicWidth2 + intrinsicWidth32, intrinsicHeight + intrinsicHeight22);
                            themedDrawable.draw(canvas);
                        } else {
                            this.pollHintX = -1;
                        }
                        if (this.pollAvatarImages != null && !this.isBot) {
                            int ceil2 = (int) Math.ceil(this.docTitleLayout.getLineLeft(0));
                            if (this.docTitleOffsetX != 0 || ceil2 != 0) {
                                int i21 = -AndroidUtilities.dp(13.0f);
                                int i22 = this.docTitleOffsetX;
                                if (i22 != 0) {
                                    dp4 = ((i22 + i19) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                } else {
                                    dp4 = ((ceil2 + i19) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                }
                                i10 = dp4;
                                i11 = i21;
                            } else {
                                i11 = AndroidUtilities.dp(13.0f);
                                i10 = ((int) Math.ceil(this.docTitleLayout.getLineWidth(0))) + i19 + AndroidUtilities.dp(7.0f) + getExtraTextX();
                            }
                            for (int length = this.pollAvatarImages.length - 1; length >= 0; length--) {
                                if (this.pollAvatarImagesVisible[length] && this.pollAvatarImages[length].hasImageSet()) {
                                    this.pollAvatarImages[length].setImageX((i11 * length) + i10);
                                    this.pollAvatarImages[length].setImageY(height - AndroidUtilities.dp(1.0f));
                                    ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                                    if (length != imageReceiverArr.length - 1) {
                                        canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.pollAvatarImages[length].getCenterY(), AndroidUtilities.dp(9.0f), this.currentBackgroundDrawable.getPaint());
                                    }
                                    if (this.animatePollAvatars && this.animatePollAnswerAlpha) {
                                        if (this.pollUnvoteInProgress) {
                                            f10 = 1.0f;
                                            f11 = (1.0f - this.pollAnimationProgress) / 0.3f;
                                        } else {
                                            f10 = 1.0f;
                                            f11 = this.pollAnimationProgress;
                                        }
                                        this.pollAvatarImages[length].setAlpha(Math.min(f11, f10));
                                    }
                                    this.pollAvatarImages[length].draw(canvas);
                                }
                            }
                        }
                    }
                    if ((!this.pollClosed && !this.pollVoted) || this.pollVoteInProgress) {
                        TLRPC$Poll tLRPC$Poll = this.lastPoll;
                        if (tLRPC$Poll.quiz && tLRPC$Poll.close_period != 0) {
                            long max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                            if (this.closeTimeText == null || this.lastPollCloseTime != max) {
                                this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(((float) max) / 1000.0f), false);
                                this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(formatDurationNoHours));
                                this.lastPollCloseTime = max;
                            }
                            if (max <= 0 && !this.pollClosed) {
                                if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                    this.currentMessageObject.pollLastCheckTime = 0L;
                                }
                                this.delegate.needReloadPolls();
                            }
                            int dp9 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                            if (max <= 5000) {
                                Theme.chat_timePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outPollWrongAnswer" : "chat_inPollWrongAnswer"));
                            }
                            if (this.animatePollAnswer) {
                                Theme.chat_timePaint.setAlpha((int) ((1.0f - this.pollAnimationProgress) * 255.0f));
                            }
                            canvas.drawText(this.closeTimeText, dp9, AndroidUtilities.dp(11.0f) + height, Theme.chat_timePaint);
                            Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                            int dp10 = dp9 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                            int dp11 = AndroidUtilities.dp(5.1f);
                            int dp12 = height + AndroidUtilities.dp(6.0f);
                            if (max <= 60000) {
                                this.rect.set(dp10 - dp11, dp12 - dp11, dp10 + dp11, dp11 + dp12);
                                float min2 = (((float) max) / (Math.min(60, this.lastPoll.close_period) * 1000.0f)) * (-360.0f);
                                i8 = dp12;
                                i9 = dp10;
                                canvas.drawArc(this.rect, -90.0f, min2, false, Theme.chat_pollTimerPaint);
                                this.timerParticles.draw(canvas, Theme.chat_pollTimerPaint, this.rect, min2, this.pollVoteInProgress ? 1.0f - this.pollAnimationProgress : 1.0f);
                            } else {
                                i8 = dp12;
                                i9 = dp10;
                                canvas.drawCircle(i9, i8, dp11, Theme.chat_pollTimerPaint);
                            }
                            if (max > 60000 || this.timerTransitionProgress != 0.0f) {
                                Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                float f31 = i9;
                                canvas.drawLine(f31 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), i8 - AndroidUtilities.dp(7.5f), f31 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), i8 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                float f32 = i8;
                                canvas.drawLine(f31, f32 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f31, f32, Theme.chat_pollTimerPaint);
                                if (max <= 60000) {
                                    float f33 = this.timerTransitionProgress - (((float) j4) / 180.0f);
                                    this.timerTransitionProgress = f33;
                                    if (f33 < 0.0f) {
                                        this.timerTransitionProgress = 0.0f;
                                    }
                                }
                            }
                            invalidate();
                        }
                    }
                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                        int[] iArr = this.selectorDrawableMaskType;
                        int i23 = iArr[0] != 1 ? 3 : 3;
                        if (iArr[0] == i23) {
                            canvas.save();
                            float f34 = this.hintButtonProgress;
                            canvas.scale(f34, f34, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                        }
                        this.selectorDrawable[0].draw(canvas);
                        if (this.selectorDrawableMaskType[0] == 3) {
                            canvas.restore();
                        }
                    }
                    int size = this.pollButtons.size();
                    int i24 = 0;
                    for (int i25 = 0; i25 < size; i25++) {
                        PollButton pollButton = this.pollButtons.get(i25);
                        pollButton.x = i19;
                        canvas.save();
                        canvas.translate(AndroidUtilities.dp(35.0f) + i19, pollButton.y + this.namesOffset);
                        pollButton.title.draw(canvas);
                        if (this.animatePollAnswerAlpha) {
                            if (this.pollUnvoteInProgress) {
                                f8 = 1.0f;
                                f9 = 1.0f - this.pollAnimationProgress;
                            } else {
                                f8 = 1.0f;
                                f9 = this.pollAnimationProgress;
                            }
                            f7 = Math.min(f9 / 0.3f, f8) * 255.0f;
                        } else {
                            f7 = 255.0f;
                        }
                        int i26 = (int) f7;
                        boolean z9 = this.pollVoted;
                        if (z9 || this.pollClosed || this.animatePollAnswerAlpha) {
                            if (this.lastPoll.quiz && z9 && pollButton.chosen) {
                                if (pollButton.correct) {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outPollCorrectAnswer" : "chat_inPollCorrectAnswer";
                                } else {
                                    str = this.currentMessageObject.isOutOwner() ? "chat_outPollWrongAnswer" : "chat_inPollWrongAnswer";
                                }
                                if (!this.currentBackgroundDrawable.hasGradient() || Theme.hasThemeKey(str)) {
                                    Theme.chat_docBackPaint.setColor(getThemedColor(str));
                                } else {
                                    Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                                }
                            } else {
                                Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                            }
                            if (this.animatePollAnswerAlpha) {
                                float f35 = i26;
                                Theme.chat_instantViewPaint.setAlpha((int) ((Theme.chat_instantViewPaint.getAlpha() / 255.0f) * f35));
                                Theme.chat_docBackPaint.setAlpha((int) (f35 * (Theme.chat_docBackPaint.getAlpha() / 255.0f)));
                            }
                            canvas.drawText(String.format("%d%%", Integer.valueOf((int) Math.ceil(pollButton.prevPercent + ((pollButton.percent - pollButton.prevPercent) * this.pollAnimationProgress)))), (-AndroidUtilities.dp(6.5f)) - ((int) Math.ceil(Theme.chat_instantViewPaint.measureText(format))), AndroidUtilities.dp(14.0f), Theme.chat_instantViewPaint);
                            this.rect.set(0.0f, pollButton.height + AndroidUtilities.dp(6.0f), (this.backgroundWidth - AndroidUtilities.dp(76.0f)) * (pollButton.prevPercentProgress + ((pollButton.percentProgress - pollButton.prevPercentProgress) * this.pollAnimationProgress)), pollButton.height + AndroidUtilities.dp(11.0f));
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_docBackPaint);
                            if (pollButton.chosen || pollButton.prevChosen || (this.lastPoll.quiz && pollButton.correct && (this.pollVoted || this.pollClosed))) {
                                float dp13 = this.rect.left - AndroidUtilities.dp(13.5f);
                                float centerY = this.rect.centerY();
                                canvas.drawCircle(dp13, centerY, AndroidUtilities.dp(7.0f), Theme.chat_docBackPaint);
                                if (this.lastPoll.quiz && pollButton.chosen && !pollButton.correct) {
                                    drawable2 = Theme.chat_pollCrossDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                } else {
                                    drawable2 = Theme.chat_pollCheckDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                }
                                drawable2.setAlpha(i26);
                                BaseCell.setDrawableBounds(drawable2, dp13 - (drawable2.getIntrinsicWidth() / 2), centerY - (drawable2.getIntrinsicHeight() / 2));
                                drawable2.draw(canvas);
                            }
                        }
                        if ((!this.pollVoted && !this.pollClosed) || this.animatePollAnswerAlpha) {
                            if (isDrawSelectionBackground()) {
                                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbarSelected" : "chat_inVoiceSeekbarSelected"));
                            } else {
                                Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outVoiceSeekbar" : "chat_inVoiceSeekbar"));
                            }
                            if (this.animatePollAnswerAlpha) {
                                Theme.chat_replyLinePaint.setAlpha((int) ((255 - i26) * (Theme.chat_replyLinePaint.getAlpha() / 255.0f)));
                            }
                            canvas.drawLine(-AndroidUtilities.dp(2.0f), pollButton.height + AndroidUtilities.dp(13.0f), this.backgroundWidth - AndroidUtilities.dp(58.0f), pollButton.height + AndroidUtilities.dp(13.0f), Theme.chat_replyLinePaint);
                            if (this.pollVoteInProgress && i25 == this.pollVoteInProgressNum) {
                                Theme.chat_instantViewRectPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill"));
                                if (this.animatePollAnswerAlpha) {
                                    Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - i26) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                }
                                this.rect.set((-AndroidUtilities.dp(22.0f)) - AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) - AndroidUtilities.dp(8.5f), (-AndroidUtilities.dp(23.0f)) + AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) + AndroidUtilities.dp(8.5f));
                                canvas.drawArc(this.rect, this.voteRadOffset, this.voteCurrentCircleLength, false, Theme.chat_instantViewRectPaint);
                            } else {
                                if (this.currentMessageObject.isOutOwner()) {
                                    Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outMenuSelected" : "chat_outMenu"));
                                } else {
                                    Theme.chat_instantViewRectPaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inMenuSelected" : "chat_inMenu"));
                                }
                                if (this.animatePollAnswerAlpha) {
                                    Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - i26) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                }
                                canvas.drawCircle(-AndroidUtilities.dp(22.0f), AndroidUtilities.dp(9.0f), AndroidUtilities.dp(8.5f), Theme.chat_instantViewRectPaint);
                                if (this.lastPoll.multiple_choice) {
                                    int dp14 = AndroidUtilities.dp(8.5f);
                                    String str4 = "checkboxCheck";
                                    if (this.currentMessageObject.isOutOwner() && getThemedColor(str4) == -1) {
                                        str4 = "chat_outBubble";
                                    }
                                    this.pollCheckBox[i25].setColor(null, this.currentMessageObject.isOutOwner() ? "chat_outAudioSeekbarFill" : "chat_inAudioSeekbarFill", str4);
                                    int i27 = dp14 / 2;
                                    this.pollCheckBox[i25].setBounds((-AndroidUtilities.dp(22.0f)) - i27, AndroidUtilities.dp(9.0f) - i27, dp14, dp14);
                                    this.pollCheckBox[i25].draw(canvas);
                                    canvas.restore();
                                    if (i25 != size - 1) {
                                        i24 = pollButton.y + this.namesOffset + pollButton.height;
                                    }
                                }
                            }
                        }
                        canvas.restore();
                        if (i25 != size - 1) {
                        }
                    }
                    if (this.drawInstantView) {
                        int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
                        int dp15 = i24 + AndroidUtilities.dp(13.0f);
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                        } else {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                        }
                        this.instantButtonRect.set(currentBackgroundLeft, dp15, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp15);
                        Drawable[] drawableArr2 = this.selectorDrawable;
                        if (drawableArr2[0] != null && this.selectorDrawableMaskType[0] == 2) {
                            drawableArr2[0].setBounds(currentBackgroundLeft - AndroidUtilities.dp(this.pollInstantViewTouchesBottom ? 6.0f : 0.0f), dp15, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp15);
                            this.selectorDrawable[0].draw(canvas);
                        }
                        if (this.instantViewLayout != null) {
                            canvas.save();
                            canvas.translate(currentBackgroundLeft + this.instantTextX, dp15 + AndroidUtilities.dp(14.5f));
                            this.instantViewLayout.draw(canvas);
                            canvas.restore();
                        }
                    } else if (this.infoLayout != null) {
                        TLRPC$Poll tLRPC$Poll2 = this.lastPoll;
                        if (tLRPC$Poll2.public_voters || tLRPC$Poll2.multiple_choice) {
                            i24 += AndroidUtilities.dp(6.0f);
                        }
                        canvas.save();
                        canvas.translate(i19 + this.infoX, i24 + AndroidUtilities.dp(22.0f));
                        this.infoLayout.draw(canvas);
                        canvas.restore();
                    }
                    updatePollAnimations(j4);
                    canvas.restore();
                } else if (i13 == 12) {
                    if (messageObject.isOutOwner()) {
                        Theme.chat_contactNamePaint.setColor(getThemedColor("chat_outContactNameText"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_outContactPhoneSelectedText" : "chat_outContactPhoneText"));
                    } else {
                        Theme.chat_contactNamePaint.setColor(getThemedColor("chat_inContactNameText"));
                        Theme.chat_contactPhonePaint.setColor(getThemedColor(isDrawSelectionBackground() ? "chat_inContactPhoneSelectedText" : "chat_inContactPhoneText"));
                    }
                    if (this.titleLayout != null) {
                        canvas.save();
                        canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(16.0f) + this.namesOffset);
                        this.titleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(39.0f) + this.namesOffset);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                    } else {
                        drawable = isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                    }
                    int imageX5 = (int) ((this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(48.0f));
                    this.otherX = imageX5;
                    int imageY4 = (int) (this.photoImage.getImageY() - AndroidUtilities.dp(2.0f));
                    this.otherY = imageY4;
                    BaseCell.setDrawableBounds(drawable, imageX5, imageY4);
                    drawable.draw(canvas);
                    if (this.drawInstantView) {
                        int imageX6 = (int) (this.photoImage.getImageX() - AndroidUtilities.dp(2.0f));
                        int dp16 = this.layoutHeight - AndroidUtilities.dp(66.0f);
                        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                        if (!reactionsLayoutInBubble2.isEmpty && !reactionsLayoutInBubble2.isSmall) {
                            dp16 -= reactionsLayoutInBubble2.totalHeight;
                        }
                        if (this.drawCommentButton) {
                            dp16 -= AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 39.3f : 41.0f);
                        }
                        Paint paint = Theme.chat_instantViewRectPaint;
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_outPreviewInstantText"));
                            paint.setColor(getThemedColor("chat_outPreviewInstantText"));
                        } else {
                            Theme.chat_instantViewPaint.setColor(getThemedColor("chat_inPreviewInstantText"));
                            paint.setColor(getThemedColor("chat_inPreviewInstantText"));
                        }
                        this.instantButtonRect.set(imageX6, dp16, this.instantWidth + imageX6, AndroidUtilities.dp(36.0f) + dp16);
                        if (Build.VERSION.SDK_INT >= 21) {
                            this.selectorDrawableMaskType[0] = 0;
                            this.selectorDrawable[0].setBounds(imageX6, dp16, this.instantWidth + imageX6, AndroidUtilities.dp(36.0f) + dp16);
                            this.selectorDrawable[0].draw(canvas);
                        }
                        canvas.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), paint);
                        if (this.instantViewLayout != null) {
                            canvas.save();
                            canvas.translate(imageX6 + this.instantTextX, dp16 + AndroidUtilities.dp(10.5f));
                            this.instantViewLayout.draw(canvas);
                            canvas.restore();
                        }
                    }
                }
            }
            if (this.drawImageButton && this.photoImage.getVisible()) {
                float f36 = this.controlsAlpha;
                if (f36 != 1.0f) {
                    this.radialProgress.setOverrideAlpha(f36);
                }
                if (this.photoImage.hasImageSet()) {
                    this.radialProgress.setBackgroundDrawable(null);
                } else {
                    this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                }
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3 != null && messageObject3.isRoundVideo() && !this.currentMessageObject.mediaExists) {
                    this.radialProgress.setProgressRect(this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - this.radialProgress.getRadius()) / 2.0f), this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - this.radialProgress.getRadius()) / 2.0f), this.photoImage.getImageX() + ((this.photoImage.getImageWidth() + this.radialProgress.getRadius()) / 2.0f), this.photoImage.getImageY() + ((this.photoImage.getImageHeight() + this.radialProgress.getRadius()) / 2.0f));
                } else {
                    MessageObject messageObject4 = this.currentMessageObject;
                    if (messageObject4 != null && messageObject4.isRoundVideo()) {
                        this.radialProgress.setProgressRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                        canvas.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (getVideoTranscriptionProgress() * 255.0f), 31);
                        float imageHeight = this.photoImage.getImageHeight() / (this.radialProgress.getRadius() * 2);
                        canvas.scale(imageHeight, imageHeight, this.radialProgress.getProgressRect().centerX(), this.radialProgress.getProgressRect().centerY());
                        z = true;
                        if ((this.isRoundVideo || !this.hasLinkPreview) && (!this.currentMessageObject.needDrawBluredPreview() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) {
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                MessageObject messageObject5 = this.currentMessageObject;
                                if (messageObject5.isMediaSpoilersRevealed) {
                                }
                                if (SharedConfig.autoplayVideo) {
                                    if (this.currentMessagesGroup == null) {
                                        if (this.radialProgress.getIcon() != 0) {
                                        }
                                    }
                                }
                            }
                            if (this.isRoundVideo) {
                                this.radialProgress.overrideCircleAlpha = ((1.0f - getVideoTranscriptionProgress()) * 0.75f) + 0.25f;
                            }
                            if ((SharedConfig.autoplayVideo || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0) {
                                canvas.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (this.mediaSpoilerRevealProgress * 255.0f), 31);
                            }
                            this.radialProgress.draw(canvas);
                            if ((SharedConfig.autoplayVideo || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0) {
                                canvas.restore();
                            }
                            if (this.isRoundVideo) {
                                this.radialProgress.overrideCircleAlpha = 1.0f;
                            }
                        }
                        if (z) {
                            canvas.restore();
                        }
                    }
                }
                z = false;
                if (this.isRoundVideo) {
                }
                if (this.currentMessageObject.hasMediaSpoilers()) {
                }
                if (this.isRoundVideo) {
                }
                if (SharedConfig.autoplayVideo) {
                }
                canvas.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (this.mediaSpoilerRevealProgress * 255.0f), 31);
                this.radialProgress.draw(canvas);
                if (SharedConfig.autoplayVideo) {
                }
                canvas.restore();
                if (this.isRoundVideo) {
                }
                if (z) {
                }
            }
            if (this.buttonState == -1 && this.currentMessageObject.needDrawBluredPreview() && !MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && this.photoImage.getVisible()) {
                MessageObject messageObject6 = this.currentMessageObject;
                if (messageObject6.messageOwner.destroyTime != 0) {
                    if (!messageObject6.isOutOwner()) {
                        float max2 = ((float) Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * 1000)))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f);
                        Theme.chat_deleteProgressPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                        canvas.drawArc(this.deleteProgressRect, -90.0f, max2 * (-360.0f), true, Theme.chat_deleteProgressPaint);
                        if (max2 != 0.0f) {
                            int dp17 = AndroidUtilities.dp(2.0f);
                            RectF rectF = this.deleteProgressRect;
                            int i28 = ((int) rectF.left) - dp17;
                            int i29 = ((int) rectF.top) - dp17;
                            int i30 = dp17 * 2;
                            invalidate(i28, i29, ((int) rectF.right) + i30, ((int) rectF.bottom) + i30);
                            updateSecretTimeText(this.currentMessageObject);
                            if ((!this.drawVideoImageButton || this.animatingDrawVideoImageButton != 0) && this.photoImage.getVisible()) {
                                f = this.controlsAlpha;
                                if (f != 1.0f) {
                                    this.videoRadialProgress.setOverrideAlpha(f);
                                }
                                this.videoRadialProgress.draw(canvas);
                            }
                            if (this.drawMediaCheckBox) {
                                int i31 = this.documentAttachType;
                                if (i31 != 5 && (i31 != 1 || this.drawPhotoImage)) {
                                    int dp18 = AndroidUtilities.dp(21.0f);
                                    this.mediaCheckBox.setBackgroundType(0);
                                    this.mediaCheckBox.setBounds(((int) this.photoImage.getImageX2()) - AndroidUtilities.dp(25.0f), ((int) this.photoImage.getImageY()) + AndroidUtilities.dp(4.0f), dp18, dp18);
                                    this.mediaCheckBox.setColor(null, null, this.currentMessageObject.isOutOwner() ? "chat_outBubbleSelected" : "chat_inBubbleSelected");
                                    this.mediaCheckBox.setBackgroundDrawable(null);
                                    this.mediaCheckBox.draw(canvas);
                                }
                                int dp19 = AndroidUtilities.dp(20.0f);
                                this.mediaCheckBox.setBackgroundType(this.radialProgress.getMiniIcon() != 4 ? 12 : 13);
                                this.mediaCheckBox.setBounds(this.buttonX + AndroidUtilities.dp(28.0f), this.buttonY + AndroidUtilities.dp(28.0f), dp19, dp19);
                                this.mediaCheckBox.setColor(this.currentMessageObject.isOutOwner() ? "chat_outTimeText" : "chat_inTimeText", this.currentMessageObject.isOutOwner() ? "chat_outLoader" : "chat_inLoader", this.currentMessageObject.isOutOwner() ? "chat_outBubble" : "chat_inBubble");
                                this.mediaCheckBox.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                this.mediaCheckBox.draw(canvas);
                            }
                            if (this.documentAttachType != 7) {
                                return;
                            }
                            boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                            MessageObject messageObject7 = this.currentMessageObject;
                            if (messageObject7.type == 5) {
                                if (messageObject7.isOutOwner()) {
                                    float f37 = (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.2f;
                                    boolean z10 = this.isPlayingRound;
                                    float f38 = z10 ? f37 : 0.0f;
                                    TransitionParams transitionParams5 = this.transitionParams;
                                    if (transitionParams5.animatePlayingRound) {
                                        f2 = f37 * (z10 ? transitionParams5.animateChangeProgress : 1.0f - transitionParams5.animateChangeProgress);
                                    } else {
                                        f2 = f38;
                                    }
                                } else {
                                    f2 = 0.0f;
                                }
                                float dp20 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + ((this.currentMessageObject.isOutOwner() || this.drawPinnedBottom || !this.drawBackground) ? 0 : AndroidUtilities.dp(6.0f)) + AndroidUtilities.dp(8.0f) + this.roundPlayingDrawableProgress + f2;
                                float dp21 = this.layoutHeight - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                                if (!this.reactionsLayoutInBubble.isEmpty) {
                                    dp21 -= reactionsLayoutInBubble.totalHeight;
                                }
                                TransitionParams transitionParams6 = this.transitionParams;
                                transitionParams6.lastDrawRoundVideoDotY = dp21;
                                if (transitionParams6.animateRoundVideoDotY) {
                                    float f39 = transitionParams6.animateFromRoundVideoDotY;
                                    float f40 = transitionParams6.animateChangeProgress;
                                    dp21 = (dp21 * f40) + (f39 * (1.0f - f40));
                                }
                                int i32 = this.timeAudioX;
                                if (!this.hasLinkPreview) {
                                    if (this.currentMessageObject.isOutOwner()) {
                                        int width = getWidth();
                                        TransitionParams transitionParams7 = this.transitionParams;
                                        i32 = ((width - (transitionParams7.animateBackgroundBoundsInner ? (int) ((this.backgroundWidth - transitionParams7.deltaLeft) + transitionParams7.deltaRight) : this.backgroundWidth)) - ((this.drawPinnedBottom || !this.mediaBackground) ? 0 : AndroidUtilities.dp(8.0f))) + AndroidUtilities.dp(67.0f);
                                    }
                                    dp20 = AndroidUtilities.lerp(dp20, i32 - AndroidUtilities.dp(4.0f), getVideoTranscriptionProgress());
                                    dp21 = AndroidUtilities.lerp(dp21, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + this.mediaOffsetY) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress());
                                }
                                this.rect.set(dp20, dp21, this.timeWidthAudio + dp20 + AndroidUtilities.dp(22.0f), AndroidUtilities.dp(17.0f) + dp21);
                                int alpha6 = getThemedPaint("paintChatActionBackground").getAlpha();
                                getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha6 * this.timeAlpha * (1.0f - getVideoTranscriptionProgress())));
                                applyServiceShaderMatrix();
                                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                                if (hasGradientService()) {
                                    int alpha7 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha7 * this.timeAlpha * (1.0f - getVideoTranscriptionProgress())));
                                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha7);
                                }
                                getThemedPaint("paintChatActionBackground").setAlpha(alpha6);
                                boolean z11 = isPlayingMessage2 || !this.currentMessageObject.isContentUnread();
                                if (z11) {
                                    float f41 = this.roundPlayingDrawableProgress;
                                    if (f41 != 1.0f) {
                                        float f42 = f41 + 0.10666667f;
                                        this.roundPlayingDrawableProgress = f42;
                                        if (f42 > 1.0f) {
                                            this.roundPlayingDrawableProgress = 1.0f;
                                        } else {
                                            invalidate();
                                        }
                                        if (z11) {
                                            if (isPlayingMessage2 && !MediaController.getInstance().isMessagePaused()) {
                                                this.roundVideoPlayingDrawable.start();
                                            } else {
                                                this.roundVideoPlayingDrawable.stop();
                                            }
                                        }
                                        if (this.roundPlayingDrawableProgress < 1.0f) {
                                            float dp22 = this.timeWidthAudio + dp20 + AndroidUtilities.dp(12.0f);
                                            float dp23 = AndroidUtilities.dp(8.3f) + dp21;
                                            canvas.save();
                                            float f43 = this.roundPlayingDrawableProgress;
                                            canvas.scale(1.0f - f43, 1.0f - f43, dp22, dp23);
                                            Theme.chat_docBackPaint.setColor(Theme.chat_timePaint.getColor());
                                            Theme.chat_docBackPaint.setAlpha((int) (this.timeAlpha * 255.0f * (1.0f - this.roundPlayingDrawableProgress)));
                                            canvas.drawCircle(dp22, dp23, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                                            canvas.restore();
                                        }
                                        if (this.roundPlayingDrawableProgress > 0.0f) {
                                            BaseCell.setDrawableBounds(this.roundVideoPlayingDrawable, this.timeWidthAudio + dp20 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(2.3f) + dp21);
                                            canvas.save();
                                            float f44 = this.roundPlayingDrawableProgress;
                                            canvas.scale(f44, f44, this.roundVideoPlayingDrawable.getBounds().centerX(), this.roundVideoPlayingDrawable.getBounds().centerY());
                                            if (!this.hasLinkPreview) {
                                                this.roundVideoPlayingDrawable.timeColor = Theme.chat_timePaint.getColor();
                                                this.roundVideoPlayingDrawable.colorProgress = getVideoTranscriptionProgress();
                                            } else {
                                                this.roundVideoPlayingDrawable.colorProgress = 0.0f;
                                            }
                                            this.roundVideoPlayingDrawable.setAlpha((int) (this.roundPlayingDrawableProgress * 255.0f * (1.0f - getVideoTranscriptionProgress())));
                                            this.roundVideoPlayingDrawable.draw(canvas);
                                            canvas.restore();
                                        }
                                        dp = dp20 + AndroidUtilities.dp(4.0f);
                                        dp2 = dp21 + AndroidUtilities.dp(1.7f);
                                    }
                                }
                                if (!z11) {
                                    float f45 = this.roundPlayingDrawableProgress;
                                    if (f45 != 0.0f) {
                                        float f46 = f45 - 0.10666667f;
                                        this.roundPlayingDrawableProgress = f46;
                                        if (f46 < 0.0f) {
                                            this.roundPlayingDrawableProgress = 0.0f;
                                        } else {
                                            invalidate();
                                        }
                                    }
                                }
                                if (z11) {
                                }
                                if (this.roundPlayingDrawableProgress < 1.0f) {
                                }
                                if (this.roundPlayingDrawableProgress > 0.0f) {
                                }
                                dp = dp20 + AndroidUtilities.dp(4.0f);
                                dp2 = dp21 + AndroidUtilities.dp(1.7f);
                            } else {
                                dp = this.backgroundDrawableLeft + AndroidUtilities.dp((messageObject7.isOutOwner() || this.drawPinnedBottom) ? 12.0f : 18.0f);
                                dp2 = (this.layoutHeight - AndroidUtilities.dp(6.3f - (this.drawPinnedBottom ? 2 : 0))) - this.timeLayout.getHeight();
                            }
                            if (this.durationLayout == null) {
                                return;
                            }
                            Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f));
                            canvas.save();
                            canvas.translate(dp, dp2);
                            this.durationLayout.draw(canvas);
                            canvas.restore();
                            Theme.chat_timePaint.setAlpha(255);
                            return;
                        }
                    }
                    updateSecretTimeText(this.currentMessageObject);
                    if (!this.drawVideoImageButton) {
                    }
                    f = this.controlsAlpha;
                    if (f != 1.0f) {
                    }
                    this.videoRadialProgress.draw(canvas);
                    if (this.drawMediaCheckBox) {
                    }
                    if (this.documentAttachType != 7) {
                    }
                }
            }
            if (!this.drawVideoImageButton) {
            }
            f = this.controlsAlpha;
            if (f != 1.0f) {
            }
            this.videoRadialProgress.draw(canvas);
            if (this.drawMediaCheckBox) {
            }
            if (this.documentAttachType != 7) {
            }
        }
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public int getObserverTag() {
        return this.TAG;
    }

    public MessageObject getMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        return messageObject != null ? messageObject : this.currentMessageObject;
    }

    public TLRPC$Document getStreamingMedia() {
        int i = this.documentAttachType;
        if (i == 4 || i == 7 || i == 2) {
            return this.documentAttach;
        }
        return null;
    }

    public boolean drawPinnedBottom() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) != 0) {
                return this.pinnedBottom;
            }
            return true;
        }
        return this.pinnedBottom;
    }

    public float getVideoTranscriptionProgress() {
        MessageObject messageObject;
        if (this.transitionParams == null || (messageObject = this.currentMessageObject) == null || !messageObject.isRoundVideo()) {
            return 1.0f;
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateDrawBackground) {
            return this.drawBackground ? 1.0f : 0.0f;
        } else if (this.drawBackground) {
            return transitionParams.animateChangeProgress;
        } else {
            return 1.0f - transitionParams.animateChangeProgress;
        }
    }

    public boolean drawPinnedTop() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && groupedMessages.isDocuments) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null && (groupedMessagePosition.flags & 4) != 0) {
                return this.pinnedTop;
            }
            return true;
        }
        return this.pinnedTop;
    }

    public boolean isPinnedBottom() {
        return this.pinnedBottom;
    }

    public boolean isPinnedTop() {
        return this.pinnedTop;
    }

    public MessageObject.GroupedMessages getCurrentMessagesGroup() {
        return this.currentMessagesGroup;
    }

    public MessageObject.GroupedMessagePosition getCurrentPosition() {
        return this.currentPosition;
    }

    public int getLayoutHeight() {
        return this.layoutHeight;
    }

    @Override // android.view.View
    public boolean performAccessibilityAction(int i, Bundle bundle) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 == null || !chatMessageCellDelegate2.onAccessibilityAction(i, bundle)) {
            if (i == 16) {
                int iconForCurrentState = getIconForCurrentState();
                if (iconForCurrentState != 4 && iconForCurrentState != 5) {
                    didPressButton(true, false);
                } else if (this.currentMessageObject.type == 16) {
                    this.delegate.didPressOther(this, this.otherX, this.otherY);
                } else {
                    didClickedImage();
                }
                return true;
            }
            if (i == R.id.acc_action_small_button) {
                didPressMiniButton(true);
            } else if (i == R.id.acc_action_msg_options) {
                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                if (chatMessageCellDelegate3 != null) {
                    if (this.currentMessageObject.type == 16) {
                        chatMessageCellDelegate3.didLongPress(this, 0.0f, 0.0f);
                    } else {
                        chatMessageCellDelegate3.didPressOther(this, this.otherX, this.otherY);
                    }
                }
            } else if (i == R.id.acc_action_open_forwarded_origin && (chatMessageCellDelegate = this.delegate) != null) {
                TLRPC$Chat tLRPC$Chat = this.currentForwardChannel;
                if (tLRPC$Chat != null) {
                    chatMessageCellDelegate.didPressChannelAvatar(this, tLRPC$Chat, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY);
                } else {
                    TLRPC$User tLRPC$User = this.currentForwardUser;
                    if (tLRPC$User != null) {
                        chatMessageCellDelegate.didPressUserAvatar(this, tLRPC$User, this.lastTouchX, this.lastTouchY);
                    } else if (this.currentForwardName != null) {
                        chatMessageCellDelegate.didPressHiddenForward(this);
                    }
                }
            }
            if ((!this.currentMessageObject.isVoice() && !this.currentMessageObject.isRoundVideo() && (!this.currentMessageObject.isMusic() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) || !this.seekBarAccessibilityDelegate.performAccessibilityActionInternal(i, bundle)) {
                return super.performAccessibilityAction(i, bundle);
            }
            return true;
        }
        return false;
    }

    public void setAnimationRunning(boolean z, boolean z2) {
        this.animationRunning = z;
        if (z) {
            this.willRemoved = z2;
        } else {
            this.willRemoved = false;
        }
        if (getParent() != null || !this.attachedToWindow) {
            return;
        }
        onDetachedFromWindow();
    }

    @Override // android.view.View
    public boolean onHoverEvent(MotionEvent motionEvent) {
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 9 || motionEvent.getAction() == 7) {
            for (int i = 0; i < this.accessibilityVirtualViewBounds.size(); i++) {
                if (this.accessibilityVirtualViewBounds.valueAt(i).contains(x, y)) {
                    int keyAt = this.accessibilityVirtualViewBounds.keyAt(i);
                    if (keyAt == this.currentFocusedVirtualView) {
                        return true;
                    }
                    this.currentFocusedVirtualView = keyAt;
                    sendAccessibilityEventForVirtualView(keyAt, 32768);
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 10) {
            this.currentFocusedVirtualView = 0;
        }
        return super.onHoverEvent(motionEvent);
    }

    @Override // android.view.View
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
    }

    @Override // android.view.View
    public AccessibilityNodeProvider getAccessibilityNodeProvider() {
        return new MessageAccessibilityNodeProvider();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendAccessibilityEventForVirtualView(int i, int i2) {
        sendAccessibilityEventForVirtualView(i, i2, null);
    }

    private void sendAccessibilityEventForVirtualView(int i, int i2, String str) {
        if (((AccessibilityManager) getContext().getSystemService("accessibility")).isTouchExplorationEnabled()) {
            AccessibilityEvent obtain = AccessibilityEvent.obtain(i2);
            obtain.setPackageName(getContext().getPackageName());
            obtain.setSource(this, i);
            if (str != null) {
                obtain.getText().add(str);
            }
            if (getParent() == null) {
                return;
            }
            getParent().requestSendAccessibilityEvent(this, obtain);
        }
    }

    public static Point getMessageSize(int i, int i2) {
        return getMessageSize(i, i2, 0, 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:25:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x004c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static Point getMessageSize(int i, int i2, int i3, int i4) {
        int min;
        if (i4 == 0 || i3 == 0) {
            if (AndroidUtilities.isTablet()) {
                min = AndroidUtilities.getMinTabletSide();
            } else if (i >= i2) {
                android.graphics.Point point = AndroidUtilities.displaySize;
                i3 = Math.min(point.x, point.y) - AndroidUtilities.dp(64.0f);
                i4 = AndroidUtilities.dp(100.0f) + i3;
                if (i3 > AndroidUtilities.getPhotoSize()) {
                    i3 = AndroidUtilities.getPhotoSize();
                }
                if (i4 > AndroidUtilities.getPhotoSize()) {
                    i4 = AndroidUtilities.getPhotoSize();
                }
            } else {
                android.graphics.Point point2 = AndroidUtilities.displaySize;
                min = Math.min(point2.x, point2.y);
            }
            i3 = (int) (min * 0.7f);
            i4 = AndroidUtilities.dp(100.0f) + i3;
            if (i3 > AndroidUtilities.getPhotoSize()) {
            }
            if (i4 > AndroidUtilities.getPhotoSize()) {
            }
        }
        float f = i;
        float f2 = i3;
        float f3 = f / f2;
        int i5 = (int) (f / f3);
        float f4 = i2;
        int i6 = (int) (f4 / f3);
        if (i5 == 0) {
            i5 = AndroidUtilities.dp(150.0f);
        }
        if (i6 == 0) {
            i6 = AndroidUtilities.dp(150.0f);
        }
        if (i6 > i4) {
            i5 = (int) (i5 / (i6 / i4));
        } else if (i6 < AndroidUtilities.dp(120.0f)) {
            i4 = AndroidUtilities.dp(120.0f);
            float f5 = f / (f4 / i4);
            if (f5 < f2) {
                i5 = (int) f5;
            }
        } else {
            i4 = i6;
        }
        return new Point(i5, i4);
    }

    public StaticLayout getDescriptionlayout() {
        return this.descriptionLayout;
    }

    public void setSelectedBackgroundProgress(float f) {
        this.selectedBackgroundProgress = f;
        invalidate();
    }

    public int computeHeight(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages != null && groupedMessages.messages.size() != 1) {
            int i = 0;
            for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i2);
                MessageObject.GroupedMessagePosition groupedMessagePosition = groupedMessages.positions.get(messageObject2);
                if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) != 0) {
                    setMessageContent(messageObject2, groupedMessages, false, false);
                    i += this.totalHeight + this.keyboardHeight;
                }
            }
            return i;
        }
        setMessageContent(messageObject, groupedMessages, false, false);
        this.photoImage.setIgnoreImageSet(false);
        this.avatarImage.setIgnoreImageSet(false);
        this.replyImageReceiver.setIgnoreImageSet(false);
        this.locationImageReceiver.setIgnoreImageSet(false);
        return this.totalHeight + this.keyboardHeight;
    }

    public void shakeView() {
        PropertyValuesHolder ofKeyframe = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0.0f, 0.0f), Keyframe.ofFloat(0.2f, 3.0f), Keyframe.ofFloat(0.4f, -3.0f), Keyframe.ofFloat(0.6f, 3.0f), Keyframe.ofFloat(0.8f, -3.0f), Keyframe.ofFloat(1.0f, 0.0f));
        Keyframe ofFloat = Keyframe.ofFloat(0.0f, 1.0f);
        Keyframe ofFloat2 = Keyframe.ofFloat(0.5f, 0.97f);
        Keyframe ofFloat3 = Keyframe.ofFloat(1.0f, 1.0f);
        PropertyValuesHolder ofKeyframe2 = PropertyValuesHolder.ofKeyframe(View.SCALE_X, ofFloat, ofFloat2, ofFloat3);
        PropertyValuesHolder ofKeyframe3 = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, ofFloat, ofFloat2, ofFloat3);
        AnimatorSet animatorSet = new AnimatorSet();
        this.shakeAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe2), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe3));
        this.shakeAnimation.setDuration(500L);
        this.shakeAnimation.start();
    }

    private void cancelShakeAnimation() {
        AnimatorSet animatorSet = this.shakeAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.shakeAnimation = null;
            setScaleX(1.0f);
            setScaleY(1.0f);
            setRotation(0.0f);
        }
    }

    public void setSlidingOffset(float f) {
        if (this.slidingOffsetX != f) {
            this.slidingOffsetX = f;
            updateTranslation();
        }
    }

    public void setAnimationOffsetX(float f) {
        if (this.animationOffsetX != f) {
            this.animationOffsetX = f;
            updateTranslation();
        }
    }

    private void updateTranslation() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        setTranslationX(this.slidingOffsetX + this.animationOffsetX + (!messageObject.isOutOwner() ? this.checkBoxTranslation : 0));
    }

    public float getNonAnimationTranslationX(boolean z) {
        boolean z2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.isOutOwner()) {
            if (z && ((z2 = this.checkBoxVisible) || this.checkBoxAnimationInProgress)) {
                this.checkBoxTranslation = (int) Math.ceil((z2 ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            }
            return this.slidingOffsetX + this.checkBoxTranslation;
        }
        return this.slidingOffsetX;
    }

    public float getSlidingOffsetX() {
        return this.slidingOffsetX;
    }

    public boolean willRemovedAfterAnimation() {
        return this.willRemoved;
    }

    public float getAnimationOffsetX() {
        return this.animationOffsetX;
    }

    @Override // android.view.View
    public void setTranslationX(float f) {
        super.setTranslationX(f);
    }

    public SeekBar getSeekBar() {
        return this.seekBar;
    }

    public SeekBarWaveform getSeekBarWaveform() {
        return this.seekBarWaveform;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class MessageAccessibilityNodeProvider extends AccessibilityNodeProvider {
        private Path linkPath;
        private Rect rect;
        private RectF rectF;

        private MessageAccessibilityNodeProvider() {
            this.linkPath = new Path();
            this.rectF = new RectF();
            this.rect = new Rect();
        }

        /* loaded from: classes3.dex */
        private class ProfileSpan extends ClickableSpan {
            private TLRPC$User user;

            public ProfileSpan(TLRPC$User tLRPC$User) {
                this.user = tLRPC$User;
            }

            @Override // android.text.style.ClickableSpan
            public void onClick(View view) {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.didPressUserAvatar(ChatMessageCell.this, this.user, 0.0f, 0.0f);
                }
            }
        }

        @Override // android.view.accessibility.AccessibilityNodeProvider
        public AccessibilityNodeInfo createAccessibilityNodeInfo(int i) {
            int i2;
            String str;
            String formatShortNumber;
            int i3;
            String str2;
            CharacterStyle[] characterStyleArr;
            CharacterStyle[] characterStyleArr2;
            String string;
            AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo;
            CharSequence charSequence;
            CharSequence charSequence2;
            CharacterStyle[] characterStyleArr3;
            TLRPC$ReactionCount tLRPC$ReactionCount;
            boolean z;
            TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction;
            int i4;
            String str3;
            String string2;
            int[] iArr = {0, 0};
            ChatMessageCell.this.getLocationOnScreen(iArr);
            int i5 = 10;
            if (i == -1) {
                AccessibilityNodeInfo obtain = AccessibilityNodeInfo.obtain(ChatMessageCell.this);
                ChatMessageCell.this.onInitializeAccessibilityNodeInfo(obtain);
                if (ChatMessageCell.this.accessibilityText == null) {
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                    ChatMessageCell chatMessageCell = ChatMessageCell.this;
                    if (chatMessageCell.isChat && chatMessageCell.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                        spannableStringBuilder.append((CharSequence) UserObject.getUserName(ChatMessageCell.this.currentUser));
                        spannableStringBuilder.setSpan(new ProfileSpan(ChatMessageCell.this.currentUser), 0, spannableStringBuilder.length(), 33);
                        spannableStringBuilder.append('\n');
                    }
                    if (ChatMessageCell.this.drawForwardedName) {
                        int i6 = 0;
                        while (i6 < 2) {
                            if (ChatMessageCell.this.forwardedNameLayout[i6] != null) {
                                spannableStringBuilder.append(ChatMessageCell.this.forwardedNameLayout[i6].getText());
                                spannableStringBuilder.append(i6 == 0 ? " " : "\n");
                            }
                            i6++;
                        }
                    }
                    if (!TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.messageText)) {
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.messageText);
                    }
                    if (ChatMessageCell.this.documentAttach == null || !((ChatMessageCell.this.documentAttachType == 1 || ChatMessageCell.this.documentAttachType == 2 || ChatMessageCell.this.documentAttachType == 4) && ChatMessageCell.this.buttonState == 1 && ChatMessageCell.this.loadingProgressLayout != null)) {
                        charSequence = "\n";
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        boolean isSending = ChatMessageCell.this.currentMessageObject.isSending();
                        charSequence = "\n";
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString(isSending ? "AccDescrUploadProgress" : "AccDescrDownloadProgress", isSending ? R.string.AccDescrUploadProgress : R.string.AccDescrDownloadProgress, AndroidUtilities.formatFileSize(ChatMessageCell.this.currentMessageObject.loadedFileSize), AndroidUtilities.formatFileSize(ChatMessageCell.this.lastLoadingSizeTotal)));
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isMusic()) {
                        charSequence2 = charSequence;
                        if (ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.isRoundVideo) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                            spannableStringBuilder.append((CharSequence) ", ");
                            if (ChatMessageCell.this.currentMessageObject.isContentUnread()) {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgNotPlayed", R.string.AccDescrMsgNotPlayed));
                            } else {
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgPlayed", R.string.AccDescrMsgPlayed));
                            }
                        }
                    } else {
                        charSequence2 = charSequence;
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, ChatMessageCell.this.currentMessageObject.getMusicAuthor(), ChatMessageCell.this.currentMessageObject.getMusicTitle()));
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                    }
                    if (ChatMessageCell.this.lastPoll != null) {
                        spannableStringBuilder.append((CharSequence) ", ");
                        spannableStringBuilder.append((CharSequence) ChatMessageCell.this.lastPoll.question);
                        spannableStringBuilder.append((CharSequence) ", ");
                        if (!ChatMessageCell.this.pollClosed) {
                            if (ChatMessageCell.this.lastPoll.quiz) {
                                if (ChatMessageCell.this.lastPoll.public_voters) {
                                    string2 = LocaleController.getString("QuizPoll", R.string.QuizPoll);
                                } else {
                                    string2 = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
                                }
                            } else if (ChatMessageCell.this.lastPoll.public_voters) {
                                string2 = LocaleController.getString("PublicPoll", R.string.PublicPoll);
                            } else {
                                string2 = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
                            }
                        } else {
                            string2 = LocaleController.getString("FinalResults", R.string.FinalResults);
                        }
                        spannableStringBuilder.append((CharSequence) string2);
                    }
                    if (!ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                        if (MessageObject.getMedia(ChatMessageCell.this.currentMessageObject.messageOwner) != null && !TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.caption)) {
                            spannableStringBuilder.append(charSequence2);
                            spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.caption);
                        }
                    } else {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.getVoiceTranscription());
                    }
                    if (ChatMessageCell.this.documentAttach != null) {
                        if (ChatMessageCell.this.documentAttachType == 4) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration(ChatMessageCell.this.currentMessageObject.getDuration()));
                        }
                        if (ChatMessageCell.this.buttonState == 0 || ChatMessageCell.this.documentAttachType == 1) {
                            spannableStringBuilder.append((CharSequence) ", ");
                            spannableStringBuilder.append((CharSequence) AndroidUtilities.formatFileSize(ChatMessageCell.this.documentAttach.size));
                        }
                    }
                    if (ChatMessageCell.this.currentMessageObject.isOut()) {
                        if (!ChatMessageCell.this.currentMessageObject.isSent()) {
                            if (!ChatMessageCell.this.currentMessageObject.isSending()) {
                                if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                                    spannableStringBuilder.append(charSequence2);
                                    spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSendingError", R.string.AccDescrMsgSendingError));
                                }
                            } else {
                                spannableStringBuilder.append(charSequence2);
                                spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSending", R.string.AccDescrMsgSending));
                                float progress = ChatMessageCell.this.radialProgress.getProgress();
                                if (progress > 0.0f) {
                                    spannableStringBuilder.append((CharSequence) ", ").append((CharSequence) Integer.toString(Math.round(progress * 100.0f))).append((CharSequence) "%");
                                }
                            }
                        } else {
                            spannableStringBuilder.append(charSequence2);
                            if (ChatMessageCell.this.currentMessageObject.scheduled) {
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrScheduledDate", R.string.AccDescrScheduledDate, ChatMessageCell.this.currentTimeString));
                            } else {
                                spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString)));
                                spannableStringBuilder.append((CharSequence) ", ");
                                if (ChatMessageCell.this.currentMessageObject.isUnread()) {
                                    i4 = R.string.AccDescrMsgUnread;
                                    str3 = "AccDescrMsgUnread";
                                } else {
                                    i4 = R.string.AccDescrMsgRead;
                                    str3 = "AccDescrMsgRead";
                                }
                                spannableStringBuilder.append((CharSequence) LocaleController.getString(str3, i4));
                            }
                        }
                    } else {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString)));
                    }
                    if (ChatMessageCell.this.getRepliesCount() > 0 && !ChatMessageCell.this.hasCommentLayout()) {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfReplies", ChatMessageCell.this.getRepliesCount(), new Object[0]));
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null && ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results != null) {
                        String str4 = "";
                        if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size() == 1) {
                            TLRPC$ReactionCount tLRPC$ReactionCount2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(0);
                            TLRPC$Reaction tLRPC$Reaction = tLRPC$ReactionCount2.reaction;
                            String str5 = tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon : str4;
                            int i7 = tLRPC$ReactionCount2.count;
                            if (i7 == 1) {
                                spannableStringBuilder.append(charSequence2);
                                if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions == null || ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.size() != 1 || (tLRPC$MessagePeerReaction = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.get(0)) == null) {
                                    z = false;
                                } else {
                                    TLRPC$User user = MessagesController.getInstance(ChatMessageCell.this.currentAccount).getUser(Long.valueOf(MessageObject.getPeerId(tLRPC$MessagePeerReaction.peer_id)));
                                    z = UserObject.isUserSelf(user);
                                    if (user != null) {
                                        str4 = UserObject.getFirstName(user);
                                    }
                                }
                                if (z) {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, str5));
                                } else {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrReactedWith", R.string.AccDescrReactedWith, str4, str5));
                                }
                            } else if (i7 > 1) {
                                spannableStringBuilder.append(charSequence2);
                                spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfPeopleReactions", tLRPC$ReactionCount2.count, str5));
                            }
                        } else {
                            spannableStringBuilder.append((CharSequence) LocaleController.getString("Reactions", R.string.Reactions)).append((CharSequence) ": ");
                            int size = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size();
                            for (int i8 = 0; i8 < size; i8++) {
                                TLRPC$Reaction tLRPC$Reaction2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(i8).reaction;
                                spannableStringBuilder.append((CharSequence) (tLRPC$Reaction2 instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction2).emoticon : str4)).append((CharSequence) " ").append((CharSequence) (tLRPC$ReactionCount.count + str4));
                                if (i8 + 1 < size) {
                                    spannableStringBuilder.append((CharSequence) ", ");
                                }
                            }
                            spannableStringBuilder.append(charSequence2);
                        }
                    }
                    if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & ConnectionsManager.RequestFlagDoNotWaitFloodWait) != 0) {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfViews", ChatMessageCell.this.currentMessageObject.messageOwner.views, new Object[0]));
                    }
                    spannableStringBuilder.append(charSequence2);
                    for (final CharacterStyle characterStyle : (CharacterStyle[]) spannableStringBuilder.getSpans(0, spannableStringBuilder.length(), ClickableSpan.class)) {
                        int spanStart = spannableStringBuilder.getSpanStart(characterStyle);
                        int spanEnd = spannableStringBuilder.getSpanEnd(characterStyle);
                        spannableStringBuilder.removeSpan(characterStyle);
                        spannableStringBuilder.setSpan(new ClickableSpan() { // from class: org.telegram.ui.Cells.ChatMessageCell.MessageAccessibilityNodeProvider.1
                            @Override // android.text.style.ClickableSpan
                            public void onClick(View view) {
                                CharacterStyle characterStyle2 = characterStyle;
                                if (!(characterStyle2 instanceof ProfileSpan)) {
                                    if (ChatMessageCell.this.delegate == null) {
                                        return;
                                    }
                                    ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, characterStyle, false);
                                    return;
                                }
                                ((ProfileSpan) characterStyle2).onClick(view);
                            }
                        }, spanStart, spanEnd, 33);
                    }
                    ChatMessageCell.this.accessibilityText = spannableStringBuilder;
                }
                int i9 = Build.VERSION.SDK_INT;
                if (i9 < 24) {
                    obtain.setContentDescription(ChatMessageCell.this.accessibilityText.toString());
                } else {
                    obtain.setText(ChatMessageCell.this.accessibilityText);
                }
                obtain.setEnabled(true);
                if (i9 >= 19 && (collectionItemInfo = obtain.getCollectionItemInfo()) != null) {
                    obtain.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo.obtain(collectionItemInfo.getRowIndex(), 1, 0, 1, false));
                }
                if (i9 >= 21) {
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_msg_options, LocaleController.getString("AccActionMessageOptions", R.string.AccActionMessageOptions)));
                    int iconForCurrentState = ChatMessageCell.this.getIconForCurrentState();
                    if (iconForCurrentState == 0) {
                        string = LocaleController.getString("AccActionPlay", R.string.AccActionPlay);
                    } else if (iconForCurrentState == 1) {
                        string = LocaleController.getString("AccActionPause", R.string.AccActionPause);
                    } else if (iconForCurrentState == 2) {
                        string = LocaleController.getString("AccActionDownload", R.string.AccActionDownload);
                    } else if (iconForCurrentState == 3) {
                        string = LocaleController.getString("AccActionCancelDownload", R.string.AccActionCancelDownload);
                    } else if (iconForCurrentState == 5) {
                        string = LocaleController.getString("AccActionOpenFile", R.string.AccActionOpenFile);
                    } else {
                        string = ChatMessageCell.this.currentMessageObject.type == 16 ? LocaleController.getString("CallAgain", R.string.CallAgain) : null;
                    }
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(16, string));
                    obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(32, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
                    if (ChatMessageCell.this.getMiniIconForCurrentState() == 2) {
                        obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_small_button, LocaleController.getString("AccActionDownload", R.string.AccActionDownload)));
                    }
                } else {
                    obtain.addAction(16);
                    obtain.addAction(32);
                }
                if ((ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.currentMessageObject.isRoundVideo() || ChatMessageCell.this.currentMessageObject.isMusic()) && MediaController.getInstance().isPlayingMessage(ChatMessageCell.this.currentMessageObject)) {
                    ChatMessageCell.this.seekBarAccessibilityDelegate.onInitializeAccessibilityNodeInfoInternal(obtain);
                }
                if (ChatMessageCell.this.useTranscribeButton && ChatMessageCell.this.transcribeButton != null) {
                    obtain.addChild(ChatMessageCell.this, 493);
                }
                if (i9 < 24) {
                    ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                    if (chatMessageCell2.isChat && chatMessageCell2.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                        obtain.addChild(ChatMessageCell.this, 5000);
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) {
                        Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                        int i10 = 0;
                        for (CharacterStyle characterStyle2 : (CharacterStyle[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class)) {
                            obtain.addChild(ChatMessageCell.this, i10 + 2000);
                            i10++;
                        }
                    }
                    if ((ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) && ChatMessageCell.this.captionLayout != null) {
                        Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                        int i11 = 0;
                        for (CharacterStyle characterStyle3 : (CharacterStyle[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class)) {
                            obtain.addChild(ChatMessageCell.this, i11 + 3000);
                            i11++;
                        }
                    }
                }
                Iterator it = ChatMessageCell.this.botButtons.iterator();
                int i12 = 0;
                while (it.hasNext()) {
                    BotButton botButton = (BotButton) it.next();
                    obtain.addChild(ChatMessageCell.this, i12 + 1000);
                    i12++;
                }
                if (ChatMessageCell.this.hintButtonVisible && ChatMessageCell.this.pollHintX != -1 && ChatMessageCell.this.currentMessageObject.isPoll()) {
                    obtain.addChild(ChatMessageCell.this, 495);
                }
                Iterator it2 = ChatMessageCell.this.pollButtons.iterator();
                int i13 = 0;
                while (it2.hasNext()) {
                    PollButton pollButton = (PollButton) it2.next();
                    obtain.addChild(ChatMessageCell.this, i13 + 500);
                    i13++;
                }
                if (ChatMessageCell.this.drawInstantView && !ChatMessageCell.this.instantButtonRect.isEmpty()) {
                    obtain.addChild(ChatMessageCell.this, 499);
                }
                if (ChatMessageCell.this.commentLayout != null) {
                    obtain.addChild(ChatMessageCell.this, 496);
                }
                if (ChatMessageCell.this.drawSideButton == 1) {
                    obtain.addChild(ChatMessageCell.this, 498);
                }
                ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                if (chatMessageCell3.replyNameLayout != null) {
                    obtain.addChild(chatMessageCell3, 497);
                }
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    if (Build.VERSION.SDK_INT >= 21) {
                        obtain.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_open_forwarded_origin, LocaleController.getString("AccActionOpenForwardedOrigin", R.string.AccActionOpenForwardedOrigin)));
                    } else {
                        obtain.addChild(ChatMessageCell.this, 494);
                    }
                }
                if (ChatMessageCell.this.drawSelectionBackground || ChatMessageCell.this.getBackground() != null) {
                    obtain.setSelected(true);
                }
                return obtain;
            }
            AccessibilityNodeInfo obtain2 = AccessibilityNodeInfo.obtain();
            obtain2.setSource(ChatMessageCell.this, i);
            obtain2.setParent(ChatMessageCell.this);
            obtain2.setPackageName(ChatMessageCell.this.getContext().getPackageName());
            if (i == 5000) {
                if (ChatMessageCell.this.currentUser == null) {
                    return null;
                }
                obtain2.setText(UserObject.getUserName(ChatMessageCell.this.currentUser));
                Rect rect = this.rect;
                int i14 = (int) ChatMessageCell.this.nameX;
                int i15 = (int) ChatMessageCell.this.nameY;
                int i16 = (int) (ChatMessageCell.this.nameX + ChatMessageCell.this.nameWidth);
                float f = ChatMessageCell.this.nameY;
                if (ChatMessageCell.this.nameLayout != null) {
                    i5 = ChatMessageCell.this.nameLayout.getHeight();
                }
                rect.set(i14, i15, i16, (int) (f + i5));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 3000) {
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || ChatMessageCell.this.captionLayout == null) {
                    return null;
                }
                Spannable spannable3 = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan linkById = getLinkById(i, true);
                if (linkById == null) {
                    return null;
                }
                int[] realSpanStartAndEnd = ChatMessageCell.this.getRealSpanStartAndEnd(spannable3, linkById);
                obtain2.setText(spannable3.subSequence(realSpanStartAndEnd[0], realSpanStartAndEnd[1]).toString());
                ChatMessageCell.this.captionLayout.getText().length();
                ChatMessageCell.this.captionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], this.linkPath);
                this.linkPath.computeBounds(this.rectF, true);
                Rect rect2 = this.rect;
                RectF rectF = this.rectF;
                rect2.set((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                this.rect.offset((int) ChatMessageCell.this.captionX, (int) ChatMessageCell.this.captionY);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 2000) {
                if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable)) {
                    return null;
                }
                Spannable spannable4 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                ClickableSpan linkById2 = getLinkById(i, false);
                if (linkById2 == null) {
                    return null;
                }
                int[] realSpanStartAndEnd2 = ChatMessageCell.this.getRealSpanStartAndEnd(spannable4, linkById2);
                obtain2.setText(spannable4.subSequence(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1]).toString());
                Iterator<MessageObject.TextLayoutBlock> it3 = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.iterator();
                while (true) {
                    if (!it3.hasNext()) {
                        break;
                    }
                    MessageObject.TextLayoutBlock next = it3.next();
                    int length = next.textLayout.getText().length();
                    int i17 = next.charactersOffset;
                    if (i17 <= realSpanStartAndEnd2[0] && length + i17 >= realSpanStartAndEnd2[1]) {
                        next.textLayout.getSelectionPath(realSpanStartAndEnd2[0] - i17, realSpanStartAndEnd2[1] - i17, this.linkPath);
                        this.linkPath.computeBounds(this.rectF, true);
                        Rect rect3 = this.rect;
                        RectF rectF2 = this.rectF;
                        rect3.set((int) rectF2.left, (int) rectF2.top, (int) rectF2.right, (int) rectF2.bottom);
                        this.rect.offset(0, (int) next.textYOffset);
                        this.rect.offset(ChatMessageCell.this.textX, ChatMessageCell.this.textY);
                        obtain2.setBoundsInParent(this.rect);
                        if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                            ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                        }
                        this.rect.offset(iArr[0], iArr[1]);
                        obtain2.setBoundsInScreen(this.rect);
                    }
                }
                obtain2.setClassName("android.widget.TextView");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.setLongClickable(true);
                obtain2.addAction(16);
                obtain2.addAction(32);
            } else if (i >= 1000) {
                int i18 = i - 1000;
                if (i18 >= ChatMessageCell.this.botButtons.size()) {
                    return null;
                }
                BotButton botButton2 = (BotButton) ChatMessageCell.this.botButtons.get(i18);
                obtain2.setText(botButton2.title.getText());
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setClickable(true);
                obtain2.addAction(16);
                this.rect.set(botButton2.x, botButton2.y, botButton2.x + botButton2.width, botButton2.y + botButton2.height);
                this.rect.offset(ChatMessageCell.this.currentMessageObject.isOutOwner() ? (ChatMessageCell.this.getMeasuredWidth() - ChatMessageCell.this.widthForButtons) - AndroidUtilities.dp(10.0f) : ChatMessageCell.this.backgroundDrawableLeft + AndroidUtilities.dp(ChatMessageCell.this.mediaBackground ? 1.0f : 7.0f), ChatMessageCell.this.layoutHeight);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
            } else if (i >= 500) {
                int i19 = i - 500;
                if (i19 >= ChatMessageCell.this.pollButtons.size()) {
                    return null;
                }
                PollButton pollButton2 = (PollButton) ChatMessageCell.this.pollButtons.get(i19);
                StringBuilder sb = new StringBuilder(pollButton2.title.getText());
                if (ChatMessageCell.this.pollVoted) {
                    obtain2.setSelected(pollButton2.chosen);
                    sb.append(", ");
                    sb.append(pollButton2.percent);
                    sb.append("%");
                    if (ChatMessageCell.this.lastPoll != null && ChatMessageCell.this.lastPoll.quiz && (pollButton2.chosen || pollButton2.correct)) {
                        sb.append(", ");
                        if (pollButton2.correct) {
                            i3 = R.string.AccDescrQuizCorrectAnswer;
                            str2 = "AccDescrQuizCorrectAnswer";
                        } else {
                            i3 = R.string.AccDescrQuizIncorrectAnswer;
                            str2 = "AccDescrQuizIncorrectAnswer";
                        }
                        sb.append(LocaleController.getString(str2, i3));
                    }
                } else {
                    obtain2.setClassName("android.widget.Button");
                }
                obtain2.setText(sb);
                obtain2.setEnabled(true);
                obtain2.addAction(16);
                int i20 = pollButton2.y + ChatMessageCell.this.namesOffset;
                int dp = ChatMessageCell.this.backgroundWidth - AndroidUtilities.dp(76.0f);
                Rect rect4 = this.rect;
                int i21 = pollButton2.x;
                rect4.set(i21, i20, dp + i21, pollButton2.height + i20);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 495) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                obtain2.setText(LocaleController.getString("AccDescrQuizExplanation", R.string.AccDescrQuizExplanation));
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.pollHintX - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintY - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintX + AndroidUtilities.dp(32.0f), ChatMessageCell.this.pollHintY + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 499) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.instantViewLayout != null) {
                    obtain2.setText(ChatMessageCell.this.instantViewLayout.getText());
                }
                obtain2.addAction(16);
                ChatMessageCell.this.instantButtonRect.round(this.rect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 498) {
                obtain2.setClassName("android.widget.ImageButton");
                obtain2.setEnabled(true);
                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                if (chatMessageCell4.isOpenChatByShare(chatMessageCell4.currentMessageObject)) {
                    obtain2.setContentDescription(LocaleController.getString("AccDescrOpenChat", R.string.AccDescrOpenChat));
                } else {
                    obtain2.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
                }
                obtain2.addAction(16);
                this.rect.set((int) ChatMessageCell.this.sideStartX, (int) ChatMessageCell.this.sideStartY, ((int) ChatMessageCell.this.sideStartX) + AndroidUtilities.dp(40.0f), ((int) ChatMessageCell.this.sideStartY) + AndroidUtilities.dp(32.0f));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 497) {
                obtain2.setEnabled(true);
                StringBuilder sb2 = new StringBuilder();
                sb2.append(LocaleController.getString("Reply", R.string.Reply));
                sb2.append(", ");
                StaticLayout staticLayout = ChatMessageCell.this.replyNameLayout;
                if (staticLayout != null) {
                    sb2.append(staticLayout.getText());
                    sb2.append(", ");
                }
                StaticLayout staticLayout2 = ChatMessageCell.this.replyTextLayout;
                if (staticLayout2 != null) {
                    sb2.append(staticLayout2.getText());
                }
                obtain2.setContentDescription(sb2.toString());
                obtain2.addAction(16);
                Rect rect5 = this.rect;
                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                int i22 = chatMessageCell5.replyStartX;
                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                rect5.set(i22, chatMessageCell5.replyStartY, Math.max(chatMessageCell5.replyNameWidth, ChatMessageCell.this.replyTextWidth) + i22, chatMessageCell6.replyStartY + ((int) chatMessageCell6.replyHeight));
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 494) {
                obtain2.setEnabled(true);
                StringBuilder sb3 = new StringBuilder();
                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                    int i23 = 0;
                    while (i23 < 2) {
                        sb3.append(ChatMessageCell.this.forwardedNameLayout[i23].getText());
                        sb3.append(i23 == 0 ? " " : "\n");
                        i23++;
                    }
                }
                obtain2.setContentDescription(sb3.toString());
                obtain2.addAction(16);
                int min = (int) Math.min(ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[0], ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[1]);
                this.rect.set(min, ChatMessageCell.this.forwardNameY, ChatMessageCell.this.forwardedNameWidth + min, ChatMessageCell.this.forwardNameY + ChatMessageCell.this.forwardHeight);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 496) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                int repliesCount = ChatMessageCell.this.getRepliesCount();
                if (ChatMessageCell.this.currentMessageObject != null && !ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() && !ChatMessageCell.this.currentMessageObject.isAnimatedEmoji()) {
                    if (ChatMessageCell.this.isRepliesChat) {
                        formatShortNumber = LocaleController.getString("ViewInChat", R.string.ViewInChat);
                    } else {
                        formatShortNumber = repliesCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]);
                    }
                } else {
                    formatShortNumber = (ChatMessageCell.this.isRepliesChat || repliesCount <= 0) ? null : LocaleController.formatShortNumber(repliesCount, null);
                }
                if (formatShortNumber != null) {
                    obtain2.setText(formatShortNumber);
                }
                obtain2.addAction(16);
                this.rect.set(ChatMessageCell.this.commentButtonRect);
                obtain2.setBoundsInParent(this.rect);
                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                }
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            } else if (i == 493) {
                obtain2.setClassName("android.widget.Button");
                obtain2.setEnabled(true);
                if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                    i2 = R.string.AccActionCloseTranscription;
                    str = "AccActionCloseTranscription";
                } else {
                    i2 = R.string.AccActionOpenTranscription;
                    str = "AccActionOpenTranscription";
                }
                obtain2.setText(LocaleController.getString(str, i2));
                obtain2.addAction(16);
                if (ChatMessageCell.this.transcribeButton != null) {
                    this.rect.set((int) ChatMessageCell.this.transcribeX, (int) ChatMessageCell.this.transcribeY, (int) (ChatMessageCell.this.transcribeX + ChatMessageCell.this.transcribeButton.width()), (int) (ChatMessageCell.this.transcribeY + ChatMessageCell.this.transcribeButton.height()));
                }
                obtain2.setBoundsInParent(this.rect);
                this.rect.offset(iArr[0], iArr[1]);
                obtain2.setBoundsInScreen(this.rect);
                obtain2.setClickable(true);
            }
            obtain2.setFocusable(true);
            obtain2.setVisibleToUser(true);
            return obtain2;
        }

        @Override // android.view.accessibility.AccessibilityNodeProvider
        public boolean performAction(int i, int i2, Bundle bundle) {
            if (i == -1) {
                ChatMessageCell.this.performAccessibilityAction(i2, bundle);
            } else if (i2 == 64) {
                ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 32768);
            } else {
                boolean z = false;
                if (i2 == 16) {
                    if (i == 5000) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell = ChatMessageCell.this;
                            chatMessageCellDelegate.didPressUserAvatar(chatMessageCell, chatMessageCell.currentUser, 0.0f, 0.0f);
                        }
                    } else if (i >= 3000) {
                        ClickableSpan linkById = getLinkById(i, true);
                        if (linkById != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 2000) {
                        ClickableSpan linkById2 = getLinkById(i, false);
                        if (linkById2 != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById2, false);
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        }
                    } else if (i >= 1000) {
                        int i3 = i - 1000;
                        if (i3 >= ChatMessageCell.this.botButtons.size()) {
                            return false;
                        }
                        BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i3);
                        if (ChatMessageCell.this.delegate != null && botButton.button != null) {
                            ChatMessageCell.this.delegate.didPressBotButton(ChatMessageCell.this, botButton.button);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i >= 500) {
                        int i4 = i - 500;
                        if (i4 >= ChatMessageCell.this.pollButtons.size()) {
                            return false;
                        }
                        PollButton pollButton = (PollButton) ChatMessageCell.this.pollButtons.get(i4);
                        if (ChatMessageCell.this.delegate != null) {
                            ArrayList<TLRPC$TL_pollAnswer> arrayList = new ArrayList<>();
                            arrayList.add(pollButton.answer);
                            ChatMessageCell.this.delegate.didPressVoteButtons(ChatMessageCell.this, arrayList, -1, 0, 0);
                        }
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                    } else if (i == 495) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressHint(ChatMessageCell.this, 0);
                        }
                    } else if (i == 499) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCellDelegate chatMessageCellDelegate2 = ChatMessageCell.this.delegate;
                            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                            chatMessageCellDelegate2.didPressInstantButton(chatMessageCell2, chatMessageCell2.drawInstantViewType);
                        }
                    } else if (i == 498) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressSideButton(ChatMessageCell.this);
                        }
                    } else if (i == 497) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                            if ((!chatMessageCell3.isThreadChat || chatMessageCell3.currentMessageObject.getReplyTopMsgId() != 0) && ChatMessageCell.this.currentMessageObject.hasValidReplyMessageObject()) {
                                ChatMessageCellDelegate chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                chatMessageCellDelegate3.didPressReplyMessage(chatMessageCell4, chatMessageCell4.currentMessageObject.getReplyMsgId());
                            }
                        }
                    } else if (i == 494) {
                        if (ChatMessageCell.this.delegate != null) {
                            if (ChatMessageCell.this.currentForwardChannel != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate4 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                chatMessageCellDelegate4.didPressChannelAvatar(chatMessageCell5, chatMessageCell5.currentForwardChannel, ChatMessageCell.this.currentMessageObject.messageOwner.fwd_from.channel_post, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY);
                            } else if (ChatMessageCell.this.currentForwardUser != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate5 = ChatMessageCell.this.delegate;
                                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                chatMessageCellDelegate5.didPressUserAvatar(chatMessageCell6, chatMessageCell6.currentForwardUser, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY);
                            } else if (ChatMessageCell.this.currentForwardName != null) {
                                ChatMessageCell.this.delegate.didPressHiddenForward(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 496) {
                        if (ChatMessageCell.this.delegate != null) {
                            ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                            if (chatMessageCell7.isRepliesChat) {
                                chatMessageCell7.delegate.didPressSideButton(ChatMessageCell.this);
                            } else {
                                chatMessageCell7.delegate.didPressCommentButton(ChatMessageCell.this);
                            }
                        }
                    } else if (i == 493 && ChatMessageCell.this.transcribeButton != null) {
                        ChatMessageCell.this.transcribeButton.onTap();
                    }
                } else if (i2 == 32) {
                    if (i >= 3000) {
                        z = true;
                    }
                    ClickableSpan linkById3 = getLinkById(i, z);
                    if (linkById3 != null) {
                        ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById3, true);
                        ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 2);
                    }
                }
            }
            return true;
        }

        private ClickableSpan getLinkById(int i, boolean z) {
            if (i == 5000) {
                return null;
            }
            if (z) {
                int i2 = i - 3000;
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || i2 < 0) {
                    return null;
                }
                Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class);
                if (clickableSpanArr.length > i2) {
                    return clickableSpanArr[i2];
                }
                return null;
            }
            int i3 = i - 2000;
            if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) || i3 < 0) {
                return null;
            }
            Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
            ClickableSpan[] clickableSpanArr2 = (ClickableSpan[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class);
            if (clickableSpanArr2.length > i3) {
                return clickableSpanArr2[i3];
            }
            return null;
        }
    }

    public void setImageCoords(float f, float f2, float f3, float f4) {
        this.photoImage.setImageCoords(f, f2, f3, f4);
        int i = this.documentAttachType;
        if (i == 4 || i == 2) {
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY;
            RadialProgress2 radialProgress2 = this.videoRadialProgress;
            int i2 = this.videoButtonX;
            radialProgress2.setProgressRect(i2, imageY, AndroidUtilities.dp(24.0f) + i2, this.videoButtonY + AndroidUtilities.dp(24.0f));
            this.buttonX = (int) (f + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY2;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i3 = this.buttonX;
            radialProgress22.setProgressRect(i3, imageY2, AndroidUtilities.dp(48.0f) + i3, this.buttonY + AndroidUtilities.dp(48.0f));
        }
    }

    @Override // android.view.View
    public float getAlpha() {
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            return this.alphaInternal;
        }
        return super.getAlpha();
    }

    @Override // android.view.View
    public void setAlpha(float f) {
        boolean z = false;
        boolean z2 = f == 1.0f;
        if (getAlpha() == 1.0f) {
            z = true;
        }
        if (z2 != z) {
            invalidate();
        }
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            this.alphaInternal = f;
            invalidate();
        } else {
            super.setAlpha(f);
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if ((groupedMessagePosition != null && (groupedMessagePosition.minY != 0 || groupedMessagePosition.minX != 0)) || ((this.enterTransitionInProgress && !this.currentMessageObject.isVoice()) || this.replyNameLayout == null || this.replyTextLayout == null)) {
            MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
            if (groupedMessagePosition2 != null) {
                int i = groupedMessagePosition2.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            if (this.reactionsLayoutInBubble.isSmall) {
                return;
            }
        }
        invalidate();
    }

    public int getCurrentBackgroundLeft() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return 0;
        }
        int i = messageDrawable.getBounds().left;
        if (this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        if ((!z && this.mediaBackground) || this.drawPinnedBottom) {
            return i;
        }
        if (z) {
            return (int) (i - (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress()));
        }
        return i - AndroidUtilities.dp(6.0f);
    }

    public int getCurrentBackgroundRight() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return getWidth();
        }
        int i = messageDrawable.getBounds().right;
        if (!this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        if ((!z && this.mediaBackground) || this.drawPinnedBottom) {
            return i;
        }
        if (z) {
            return (int) (i + (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress()));
        }
        return i + AndroidUtilities.dp(6.0f);
    }

    public TransitionParams getTransitionParams() {
        return this.transitionParams;
    }

    public int getTopMediaOffset() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.type != 14) {
            return 0;
        }
        return this.mediaOffsetY + this.namesOffset;
    }

    public int getTextX() {
        return this.textX;
    }

    public int getTextY() {
        return this.textY;
    }

    public boolean isPlayingRound() {
        return this.isRoundVideo && this.isPlayingRound;
    }

    public int getParentWidth() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            messageObject = this.messageObjectToSet;
        }
        return (messageObject == null || !messageObject.preview || (i = this.parentWidth) <= 0) ? AndroidUtilities.displaySize.x : i;
    }

    /* loaded from: classes3.dex */
    public class TransitionParams {
        public boolean animateBackgroundBoundsInner;
        boolean animateBotButtonsChanged;
        private boolean animateButton;
        public boolean animateChange;
        private int animateCommentArrowX;
        private boolean animateCommentDrawUnread;
        private int animateCommentUnreadX;
        private float animateCommentX;
        private boolean animateComments;
        private StaticLayout animateCommentsLayout;
        public boolean animateDrawBackground;
        private boolean animateDrawCommentNumber;
        public boolean animateDrawingTimeAlpha;
        private boolean animateEditedEnter;
        private StaticLayout animateEditedLayout;
        private int animateEditedWidthDiff;
        int animateForwardNameWidth;
        float animateForwardNameX;
        public boolean animateForwardedLayout;
        public int animateForwardedNamesOffset;
        private float animateFromButtonX;
        private float animateFromButtonY;
        public float animateFromReplyY;
        public float animateFromRoundVideoDotY;
        public float animateFromTextY;
        public int animateFromTimeX;
        public float animateFromTimeXPinned;
        private float animateFromTimeXReplies;
        private float animateFromTimeXViews;
        public boolean animateLocationIsExpired;
        boolean animateMessageText;
        private float animateNameX;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmoji;
        private StaticLayout animateOutCaptionLayout;
        private ArrayList<MessageObject.TextLayoutBlock> animateOutTextBlocks;
        private boolean animatePinned;
        public boolean animatePlayingRound;
        public boolean animateRadius;
        boolean animateReplaceCaptionLayout;
        private boolean animateReplies;
        private StaticLayout animateRepliesLayout;
        public boolean animateRoundVideoDotY;
        private boolean animateShouldDrawMenuDrawable;
        private boolean animateShouldDrawTimeOnMedia;
        private boolean animateSign;
        public boolean animateText;
        private StaticLayout animateTimeLayout;
        private int animateTimeWidth;
        public float animateToImageH;
        public float animateToImageW;
        public float animateToImageX;
        public float animateToImageY;
        public int[] animateToRadius;
        private int animateTotalCommentWidth;
        public boolean animateUseTranscribeButton;
        private StaticLayout animateViewsLayout;
        public float captionFromX;
        public float captionFromY;
        public float deltaBottom;
        public float deltaLeft;
        public float deltaRight;
        public float deltaTop;
        public boolean drawPinnedBottomBackground;
        public boolean ignoreAlpha;
        public boolean imageChangeBoundsTransition;
        public int lastBackgroundLeft;
        public int lastBackgroundRight;
        private float lastButtonX;
        private float lastButtonY;
        private int lastCommentArrowX;
        private boolean lastCommentDrawUnread;
        private StaticLayout lastCommentLayout;
        private int lastCommentUnreadX;
        private float lastCommentX;
        private int lastCommentsCount;
        public boolean lastDrawBackground;
        private boolean lastDrawCommentNumber;
        public StaticLayout lastDrawDocTitleLayout;
        public StaticLayout lastDrawInfoLayout;
        public float lastDrawLocationExpireProgress;
        public String lastDrawLocationExpireText;
        public float lastDrawReplyY;
        public float lastDrawRoundVideoDotY;
        public boolean lastDrawTime;
        private StaticLayout lastDrawingCaptionLayout;
        public float lastDrawingCaptionX;
        public float lastDrawingCaptionY;
        private boolean lastDrawingEdited;
        public float lastDrawingImageH;
        public float lastDrawingImageW;
        public float lastDrawingImageX;
        public float lastDrawingImageY;
        private ArrayList<MessageObject.TextLayoutBlock> lastDrawingTextBlocks;
        public float lastDrawingTextY;
        public boolean lastDrawnForwardedName;
        int lastForwardNameWidth;
        float lastForwardNameX;
        public int lastForwardedNamesOffset;
        private boolean lastIsPinned;
        private boolean lastIsPlayingRound;
        public boolean lastLocatinIsExpired;
        private int lastRepliesCount;
        private StaticLayout lastRepliesLayout;
        private boolean lastShouldDrawMenuDrawable;
        private boolean lastShouldDrawTimeOnMedia;
        private String lastSignMessage;
        private StaticLayout lastTimeLayout;
        private int lastTimeWidth;
        public int lastTimeX;
        public float lastTimeXPinned;
        private float lastTimeXReplies;
        private float lastTimeXViews;
        public int lastTopOffset;
        private int lastTotalCommentWidth;
        public boolean lastUseTranscribeButton;
        private int lastViewsCount;
        private StaticLayout lastViewsLayout;
        public boolean messageEntering;
        private boolean moveCaption;
        public boolean shouldAnimateTimeX;
        public float toDeltaLeft;
        public float toDeltaRight;
        public boolean transformGroupToSingleMessage;
        public boolean updatePhotoImageX;
        public boolean wasDraw;
        public int[] imageRoundRadius = new int[4];
        public float captionEnterProgress = 1.0f;
        public float changePinnedBottomProgress = 1.0f;
        public Rect lastDrawingBackgroundRect = new Rect();
        public float animateChangeProgress = 1.0f;
        private ArrayList<BotButton> lastDrawBotButtons = new ArrayList<>();
        private ArrayList<BotButton> transitionBotButtons = new ArrayList<>();
        public int lastStatusDrawableParams = -1;
        public StaticLayout[] lastDrawnForwardedNameLayout = new StaticLayout[2];
        public StaticLayout[] animatingForwardedNameLayout = new StaticLayout[2];

        public boolean supportChangeAnimation() {
            return true;
        }

        public TransitionParams() {
        }

        public void recordDrawingState() {
            this.wasDraw = true;
            this.lastDrawingImageX = ChatMessageCell.this.photoImage.getImageX();
            this.lastDrawingImageY = ChatMessageCell.this.photoImage.getImageY();
            this.lastDrawingImageW = ChatMessageCell.this.photoImage.getImageWidth();
            this.lastDrawingImageH = ChatMessageCell.this.photoImage.getImageHeight();
            System.arraycopy(ChatMessageCell.this.photoImage.getRoundRadius(), 0, this.imageRoundRadius, 0, 4);
            if (ChatMessageCell.this.currentBackgroundDrawable != null) {
                this.lastDrawingBackgroundRect.set(ChatMessageCell.this.currentBackgroundDrawable.getBounds());
            }
            this.lastDrawingTextBlocks = ChatMessageCell.this.currentMessageObject.textLayoutBlocks;
            this.lastDrawingEdited = ChatMessageCell.this.edited;
            this.lastDrawingCaptionX = ChatMessageCell.this.captionX;
            this.lastDrawingCaptionY = ChatMessageCell.this.captionY;
            this.lastDrawingCaptionLayout = ChatMessageCell.this.captionLayout;
            this.lastDrawBotButtons.clear();
            if (!ChatMessageCell.this.botButtons.isEmpty()) {
                this.lastDrawBotButtons.addAll(ChatMessageCell.this.botButtons);
            }
            if (ChatMessageCell.this.commentLayout != null) {
                this.lastCommentsCount = ChatMessageCell.this.getRepliesCount();
                this.lastTotalCommentWidth = ChatMessageCell.this.totalCommentWidth;
                this.lastCommentLayout = ChatMessageCell.this.commentLayout;
                this.lastCommentArrowX = ChatMessageCell.this.commentArrowX;
                this.lastCommentUnreadX = ChatMessageCell.this.commentUnreadX;
                this.lastCommentDrawUnread = ChatMessageCell.this.commentDrawUnread;
                this.lastCommentX = ChatMessageCell.this.commentX;
                this.lastDrawCommentNumber = ChatMessageCell.this.drawCommentNumber;
            }
            this.lastRepliesCount = ChatMessageCell.this.getRepliesCount();
            this.lastViewsCount = ChatMessageCell.this.getMessageObject().messageOwner.views;
            this.lastRepliesLayout = ChatMessageCell.this.repliesLayout;
            this.lastViewsLayout = ChatMessageCell.this.viewsLayout;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastIsPinned = chatMessageCell.isPinned;
            this.lastSignMessage = chatMessageCell.lastPostAuthor;
            this.lastDrawBackground = ChatMessageCell.this.drawBackground;
            this.lastUseTranscribeButton = ChatMessageCell.this.useTranscribeButton;
            this.lastButtonX = ChatMessageCell.this.buttonX;
            this.lastButtonY = ChatMessageCell.this.buttonY;
            this.lastDrawTime = !ChatMessageCell.this.forceNotDrawTime;
            this.lastTimeX = ChatMessageCell.this.timeX;
            this.lastTimeLayout = ChatMessageCell.this.timeLayout;
            this.lastTimeWidth = ChatMessageCell.this.timeWidth;
            this.lastShouldDrawTimeOnMedia = ChatMessageCell.this.shouldDrawTimeOnMedia();
            this.lastTopOffset = ChatMessageCell.this.getTopMediaOffset();
            this.lastShouldDrawMenuDrawable = ChatMessageCell.this.shouldDrawMenuDrawable();
            this.lastLocatinIsExpired = ChatMessageCell.this.locationExpired;
            this.lastIsPlayingRound = ChatMessageCell.this.isPlayingRound;
            this.lastDrawingTextY = ChatMessageCell.this.textY;
            int unused = ChatMessageCell.this.textX;
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            this.lastForwardedNamesOffset = ChatMessageCell.this.namesOffset;
            this.lastForwardNameWidth = ChatMessageCell.this.forwardedNameWidth;
            this.lastBackgroundLeft = ChatMessageCell.this.getCurrentBackgroundLeft();
            this.lastBackgroundRight = ChatMessageCell.this.currentBackgroundDrawable.getBounds().right;
            ChatMessageCell.this.reactionsLayoutInBubble.recordDrawingState();
            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
            if (chatMessageCell2.replyNameLayout != null) {
                this.lastDrawReplyY = chatMessageCell2.replyStartY;
            } else {
                this.lastDrawReplyY = 0.0f;
            }
        }

        public void recordDrawingStatePreview() {
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            this.lastForwardedNamesOffset = ChatMessageCell.this.namesOffset;
            this.lastForwardNameWidth = ChatMessageCell.this.forwardedNameWidth;
        }

        /* JADX WARN: Removed duplicated region for block: B:103:0x03b3  */
        /* JADX WARN: Removed duplicated region for block: B:114:0x0405  */
        /* JADX WARN: Removed duplicated region for block: B:117:0x041a  */
        /* JADX WARN: Removed duplicated region for block: B:121:0x046c  */
        /* JADX WARN: Removed duplicated region for block: B:124:0x0478  */
        /* JADX WARN: Removed duplicated region for block: B:127:0x0484  */
        /* JADX WARN: Removed duplicated region for block: B:130:0x0494  */
        /* JADX WARN: Removed duplicated region for block: B:133:0x04a3  */
        /* JADX WARN: Removed duplicated region for block: B:138:0x04db  */
        /* JADX WARN: Removed duplicated region for block: B:141:0x04e8  */
        /* JADX WARN: Removed duplicated region for block: B:152:0x051b  */
        /* JADX WARN: Removed duplicated region for block: B:160:0x0420  */
        /* JADX WARN: Removed duplicated region for block: B:170:0x0376  */
        /* JADX WARN: Removed duplicated region for block: B:178:0x02e7  */
        /* JADX WARN: Removed duplicated region for block: B:181:0x02ed  */
        /* JADX WARN: Removed duplicated region for block: B:195:0x032c  */
        /* JADX WARN: Removed duplicated region for block: B:203:0x028d  */
        /* JADX WARN: Removed duplicated region for block: B:219:0x00ea  */
        /* JADX WARN: Removed duplicated region for block: B:42:0x00c8  */
        /* JADX WARN: Removed duplicated region for block: B:58:0x01eb  */
        /* JADX WARN: Removed duplicated region for block: B:61:0x01fa  */
        /* JADX WARN: Removed duplicated region for block: B:64:0x0207  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x02c9  */
        /* JADX WARN: Removed duplicated region for block: B:87:0x033c  */
        /* JADX WARN: Removed duplicated region for block: B:91:0x0371  */
        /* JADX WARN: Removed duplicated region for block: B:94:0x037b  */
        /* JADX WARN: Removed duplicated region for block: B:98:0x0397  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean animateChange() {
            boolean z;
            StaticLayout staticLayout;
            StaticLayout staticLayout2;
            boolean z2;
            ChatMessageCell chatMessageCell;
            boolean z3;
            ChatMessageCell chatMessageCell2;
            ReactionsLayoutInBubble reactionsLayoutInBubble;
            StaticLayout staticLayout3;
            boolean z4;
            int i = 0;
            if (!this.wasDraw) {
                return false;
            }
            this.animateMessageText = false;
            if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != this.lastDrawingTextBlocks) {
                if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != null && this.lastDrawingTextBlocks != null && ChatMessageCell.this.currentMessageObject.textLayoutBlocks.size() == this.lastDrawingTextBlocks.size()) {
                    for (int i2 = 0; i2 < this.lastDrawingTextBlocks.size(); i2++) {
                        String charSequence = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i2).textLayout == null ? null : ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i2).textLayout.getText().toString();
                        String charSequence2 = this.lastDrawingTextBlocks.get(i2).textLayout == null ? null : this.lastDrawingTextBlocks.get(i2).textLayout.getText().toString();
                        if ((charSequence != null || charSequence2 == null) && ((charSequence == null || charSequence2 != null) && charSequence.equals(charSequence2))) {
                            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = chatMessageCell3.animatedEmojiStack;
                            if (emojiGroupedSpans != null) {
                                emojiGroupedSpans.replaceLayout(chatMessageCell3.currentMessageObject.textLayoutBlocks.get(i2).textLayout, this.lastDrawingTextBlocks.get(i2).textLayout);
                            }
                        }
                    }
                    z4 = true;
                    if (z4) {
                        this.animateMessageText = true;
                        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.lastDrawingTextBlocks;
                        this.animateOutTextBlocks = arrayList;
                        this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, (View) ChatMessageCell.this, this.animateOutAnimateEmoji, arrayList, true);
                        ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                        chatMessageCell4.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell4, chatMessageCell4.animatedEmojiStack, chatMessageCell4.currentMessageObject.textLayoutBlocks);
                        z = true;
                        if (ChatMessageCell.this.edited || this.lastDrawingEdited || ChatMessageCell.this.timeLayout == null) {
                            if (!ChatMessageCell.this.edited && this.lastDrawingEdited && ChatMessageCell.this.timeLayout != null) {
                                this.animateTimeLayout = this.lastTimeLayout;
                                int i3 = ChatMessageCell.this.timeWidth;
                                int i4 = this.lastTimeWidth;
                                this.animateEditedWidthDiff = i3 - i4;
                                this.animateEditedEnter = true;
                                this.animateTimeWidth = i4;
                                this.animateFromTimeX = this.lastTimeX;
                                this.shouldAnimateTimeX = true;
                                z = true;
                            }
                            this.animateDrawBackground = false;
                            if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
                                this.animateDrawBackground = true;
                                z = true;
                            }
                            this.animateUseTranscribeButton = false;
                            if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
                                this.animateUseTranscribeButton = true;
                                z = true;
                            }
                            staticLayout = ChatMessageCell.this.captionLayout;
                            staticLayout2 = this.lastDrawingCaptionLayout;
                            if (staticLayout == staticLayout2) {
                                if (ChatMessageCell.this.captionLayout != null && this.lastDrawingCaptionLayout != null) {
                                    ChatMessageCell.this.updateCaptionLayout();
                                    if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                                        this.moveCaption = true;
                                        this.captionFromX = this.lastDrawingCaptionX;
                                        this.captionFromY = this.lastDrawingCaptionY;
                                        z = true;
                                    }
                                }
                            } else {
                                String charSequence3 = staticLayout2 == null ? null : staticLayout2.getText().toString();
                                String charSequence4 = ChatMessageCell.this.captionLayout == null ? null : ChatMessageCell.this.captionLayout.getText().toString();
                                if ((charSequence4 == null) != (charSequence3 == null) || (charSequence3 != null && !charSequence3.equals(charSequence4))) {
                                    this.animateReplaceCaptionLayout = true;
                                    StaticLayout staticLayout4 = this.lastDrawingCaptionLayout;
                                    this.animateOutCaptionLayout = staticLayout4;
                                    this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, staticLayout4);
                                    ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                    chatMessageCell5.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell5, chatMessageCell5.animatedEmojiStack, chatMessageCell5.captionLayout);
                                } else {
                                    ChatMessageCell.this.updateCaptionLayout();
                                    if (this.lastDrawingCaptionX != ChatMessageCell.this.captionX || this.lastDrawingCaptionY != ChatMessageCell.this.captionY) {
                                        this.moveCaption = true;
                                        this.captionFromX = this.lastDrawingCaptionX;
                                        this.captionFromY = this.lastDrawingCaptionY;
                                    }
                                }
                                z = true;
                            }
                            if (this.lastDrawBotButtons.isEmpty() || !ChatMessageCell.this.botButtons.isEmpty()) {
                                if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                                    this.animateBotButtonsChanged = true;
                                }
                                if (!this.animateBotButtonsChanged) {
                                    for (int i5 = 0; i5 < ChatMessageCell.this.botButtons.size(); i5++) {
                                        BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i5);
                                        BotButton botButton2 = this.lastDrawBotButtons.get(i5);
                                        if (botButton.x != botButton2.x || botButton.width != botButton2.width) {
                                            this.animateBotButtonsChanged = true;
                                            break;
                                        }
                                    }
                                }
                                if (this.animateBotButtonsChanged) {
                                    this.transitionBotButtons.addAll(this.lastDrawBotButtons);
                                }
                            }
                            if ((ChatMessageCell.this.documentAttachType != 3 || ChatMessageCell.this.documentAttachType == 1) && (ChatMessageCell.this.buttonX != this.lastButtonX || ChatMessageCell.this.buttonY != this.lastButtonY)) {
                                this.animateFromButtonX = this.lastButtonX;
                                this.animateFromButtonY = this.lastButtonY;
                                this.animateButton = true;
                                z = true;
                            }
                            z2 = this.lastIsPinned;
                            chatMessageCell = ChatMessageCell.this;
                            if (z2 != chatMessageCell.isPinned) {
                                this.animatePinned = true;
                                z = true;
                                z3 = true;
                            } else {
                                z3 = false;
                            }
                            if ((this.lastRepliesLayout == null || chatMessageCell.repliesLayout != null) && this.lastRepliesCount != ChatMessageCell.this.getRepliesCount()) {
                                this.animateRepliesLayout = this.lastRepliesLayout;
                                this.animateReplies = true;
                                z = true;
                                z3 = true;
                            }
                            if (this.lastViewsLayout != null && this.lastViewsCount != ChatMessageCell.this.getMessageObject().messageOwner.views) {
                                this.animateViewsLayout = this.lastViewsLayout;
                                z = true;
                                z3 = true;
                            }
                            if (ChatMessageCell.this.commentLayout != null && this.lastCommentsCount != ChatMessageCell.this.getRepliesCount()) {
                                staticLayout3 = this.lastCommentLayout;
                                if (staticLayout3 == null && !TextUtils.equals(staticLayout3.getText(), ChatMessageCell.this.commentLayout.getText())) {
                                    this.animateCommentsLayout = this.lastCommentLayout;
                                } else {
                                    this.animateCommentsLayout = null;
                                }
                                this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                                this.animateCommentX = this.lastCommentX;
                                this.animateCommentArrowX = this.lastCommentArrowX;
                                this.animateCommentUnreadX = this.lastCommentUnreadX;
                                this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                                this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                                this.animateComments = true;
                                z = true;
                            }
                            if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                                this.animateSign = true;
                                this.animateNameX = ChatMessageCell.this.nameX;
                                z = true;
                            }
                            if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                                this.animateDrawingTimeAlpha = true;
                                this.animateViewsLayout = null;
                            } else if (this.lastShouldDrawTimeOnMedia == ChatMessageCell.this.shouldDrawTimeOnMedia()) {
                                if (z3 || Math.abs(ChatMessageCell.this.timeX - this.lastTimeX) > 1) {
                                    this.shouldAnimateTimeX = true;
                                    this.animateTimeWidth = this.lastTimeWidth;
                                    this.animateFromTimeX = this.lastTimeX;
                                    this.animateFromTimeXViews = this.lastTimeXViews;
                                    this.animateFromTimeXReplies = this.lastTimeXReplies;
                                    this.animateFromTimeXPinned = this.lastTimeXPinned;
                                }
                                if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                                    this.animateShouldDrawMenuDrawable = true;
                                }
                                if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                                    this.animateLocationIsExpired = true;
                                }
                                if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                                    this.animatePlayingRound = true;
                                    z = true;
                                }
                                if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                                    this.animateText = true;
                                    this.animateFromTextY = this.lastDrawingTextY;
                                    z = true;
                                }
                                if (ChatMessageCell.this.currentMessageObject != null && this.lastDrawnForwardedName != ChatMessageCell.this.currentMessageObject.needDrawForwarded()) {
                                    this.animateForwardedLayout = true;
                                    StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
                                    StaticLayout[] staticLayoutArr2 = this.lastDrawnForwardedNameLayout;
                                    staticLayoutArr[0] = staticLayoutArr2[0];
                                    staticLayoutArr[1] = staticLayoutArr2[1];
                                    this.animateForwardNameX = this.lastForwardNameX;
                                    this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                                    this.animateForwardNameWidth = this.lastForwardNameWidth;
                                    z = true;
                                }
                                ChatMessageCell.this.updateReactionLayoutPosition();
                                if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                                    z = true;
                                }
                                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                                    int i6 = ChatMessageCell.this.layoutHeight;
                                    if (ChatMessageCell.this.drawPinnedBottom) {
                                        i = 2;
                                    }
                                    float dp = i6 - AndroidUtilities.dp(28 - i);
                                    if (!ChatMessageCell.this.reactionsLayoutInBubble.isEmpty) {
                                        dp -= reactionsLayoutInBubble.totalHeight;
                                    }
                                    float f = this.lastDrawRoundVideoDotY;
                                    if (dp != f) {
                                        this.animateRoundVideoDotY = true;
                                        this.animateFromRoundVideoDotY = f;
                                        z = true;
                                    }
                                }
                                if (ChatMessageCell.this.replyNameLayout != null) {
                                    float f2 = this.lastDrawReplyY;
                                    if (chatMessageCell2.replyStartX != f2 && f2 != 0.0f) {
                                        this.animateFromReplyY = f2;
                                        return true;
                                    }
                                }
                                return z;
                            } else {
                                this.animateEditedEnter = false;
                                this.animateShouldDrawTimeOnMedia = true;
                                this.animateFromTimeX = this.lastTimeX;
                                this.animateTimeLayout = this.lastTimeLayout;
                                this.animateTimeWidth = this.lastTimeWidth;
                            }
                            z = true;
                            if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                            }
                            if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                            }
                            if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                            }
                            if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                            }
                            if (ChatMessageCell.this.currentMessageObject != null) {
                                this.animateForwardedLayout = true;
                                StaticLayout[] staticLayoutArr3 = this.animatingForwardedNameLayout;
                                StaticLayout[] staticLayoutArr22 = this.lastDrawnForwardedNameLayout;
                                staticLayoutArr3[0] = staticLayoutArr22[0];
                                staticLayoutArr3[1] = staticLayoutArr22[1];
                                this.animateForwardNameX = this.lastForwardNameX;
                                this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                                this.animateForwardNameWidth = this.lastForwardNameWidth;
                                z = true;
                            }
                            ChatMessageCell.this.updateReactionLayoutPosition();
                            if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                            }
                            if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                            }
                            if (ChatMessageCell.this.replyNameLayout != null) {
                            }
                            return z;
                        }
                        String string = LocaleController.getString("EditedMessage", R.string.EditedMessage);
                        CharSequence text = ChatMessageCell.this.timeLayout.getText();
                        int indexOf = text.toString().indexOf(string);
                        if (indexOf >= 0) {
                            if (indexOf == 0) {
                                this.animateEditedLayout = new StaticLayout(string, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                                spannableStringBuilder.append((CharSequence) string);
                                spannableStringBuilder.append(text.subSequence(string.length(), text.length()));
                                spannableStringBuilder.setSpan(new EmptyStubSpan(), 0, string.length(), 0);
                                this.animateTimeLayout = new StaticLayout(spannableStringBuilder, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                this.animateEditedWidthDiff = ChatMessageCell.this.timeWidth - this.lastTimeWidth;
                            } else {
                                this.animateEditedWidthDiff = 0;
                                this.animateEditedLayout = null;
                                this.animateTimeLayout = this.lastTimeLayout;
                            }
                            this.animateEditedEnter = true;
                            this.animateTimeWidth = this.lastTimeWidth;
                            this.animateFromTimeX = this.lastTimeX;
                            this.shouldAnimateTimeX = true;
                            z = true;
                        }
                        this.animateDrawBackground = false;
                        if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
                        }
                        this.animateUseTranscribeButton = false;
                        if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
                        }
                        staticLayout = ChatMessageCell.this.captionLayout;
                        staticLayout2 = this.lastDrawingCaptionLayout;
                        if (staticLayout == staticLayout2) {
                        }
                        if (this.lastDrawBotButtons.isEmpty()) {
                        }
                        if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                        }
                        if (!this.animateBotButtonsChanged) {
                        }
                        if (this.animateBotButtonsChanged) {
                        }
                        if (ChatMessageCell.this.documentAttachType != 3) {
                        }
                        this.animateFromButtonX = this.lastButtonX;
                        this.animateFromButtonY = this.lastButtonY;
                        this.animateButton = true;
                        z = true;
                        z2 = this.lastIsPinned;
                        chatMessageCell = ChatMessageCell.this;
                        if (z2 != chatMessageCell.isPinned) {
                        }
                        if (this.lastRepliesLayout == null) {
                        }
                        this.animateRepliesLayout = this.lastRepliesLayout;
                        this.animateReplies = true;
                        z = true;
                        z3 = true;
                        if (this.lastViewsLayout != null) {
                            this.animateViewsLayout = this.lastViewsLayout;
                            z = true;
                            z3 = true;
                        }
                        if (ChatMessageCell.this.commentLayout != null) {
                            staticLayout3 = this.lastCommentLayout;
                            if (staticLayout3 == null) {
                            }
                            this.animateCommentsLayout = null;
                            this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                            this.animateCommentX = this.lastCommentX;
                            this.animateCommentArrowX = this.lastCommentArrowX;
                            this.animateCommentUnreadX = this.lastCommentUnreadX;
                            this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                            this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                            this.animateComments = true;
                            z = true;
                        }
                        if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                        }
                        if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                        }
                        z = true;
                        if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                        }
                        if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                        }
                        if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                        }
                        if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
                        }
                        if (ChatMessageCell.this.currentMessageObject != null) {
                        }
                        ChatMessageCell.this.updateReactionLayoutPosition();
                        if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                        }
                        if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                        }
                        if (ChatMessageCell.this.replyNameLayout != null) {
                        }
                        return z;
                    }
                    ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                    chatMessageCell6.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell6, chatMessageCell6.animatedEmojiStack, chatMessageCell6.currentMessageObject.textLayoutBlocks);
                }
                z4 = false;
                if (z4) {
                }
            }
            z = false;
            if (ChatMessageCell.this.edited) {
            }
            if (!ChatMessageCell.this.edited) {
                this.animateTimeLayout = this.lastTimeLayout;
                int i32 = ChatMessageCell.this.timeWidth;
                int i42 = this.lastTimeWidth;
                this.animateEditedWidthDiff = i32 - i42;
                this.animateEditedEnter = true;
                this.animateTimeWidth = i42;
                this.animateFromTimeX = this.lastTimeX;
                this.shouldAnimateTimeX = true;
                z = true;
            }
            this.animateDrawBackground = false;
            if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
            }
            this.animateUseTranscribeButton = false;
            if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
            }
            staticLayout = ChatMessageCell.this.captionLayout;
            staticLayout2 = this.lastDrawingCaptionLayout;
            if (staticLayout == staticLayout2) {
            }
            if (this.lastDrawBotButtons.isEmpty()) {
            }
            if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
            }
            if (!this.animateBotButtonsChanged) {
            }
            if (this.animateBotButtonsChanged) {
            }
            if (ChatMessageCell.this.documentAttachType != 3) {
            }
            this.animateFromButtonX = this.lastButtonX;
            this.animateFromButtonY = this.lastButtonY;
            this.animateButton = true;
            z = true;
            z2 = this.lastIsPinned;
            chatMessageCell = ChatMessageCell.this;
            if (z2 != chatMessageCell.isPinned) {
            }
            if (this.lastRepliesLayout == null) {
            }
            this.animateRepliesLayout = this.lastRepliesLayout;
            this.animateReplies = true;
            z = true;
            z3 = true;
            if (this.lastViewsLayout != null) {
            }
            if (ChatMessageCell.this.commentLayout != null) {
            }
            if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
            }
            if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
            }
            z = true;
            if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
            }
            if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
            }
            if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
            }
            if (this.lastDrawingTextY != ChatMessageCell.this.textY) {
            }
            if (ChatMessageCell.this.currentMessageObject != null) {
            }
            ChatMessageCell.this.updateReactionLayoutPosition();
            if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
            }
            if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
            }
            if (ChatMessageCell.this.replyNameLayout != null) {
            }
            return z;
        }

        public void onDetach() {
            this.wasDraw = false;
        }

        public void resetAnimation() {
            this.animateChange = false;
            this.animatePinned = false;
            this.animateBackgroundBoundsInner = false;
            this.deltaLeft = 0.0f;
            this.deltaRight = 0.0f;
            this.deltaBottom = 0.0f;
            this.deltaTop = 0.0f;
            this.toDeltaLeft = 0.0f;
            this.toDeltaRight = 0.0f;
            if (this.imageChangeBoundsTransition && this.animateToImageW != 0.0f && this.animateToImageH != 0.0f) {
                ChatMessageCell.this.photoImage.setImageCoords(this.animateToImageX, this.animateToImageY, this.animateToImageW, this.animateToImageH);
            }
            if (this.animateRadius) {
                ChatMessageCell.this.photoImage.setRoundRadius(this.animateToRadius);
            }
            this.animateToImageX = 0.0f;
            this.animateToImageY = 0.0f;
            this.animateToImageW = 0.0f;
            this.animateToImageH = 0.0f;
            this.imageChangeBoundsTransition = false;
            this.changePinnedBottomProgress = 1.0f;
            this.captionEnterProgress = 1.0f;
            this.animateRadius = false;
            this.animateChangeProgress = 1.0f;
            this.animateMessageText = false;
            this.animateOutTextBlocks = null;
            this.animateEditedLayout = null;
            this.animateTimeLayout = null;
            this.animateEditedEnter = false;
            this.animateReplaceCaptionLayout = false;
            this.transformGroupToSingleMessage = false;
            this.animateOutCaptionLayout = null;
            AnimatedEmojiSpan.release(ChatMessageCell.this, this.animateOutAnimateEmoji);
            this.animateOutAnimateEmoji = null;
            this.moveCaption = false;
            this.animateDrawingTimeAlpha = false;
            this.transitionBotButtons.clear();
            this.animateButton = false;
            this.animateReplies = false;
            this.animateRepliesLayout = null;
            this.animateComments = false;
            this.animateCommentsLayout = null;
            this.animateViewsLayout = null;
            this.animateShouldDrawTimeOnMedia = false;
            this.animateShouldDrawMenuDrawable = false;
            this.shouldAnimateTimeX = false;
            this.animateDrawBackground = false;
            this.animateSign = false;
            this.animateDrawingTimeAlpha = false;
            this.animateLocationIsExpired = false;
            this.animatePlayingRound = false;
            this.animateText = false;
            this.animateForwardedLayout = false;
            StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
            staticLayoutArr[0] = null;
            staticLayoutArr[1] = null;
            this.animateRoundVideoDotY = false;
            ChatMessageCell.this.reactionsLayoutInBubble.resetAnimation();
        }

        /* JADX WARN: Removed duplicated region for block: B:11:0x006b  */
        /* JADX WARN: Removed duplicated region for block: B:14:0x0072  */
        /* JADX WARN: Removed duplicated region for block: B:17:0x0077  */
        /* JADX WARN: Removed duplicated region for block: B:21:0x006d  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public int createStatusDrawableParams() {
            int i;
            boolean z;
            boolean z2;
            int i2 = 8;
            int i3 = 4;
            boolean z3 = true;
            if (ChatMessageCell.this.currentMessageObject.isOutOwner()) {
                if (ChatMessageCell.this.currentMessageObject.isSending() || ChatMessageCell.this.currentMessageObject.isEditing()) {
                    i = 0;
                    z3 = false;
                    z = true;
                } else if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                    i = 0;
                    z3 = false;
                    z = false;
                    z2 = true;
                    int i4 = i | (!z3 ? 2 : 0);
                    if (!z) {
                        i3 = 0;
                    }
                    int i5 = i4 | i3;
                    if (!z2) {
                        i2 = 0;
                    }
                    return i5 | i2;
                } else {
                    if (ChatMessageCell.this.currentMessageObject.isSent()) {
                        i = (ChatMessageCell.this.currentMessageObject.scheduled || ChatMessageCell.this.currentMessageObject.isUnread()) ? 0 : 1;
                    } else {
                        i = 0;
                        z3 = false;
                    }
                    z = false;
                }
                z2 = false;
                int i42 = i | (!z3 ? 2 : 0);
                if (!z) {
                }
                int i52 = i42 | i3;
                if (!z2) {
                }
                return i52 | i2;
            }
            if (!ChatMessageCell.this.currentMessageObject.isSending() && !ChatMessageCell.this.currentMessageObject.isEditing()) {
                z3 = false;
            }
            boolean isSendError = ChatMessageCell.this.currentMessageObject.isSendError();
            if (!z3) {
                i3 = 0;
            }
            if (!isSendError) {
                i2 = 0;
            }
            return i3 | i2;
        }
    }

    private int getThemedColor(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Integer color = resourcesProvider != null ? resourcesProvider.getColor(str) : null;
        return color != null ? color.intValue() : Theme.getColor(str);
    }

    private Drawable getThemedDrawable(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Drawable drawable = resourcesProvider != null ? resourcesProvider.getDrawable(str) : null;
        return drawable != null ? drawable : Theme.getThemeDrawable(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Paint getThemedPaint(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Paint paint = resourcesProvider != null ? resourcesProvider.getPaint(str) : null;
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean hasGradientService() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.hasGradientService() : Theme.hasGradientService();
    }
}
